{"map":"{\"version\":3,\"sources\":[\"webpack/bootstrap\",\"/Users/jonahallemonne/Documents/Cours/stage/chateau/chateaux-socrea/webgl/oimojstest/node_modules/three/build/three.module.js\",\"/Users/jonahallemonne/Documents/Cours/stage/chateau/chateaux-socrea/webgl/oimojstest/src/app.js\",\"/Users/jonahallemonne/Documents/Cours/stage/chateau/chateaux-socrea/webgl/oimojstest/node_modules/url-loader/dist/cjs.js?limit=10000!/Users/jonahallemonne/Documents/Cours/stage/chateau/chateaux-socrea/webgl/oimojstest/node_modules/img-loader/index.js!/Users/jonahallemonne/Documents/Cours/stage/chateau/chateaux-socrea/webgl/oimojstest/src/toile.jpg\",\"/Users/jonahallemonne/Documents/Cours/stage/chateau/chateaux-socrea/webgl/oimojstest/node_modules/file-loader/dist/cjs.js??ref--5-0!/Users/jonahallemonne/Documents/Cours/stage/chateau/chateaux-socrea/webgl/oimojstest/src/cadre2.obj\",\"/Users/jonahallemonne/Documents/Cours/stage/chateau/chateaux-socrea/webgl/oimojstest/node_modules/url-loader/dist/cjs.js?limit=10000!/Users/jonahallemonne/Documents/Cours/stage/chateau/chateaux-socrea/webgl/oimojstest/node_modules/img-loader/index.js!/Users/jonahallemonne/Documents/Cours/stage/chateau/chateaux-socrea/webgl/oimojstest/src/floorTexture/WoodFlooring044_COL_2K.jpg\",\"/Users/jonahallemonne/Documents/Cours/stage/chateau/chateaux-socrea/webgl/oimojstest/node_modules/url-loader/dist/cjs.js?limit=10000!/Users/jonahallemonne/Documents/Cours/stage/chateau/chateaux-socrea/webgl/oimojstest/node_modules/img-loader/index.js!/Users/jonahallemonne/Documents/Cours/stage/chateau/chateaux-socrea/webgl/oimojstest/src/floorTexture/WoodFlooring044_NRM_2K.jpg\",\"/Users/jonahallemonne/Documents/Cours/stage/chateau/chateaux-socrea/webgl/oimojstest/node_modules/url-loader/dist/cjs.js?limit=10000!/Users/jonahallemonne/Documents/Cours/stage/chateau/chateaux-socrea/webgl/oimojstest/node_modules/img-loader/index.js!/Users/jonahallemonne/Documents/Cours/stage/chateau/chateaux-socrea/webgl/oimojstest/src/floorTexture/WoodFlooring044_DISP_2K.jpg\",\"/Users/jonahallemonne/Documents/Cours/stage/chateau/chateaux-socrea/webgl/oimojstest/node_modules/url-loader/dist/cjs.js?limit=10000!/Users/jonahallemonne/Documents/Cours/stage/chateau/chateaux-socrea/webgl/oimojstest/node_modules/img-loader/index.js!/Users/jonahallemonne/Documents/Cours/stage/chateau/chateaux-socrea/webgl/oimojstest/src/floorTexture/frame.jpg\",\"/Users/jonahallemonne/Documents/Cours/stage/chateau/chateaux-socrea/webgl/oimojstest/src/entry.js\",\"/Users/jonahallemonne/Documents/Cours/stage/chateau/chateaux-socrea/webgl/oimojstest/node_modules/webpack/buildin/global.js\",\"/Users/jonahallemonne/Documents/Cours/stage/chateau/chateaux-socrea/webgl/oimojstest/node_modules/three-obj-loader/dist/index.js\",\"/Users/jonahallemonne/Documents/Cours/stage/chateau/chateaux-socrea/webgl/oimojstest/node_modules/oimo/build/oimo.module.js\",\"/Users/jonahallemonne/Documents/Cours/stage/chateau/chateaux-socrea/webgl/oimojstest/node_modules/three-orbitcontrols/OrbitControls.js\",\"/Users/jonahallemonne/Documents/Cours/stage/chateau/chateaux-socrea/webgl/oimojstest/src/fpc.js\"],\"names\":[\"installedModules\",\"__webpack_require__\",\"moduleId\",\"exports\",\"module\",\"i\",\"l\",\"modules\",\"call\",\"m\",\"c\",\"d\",\"name\",\"getter\",\"o\",\"Object\",\"defineProperty\",\"enumerable\",\"get\",\"r\",\"Symbol\",\"toStringTag\",\"value\",\"t\",\"mode\",\"__esModule\",\"ns\",\"create\",\"key\",\"bind\",\"n\",\"object\",\"property\",\"prototype\",\"hasOwnProperty\",\"p\",\"s\",\"EventDispatcher\",\"__webpack_exports__\",\"WebGLMultisampleRenderTarget\",\"WebGLRenderTargetCube\",\"WebGLRenderTarget\",\"WebGLRenderer\",\"ShaderLib\",\"UniformsLib\",\"UniformsUtils\",\"ShaderChunk\",\"FogExp2\",\"Fog\",\"Scene\",\"Sprite\",\"LOD\",\"SkinnedMesh\",\"Skeleton\",\"Bone\",\"Mesh\",\"LineSegments\",\"LineLoop\",\"Line\",\"Points\",\"Group\",\"VideoTexture\",\"DataTexture\",\"DataTexture3D\",\"CompressedTexture\",\"CubeTexture\",\"CanvasTexture\",\"DepthTexture\",\"Texture\",\"AnimationLoader\",\"CompressedTextureLoader\",\"DataTextureLoader\",\"CubeTextureLoader\",\"TextureLoader\",\"ObjectLoader\",\"MaterialLoader\",\"BufferGeometryLoader\",\"DefaultLoadingManager\",\"LoadingManager\",\"ImageLoader\",\"ImageBitmapLoader\",\"FontLoader\",\"FileLoader\",\"Loader\",\"LoaderUtils\",\"Cache\",\"AudioLoader\",\"SpotLightShadow\",\"SpotLight\",\"PointLight\",\"RectAreaLight\",\"HemisphereLight\",\"DirectionalLightShadow\",\"DirectionalLight\",\"AmbientLight\",\"LightShadow\",\"Light\",\"StereoCamera\",\"PerspectiveCamera\",\"OrthographicCamera\",\"CubeCamera\",\"ArrayCamera\",\"Camera\",\"AudioListener\",\"PositionalAudio\",\"AudioContext\",\"AudioAnalyser\",\"Audio\",\"VectorKeyframeTrack\",\"StringKeyframeTrack\",\"QuaternionKeyframeTrack\",\"NumberKeyframeTrack\",\"ColorKeyframeTrack\",\"BooleanKeyframeTrack\",\"PropertyMixer\",\"PropertyBinding\",\"KeyframeTrack\",\"AnimationUtils\",\"AnimationObjectGroup\",\"AnimationMixer\",\"AnimationClip\",\"Uniform\",\"InstancedBufferGeometry\",\"BufferGeometry\",\"Geometry\",\"InterleavedBufferAttribute\",\"InstancedInterleavedBuffer\",\"InterleavedBuffer\",\"InstancedBufferAttribute\",\"Face3\",\"Object3D\",\"Raycaster\",\"Layers\",\"Clock\",\"QuaternionLinearInterpolant\",\"LinearInterpolant\",\"DiscreteInterpolant\",\"CubicInterpolant\",\"Interpolant\",\"Triangle\",\"_Math\",\"Spherical\",\"Cylindrical\",\"Plane\",\"Frustum\",\"Sphere\",\"Ray\",\"Matrix4\",\"Matrix3\",\"Box3\",\"Box2\",\"Line3\",\"Euler\",\"Vector4\",\"Vector3\",\"Vector2\",\"Quaternion\",\"Color\",\"ImmediateRenderObject\",\"VertexNormalsHelper\",\"SpotLightHelper\",\"SkeletonHelper\",\"PointLightHelper\",\"RectAreaLightHelper\",\"HemisphereLightHelper\",\"GridHelper\",\"PolarGridHelper\",\"FaceNormalsHelper\",\"DirectionalLightHelper\",\"CameraHelper\",\"BoxHelper\",\"Box3Helper\",\"PlaneHelper\",\"ArrowHelper\",\"AxesHelper\",\"Shape\",\"Path\",\"ShapePath\",\"Font\",\"CurvePath\",\"Curve\",\"ImageUtils\",\"ShapeUtils\",\"WebGLUtils\",\"WireframeGeometry\",\"ParametricGeometry\",\"ParametricBufferGeometry\",\"TetrahedronGeometry\",\"TetrahedronBufferGeometry\",\"OctahedronGeometry\",\"OctahedronBufferGeometry\",\"IcosahedronGeometry\",\"IcosahedronBufferGeometry\",\"DodecahedronGeometry\",\"DodecahedronBufferGeometry\",\"PolyhedronGeometry\",\"PolyhedronBufferGeometry\",\"TubeGeometry\",\"TubeBufferGeometry\",\"TorusKnotGeometry\",\"TorusKnotBufferGeometry\",\"TorusGeometry\",\"TorusBufferGeometry\",\"TextGeometry\",\"TextBufferGeometry\",\"SphereGeometry\",\"SphereBufferGeometry\",\"RingGeometry\",\"RingBufferGeometry\",\"PlaneGeometry\",\"PlaneBufferGeometry\",\"LatheGeometry\",\"LatheBufferGeometry\",\"ShapeGeometry\",\"ShapeBufferGeometry\",\"ExtrudeGeometry\",\"ExtrudeBufferGeometry\",\"EdgesGeometry\",\"ConeGeometry\",\"ConeBufferGeometry\",\"CylinderGeometry\",\"CylinderBufferGeometry\",\"CircleGeometry\",\"CircleBufferGeometry\",\"BoxGeometry\",\"BoxBufferGeometry\",\"ShadowMaterial\",\"SpriteMaterial\",\"RawShaderMaterial\",\"ShaderMaterial\",\"PointsMaterial\",\"MeshPhysicalMaterial\",\"MeshStandardMaterial\",\"MeshPhongMaterial\",\"MeshToonMaterial\",\"MeshNormalMaterial\",\"MeshLambertMaterial\",\"MeshDepthMaterial\",\"MeshDistanceMaterial\",\"MeshBasicMaterial\",\"MeshMatcapMaterial\",\"LineDashedMaterial\",\"LineBasicMaterial\",\"Material\",\"Float64BufferAttribute\",\"Float32BufferAttribute\",\"Uint32BufferAttribute\",\"Int32BufferAttribute\",\"Uint16BufferAttribute\",\"Int16BufferAttribute\",\"Uint8ClampedBufferAttribute\",\"Uint8BufferAttribute\",\"Int8BufferAttribute\",\"BufferAttribute\",\"ArcCurve\",\"CatmullRomCurve3\",\"CubicBezierCurve\",\"CubicBezierCurve3\",\"EllipseCurve\",\"LineCurve\",\"LineCurve3\",\"QuadraticBezierCurve\",\"QuadraticBezierCurve3\",\"SplineCurve\",\"REVISION\",\"MOUSE\",\"CullFaceNone\",\"CullFaceBack\",\"CullFaceFront\",\"CullFaceFrontBack\",\"FrontFaceDirectionCW\",\"FrontFaceDirectionCCW\",\"BasicShadowMap\",\"PCFShadowMap\",\"PCFSoftShadowMap\",\"FrontSide\",\"BackSide\",\"DoubleSide\",\"FlatShading\",\"SmoothShading\",\"NoColors\",\"FaceColors\",\"VertexColors\",\"NoBlending\",\"NormalBlending\",\"AdditiveBlending\",\"SubtractiveBlending\",\"MultiplyBlending\",\"CustomBlending\",\"AddEquation\",\"SubtractEquation\",\"ReverseSubtractEquation\",\"MinEquation\",\"MaxEquation\",\"ZeroFactor\",\"OneFactor\",\"SrcColorFactor\",\"OneMinusSrcColorFactor\",\"SrcAlphaFactor\",\"OneMinusSrcAlphaFactor\",\"DstAlphaFactor\",\"OneMinusDstAlphaFactor\",\"DstColorFactor\",\"OneMinusDstColorFactor\",\"SrcAlphaSaturateFactor\",\"NeverDepth\",\"AlwaysDepth\",\"LessDepth\",\"LessEqualDepth\",\"EqualDepth\",\"GreaterEqualDepth\",\"GreaterDepth\",\"NotEqualDepth\",\"MultiplyOperation\",\"MixOperation\",\"AddOperation\",\"NoToneMapping\",\"LinearToneMapping\",\"ReinhardToneMapping\",\"Uncharted2ToneMapping\",\"CineonToneMapping\",\"ACESFilmicToneMapping\",\"UVMapping\",\"CubeReflectionMapping\",\"CubeRefractionMapping\",\"EquirectangularReflectionMapping\",\"EquirectangularRefractionMapping\",\"SphericalReflectionMapping\",\"CubeUVReflectionMapping\",\"CubeUVRefractionMapping\",\"RepeatWrapping\",\"ClampToEdgeWrapping\",\"MirroredRepeatWrapping\",\"NearestFilter\",\"NearestMipMapNearestFilter\",\"NearestMipMapLinearFilter\",\"LinearFilter\",\"LinearMipMapNearestFilter\",\"LinearMipMapLinearFilter\",\"UnsignedByteType\",\"ByteType\",\"ShortType\",\"UnsignedShortType\",\"IntType\",\"UnsignedIntType\",\"FloatType\",\"HalfFloatType\",\"UnsignedShort4444Type\",\"UnsignedShort5551Type\",\"UnsignedShort565Type\",\"UnsignedInt248Type\",\"AlphaFormat\",\"RGBFormat\",\"RGBAFormat\",\"LuminanceFormat\",\"LuminanceAlphaFormat\",\"RGBEFormat\",\"DepthFormat\",\"DepthStencilFormat\",\"RedFormat\",\"RGB_S3TC_DXT1_Format\",\"RGBA_S3TC_DXT1_Format\",\"RGBA_S3TC_DXT3_Format\",\"RGBA_S3TC_DXT5_Format\",\"RGB_PVRTC_4BPPV1_Format\",\"RGB_PVRTC_2BPPV1_Format\",\"RGBA_PVRTC_4BPPV1_Format\",\"RGBA_PVRTC_2BPPV1_Format\",\"RGB_ETC1_Format\",\"RGBA_ASTC_4x4_Format\",\"RGBA_ASTC_5x4_Format\",\"RGBA_ASTC_5x5_Format\",\"RGBA_ASTC_6x5_Format\",\"RGBA_ASTC_6x6_Format\",\"RGBA_ASTC_8x5_Format\",\"RGBA_ASTC_8x6_Format\",\"RGBA_ASTC_8x8_Format\",\"RGBA_ASTC_10x5_Format\",\"RGBA_ASTC_10x6_Format\",\"RGBA_ASTC_10x8_Format\",\"RGBA_ASTC_10x10_Format\",\"RGBA_ASTC_12x10_Format\",\"RGBA_ASTC_12x12_Format\",\"LoopOnce\",\"LoopRepeat\",\"LoopPingPong\",\"InterpolateDiscrete\",\"InterpolateLinear\",\"InterpolateSmooth\",\"ZeroCurvatureEnding\",\"ZeroSlopeEnding\",\"WrapAroundEnding\",\"TrianglesDrawMode\",\"TriangleStripDrawMode\",\"TriangleFanDrawMode\",\"LinearEncoding\",\"sRGBEncoding\",\"GammaEncoding\",\"RGBEEncoding\",\"LogLuvEncoding\",\"RGBM7Encoding\",\"RGBM16Encoding\",\"RGBDEncoding\",\"BasicDepthPacking\",\"RGBADepthPacking\",\"TangentSpaceNormalMap\",\"ObjectSpaceNormalMap\",\"Face4\",\"LineStrip\",\"LinePieces\",\"MeshFaceMaterial\",\"MultiMaterial\",\"PointCloud\",\"Particle\",\"ParticleSystem\",\"PointCloudMaterial\",\"ParticleBasicMaterial\",\"ParticleSystemMaterial\",\"Vertex\",\"DynamicBufferAttribute\",\"Int8Attribute\",\"Uint8Attribute\",\"Uint8ClampedAttribute\",\"Int16Attribute\",\"Uint16Attribute\",\"Int32Attribute\",\"Uint32Attribute\",\"Float32Attribute\",\"Float64Attribute\",\"ClosedSplineCurve3\",\"SplineCurve3\",\"Spline\",\"AxisHelper\",\"BoundingBoxHelper\",\"EdgesHelper\",\"WireframeHelper\",\"XHRLoader\",\"BinaryTextureLoader\",\"GeometryUtils\",\"Projector\",\"CanvasRenderer\",\"JSONLoader\",\"SceneUtils\",\"LensFlare\",\"undefined\",\"Number\",\"EPSILON\",\"Math\",\"pow\",\"isInteger\",\"isFinite\",\"floor\",\"sign\",\"x\",\"Function\",\"this\",\"toString\",\"match\",\"assign\",\"target\",\"TypeError\",\"output\",\"index\",\"arguments\",\"length\",\"source\",\"nextKey\",\"addEventListener\",\"type\",\"listener\",\"_listeners\",\"listeners\",\"indexOf\",\"push\",\"hasEventListener\",\"removeEventListener\",\"listenerArray\",\"splice\",\"dispatchEvent\",\"event\",\"array\",\"slice\",\"min\",\"max\",\"vector\",\"matrix\",\"y\",\"z\",\"zero\",\"one\",\"v1\",\"quaternion\",\"_canvas\",\"LEFT\",\"MIDDLE\",\"RIGHT\",\"DEG2RAD\",\"PI\",\"RAD2DEG\",\"generateUUID\",\"lut\",\"d0\",\"random\",\"d1\",\"d2\",\"d3\",\"toUpperCase\",\"clamp\",\"euclideanModulo\",\"mapLinear\",\"a1\",\"a2\",\"b1\",\"b2\",\"lerp\",\"smoothstep\",\"smootherstep\",\"randInt\",\"low\",\"high\",\"randFloat\",\"randFloatSpread\",\"range\",\"degToRad\",\"degrees\",\"radToDeg\",\"radians\",\"isPowerOfTwo\",\"ceilPowerOfTwo\",\"ceil\",\"log\",\"LN2\",\"floorPowerOfTwo\",\"elements\",\"console\",\"error\",\"w\",\"_x\",\"_y\",\"_z\",\"_w\",\"defineProperties\",\"width\",\"set\",\"height\",\"isVector2\",\"setScalar\",\"scalar\",\"setX\",\"setY\",\"setComponent\",\"Error\",\"getComponent\",\"clone\",\"constructor\",\"copy\",\"v\",\"add\",\"warn\",\"addVectors\",\"addScalar\",\"a\",\"b\",\"addScaledVector\",\"sub\",\"subVectors\",\"subScalar\",\"multiply\",\"multiplyScalar\",\"divide\",\"divideScalar\",\"applyMatrix3\",\"e\",\"clampScalar\",\"minVal\",\"maxVal\",\"clampLength\",\"round\",\"roundToZero\",\"negate\",\"dot\",\"cross\",\"lengthSq\",\"sqrt\",\"manhattanLength\",\"abs\",\"normalize\",\"angle\",\"atan2\",\"distanceTo\",\"distanceToSquared\",\"dx\",\"dy\",\"manhattanDistanceTo\",\"setLength\",\"alpha\",\"lerpVectors\",\"v2\",\"equals\",\"fromArray\",\"offset\",\"toArray\",\"fromBufferAttribute\",\"attribute\",\"getX\",\"getY\",\"rotateAround\",\"center\",\"cos\",\"sin\",\"isMatrix4\",\"n11\",\"n12\",\"n13\",\"n14\",\"n21\",\"n22\",\"n23\",\"n24\",\"n31\",\"n32\",\"n33\",\"n34\",\"n41\",\"n42\",\"n43\",\"n44\",\"te\",\"identity\",\"me\",\"copyPosition\",\"extractBasis\",\"xAxis\",\"yAxis\",\"zAxis\",\"setFromMatrixColumn\",\"makeBasis\",\"extractRotation\",\"scaleX\",\"scaleY\",\"scaleZ\",\"makeRotationFromEuler\",\"euler\",\"isEuler\",\"f\",\"order\",\"ae\",\"af\",\"be\",\"bf\",\"ce\",\"cf\",\"de\",\"df\",\"ac\",\"ad\",\"bc\",\"bd\",\"makeRotationFromQuaternion\",\"q\",\"compose\",\"lookAt\",\"eye\",\"up\",\"crossVectors\",\"multiplyMatrices\",\"premultiply\",\"a11\",\"a12\",\"a13\",\"a14\",\"a21\",\"a22\",\"a23\",\"a24\",\"a31\",\"a32\",\"a33\",\"a34\",\"a41\",\"a42\",\"a43\",\"a44\",\"b11\",\"b12\",\"b13\",\"b14\",\"b21\",\"b22\",\"b23\",\"b24\",\"b31\",\"b32\",\"b33\",\"b34\",\"b41\",\"b42\",\"b43\",\"b44\",\"applyToBufferAttribute\",\"count\",\"getZ\",\"applyMatrix4\",\"setXYZ\",\"determinant\",\"transpose\",\"tmp\",\"setPosition\",\"getInverse\",\"throwOnDegenerate\",\"t11\",\"t12\",\"t13\",\"t14\",\"det\",\"msg\",\"detInv\",\"scale\",\"getMaxScaleOnAxis\",\"scaleXSq\",\"scaleYSq\",\"scaleZSq\",\"makeTranslation\",\"makeRotationX\",\"theta\",\"makeRotationY\",\"makeRotationZ\",\"makeRotationAxis\",\"axis\",\"tx\",\"ty\",\"makeScale\",\"makeShear\",\"position\",\"x2\",\"y2\",\"z2\",\"xx\",\"xy\",\"xz\",\"yy\",\"yz\",\"zz\",\"wx\",\"wy\",\"wz\",\"sx\",\"sy\",\"sz\",\"decompose\",\"invSX\",\"invSY\",\"invSZ\",\"setFromRotationMatrix\",\"makePerspective\",\"left\",\"right\",\"top\",\"bottom\",\"near\",\"far\",\"makeOrthographic\",\"h\",\"slerp\",\"qa\",\"qb\",\"qm\",\"slerpFlat\",\"dst\",\"dstOffset\",\"src0\",\"srcOffset0\",\"src1\",\"srcOffset1\",\"x0\",\"y0\",\"z0\",\"w0\",\"x1\",\"y1\",\"z1\",\"w1\",\"dir\",\"sqrSin\",\"len\",\"tDir\",\"onChangeCallback\",\"isQuaternion\",\"setFromEuler\",\"update\",\"c1\",\"c2\",\"c3\",\"s1\",\"s2\",\"s3\",\"setFromAxisAngle\",\"halfAngle\",\"m11\",\"m12\",\"m13\",\"m21\",\"m22\",\"m23\",\"m31\",\"m32\",\"m33\",\"trace\",\"setFromUnitVectors\",\"vFrom\",\"vTo\",\"angleTo\",\"acos\",\"rotateTowards\",\"step\",\"inverse\",\"conjugate\",\"multiplyQuaternions\",\"qax\",\"qay\",\"qaz\",\"qaw\",\"qbx\",\"qby\",\"qbz\",\"qbw\",\"cosHalfTheta\",\"sqrSinHalfTheta\",\"sinHalfTheta\",\"halfTheta\",\"ratioA\",\"ratioB\",\"onChange\",\"callback\",\"isVector3\",\"setZ\",\"multiplyVectors\",\"applyEuler\",\"applyQuaternion\",\"applyAxisAngle\",\"qx\",\"qy\",\"qz\",\"qw\",\"ix\",\"iy\",\"iz\",\"iw\",\"project\",\"camera\",\"matrixWorldInverse\",\"projectionMatrix\",\"unproject\",\"matrixWorld\",\"transformDirection\",\"ax\",\"ay\",\"az\",\"bx\",\"by\",\"bz\",\"projectOnVector\",\"projectOnPlane\",\"planeNormal\",\"reflect\",\"normal\",\"dz\",\"setFromSpherical\",\"setFromSphericalCoords\",\"radius\",\"phi\",\"sinPhiRadius\",\"setFromCylindrical\",\"setFromCylindricalCoords\",\"setFromMatrixPosition\",\"setFromMatrixScale\",\"isMatrix3\",\"setFromMatrix4\",\"g\",\"getNormalMatrix\",\"matrix4\",\"transposeIntoArray\",\"setUvTransform\",\"rotation\",\"cx\",\"cy\",\"rotate\",\"translate\",\"points\",\"closestPoint\",\"box\",\"sphere\",\"getDataURL\",\"image\",\"canvas\",\"HTMLCanvasElement\",\"src\",\"document\",\"createElementNS\",\"context\",\"getContext\",\"ImageData\",\"putImageData\",\"drawImage\",\"toDataURL\",\"textureId\",\"mapping\",\"wrapS\",\"wrapT\",\"magFilter\",\"minFilter\",\"format\",\"anisotropy\",\"encoding\",\"uuid\",\"DEFAULT_IMAGE\",\"mipmaps\",\"DEFAULT_MAPPING\",\"repeat\",\"matrixAutoUpdate\",\"generateMipmaps\",\"premultiplyAlpha\",\"flipY\",\"unpackAlignment\",\"version\",\"onUpdate\",\"options\",\"scissor\",\"scissorTest\",\"viewport\",\"texture\",\"depthBuffer\",\"stencilBuffer\",\"depthTexture\",\"samples\",\"activeCubeFace\",\"activeMipMapLevel\",\"data\",\"Infinity\",\"constant\",\"p0\",\"p1\",\"p2\",\"p3\",\"p4\",\"p5\",\"planes\",\"isTexture\",\"updateMatrix\",\"toJSON\",\"meta\",\"isRootObject\",\"textures\",\"metadata\",\"generator\",\"wrap\",\"images\",\"url\",\"Array\",\"isArray\",\"dispose\",\"transformUv\",\"uv\",\"isVector4\",\"setW\",\"setAxisAngleFromQuaternion\",\"setAxisAngleFromRotationMatrix\",\"getW\",\"isWebGLRenderTarget\",\"setSize\",\"isWebGLMultisampleRenderTarget\",\"isWebGLRenderTargetCube\",\"isDataTexture\",\"isBox3\",\"setFromArray\",\"minX\",\"minY\",\"minZ\",\"maxX\",\"maxY\",\"maxZ\",\"setFromBufferAttribute\",\"setFromPoints\",\"makeEmpty\",\"il\",\"expandByPoint\",\"setFromCenterAndSize\",\"size\",\"halfSize\",\"setFromObject\",\"expandByObject\",\"isEmpty\",\"getCenter\",\"getSize\",\"point\",\"expandByVector\",\"expandByScalar\",\"scope\",\"traverse\",\"node\",\"geometry\",\"isGeometry\",\"vertices\",\"isBufferGeometry\",\"attributes\",\"updateMatrixWorld\",\"containsPoint\",\"containsBox\",\"getParameter\",\"intersectsBox\",\"intersectsSphere\",\"clampPoint\",\"intersectsPlane\",\"plane\",\"intersectsTriangle\",\"v0\",\"f0\",\"f1\",\"f2\",\"testAxis\",\"extents\",\"triangleNormal\",\"satForAxes\",\"axes\",\"j\",\"triangle\",\"distanceToPoint\",\"getBoundingSphere\",\"intersect\",\"union\",\"optionalCenter\",\"maxRadiusSq\",\"empty\",\"radiusSum\",\"deltaLengthSq\",\"getBoundingBox\",\"setComponents\",\"setFromNormalAndCoplanarPoint\",\"setFromCoplanarPoints\",\"inverseNormalLength\",\"distanceToSphere\",\"projectPoint\",\"intersectLine\",\"line\",\"direction\",\"delta\",\"denominator\",\"start\",\"intersectsLine\",\"startSign\",\"endSign\",\"end\",\"coplanarPoint\",\"m1\",\"optionalNormalMatrix\",\"normalMatrix\",\"referencePoint\",\"frustum\",\"setFromMatrix\",\"me0\",\"me1\",\"me2\",\"me3\",\"me4\",\"me5\",\"me6\",\"me7\",\"me8\",\"me9\",\"me10\",\"me11\",\"me12\",\"me13\",\"me14\",\"me15\",\"intersectsObject\",\"boundingSphere\",\"computeBoundingSphere\",\"intersectsSprite\",\"sprite\",\"negRadius\",\"alphamap_fragment\",\"alphamap_pars_fragment\",\"alphatest_fragment\",\"aomap_fragment\",\"aomap_pars_fragment\",\"begin_vertex\",\"beginnormal_vertex\",\"bsdfs\",\"bumpmap_pars_fragment\",\"clipping_planes_fragment\",\"clipping_planes_pars_fragment\",\"clipping_planes_pars_vertex\",\"clipping_planes_vertex\",\"color_fragment\",\"color_pars_fragment\",\"color_pars_vertex\",\"color_vertex\",\"common\",\"cube_uv_reflection_fragment\",\"defaultnormal_vertex\",\"displacementmap_pars_vertex\",\"displacementmap_vertex\",\"emissivemap_fragment\",\"emissivemap_pars_fragment\",\"encodings_fragment\",\"encodings_pars_fragment\",\"envmap_fragment\",\"envmap_pars_fragment\",\"envmap_pars_vertex\",\"envmap_physical_pars_fragment\",\"envmap_vertex\",\"fog_vertex\",\"fog_pars_vertex\",\"fog_fragment\",\"fog_pars_fragment\",\"gradientmap_pars_fragment\",\"lightmap_fragment\",\"lightmap_pars_fragment\",\"lights_lambert_vertex\",\"lights_pars_begin\",\"lights_phong_fragment\",\"lights_phong_pars_fragment\",\"lights_physical_fragment\",\"lights_physical_pars_fragment\",\"lights_fragment_begin\",\"lights_fragment_maps\",\"lights_fragment_end\",\"logdepthbuf_fragment\",\"logdepthbuf_pars_fragment\",\"logdepthbuf_pars_vertex\",\"logdepthbuf_vertex\",\"map_fragment\",\"map_pars_fragment\",\"map_particle_fragment\",\"map_particle_pars_fragment\",\"metalnessmap_fragment\",\"metalnessmap_pars_fragment\",\"morphnormal_vertex\",\"morphtarget_pars_vertex\",\"morphtarget_vertex\",\"normal_fragment_begin\",\"normal_fragment_maps\",\"normalmap_pars_fragment\",\"packing\",\"premultiplied_alpha_fragment\",\"project_vertex\",\"dithering_fragment\",\"dithering_pars_fragment\",\"roughnessmap_fragment\",\"roughnessmap_pars_fragment\",\"shadowmap_pars_fragment\",\"shadowmap_pars_vertex\",\"shadowmap_vertex\",\"shadowmask_pars_fragment\",\"skinbase_vertex\",\"skinning_pars_vertex\",\"skinning_vertex\",\"skinnormal_vertex\",\"specularmap_fragment\",\"specularmap_pars_fragment\",\"tonemapping_fragment\",\"tonemapping_pars_fragment\",\"uv_pars_fragment\",\"uv_pars_vertex\",\"uv_vertex\",\"uv2_pars_fragment\",\"uv2_pars_vertex\",\"uv2_vertex\",\"worldpos_vertex\",\"background_frag\",\"background_vert\",\"cube_frag\",\"cube_vert\",\"depth_frag\",\"depth_vert\",\"distanceRGBA_frag\",\"distanceRGBA_vert\",\"equirect_frag\",\"equirect_vert\",\"linedashed_frag\",\"linedashed_vert\",\"meshbasic_frag\",\"meshbasic_vert\",\"meshlambert_frag\",\"meshlambert_vert\",\"meshmatcap_frag\",\"meshmatcap_vert\",\"meshphong_frag\",\"meshphong_vert\",\"meshphysical_frag\",\"meshphysical_vert\",\"normal_frag\",\"normal_vert\",\"points_frag\",\"points_vert\",\"shadow_frag\",\"shadow_vert\",\"sprite_frag\",\"sprite_vert\",\"cloneUniforms\",\"u\",\"isColor\",\"mergeUniforms\",\"uniforms\",\"merged\",\"hslA\",\"hslB\",\"hsl\",\"merge\",\"ColorKeywords\",\"aliceblue\",\"antiquewhite\",\"aqua\",\"aquamarine\",\"azure\",\"beige\",\"bisque\",\"black\",\"blanchedalmond\",\"blue\",\"blueviolet\",\"brown\",\"burlywood\",\"cadetblue\",\"chartreuse\",\"chocolate\",\"coral\",\"cornflowerblue\",\"cornsilk\",\"crimson\",\"cyan\",\"darkblue\",\"darkcyan\",\"darkgoldenrod\",\"darkgray\",\"darkgreen\",\"darkgrey\",\"darkkhaki\",\"darkmagenta\",\"darkolivegreen\",\"darkorange\",\"darkorchid\",\"darkred\",\"darksalmon\",\"darkseagreen\",\"darkslateblue\",\"darkslategray\",\"darkslategrey\",\"darkturquoise\",\"darkviolet\",\"deeppink\",\"deepskyblue\",\"dimgray\",\"dimgrey\",\"dodgerblue\",\"firebrick\",\"floralwhite\",\"forestgreen\",\"fuchsia\",\"gainsboro\",\"ghostwhite\",\"gold\",\"goldenrod\",\"gray\",\"green\",\"greenyellow\",\"grey\",\"honeydew\",\"hotpink\",\"indianred\",\"indigo\",\"ivory\",\"khaki\",\"lavender\",\"lavenderblush\",\"lawngreen\",\"lemonchiffon\",\"lightblue\",\"lightcoral\",\"lightcyan\",\"lightgoldenrodyellow\",\"lightgray\",\"lightgreen\",\"lightgrey\",\"lightpink\",\"lightsalmon\",\"lightseagreen\",\"lightskyblue\",\"lightslategray\",\"lightslategrey\",\"lightsteelblue\",\"lightyellow\",\"lime\",\"limegreen\",\"linen\",\"magenta\",\"maroon\",\"mediumaquamarine\",\"mediumblue\",\"mediumorchid\",\"mediumpurple\",\"mediumseagreen\",\"mediumslateblue\",\"mediumspringgreen\",\"mediumturquoise\",\"mediumvioletred\",\"midnightblue\",\"mintcream\",\"mistyrose\",\"moccasin\",\"navajowhite\",\"navy\",\"oldlace\",\"olive\",\"olivedrab\",\"orange\",\"orangered\",\"orchid\",\"palegoldenrod\",\"palegreen\",\"paleturquoise\",\"palevioletred\",\"papayawhip\",\"peachpuff\",\"peru\",\"pink\",\"plum\",\"powderblue\",\"purple\",\"rebeccapurple\",\"red\",\"rosybrown\",\"royalblue\",\"saddlebrown\",\"salmon\",\"sandybrown\",\"seagreen\",\"seashell\",\"sienna\",\"silver\",\"skyblue\",\"slateblue\",\"slategray\",\"slategrey\",\"snow\",\"springgreen\",\"steelblue\",\"tan\",\"teal\",\"thistle\",\"tomato\",\"turquoise\",\"violet\",\"wheat\",\"white\",\"whitesmoke\",\"yellow\",\"yellowgreen\",\"setRGB\",\"setHex\",\"setStyle\",\"hex\",\"setHSL\",\"hue2rgb\",\"style\",\"handleAlpha\",\"string\",\"parseFloat\",\"exec\",\"color\",\"components\",\"parseInt\",\"charAt\",\"copyGammaToLinear\",\"gammaFactor\",\"copyLinearToGamma\",\"safeInverse\",\"convertGammaToLinear\",\"convertLinearToGamma\",\"copySRGBToLinear\",\"SRGBToLinear\",\"copyLinearToSRGB\",\"LinearToSRGB\",\"convertSRGBToLinear\",\"convertLinearToSRGB\",\"getHex\",\"getHexString\",\"getHSL\",\"hue\",\"saturation\",\"lightness\",\"getStyle\",\"offsetHSL\",\"addColors\",\"color1\",\"color2\",\"lerpHSL\",\"diffuse\",\"opacity\",\"map\",\"uvTransform\",\"alphaMap\",\"specularmap\",\"specularMap\",\"envmap\",\"envMap\",\"flipEnvMap\",\"reflectivity\",\"refractionRatio\",\"maxMipLevel\",\"aomap\",\"aoMap\",\"aoMapIntensity\",\"lightmap\",\"lightMap\",\"lightMapIntensity\",\"emissivemap\",\"emissiveMap\",\"bumpmap\",\"bumpMap\",\"bumpScale\",\"normalmap\",\"normalMap\",\"normalScale\",\"displacementmap\",\"displacementMap\",\"displacementScale\",\"displacementBias\",\"roughnessmap\",\"roughnessMap\",\"metalnessmap\",\"metalnessMap\",\"gradientmap\",\"gradientMap\",\"fog\",\"fogDensity\",\"fogNear\",\"fogFar\",\"fogColor\",\"lights\",\"ambientLightColor\",\"directionalLights\",\"properties\",\"shadow\",\"shadowBias\",\"shadowRadius\",\"shadowMapSize\",\"directionalShadowMap\",\"directionalShadowMatrix\",\"spotLights\",\"distance\",\"coneCos\",\"penumbraCos\",\"decay\",\"spotShadowMap\",\"spotShadowMatrix\",\"pointLights\",\"shadowCameraNear\",\"shadowCameraFar\",\"pointShadowMap\",\"pointShadowMatrix\",\"hemisphereLights\",\"skyColor\",\"groundColor\",\"rectAreaLights\",\"basic\",\"vertexShader\",\"fragmentShader\",\"lambert\",\"emissive\",\"phong\",\"specular\",\"shininess\",\"standard\",\"roughness\",\"metalness\",\"envMapIntensity\",\"matcap\",\"dashed\",\"dashSize\",\"totalSize\",\"depth\",\"background\",\"t2D\",\"cube\",\"tCube\",\"tFlip\",\"equirect\",\"tEquirect\",\"distanceRGBA\",\"referencePosition\",\"nearDistance\",\"farDistance\",\"WebGLAnimation\",\"isAnimating\",\"animationLoop\",\"onAnimationFrame\",\"time\",\"frame\",\"requestAnimationFrame\",\"stop\",\"setAnimationLoop\",\"setContext\",\"WebGLAttributes\",\"gl\",\"buffers\",\"WeakMap\",\"isInterleavedBufferAttribute\",\"remove\",\"deleteBuffer\",\"buffer\",\"delete\",\"bufferType\",\"usage\",\"dynamic\",\"createBuffer\",\"bindBuffer\",\"bufferData\",\"onUploadCallback\",\"Float32Array\",\"Float64Array\",\"Uint16Array\",\"Int16Array\",\"Uint32Array\",\"Int32Array\",\"Int8Array\",\"Uint8Array\",\"bytesPerElement\",\"BYTES_PER_ELEMENT\",\"updateRange\",\"bufferSubData\",\"subarray\",\"updateBuffer\",\"materialIndex\",\"vertexNormals\",\"vertexColors\",\"_order\",\"DefaultOrder\",\"mask\",\"physical\",\"clearCoat\",\"clearCoatRoughness\",\"RotationOrders\",\"asin\",\"setFromQuaternion\",\"setFromVector3\",\"reorder\",\"newOrder\",\"toVector3\",\"optionalResult\",\"channel\",\"enable\",\"toggle\",\"disable\",\"test\",\"layers\",\"q1\",\"object3DId\",\"parent\",\"children\",\"DefaultUp\",\"configurable\",\"modelViewMatrix\",\"DefaultMatrixAutoUpdate\",\"matrixWorldNeedsUpdate\",\"visible\",\"castShadow\",\"receiveShadow\",\"frustumCulled\",\"renderOrder\",\"userData\",\"isObject3D\",\"onBeforeRender\",\"onAfterRender\",\"applyMatrix\",\"setRotationFromAxisAngle\",\"setRotationFromEuler\",\"setRotationFromMatrix\",\"setRotationFromQuaternion\",\"rotateOnAxis\",\"rotateOnWorldAxis\",\"rotateX\",\"rotateY\",\"rotateZ\",\"translateOnAxis\",\"translateX\",\"translateY\",\"translateZ\",\"localToWorld\",\"worldToLocal\",\"updateWorldMatrix\",\"isCamera\",\"isLight\",\"getObjectById\",\"id\",\"getObjectByProperty\",\"getObjectByName\",\"getWorldPosition\",\"getWorldQuaternion\",\"getWorldScale\",\"getWorldDirection\",\"raycast\",\"traverseVisible\",\"traverseAncestors\",\"force\",\"updateParents\",\"updateChildren\",\"geometries\",\"materials\",\"shapes\",\"serialize\",\"library\",\"element\",\"JSON\",\"stringify\",\"isMesh\",\"drawMode\",\"isLine\",\"isPoints\",\"parameters\",\"shape\",\"material\",\"uuids\",\"extractFromCache\",\"cache\",\"values\",\"recursive\",\"parse\",\"child\",\"obj\",\"geometryId\",\"colors\",\"faces\",\"faceVertexUvs\",\"morphTargets\",\"morphNormals\",\"skinWeights\",\"skinIndices\",\"lineDistances\",\"boundingBox\",\"elementsNeedUpdate\",\"verticesNeedUpdate\",\"uvsNeedUpdate\",\"normalsNeedUpdate\",\"colorsNeedUpdate\",\"lineDistancesNeedUpdate\",\"groupsNeedUpdate\",\"itemSize\",\"normalized\",\"Uint8ClampedArray\",\"DirectGeometry\",\"normals\",\"uvs\",\"uvs2\",\"groups\",\"arrayMax\",\"face\",\"jl\",\"computeBoundingBox\",\"fromBufferGeometry\",\"indices\",\"positions\",\"uv2\",\"addFace\",\"group\",\"computeFaceNormals\",\"cb\",\"ab\",\"fl\",\"vA\",\"vB\",\"vC\",\"computeVertexNormals\",\"areaWeighted\",\"vl\",\"computeFlatVertexNormals\",\"computeMorphNormals\",\"__originalFaceNormal\",\"__originalVertexNormals\",\"tmpGeo\",\"faceNormals\",\"dstNormalsFace\",\"dstNormalsVertex\",\"faceNormal\",\"materialIndexOffset\",\"vertexOffset\",\"vertices1\",\"vertices2\",\"faces1\",\"faces2\",\"uvs1\",\"colors1\",\"colors2\",\"vertexCopy\",\"faceCopy\",\"faceVertexNormals\",\"faceVertexColors\",\"uvCopy\",\"mergeMesh\",\"mesh\",\"mergeVertices\",\"verticesMap\",\"unique\",\"changes\",\"precision\",\"faceIndicesToRemove\",\"idx\",\"diff\",\"sortFacesByMaterialIndex\",\"_id\",\"sort\",\"newUvs1\",\"newUvs2\",\"vertex\",\"normalsHash\",\"colorsHash\",\"uvsHash\",\"hasFaceVertexUv\",\"hasFaceNormal\",\"hasFaceVertexNormal\",\"hasFaceColor\",\"hasFaceVertexColor\",\"faceType\",\"setBit\",\"getUvIndex\",\"getNormalIndex\",\"getColorIndex\",\"enabled\",\"hash\",\"k\",\"kl\",\"uvsCopy\",\"morphTarget\",\"morphNormal\",\"srcVertexNormal\",\"destVertexNormal\",\"isBufferAttribute\",\"setArray\",\"setDynamic\",\"copyAt\",\"index1\",\"index2\",\"copyArray\",\"copyColorsArray\",\"copyVector2sArray\",\"vectors\",\"copyVector3sArray\",\"copyVector4sArray\",\"setXY\",\"setXYZW\",\"onUpload\",\"computeGroups\",\"fromGeometry\",\"morphTargetsPosition\",\"hasFaceVertexUv2\",\"morphTargetsLength\",\"morphTargetsNormal\",\"morphNormalsLength\",\"hasSkinIndices\",\"hasSkinWeights\",\"vertexUvs\",\"bufferGeometryId\",\"morphAttributes\",\"drawRange\",\"widthSegments\",\"heightSegments\",\"depthSegments\",\"numberOfVertices\",\"groupStart\",\"buildPlane\",\"udir\",\"vdir\",\"gridX\",\"gridY\",\"segmentWidth\",\"segmentHeight\",\"widthHalf\",\"heightHalf\",\"depthHalf\",\"gridX1\",\"gridY1\",\"vertexCounter\",\"groupCount\",\"addGroup\",\"setIndex\",\"addAttribute\",\"width_half\",\"height_half\",\"segment_width\",\"segment_height\",\"getIndex\",\"getAttribute\",\"removeAttribute\",\"clearGroups\",\"setDrawRange\",\"needsUpdate\",\"updateFromObject\",\"direct\",\"__directGeometry\",\"lineDistance\",\"fromDirectGeometry\",\"isNaN\",\"pA\",\"pB\",\"pC\",\"normalizeNormals\",\"attributeArray1\",\"attribute2\",\"attributeArray2\",\"toNonIndexed\",\"convertBufferAttribute\",\"array2\",\"geometry2\",\"newAttribute\",\"morphArray\",\"morphAttribute\",\"keys\",\"segCenter\",\"segDir\",\"barycoord\",\"vab\",\"vac\",\"vbc\",\"vap\",\"vbp\",\"vcp\",\"materialId\",\"blending\",\"side\",\"flatShading\",\"transparent\",\"blendSrc\",\"blendDst\",\"blendEquation\",\"blendSrcAlpha\",\"blendDstAlpha\",\"blendEquationAlpha\",\"depthFunc\",\"depthTest\",\"depthWrite\",\"clippingPlanes\",\"clipIntersection\",\"clipShadows\",\"shadowSide\",\"colorWrite\",\"polygonOffset\",\"polygonOffsetFactor\",\"polygonOffsetUnits\",\"dithering\",\"alphaTest\",\"premultipliedAlpha\",\"defines\",\"linewidth\",\"wireframe\",\"wireframeLinewidth\",\"clipping\",\"skinning\",\"extensions\",\"derivatives\",\"fragDepth\",\"drawBuffers\",\"shaderTextureLOD\",\"defaultAttributeValues\",\"index0AttributeName\",\"uniformsNeedUpdate\",\"setValues\",\"origin\",\"combine\",\"wireframeLinecap\",\"wireframeLinejoin\",\"updateMorphTargets\",\"WebGLBackground\",\"renderer\",\"state\",\"objects\",\"planeMesh\",\"boxMesh\",\"clearColor\",\"clearAlpha\",\"currentBackground\",\"currentBackgroundVersion\",\"setClear\",\"getClearColor\",\"setClearColor\",\"getClearAlpha\",\"setClearAlpha\",\"render\",\"renderList\",\"scene\",\"forceClear\",\"autoClear\",\"clear\",\"autoClearColor\",\"autoClearDepth\",\"autoClearStencil\",\"isCubeTexture\",\"unshift\",\"WebGLBufferRenderer\",\"info\",\"capabilities\",\"setMode\",\"drawArrays\",\"renderInstances\",\"extension\",\"isWebGL2\",\"maxInstancedCount\",\"WebGLCapabilities\",\"maxAnisotropy\",\"getMaxPrecision\",\"getShaderPrecisionFormat\",\"WebGL2RenderingContext\",\"maxPrecision\",\"logarithmicDepthBuffer\",\"maxTextures\",\"maxVertexTextures\",\"maxTextureSize\",\"maxCubemapSize\",\"maxAttributes\",\"maxVertexUniforms\",\"maxVaryings\",\"maxFragmentUniforms\",\"vertexTextures\",\"floatFragmentTextures\",\"getMaxAnisotropy\",\"MAX_TEXTURE_MAX_ANISOTROPY_EXT\",\"floatVertexTextures\",\"maxSamples\",\"WebGLClipping\",\"globalState\",\"numGlobalPlanes\",\"localClippingEnabled\",\"renderingShadows\",\"viewNormalMatrix\",\"uniform\",\"resetGlobalState\",\"numPlanes\",\"numIntersection\",\"projectPlanes\",\"skipTransform\",\"nPlanes\",\"dstArray\",\"flatSize\",\"viewMatrix\",\"i4\",\"init\",\"enableLocalClipping\",\"beginShadows\",\"endShadows\",\"setState\",\"fromCache\",\"nGlobal\",\"lGlobal\",\"clippingState\",\"WebGLExtensions\",\"getExtension\",\"WebGLGeometries\",\"wireframeAttributes\",\"onGeometryDispose\",\"buffergeometry\",\"memory\",\"_bufferGeometry\",\"geometryAttributes\",\"getWireframeAttribute\",\"geometryIndex\",\"WebGLIndexedBufferRenderer\",\"drawElements\",\"WebGLInfo\",\"calls\",\"triangles\",\"lines\",\"programs\",\"autoReset\",\"reset\",\"instanceCount\",\"absNumericalSort\",\"WebGLMorphtargets\",\"influencesList\",\"morphInfluences\",\"program\",\"objectInfluences\",\"morphTargetInfluences\",\"influences\",\"influence\",\"getUniforms\",\"setValue\",\"WebGLObjects\",\"updateList\",\"isMaterial\",\"onBeforeCompile\",\"newValue\",\"currentValue\",\"isRoot\",\"emissiveIntensity\",\"normalMapType\",\"sizeAttenuation\",\"gapSize\",\"srcPlanes\",\"dstPlanes\",\"isShaderMaterial\",\"ray\",\"at\",\"recast\",\"closestPointToPoint\",\"directionDistance\",\"distanceSqToPoint\",\"distanceSqToSegment\",\"optionalPointOnRay\",\"optionalPointOnSegment\",\"s0\",\"sqrDist\",\"extDet\",\"segExtent\",\"a01\",\"b0\",\"invDet\",\"intersectSphere\",\"tca\",\"radius2\",\"thc\",\"t0\",\"t1\",\"distanceToPlane\",\"intersectPlane\",\"distToPoint\",\"intersectBox\",\"tmin\",\"tmax\",\"tymin\",\"tymax\",\"tzmin\",\"tzmax\",\"invdirx\",\"invdiry\",\"invdirz\",\"intersectTriangle\",\"edge1\",\"edge2\",\"backfaceCulling\",\"DdN\",\"DdQxE2\",\"DdE1xQ\",\"QdN\",\"getNormal\",\"targetLengthSq\",\"getBarycoord\",\"dot00\",\"dot01\",\"dot02\",\"dot11\",\"dot12\",\"denom\",\"invDenom\",\"getUV\",\"uv1\",\"uv3\",\"setFromPointsAndIndices\",\"i0\",\"i1\",\"i2\",\"getArea\",\"getMidpoint\",\"getPlane\",\"result\",\"d4\",\"vc\",\"d5\",\"d6\",\"vb\",\"va\",\"isMeshBasicMaterial\",\"setDrawMode\",\"morphTargetDictionary\",\"ml\",\"String\",\"inverseMatrix\",\"tempA\",\"tempB\",\"tempC\",\"uvA\",\"uvB\",\"uvC\",\"intersectionPoint\",\"intersectionPointWorld\",\"checkIntersection\",\"raycaster\",\"checkBufferGeometryIntersection\",\"intersection\",\"intersects\",\"groupMaterial\",\"faceIndex\",\"fvA\",\"fvB\",\"fvC\",\"isMultiMaterial\",\"faceMaterial\",\"tl\",\"targets\",\"uvs_f\",\"isDataTexture3D\",\"emptyTexture\",\"emptyTexture3d\",\"emptyCubeTexture\",\"UniformContainer\",\"seq\",\"arrayCacheF32\",\"arrayCacheI32\",\"mat4array\",\"mat3array\",\"mat2array\",\"flatten\",\"nBlocks\",\"blockSize\",\"firstElem\",\"arraysEqual\",\"allocTexUnits\",\"allocTextureUnit\",\"setValue1f\",\"uniform1f\",\"addr\",\"setValue1i\",\"uniform1i\",\"setValue2fv\",\"uniform2f\",\"uniform2fv\",\"setValue3fv\",\"uniform3f\",\"uniform3fv\",\"setValue4fv\",\"uniform4f\",\"uniform4fv\",\"setValue2fm\",\"uniformMatrix2fv\",\"setValue3fm\",\"uniformMatrix3fv\",\"setValue4fm\",\"uniformMatrix4fv\",\"setValueT1\",\"unit\",\"setTexture2D\",\"setValueT3D1\",\"setTexture3D\",\"setValueT6\",\"setTextureCube\",\"setValue2iv\",\"uniform2iv\",\"setValue3iv\",\"uniform3iv\",\"setValue4iv\",\"uniform4iv\",\"setValue1fv\",\"uniform1fv\",\"setValue1iv\",\"uniform1iv\",\"setValueV2a\",\"updateCache\",\"setValueV3a\",\"setValueV4a\",\"setValueM2a\",\"setValueM3a\",\"setValueM4a\",\"setValueT1a\",\"units\",\"setValueT6a\",\"SingleUniform\",\"activeInfo\",\"getSingularSetter\",\"PureArrayUniform\",\"getPureArraySetter\",\"StructuredUniform\",\"RePathPart\",\"addUniform\",\"container\",\"uniformObject\",\"parseUniform\",\"path\",\"pathLength\",\"lastIndex\",\"matchEnd\",\"idIsIndex\",\"subscript\",\"next\",\"WebGLUniforms\",\"getProgramParameter\",\"getActiveUniform\",\"getUniformLocation\",\"WebGLShader\",\"shader\",\"createShader\",\"shaderSource\",\"compileShader\",\"getShaderParameter\",\"getShaderInfoLog\",\"split\",\"join\",\"addLineNumbers\",\"setOptional\",\"upload\",\"seqWithValue\",\"programIdCount\",\"getEncodingComponents\",\"getTexelDecodingFunction\",\"functionName\",\"getToneMappingFunction\",\"toneMapping\",\"toneMappingName\",\"filterEmptyLine\",\"replaceLightNums\",\"replace\",\"numDirLights\",\"numSpotLights\",\"numRectAreaLights\",\"numPointLights\",\"numHemiLights\",\"replaceClippingPlaneNums\",\"numClippingPlanes\",\"numClipIntersection\",\"parseIncludes\",\"include\",\"unrollLoops\",\"snippet\",\"unroll\",\"WebGLProgram\",\"code\",\"shadowMapTypeDefine\",\"shadowMapType\",\"envMapTypeDefine\",\"envMapModeDefine\",\"envMapBlendingDefine\",\"prefixVertex\",\"prefixFragment\",\"gammaFactorDefine\",\"customExtensions\",\"rendererExtensions\",\"envMapCubeUV\",\"objectSpaceNormalMap\",\"filter\",\"generateExtensions\",\"customDefines\",\"chunks\",\"generateDefines\",\"createProgram\",\"isRawShaderMaterial\",\"supportsVertexTextures\",\"maxBones\",\"useFog\",\"fogExp\",\"useVertexTexture\",\"doubleSided\",\"flipSided\",\"shadowMapEnabled\",\"physicallyCorrectLights\",\"outputEncoding\",\"mapEncoding\",\"matcapEncoding\",\"envMapEncoding\",\"emissiveMapEncoding\",\"depthPacking\",\"isGLSL3ShaderMaterial\",\"versionRegex\",\"fragmentGlsl\",\"glVertexShader\",\"glFragmentShader\",\"attachShader\",\"bindAttribLocation\",\"linkProgram\",\"cachedUniforms\",\"cachedAttributes\",\"programLog\",\"getProgramInfoLog\",\"trim\",\"vertexLog\",\"fragmentLog\",\"runnable\",\"haveDiagnostics\",\"getError\",\"diagnostics\",\"prefix\",\"deleteShader\",\"getAttributes\",\"getActiveAttrib\",\"getAttribLocation\",\"fetchAttributeLocations\",\"destroy\",\"deleteProgram\",\"usedTimes\",\"WebGLPrograms\",\"shaderIDs\",\"parameterNames\",\"getTextureEncodingFromMap\",\"gammaOverrideLinear\",\"getParameters\",\"shadows\",\"nClipPlanes\",\"nClipIntersection\",\"shaderID\",\"isSkinnedMesh\",\"bones\",\"skeleton\",\"nVertexUniforms\",\"nVertexMatrices\",\"allocateBones\",\"currentRenderTarget\",\"getRenderTarget\",\"gammaOutput\",\"gammaInput\",\"envMapMode\",\"isFogExp2\",\"maxMorphTargets\",\"maxMorphNormals\",\"directional\",\"spot\",\"rectArea\",\"hemi\",\"shadowMap\",\"getProgramCode\",\"acquireProgram\",\"pl\",\"programInfo\",\"releaseProgram\",\"pop\",\"WebGLProperties\",\"painterSortStable\",\"groupOrder\",\"reversePainterSortStable\",\"WebGLRenderList\",\"renderItems\",\"renderItemsIndex\",\"opaque\",\"getNextRenderItem\",\"renderItem\",\"WebGLRenderLists\",\"lists\",\"onSceneDispose\",\"list\",\"cameras\",\"UniformsCache\",\"light\",\"halfWidth\",\"halfHeight\",\"WebGLLights\",\"stateID\",\"directionalLength\",\"pointLength\",\"spotLength\",\"rectAreaLength\",\"hemiLength\",\"shadowsLength\",\"ambient\",\"vector3\",\"matrix42\",\"setup\",\"intensity\",\"isAmbientLight\",\"isDirectionalLight\",\"bias\",\"mapSize\",\"isSpotLight\",\"penumbra\",\"isRectAreaLight\",\"isPointLight\",\"isHemisphereLight\",\"WebGLRenderState\",\"lightsArray\",\"shadowsArray\",\"setupLights\",\"pushLight\",\"pushShadow\",\"shadowLight\",\"WebGLRenderStates\",\"renderStates\",\"renderState\",\"WebGLShadowMap\",\"_renderer\",\"_objects\",\"_frustum\",\"_projScreenMatrix\",\"_shadowMapSize\",\"_maxShadowMapSize\",\"_lookTarget\",\"_lightPositionWorld\",\"_MorphingFlag\",\"_SkinningFlag\",\"_NumberOfMaterialVariants\",\"_depthMaterials\",\"_distanceMaterials\",\"_materialCache\",\"0\",\"1\",\"2\",\"cubeDirections\",\"cubeUps\",\"cube2DViewPorts\",\"useMorphing\",\"useSkinning\",\"depthMaterial\",\"distanceMaterial\",\"getDepthMaterial\",\"lightPositionWorld\",\"materialVariants\",\"customMaterial\",\"customDepthMaterial\",\"customDistanceMaterial\",\"variantIndex\",\"keyA\",\"keyB\",\"materialsForVariant\",\"cachedMaterial\",\"isMeshDistanceMaterial\",\"renderObject\",\"shadowCamera\",\"renderBufferDirect\",\"autoUpdate\",\"faceCount\",\"_state\",\"setBlending\",\"setTest\",\"setScissorTest\",\"vpWidth\",\"vpHeight\",\"pars\",\"updateProjectionMatrix\",\"isSpotLightShadow\",\"shadowMatrix\",\"setRenderTarget\",\"vpDimensions\",\"WebGLState\",\"utils\",\"colorBuffer\",\"locked\",\"currentColorMask\",\"currentColorClear\",\"setMask\",\"colorMask\",\"setLocked\",\"lock\",\"currentDepthMask\",\"currentDepthFunc\",\"currentDepthClear\",\"depthMask\",\"setFunc\",\"clearDepth\",\"currentStencilMask\",\"currentStencilFunc\",\"currentStencilRef\",\"currentStencilFuncMask\",\"currentStencilFail\",\"currentStencilZFail\",\"currentStencilZPass\",\"currentStencilClear\",\"stencilTest\",\"stencilMask\",\"stencilFunc\",\"stencilRef\",\"setOp\",\"stencilFail\",\"stencilZFail\",\"stencilZPass\",\"stencilOp\",\"stencil\",\"clearStencil\",\"maxVertexAttributes\",\"newAttributes\",\"enabledAttributes\",\"attributeDivisors\",\"enabledCapabilities\",\"compressedTextureFormats\",\"currentProgram\",\"currentBlendingEnabled\",\"currentBlending\",\"currentBlendEquation\",\"currentBlendSrc\",\"currentBlendDst\",\"currentBlendEquationAlpha\",\"currentBlendSrcAlpha\",\"currentBlendDstAlpha\",\"currentPremultipledAlpha\",\"currentFlipSided\",\"currentCullFace\",\"currentLineWidth\",\"currentPolygonOffsetFactor\",\"currentPolygonOffsetUnits\",\"lineWidthAvailable\",\"glVersion\",\"currentTextureSlot\",\"currentBoundTextures\",\"currentScissor\",\"currentViewport\",\"createTexture\",\"bindTexture\",\"texParameteri\",\"texImage2D\",\"emptyTextures\",\"enableAttributeAndDivisor\",\"meshPerAttribute\",\"enableVertexAttribArray\",\"blendEquationSeparate\",\"convert\",\"blendFuncSeparate\",\"blendFunc\",\"setFlipSided\",\"frontFace\",\"setCullFace\",\"cullFace\",\"setPolygonOffset\",\"factor\",\"activeTexture\",\"webglSlot\",\"initAttributes\",\"enableAttribute\",\"disableUnusedAttributes\",\"disableVertexAttribArray\",\"getCompressedTextureFormats\",\"formats\",\"useProgram\",\"setMaterial\",\"frontFaceCW\",\"setLineWidth\",\"lineWidth\",\"webglType\",\"webglTexture\",\"boundTexture\",\"compressedTexImage2D\",\"apply\",\"texImage3D\",\"WebGLTextures\",\"_gl\",\"_videoTextures\",\"resizeImage\",\"needsPowerOfTwo\",\"needsNewCanvas\",\"maxSize\",\"HTMLImageElement\",\"ImageBitmap\",\"textureNeedsGenerateMipmaps\",\"supportsMips\",\"generateMipmap\",\"__maxMipLevel\",\"LOG2E\",\"getInternalFormat\",\"glFormat\",\"glType\",\"internalFormat\",\"filterFallback\",\"onTextureDispose\",\"textureProperties\",\"__image__webglTextureCube\",\"deleteTexture\",\"__webglInit\",\"__webglTexture\",\"deallocateTexture\",\"isVideoTexture\",\"onRenderTargetDispose\",\"renderTarget\",\"renderTargetProperties\",\"deleteFramebuffer\",\"__webglFramebuffer\",\"__webglDepthbuffer\",\"deleteRenderbuffer\",\"deallocateRenderTarget\",\"slot\",\"updateVideoTexture\",\"__version\",\"complete\",\"uploadTexture\",\"setTextureParameters\",\"textureType\",\"__currentAnisotropy\",\"texParameterf\",\"TEXTURE_MAX_ANISOTROPY_EXT\",\"pixelStorei\",\"textureNeedsPowerOfTwo\",\"glInternalFormat\",\"mipmap\",\"isDepthTexture\",\"isCompressedTexture\",\"setupFrameBufferTexture\",\"framebuffer\",\"attachment\",\"textureTarget\",\"bindFramebuffer\",\"framebufferTexture2D\",\"setupRenderBufferStorage\",\"renderbuffer\",\"isMultisample\",\"bindRenderbuffer\",\"getRenderTargetSamples\",\"renderbufferStorageMultisample\",\"renderbufferStorage\",\"framebufferRenderbuffer\",\"setupDepthRenderbuffer\",\"isCube\",\"webglDepthTexture\",\"setupDepthTexture\",\"createRenderbuffer\",\"isCompressed\",\"cubeImage\",\"setTextureCubeDynamic\",\"setupRenderTarget\",\"createFramebuffer\",\"__webglMultisampledFramebuffer\",\"__webglColorRenderbuffer\",\"__webglDepthRenderbuffer\",\"updateRenderTargetMipmap\",\"updateMultisampleRenderTarget\",\"blitFramebuffer\",\"HALF_FLOAT_OES\",\"COMPRESSED_RGB_S3TC_DXT1_EXT\",\"COMPRESSED_RGBA_S3TC_DXT1_EXT\",\"COMPRESSED_RGBA_S3TC_DXT3_EXT\",\"COMPRESSED_RGBA_S3TC_DXT5_EXT\",\"COMPRESSED_RGB_PVRTC_4BPPV1_IMG\",\"COMPRESSED_RGB_PVRTC_2BPPV1_IMG\",\"COMPRESSED_RGBA_PVRTC_4BPPV1_IMG\",\"COMPRESSED_RGBA_PVRTC_2BPPV1_IMG\",\"COMPRESSED_RGB_ETC1_WEBGL\",\"MIN_EXT\",\"MAX_EXT\",\"UNSIGNED_INT_24_8_WEBGL\",\"projectionMatrixInverse\",\"fov\",\"aspect\",\"zoom\",\"focus\",\"view\",\"filmGauge\",\"filmOffset\",\"isMeshDepthMaterial\",\"isGroup\",\"isPerspectiveCamera\",\"setFocalLength\",\"focalLength\",\"vExtentSlope\",\"getFilmHeight\",\"atan\",\"getFocalLength\",\"getEffectiveFOV\",\"getFilmWidth\",\"setViewOffset\",\"fullWidth\",\"fullHeight\",\"offsetX\",\"offsetY\",\"clearViewOffset\",\"skew\",\"isArrayCamera\",\"matrixPosition\",\"offsetMatrix\",\"identityMatrix\",\"cameraLPos\",\"cameraRPos\",\"setProjectionFromUnion\",\"cameraL\",\"cameraR\",\"ipd\",\"projL\",\"projR\",\"topFov\",\"bottomFov\",\"leftFov\",\"rightFov\",\"zOffset\",\"xOffset\",\"near2\",\"far2\",\"left2\",\"right2\",\"top2\",\"bottom2\",\"WebVRManager\",\"device\",\"frameData\",\"poseTarget\",\"controllers\",\"standingMatrix\",\"standingMatrixInverse\",\"framebufferScaleFactor\",\"frameOfReferenceType\",\"window\",\"VRFrameData\",\"onVRDisplayPresentChange\",\"tempQuaternion\",\"tempPosition\",\"bounds\",\"currentSize\",\"currentPixelRatio\",\"cameraVR\",\"isPresenting\",\"eyeParameters\",\"getEyeParameters\",\"renderWidth\",\"renderHeight\",\"getPixelRatio\",\"setDrawingBufferSize\",\"animation\",\"triggers\",\"findGamepad\",\"gamepads\",\"navigator\",\"getGamepads\",\"gamepad\",\"startsWith\",\"getController\",\"controller\",\"getDevice\",\"setDevice\",\"setFramebufferScaleFactor\",\"setFrameOfReferenceType\",\"setPoseTarget\",\"getCamera\",\"userHeight\",\"depthNear\",\"depthFar\",\"getFrameData\",\"stageParameters\",\"sittingToStandingTransform\",\"pose\",\"poseObject\",\"orientation\",\"leftViewMatrix\",\"rightViewMatrix\",\"leftProjectionMatrix\",\"rightProjectionMatrix\",\"getLayers\",\"layer\",\"leftBounds\",\"rightBounds\",\"hasPosition\",\"buttonId\",\"buttons\",\"pressed\",\"updateControllers\",\"getStandingMatrix\",\"submitFrame\",\"WebXRManager\",\"session\",\"frameOfReference\",\"inputSources\",\"onSessionEvent\",\"inputSource\",\"onSessionEnd\",\"setFramebuffer\",\"updateCamera\",\"XRDevice\",\"setCompatibleXRDevice\",\"setSession\",\"baseLayer\",\"XRWebGLLayer\",\"requestFrameOfReference\",\"then\",\"getInputSources\",\"onAnimationFrameCallback\",\"getDevicePose\",\"views\",\"getViewport\",\"getViewMatrix\",\"inputPose\",\"getInputPose\",\"targetRay\",\"transformMatrix\",\"pointerMatrix\",\"THREE\",\"_context\",\"_alpha\",\"_depth\",\"_stencil\",\"_antialias\",\"antialias\",\"_premultipliedAlpha\",\"_preserveDrawingBuffer\",\"preserveDrawingBuffer\",\"_powerPreference\",\"powerPreference\",\"currentRenderList\",\"currentRenderState\",\"domElement\",\"sortObjects\",\"toneMappingExposure\",\"toneMappingWhitePoint\",\"programCache\",\"renderLists\",\"morphtargets\",\"bufferRenderer\",\"indexedBufferRenderer\",\"_this\",\"_isContextLost\",\"_framebuffer\",\"_currentRenderTarget\",\"_currentFramebuffer\",\"_currentMaterialId\",\"_currentGeometryProgram\",\"_currentCamera\",\"_currentArrayCamera\",\"_currentViewport\",\"_currentScissor\",\"_currentScissorTest\",\"_usedTextureUnits\",\"_width\",\"_height\",\"_pixelRatio\",\"_viewport\",\"_scissor\",\"_scissorTest\",\"_clipping\",\"_clippingEnabled\",\"_localClippingEnabled\",\"_vector3\",\"getTargetPixelRatio\",\"contextAttributes\",\"onContextLost\",\"onContextRestore\",\"rangeMin\",\"rangeMax\",\"message\",\"initGLContext\",\"vr\",\"preventDefault\",\"onMaterialDispose\",\"releaseMaterialProgramReference\",\"deallocateMaterial\",\"getContextAttributes\",\"forceContextLoss\",\"loseContext\",\"forceContextRestore\",\"restoreContext\",\"setPixelRatio\",\"updateStyle\",\"setViewport\",\"getDrawingBufferSize\",\"pixelRatio\",\"getCurrentViewport\",\"setScissor\",\"boolean\",\"bits\",\"renderBufferImmediate\",\"hasPositions\",\"hasNormals\",\"hasUvs\",\"hasColors\",\"programAttributes\",\"positionArray\",\"vertexAttribPointer\",\"normalArray\",\"uvArray\",\"colorArray\",\"setProgram\",\"updateBuffers\",\"rangeFactor\",\"isInstancedBufferGeometry\",\"materialDefaultAttributeValues\",\"programAttribute\",\"geometryAttribute\",\"stride\",\"isInstancedInterleavedBuffer\",\"isInstancedBufferAttribute\",\"vertexAttrib2fv\",\"vertexAttrib3fv\",\"vertexAttrib4fv\",\"vertexAttrib1fv\",\"setupVertexAttributes\",\"dataCount\",\"rangeStart\",\"rangeCount\",\"drawStart\",\"drawEnd\",\"drawCount\",\"isLineSegments\",\"isLineLoop\",\"isSprite\",\"compile\",\"initMaterial\",\"warned\",\"renderObjects\",\"overrideMaterial\",\"camera2\",\"isImmediateRenderObject\",\"renderObjectImmediate\",\"materialProperties\",\"lightsHash\",\"lightsStateHash\",\"programChange\",\"numSupportedMorphTargets\",\"numSupportedMorphNormals\",\"progUniforms\",\"uniformsList\",\"useCache\",\"refreshProgram\",\"refreshMaterial\",\"refreshLights\",\"p_uniforms\",\"m_uniforms\",\"isMeshPhongMaterial\",\"isMeshStandardMaterial\",\"uCamPos\",\"cameraPosition\",\"isMeshLambertMaterial\",\"boneTexture\",\"boneMatrices\",\"boneTextureSize\",\"isFog\",\"density\",\"refreshUniformsFog\",\"refreshUniformsCommon\",\"refreshUniformsLambert\",\"isMeshToonMaterial\",\"refreshUniformsPhong\",\"refreshUniformsToon\",\"isMeshPhysicalMaterial\",\"refreshUniformsStandard\",\"refreshUniformsPhysical\",\"isMeshMatcapMaterial\",\"refreshUniformsMatcap\",\"refreshUniformsDepth\",\"refreshUniformsDistance\",\"isMeshNormalMaterial\",\"refreshUniformsNormal\",\"isLineBasicMaterial\",\"refreshUniformsLine\",\"isLineDashedMaterial\",\"refreshUniformsDash\",\"isPointsMaterial\",\"refreshUniformsPoints\",\"isSpriteMaterial\",\"refreshUniformsSprites\",\"isShadowMaterial\",\"ltc_1\",\"LTC_1\",\"ltc_2\",\"LTC_2\",\"uvScaleMap\",\"projectObject\",\"opaqueObjects\",\"transparentObjects\",\"textureUnit\",\"setTexture\",\"readRenderTargetPixels\",\"restore\",\"textureFormat\",\"checkFramebufferStatus\",\"readPixels\",\"copyFramebufferToTexture\",\"level\",\"copyTexImage2D\",\"copyTextureToTexture\",\"srcTexture\",\"dstTexture\",\"texSubImage2D\",\"interleavedBuffer\",\"levels\",\"bindMode\",\"bindMatrix\",\"bindMatrixInverse\",\"boneInverses\",\"calculateInverses\",\"linecap\",\"linejoin\",\"video\",\"ol\",\"edge\",\"edges\",\"func\",\"slices\",\"stacks\",\"pu\",\"pv\",\"sliceCount\",\"detail\",\"vertexBuffer\",\"uvBuffer\",\"subdivideFace\",\"cols\",\"aj\",\"bj\",\"rows\",\"pushVertex\",\"getVertexByIndex\",\"correctUV\",\"azimuth\",\"subdivide\",\"appplyRadius\",\"centroid\",\"azi\",\"correctUVs\",\"correctSeam\",\"generateUVs\",\"tubularSegments\",\"radialSegments\",\"closed\",\"taper\",\"bufferGeometry\",\"tangents\",\"binormals\",\"frames\",\"computeFrenetFrames\",\"P\",\"generateSegment\",\"getPointAt\",\"N\",\"B\",\"generateIndices\",\"generateBufferData\",\"tube\",\"heightScale\",\"P1\",\"P2\",\"T\",\"calculatePositionOnCurve\",\"cu\",\"su\",\"quOverP\",\"cs\",\"arc\",\"isScene\",\"isInterleavedBuffer\",\"intersectPoint\",\"worldScale\",\"mvPosition\",\"alignedPosition\",\"rotatedPosition\",\"viewWorldMatrix\",\"transformVertex\",\"vertexPosition\",\"addLevel\",\"getObjectForDistance\",\"normalizeSkinWeights\",\"skinWeight\",\"bone\",\"isBone\",\"getBoneByName\",\"computeLineDistances\",\"positionAttribute\",\"linePrecision\",\"localPrecision\",\"localPrecisionSq\",\"vStart\",\"vEnd\",\"interSegment\",\"interRay\",\"nbVertices\",\"threshold\",\"params\",\"localThreshold\",\"localThresholdSq\",\"testPoint\",\"rayPointDistanceSq\",\"distanceToRay\",\"readyState\",\"HAVE_CURRENT_DATA\",\"isCanvasTexture\",\"Earcut\",\"holeIndices\",\"dim\",\"invSize\",\"hasHoles\",\"outerLen\",\"outerNode\",\"linkedList\",\"queue\",\"steiner\",\"getLeftmost\",\"compareX\",\"eliminateHole\",\"filterPoints\",\"eliminateHoles\",\"earcutLinked\",\"clockwise\",\"last\",\"sum\",\"signedArea\",\"insertNode\",\"removeNode\",\"again\",\"area\",\"prev\",\"ear\",\"pass\",\"zOrder\",\"prevZ\",\"nextZ\",\"tail\",\"numMerges\",\"pSize\",\"qSize\",\"inSize\",\"sortLinked\",\"indexCurve\",\"isEarHashed\",\"isEar\",\"cureLocalIntersections\",\"splitEarcut\",\"pointInTriangle\",\"minTX\",\"minTY\",\"maxTX\",\"maxTY\",\"locallyInside\",\"isValidDiagonal\",\"splitPolygon\",\"hole\",\"hx\",\"hy\",\"mx\",\"my\",\"tanMin\",\"findHoleBridge\",\"leftmost\",\"px\",\"py\",\"intersectsPolygon\",\"inside\",\"middleInside\",\"q2\",\"Node\",\"an\",\"bp\",\"contour\",\"isClockWise\",\"pts\",\"triangulateShape\",\"holes\",\"removeDupEndPts\",\"addContour\",\"holeIndex\",\"forEach\",\"verticesArray\",\"addShape\",\"placeholder\",\"curveSegments\",\"steps\",\"bevelEnabled\",\"bevelThickness\",\"bevelSize\",\"bevelSegments\",\"extrudePath\",\"uvgen\",\"UVGenerator\",\"WorldUVGenerator\",\"amount\",\"extrudePts\",\"splineTube\",\"binormal\",\"position2\",\"ahole\",\"hl\",\"extrudeByPath\",\"getSpacedPoints\",\"shapePoints\",\"extractPoints\",\"reverse\",\"concat\",\"scalePt2\",\"pt\",\"vec\",\"bs\",\"vert\",\"vlen\",\"flen\",\"getBevelVec\",\"inPt\",\"inPrev\",\"inNext\",\"v_trans_x\",\"v_trans_y\",\"shrink_by\",\"v_prev_x\",\"v_prev_y\",\"v_next_x\",\"v_next_y\",\"v_prev_lensq\",\"collinear0\",\"v_prev_len\",\"v_next_len\",\"ptPrevShift_x\",\"ptPrevShift_y\",\"sf\",\"v_trans_lensq\",\"direction_eq\",\"contourMovements\",\"oneHoleMovements\",\"holesMovements\",\"verticesMovements\",\"sidewalls\",\"layeroffset\",\"sl\",\"slen1\",\"slen2\",\"f4\",\"f3\",\"addVertex\",\"nextIndex\",\"generateTopUV\",\"addUV\",\"generateSideWallUV\",\"vector2\",\"buildLidFaces\",\"buildSideFaces\",\"indexA\",\"indexB\",\"indexC\",\"a_x\",\"a_y\",\"b_x\",\"b_y\",\"c_x\",\"c_y\",\"indexD\",\"a_z\",\"b_z\",\"c_z\",\"d_x\",\"d_y\",\"d_z\",\"text\",\"font\",\"isFont\",\"generateShapes\",\"phiStart\",\"phiLength\",\"thetaStart\",\"thetaLength\",\"thetaEnd\",\"grid\",\"verticesRow\",\"innerRadius\",\"outerRadius\",\"thetaSegments\",\"phiSegments\",\"segment\",\"radiusStep\",\"thetaSegmentLevel\",\"segments\",\"base\",\"inverseSegments\",\"n1\",\"n2\",\"shapeHole\",\"indexOffset\",\"shapeVertices\",\"shapeHoles\",\"toJSON$1\",\"thresholdAngle\",\"thresholdDot\",\"sourceVertices\",\"face1\",\"face2\",\"radiusTop\",\"radiusBottom\",\"openEnded\",\"indexArray\",\"generateCap\",\"centerIndexStart\",\"centerIndexEnd\",\"cosTheta\",\"sinTheta\",\"slope\",\"indexRow\",\"generateTorso\",\"Geometries\",\"freeze\",\"STANDARD\",\"PHYSICAL\",\"TOON\",\"MATCAP\",\"Materials\",\"arraySlice\",\"from\",\"to\",\"isTypedArray\",\"convertArray\",\"forceClone\",\"ArrayBuffer\",\"isView\",\"DataView\",\"getKeyframeOrder\",\"times\",\"sortedArray\",\"nValues\",\"srcOffset\",\"flattenJSON\",\"jsonKeys\",\"valuePropertyName\",\"parameterPositions\",\"sampleValues\",\"sampleSize\",\"resultBuffer\",\"_cachedIndex\",\"valueSize\",\"_weightPrev\",\"_offsetPrev\",\"_weightNext\",\"_offsetNext\",\"interpolation\",\"TimeBufferType\",\"ValueBufferType\",\"setInterpolation\",\"DefaultInterpolation\",\"duration\",\"tracks\",\"resetDuration\",\"parseKeyframeTrack\",\"json\",\"trackType\",\"typeName\",\"toLowerCase\",\"getTrackTypeForValueTypeName\",\"evaluate\",\"pp\",\"validate_interval\",\"seek\",\"linear_scan\",\"forward_scan\",\"giveUpAt\",\"afterEnd_\",\"t1global\",\"beforeStart_\",\"mid\",\"intervalChanged_\",\"interpolate_\",\"settings\",\"DefaultSettings_\",\"getSettings_\",\"copySampleValue_\",\"endingStart\",\"endingEnd\",\"iPrev\",\"iNext\",\"tPrev\",\"tNext\",\"halfDt\",\"o1\",\"o0\",\"oP\",\"oN\",\"wP\",\"wN\",\"ppp\",\"sP\",\"sN\",\"offset1\",\"offset0\",\"weight1\",\"weight0\",\"track\",\"getInterpolation\",\"ValueTypeName\",\"InterpolantFactoryMethodDiscrete\",\"getValueSize\",\"InterpolantFactoryMethodLinear\",\"InterpolantFactoryMethodSmooth\",\"factoryMethod\",\"createInterpolant\",\"shift\",\"timeOffset\",\"timeScale\",\"startTime\",\"endTime\",\"nKeys\",\"validate\",\"valid\",\"prevTime\",\"currTime\",\"optimize\",\"smoothInterpolation\",\"writeIndex\",\"keep\",\"offsetP\",\"offsetN\",\"readOffset\",\"writeOffset\",\"TypedKeyframeTrack\",\"jsonTracks\",\"frameTime\",\"fps\",\"clip\",\"clipTracks\",\"CreateFromMorphTargetSequence\",\"morphTargetSequence\",\"noLoop\",\"numMorphTargets\",\"findByName\",\"objectOrClipArray\",\"clipArray\",\"animations\",\"CreateClipsFromMorphTargetSequences\",\"animationToMorphTargets\",\"pattern\",\"parts\",\"animationMorphTargets\",\"clips\",\"parseAnimation\",\"addNonemptyTrack\",\"trackName\",\"animationKeys\",\"propertyName\",\"destTracks\",\"clipName\",\"hierarchyTracks\",\"hierarchy\",\"morphTargetNames\",\"morphTargetName\",\"animationKey\",\"boneName\",\"files\",\"file\",\"onLoad\",\"onProgress\",\"onError\",\"isLoading\",\"itemsLoaded\",\"itemsTotal\",\"urlModifier\",\"onStart\",\"itemStart\",\"itemEnd\",\"itemError\",\"resolveURL\",\"setURLModifier\",\"transform\",\"loading\",\"manager\",\"_parser\",\"arcLengthDivisions\",\"aX\",\"aY\",\"xRadius\",\"yRadius\",\"aStartAngle\",\"aEndAngle\",\"aClockwise\",\"aRotation\",\"aRadius\",\"CubicPoly\",\"c0\",\"initCatmullRom\",\"x3\",\"tension\",\"initNonuniformCatmullRom\",\"dt0\",\"dt1\",\"dt2\",\"t2\",\"calc\",\"load\",\"cached\",\"setTimeout\",\"dataUriRegexResult\",\"mimeType\",\"isBase64\",\"decodeURIComponent\",\"atob\",\"response\",\"responseType\",\"charCodeAt\",\"Blob\",\"parser\",\"DOMParser\",\"parseFromString\",\"request\",\"XMLHttpRequest\",\"header\",\"open\",\"callbacks\",\"status\",\"withCredentials\",\"overrideMimeType\",\"requestHeader\",\"setRequestHeader\",\"send\",\"setPath\",\"setResponseType\",\"setWithCredentials\",\"setMimeType\",\"loader\",\"loadTexture\",\"texDatas\",\"loaded\",\"mipmapCount\",\"isCubemap\",\"texData\",\"crossOrigin\",\"onImageLoad\",\"onImageError\",\"substr\",\"setCrossOrigin\",\"urls\",\"isJPEG\",\"search\",\"getPoint\",\"optionalTarget\",\"getUtoTmapping\",\"getPoints\",\"divisions\",\"getLength\",\"lengths\",\"getLengths\",\"cacheArcLengths\",\"current\",\"updateArcLengths\",\"targetArcLength\",\"arcLengths\",\"comparison\",\"lengthBefore\",\"getTangent\",\"pt1\",\"getTangentAt\",\"mat\",\"MAX_VALUE\",\"tz\",\"fromJSON\",\"isEllipseCurve\",\"twoPi\",\"deltaAngle\",\"samePoints\",\"isArcCurve\",\"pz\",\"curveType\",\"CatmullRom\",\"QuadraticBezier\",\"QuadraticBezierP0\",\"QuadraticBezierP1\",\"QuadraticBezierP2\",\"CubicBezier\",\"CubicBezierP0\",\"CubicBezierP1\",\"CubicBezierP2\",\"CubicBezierP3\",\"v3\",\"isCatmullRomCurve3\",\"intPoint\",\"weight\",\"isCubicBezierCurve\",\"isCubicBezierCurve3\",\"isLineCurve\",\"isLineCurve3\",\"isQuadraticBezierCurve\",\"isQuadraticBezierCurve3\",\"isSplineCurve\",\"Curves\",\"curves\",\"autoClose\",\"currentPoint\",\"power\",\"curve\",\"closePath\",\"startPoint\",\"endPoint\",\"curveLengths\",\"getCurveLengths\",\"segmentLength\",\"lens\",\"cacheLengths\",\"sums\",\"resolution\",\"moveTo\",\"lineTo\",\"quadraticCurveTo\",\"aCPx\",\"aCPy\",\"bezierCurveTo\",\"aCP1x\",\"aCP1y\",\"aCP2x\",\"aCP2y\",\"splineThru\",\"absarc\",\"absellipse\",\"ellipse\",\"firstPoint\",\"lastPoint\",\"getPointsHoles\",\"holesPts\",\"isOrthographicCamera\",\"zoomW\",\"zoomH\",\"scaleW\",\"scaleH\",\"getTexture\",\"shading\",\"setTextures\",\"decodeText\",\"TextDecoder\",\"decode\",\"fromCharCode\",\"escape\",\"extractUrlBase\",\"lastIndexOf\",\"typedArray\",\"TYPED_ARRAYS\",\"drawcalls\",\"offsets\",\"resourcePath\",\"setResourcePath\",\"parseShape\",\"parseGeometries\",\"parseImages\",\"parseTextures\",\"parseMaterials\",\"parseObject\",\"parseAnimations\",\"bufferGeometryLoader\",\"details\",\"geometryShapes\",\"LegacyJSONLoader\",\"loadImage\",\"currentUrl\",\"parseConstant\",\"TEXTURE_MAPPING\",\"TEXTURE_WRAPPING\",\"TEXTURE_FILTER\",\"getGeometry\",\"getMaterial\",\"BlendingMode\",\"textureLoader\",\"materialLoader\",\"createImageBitmap\",\"fetch\",\"subPaths\",\"currentPath\",\"createPath\",\"char\",\"glyph\",\"glyphs\",\"cpx\",\"cpy\",\"cpx1\",\"cpy1\",\"cpx2\",\"cpy2\",\"outline\",\"_cachedOutline\",\"ha\",\"setOptions\",\"res\",\"blob\",\"imageBitmap\",\"catch\",\"toShapes\",\"isCCW\",\"noHoles\",\"toShapesNoHoles\",\"inSubpaths\",\"tmpPath\",\"tmpShape\",\"isPointInsidePolygon\",\"inPolygon\",\"polyLen\",\"edgeLowPt\",\"edgeHighPt\",\"edgeDx\",\"edgeDy\",\"perpEdge\",\"solid\",\"holesFirst\",\"tmpPoints\",\"tmpHoles\",\"betterShapeHoles\",\"newShapes\",\"newShapeHoles\",\"mainIdx\",\"ambiguous\",\"toChange\",\"sIdx\",\"sLen\",\"sho\",\"hIdx\",\"ho\",\"hole_unassigned\",\"s2Idx\",\"froms\",\"tos\",\"paths\",\"chars\",\"line_height\",\"yMax\",\"yMin\",\"underlineThickness\",\"ret\",\"createPaths\",\"substring\",\"Handlers\",\"handlers\",\"regex\",\"onLoadStart\",\"onLoadProgress\",\"onLoadComplete\",\"initMaterials\",\"texturePath\",\"createMaterial\",\"fullPath\",\"mapDiffuseRepeat\",\"mapDiffuseOffset\",\"mapDiffuseWrap\",\"mapDiffuseAnisotropy\",\"mapEmissiveRepeat\",\"mapEmissiveOffset\",\"mapEmissiveWrap\",\"mapEmissiveAnisotropy\",\"mapLightRepeat\",\"mapLightOffset\",\"mapLightWrap\",\"mapLightAnisotropy\",\"mapAORepeat\",\"mapAOOffset\",\"mapAOWrap\",\"mapAOAnisotropy\",\"mapBumpRepeat\",\"mapBumpOffset\",\"mapBumpWrap\",\"mapBumpAnisotropy\",\"mapNormalRepeat\",\"mapNormalOffset\",\"mapNormalWrap\",\"mapNormalAnisotropy\",\"mapSpecularRepeat\",\"mapSpecularOffset\",\"mapSpecularWrap\",\"mapSpecularAnisotropy\",\"mapMetalnessRepeat\",\"mapMetalnessOffset\",\"mapMetalnessWrap\",\"mapMetalnessAnisotropy\",\"mapRoughnessRepeat\",\"mapRoughnessOffset\",\"mapRoughnessWrap\",\"mapRoughnessAnisotropy\",\"mapAlphaRepeat\",\"mapAlphaOffset\",\"mapAlphaWrap\",\"mapAlphaAnisotropy\",\"instance\",\"eyeSep\",\"eyeRight\",\"eyeLeft\",\"webkitAudioContext\",\"cubeResolution\",\"cameraPX\",\"cameraNX\",\"cameraPY\",\"cameraNY\",\"cameraPZ\",\"cameraNZ\",\"autoStart\",\"oldTime\",\"elapsedTime\",\"running\",\"gain\",\"createGain\",\"connect\",\"destination\",\"timeDelta\",\"getInput\",\"autoplay\",\"detune\",\"loop\",\"playbackRate\",\"isPlaying\",\"hasPlaybackControl\",\"sourceType\",\"filters\",\"panner\",\"createPanner\",\"audio\",\"fftSize\",\"analyser\",\"createAnalyser\",\"frequencyBinCount\",\"getOutput\",\"binding\",\"mixFunction\",\"_slerp\",\"_select\",\"_lerp\",\"_mixBufferRegion\",\"cumulativeWeight\",\"useCount\",\"referenceCount\",\"bufferCopy\",\"decodeAudioData\",\"audioBuffer\",\"xmin\",\"xmax\",\"eyeSepOnProjection\",\"ymax\",\"performance\",\"Date\",\"now\",\"getElapsedTime\",\"getDelta\",\"newTime\",\"removeFilter\",\"disconnect\",\"getFilter\",\"setFilter\",\"getMasterVolume\",\"setMasterVolume\",\"setTargetAtTime\",\"currentTime\",\"clock\",\"positionX\",\"linearRampToValueAtTime\",\"positionY\",\"positionZ\",\"forwardX\",\"forwardY\",\"forwardZ\",\"upX\",\"upY\",\"upZ\",\"setOrientation\",\"setNodeSource\",\"audioNode\",\"setMediaElementSource\",\"mediaElement\",\"createMediaElementSource\",\"setBuffer\",\"play\",\"createBufferSource\",\"onended\",\"onEnded\",\"setDetune\",\"setPlaybackRate\",\"pause\",\"getFilters\",\"setFilters\",\"getDetune\",\"getPlaybackRate\",\"getLoop\",\"setLoop\",\"getVolume\",\"setVolume\",\"getRefDistance\",\"refDistance\",\"setRefDistance\",\"getRolloffFactor\",\"rolloffFactor\",\"setRolloffFactor\",\"getDistanceModel\",\"distanceModel\",\"setDistanceModel\",\"getMaxDistance\",\"maxDistance\",\"setMaxDistance\",\"setDirectionalCone\",\"coneInnerAngle\",\"coneOuterAngle\",\"coneOuterGain\",\"orientationX\",\"orientationY\",\"orientationZ\",\"getFrequencyData\",\"getByteFrequencyData\",\"getAverageFrequency\",\"accumulate\",\"accuIndex\",\"currentWeight\",\"mix\",\"originalValueOffset\",\"saveOriginalState\",\"getValue\",\"restoreOriginalState\",\"wordChar\",\"wordCharOrDot\",\"directoryRe\",\"nodeRe\",\"objectRe\",\"propertyRe\",\"trackRe\",\"supportedObjectNames\",\"reservedRe\",\"startP\",\"startEnd\",\"lineGeometry\",\"coneGeometry\",\"Composite\",\"targetGroup\",\"optionalParsedPath\",\"parsedPath\",\"parseTrackName\",\"_targetGroup\",\"_bindings\",\"subscribe_\",\"rootNode\",\"findNode\",\"nodeName\",\"nCachedObjects_\",\"_indicesByUUID\",\"_paths\",\"_parsedPaths\",\"_bindingsIndicesByPath\",\"stats\",\"total\",\"inUse\",\"bindingsPerObject\",\"AnimationAction\",\"mixer\",\"localRoot\",\"_mixer\",\"_clip\",\"_localRoot\",\"nTracks\",\"interpolants\",\"interpolantSettings\",\"interpolant\",\"_interpolantSettings\",\"_interpolants\",\"_propertyBindings\",\"_cacheIndex\",\"_byClipCacheIndex\",\"_timeScaleInterpolant\",\"_weightInterpolant\",\"_loopCount\",\"_startTime\",\"_effectiveTimeScale\",\"_effectiveWeight\",\"repetitions\",\"paused\",\"clampWhenFinished\",\"zeroSlopeAtStart\",\"zeroSlopeAtEnd\",\"root\",\"_root\",\"_initMemoryManager\",\"_accuIndex\",\"ascSort\",\"intersectObject\",\"nNormals\",\"objGeometry\",\"cone\",\"getBoneList\",\"boneList\",\"sphereSize\",\"radials\",\"circles\",\"lightPlane\",\"targetLine\",\"pointMap\",\"colorFrustum\",\"colorCone\",\"colorUp\",\"colorTarget\",\"colorCross\",\"addLine\",\"addPoint\",\"headLength\",\"headWidth\",\"setDirection\",\"firstValidIndex\",\"bindings\",\"unbind\",\"isAnimationObjectGroup\",\"sanitizeNodeName\",\"RegExp\",\"matches\",\"results\",\"objectName\",\"objectIndex\",\"propertyIndex\",\"lastDot\",\"searchNodeSubtree\",\"childNode\",\"subTreeNode\",\"_getValue_unavailable\",\"_setValue_unavailable\",\"BindingType\",\"Direct\",\"EntireArray\",\"ArrayElement\",\"HasFromToArray\",\"Versioning\",\"None\",\"NeedsUpdate\",\"MatrixWorldNeedsUpdate\",\"GetterByBindingType\",\"resolvedProperty\",\"SetterByBindingTypeAndVersioning\",\"targetObject\",\"dest\",\"targetArray\",\"sourceArray\",\"nodeProperty\",\"versioning\",\"bindingType\",\"_getValue_unbound\",\"_setValue_unbound\",\"nObjects\",\"nCachedObjects\",\"indicesByUUID\",\"parsedPaths\",\"nBindings\",\"knownObject\",\"firstActiveIndex\",\"lastCachedObject\",\"bindingsForPath\",\"lastCached\",\"lastCachedIndex\",\"firstActiveObject\",\"firstActive\",\"uncache\",\"lastObject\",\"indicesByPath\",\"unsubscribe_\",\"lastBindingsIndex\",\"lastBindings\",\"_activateAction\",\"_deactivateAction\",\"stopFading\",\"stopWarping\",\"isRunning\",\"_isActiveAction\",\"isScheduled\",\"startAt\",\"setEffectiveWeight\",\"getEffectiveWeight\",\"fadeIn\",\"_scheduleFading\",\"fadeOut\",\"crossFadeFrom\",\"fadeOutAction\",\"warp\",\"fadeInDuration\",\"fadeOutDuration\",\"startEndRatio\",\"endStartRatio\",\"crossFadeTo\",\"fadeInAction\",\"weightInterpolant\",\"_takeBackControlInterpolant\",\"setEffectiveTimeScale\",\"getEffectiveTimeScale\",\"setDuration\",\"syncWith\",\"action\",\"halt\",\"startTimeScale\",\"endTimeScale\",\"_lendControlInterpolant\",\"timeScaleInterpolant\",\"getMixer\",\"getClip\",\"getRoot\",\"_update\",\"deltaTime\",\"timeDirection\",\"timeRunning\",\"_updateTimeScale\",\"clipTime\",\"_updateTime\",\"_updateWeight\",\"propertyMixers\",\"interpolantValue\",\"loopCount\",\"pingPong\",\"_setEndings\",\"handle_stop\",\"loopDelta\",\"pending\",\"atStart\",\"atEnd\",\"weightNow\",\"weightThen\",\"_bindAction\",\"prototypeAction\",\"rootUuid\",\"bindingsByRoot\",\"_bindingsByRootAndName\",\"bindingsByName\",\"_addInactiveBinding\",\"clipUuid\",\"actionsForClip\",\"_actionsByClip\",\"knownActions\",\"_addInactiveAction\",\"_lendBinding\",\"_lendAction\",\"_takeBackBinding\",\"_takeBackAction\",\"_actions\",\"_nActiveActions\",\"_nActiveBindings\",\"_controlInterpolants\",\"_nActiveControlInterpolants\",\"actions\",\"controlInterpolants\",\"actionsByClip\",\"actionByRoot\",\"_removeInactiveAction\",\"lastInactiveAction\",\"cacheIndex\",\"knownActionsForClip\",\"lastKnownAction\",\"byClipCacheIndex\",\"_removeInactiveBindingsForAction\",\"_removeInactiveBinding\",\"prevIndex\",\"lastActiveIndex\",\"firstInactiveAction\",\"firstInactiveIndex\",\"lastActiveAction\",\"bindingByName\",\"propBinding\",\"lastInactiveBinding\",\"remove_empty_map\",\"_\",\"firstInactiveBinding\",\"lastActiveBinding\",\"_controlInterpolantsResultBuffer\",\"__cacheIndex\",\"lastActiveInterpolant\",\"clipAction\",\"optionalRoot\",\"clipObject\",\"existingAction\",\"newAction\",\"stopAllAction\",\"nActions\",\"uncacheClip\",\"actionsToRemove\",\"uncacheRoot\",\"uncacheAction\",\"setFromCamera\",\"coords\",\"intersectObjects\",\"other\",\"makeSafe\",\"setFromCartesianCoords\",\"distanceSq\",\"closestPointToPointParameter\",\"clampToLine\",\"startEnd2\",\"objPos\",\"objNorm\",\"coneLength\",\"coneWidth\",\"boneMatrix\",\"matrixWorldInv\",\"setPoint\",\"setColor\",\"construct\",\"createPointsGeometry\",\"createGeometry\",\"createSpacedPointsGeometry\",\"fromPoints\",\"initFromArray\",\"getControlPointsArray\",\"reparametrizeByArcLength\",\"setColors\",\"setTexturePath\",\"isIntersectionBox\",\"isIntersectionSphere\",\"random16\",\"nearestPowerOfTwo\",\"nextPowerOfTwo\",\"flattenToArrayOffset\",\"multiplyVector3\",\"multiplyVector3Array\",\"applyToBuffer\",\"applyToVector3Array\",\"extractPosition\",\"getPosition\",\"multiplyToArray\",\"multiplyVector4\",\"rotateAxis\",\"crossVector\",\"rotateByAxis\",\"makeFrustum\",\"isIntersectionLine\",\"isIntersectionPlane\",\"barycoordFromPoint\",\"midpoint\",\"extractAllPoints\",\"extrude\",\"makeGeometry\",\"fromAttribute\",\"distanceToManhattan\",\"lengthManhattan\",\"setEulerFromRotationMatrix\",\"setEulerFromQuaternion\",\"getPositionFromMatrix\",\"getScaleFromMatrix\",\"getColumnFromMatrix\",\"applyProjection\",\"computeTangents\",\"getChildByName\",\"renderDepth\",\"getWorldRotation\",\"eulerOrder\",\"useQuaternion\",\"initBones\",\"setLens\",\"onlyShadow\",\"shadowCameraFov\",\"shadowCameraLeft\",\"shadowCameraRight\",\"shadowCameraTop\",\"shadowCameraBottom\",\"shadowCameraVisible\",\"shadowDarkness\",\"shadowMapWidth\",\"shadowMapHeight\",\"copyIndicesArray\",\"addIndex\",\"addDrawCall\",\"clearDrawCalls\",\"computeOffsets\",\"getArrays\",\"addShapeList\",\"wrapAround\",\"overdraw\",\"wrapRGB\",\"metal\",\"clearTarget\",\"animate\",\"getCurrentRenderTarget\",\"getPrecision\",\"resetGLState\",\"supportsFloatTextures\",\"supportsHalfFloatTextures\",\"supportsStandardDerivatives\",\"supportsCompressedTextureS3TC\",\"supportsCompressedTexturePVRTC\",\"supportsBlendMinMax\",\"supportsInstancedArrays\",\"enableScissorTest\",\"addPrePlugin\",\"addPostPlugin\",\"updateShadowMap\",\"setFaceCulling\",\"shadowMapCullFace\",\"renderReverseSided\",\"renderSingleSided\",\"standing\",\"getData\",\"updateCubeMap\",\"geometry1\",\"projectVector\",\"unprojectVector\",\"pickingRay\",\"loadTextureCube\",\"loadCompressedTexture\",\"loadCompressedTextureCube\",\"createMultiMaterialObject\",\"detach\",\"attach\",\"App\",\"_toile_jpg__WEBPACK_IMPORTED_MODULE_0__\",\"_toile_jpg__WEBPACK_IMPORTED_MODULE_0___default\",\"_cadre2_obj__WEBPACK_IMPORTED_MODULE_1__\",\"_cadre2_obj__WEBPACK_IMPORTED_MODULE_1___default\",\"_floorTexture_WoodFlooring044_COL_2K_jpg__WEBPACK_IMPORTED_MODULE_3__\",\"_floorTexture_WoodFlooring044_COL_2K_jpg__WEBPACK_IMPORTED_MODULE_3___default\",\"_floorTexture_WoodFlooring044_NRM_2K_jpg__WEBPACK_IMPORTED_MODULE_4__\",\"_floorTexture_WoodFlooring044_NRM_2K_jpg__WEBPACK_IMPORTED_MODULE_4___default\",\"_floorTexture_WoodFlooring044_DISP_2K_jpg__WEBPACK_IMPORTED_MODULE_5__\",\"_floorTexture_WoodFlooring044_DISP_2K_jpg__WEBPACK_IMPORTED_MODULE_5___default\",\"_floorTexture_frame_jpg__WEBPACK_IMPORTED_MODULE_6__\",\"_floorTexture_frame_jpg__WEBPACK_IMPORTED_MODULE_6___default\",\"[object Object]\",\"onKeyDown\",\"onKeyUp\",\"moveFwd\",\"moveBwd\",\"moveLeft\",\"moveRight\",\"heading\",\"innerWidth\",\"innerHeight\",\"OBJLoader\",\"wallGeometry\",\"wallMaterial\",\"wall\",\"wallR\",\"wallL\",\"wallB\",\"createFloor\",\"ambientlight\",\"devicePixelRatio\",\"body\",\"appendChild\",\"spotlight\",\"addFrame\",\"frameAndPic\",\"keyCode\",\"floorDiffuse\",\"floorNrm\",\"floorDisp\",\"floorGeo\",\"floorMat\",\"xhr\",\"global\",\"_app__WEBPACK_IMPORTED_MODULE_0__\",\"OIMO\",\"defaultOnError\",\"err\",\"regexp\",\"vertex_pattern\",\"normal_pattern\",\"uv_pattern\",\"face_vertex\",\"face_vertex_uv\",\"face_vertex_uv_normal\",\"face_vertex_normal\",\"object_pattern\",\"smoothing_pattern\",\"material_library_pattern\",\"material_use_pattern\",\"setMaterials\",\"_createParserState\",\"materialLibraries\",\"startObject\",\"fromDeclaration\",\"previousMaterial\",\"currentMaterial\",\"_finalize\",\"smooth\",\"startMaterial\",\"libraries\",\"previous\",\"inherited\",\"mtllib\",\"groupEnd\",\"cloned\",\"lastMultiMaterial\",\"mi\",\"declared\",\"finalize\",\"parseVertexIndex\",\"parseNormalIndex\",\"parseUVIndex\",\"addVertexLine\",\"addNormal\",\"addUVLine\",\"ua\",\"ub\",\"uc\",\"ud\",\"na\",\"nb\",\"nc\",\"nd\",\"vLen\",\"ia\",\"ib\",\"ic\",\"uvLen\",\"nLen\",\"addLineGeometry\",\"vi\",\"uvi\",\"debug\",\"lineFirstChar\",\"lineSecondChar\",\"trimLeft\",\"lineParts\",\"lineVertices\",\"lineUVs\",\"li\",\"llen\",\"createdMaterials\",\"miLen\",\"sourceMaterial\",\"materialLine\",\"multiMaterial\",\"timeEnd\",\"Vec3\",\"Quat\",\"Mat33\",\"Box\",\"Cylinder\",\"ShapeConfig\",\"LimitMotor\",\"HingeJoint\",\"BallAndSocketJoint\",\"DistanceJoint\",\"PrismaticJoint\",\"SliderJoint\",\"WheelJoint\",\"JointConfig\",\"RigidBody\",\"World\",\"BR_NULL\",\"BR_BRUTE_FORCE\",\"BR_SWEEP_AND_PRUNE\",\"BR_BOUNDING_VOLUME_TREE\",\"BODY_NULL\",\"BODY_DYNAMIC\",\"BODY_STATIC\",\"BODY_KINEMATIC\",\"BODY_GHOST\",\"SHAPE_NULL\",\"SHAPE_SPHERE\",\"SHAPE_BOX\",\"SHAPE_CYLINDER\",\"SHAPE_PLANE\",\"SHAPE_PARTICLE\",\"SHAPE_TETRA\",\"JOINT_NULL\",\"JOINT_DISTANCE\",\"JOINT_BALL_AND_SOCKET\",\"JOINT_HINGE\",\"JOINT_WHEEL\",\"JOINT_SLIDER\",\"JOINT_PRISMATIC\",\"AABB_PROX\",\"printError\",\"InfoDisplay\",\"rnd\",\"degtorad\",\"radtodeg\",\"TwoPI\",\"PI90\",\"PI270\",\"INF\",\"EPZ\",\"EPZ2\",\"rand\",\"int\",\"fix\",\"toFixed\",\"xd\",\"yd\",\"zd\",\"acosClamp\",\"distanceVector\",\"dotVectors\",\"clazz\",\"world\",\"infos\",\"broadPhase\",\"broadPhaseType\",\"tt\",\"broadPhaseTime\",\"narrowPhaseTime\",\"solvingTime\",\"totalTime\",\"updateTime\",\"MaxBroadPhaseTime\",\"MaxNarrowPhaseTime\",\"MaxSolvingTime\",\"MaxTotalTime\",\"MaxUpdateTime\",\"e00\",\"e01\",\"e02\",\"e10\",\"e11\",\"e12\",\"e20\",\"e21\",\"e22\",\"AABB\",\"setTime\",\"resetMax\",\"calcBroadPhase\",\"calcNarrowPhase\",\"calcEnd\",\"upfps\",\"show\",\"numRigidBodies\",\"numContacts\",\"numContactPoints\",\"numPairChecks\",\"numIslands\",\"types\",\"addEqual\",\"subEqual\",\"scaleEqual\",\"subScaledVector\",\"tangent\",\"invert\",\"addition\",\"testZero\",\"testDiff\",\"addTime\",\"vx\",\"EPS2\",\"cz\",\"setFromAxis\",\"rad\",\"setFromMat33\",\"out\",\"fRoot\",\"addMatrixs\",\"tem1\",\"tem2\",\"tem\",\"subMatrixs\",\"tm\",\"m2\",\"tm1\",\"tm2\",\"a0\",\"a3\",\"a6\",\"a4\",\"a7\",\"a5\",\"a8\",\"b3\",\"b6\",\"b4\",\"b7\",\"b5\",\"b8\",\"a02\",\"setQuat\",\"a00\",\"a10\",\"a20\",\"b01\",\"addOffset\",\"relX\",\"relY\",\"relZ\",\"zx\",\"subOffset\",\"intersectTest\",\"aabb\",\"ue\",\"intersectTestTwo\",\"margin\",\"aabb1\",\"aabb2\",\"surfaceArea\",\"intersectsWithPoint\",\"arr\",\"config\",\"proxy\",\"contactLink\",\"relativePosition\",\"relativeRotation\",\"friction\",\"restitution\",\"belongsTo\",\"collidesWith\",\"Width\",\"Height\",\"Depth\",\"halfDepth\",\"dimentions\",\"normalDirection\",\"halfDirection\",\"fixed\",\"lowerLimit\",\"upperLimit\",\"motorSpeed\",\"maxMotorForce\",\"frequency\",\"dampingRatio\",\"Constraint\",\"body1\",\"body2\",\"addedToIsland\",\"JointLink\",\"joint\",\"Joint\",\"invScale\",\"NaN\",\"localAnchorPoint1\",\"localAnchorPoint2\",\"relativeAnchorPoint1\",\"relativeAnchorPoint2\",\"anchorPoint1\",\"anchorPoint2\",\"allowCollision\",\"b1Link\",\"b2Link\",\"LinearConstraint\",\"ii1\",\"ii2\",\"dd\",\"r1x\",\"r1y\",\"r1z\",\"r2x\",\"r2y\",\"r2z\",\"ax1x\",\"ax1y\",\"ax1z\",\"ay1x\",\"ay1y\",\"ay1z\",\"az1x\",\"az1y\",\"az1z\",\"ax2x\",\"ax2y\",\"ax2z\",\"ay2x\",\"ay2y\",\"ay2z\",\"az2x\",\"az2y\",\"az2z\",\"vel\",\"velx\",\"vely\",\"velz\",\"r1\",\"r2\",\"l1\",\"linearVelocity\",\"l2\",\"angularVelocity\",\"inverseInertia\",\"impx\",\"impy\",\"impz\",\"Rotational3Constraint\",\"limitMotor1\",\"limitMotor2\",\"limitMotor3\",\"cfm1\",\"cfm2\",\"cfm3\",\"i1e00\",\"i1e01\",\"i1e02\",\"i1e10\",\"i1e11\",\"i1e12\",\"i1e20\",\"i1e21\",\"i1e22\",\"i2e00\",\"i2e01\",\"i2e02\",\"i2e10\",\"i2e11\",\"i2e12\",\"i2e20\",\"i2e21\",\"i2e22\",\"ax1\",\"ay1\",\"az1\",\"ax2\",\"ay2\",\"az2\",\"ax3\",\"ay3\",\"az3\",\"a1x1\",\"a1y1\",\"a1z1\",\"a2x1\",\"a2y1\",\"a2z1\",\"a1x2\",\"a1y2\",\"a1z2\",\"a2x2\",\"a2y2\",\"a2z2\",\"a1x3\",\"a1y3\",\"a1z3\",\"a2x3\",\"a2y3\",\"a2z3\",\"lowerLimit1\",\"upperLimit1\",\"limitVelocity1\",\"limitState1\",\"enableMotor1\",\"motorSpeed1\",\"maxMotorForce1\",\"maxMotorImpulse1\",\"lowerLimit2\",\"upperLimit2\",\"limitVelocity2\",\"limitState2\",\"enableMotor2\",\"motorSpeed2\",\"maxMotorForce2\",\"maxMotorImpulse2\",\"lowerLimit3\",\"upperLimit3\",\"limitVelocity3\",\"limitState3\",\"enableMotor3\",\"motorSpeed3\",\"maxMotorForce3\",\"maxMotorImpulse3\",\"k00\",\"k01\",\"k02\",\"k10\",\"k11\",\"k12\",\"k20\",\"k21\",\"k22\",\"kv00\",\"kv11\",\"kv22\",\"dv00\",\"dv11\",\"dv22\",\"d00\",\"d01\",\"d02\",\"d10\",\"d11\",\"d12\",\"d20\",\"d21\",\"d22\",\"limitImpulse1\",\"motorImpulse1\",\"limitImpulse2\",\"motorImpulse2\",\"limitImpulse3\",\"motorImpulse3\",\"lowerAngleLimit\",\"upperAngleLimit\",\"localAxis1\",\"localAxis2\",\"localAngle1\",\"localAngle2\",\"an1\",\"an2\",\"nor\",\"bin\",\"limitMotor\",\"lc\",\"r3\",\"TranslationalConstraint\",\"cfm\",\"motorDenom\",\"invMotorDenom\",\"t1x\",\"t1y\",\"t1z\",\"t2x\",\"t2y\",\"t2z\",\"l1x\",\"l1y\",\"l1z\",\"l2x\",\"l2y\",\"l2z\",\"a1x\",\"a1y\",\"a1z\",\"a2x\",\"a2y\",\"a2z\",\"limitVelocity\",\"limitState\",\"enableMotor\",\"maxMotorImpulse\",\"limitImpulse\",\"motorImpulse\",\"minDistance\",\"AngularConstraint\",\"targetOrientation\",\"relativeOrientation\",\"imp\",\"rn0\",\"rn1\",\"rn2\",\"Translational3Constraint\",\"t1x1\",\"t1y1\",\"t1z1\",\"t2x1\",\"t2y1\",\"t2z1\",\"l1x1\",\"l1y1\",\"l1z1\",\"l2x1\",\"l2y1\",\"l2z1\",\"t1x2\",\"t1y2\",\"t1z2\",\"t2x2\",\"t2y2\",\"t2z2\",\"l1x2\",\"l1y2\",\"l1z2\",\"l2x2\",\"l2y2\",\"l2z2\",\"t1x3\",\"t1y3\",\"t1z3\",\"t2x3\",\"t2y3\",\"t2z3\",\"l1x3\",\"l1y3\",\"l1z3\",\"l2x3\",\"l2y3\",\"l2z3\",\"lowerTranslation\",\"upperTranslation\",\"t3\",\"rotationalLimitMotor\",\"translationalLimitMotor\",\"rotationalLimitMotor1\",\"rotationalLimitMotor2\",\"MassInfo\",\"mass\",\"inertia\",\"ContactLink\",\"contact\",\"ImpulseDataBuffer\",\"lp1X\",\"lp1Y\",\"lp1Z\",\"lp2X\",\"lp2Y\",\"lp2Z\",\"impulse\",\"ManifoldPoint\",\"warmStarted\",\"localPoint1\",\"localPoint2\",\"normalImpulse\",\"tangentImpulse\",\"binormalImpulse\",\"normalDenominator\",\"tangentDenominator\",\"binormalDenominator\",\"penetration\",\"ContactManifold\",\"numPoints\",\"ContactPointDataBuffer\",\"norU1\",\"tanU1\",\"binU1\",\"norU2\",\"tanU2\",\"binU2\",\"norT1\",\"tanT1\",\"binT1\",\"norT2\",\"tanT2\",\"binT2\",\"norTU1\",\"tanTU1\",\"binTU1\",\"norTU2\",\"tanTU2\",\"binTU2\",\"norImp\",\"tanImp\",\"binImp\",\"norDen\",\"tanDen\",\"binDen\",\"norTar\",\"ContactConstraint\",\"manifold\",\"lv1\",\"lv2\",\"av1\",\"av2\",\"tmpC1\",\"tmpC2\",\"tmpP1\",\"tmpP2\",\"tmplv1\",\"tmplv2\",\"tmpav1\",\"tmpav2\",\"num\",\"ps\",\"Contact\",\"shape1\",\"shape2\",\"persisting\",\"sleeping\",\"detector\",\"constraint\",\"touching\",\"close\",\"dist\",\"s1Link\",\"s2Link\",\"Position\",\"Rotation\",\"massInfo\",\"newPosition\",\"controlPos\",\"newOrientation\",\"newRotation\",\"currentRotation\",\"controlRot\",\"controlRotInTime\",\"pos\",\"numShapes\",\"jointLink\",\"numJoints\",\"sleepPosition\",\"sleepOrientation\",\"isStatic\",\"isDynamic\",\"isKinematic\",\"inverseMass\",\"localInertia\",\"inverseLocalInertia\",\"tmpInertia\",\"allowSleep\",\"sleepTime\",\"Pair\",\"BroadPhase\",\"numPairs\",\"pairs\",\"calculateMassInfo\",\"updateProxy\",\"di\",\"hz\",\"volume\",\"rsq\",\"inertiaXZ\",\"inertiaY\",\"setLimit\",\"setMotor\",\"setSpring\",\"preSolve\",\"timeStep\",\"invTimeStep\",\"solve\",\"postSolve\",\"setId\",\"setParent\",\"updateAnchorPoints\",\"isX\",\"awake\",\"removeJoint\",\"rxx\",\"inv\",\"rvx\",\"rvy\",\"rvz\",\"nimpx\",\"nimpy\",\"nimpz\",\"ti1\",\"ti2\",\"frequency1\",\"frequency2\",\"frequency3\",\"enableSpring1\",\"enableSpring2\",\"enableSpring3\",\"enableLimit1\",\"enableLimit2\",\"enableLimit3\",\"angle1\",\"angle2\",\"angle3\",\"omega\",\"dmp\",\"totalImpulse1\",\"totalImpulse2\",\"totalImpulse3\",\"solve_\",\"rvn1\",\"rvn2\",\"rvn3\",\"dLimitImpulse1\",\"dLimitImpulse2\",\"dLimitImpulse3\",\"oldMotorImpulse1\",\"oldMotorImpulse2\",\"oldMotorImpulse3\",\"dMotorImpulse1\",\"dMotorImpulse2\",\"dMotorImpulse3\",\"oldLimitImpulse1\",\"oldLimitImpulse2\",\"oldLimitImpulse3\",\"clampState\",\"dImpulse1\",\"dImpulse2\",\"dImpulse3\",\"limite\",\"enableSpring\",\"rdx\",\"rdy\",\"rdz\",\"w2\",\"totalImpulse\",\"newMotorImpulse\",\"newLimitImpulse\",\"rvn\",\"oldMotorImpulse\",\"oldLimitImpulse\",\"addPointVec\",\"norm\",\"flip\",\"nx\",\"ny\",\"nz\",\"m1m2\",\"sepV\",\"oldImp1\",\"newImp1\",\"oldImp2\",\"newImp2\",\"mixRestitution\",\"restitution1\",\"restitution2\",\"mixFriction\",\"friction1\",\"friction2\",\"updateManifold\",\"numBuffers\",\"detectCollision\",\"lp1x\",\"lp1y\",\"lp1z\",\"lp2x\",\"lp2y\",\"lp2z\",\"distance1\",\"distance2\",\"updateMesh\",\"removeShape\",\"removeRigidBody\",\"checkContact\",\"setupMass\",\"AdjustPosition\",\"adjustPosition\",\"tmpM\",\"tmpV\",\"shapeMass\",\"rotateInertia\",\"syncShapes\",\"js\",\"sleep\",\"testWakeUp\",\"isLonely\",\"updatePosition\",\"getAxis\",\"rot\",\"applyImpulse\",\"rel\",\"setQuaternion\",\"setRotation\",\"resetPosition\",\"resetQuaternion\",\"resetRotation\",\"getQuaternion\",\"connectMesh\",\"createProxy\",\"addProxy\",\"removeProxy\",\"isAvailablePair\",\"detectPairs\",\"collectPairs\",\"addPair\",\"pair\",\"count$1\",\"Proxy\",\"BasicProxy\",\"BruteForceBroadPhase\",\"proxies\",\"SAPAxis\",\"numElements\",\"bufferSize\",\"stack\",\"SAPElement\",\"min1\",\"max1\",\"min2\",\"max2\",\"SAPProxy\",\"sap\",\"SAPBroadPhase\",\"numElementsD\",\"numElementsS\",\"axesD\",\"axesS\",\"DBVTNode\",\"child1\",\"child2\",\"DBVT\",\"freeNodes\",\"numFreeNodes\",\"DBVTProxy\",\"leaf\",\"DBVTBroadPhase\",\"tree\",\"leaves\",\"numLeaves\",\"CollisionDetector\",\"BoxBoxCollisionDetector\",\"clipVertices1\",\"clipVertices2\",\"used\",\"BoxCylinderCollisionDetector\",\"CylinderCylinderCollisionDetector\",\"SphereBoxCollisionDetector\",\"SphereCylinderCollisionDetector\",\"SphereSphereCollisionDetector\",\"SpherePlaneCollisionDetector\",\"BoxPlaneCollisionDetector\",\"dix\",\"diy\",\"diz\",\"cc\",\"cc2\",\"worldscale\",\"timestep\",\"timerate\",\"timer\",\"preLoop\",\"postLoop\",\"numIterations\",\"iterations\",\"broadphase\",\"Btypes\",\"isStat\",\"enableRandomizer\",\"rigidBodies\",\"contacts\",\"unusedContacts\",\"joints\",\"gravity\",\"detectors\",\"randX\",\"randA\",\"randB\",\"islandRigidBodies\",\"islandStack\",\"islandConstraints\",\"addElements\",\"newElements\",\"removeElements\",\"minIndex\",\"maxIndex\",\"giveup\",\"pivot\",\"tmp2\",\"ei\",\"ej\",\"calculateTestCount\",\"elementsD\",\"elementsS\",\"activeD\",\"activeS\",\"axis1\",\"axis2\",\"e1\",\"dyn\",\"e2\",\"moveLeaf\",\"deleteLeaf\",\"insertLeaf\",\"oldArea\",\"newArea\",\"lb\",\"sibling\",\"c1b\",\"c2b\",\"creatingCost\",\"incrementalCost\",\"discendingCost1\",\"discendingCost2\",\"newParent\",\"oldParent\",\"balance\",\"getBalance\",\"grandParent\",\"nh\",\"lh\",\"rh\",\"ll\",\"lr\",\"llh\",\"lrh\",\"rl\",\"rr\",\"rlh\",\"rrh\",\"collide\",\"node1\",\"node2\",\"stackCount\",\"right1\",\"right3\",\"right4\",\"right5\",\"right6\",\"right7\",\"right8\",\"right9\",\"righta\",\"rightb\",\"rightc\",\"rightd\",\"righte\",\"rightf\",\"overlap1\",\"overlap2\",\"overlap3\",\"overlap4\",\"overlap5\",\"overlap6\",\"overlap7\",\"overlap8\",\"overlap9\",\"overlapa\",\"overlapb\",\"overlapc\",\"overlapd\",\"overlape\",\"overlapf\",\"len1\",\"dot1\",\"dot2\",\"dot3\",\"V1\",\"V2\",\"D1\",\"D2\",\"p1x\",\"p1y\",\"p1z\",\"p2x\",\"p2y\",\"p2z\",\"h1\",\"h2\",\"a3x\",\"a3y\",\"a3z\",\"d1x\",\"d1y\",\"d1z\",\"d2x\",\"d2y\",\"d2z\",\"d3x\",\"d3y\",\"d3z\",\"a4x\",\"a4y\",\"a4z\",\"a5x\",\"a5y\",\"a5z\",\"a6x\",\"a6y\",\"a6z\",\"d4x\",\"d4y\",\"d4z\",\"d5x\",\"d5y\",\"d5z\",\"d6x\",\"d6y\",\"d6z\",\"a7x\",\"a7y\",\"a7z\",\"a8x\",\"a8y\",\"a8z\",\"a9x\",\"a9y\",\"a9z\",\"aax\",\"aay\",\"aaz\",\"abx\",\"aby\",\"abz\",\"acx\",\"acy\",\"acz\",\"adx\",\"ady\",\"adz\",\"aex\",\"aey\",\"aez\",\"afx\",\"afy\",\"afz\",\"invalid7\",\"invalid8\",\"invalid9\",\"invalida\",\"invalidb\",\"invalidc\",\"invalidd\",\"invalide\",\"invalidf\",\"depth2\",\"n1x\",\"n1y\",\"n1z\",\"n2x\",\"n2y\",\"n2z\",\"s1x\",\"s1y\",\"s1z\",\"s2x\",\"s2y\",\"s2z\",\"swap\",\"vy\",\"vz\",\"v1x\",\"v1y\",\"v1z\",\"v2x\",\"v2y\",\"v2z\",\"q1x\",\"q1y\",\"q1z\",\"q2x\",\"q2y\",\"q2z\",\"q3x\",\"q3y\",\"q3z\",\"q4x\",\"q4y\",\"q4z\",\"numClipVertices\",\"numAddedClipVertices\",\"minDot\",\"minDotIndex\",\"tb\",\"flipped\",\"index3\",\"index4\",\"maxDot\",\"getSep\",\"sep\",\"dep\",\"sup\",\"v01x\",\"v01y\",\"v01z\",\"v02x\",\"v02y\",\"v02z\",\"v0x\",\"v0y\",\"v0z\",\"supportPointB\",\"v11x\",\"v11y\",\"v11z\",\"supportPointC\",\"v12x\",\"v12y\",\"v12z\",\"v21x\",\"v21y\",\"v21z\",\"v22x\",\"v22y\",\"v22z\",\"v31x\",\"v31y\",\"v31z\",\"v32x\",\"v32y\",\"v32z\",\"v3x\",\"v3y\",\"v3z\",\"hit\",\"v41x\",\"v41y\",\"v41z\",\"v42x\",\"v42y\",\"v42z\",\"v4x\",\"v4y\",\"v4z\",\"separation\",\"ox\",\"oy\",\"oz\",\"ldx\",\"ldy\",\"ldz\",\"radx\",\"radz\",\"hh\",\"pbx\",\"pby\",\"pbz\",\"pcx\",\"pcy\",\"pcz\",\"bw\",\"bh\",\"ch\",\"D\",\"nwx\",\"nwy\",\"nwz\",\"nhx\",\"nhy\",\"nhz\",\"ndx\",\"ndy\",\"ndz\",\"dwx\",\"dwy\",\"dwz\",\"dhx\",\"dhy\",\"dhz\",\"ddx\",\"ddy\",\"ddz\",\"ncx\",\"ncy\",\"ncz\",\"dcx\",\"dcy\",\"dcz\",\"dotw\",\"doth\",\"dotd\",\"dotc\",\"cbx\",\"cby\",\"cbz\",\"ccx\",\"ccy\",\"ccz\",\"r00\",\"r01\",\"r02\",\"r10\",\"r11\",\"r12\",\"r20\",\"r21\",\"r22\",\"pd\",\"td\",\"sd\",\"ex\",\"ey\",\"ez\",\"ed\",\"dir1x\",\"dir1y\",\"dir1z\",\"dir2x\",\"dir2y\",\"dir2z\",\"dir1l\",\"dir2l\",\"supportPoint\",\"c1x\",\"c1y\",\"c1z\",\"c2x\",\"c2y\",\"c2z\",\"depth1\",\"invLen\",\"psx\",\"psy\",\"psz\",\"pb\",\"hw\",\"hd\",\"overlap\",\"pc\",\"dirx\",\"diry\",\"dirz\",\"rads\",\"radc\",\"rad2\",\"halfh\",\"pn\",\"setInterval\",\"clearInterval\",\"setGravity\",\"ar\",\"getInfo\",\"removeContact\",\"addRigidBody\",\"rigidBody\",\"getByName\",\"addJoint\",\"addContact\",\"newContact\",\"getContact\",\"name1\",\"name2\",\"callSleep\",\"stat\",\"link\",\"exists\",\"islandNumRigidBodies\",\"islandNumConstraints\",\"gVel\",\"initJoint\",\"initBody\",\"move\",\"kinematic\",\"posShape\",\"rotShape\",\"sc\",\"neverSleep\",\"massPos\",\"massRot\",\"axe1\",\"axe2\",\"pos1\",\"pos2\",\"limit\",\"spring\",\"motor\",\"jc\",\"collision\",\"OrbitControls\",\"quat\",\"quatInverse\",\"lastPosition\",\"lastQuaternion\",\"minZoom\",\"maxZoom\",\"minPolarAngle\",\"maxPolarAngle\",\"minAzimuthAngle\",\"maxAzimuthAngle\",\"enableDamping\",\"dampingFactor\",\"enableZoom\",\"zoomSpeed\",\"enableRotate\",\"rotateSpeed\",\"enablePan\",\"panSpeed\",\"screenSpacePanning\",\"keyPanSpeed\",\"autoRotate\",\"autoRotateSpeed\",\"enableKeys\",\"UP\",\"BOTTOM\",\"mouseButtons\",\"target0\",\"position0\",\"zoom0\",\"getPolarAngle\",\"spherical\",\"getAzimuthalAngle\",\"saveState\",\"changeEvent\",\"STATE\",\"NONE\",\"rotateLeft\",\"sphericalDelta\",\"panOffset\",\"zoomChanged\",\"EPS\",\"onContextMenu\",\"onMouseDown\",\"onMouseWheel\",\"onTouchStart\",\"onTouchEnd\",\"onTouchMove\",\"onMouseMove\",\"onMouseUp\",\"startEvent\",\"endEvent\",\"ROTATE\",\"DOLLY\",\"PAN\",\"TOUCH_ROTATE\",\"TOUCH_DOLLY_PAN\",\"rotateStart\",\"rotateEnd\",\"rotateDelta\",\"panStart\",\"panEnd\",\"panDelta\",\"dollyStart\",\"dollyEnd\",\"dollyDelta\",\"getZoomScale\",\"rotateUp\",\"panLeft\",\"objectMatrix\",\"panUp\",\"pan\",\"deltaX\",\"deltaY\",\"targetDistance\",\"clientHeight\",\"clientWidth\",\"dollyIn\",\"dollyScale\",\"dollyOut\",\"handleMouseDownPan\",\"clientX\",\"clientY\",\"button\",\"ctrlKey\",\"metaKey\",\"shiftKey\",\"handleMouseDownRotate\",\"handleMouseDownDolly\",\"handleMouseMoveRotate\",\"handleMouseMoveDolly\",\"handleMouseMovePan\",\"stopPropagation\",\"handleMouseWheel\",\"handleKeyDown\",\"touches\",\"pageX\",\"pageY\",\"handleTouchStartRotate\",\"handleTouchStartDollyPan\",\"handleTouchMoveRotate\",\"handleTouchMoveDollyPan\",\"noZoom\",\"noRotate\",\"noPan\",\"noKeys\",\"staticMoving\",\"dynamicDampingFactor\",\"default\",\"movementSpeed\",\"lookSpeed\",\"lookVertical\",\"autoForward\",\"activeLook\",\"heightSpeed\",\"heightCoef\",\"heightMin\",\"heightMax\",\"constrainVertical\",\"verticalMin\",\"verticalMax\",\"autoSpeedFactor\",\"mouseX\",\"mouseY\",\"moveForward\",\"moveBackward\",\"mouseDragOn\",\"viewHalfX\",\"viewHalfY\",\"targetPosition\",\"lat\",\"lon\",\"lookDirection\",\"contextmenu\",\"setAttribute\",\"handleResize\",\"offsetWidth\",\"offsetHeight\",\"offsetLeft\",\"offsetTop\",\"moveUp\",\"moveDown\",\"heightDelta\",\"actualMoveSpeed\",\"actualLookSpeed\",\"verticalLookRatio\",\"_onMouseDown\",\"_onMouseMove\",\"_onMouseUp\",\"_onKeyDown\",\"_onKeyUp\",\"fn\",\"controls\"],\"mappings\":\"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AAqlI,IAAAhF,IACArgI,KAAAslI,IAAAjF,IACArgI,KAAAulI,IAAAlF,IACArgI,KAAAwlI,IAAAnF,IACArgI,KAAAylI,IAAApF,IACArgI,KAAA0lI,IAAArF,IAEArgI,KAAA2lI,KAAAtF,IACArgI,KAAA4lI,KAAAvF,IACArgI,KAAA6lI,KAAAxF,IACArgI,KAAA8lI,KAAAzF,IACArgI,KAAA+lI,KAAA1F,IACArgI,KAAAgmI,KAAA3F,IACArgI,KAAAimI,KAAA5F,IACArgI,KAAAkmI,KAAA7F,IACArgI,KAAAmmI,KAAA9F,IACArgI,KAAAomI,KAAA/F,IACArgI,KAAAqmI,KAAAhG,IACArgI,KAAAsmI,KAAAjG,IACArgI,KAAAumI,KAAAlG,IACArgI,KAAAwmI,KAAAnG,IACArgI,KAAAymI,KAAApG,IACArgI,KAAA0mI,KAAArG,IACArgI,KAAA2mI,KAAAtG,IACArgI,KAAA4mI,KAAAvG,IAEArgI,KAAA6mI,YAAAxG,IACArgI,KAAA8mI,YAAAzG,IACArgI,KAAA+mI,eAAA1G,IACArgI,KAAAgnI,YAAA,EACAhnI,KAAAinI,cAAA,EACAjnI,KAAAknI,YAAA7G,IACArgI,KAAAmnI,eAAA9G,IACArgI,KAAAonI,iBAAA/G,IACArgI,KAAAqnI,YAAAhH,IACArgI,KAAAsnI,YAAAjH,IACArgI,KAAAunI,eAAAlH,IACArgI,KAAAwnI,YAAA,EACAxnI,KAAAynI,cAAA,EACAznI,KAAA0nI,YAAArH,IACArgI,KAAA2nI,eAAAtH,IACArgI,KAAA4nI,iBAAAvH,IACArgI,KAAA6nI,YAAAxH,IACArgI,KAAA8nI,YAAAzH,IACArgI,KAAA+nI,eAAA1H,IACArgI,KAAAgoI,YAAA,EACAhoI,KAAAioI,cAAA,EACAjoI,KAAAkoI,YAAA7H,IACArgI,KAAAmoI,eAAA9H,IACArgI,KAAAooI,iBAAA/H,IAEArgI,KAAAqoI,IAAAhI,IACArgI,KAAAsoI,IAAAjI,IACArgI,KAAAuoI,IAAAlI,IACArgI,KAAAwoI,IAAAnI,IACArgI,KAAAyoI,IAAApI,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A0kI,MAAArE,IACArgI,KAAA2kI,MAAAtE,IACArgI,KAAA4kI,MAAAvE,IACArgI,KAAA6kI,MAAAxE,IACArgI,KAAA8kI,MAAAzE,IACArgI,KAAA+kI,MAAA1E,IACArgI,KAAAglI,MAAA3E,IACArgI,KAAAilI,MAAA5E,IACArgI,KAAAklI,IAAA7E,IACArgI,KAAAmlI,IAAA9E,IACArgI,KAAAolI,IAAA/E,IACArgI,KAAAqlI,IAAAhF,IACArgI,KAAAslI,IAAAjF,IACArgI,KAAAulI,IAAAlF,IACArgI,KAAAwlI,IAAAnF,IACArgI,KAAAylI,IAAApF,IACArgI,KAAA0lI,IAAArF,IACArgI,KAAAmhI,IAAAd,IACArgI,KAAAohI,IAAAf,IACArgI,KAAAqhI,IAAAhB,IACArgI,KAAAshI,IAAAjB,IACArgI,KAAAuhI,IAAAlB,IACArgI,KAAAwhI,IAAAnB,IACArgI,KAAAqtI,KAAAhN,IACArgI,KAAAstI,KAAAjN,IACArgI,KAAAutI,KAAAlN,IACArgI,KAAAwtI,KAAAnN,IACArgI,KAAAytI,KAAApN,IACArgI,KAAA0tI,KAAArN,IACArgI,KAAA2tI,KAAAtN,IACArgI,KAAA4tI,KAAAvN,IACArgI,KAAA6tI,KAAAxN,IACArgI,KAAA8tI,KAAAzN,IACArgI,KAAA+tI,KAAA1N,IACArgI,KAAAguI,KAAA3N,IACArgI,KAAA2lI,KAAAtF,IACArgI,KAAA4lI,KAAAvF,IACArgI,KAAA6lI,KAAAxF,IACArgI,KAAA8lI,KAAAzF,IACArgI,KAAA+lI,KAAA1F,IACArgI,KAAAgmI,KAAA3F,IACArgI,KAAAiuI,KAAA5N,IACArgI,KAAAkuI,KAAA7N,IACArgI,KAAAmuI,KAAA9N,IACArgI,KAAAouI,KAAA/N,IACArgI,KAAAquI,KAAAhO,IACArgI,KAAAsuI,KAAAjO,IACArgI,KAAAuuI,KAAAlO,IACArgI,KAAAwuI,KAAAnO,IACArgI,KAAAyuI,KAAApO,IACArgI,KAAA0uI,KAAArO,IACArgI,KAAA2uI,KAAAtO,IACArgI,KAAA4uI,KAAAvO,IACArgI,KAAAimI,KAAA5F,IACArgI,KAAAkmI,KAAA7F,IACArgI,KAAAmmI,KAAA9F,IACArgI,KAAAomI,KAAA/F,IACArgI,KAAAqmI,KAAAhG,IACArgI,KAAAsmI,KAAAjG,IACArgI,KAAA6uI,KAAAxO,IACArgI,KAAA8uI,KAAAzO,IACArgI,KAAA+uI,KAAA1O,IACArgI,KAAAgvI,KAAA3O,IACArgI,KAAAivI,KAAA5O,IACArgI,KAAAkvI,KAAA7O,IACArgI,KAAAmvI,KAAA9O,IACArgI,KAAAovI,KAAA/O,IACArgI,KAAAqvI,KAAAhP,IACArgI,KAAAsvI,KAAAjP,IACArgI,KAAAuvI,KAAAlP,IACArgI,KAAAwvI,KAAAnP,IACArgI,KAAAumI,KAAAlG,IACArgI,KAAAwmI,KAAAnG,IACArgI,KAAAymI,KAAApG,IACArgI,KAAA0mI,KAAArG,IACArgI,KAAA2mI,KAAAtG,IACArgI,KAAA4mI,KAAAvG,IACArgI,KAAA6mI,YAAAxG,IACArgI,KAAA8mI,YAAAzG,IACArgI,KAAA+mI,eAAA1G,IACArgI,KAAAgnI,YAAA,EACAhnI,KAAAinI,cAAA,EACAjnI,KAAAknI,YAAA7G,IACArgI,KAAAmnI,eAAA9G,IACArgI,KAAAonI,iBAAA/G,IACArgI,KAAAqnI,YAAAhH,IACArgI,KAAAsnI,YAAAjH,IACArgI,KAAAunI,eAAAlH,IACArgI,KAAAwnI,YAAA,EACAxnI,KAAAynI,cAAA,EACAznI,KAAA0nI,YAAArH,IACArgI,KAAA2nI,eAAAtH,IACArgI,KAAA4nI,iBAAAvH,IACArgI,KAAA6nI,YAAAxH,IACArgI,KAAA8nI,YAAAzH,IACArgI,KAAA+nI,eAAA1H,IACArgI,KAAAgoI,YAAA,EACAhoI,KAAAioI,cAAA,EACAjoI,KAAAkoI,YAAA7H,IACArgI,KAAAmoI,eAAA9H,IACArgI,KAAAooI,iBAAA/H,IACArgI,KAAAqoI,IAAAhI,IACArgI,KAAAsoI,IAAAjI,IACArgI,KAAAuoI,IAAAlI,IACArgI,KAAAwoI,IAAAnI,IACArgI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\",\"sourcesContent\":[\" \\t// The module cache\\n \\tvar installedModules = {};\\n\\n \\t// The require function\\n \\tfunction __webpack_require__(moduleId) {\\n\\n \\t\\t// Check if module is in cache\\n \\t\\tif(installedModules[moduleId]) {\\n \\t\\t\\treturn installedModules[moduleId].exports;\\n \\t\\t}\\n \\t\\t// Create a new module (and put it into the cache)\\n \\t\\tvar module = installedModules[moduleId] = {\\n \\t\\t\\ti: moduleId,\\n \\t\\t\\tl: false,\\n \\t\\t\\texports: {}\\n \\t\\t};\\n\\n \\t\\t// Execute the module function\\n \\t\\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\\n\\n \\t\\t// Flag the module as loaded\\n \\t\\tmodule.l = true;\\n\\n \\t\\t// Return the exports of the module\\n \\t\\treturn module.exports;\\n \\t}\\n\\n\\n \\t// expose the modules object (__webpack_modules__)\\n \\t__webpack_require__.m = modules;\\n\\n \\t// expose the module cache\\n \\t__webpack_require__.c = installedModules;\\n\\n \\t// define getter function for harmony exports\\n \\t__webpack_require__.d = function(exports, name, getter) {\\n \\t\\tif(!__webpack_require__.o(exports, name)) {\\n \\t\\t\\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\\n \\t\\t}\\n \\t};\\n\\n \\t// define __esModule on exports\\n \\t__webpack_require__.r = function(exports) {\\n \\t\\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\\n \\t\\t\\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\\n \\t\\t}\\n \\t\\tObject.defineProperty(exports, '__esModule', { value: true });\\n \\t};\\n\\n \\t// create a fake namespace object\\n \\t// mode & 1: value is a module id, require it\\n \\t// mode & 2: merge all properties of value into the ns\\n \\t// mode & 4: return value when already ns object\\n \\t// mode & 8|1: behave like require\\n \\t__webpack_require__.t = function(value, mode) {\\n \\t\\tif(mode & 1) value = __webpack_require__(value);\\n \\t\\tif(mode & 8) return value;\\n \\t\\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\\n \\t\\tvar ns = Object.create(null);\\n \\t\\t__webpack_require__.r(ns);\\n \\t\\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\\n \\t\\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\\n \\t\\treturn ns;\\n \\t};\\n\\n \\t// getDefaultExport function for compatibility with non-harmony modules\\n \\t__webpack_require__.n = function(module) {\\n \\t\\tvar getter = module && module.__esModule ?\\n \\t\\t\\tfunction getDefault() { return module['default']; } :\\n \\t\\t\\tfunction getModuleExports() { return module; };\\n \\t\\t__webpack_require__.d(getter, 'a', getter);\\n \\t\\treturn getter;\\n \\t};\\n\\n \\t// Object.prototype.hasOwnProperty.call\\n \\t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\\n\\n \\t// __webpack_public_path__\\n \\t__webpack_require__.p = \\\"\\\";\\n\\n\\n \\t// Load entry module and return exports\\n \\treturn __webpack_require__(__webpack_require__.s = 8);\\n\",\"// Polyfills\\n\\nif ( Number.EPSILON === undefined ) {\\n\\n\\tNumber.EPSILON = Math.pow( 2, - 52 );\\n\\n}\\n\\nif ( Number.isInteger === undefined ) {\\n\\n\\t// Missing in IE\\n\\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger\\n\\n\\tNumber.isInteger = function ( value ) {\\n\\n\\t\\treturn typeof value === 'number' && isFinite( value ) && Math.floor( value ) === value;\\n\\n\\t};\\n\\n}\\n\\n//\\n\\nif ( Math.sign === undefined ) {\\n\\n\\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\\n\\n\\tMath.sign = function ( x ) {\\n\\n\\t\\treturn ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;\\n\\n\\t};\\n\\n}\\n\\nif ( 'name' in Function.prototype === false ) {\\n\\n\\t// Missing in IE\\n\\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\\n\\n\\tObject.defineProperty( Function.prototype, 'name', {\\n\\n\\t\\tget: function () {\\n\\n\\t\\t\\treturn this.toString().match( /^\\\\s*function\\\\s*([^\\\\(\\\\s]*)/ )[ 1 ];\\n\\n\\t\\t}\\n\\n\\t} );\\n\\n}\\n\\nif ( Object.assign === undefined ) {\\n\\n\\t// Missing in IE\\n\\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\\n\\n\\t( function () {\\n\\n\\t\\tObject.assign = function ( target ) {\\n\\n\\t\\t\\tif ( target === undefined || target === null ) {\\n\\n\\t\\t\\t\\tthrow new TypeError( 'Cannot convert undefined or null to object' );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tvar output = Object( target );\\n\\n\\t\\t\\tfor ( var index = 1; index < arguments.length; index ++ ) {\\n\\n\\t\\t\\t\\tvar source = arguments[ index ];\\n\\n\\t\\t\\t\\tif ( source !== undefined && source !== null ) {\\n\\n\\t\\t\\t\\t\\tfor ( var nextKey in source ) {\\n\\n\\t\\t\\t\\t\\t\\tif ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {\\n\\n\\t\\t\\t\\t\\t\\t\\toutput[ nextKey ] = source[ nextKey ];\\n\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn output;\\n\\n\\t\\t};\\n\\n\\t} )();\\n\\n}\\n\\n/**\\n * https://github.com/mrdoob/eventdispatcher.js/\\n */\\n\\nfunction EventDispatcher() {}\\n\\nObject.assign( EventDispatcher.prototype, {\\n\\n\\taddEventListener: function ( type, listener ) {\\n\\n\\t\\tif ( this._listeners === undefined ) this._listeners = {};\\n\\n\\t\\tvar listeners = this._listeners;\\n\\n\\t\\tif ( listeners[ type ] === undefined ) {\\n\\n\\t\\t\\tlisteners[ type ] = [];\\n\\n\\t\\t}\\n\\n\\t\\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\\n\\n\\t\\t\\tlisteners[ type ].push( listener );\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\thasEventListener: function ( type, listener ) {\\n\\n\\t\\tif ( this._listeners === undefined ) return false;\\n\\n\\t\\tvar listeners = this._listeners;\\n\\n\\t\\treturn listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;\\n\\n\\t},\\n\\n\\tremoveEventListener: function ( type, listener ) {\\n\\n\\t\\tif ( this._listeners === undefined ) return;\\n\\n\\t\\tvar listeners = this._listeners;\\n\\t\\tvar listenerArray = listeners[ type ];\\n\\n\\t\\tif ( listenerArray !== undefined ) {\\n\\n\\t\\t\\tvar index = listenerArray.indexOf( listener );\\n\\n\\t\\t\\tif ( index !== - 1 ) {\\n\\n\\t\\t\\t\\tlistenerArray.splice( index, 1 );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\tdispatchEvent: function ( event ) {\\n\\n\\t\\tif ( this._listeners === undefined ) return;\\n\\n\\t\\tvar listeners = this._listeners;\\n\\t\\tvar listenerArray = listeners[ event.type ];\\n\\n\\t\\tif ( listenerArray !== undefined ) {\\n\\n\\t\\t\\tevent.target = this;\\n\\n\\t\\t\\tvar array = listenerArray.slice( 0 );\\n\\n\\t\\t\\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\\n\\n\\t\\t\\t\\tarray[ i ].call( this, event );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t}\\n\\n} );\\n\\nvar REVISION = '101';\\nvar MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2 };\\nvar CullFaceNone = 0;\\nvar CullFaceBack = 1;\\nvar CullFaceFront = 2;\\nvar CullFaceFrontBack = 3;\\nvar FrontFaceDirectionCW = 0;\\nvar FrontFaceDirectionCCW = 1;\\nvar BasicShadowMap = 0;\\nvar PCFShadowMap = 1;\\nvar PCFSoftShadowMap = 2;\\nvar FrontSide = 0;\\nvar BackSide = 1;\\nvar DoubleSide = 2;\\nvar FlatShading = 1;\\nvar SmoothShading = 2;\\nvar NoColors = 0;\\nvar FaceColors = 1;\\nvar VertexColors = 2;\\nvar NoBlending = 0;\\nvar NormalBlending = 1;\\nvar AdditiveBlending = 2;\\nvar SubtractiveBlending = 3;\\nvar MultiplyBlending = 4;\\nvar CustomBlending = 5;\\nvar AddEquation = 100;\\nvar SubtractEquation = 101;\\nvar ReverseSubtractEquation = 102;\\nvar MinEquation = 103;\\nvar MaxEquation = 104;\\nvar ZeroFactor = 200;\\nvar OneFactor = 201;\\nvar SrcColorFactor = 202;\\nvar OneMinusSrcColorFactor = 203;\\nvar SrcAlphaFactor = 204;\\nvar OneMinusSrcAlphaFactor = 205;\\nvar DstAlphaFactor = 206;\\nvar OneMinusDstAlphaFactor = 207;\\nvar DstColorFactor = 208;\\nvar OneMinusDstColorFactor = 209;\\nvar SrcAlphaSaturateFactor = 210;\\nvar NeverDepth = 0;\\nvar AlwaysDepth = 1;\\nvar LessDepth = 2;\\nvar LessEqualDepth = 3;\\nvar EqualDepth = 4;\\nvar GreaterEqualDepth = 5;\\nvar GreaterDepth = 6;\\nvar NotEqualDepth = 7;\\nvar MultiplyOperation = 0;\\nvar MixOperation = 1;\\nvar AddOperation = 2;\\nvar NoToneMapping = 0;\\nvar LinearToneMapping = 1;\\nvar ReinhardToneMapping = 2;\\nvar Uncharted2ToneMapping = 3;\\nvar CineonToneMapping = 4;\\nvar ACESFilmicToneMapping = 5;\\n\\nvar UVMapping = 300;\\nvar CubeReflectionMapping = 301;\\nvar CubeRefractionMapping = 302;\\nvar EquirectangularReflectionMapping = 303;\\nvar EquirectangularRefractionMapping = 304;\\nvar SphericalReflectionMapping = 305;\\nvar CubeUVReflectionMapping = 306;\\nvar CubeUVRefractionMapping = 307;\\nvar RepeatWrapping = 1000;\\nvar ClampToEdgeWrapping = 1001;\\nvar MirroredRepeatWrapping = 1002;\\nvar NearestFilter = 1003;\\nvar NearestMipMapNearestFilter = 1004;\\nvar NearestMipMapLinearFilter = 1005;\\nvar LinearFilter = 1006;\\nvar LinearMipMapNearestFilter = 1007;\\nvar LinearMipMapLinearFilter = 1008;\\nvar UnsignedByteType = 1009;\\nvar ByteType = 1010;\\nvar ShortType = 1011;\\nvar UnsignedShortType = 1012;\\nvar IntType = 1013;\\nvar UnsignedIntType = 1014;\\nvar FloatType = 1015;\\nvar HalfFloatType = 1016;\\nvar UnsignedShort4444Type = 1017;\\nvar UnsignedShort5551Type = 1018;\\nvar UnsignedShort565Type = 1019;\\nvar UnsignedInt248Type = 1020;\\nvar AlphaFormat = 1021;\\nvar RGBFormat = 1022;\\nvar RGBAFormat = 1023;\\nvar LuminanceFormat = 1024;\\nvar LuminanceAlphaFormat = 1025;\\nvar RGBEFormat = RGBAFormat;\\nvar DepthFormat = 1026;\\nvar DepthStencilFormat = 1027;\\nvar RedFormat = 1028;\\nvar RGB_S3TC_DXT1_Format = 33776;\\nvar RGBA_S3TC_DXT1_Format = 33777;\\nvar RGBA_S3TC_DXT3_Format = 33778;\\nvar RGBA_S3TC_DXT5_Format = 33779;\\nvar RGB_PVRTC_4BPPV1_Format = 35840;\\nvar RGB_PVRTC_2BPPV1_Format = 35841;\\nvar RGBA_PVRTC_4BPPV1_Format = 35842;\\nvar RGBA_PVRTC_2BPPV1_Format = 35843;\\nvar RGB_ETC1_Format = 36196;\\nvar RGBA_ASTC_4x4_Format = 37808;\\nvar RGBA_ASTC_5x4_Format = 37809;\\nvar RGBA_ASTC_5x5_Format = 37810;\\nvar RGBA_ASTC_6x5_Format = 37811;\\nvar RGBA_ASTC_6x6_Format = 37812;\\nvar RGBA_ASTC_8x5_Format = 37813;\\nvar RGBA_ASTC_8x6_Format = 37814;\\nvar RGBA_ASTC_8x8_Format = 37815;\\nvar RGBA_ASTC_10x5_Format = 37816;\\nvar RGBA_ASTC_10x6_Format = 37817;\\nvar RGBA_ASTC_10x8_Format = 37818;\\nvar RGBA_ASTC_10x10_Format = 37819;\\nvar RGBA_ASTC_12x10_Format = 37820;\\nvar RGBA_ASTC_12x12_Format = 37821;\\nvar LoopOnce = 2200;\\nvar LoopRepeat = 2201;\\nvar LoopPingPong = 2202;\\nvar InterpolateDiscrete = 2300;\\nvar InterpolateLinear = 2301;\\nvar InterpolateSmooth = 2302;\\nvar ZeroCurvatureEnding = 2400;\\nvar ZeroSlopeEnding = 2401;\\nvar WrapAroundEnding = 2402;\\nvar TrianglesDrawMode = 0;\\nvar TriangleStripDrawMode = 1;\\nvar TriangleFanDrawMode = 2;\\nvar LinearEncoding = 3000;\\nvar sRGBEncoding = 3001;\\nvar GammaEncoding = 3007;\\nvar RGBEEncoding = 3002;\\nvar LogLuvEncoding = 3003;\\nvar RGBM7Encoding = 3004;\\nvar RGBM16Encoding = 3005;\\nvar RGBDEncoding = 3006;\\nvar BasicDepthPacking = 3200;\\nvar RGBADepthPacking = 3201;\\nvar TangentSpaceNormalMap = 0;\\nvar ObjectSpaceNormalMap = 1;\\n\\n/**\\n * @author alteredq / http://alteredqualia.com/\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\nvar _Math = {\\n\\n\\tDEG2RAD: Math.PI / 180,\\n\\tRAD2DEG: 180 / Math.PI,\\n\\n\\tgenerateUUID: ( function () {\\n\\n\\t\\t// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\\n\\n\\t\\tvar lut = [];\\n\\n\\t\\tfor ( var i = 0; i < 256; i ++ ) {\\n\\n\\t\\t\\tlut[ i ] = ( i < 16 ? '0' : '' ) + ( i ).toString( 16 );\\n\\n\\t\\t}\\n\\n\\t\\treturn function generateUUID() {\\n\\n\\t\\t\\tvar d0 = Math.random() * 0xffffffff | 0;\\n\\t\\t\\tvar d1 = Math.random() * 0xffffffff | 0;\\n\\t\\t\\tvar d2 = Math.random() * 0xffffffff | 0;\\n\\t\\t\\tvar d3 = Math.random() * 0xffffffff | 0;\\n\\t\\t\\tvar uuid = lut[ d0 & 0xff ] + lut[ d0 >> 8 & 0xff ] + lut[ d0 >> 16 & 0xff ] + lut[ d0 >> 24 & 0xff ] + '-' +\\n\\t\\t\\t\\tlut[ d1 & 0xff ] + lut[ d1 >> 8 & 0xff ] + '-' + lut[ d1 >> 16 & 0x0f | 0x40 ] + lut[ d1 >> 24 & 0xff ] + '-' +\\n\\t\\t\\t\\tlut[ d2 & 0x3f | 0x80 ] + lut[ d2 >> 8 & 0xff ] + '-' + lut[ d2 >> 16 & 0xff ] + lut[ d2 >> 24 & 0xff ] +\\n\\t\\t\\t\\tlut[ d3 & 0xff ] + lut[ d3 >> 8 & 0xff ] + lut[ d3 >> 16 & 0xff ] + lut[ d3 >> 24 & 0xff ];\\n\\n\\t\\t\\t// .toUpperCase() here flattens concatenated strings to save heap memory space.\\n\\t\\t\\treturn uuid.toUpperCase();\\n\\n\\t\\t};\\n\\n\\t} )(),\\n\\n\\tclamp: function ( value, min, max ) {\\n\\n\\t\\treturn Math.max( min, Math.min( max, value ) );\\n\\n\\t},\\n\\n\\t// compute euclidian modulo of m % n\\n\\t// https://en.wikipedia.org/wiki/Modulo_operation\\n\\n\\teuclideanModulo: function ( n, m ) {\\n\\n\\t\\treturn ( ( n % m ) + m ) % m;\\n\\n\\t},\\n\\n\\t// Linear mapping from range <a1, a2> to range <b1, b2>\\n\\n\\tmapLinear: function ( x, a1, a2, b1, b2 ) {\\n\\n\\t\\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\\n\\n\\t},\\n\\n\\t// https://en.wikipedia.org/wiki/Linear_interpolation\\n\\n\\tlerp: function ( x, y, t ) {\\n\\n\\t\\treturn ( 1 - t ) * x + t * y;\\n\\n\\t},\\n\\n\\t// http://en.wikipedia.org/wiki/Smoothstep\\n\\n\\tsmoothstep: function ( x, min, max ) {\\n\\n\\t\\tif ( x <= min ) return 0;\\n\\t\\tif ( x >= max ) return 1;\\n\\n\\t\\tx = ( x - min ) / ( max - min );\\n\\n\\t\\treturn x * x * ( 3 - 2 * x );\\n\\n\\t},\\n\\n\\tsmootherstep: function ( x, min, max ) {\\n\\n\\t\\tif ( x <= min ) return 0;\\n\\t\\tif ( x >= max ) return 1;\\n\\n\\t\\tx = ( x - min ) / ( max - min );\\n\\n\\t\\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\\n\\n\\t},\\n\\n\\t// Random integer from <low, high> interval\\n\\n\\trandInt: function ( low, high ) {\\n\\n\\t\\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\\n\\n\\t},\\n\\n\\t// Random float from <low, high> interval\\n\\n\\trandFloat: function ( low, high ) {\\n\\n\\t\\treturn low + Math.random() * ( high - low );\\n\\n\\t},\\n\\n\\t// Random float from <-range/2, range/2> interval\\n\\n\\trandFloatSpread: function ( range ) {\\n\\n\\t\\treturn range * ( 0.5 - Math.random() );\\n\\n\\t},\\n\\n\\tdegToRad: function ( degrees ) {\\n\\n\\t\\treturn degrees * _Math.DEG2RAD;\\n\\n\\t},\\n\\n\\tradToDeg: function ( radians ) {\\n\\n\\t\\treturn radians * _Math.RAD2DEG;\\n\\n\\t},\\n\\n\\tisPowerOfTwo: function ( value ) {\\n\\n\\t\\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\\n\\n\\t},\\n\\n\\tceilPowerOfTwo: function ( value ) {\\n\\n\\t\\treturn Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );\\n\\n\\t},\\n\\n\\tfloorPowerOfTwo: function ( value ) {\\n\\n\\t\\treturn Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );\\n\\n\\t}\\n\\n};\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n * @author philogb / http://blog.thejit.org/\\n * @author egraether / http://egraether.com/\\n * @author zz85 / http://www.lab4games.net/zz85/blog\\n */\\n\\nfunction Vector2( x, y ) {\\n\\n\\tthis.x = x || 0;\\n\\tthis.y = y || 0;\\n\\n}\\n\\nObject.defineProperties( Vector2.prototype, {\\n\\n\\t\\\"width\\\": {\\n\\n\\t\\tget: function () {\\n\\n\\t\\t\\treturn this.x;\\n\\n\\t\\t},\\n\\n\\t\\tset: function ( value ) {\\n\\n\\t\\t\\tthis.x = value;\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\t\\\"height\\\": {\\n\\n\\t\\tget: function () {\\n\\n\\t\\t\\treturn this.y;\\n\\n\\t\\t},\\n\\n\\t\\tset: function ( value ) {\\n\\n\\t\\t\\tthis.y = value;\\n\\n\\t\\t}\\n\\n\\t}\\n\\n} );\\n\\nObject.assign( Vector2.prototype, {\\n\\n\\tisVector2: true,\\n\\n\\tset: function ( x, y ) {\\n\\n\\t\\tthis.x = x;\\n\\t\\tthis.y = y;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetScalar: function ( scalar ) {\\n\\n\\t\\tthis.x = scalar;\\n\\t\\tthis.y = scalar;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetX: function ( x ) {\\n\\n\\t\\tthis.x = x;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetY: function ( y ) {\\n\\n\\t\\tthis.y = y;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetComponent: function ( index, value ) {\\n\\n\\t\\tswitch ( index ) {\\n\\n\\t\\t\\tcase 0: this.x = value; break;\\n\\t\\t\\tcase 1: this.y = value; break;\\n\\t\\t\\tdefault: throw new Error( 'index is out of range: ' + index );\\n\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tgetComponent: function ( index ) {\\n\\n\\t\\tswitch ( index ) {\\n\\n\\t\\t\\tcase 0: return this.x;\\n\\t\\t\\tcase 1: return this.y;\\n\\t\\t\\tdefault: throw new Error( 'index is out of range: ' + index );\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\tclone: function () {\\n\\n\\t\\treturn new this.constructor( this.x, this.y );\\n\\n\\t},\\n\\n\\tcopy: function ( v ) {\\n\\n\\t\\tthis.x = v.x;\\n\\t\\tthis.y = v.y;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tadd: function ( v, w ) {\\n\\n\\t\\tif ( w !== undefined ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\\n\\t\\t\\treturn this.addVectors( v, w );\\n\\n\\t\\t}\\n\\n\\t\\tthis.x += v.x;\\n\\t\\tthis.y += v.y;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\taddScalar: function ( s ) {\\n\\n\\t\\tthis.x += s;\\n\\t\\tthis.y += s;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\taddVectors: function ( a, b ) {\\n\\n\\t\\tthis.x = a.x + b.x;\\n\\t\\tthis.y = a.y + b.y;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\taddScaledVector: function ( v, s ) {\\n\\n\\t\\tthis.x += v.x * s;\\n\\t\\tthis.y += v.y * s;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsub: function ( v, w ) {\\n\\n\\t\\tif ( w !== undefined ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\\n\\t\\t\\treturn this.subVectors( v, w );\\n\\n\\t\\t}\\n\\n\\t\\tthis.x -= v.x;\\n\\t\\tthis.y -= v.y;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsubScalar: function ( s ) {\\n\\n\\t\\tthis.x -= s;\\n\\t\\tthis.y -= s;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsubVectors: function ( a, b ) {\\n\\n\\t\\tthis.x = a.x - b.x;\\n\\t\\tthis.y = a.y - b.y;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tmultiply: function ( v ) {\\n\\n\\t\\tthis.x *= v.x;\\n\\t\\tthis.y *= v.y;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tmultiplyScalar: function ( scalar ) {\\n\\n\\t\\tthis.x *= scalar;\\n\\t\\tthis.y *= scalar;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tdivide: function ( v ) {\\n\\n\\t\\tthis.x /= v.x;\\n\\t\\tthis.y /= v.y;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tdivideScalar: function ( scalar ) {\\n\\n\\t\\treturn this.multiplyScalar( 1 / scalar );\\n\\n\\t},\\n\\n\\tapplyMatrix3: function ( m ) {\\n\\n\\t\\tvar x = this.x, y = this.y;\\n\\t\\tvar e = m.elements;\\n\\n\\t\\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];\\n\\t\\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tmin: function ( v ) {\\n\\n\\t\\tthis.x = Math.min( this.x, v.x );\\n\\t\\tthis.y = Math.min( this.y, v.y );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tmax: function ( v ) {\\n\\n\\t\\tthis.x = Math.max( this.x, v.x );\\n\\t\\tthis.y = Math.max( this.y, v.y );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tclamp: function ( min, max ) {\\n\\n\\t\\t// assumes min < max, componentwise\\n\\n\\t\\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\\n\\t\\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tclampScalar: function () {\\n\\n\\t\\tvar min = new Vector2();\\n\\t\\tvar max = new Vector2();\\n\\n\\t\\treturn function clampScalar( minVal, maxVal ) {\\n\\n\\t\\t\\tmin.set( minVal, minVal );\\n\\t\\t\\tmax.set( maxVal, maxVal );\\n\\n\\t\\t\\treturn this.clamp( min, max );\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\tclampLength: function ( min, max ) {\\n\\n\\t\\tvar length = this.length();\\n\\n\\t\\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\\n\\n\\t},\\n\\n\\tfloor: function () {\\n\\n\\t\\tthis.x = Math.floor( this.x );\\n\\t\\tthis.y = Math.floor( this.y );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tceil: function () {\\n\\n\\t\\tthis.x = Math.ceil( this.x );\\n\\t\\tthis.y = Math.ceil( this.y );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tround: function () {\\n\\n\\t\\tthis.x = Math.round( this.x );\\n\\t\\tthis.y = Math.round( this.y );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\troundToZero: function () {\\n\\n\\t\\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\\n\\t\\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tnegate: function () {\\n\\n\\t\\tthis.x = - this.x;\\n\\t\\tthis.y = - this.y;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tdot: function ( v ) {\\n\\n\\t\\treturn this.x * v.x + this.y * v.y;\\n\\n\\t},\\n\\n\\tcross: function ( v ) {\\n\\n\\t\\treturn this.x * v.y - this.y * v.x;\\n\\n\\t},\\n\\n\\tlengthSq: function () {\\n\\n\\t\\treturn this.x * this.x + this.y * this.y;\\n\\n\\t},\\n\\n\\tlength: function () {\\n\\n\\t\\treturn Math.sqrt( this.x * this.x + this.y * this.y );\\n\\n\\t},\\n\\n\\tmanhattanLength: function () {\\n\\n\\t\\treturn Math.abs( this.x ) + Math.abs( this.y );\\n\\n\\t},\\n\\n\\tnormalize: function () {\\n\\n\\t\\treturn this.divideScalar( this.length() || 1 );\\n\\n\\t},\\n\\n\\tangle: function () {\\n\\n\\t\\t// computes the angle in radians with respect to the positive x-axis\\n\\n\\t\\tvar angle = Math.atan2( this.y, this.x );\\n\\n\\t\\tif ( angle < 0 ) angle += 2 * Math.PI;\\n\\n\\t\\treturn angle;\\n\\n\\t},\\n\\n\\tdistanceTo: function ( v ) {\\n\\n\\t\\treturn Math.sqrt( this.distanceToSquared( v ) );\\n\\n\\t},\\n\\n\\tdistanceToSquared: function ( v ) {\\n\\n\\t\\tvar dx = this.x - v.x, dy = this.y - v.y;\\n\\t\\treturn dx * dx + dy * dy;\\n\\n\\t},\\n\\n\\tmanhattanDistanceTo: function ( v ) {\\n\\n\\t\\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );\\n\\n\\t},\\n\\n\\tsetLength: function ( length ) {\\n\\n\\t\\treturn this.normalize().multiplyScalar( length );\\n\\n\\t},\\n\\n\\tlerp: function ( v, alpha ) {\\n\\n\\t\\tthis.x += ( v.x - this.x ) * alpha;\\n\\t\\tthis.y += ( v.y - this.y ) * alpha;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tlerpVectors: function ( v1, v2, alpha ) {\\n\\n\\t\\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\\n\\n\\t},\\n\\n\\tequals: function ( v ) {\\n\\n\\t\\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\\n\\n\\t},\\n\\n\\tfromArray: function ( array, offset ) {\\n\\n\\t\\tif ( offset === undefined ) offset = 0;\\n\\n\\t\\tthis.x = array[ offset ];\\n\\t\\tthis.y = array[ offset + 1 ];\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\ttoArray: function ( array, offset ) {\\n\\n\\t\\tif ( array === undefined ) array = [];\\n\\t\\tif ( offset === undefined ) offset = 0;\\n\\n\\t\\tarray[ offset ] = this.x;\\n\\t\\tarray[ offset + 1 ] = this.y;\\n\\n\\t\\treturn array;\\n\\n\\t},\\n\\n\\tfromBufferAttribute: function ( attribute, index, offset ) {\\n\\n\\t\\tif ( offset !== undefined ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Vector2: offset has been removed from .fromBufferAttribute().' );\\n\\n\\t\\t}\\n\\n\\t\\tthis.x = attribute.getX( index );\\n\\t\\tthis.y = attribute.getY( index );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\trotateAround: function ( center, angle ) {\\n\\n\\t\\tvar c = Math.cos( angle ), s = Math.sin( angle );\\n\\n\\t\\tvar x = this.x - center.x;\\n\\t\\tvar y = this.y - center.y;\\n\\n\\t\\tthis.x = x * c - y * s + center.x;\\n\\t\\tthis.y = x * s + y * c + center.y;\\n\\n\\t\\treturn this;\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n * @author supereggbert / http://www.paulbrunt.co.uk/\\n * @author philogb / http://blog.thejit.org/\\n * @author jordi_ros / http://plattsoft.com\\n * @author D1plo1d / http://github.com/D1plo1d\\n * @author alteredq / http://alteredqualia.com/\\n * @author mikael emtinger / http://gomo.se/\\n * @author timknip / http://www.floorplanner.com/\\n * @author bhouston / http://clara.io\\n * @author WestLangley / http://github.com/WestLangley\\n */\\n\\nfunction Matrix4() {\\n\\n\\tthis.elements = [\\n\\n\\t\\t1, 0, 0, 0,\\n\\t\\t0, 1, 0, 0,\\n\\t\\t0, 0, 1, 0,\\n\\t\\t0, 0, 0, 1\\n\\n\\t];\\n\\n\\tif ( arguments.length > 0 ) {\\n\\n\\t\\tconsole.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );\\n\\n\\t}\\n\\n}\\n\\nObject.assign( Matrix4.prototype, {\\n\\n\\tisMatrix4: true,\\n\\n\\tset: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\\n\\n\\t\\tvar te = this.elements;\\n\\n\\t\\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\\n\\t\\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\\n\\t\\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\\n\\t\\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tidentity: function () {\\n\\n\\t\\tthis.set(\\n\\n\\t\\t\\t1, 0, 0, 0,\\n\\t\\t\\t0, 1, 0, 0,\\n\\t\\t\\t0, 0, 1, 0,\\n\\t\\t\\t0, 0, 0, 1\\n\\n\\t\\t);\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tclone: function () {\\n\\n\\t\\treturn new Matrix4().fromArray( this.elements );\\n\\n\\t},\\n\\n\\tcopy: function ( m ) {\\n\\n\\t\\tvar te = this.elements;\\n\\t\\tvar me = m.elements;\\n\\n\\t\\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];\\n\\t\\tte[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];\\n\\t\\tte[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];\\n\\t\\tte[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tcopyPosition: function ( m ) {\\n\\n\\t\\tvar te = this.elements, me = m.elements;\\n\\n\\t\\tte[ 12 ] = me[ 12 ];\\n\\t\\tte[ 13 ] = me[ 13 ];\\n\\t\\tte[ 14 ] = me[ 14 ];\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\textractBasis: function ( xAxis, yAxis, zAxis ) {\\n\\n\\t\\txAxis.setFromMatrixColumn( this, 0 );\\n\\t\\tyAxis.setFromMatrixColumn( this, 1 );\\n\\t\\tzAxis.setFromMatrixColumn( this, 2 );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tmakeBasis: function ( xAxis, yAxis, zAxis ) {\\n\\n\\t\\tthis.set(\\n\\t\\t\\txAxis.x, yAxis.x, zAxis.x, 0,\\n\\t\\t\\txAxis.y, yAxis.y, zAxis.y, 0,\\n\\t\\t\\txAxis.z, yAxis.z, zAxis.z, 0,\\n\\t\\t\\t0, 0, 0, 1\\n\\t\\t);\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\textractRotation: function () {\\n\\n\\t\\tvar v1 = new Vector3();\\n\\n\\t\\treturn function extractRotation( m ) {\\n\\n\\t\\t\\t// this method does not support reflection matrices\\n\\n\\t\\t\\tvar te = this.elements;\\n\\t\\t\\tvar me = m.elements;\\n\\n\\t\\t\\tvar scaleX = 1 / v1.setFromMatrixColumn( m, 0 ).length();\\n\\t\\t\\tvar scaleY = 1 / v1.setFromMatrixColumn( m, 1 ).length();\\n\\t\\t\\tvar scaleZ = 1 / v1.setFromMatrixColumn( m, 2 ).length();\\n\\n\\t\\t\\tte[ 0 ] = me[ 0 ] * scaleX;\\n\\t\\t\\tte[ 1 ] = me[ 1 ] * scaleX;\\n\\t\\t\\tte[ 2 ] = me[ 2 ] * scaleX;\\n\\t\\t\\tte[ 3 ] = 0;\\n\\n\\t\\t\\tte[ 4 ] = me[ 4 ] * scaleY;\\n\\t\\t\\tte[ 5 ] = me[ 5 ] * scaleY;\\n\\t\\t\\tte[ 6 ] = me[ 6 ] * scaleY;\\n\\t\\t\\tte[ 7 ] = 0;\\n\\n\\t\\t\\tte[ 8 ] = me[ 8 ] * scaleZ;\\n\\t\\t\\tte[ 9 ] = me[ 9 ] * scaleZ;\\n\\t\\t\\tte[ 10 ] = me[ 10 ] * scaleZ;\\n\\t\\t\\tte[ 11 ] = 0;\\n\\n\\t\\t\\tte[ 12 ] = 0;\\n\\t\\t\\tte[ 13 ] = 0;\\n\\t\\t\\tte[ 14 ] = 0;\\n\\t\\t\\tte[ 15 ] = 1;\\n\\n\\t\\t\\treturn this;\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\tmakeRotationFromEuler: function ( euler ) {\\n\\n\\t\\tif ( ! ( euler && euler.isEuler ) ) {\\n\\n\\t\\t\\tconsole.error( 'THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\\n\\n\\t\\t}\\n\\n\\t\\tvar te = this.elements;\\n\\n\\t\\tvar x = euler.x, y = euler.y, z = euler.z;\\n\\t\\tvar a = Math.cos( x ), b = Math.sin( x );\\n\\t\\tvar c = Math.cos( y ), d = Math.sin( y );\\n\\t\\tvar e = Math.cos( z ), f = Math.sin( z );\\n\\n\\t\\tif ( euler.order === 'XYZ' ) {\\n\\n\\t\\t\\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\\n\\n\\t\\t\\tte[ 0 ] = c * e;\\n\\t\\t\\tte[ 4 ] = - c * f;\\n\\t\\t\\tte[ 8 ] = d;\\n\\n\\t\\t\\tte[ 1 ] = af + be * d;\\n\\t\\t\\tte[ 5 ] = ae - bf * d;\\n\\t\\t\\tte[ 9 ] = - b * c;\\n\\n\\t\\t\\tte[ 2 ] = bf - ae * d;\\n\\t\\t\\tte[ 6 ] = be + af * d;\\n\\t\\t\\tte[ 10 ] = a * c;\\n\\n\\t\\t} else if ( euler.order === 'YXZ' ) {\\n\\n\\t\\t\\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\\n\\n\\t\\t\\tte[ 0 ] = ce + df * b;\\n\\t\\t\\tte[ 4 ] = de * b - cf;\\n\\t\\t\\tte[ 8 ] = a * d;\\n\\n\\t\\t\\tte[ 1 ] = a * f;\\n\\t\\t\\tte[ 5 ] = a * e;\\n\\t\\t\\tte[ 9 ] = - b;\\n\\n\\t\\t\\tte[ 2 ] = cf * b - de;\\n\\t\\t\\tte[ 6 ] = df + ce * b;\\n\\t\\t\\tte[ 10 ] = a * c;\\n\\n\\t\\t} else if ( euler.order === 'ZXY' ) {\\n\\n\\t\\t\\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\\n\\n\\t\\t\\tte[ 0 ] = ce - df * b;\\n\\t\\t\\tte[ 4 ] = - a * f;\\n\\t\\t\\tte[ 8 ] = de + cf * b;\\n\\n\\t\\t\\tte[ 1 ] = cf + de * b;\\n\\t\\t\\tte[ 5 ] = a * e;\\n\\t\\t\\tte[ 9 ] = df - ce * b;\\n\\n\\t\\t\\tte[ 2 ] = - a * d;\\n\\t\\t\\tte[ 6 ] = b;\\n\\t\\t\\tte[ 10 ] = a * c;\\n\\n\\t\\t} else if ( euler.order === 'ZYX' ) {\\n\\n\\t\\t\\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\\n\\n\\t\\t\\tte[ 0 ] = c * e;\\n\\t\\t\\tte[ 4 ] = be * d - af;\\n\\t\\t\\tte[ 8 ] = ae * d + bf;\\n\\n\\t\\t\\tte[ 1 ] = c * f;\\n\\t\\t\\tte[ 5 ] = bf * d + ae;\\n\\t\\t\\tte[ 9 ] = af * d - be;\\n\\n\\t\\t\\tte[ 2 ] = - d;\\n\\t\\t\\tte[ 6 ] = b * c;\\n\\t\\t\\tte[ 10 ] = a * c;\\n\\n\\t\\t} else if ( euler.order === 'YZX' ) {\\n\\n\\t\\t\\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\\n\\n\\t\\t\\tte[ 0 ] = c * e;\\n\\t\\t\\tte[ 4 ] = bd - ac * f;\\n\\t\\t\\tte[ 8 ] = bc * f + ad;\\n\\n\\t\\t\\tte[ 1 ] = f;\\n\\t\\t\\tte[ 5 ] = a * e;\\n\\t\\t\\tte[ 9 ] = - b * e;\\n\\n\\t\\t\\tte[ 2 ] = - d * e;\\n\\t\\t\\tte[ 6 ] = ad * f + bc;\\n\\t\\t\\tte[ 10 ] = ac - bd * f;\\n\\n\\t\\t} else if ( euler.order === 'XZY' ) {\\n\\n\\t\\t\\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\\n\\n\\t\\t\\tte[ 0 ] = c * e;\\n\\t\\t\\tte[ 4 ] = - f;\\n\\t\\t\\tte[ 8 ] = d * e;\\n\\n\\t\\t\\tte[ 1 ] = ac * f + bd;\\n\\t\\t\\tte[ 5 ] = a * e;\\n\\t\\t\\tte[ 9 ] = ad * f - bc;\\n\\n\\t\\t\\tte[ 2 ] = bc * f - ad;\\n\\t\\t\\tte[ 6 ] = b * e;\\n\\t\\t\\tte[ 10 ] = bd * f + ac;\\n\\n\\t\\t}\\n\\n\\t\\t// bottom row\\n\\t\\tte[ 3 ] = 0;\\n\\t\\tte[ 7 ] = 0;\\n\\t\\tte[ 11 ] = 0;\\n\\n\\t\\t// last column\\n\\t\\tte[ 12 ] = 0;\\n\\t\\tte[ 13 ] = 0;\\n\\t\\tte[ 14 ] = 0;\\n\\t\\tte[ 15 ] = 1;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tmakeRotationFromQuaternion: function () {\\n\\n\\t\\tvar zero = new Vector3( 0, 0, 0 );\\n\\t\\tvar one = new Vector3( 1, 1, 1 );\\n\\n\\t\\treturn function makeRotationFromQuaternion( q ) {\\n\\n\\t\\t\\treturn this.compose( zero, q, one );\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\tlookAt: function () {\\n\\n\\t\\tvar x = new Vector3();\\n\\t\\tvar y = new Vector3();\\n\\t\\tvar z = new Vector3();\\n\\n\\t\\treturn function lookAt( eye, target, up ) {\\n\\n\\t\\t\\tvar te = this.elements;\\n\\n\\t\\t\\tz.subVectors( eye, target );\\n\\n\\t\\t\\tif ( z.lengthSq() === 0 ) {\\n\\n\\t\\t\\t\\t// eye and target are in the same position\\n\\n\\t\\t\\t\\tz.z = 1;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tz.normalize();\\n\\t\\t\\tx.crossVectors( up, z );\\n\\n\\t\\t\\tif ( x.lengthSq() === 0 ) {\\n\\n\\t\\t\\t\\t// up and z are parallel\\n\\n\\t\\t\\t\\tif ( Math.abs( up.z ) === 1 ) {\\n\\n\\t\\t\\t\\t\\tz.x += 0.0001;\\n\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\tz.z += 0.0001;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tz.normalize();\\n\\t\\t\\t\\tx.crossVectors( up, z );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tx.normalize();\\n\\t\\t\\ty.crossVectors( z, x );\\n\\n\\t\\t\\tte[ 0 ] = x.x; te[ 4 ] = y.x; te[ 8 ] = z.x;\\n\\t\\t\\tte[ 1 ] = x.y; te[ 5 ] = y.y; te[ 9 ] = z.y;\\n\\t\\t\\tte[ 2 ] = x.z; te[ 6 ] = y.z; te[ 10 ] = z.z;\\n\\n\\t\\t\\treturn this;\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\tmultiply: function ( m, n ) {\\n\\n\\t\\tif ( n !== undefined ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );\\n\\t\\t\\treturn this.multiplyMatrices( m, n );\\n\\n\\t\\t}\\n\\n\\t\\treturn this.multiplyMatrices( this, m );\\n\\n\\t},\\n\\n\\tpremultiply: function ( m ) {\\n\\n\\t\\treturn this.multiplyMatrices( m, this );\\n\\n\\t},\\n\\n\\tmultiplyMatrices: function ( a, b ) {\\n\\n\\t\\tvar ae = a.elements;\\n\\t\\tvar be = b.elements;\\n\\t\\tvar te = this.elements;\\n\\n\\t\\tvar a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\\n\\t\\tvar a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\\n\\t\\tvar a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\\n\\t\\tvar a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\\n\\n\\t\\tvar b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\\n\\t\\tvar b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\\n\\t\\tvar b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\\n\\t\\tvar b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\\n\\n\\t\\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\\n\\t\\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\\n\\t\\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\\n\\t\\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\\n\\n\\t\\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\\n\\t\\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\\n\\t\\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\\n\\t\\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\\n\\n\\t\\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\\n\\t\\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\\n\\t\\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\\n\\t\\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\\n\\n\\t\\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\\n\\t\\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\\n\\t\\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\\n\\t\\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tmultiplyScalar: function ( s ) {\\n\\n\\t\\tvar te = this.elements;\\n\\n\\t\\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\\n\\t\\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\\n\\t\\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\\n\\t\\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tapplyToBufferAttribute: function () {\\n\\n\\t\\tvar v1 = new Vector3();\\n\\n\\t\\treturn function applyToBufferAttribute( attribute ) {\\n\\n\\t\\t\\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\\n\\n\\t\\t\\t\\tv1.x = attribute.getX( i );\\n\\t\\t\\t\\tv1.y = attribute.getY( i );\\n\\t\\t\\t\\tv1.z = attribute.getZ( i );\\n\\n\\t\\t\\t\\tv1.applyMatrix4( this );\\n\\n\\t\\t\\t\\tattribute.setXYZ( i, v1.x, v1.y, v1.z );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn attribute;\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\tdeterminant: function () {\\n\\n\\t\\tvar te = this.elements;\\n\\n\\t\\tvar n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\\n\\t\\tvar n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\\n\\t\\tvar n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\\n\\t\\tvar n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\\n\\n\\t\\t//TODO: make this more efficient\\n\\t\\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\\n\\n\\t\\treturn (\\n\\t\\t\\tn41 * (\\n\\t\\t\\t\\t+ n14 * n23 * n32\\n\\t\\t\\t\\t - n13 * n24 * n32\\n\\t\\t\\t\\t - n14 * n22 * n33\\n\\t\\t\\t\\t + n12 * n24 * n33\\n\\t\\t\\t\\t + n13 * n22 * n34\\n\\t\\t\\t\\t - n12 * n23 * n34\\n\\t\\t\\t) +\\n\\t\\t\\tn42 * (\\n\\t\\t\\t\\t+ n11 * n23 * n34\\n\\t\\t\\t\\t - n11 * n24 * n33\\n\\t\\t\\t\\t + n14 * n21 * n33\\n\\t\\t\\t\\t - n13 * n21 * n34\\n\\t\\t\\t\\t + n13 * n24 * n31\\n\\t\\t\\t\\t - n14 * n23 * n31\\n\\t\\t\\t) +\\n\\t\\t\\tn43 * (\\n\\t\\t\\t\\t+ n11 * n24 * n32\\n\\t\\t\\t\\t - n11 * n22 * n34\\n\\t\\t\\t\\t - n14 * n21 * n32\\n\\t\\t\\t\\t + n12 * n21 * n34\\n\\t\\t\\t\\t + n14 * n22 * n31\\n\\t\\t\\t\\t - n12 * n24 * n31\\n\\t\\t\\t) +\\n\\t\\t\\tn44 * (\\n\\t\\t\\t\\t- n13 * n22 * n31\\n\\t\\t\\t\\t - n11 * n23 * n32\\n\\t\\t\\t\\t + n11 * n22 * n33\\n\\t\\t\\t\\t + n13 * n21 * n32\\n\\t\\t\\t\\t - n12 * n21 * n33\\n\\t\\t\\t\\t + n12 * n23 * n31\\n\\t\\t\\t)\\n\\n\\t\\t);\\n\\n\\t},\\n\\n\\ttranspose: function () {\\n\\n\\t\\tvar te = this.elements;\\n\\t\\tvar tmp;\\n\\n\\t\\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\\n\\t\\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\\n\\t\\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\\n\\n\\t\\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\\n\\t\\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\\n\\t\\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetPosition: function ( v ) {\\n\\n\\t\\tvar te = this.elements;\\n\\n\\t\\tte[ 12 ] = v.x;\\n\\t\\tte[ 13 ] = v.y;\\n\\t\\tte[ 14 ] = v.z;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tgetInverse: function ( m, throwOnDegenerate ) {\\n\\n\\t\\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\\n\\t\\tvar te = this.elements,\\n\\t\\t\\tme = m.elements,\\n\\n\\t\\t\\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],\\n\\t\\t\\tn12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],\\n\\t\\t\\tn13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],\\n\\t\\t\\tn14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],\\n\\n\\t\\t\\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\\n\\t\\t\\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\\n\\t\\t\\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\\n\\t\\t\\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\\n\\n\\t\\tvar det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\\n\\n\\t\\tif ( det === 0 ) {\\n\\n\\t\\t\\tvar msg = \\\"THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0\\\";\\n\\n\\t\\t\\tif ( throwOnDegenerate === true ) {\\n\\n\\t\\t\\t\\tthrow new Error( msg );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tconsole.warn( msg );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn this.identity();\\n\\n\\t\\t}\\n\\n\\t\\tvar detInv = 1 / det;\\n\\n\\t\\tte[ 0 ] = t11 * detInv;\\n\\t\\tte[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\\n\\t\\tte[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\\n\\t\\tte[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\\n\\n\\t\\tte[ 4 ] = t12 * detInv;\\n\\t\\tte[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\\n\\t\\tte[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\\n\\t\\tte[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\\n\\n\\t\\tte[ 8 ] = t13 * detInv;\\n\\t\\tte[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\\n\\t\\tte[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\\n\\t\\tte[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\\n\\n\\t\\tte[ 12 ] = t14 * detInv;\\n\\t\\tte[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\\n\\t\\tte[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\\n\\t\\tte[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tscale: function ( v ) {\\n\\n\\t\\tvar te = this.elements;\\n\\t\\tvar x = v.x, y = v.y, z = v.z;\\n\\n\\t\\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\\n\\t\\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\\n\\t\\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\\n\\t\\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tgetMaxScaleOnAxis: function () {\\n\\n\\t\\tvar te = this.elements;\\n\\n\\t\\tvar scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\\n\\t\\tvar scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\\n\\t\\tvar scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\\n\\n\\t\\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\\n\\n\\t},\\n\\n\\tmakeTranslation: function ( x, y, z ) {\\n\\n\\t\\tthis.set(\\n\\n\\t\\t\\t1, 0, 0, x,\\n\\t\\t\\t0, 1, 0, y,\\n\\t\\t\\t0, 0, 1, z,\\n\\t\\t\\t0, 0, 0, 1\\n\\n\\t\\t);\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tmakeRotationX: function ( theta ) {\\n\\n\\t\\tvar c = Math.cos( theta ), s = Math.sin( theta );\\n\\n\\t\\tthis.set(\\n\\n\\t\\t\\t1, 0, 0, 0,\\n\\t\\t\\t0, c, - s, 0,\\n\\t\\t\\t0, s, c, 0,\\n\\t\\t\\t0, 0, 0, 1\\n\\n\\t\\t);\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tmakeRotationY: function ( theta ) {\\n\\n\\t\\tvar c = Math.cos( theta ), s = Math.sin( theta );\\n\\n\\t\\tthis.set(\\n\\n\\t\\t\\t c, 0, s, 0,\\n\\t\\t\\t 0, 1, 0, 0,\\n\\t\\t\\t- s, 0, c, 0,\\n\\t\\t\\t 0, 0, 0, 1\\n\\n\\t\\t);\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tmakeRotationZ: function ( theta ) {\\n\\n\\t\\tvar c = Math.cos( theta ), s = Math.sin( theta );\\n\\n\\t\\tthis.set(\\n\\n\\t\\t\\tc, - s, 0, 0,\\n\\t\\t\\ts, c, 0, 0,\\n\\t\\t\\t0, 0, 1, 0,\\n\\t\\t\\t0, 0, 0, 1\\n\\n\\t\\t);\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tmakeRotationAxis: function ( axis, angle ) {\\n\\n\\t\\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\\n\\n\\t\\tvar c = Math.cos( angle );\\n\\t\\tvar s = Math.sin( angle );\\n\\t\\tvar t = 1 - c;\\n\\t\\tvar x = axis.x, y = axis.y, z = axis.z;\\n\\t\\tvar tx = t * x, ty = t * y;\\n\\n\\t\\tthis.set(\\n\\n\\t\\t\\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\\n\\t\\t\\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\\n\\t\\t\\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\\n\\t\\t\\t0, 0, 0, 1\\n\\n\\t\\t);\\n\\n\\t\\t return this;\\n\\n\\t},\\n\\n\\tmakeScale: function ( x, y, z ) {\\n\\n\\t\\tthis.set(\\n\\n\\t\\t\\tx, 0, 0, 0,\\n\\t\\t\\t0, y, 0, 0,\\n\\t\\t\\t0, 0, z, 0,\\n\\t\\t\\t0, 0, 0, 1\\n\\n\\t\\t);\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tmakeShear: function ( x, y, z ) {\\n\\n\\t\\tthis.set(\\n\\n\\t\\t\\t1, y, z, 0,\\n\\t\\t\\tx, 1, z, 0,\\n\\t\\t\\tx, y, 1, 0,\\n\\t\\t\\t0, 0, 0, 1\\n\\n\\t\\t);\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tcompose: function ( position, quaternion, scale ) {\\n\\n\\t\\tvar te = this.elements;\\n\\n\\t\\tvar x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;\\n\\t\\tvar x2 = x + x,\\ty2 = y + y, z2 = z + z;\\n\\t\\tvar xx = x * x2, xy = x * y2, xz = x * z2;\\n\\t\\tvar yy = y * y2, yz = y * z2, zz = z * z2;\\n\\t\\tvar wx = w * x2, wy = w * y2, wz = w * z2;\\n\\n\\t\\tvar sx = scale.x, sy = scale.y, sz = scale.z;\\n\\n\\t        te[ 0 ] = ( 1 - ( yy + zz ) ) * sx;\\n\\t        te[ 1 ] = ( xy + wz ) * sx;\\n\\t        te[ 2 ] = ( xz - wy ) * sx;\\n\\t        te[ 3 ] = 0;\\n\\n\\t        te[ 4 ] = ( xy - wz ) * sy;\\n\\t        te[ 5 ] = ( 1 - ( xx + zz ) ) * sy;\\n\\t        te[ 6 ] = ( yz + wx ) * sy;\\n\\t        te[ 7 ] = 0;\\n\\n\\t        te[ 8 ] = ( xz + wy ) * sz;\\n\\t        te[ 9 ] = ( yz - wx ) * sz;\\n\\t        te[ 10 ] = ( 1 - ( xx + yy ) ) * sz;\\n\\t        te[ 11 ] = 0;\\n\\n\\t        te[ 12 ] = position.x;\\n\\t        te[ 13 ] = position.y;\\n\\t        te[ 14 ] = position.z;\\n\\t        te[ 15 ] = 1;\\n\\n\\t        return this;\\n\\n\\t},\\n\\n\\tdecompose: function () {\\n\\n\\t\\tvar vector = new Vector3();\\n\\t\\tvar matrix = new Matrix4();\\n\\n\\t\\treturn function decompose( position, quaternion, scale ) {\\n\\n\\t\\t\\tvar te = this.elements;\\n\\n\\t\\t\\tvar sx = vector.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\\n\\t\\t\\tvar sy = vector.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\\n\\t\\t\\tvar sz = vector.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\\n\\n\\t\\t\\t// if determine is negative, we need to invert one scale\\n\\t\\t\\tvar det = this.determinant();\\n\\t\\t\\tif ( det < 0 ) sx = - sx;\\n\\n\\t\\t\\tposition.x = te[ 12 ];\\n\\t\\t\\tposition.y = te[ 13 ];\\n\\t\\t\\tposition.z = te[ 14 ];\\n\\n\\t\\t\\t// scale the rotation part\\n\\t\\t\\tmatrix.copy( this );\\n\\n\\t\\t\\tvar invSX = 1 / sx;\\n\\t\\t\\tvar invSY = 1 / sy;\\n\\t\\t\\tvar invSZ = 1 / sz;\\n\\n\\t\\t\\tmatrix.elements[ 0 ] *= invSX;\\n\\t\\t\\tmatrix.elements[ 1 ] *= invSX;\\n\\t\\t\\tmatrix.elements[ 2 ] *= invSX;\\n\\n\\t\\t\\tmatrix.elements[ 4 ] *= invSY;\\n\\t\\t\\tmatrix.elements[ 5 ] *= invSY;\\n\\t\\t\\tmatrix.elements[ 6 ] *= invSY;\\n\\n\\t\\t\\tmatrix.elements[ 8 ] *= invSZ;\\n\\t\\t\\tmatrix.elements[ 9 ] *= invSZ;\\n\\t\\t\\tmatrix.elements[ 10 ] *= invSZ;\\n\\n\\t\\t\\tquaternion.setFromRotationMatrix( matrix );\\n\\n\\t\\t\\tscale.x = sx;\\n\\t\\t\\tscale.y = sy;\\n\\t\\t\\tscale.z = sz;\\n\\n\\t\\t\\treturn this;\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\tmakePerspective: function ( left, right, top, bottom, near, far ) {\\n\\n\\t\\tif ( far === undefined ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.' );\\n\\n\\t\\t}\\n\\n\\t\\tvar te = this.elements;\\n\\t\\tvar x = 2 * near / ( right - left );\\n\\t\\tvar y = 2 * near / ( top - bottom );\\n\\n\\t\\tvar a = ( right + left ) / ( right - left );\\n\\t\\tvar b = ( top + bottom ) / ( top - bottom );\\n\\t\\tvar c = - ( far + near ) / ( far - near );\\n\\t\\tvar d = - 2 * far * near / ( far - near );\\n\\n\\t\\tte[ 0 ] = x;\\tte[ 4 ] = 0;\\tte[ 8 ] = a;\\tte[ 12 ] = 0;\\n\\t\\tte[ 1 ] = 0;\\tte[ 5 ] = y;\\tte[ 9 ] = b;\\tte[ 13 ] = 0;\\n\\t\\tte[ 2 ] = 0;\\tte[ 6 ] = 0;\\tte[ 10 ] = c;\\tte[ 14 ] = d;\\n\\t\\tte[ 3 ] = 0;\\tte[ 7 ] = 0;\\tte[ 11 ] = - 1;\\tte[ 15 ] = 0;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tmakeOrthographic: function ( left, right, top, bottom, near, far ) {\\n\\n\\t\\tvar te = this.elements;\\n\\t\\tvar w = 1.0 / ( right - left );\\n\\t\\tvar h = 1.0 / ( top - bottom );\\n\\t\\tvar p = 1.0 / ( far - near );\\n\\n\\t\\tvar x = ( right + left ) * w;\\n\\t\\tvar y = ( top + bottom ) * h;\\n\\t\\tvar z = ( far + near ) * p;\\n\\n\\t\\tte[ 0 ] = 2 * w;\\tte[ 4 ] = 0;\\tte[ 8 ] = 0;\\tte[ 12 ] = - x;\\n\\t\\tte[ 1 ] = 0;\\tte[ 5 ] = 2 * h;\\tte[ 9 ] = 0;\\tte[ 13 ] = - y;\\n\\t\\tte[ 2 ] = 0;\\tte[ 6 ] = 0;\\tte[ 10 ] = - 2 * p;\\tte[ 14 ] = - z;\\n\\t\\tte[ 3 ] = 0;\\tte[ 7 ] = 0;\\tte[ 11 ] = 0;\\tte[ 15 ] = 1;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tequals: function ( matrix ) {\\n\\n\\t\\tvar te = this.elements;\\n\\t\\tvar me = matrix.elements;\\n\\n\\t\\tfor ( var i = 0; i < 16; i ++ ) {\\n\\n\\t\\t\\tif ( te[ i ] !== me[ i ] ) return false;\\n\\n\\t\\t}\\n\\n\\t\\treturn true;\\n\\n\\t},\\n\\n\\tfromArray: function ( array, offset ) {\\n\\n\\t\\tif ( offset === undefined ) offset = 0;\\n\\n\\t\\tfor ( var i = 0; i < 16; i ++ ) {\\n\\n\\t\\t\\tthis.elements[ i ] = array[ i + offset ];\\n\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\ttoArray: function ( array, offset ) {\\n\\n\\t\\tif ( array === undefined ) array = [];\\n\\t\\tif ( offset === undefined ) offset = 0;\\n\\n\\t\\tvar te = this.elements;\\n\\n\\t\\tarray[ offset ] = te[ 0 ];\\n\\t\\tarray[ offset + 1 ] = te[ 1 ];\\n\\t\\tarray[ offset + 2 ] = te[ 2 ];\\n\\t\\tarray[ offset + 3 ] = te[ 3 ];\\n\\n\\t\\tarray[ offset + 4 ] = te[ 4 ];\\n\\t\\tarray[ offset + 5 ] = te[ 5 ];\\n\\t\\tarray[ offset + 6 ] = te[ 6 ];\\n\\t\\tarray[ offset + 7 ] = te[ 7 ];\\n\\n\\t\\tarray[ offset + 8 ] = te[ 8 ];\\n\\t\\tarray[ offset + 9 ] = te[ 9 ];\\n\\t\\tarray[ offset + 10 ] = te[ 10 ];\\n\\t\\tarray[ offset + 11 ] = te[ 11 ];\\n\\n\\t\\tarray[ offset + 12 ] = te[ 12 ];\\n\\t\\tarray[ offset + 13 ] = te[ 13 ];\\n\\t\\tarray[ offset + 14 ] = te[ 14 ];\\n\\t\\tarray[ offset + 15 ] = te[ 15 ];\\n\\n\\t\\treturn array;\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author mikael emtinger / http://gomo.se/\\n * @author alteredq / http://alteredqualia.com/\\n * @author WestLangley / http://github.com/WestLangley\\n * @author bhouston / http://clara.io\\n */\\n\\nfunction Quaternion( x, y, z, w ) {\\n\\n\\tthis._x = x || 0;\\n\\tthis._y = y || 0;\\n\\tthis._z = z || 0;\\n\\tthis._w = ( w !== undefined ) ? w : 1;\\n\\n}\\n\\nObject.assign( Quaternion, {\\n\\n\\tslerp: function ( qa, qb, qm, t ) {\\n\\n\\t\\treturn qm.copy( qa ).slerp( qb, t );\\n\\n\\t},\\n\\n\\tslerpFlat: function ( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\\n\\n\\t\\t// fuzz-free, array-based Quaternion SLERP operation\\n\\n\\t\\tvar x0 = src0[ srcOffset0 + 0 ],\\n\\t\\t\\ty0 = src0[ srcOffset0 + 1 ],\\n\\t\\t\\tz0 = src0[ srcOffset0 + 2 ],\\n\\t\\t\\tw0 = src0[ srcOffset0 + 3 ],\\n\\n\\t\\t\\tx1 = src1[ srcOffset1 + 0 ],\\n\\t\\t\\ty1 = src1[ srcOffset1 + 1 ],\\n\\t\\t\\tz1 = src1[ srcOffset1 + 2 ],\\n\\t\\t\\tw1 = src1[ srcOffset1 + 3 ];\\n\\n\\t\\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\\n\\n\\t\\t\\tvar s = 1 - t,\\n\\n\\t\\t\\t\\tcos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\\n\\n\\t\\t\\t\\tdir = ( cos >= 0 ? 1 : - 1 ),\\n\\t\\t\\t\\tsqrSin = 1 - cos * cos;\\n\\n\\t\\t\\t// Skip the Slerp for tiny steps to avoid numeric problems:\\n\\t\\t\\tif ( sqrSin > Number.EPSILON ) {\\n\\n\\t\\t\\t\\tvar sin = Math.sqrt( sqrSin ),\\n\\t\\t\\t\\t\\tlen = Math.atan2( sin, cos * dir );\\n\\n\\t\\t\\t\\ts = Math.sin( s * len ) / sin;\\n\\t\\t\\t\\tt = Math.sin( t * len ) / sin;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tvar tDir = t * dir;\\n\\n\\t\\t\\tx0 = x0 * s + x1 * tDir;\\n\\t\\t\\ty0 = y0 * s + y1 * tDir;\\n\\t\\t\\tz0 = z0 * s + z1 * tDir;\\n\\t\\t\\tw0 = w0 * s + w1 * tDir;\\n\\n\\t\\t\\t// Normalize in case we just did a lerp:\\n\\t\\t\\tif ( s === 1 - t ) {\\n\\n\\t\\t\\t\\tvar f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\\n\\n\\t\\t\\t\\tx0 *= f;\\n\\t\\t\\t\\ty0 *= f;\\n\\t\\t\\t\\tz0 *= f;\\n\\t\\t\\t\\tw0 *= f;\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tdst[ dstOffset ] = x0;\\n\\t\\tdst[ dstOffset + 1 ] = y0;\\n\\t\\tdst[ dstOffset + 2 ] = z0;\\n\\t\\tdst[ dstOffset + 3 ] = w0;\\n\\n\\t}\\n\\n} );\\n\\nObject.defineProperties( Quaternion.prototype, {\\n\\n\\tx: {\\n\\n\\t\\tget: function () {\\n\\n\\t\\t\\treturn this._x;\\n\\n\\t\\t},\\n\\n\\t\\tset: function ( value ) {\\n\\n\\t\\t\\tthis._x = value;\\n\\t\\t\\tthis.onChangeCallback();\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\ty: {\\n\\n\\t\\tget: function () {\\n\\n\\t\\t\\treturn this._y;\\n\\n\\t\\t},\\n\\n\\t\\tset: function ( value ) {\\n\\n\\t\\t\\tthis._y = value;\\n\\t\\t\\tthis.onChangeCallback();\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\tz: {\\n\\n\\t\\tget: function () {\\n\\n\\t\\t\\treturn this._z;\\n\\n\\t\\t},\\n\\n\\t\\tset: function ( value ) {\\n\\n\\t\\t\\tthis._z = value;\\n\\t\\t\\tthis.onChangeCallback();\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\tw: {\\n\\n\\t\\tget: function () {\\n\\n\\t\\t\\treturn this._w;\\n\\n\\t\\t},\\n\\n\\t\\tset: function ( value ) {\\n\\n\\t\\t\\tthis._w = value;\\n\\t\\t\\tthis.onChangeCallback();\\n\\n\\t\\t}\\n\\n\\t}\\n\\n} );\\n\\nObject.assign( Quaternion.prototype, {\\n\\n\\tisQuaternion: true,\\n\\n\\tset: function ( x, y, z, w ) {\\n\\n\\t\\tthis._x = x;\\n\\t\\tthis._y = y;\\n\\t\\tthis._z = z;\\n\\t\\tthis._w = w;\\n\\n\\t\\tthis.onChangeCallback();\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tclone: function () {\\n\\n\\t\\treturn new this.constructor( this._x, this._y, this._z, this._w );\\n\\n\\t},\\n\\n\\tcopy: function ( quaternion ) {\\n\\n\\t\\tthis._x = quaternion.x;\\n\\t\\tthis._y = quaternion.y;\\n\\t\\tthis._z = quaternion.z;\\n\\t\\tthis._w = quaternion.w;\\n\\n\\t\\tthis.onChangeCallback();\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetFromEuler: function ( euler, update ) {\\n\\n\\t\\tif ( ! ( euler && euler.isEuler ) ) {\\n\\n\\t\\t\\tthrow new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );\\n\\n\\t\\t}\\n\\n\\t\\tvar x = euler._x, y = euler._y, z = euler._z, order = euler.order;\\n\\n\\t\\t// http://www.mathworks.com/matlabcentral/fileexchange/\\n\\t\\t// \\t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\\n\\t\\t//\\tcontent/SpinCalc.m\\n\\n\\t\\tvar cos = Math.cos;\\n\\t\\tvar sin = Math.sin;\\n\\n\\t\\tvar c1 = cos( x / 2 );\\n\\t\\tvar c2 = cos( y / 2 );\\n\\t\\tvar c3 = cos( z / 2 );\\n\\n\\t\\tvar s1 = sin( x / 2 );\\n\\t\\tvar s2 = sin( y / 2 );\\n\\t\\tvar s3 = sin( z / 2 );\\n\\n\\t\\tif ( order === 'XYZ' ) {\\n\\n\\t\\t\\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\\n\\t\\t\\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\\n\\t\\t\\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\\n\\t\\t\\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\\n\\n\\t\\t} else if ( order === 'YXZ' ) {\\n\\n\\t\\t\\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\\n\\t\\t\\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\\n\\t\\t\\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\\n\\t\\t\\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\\n\\n\\t\\t} else if ( order === 'ZXY' ) {\\n\\n\\t\\t\\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\\n\\t\\t\\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\\n\\t\\t\\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\\n\\t\\t\\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\\n\\n\\t\\t} else if ( order === 'ZYX' ) {\\n\\n\\t\\t\\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\\n\\t\\t\\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\\n\\t\\t\\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\\n\\t\\t\\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\\n\\n\\t\\t} else if ( order === 'YZX' ) {\\n\\n\\t\\t\\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\\n\\t\\t\\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\\n\\t\\t\\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\\n\\t\\t\\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\\n\\n\\t\\t} else if ( order === 'XZY' ) {\\n\\n\\t\\t\\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\\n\\t\\t\\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\\n\\t\\t\\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\\n\\t\\t\\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\\n\\n\\t\\t}\\n\\n\\t\\tif ( update !== false ) this.onChangeCallback();\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetFromAxisAngle: function ( axis, angle ) {\\n\\n\\t\\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\\n\\n\\t\\t// assumes axis is normalized\\n\\n\\t\\tvar halfAngle = angle / 2, s = Math.sin( halfAngle );\\n\\n\\t\\tthis._x = axis.x * s;\\n\\t\\tthis._y = axis.y * s;\\n\\t\\tthis._z = axis.z * s;\\n\\t\\tthis._w = Math.cos( halfAngle );\\n\\n\\t\\tthis.onChangeCallback();\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetFromRotationMatrix: function ( m ) {\\n\\n\\t\\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\\n\\n\\t\\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\\n\\n\\t\\tvar te = m.elements,\\n\\n\\t\\t\\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\\n\\t\\t\\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\\n\\t\\t\\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\\n\\n\\t\\t\\ttrace = m11 + m22 + m33,\\n\\t\\t\\ts;\\n\\n\\t\\tif ( trace > 0 ) {\\n\\n\\t\\t\\ts = 0.5 / Math.sqrt( trace + 1.0 );\\n\\n\\t\\t\\tthis._w = 0.25 / s;\\n\\t\\t\\tthis._x = ( m32 - m23 ) * s;\\n\\t\\t\\tthis._y = ( m13 - m31 ) * s;\\n\\t\\t\\tthis._z = ( m21 - m12 ) * s;\\n\\n\\t\\t} else if ( m11 > m22 && m11 > m33 ) {\\n\\n\\t\\t\\ts = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\\n\\n\\t\\t\\tthis._w = ( m32 - m23 ) / s;\\n\\t\\t\\tthis._x = 0.25 * s;\\n\\t\\t\\tthis._y = ( m12 + m21 ) / s;\\n\\t\\t\\tthis._z = ( m13 + m31 ) / s;\\n\\n\\t\\t} else if ( m22 > m33 ) {\\n\\n\\t\\t\\ts = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\\n\\n\\t\\t\\tthis._w = ( m13 - m31 ) / s;\\n\\t\\t\\tthis._x = ( m12 + m21 ) / s;\\n\\t\\t\\tthis._y = 0.25 * s;\\n\\t\\t\\tthis._z = ( m23 + m32 ) / s;\\n\\n\\t\\t} else {\\n\\n\\t\\t\\ts = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\\n\\n\\t\\t\\tthis._w = ( m21 - m12 ) / s;\\n\\t\\t\\tthis._x = ( m13 + m31 ) / s;\\n\\t\\t\\tthis._y = ( m23 + m32 ) / s;\\n\\t\\t\\tthis._z = 0.25 * s;\\n\\n\\t\\t}\\n\\n\\t\\tthis.onChangeCallback();\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetFromUnitVectors: function () {\\n\\n\\t\\t// assumes direction vectors vFrom and vTo are normalized\\n\\n\\t\\tvar v1 = new Vector3();\\n\\t\\tvar r;\\n\\n\\t\\tvar EPS = 0.000001;\\n\\n\\t\\treturn function setFromUnitVectors( vFrom, vTo ) {\\n\\n\\t\\t\\tif ( v1 === undefined ) v1 = new Vector3();\\n\\n\\t\\t\\tr = vFrom.dot( vTo ) + 1;\\n\\n\\t\\t\\tif ( r < EPS ) {\\n\\n\\t\\t\\t\\tr = 0;\\n\\n\\t\\t\\t\\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\\n\\n\\t\\t\\t\\t\\tv1.set( - vFrom.y, vFrom.x, 0 );\\n\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\tv1.set( 0, - vFrom.z, vFrom.y );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tv1.crossVectors( vFrom, vTo );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tthis._x = v1.x;\\n\\t\\t\\tthis._y = v1.y;\\n\\t\\t\\tthis._z = v1.z;\\n\\t\\t\\tthis._w = r;\\n\\n\\t\\t\\treturn this.normalize();\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\tangleTo: function ( q ) {\\n\\n\\t\\treturn 2 * Math.acos( Math.abs( _Math.clamp( this.dot( q ), - 1, 1 ) ) );\\n\\n\\t},\\n\\n\\trotateTowards: function ( q, step ) {\\n\\n\\t\\tvar angle = this.angleTo( q );\\n\\n\\t\\tif ( angle === 0 ) return this;\\n\\n\\t\\tvar t = Math.min( 1, step / angle );\\n\\n\\t\\tthis.slerp( q, t );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tinverse: function () {\\n\\n\\t\\t// quaternion is assumed to have unit length\\n\\n\\t\\treturn this.conjugate();\\n\\n\\t},\\n\\n\\tconjugate: function () {\\n\\n\\t\\tthis._x *= - 1;\\n\\t\\tthis._y *= - 1;\\n\\t\\tthis._z *= - 1;\\n\\n\\t\\tthis.onChangeCallback();\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tdot: function ( v ) {\\n\\n\\t\\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\\n\\n\\t},\\n\\n\\tlengthSq: function () {\\n\\n\\t\\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\\n\\n\\t},\\n\\n\\tlength: function () {\\n\\n\\t\\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\\n\\n\\t},\\n\\n\\tnormalize: function () {\\n\\n\\t\\tvar l = this.length();\\n\\n\\t\\tif ( l === 0 ) {\\n\\n\\t\\t\\tthis._x = 0;\\n\\t\\t\\tthis._y = 0;\\n\\t\\t\\tthis._z = 0;\\n\\t\\t\\tthis._w = 1;\\n\\n\\t\\t} else {\\n\\n\\t\\t\\tl = 1 / l;\\n\\n\\t\\t\\tthis._x = this._x * l;\\n\\t\\t\\tthis._y = this._y * l;\\n\\t\\t\\tthis._z = this._z * l;\\n\\t\\t\\tthis._w = this._w * l;\\n\\n\\t\\t}\\n\\n\\t\\tthis.onChangeCallback();\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tmultiply: function ( q, p ) {\\n\\n\\t\\tif ( p !== undefined ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\\n\\t\\t\\treturn this.multiplyQuaternions( q, p );\\n\\n\\t\\t}\\n\\n\\t\\treturn this.multiplyQuaternions( this, q );\\n\\n\\t},\\n\\n\\tpremultiply: function ( q ) {\\n\\n\\t\\treturn this.multiplyQuaternions( q, this );\\n\\n\\t},\\n\\n\\tmultiplyQuaternions: function ( a, b ) {\\n\\n\\t\\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\\n\\n\\t\\tvar qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\\n\\t\\tvar qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\\n\\n\\t\\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\\n\\t\\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\\n\\t\\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\\n\\t\\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\\n\\n\\t\\tthis.onChangeCallback();\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tslerp: function ( qb, t ) {\\n\\n\\t\\tif ( t === 0 ) return this;\\n\\t\\tif ( t === 1 ) return this.copy( qb );\\n\\n\\t\\tvar x = this._x, y = this._y, z = this._z, w = this._w;\\n\\n\\t\\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\\n\\n\\t\\tvar cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\\n\\n\\t\\tif ( cosHalfTheta < 0 ) {\\n\\n\\t\\t\\tthis._w = - qb._w;\\n\\t\\t\\tthis._x = - qb._x;\\n\\t\\t\\tthis._y = - qb._y;\\n\\t\\t\\tthis._z = - qb._z;\\n\\n\\t\\t\\tcosHalfTheta = - cosHalfTheta;\\n\\n\\t\\t} else {\\n\\n\\t\\t\\tthis.copy( qb );\\n\\n\\t\\t}\\n\\n\\t\\tif ( cosHalfTheta >= 1.0 ) {\\n\\n\\t\\t\\tthis._w = w;\\n\\t\\t\\tthis._x = x;\\n\\t\\t\\tthis._y = y;\\n\\t\\t\\tthis._z = z;\\n\\n\\t\\t\\treturn this;\\n\\n\\t\\t}\\n\\n\\t\\tvar sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\\n\\n\\t\\tif ( sqrSinHalfTheta <= Number.EPSILON ) {\\n\\n\\t\\t\\tvar s = 1 - t;\\n\\t\\t\\tthis._w = s * w + t * this._w;\\n\\t\\t\\tthis._x = s * x + t * this._x;\\n\\t\\t\\tthis._y = s * y + t * this._y;\\n\\t\\t\\tthis._z = s * z + t * this._z;\\n\\n\\t\\t\\treturn this.normalize();\\n\\n\\t\\t}\\n\\n\\t\\tvar sinHalfTheta = Math.sqrt( sqrSinHalfTheta );\\n\\t\\tvar halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\\n\\t\\tvar ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\\n\\t\\t\\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\\n\\n\\t\\tthis._w = ( w * ratioA + this._w * ratioB );\\n\\t\\tthis._x = ( x * ratioA + this._x * ratioB );\\n\\t\\tthis._y = ( y * ratioA + this._y * ratioB );\\n\\t\\tthis._z = ( z * ratioA + this._z * ratioB );\\n\\n\\t\\tthis.onChangeCallback();\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tequals: function ( quaternion ) {\\n\\n\\t\\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\\n\\n\\t},\\n\\n\\tfromArray: function ( array, offset ) {\\n\\n\\t\\tif ( offset === undefined ) offset = 0;\\n\\n\\t\\tthis._x = array[ offset ];\\n\\t\\tthis._y = array[ offset + 1 ];\\n\\t\\tthis._z = array[ offset + 2 ];\\n\\t\\tthis._w = array[ offset + 3 ];\\n\\n\\t\\tthis.onChangeCallback();\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\ttoArray: function ( array, offset ) {\\n\\n\\t\\tif ( array === undefined ) array = [];\\n\\t\\tif ( offset === undefined ) offset = 0;\\n\\n\\t\\tarray[ offset ] = this._x;\\n\\t\\tarray[ offset + 1 ] = this._y;\\n\\t\\tarray[ offset + 2 ] = this._z;\\n\\t\\tarray[ offset + 3 ] = this._w;\\n\\n\\t\\treturn array;\\n\\n\\t},\\n\\n\\tonChange: function ( callback ) {\\n\\n\\t\\tthis.onChangeCallback = callback;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tonChangeCallback: function () {}\\n\\n} );\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n * @author kile / http://kile.stravaganza.org/\\n * @author philogb / http://blog.thejit.org/\\n * @author mikael emtinger / http://gomo.se/\\n * @author egraether / http://egraether.com/\\n * @author WestLangley / http://github.com/WestLangley\\n */\\n\\nfunction Vector3( x, y, z ) {\\n\\n\\tthis.x = x || 0;\\n\\tthis.y = y || 0;\\n\\tthis.z = z || 0;\\n\\n}\\n\\nObject.assign( Vector3.prototype, {\\n\\n\\tisVector3: true,\\n\\n\\tset: function ( x, y, z ) {\\n\\n\\t\\tthis.x = x;\\n\\t\\tthis.y = y;\\n\\t\\tthis.z = z;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetScalar: function ( scalar ) {\\n\\n\\t\\tthis.x = scalar;\\n\\t\\tthis.y = scalar;\\n\\t\\tthis.z = scalar;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetX: function ( x ) {\\n\\n\\t\\tthis.x = x;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetY: function ( y ) {\\n\\n\\t\\tthis.y = y;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetZ: function ( z ) {\\n\\n\\t\\tthis.z = z;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetComponent: function ( index, value ) {\\n\\n\\t\\tswitch ( index ) {\\n\\n\\t\\t\\tcase 0: this.x = value; break;\\n\\t\\t\\tcase 1: this.y = value; break;\\n\\t\\t\\tcase 2: this.z = value; break;\\n\\t\\t\\tdefault: throw new Error( 'index is out of range: ' + index );\\n\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tgetComponent: function ( index ) {\\n\\n\\t\\tswitch ( index ) {\\n\\n\\t\\t\\tcase 0: return this.x;\\n\\t\\t\\tcase 1: return this.y;\\n\\t\\t\\tcase 2: return this.z;\\n\\t\\t\\tdefault: throw new Error( 'index is out of range: ' + index );\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\tclone: function () {\\n\\n\\t\\treturn new this.constructor( this.x, this.y, this.z );\\n\\n\\t},\\n\\n\\tcopy: function ( v ) {\\n\\n\\t\\tthis.x = v.x;\\n\\t\\tthis.y = v.y;\\n\\t\\tthis.z = v.z;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tadd: function ( v, w ) {\\n\\n\\t\\tif ( w !== undefined ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\\n\\t\\t\\treturn this.addVectors( v, w );\\n\\n\\t\\t}\\n\\n\\t\\tthis.x += v.x;\\n\\t\\tthis.y += v.y;\\n\\t\\tthis.z += v.z;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\taddScalar: function ( s ) {\\n\\n\\t\\tthis.x += s;\\n\\t\\tthis.y += s;\\n\\t\\tthis.z += s;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\taddVectors: function ( a, b ) {\\n\\n\\t\\tthis.x = a.x + b.x;\\n\\t\\tthis.y = a.y + b.y;\\n\\t\\tthis.z = a.z + b.z;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\taddScaledVector: function ( v, s ) {\\n\\n\\t\\tthis.x += v.x * s;\\n\\t\\tthis.y += v.y * s;\\n\\t\\tthis.z += v.z * s;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsub: function ( v, w ) {\\n\\n\\t\\tif ( w !== undefined ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\\n\\t\\t\\treturn this.subVectors( v, w );\\n\\n\\t\\t}\\n\\n\\t\\tthis.x -= v.x;\\n\\t\\tthis.y -= v.y;\\n\\t\\tthis.z -= v.z;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsubScalar: function ( s ) {\\n\\n\\t\\tthis.x -= s;\\n\\t\\tthis.y -= s;\\n\\t\\tthis.z -= s;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsubVectors: function ( a, b ) {\\n\\n\\t\\tthis.x = a.x - b.x;\\n\\t\\tthis.y = a.y - b.y;\\n\\t\\tthis.z = a.z - b.z;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tmultiply: function ( v, w ) {\\n\\n\\t\\tif ( w !== undefined ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\\n\\t\\t\\treturn this.multiplyVectors( v, w );\\n\\n\\t\\t}\\n\\n\\t\\tthis.x *= v.x;\\n\\t\\tthis.y *= v.y;\\n\\t\\tthis.z *= v.z;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tmultiplyScalar: function ( scalar ) {\\n\\n\\t\\tthis.x *= scalar;\\n\\t\\tthis.y *= scalar;\\n\\t\\tthis.z *= scalar;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tmultiplyVectors: function ( a, b ) {\\n\\n\\t\\tthis.x = a.x * b.x;\\n\\t\\tthis.y = a.y * b.y;\\n\\t\\tthis.z = a.z * b.z;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tapplyEuler: function () {\\n\\n\\t\\tvar quaternion = new Quaternion();\\n\\n\\t\\treturn function applyEuler( euler ) {\\n\\n\\t\\t\\tif ( ! ( euler && euler.isEuler ) ) {\\n\\n\\t\\t\\t\\tconsole.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn this.applyQuaternion( quaternion.setFromEuler( euler ) );\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\tapplyAxisAngle: function () {\\n\\n\\t\\tvar quaternion = new Quaternion();\\n\\n\\t\\treturn function applyAxisAngle( axis, angle ) {\\n\\n\\t\\t\\treturn this.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\tapplyMatrix3: function ( m ) {\\n\\n\\t\\tvar x = this.x, y = this.y, z = this.z;\\n\\t\\tvar e = m.elements;\\n\\n\\t\\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\\n\\t\\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\\n\\t\\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tapplyMatrix4: function ( m ) {\\n\\n\\t\\tvar x = this.x, y = this.y, z = this.z;\\n\\t\\tvar e = m.elements;\\n\\n\\t\\tvar w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );\\n\\n\\t\\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;\\n\\t\\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;\\n\\t\\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tapplyQuaternion: function ( q ) {\\n\\n\\t\\tvar x = this.x, y = this.y, z = this.z;\\n\\t\\tvar qx = q.x, qy = q.y, qz = q.z, qw = q.w;\\n\\n\\t\\t// calculate quat * vector\\n\\n\\t\\tvar ix = qw * x + qy * z - qz * y;\\n\\t\\tvar iy = qw * y + qz * x - qx * z;\\n\\t\\tvar iz = qw * z + qx * y - qy * x;\\n\\t\\tvar iw = - qx * x - qy * y - qz * z;\\n\\n\\t\\t// calculate result * inverse quat\\n\\n\\t\\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\\n\\t\\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\\n\\t\\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tproject: function ( camera ) {\\n\\n\\t\\treturn this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );\\n\\n\\t},\\n\\n\\tunproject: function () {\\n\\n\\t\\tvar matrix = new Matrix4();\\n\\n\\t\\treturn function unproject( camera ) {\\n\\n\\t\\t\\treturn this.applyMatrix4( matrix.getInverse( camera.projectionMatrix ) ).applyMatrix4( camera.matrixWorld );\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\ttransformDirection: function ( m ) {\\n\\n\\t\\t// input: THREE.Matrix4 affine matrix\\n\\t\\t// vector interpreted as a direction\\n\\n\\t\\tvar x = this.x, y = this.y, z = this.z;\\n\\t\\tvar e = m.elements;\\n\\n\\t\\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;\\n\\t\\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;\\n\\t\\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\\n\\n\\t\\treturn this.normalize();\\n\\n\\t},\\n\\n\\tdivide: function ( v ) {\\n\\n\\t\\tthis.x /= v.x;\\n\\t\\tthis.y /= v.y;\\n\\t\\tthis.z /= v.z;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tdivideScalar: function ( scalar ) {\\n\\n\\t\\treturn this.multiplyScalar( 1 / scalar );\\n\\n\\t},\\n\\n\\tmin: function ( v ) {\\n\\n\\t\\tthis.x = Math.min( this.x, v.x );\\n\\t\\tthis.y = Math.min( this.y, v.y );\\n\\t\\tthis.z = Math.min( this.z, v.z );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tmax: function ( v ) {\\n\\n\\t\\tthis.x = Math.max( this.x, v.x );\\n\\t\\tthis.y = Math.max( this.y, v.y );\\n\\t\\tthis.z = Math.max( this.z, v.z );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tclamp: function ( min, max ) {\\n\\n\\t\\t// assumes min < max, componentwise\\n\\n\\t\\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\\n\\t\\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\\n\\t\\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tclampScalar: function () {\\n\\n\\t\\tvar min = new Vector3();\\n\\t\\tvar max = new Vector3();\\n\\n\\t\\treturn function clampScalar( minVal, maxVal ) {\\n\\n\\t\\t\\tmin.set( minVal, minVal, minVal );\\n\\t\\t\\tmax.set( maxVal, maxVal, maxVal );\\n\\n\\t\\t\\treturn this.clamp( min, max );\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\tclampLength: function ( min, max ) {\\n\\n\\t\\tvar length = this.length();\\n\\n\\t\\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\\n\\n\\t},\\n\\n\\tfloor: function () {\\n\\n\\t\\tthis.x = Math.floor( this.x );\\n\\t\\tthis.y = Math.floor( this.y );\\n\\t\\tthis.z = Math.floor( this.z );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tceil: function () {\\n\\n\\t\\tthis.x = Math.ceil( this.x );\\n\\t\\tthis.y = Math.ceil( this.y );\\n\\t\\tthis.z = Math.ceil( this.z );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tround: function () {\\n\\n\\t\\tthis.x = Math.round( this.x );\\n\\t\\tthis.y = Math.round( this.y );\\n\\t\\tthis.z = Math.round( this.z );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\troundToZero: function () {\\n\\n\\t\\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\\n\\t\\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\\n\\t\\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tnegate: function () {\\n\\n\\t\\tthis.x = - this.x;\\n\\t\\tthis.y = - this.y;\\n\\t\\tthis.z = - this.z;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tdot: function ( v ) {\\n\\n\\t\\treturn this.x * v.x + this.y * v.y + this.z * v.z;\\n\\n\\t},\\n\\n\\t// TODO lengthSquared?\\n\\n\\tlengthSq: function () {\\n\\n\\t\\treturn this.x * this.x + this.y * this.y + this.z * this.z;\\n\\n\\t},\\n\\n\\tlength: function () {\\n\\n\\t\\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\\n\\n\\t},\\n\\n\\tmanhattanLength: function () {\\n\\n\\t\\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\\n\\n\\t},\\n\\n\\tnormalize: function () {\\n\\n\\t\\treturn this.divideScalar( this.length() || 1 );\\n\\n\\t},\\n\\n\\tsetLength: function ( length ) {\\n\\n\\t\\treturn this.normalize().multiplyScalar( length );\\n\\n\\t},\\n\\n\\tlerp: function ( v, alpha ) {\\n\\n\\t\\tthis.x += ( v.x - this.x ) * alpha;\\n\\t\\tthis.y += ( v.y - this.y ) * alpha;\\n\\t\\tthis.z += ( v.z - this.z ) * alpha;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tlerpVectors: function ( v1, v2, alpha ) {\\n\\n\\t\\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\\n\\n\\t},\\n\\n\\tcross: function ( v, w ) {\\n\\n\\t\\tif ( w !== undefined ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\\n\\t\\t\\treturn this.crossVectors( v, w );\\n\\n\\t\\t}\\n\\n\\t\\treturn this.crossVectors( this, v );\\n\\n\\t},\\n\\n\\tcrossVectors: function ( a, b ) {\\n\\n\\t\\tvar ax = a.x, ay = a.y, az = a.z;\\n\\t\\tvar bx = b.x, by = b.y, bz = b.z;\\n\\n\\t\\tthis.x = ay * bz - az * by;\\n\\t\\tthis.y = az * bx - ax * bz;\\n\\t\\tthis.z = ax * by - ay * bx;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tprojectOnVector: function ( vector ) {\\n\\n\\t\\tvar scalar = vector.dot( this ) / vector.lengthSq();\\n\\n\\t\\treturn this.copy( vector ).multiplyScalar( scalar );\\n\\n\\t},\\n\\n\\tprojectOnPlane: function () {\\n\\n\\t\\tvar v1 = new Vector3();\\n\\n\\t\\treturn function projectOnPlane( planeNormal ) {\\n\\n\\t\\t\\tv1.copy( this ).projectOnVector( planeNormal );\\n\\n\\t\\t\\treturn this.sub( v1 );\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\treflect: function () {\\n\\n\\t\\t// reflect incident vector off plane orthogonal to normal\\n\\t\\t// normal is assumed to have unit length\\n\\n\\t\\tvar v1 = new Vector3();\\n\\n\\t\\treturn function reflect( normal ) {\\n\\n\\t\\t\\treturn this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\tangleTo: function ( v ) {\\n\\n\\t\\tvar theta = this.dot( v ) / ( Math.sqrt( this.lengthSq() * v.lengthSq() ) );\\n\\n\\t\\t// clamp, to handle numerical problems\\n\\n\\t\\treturn Math.acos( _Math.clamp( theta, - 1, 1 ) );\\n\\n\\t},\\n\\n\\tdistanceTo: function ( v ) {\\n\\n\\t\\treturn Math.sqrt( this.distanceToSquared( v ) );\\n\\n\\t},\\n\\n\\tdistanceToSquared: function ( v ) {\\n\\n\\t\\tvar dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\\n\\n\\t\\treturn dx * dx + dy * dy + dz * dz;\\n\\n\\t},\\n\\n\\tmanhattanDistanceTo: function ( v ) {\\n\\n\\t\\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );\\n\\n\\t},\\n\\n\\tsetFromSpherical: function ( s ) {\\n\\n\\t\\treturn this.setFromSphericalCoords( s.radius, s.phi, s.theta );\\n\\n\\t},\\n\\n\\tsetFromSphericalCoords: function ( radius, phi, theta ) {\\n\\n\\t\\tvar sinPhiRadius = Math.sin( phi ) * radius;\\n\\n\\t\\tthis.x = sinPhiRadius * Math.sin( theta );\\n\\t\\tthis.y = Math.cos( phi ) * radius;\\n\\t\\tthis.z = sinPhiRadius * Math.cos( theta );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetFromCylindrical: function ( c ) {\\n\\n\\t\\treturn this.setFromCylindricalCoords( c.radius, c.theta, c.y );\\n\\n\\t},\\n\\n\\tsetFromCylindricalCoords: function ( radius, theta, y ) {\\n\\n\\t\\tthis.x = radius * Math.sin( theta );\\n\\t\\tthis.y = y;\\n\\t\\tthis.z = radius * Math.cos( theta );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetFromMatrixPosition: function ( m ) {\\n\\n\\t\\tvar e = m.elements;\\n\\n\\t\\tthis.x = e[ 12 ];\\n\\t\\tthis.y = e[ 13 ];\\n\\t\\tthis.z = e[ 14 ];\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetFromMatrixScale: function ( m ) {\\n\\n\\t\\tvar sx = this.setFromMatrixColumn( m, 0 ).length();\\n\\t\\tvar sy = this.setFromMatrixColumn( m, 1 ).length();\\n\\t\\tvar sz = this.setFromMatrixColumn( m, 2 ).length();\\n\\n\\t\\tthis.x = sx;\\n\\t\\tthis.y = sy;\\n\\t\\tthis.z = sz;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetFromMatrixColumn: function ( m, index ) {\\n\\n\\t\\treturn this.fromArray( m.elements, index * 4 );\\n\\n\\t},\\n\\n\\tequals: function ( v ) {\\n\\n\\t\\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\\n\\n\\t},\\n\\n\\tfromArray: function ( array, offset ) {\\n\\n\\t\\tif ( offset === undefined ) offset = 0;\\n\\n\\t\\tthis.x = array[ offset ];\\n\\t\\tthis.y = array[ offset + 1 ];\\n\\t\\tthis.z = array[ offset + 2 ];\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\ttoArray: function ( array, offset ) {\\n\\n\\t\\tif ( array === undefined ) array = [];\\n\\t\\tif ( offset === undefined ) offset = 0;\\n\\n\\t\\tarray[ offset ] = this.x;\\n\\t\\tarray[ offset + 1 ] = this.y;\\n\\t\\tarray[ offset + 2 ] = this.z;\\n\\n\\t\\treturn array;\\n\\n\\t},\\n\\n\\tfromBufferAttribute: function ( attribute, index, offset ) {\\n\\n\\t\\tif ( offset !== undefined ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Vector3: offset has been removed from .fromBufferAttribute().' );\\n\\n\\t\\t}\\n\\n\\t\\tthis.x = attribute.getX( index );\\n\\t\\tthis.y = attribute.getY( index );\\n\\t\\tthis.z = attribute.getZ( index );\\n\\n\\t\\treturn this;\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author alteredq / http://alteredqualia.com/\\n * @author WestLangley / http://github.com/WestLangley\\n * @author bhouston / http://clara.io\\n * @author tschw\\n */\\n\\nfunction Matrix3() {\\n\\n\\tthis.elements = [\\n\\n\\t\\t1, 0, 0,\\n\\t\\t0, 1, 0,\\n\\t\\t0, 0, 1\\n\\n\\t];\\n\\n\\tif ( arguments.length > 0 ) {\\n\\n\\t\\tconsole.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );\\n\\n\\t}\\n\\n}\\n\\nObject.assign( Matrix3.prototype, {\\n\\n\\tisMatrix3: true,\\n\\n\\tset: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\\n\\n\\t\\tvar te = this.elements;\\n\\n\\t\\tte[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\\n\\t\\tte[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\\n\\t\\tte[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tidentity: function () {\\n\\n\\t\\tthis.set(\\n\\n\\t\\t\\t1, 0, 0,\\n\\t\\t\\t0, 1, 0,\\n\\t\\t\\t0, 0, 1\\n\\n\\t\\t);\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tclone: function () {\\n\\n\\t\\treturn new this.constructor().fromArray( this.elements );\\n\\n\\t},\\n\\n\\tcopy: function ( m ) {\\n\\n\\t\\tvar te = this.elements;\\n\\t\\tvar me = m.elements;\\n\\n\\t\\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];\\n\\t\\tte[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];\\n\\t\\tte[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetFromMatrix4: function ( m ) {\\n\\n\\t\\tvar me = m.elements;\\n\\n\\t\\tthis.set(\\n\\n\\t\\t\\tme[ 0 ], me[ 4 ], me[ 8 ],\\n\\t\\t\\tme[ 1 ], me[ 5 ], me[ 9 ],\\n\\t\\t\\tme[ 2 ], me[ 6 ], me[ 10 ]\\n\\n\\t\\t);\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tapplyToBufferAttribute: function () {\\n\\n\\t\\tvar v1 = new Vector3();\\n\\n\\t\\treturn function applyToBufferAttribute( attribute ) {\\n\\n\\t\\t\\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\\n\\n\\t\\t\\t\\tv1.x = attribute.getX( i );\\n\\t\\t\\t\\tv1.y = attribute.getY( i );\\n\\t\\t\\t\\tv1.z = attribute.getZ( i );\\n\\n\\t\\t\\t\\tv1.applyMatrix3( this );\\n\\n\\t\\t\\t\\tattribute.setXYZ( i, v1.x, v1.y, v1.z );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn attribute;\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\tmultiply: function ( m ) {\\n\\n\\t\\treturn this.multiplyMatrices( this, m );\\n\\n\\t},\\n\\n\\tpremultiply: function ( m ) {\\n\\n\\t\\treturn this.multiplyMatrices( m, this );\\n\\n\\t},\\n\\n\\tmultiplyMatrices: function ( a, b ) {\\n\\n\\t\\tvar ae = a.elements;\\n\\t\\tvar be = b.elements;\\n\\t\\tvar te = this.elements;\\n\\n\\t\\tvar a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];\\n\\t\\tvar a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];\\n\\t\\tvar a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];\\n\\n\\t\\tvar b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];\\n\\t\\tvar b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];\\n\\t\\tvar b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];\\n\\n\\t\\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;\\n\\t\\tte[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;\\n\\t\\tte[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;\\n\\n\\t\\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;\\n\\t\\tte[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;\\n\\t\\tte[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;\\n\\n\\t\\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;\\n\\t\\tte[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;\\n\\t\\tte[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tmultiplyScalar: function ( s ) {\\n\\n\\t\\tvar te = this.elements;\\n\\n\\t\\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\\n\\t\\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\\n\\t\\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tdeterminant: function () {\\n\\n\\t\\tvar te = this.elements;\\n\\n\\t\\tvar a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\\n\\t\\t\\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\\n\\t\\t\\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\\n\\n\\t\\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\\n\\n\\t},\\n\\n\\tgetInverse: function ( matrix, throwOnDegenerate ) {\\n\\n\\t\\tif ( matrix && matrix.isMatrix4 ) {\\n\\n\\t\\t\\tconsole.error( \\\"THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument.\\\" );\\n\\n\\t\\t}\\n\\n\\t\\tvar me = matrix.elements,\\n\\t\\t\\tte = this.elements,\\n\\n\\t\\t\\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],\\n\\t\\t\\tn12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],\\n\\t\\t\\tn13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],\\n\\n\\t\\t\\tt11 = n33 * n22 - n32 * n23,\\n\\t\\t\\tt12 = n32 * n13 - n33 * n12,\\n\\t\\t\\tt13 = n23 * n12 - n22 * n13,\\n\\n\\t\\t\\tdet = n11 * t11 + n21 * t12 + n31 * t13;\\n\\n\\t\\tif ( det === 0 ) {\\n\\n\\t\\t\\tvar msg = \\\"THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0\\\";\\n\\n\\t\\t\\tif ( throwOnDegenerate === true ) {\\n\\n\\t\\t\\t\\tthrow new Error( msg );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tconsole.warn( msg );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn this.identity();\\n\\n\\t\\t}\\n\\n\\t\\tvar detInv = 1 / det;\\n\\n\\t\\tte[ 0 ] = t11 * detInv;\\n\\t\\tte[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;\\n\\t\\tte[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;\\n\\n\\t\\tte[ 3 ] = t12 * detInv;\\n\\t\\tte[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;\\n\\t\\tte[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;\\n\\n\\t\\tte[ 6 ] = t13 * detInv;\\n\\t\\tte[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;\\n\\t\\tte[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\ttranspose: function () {\\n\\n\\t\\tvar tmp, m = this.elements;\\n\\n\\t\\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\\n\\t\\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\\n\\t\\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tgetNormalMatrix: function ( matrix4 ) {\\n\\n\\t\\treturn this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();\\n\\n\\t},\\n\\n\\ttransposeIntoArray: function ( r ) {\\n\\n\\t\\tvar m = this.elements;\\n\\n\\t\\tr[ 0 ] = m[ 0 ];\\n\\t\\tr[ 1 ] = m[ 3 ];\\n\\t\\tr[ 2 ] = m[ 6 ];\\n\\t\\tr[ 3 ] = m[ 1 ];\\n\\t\\tr[ 4 ] = m[ 4 ];\\n\\t\\tr[ 5 ] = m[ 7 ];\\n\\t\\tr[ 6 ] = m[ 2 ];\\n\\t\\tr[ 7 ] = m[ 5 ];\\n\\t\\tr[ 8 ] = m[ 8 ];\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetUvTransform: function ( tx, ty, sx, sy, rotation, cx, cy ) {\\n\\n\\t\\tvar c = Math.cos( rotation );\\n\\t\\tvar s = Math.sin( rotation );\\n\\n\\t\\tthis.set(\\n\\t\\t\\tsx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,\\n\\t\\t\\t- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,\\n\\t\\t\\t0, 0, 1\\n\\t\\t);\\n\\n\\t},\\n\\n\\tscale: function ( sx, sy ) {\\n\\n\\t\\tvar te = this.elements;\\n\\n\\t\\tte[ 0 ] *= sx; te[ 3 ] *= sx; te[ 6 ] *= sx;\\n\\t\\tte[ 1 ] *= sy; te[ 4 ] *= sy; te[ 7 ] *= sy;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\trotate: function ( theta ) {\\n\\n\\t\\tvar c = Math.cos( theta );\\n\\t\\tvar s = Math.sin( theta );\\n\\n\\t\\tvar te = this.elements;\\n\\n\\t\\tvar a11 = te[ 0 ], a12 = te[ 3 ], a13 = te[ 6 ];\\n\\t\\tvar a21 = te[ 1 ], a22 = te[ 4 ], a23 = te[ 7 ];\\n\\n\\t\\tte[ 0 ] = c * a11 + s * a21;\\n\\t\\tte[ 3 ] = c * a12 + s * a22;\\n\\t\\tte[ 6 ] = c * a13 + s * a23;\\n\\n\\t\\tte[ 1 ] = - s * a11 + c * a21;\\n\\t\\tte[ 4 ] = - s * a12 + c * a22;\\n\\t\\tte[ 7 ] = - s * a13 + c * a23;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\ttranslate: function ( tx, ty ) {\\n\\n\\t\\tvar te = this.elements;\\n\\n\\t\\tte[ 0 ] += tx * te[ 2 ]; te[ 3 ] += tx * te[ 5 ]; te[ 6 ] += tx * te[ 8 ];\\n\\t\\tte[ 1 ] += ty * te[ 2 ]; te[ 4 ] += ty * te[ 5 ]; te[ 7 ] += ty * te[ 8 ];\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tequals: function ( matrix ) {\\n\\n\\t\\tvar te = this.elements;\\n\\t\\tvar me = matrix.elements;\\n\\n\\t\\tfor ( var i = 0; i < 9; i ++ ) {\\n\\n\\t\\t\\tif ( te[ i ] !== me[ i ] ) return false;\\n\\n\\t\\t}\\n\\n\\t\\treturn true;\\n\\n\\t},\\n\\n\\tfromArray: function ( array, offset ) {\\n\\n\\t\\tif ( offset === undefined ) offset = 0;\\n\\n\\t\\tfor ( var i = 0; i < 9; i ++ ) {\\n\\n\\t\\t\\tthis.elements[ i ] = array[ i + offset ];\\n\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\ttoArray: function ( array, offset ) {\\n\\n\\t\\tif ( array === undefined ) array = [];\\n\\t\\tif ( offset === undefined ) offset = 0;\\n\\n\\t\\tvar te = this.elements;\\n\\n\\t\\tarray[ offset ] = te[ 0 ];\\n\\t\\tarray[ offset + 1 ] = te[ 1 ];\\n\\t\\tarray[ offset + 2 ] = te[ 2 ];\\n\\n\\t\\tarray[ offset + 3 ] = te[ 3 ];\\n\\t\\tarray[ offset + 4 ] = te[ 4 ];\\n\\t\\tarray[ offset + 5 ] = te[ 5 ];\\n\\n\\t\\tarray[ offset + 6 ] = te[ 6 ];\\n\\t\\tarray[ offset + 7 ] = te[ 7 ];\\n\\t\\tarray[ offset + 8 ] = te[ 8 ];\\n\\n\\t\\treturn array;\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n * @author alteredq / http://alteredqualia.com/\\n * @author szimek / https://github.com/szimek/\\n */\\n\\nvar _canvas;\\n\\nvar ImageUtils = {\\n\\n\\tgetDataURL: function ( image ) {\\n\\n\\t\\tvar canvas;\\n\\n\\t\\tif ( typeof HTMLCanvasElement == 'undefined' ) {\\n\\n\\t\\t\\treturn image.src;\\n\\n\\t\\t} else if ( image instanceof HTMLCanvasElement ) {\\n\\n\\t\\t\\tcanvas = image;\\n\\n\\t\\t} else {\\n\\n\\t\\t\\tif ( _canvas === undefined ) _canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\\n\\n\\t\\t\\t_canvas.width = image.width;\\n\\t\\t\\t_canvas.height = image.height;\\n\\n\\t\\t\\tvar context = _canvas.getContext( '2d' );\\n\\n\\t\\t\\tif ( image instanceof ImageData ) {\\n\\n\\t\\t\\t\\tcontext.putImageData( image, 0, 0 );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tcontext.drawImage( image, 0, 0, image.width, image.height );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tcanvas = _canvas;\\n\\n\\t\\t}\\n\\n\\t\\tif ( canvas.width > 2048 || canvas.height > 2048 ) {\\n\\n\\t\\t\\treturn canvas.toDataURL( 'image/jpeg', 0.6 );\\n\\n\\t\\t} else {\\n\\n\\t\\t\\treturn canvas.toDataURL( 'image/png' );\\n\\n\\t\\t}\\n\\n\\t}\\n\\n};\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n * @author alteredq / http://alteredqualia.com/\\n * @author szimek / https://github.com/szimek/\\n */\\n\\nvar textureId = 0;\\n\\nfunction Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\\n\\n\\tObject.defineProperty( this, 'id', { value: textureId ++ } );\\n\\n\\tthis.uuid = _Math.generateUUID();\\n\\n\\tthis.name = '';\\n\\n\\tthis.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;\\n\\tthis.mipmaps = [];\\n\\n\\tthis.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;\\n\\n\\tthis.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;\\n\\tthis.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;\\n\\n\\tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\\n\\tthis.minFilter = minFilter !== undefined ? minFilter : LinearMipMapLinearFilter;\\n\\n\\tthis.anisotropy = anisotropy !== undefined ? anisotropy : 1;\\n\\n\\tthis.format = format !== undefined ? format : RGBAFormat;\\n\\tthis.type = type !== undefined ? type : UnsignedByteType;\\n\\n\\tthis.offset = new Vector2( 0, 0 );\\n\\tthis.repeat = new Vector2( 1, 1 );\\n\\tthis.center = new Vector2( 0, 0 );\\n\\tthis.rotation = 0;\\n\\n\\tthis.matrixAutoUpdate = true;\\n\\tthis.matrix = new Matrix3();\\n\\n\\tthis.generateMipmaps = true;\\n\\tthis.premultiplyAlpha = false;\\n\\tthis.flipY = true;\\n\\tthis.unpackAlignment = 4;\\t// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\\n\\n\\t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\\n\\t//\\n\\t// Also changing the encoding after already used by a Material will not automatically make the Material\\n\\t// update.  You need to explicitly call Material.needsUpdate to trigger it to recompile.\\n\\tthis.encoding = encoding !== undefined ? encoding : LinearEncoding;\\n\\n\\tthis.version = 0;\\n\\tthis.onUpdate = null;\\n\\n}\\n\\nTexture.DEFAULT_IMAGE = undefined;\\nTexture.DEFAULT_MAPPING = UVMapping;\\n\\nTexture.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\\n\\n\\tconstructor: Texture,\\n\\n\\tisTexture: true,\\n\\n\\tupdateMatrix: function () {\\n\\n\\t\\tthis.matrix.setUvTransform( this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y );\\n\\n\\t},\\n\\n\\tclone: function () {\\n\\n\\t\\treturn new this.constructor().copy( this );\\n\\n\\t},\\n\\n\\tcopy: function ( source ) {\\n\\n\\t\\tthis.name = source.name;\\n\\n\\t\\tthis.image = source.image;\\n\\t\\tthis.mipmaps = source.mipmaps.slice( 0 );\\n\\n\\t\\tthis.mapping = source.mapping;\\n\\n\\t\\tthis.wrapS = source.wrapS;\\n\\t\\tthis.wrapT = source.wrapT;\\n\\n\\t\\tthis.magFilter = source.magFilter;\\n\\t\\tthis.minFilter = source.minFilter;\\n\\n\\t\\tthis.anisotropy = source.anisotropy;\\n\\n\\t\\tthis.format = source.format;\\n\\t\\tthis.type = source.type;\\n\\n\\t\\tthis.offset.copy( source.offset );\\n\\t\\tthis.repeat.copy( source.repeat );\\n\\t\\tthis.center.copy( source.center );\\n\\t\\tthis.rotation = source.rotation;\\n\\n\\t\\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\\n\\t\\tthis.matrix.copy( source.matrix );\\n\\n\\t\\tthis.generateMipmaps = source.generateMipmaps;\\n\\t\\tthis.premultiplyAlpha = source.premultiplyAlpha;\\n\\t\\tthis.flipY = source.flipY;\\n\\t\\tthis.unpackAlignment = source.unpackAlignment;\\n\\t\\tthis.encoding = source.encoding;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\ttoJSON: function ( meta ) {\\n\\n\\t\\tvar isRootObject = ( meta === undefined || typeof meta === 'string' );\\n\\n\\t\\tif ( ! isRootObject && meta.textures[ this.uuid ] !== undefined ) {\\n\\n\\t\\t\\treturn meta.textures[ this.uuid ];\\n\\n\\t\\t}\\n\\n\\t\\tvar output = {\\n\\n\\t\\t\\tmetadata: {\\n\\t\\t\\t\\tversion: 4.5,\\n\\t\\t\\t\\ttype: 'Texture',\\n\\t\\t\\t\\tgenerator: 'Texture.toJSON'\\n\\t\\t\\t},\\n\\n\\t\\t\\tuuid: this.uuid,\\n\\t\\t\\tname: this.name,\\n\\n\\t\\t\\tmapping: this.mapping,\\n\\n\\t\\t\\trepeat: [ this.repeat.x, this.repeat.y ],\\n\\t\\t\\toffset: [ this.offset.x, this.offset.y ],\\n\\t\\t\\tcenter: [ this.center.x, this.center.y ],\\n\\t\\t\\trotation: this.rotation,\\n\\n\\t\\t\\twrap: [ this.wrapS, this.wrapT ],\\n\\n\\t\\t\\tformat: this.format,\\n\\t\\t\\ttype: this.type,\\n\\t\\t\\tencoding: this.encoding,\\n\\n\\t\\t\\tminFilter: this.minFilter,\\n\\t\\t\\tmagFilter: this.magFilter,\\n\\t\\t\\tanisotropy: this.anisotropy,\\n\\n\\t\\t\\tflipY: this.flipY,\\n\\n\\t\\t\\tpremultiplyAlpha: this.premultiplyAlpha,\\n\\t\\t\\tunpackAlignment: this.unpackAlignment\\n\\n\\t\\t};\\n\\n\\t\\tif ( this.image !== undefined ) {\\n\\n\\t\\t\\t// TODO: Move to THREE.Image\\n\\n\\t\\t\\tvar image = this.image;\\n\\n\\t\\t\\tif ( image.uuid === undefined ) {\\n\\n\\t\\t\\t\\timage.uuid = _Math.generateUUID(); // UGH\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( ! isRootObject && meta.images[ image.uuid ] === undefined ) {\\n\\n\\t\\t\\t\\tvar url;\\n\\n\\t\\t\\t\\tif ( Array.isArray( image ) ) {\\n\\n\\t\\t\\t\\t\\t// process array of images e.g. CubeTexture\\n\\n\\t\\t\\t\\t\\turl = [];\\n\\n\\t\\t\\t\\t\\tfor ( var i = 0, l = image.length; i < l; i ++ ) {\\n\\n\\t\\t\\t\\t\\t\\turl.push( ImageUtils.getDataURL( image[ i ] ) );\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\t// process single image\\n\\n\\t\\t\\t\\t\\turl = ImageUtils.getDataURL( image );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tmeta.images[ image.uuid ] = {\\n\\t\\t\\t\\t\\tuuid: image.uuid,\\n\\t\\t\\t\\t\\turl: url\\n\\t\\t\\t\\t};\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\toutput.image = image.uuid;\\n\\n\\t\\t}\\n\\n\\t\\tif ( ! isRootObject ) {\\n\\n\\t\\t\\tmeta.textures[ this.uuid ] = output;\\n\\n\\t\\t}\\n\\n\\t\\treturn output;\\n\\n\\t},\\n\\n\\tdispose: function () {\\n\\n\\t\\tthis.dispatchEvent( { type: 'dispose' } );\\n\\n\\t},\\n\\n\\ttransformUv: function ( uv ) {\\n\\n\\t\\tif ( this.mapping !== UVMapping ) return uv;\\n\\n\\t\\tuv.applyMatrix3( this.matrix );\\n\\n\\t\\tif ( uv.x < 0 || uv.x > 1 ) {\\n\\n\\t\\t\\tswitch ( this.wrapS ) {\\n\\n\\t\\t\\t\\tcase RepeatWrapping:\\n\\n\\t\\t\\t\\t\\tuv.x = uv.x - Math.floor( uv.x );\\n\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\tcase ClampToEdgeWrapping:\\n\\n\\t\\t\\t\\t\\tuv.x = uv.x < 0 ? 0 : 1;\\n\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\tcase MirroredRepeatWrapping:\\n\\n\\t\\t\\t\\t\\tif ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\\n\\n\\t\\t\\t\\t\\t\\tuv.x = Math.ceil( uv.x ) - uv.x;\\n\\n\\t\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\t\\tuv.x = uv.x - Math.floor( uv.x );\\n\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tif ( uv.y < 0 || uv.y > 1 ) {\\n\\n\\t\\t\\tswitch ( this.wrapT ) {\\n\\n\\t\\t\\t\\tcase RepeatWrapping:\\n\\n\\t\\t\\t\\t\\tuv.y = uv.y - Math.floor( uv.y );\\n\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\tcase ClampToEdgeWrapping:\\n\\n\\t\\t\\t\\t\\tuv.y = uv.y < 0 ? 0 : 1;\\n\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\tcase MirroredRepeatWrapping:\\n\\n\\t\\t\\t\\t\\tif ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\\n\\n\\t\\t\\t\\t\\t\\tuv.y = Math.ceil( uv.y ) - uv.y;\\n\\n\\t\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\t\\tuv.y = uv.y - Math.floor( uv.y );\\n\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tif ( this.flipY ) {\\n\\n\\t\\t\\tuv.y = 1 - uv.y;\\n\\n\\t\\t}\\n\\n\\t\\treturn uv;\\n\\n\\t}\\n\\n} );\\n\\nObject.defineProperty( Texture.prototype, \\\"needsUpdate\\\", {\\n\\n\\tset: function ( value ) {\\n\\n\\t\\tif ( value === true ) this.version ++;\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author supereggbert / http://www.paulbrunt.co.uk/\\n * @author philogb / http://blog.thejit.org/\\n * @author mikael emtinger / http://gomo.se/\\n * @author egraether / http://egraether.com/\\n * @author WestLangley / http://github.com/WestLangley\\n */\\n\\nfunction Vector4( x, y, z, w ) {\\n\\n\\tthis.x = x || 0;\\n\\tthis.y = y || 0;\\n\\tthis.z = z || 0;\\n\\tthis.w = ( w !== undefined ) ? w : 1;\\n\\n}\\n\\nObject.assign( Vector4.prototype, {\\n\\n\\tisVector4: true,\\n\\n\\tset: function ( x, y, z, w ) {\\n\\n\\t\\tthis.x = x;\\n\\t\\tthis.y = y;\\n\\t\\tthis.z = z;\\n\\t\\tthis.w = w;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetScalar: function ( scalar ) {\\n\\n\\t\\tthis.x = scalar;\\n\\t\\tthis.y = scalar;\\n\\t\\tthis.z = scalar;\\n\\t\\tthis.w = scalar;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetX: function ( x ) {\\n\\n\\t\\tthis.x = x;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetY: function ( y ) {\\n\\n\\t\\tthis.y = y;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetZ: function ( z ) {\\n\\n\\t\\tthis.z = z;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetW: function ( w ) {\\n\\n\\t\\tthis.w = w;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetComponent: function ( index, value ) {\\n\\n\\t\\tswitch ( index ) {\\n\\n\\t\\t\\tcase 0: this.x = value; break;\\n\\t\\t\\tcase 1: this.y = value; break;\\n\\t\\t\\tcase 2: this.z = value; break;\\n\\t\\t\\tcase 3: this.w = value; break;\\n\\t\\t\\tdefault: throw new Error( 'index is out of range: ' + index );\\n\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tgetComponent: function ( index ) {\\n\\n\\t\\tswitch ( index ) {\\n\\n\\t\\t\\tcase 0: return this.x;\\n\\t\\t\\tcase 1: return this.y;\\n\\t\\t\\tcase 2: return this.z;\\n\\t\\t\\tcase 3: return this.w;\\n\\t\\t\\tdefault: throw new Error( 'index is out of range: ' + index );\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\tclone: function () {\\n\\n\\t\\treturn new this.constructor( this.x, this.y, this.z, this.w );\\n\\n\\t},\\n\\n\\tcopy: function ( v ) {\\n\\n\\t\\tthis.x = v.x;\\n\\t\\tthis.y = v.y;\\n\\t\\tthis.z = v.z;\\n\\t\\tthis.w = ( v.w !== undefined ) ? v.w : 1;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tadd: function ( v, w ) {\\n\\n\\t\\tif ( w !== undefined ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\\n\\t\\t\\treturn this.addVectors( v, w );\\n\\n\\t\\t}\\n\\n\\t\\tthis.x += v.x;\\n\\t\\tthis.y += v.y;\\n\\t\\tthis.z += v.z;\\n\\t\\tthis.w += v.w;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\taddScalar: function ( s ) {\\n\\n\\t\\tthis.x += s;\\n\\t\\tthis.y += s;\\n\\t\\tthis.z += s;\\n\\t\\tthis.w += s;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\taddVectors: function ( a, b ) {\\n\\n\\t\\tthis.x = a.x + b.x;\\n\\t\\tthis.y = a.y + b.y;\\n\\t\\tthis.z = a.z + b.z;\\n\\t\\tthis.w = a.w + b.w;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\taddScaledVector: function ( v, s ) {\\n\\n\\t\\tthis.x += v.x * s;\\n\\t\\tthis.y += v.y * s;\\n\\t\\tthis.z += v.z * s;\\n\\t\\tthis.w += v.w * s;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsub: function ( v, w ) {\\n\\n\\t\\tif ( w !== undefined ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\\n\\t\\t\\treturn this.subVectors( v, w );\\n\\n\\t\\t}\\n\\n\\t\\tthis.x -= v.x;\\n\\t\\tthis.y -= v.y;\\n\\t\\tthis.z -= v.z;\\n\\t\\tthis.w -= v.w;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsubScalar: function ( s ) {\\n\\n\\t\\tthis.x -= s;\\n\\t\\tthis.y -= s;\\n\\t\\tthis.z -= s;\\n\\t\\tthis.w -= s;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsubVectors: function ( a, b ) {\\n\\n\\t\\tthis.x = a.x - b.x;\\n\\t\\tthis.y = a.y - b.y;\\n\\t\\tthis.z = a.z - b.z;\\n\\t\\tthis.w = a.w - b.w;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tmultiplyScalar: function ( scalar ) {\\n\\n\\t\\tthis.x *= scalar;\\n\\t\\tthis.y *= scalar;\\n\\t\\tthis.z *= scalar;\\n\\t\\tthis.w *= scalar;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tapplyMatrix4: function ( m ) {\\n\\n\\t\\tvar x = this.x, y = this.y, z = this.z, w = this.w;\\n\\t\\tvar e = m.elements;\\n\\n\\t\\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\\n\\t\\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\\n\\t\\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\\n\\t\\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tdivideScalar: function ( scalar ) {\\n\\n\\t\\treturn this.multiplyScalar( 1 / scalar );\\n\\n\\t},\\n\\n\\tsetAxisAngleFromQuaternion: function ( q ) {\\n\\n\\t\\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\\n\\n\\t\\t// q is assumed to be normalized\\n\\n\\t\\tthis.w = 2 * Math.acos( q.w );\\n\\n\\t\\tvar s = Math.sqrt( 1 - q.w * q.w );\\n\\n\\t\\tif ( s < 0.0001 ) {\\n\\n\\t\\t\\tthis.x = 1;\\n\\t\\t\\tthis.y = 0;\\n\\t\\t\\tthis.z = 0;\\n\\n\\t\\t} else {\\n\\n\\t\\t\\tthis.x = q.x / s;\\n\\t\\t\\tthis.y = q.y / s;\\n\\t\\t\\tthis.z = q.z / s;\\n\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetAxisAngleFromRotationMatrix: function ( m ) {\\n\\n\\t\\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\\n\\n\\t\\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\\n\\n\\t\\tvar angle, x, y, z,\\t\\t// variables for result\\n\\t\\t\\tepsilon = 0.01,\\t\\t// margin to allow for rounding errors\\n\\t\\t\\tepsilon2 = 0.1,\\t\\t// margin to distinguish between 0 and 180 degrees\\n\\n\\t\\t\\tte = m.elements,\\n\\n\\t\\t\\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\\n\\t\\t\\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\\n\\t\\t\\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\\n\\n\\t\\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\\n\\t\\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\\n\\t\\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\\n\\n\\t\\t\\t// singularity found\\n\\t\\t\\t// first check for identity matrix which must have +1 for all terms\\n\\t\\t\\t// in leading diagonal and zero in other terms\\n\\n\\t\\t\\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\\n\\t\\t\\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\\n\\t\\t\\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\\n\\t\\t\\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\\n\\n\\t\\t\\t\\t// this singularity is identity matrix so angle = 0\\n\\n\\t\\t\\t\\tthis.set( 1, 0, 0, 0 );\\n\\n\\t\\t\\t\\treturn this; // zero angle, arbitrary axis\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\t// otherwise this singularity is angle = 180\\n\\n\\t\\t\\tangle = Math.PI;\\n\\n\\t\\t\\tvar xx = ( m11 + 1 ) / 2;\\n\\t\\t\\tvar yy = ( m22 + 1 ) / 2;\\n\\t\\t\\tvar zz = ( m33 + 1 ) / 2;\\n\\t\\t\\tvar xy = ( m12 + m21 ) / 4;\\n\\t\\t\\tvar xz = ( m13 + m31 ) / 4;\\n\\t\\t\\tvar yz = ( m23 + m32 ) / 4;\\n\\n\\t\\t\\tif ( ( xx > yy ) && ( xx > zz ) ) {\\n\\n\\t\\t\\t\\t// m11 is the largest diagonal term\\n\\n\\t\\t\\t\\tif ( xx < epsilon ) {\\n\\n\\t\\t\\t\\t\\tx = 0;\\n\\t\\t\\t\\t\\ty = 0.707106781;\\n\\t\\t\\t\\t\\tz = 0.707106781;\\n\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\tx = Math.sqrt( xx );\\n\\t\\t\\t\\t\\ty = xy / x;\\n\\t\\t\\t\\t\\tz = xz / x;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t} else if ( yy > zz ) {\\n\\n\\t\\t\\t\\t// m22 is the largest diagonal term\\n\\n\\t\\t\\t\\tif ( yy < epsilon ) {\\n\\n\\t\\t\\t\\t\\tx = 0.707106781;\\n\\t\\t\\t\\t\\ty = 0;\\n\\t\\t\\t\\t\\tz = 0.707106781;\\n\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\ty = Math.sqrt( yy );\\n\\t\\t\\t\\t\\tx = xy / y;\\n\\t\\t\\t\\t\\tz = yz / y;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t// m33 is the largest diagonal term so base result on this\\n\\n\\t\\t\\t\\tif ( zz < epsilon ) {\\n\\n\\t\\t\\t\\t\\tx = 0.707106781;\\n\\t\\t\\t\\t\\ty = 0.707106781;\\n\\t\\t\\t\\t\\tz = 0;\\n\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\tz = Math.sqrt( zz );\\n\\t\\t\\t\\t\\tx = xz / z;\\n\\t\\t\\t\\t\\ty = yz / z;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tthis.set( x, y, z, angle );\\n\\n\\t\\t\\treturn this; // return 180 deg rotation\\n\\n\\t\\t}\\n\\n\\t\\t// as we have reached here there are no singularities so we can handle normally\\n\\n\\t\\tvar s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\\n\\t\\t                   ( m13 - m31 ) * ( m13 - m31 ) +\\n\\t\\t                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\\n\\n\\t\\tif ( Math.abs( s ) < 0.001 ) s = 1;\\n\\n\\t\\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\\n\\t\\t// caught by singularity test above, but I've left it in just in case\\n\\n\\t\\tthis.x = ( m32 - m23 ) / s;\\n\\t\\tthis.y = ( m13 - m31 ) / s;\\n\\t\\tthis.z = ( m21 - m12 ) / s;\\n\\t\\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tmin: function ( v ) {\\n\\n\\t\\tthis.x = Math.min( this.x, v.x );\\n\\t\\tthis.y = Math.min( this.y, v.y );\\n\\t\\tthis.z = Math.min( this.z, v.z );\\n\\t\\tthis.w = Math.min( this.w, v.w );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tmax: function ( v ) {\\n\\n\\t\\tthis.x = Math.max( this.x, v.x );\\n\\t\\tthis.y = Math.max( this.y, v.y );\\n\\t\\tthis.z = Math.max( this.z, v.z );\\n\\t\\tthis.w = Math.max( this.w, v.w );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tclamp: function ( min, max ) {\\n\\n\\t\\t// assumes min < max, componentwise\\n\\n\\t\\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\\n\\t\\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\\n\\t\\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\\n\\t\\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tclampScalar: function () {\\n\\n\\t\\tvar min, max;\\n\\n\\t\\treturn function clampScalar( minVal, maxVal ) {\\n\\n\\t\\t\\tif ( min === undefined ) {\\n\\n\\t\\t\\t\\tmin = new Vector4();\\n\\t\\t\\t\\tmax = new Vector4();\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tmin.set( minVal, minVal, minVal, minVal );\\n\\t\\t\\tmax.set( maxVal, maxVal, maxVal, maxVal );\\n\\n\\t\\t\\treturn this.clamp( min, max );\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\tclampLength: function ( min, max ) {\\n\\n\\t\\tvar length = this.length();\\n\\n\\t\\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\\n\\n\\t},\\n\\n\\tfloor: function () {\\n\\n\\t\\tthis.x = Math.floor( this.x );\\n\\t\\tthis.y = Math.floor( this.y );\\n\\t\\tthis.z = Math.floor( this.z );\\n\\t\\tthis.w = Math.floor( this.w );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tceil: function () {\\n\\n\\t\\tthis.x = Math.ceil( this.x );\\n\\t\\tthis.y = Math.ceil( this.y );\\n\\t\\tthis.z = Math.ceil( this.z );\\n\\t\\tthis.w = Math.ceil( this.w );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tround: function () {\\n\\n\\t\\tthis.x = Math.round( this.x );\\n\\t\\tthis.y = Math.round( this.y );\\n\\t\\tthis.z = Math.round( this.z );\\n\\t\\tthis.w = Math.round( this.w );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\troundToZero: function () {\\n\\n\\t\\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\\n\\t\\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\\n\\t\\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\\n\\t\\tthis.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tnegate: function () {\\n\\n\\t\\tthis.x = - this.x;\\n\\t\\tthis.y = - this.y;\\n\\t\\tthis.z = - this.z;\\n\\t\\tthis.w = - this.w;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tdot: function ( v ) {\\n\\n\\t\\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\\n\\n\\t},\\n\\n\\tlengthSq: function () {\\n\\n\\t\\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\\n\\n\\t},\\n\\n\\tlength: function () {\\n\\n\\t\\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\\n\\n\\t},\\n\\n\\tmanhattanLength: function () {\\n\\n\\t\\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\\n\\n\\t},\\n\\n\\tnormalize: function () {\\n\\n\\t\\treturn this.divideScalar( this.length() || 1 );\\n\\n\\t},\\n\\n\\tsetLength: function ( length ) {\\n\\n\\t\\treturn this.normalize().multiplyScalar( length );\\n\\n\\t},\\n\\n\\tlerp: function ( v, alpha ) {\\n\\n\\t\\tthis.x += ( v.x - this.x ) * alpha;\\n\\t\\tthis.y += ( v.y - this.y ) * alpha;\\n\\t\\tthis.z += ( v.z - this.z ) * alpha;\\n\\t\\tthis.w += ( v.w - this.w ) * alpha;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tlerpVectors: function ( v1, v2, alpha ) {\\n\\n\\t\\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\\n\\n\\t},\\n\\n\\tequals: function ( v ) {\\n\\n\\t\\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\\n\\n\\t},\\n\\n\\tfromArray: function ( array, offset ) {\\n\\n\\t\\tif ( offset === undefined ) offset = 0;\\n\\n\\t\\tthis.x = array[ offset ];\\n\\t\\tthis.y = array[ offset + 1 ];\\n\\t\\tthis.z = array[ offset + 2 ];\\n\\t\\tthis.w = array[ offset + 3 ];\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\ttoArray: function ( array, offset ) {\\n\\n\\t\\tif ( array === undefined ) array = [];\\n\\t\\tif ( offset === undefined ) offset = 0;\\n\\n\\t\\tarray[ offset ] = this.x;\\n\\t\\tarray[ offset + 1 ] = this.y;\\n\\t\\tarray[ offset + 2 ] = this.z;\\n\\t\\tarray[ offset + 3 ] = this.w;\\n\\n\\t\\treturn array;\\n\\n\\t},\\n\\n\\tfromBufferAttribute: function ( attribute, index, offset ) {\\n\\n\\t\\tif ( offset !== undefined ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Vector4: offset has been removed from .fromBufferAttribute().' );\\n\\n\\t\\t}\\n\\n\\t\\tthis.x = attribute.getX( index );\\n\\t\\tthis.y = attribute.getY( index );\\n\\t\\tthis.z = attribute.getZ( index );\\n\\t\\tthis.w = attribute.getW( index );\\n\\n\\t\\treturn this;\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author szimek / https://github.com/szimek/\\n * @author alteredq / http://alteredqualia.com/\\n * @author Marius Kintel / https://github.com/kintel\\n */\\n\\n/*\\n In options, we can specify:\\n * Texture parameters for an auto-generated target texture\\n * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\\n*/\\nfunction WebGLRenderTarget( width, height, options ) {\\n\\n\\tthis.width = width;\\n\\tthis.height = height;\\n\\n\\tthis.scissor = new Vector4( 0, 0, width, height );\\n\\tthis.scissorTest = false;\\n\\n\\tthis.viewport = new Vector4( 0, 0, width, height );\\n\\n\\toptions = options || {};\\n\\n\\tthis.texture = new Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );\\n\\n\\tthis.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\\n\\tthis.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\\n\\n\\tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\\n\\tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;\\n\\tthis.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\\n\\n}\\n\\nWebGLRenderTarget.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\\n\\n\\tconstructor: WebGLRenderTarget,\\n\\n\\tisWebGLRenderTarget: true,\\n\\n\\tsetSize: function ( width, height ) {\\n\\n\\t\\tif ( this.width !== width || this.height !== height ) {\\n\\n\\t\\t\\tthis.width = width;\\n\\t\\t\\tthis.height = height;\\n\\n\\t\\t\\tthis.dispose();\\n\\n\\t\\t}\\n\\n\\t\\tthis.viewport.set( 0, 0, width, height );\\n\\t\\tthis.scissor.set( 0, 0, width, height );\\n\\n\\t},\\n\\n\\tclone: function () {\\n\\n\\t\\treturn new this.constructor().copy( this );\\n\\n\\t},\\n\\n\\tcopy: function ( source ) {\\n\\n\\t\\tthis.width = source.width;\\n\\t\\tthis.height = source.height;\\n\\n\\t\\tthis.viewport.copy( source.viewport );\\n\\n\\t\\tthis.texture = source.texture.clone();\\n\\n\\t\\tthis.depthBuffer = source.depthBuffer;\\n\\t\\tthis.stencilBuffer = source.stencilBuffer;\\n\\t\\tthis.depthTexture = source.depthTexture;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tdispose: function () {\\n\\n\\t\\tthis.dispatchEvent( { type: 'dispose' } );\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author Mugen87 / https://github.com/Mugen87\\n * @author Matt DesLauriers / @mattdesl\\n */\\n\\nfunction WebGLMultisampleRenderTarget( width, height, options ) {\\n\\n\\tWebGLRenderTarget.call( this, width, height, options );\\n\\n\\tthis.samples = 4;\\n\\n}\\n\\nWebGLMultisampleRenderTarget.prototype = Object.assign( Object.create( WebGLRenderTarget.prototype ), {\\n\\n\\tconstructor: WebGLMultisampleRenderTarget,\\n\\n\\tisWebGLMultisampleRenderTarget: true,\\n\\n\\tcopy: function ( source ) {\\n\\n\\t\\tWebGLRenderTarget.prototype.copy.call( this, source );\\n\\n\\t\\tthis.samples = source.samples;\\n\\n\\t\\treturn this;\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author alteredq / http://alteredqualia.com\\n */\\n\\nfunction WebGLRenderTargetCube( width, height, options ) {\\n\\n\\tWebGLRenderTarget.call( this, width, height, options );\\n\\n\\tthis.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5\\n\\tthis.activeMipMapLevel = 0;\\n\\n}\\n\\nWebGLRenderTargetCube.prototype = Object.create( WebGLRenderTarget.prototype );\\nWebGLRenderTargetCube.prototype.constructor = WebGLRenderTargetCube;\\n\\nWebGLRenderTargetCube.prototype.isWebGLRenderTargetCube = true;\\n\\n/**\\n * @author alteredq / http://alteredqualia.com/\\n */\\n\\nfunction DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\\n\\n\\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\\n\\n\\tthis.image = { data: data, width: width, height: height };\\n\\n\\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\\n\\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\\n\\n\\tthis.generateMipmaps = false;\\n\\tthis.flipY = false;\\n\\tthis.unpackAlignment = 1;\\n\\n}\\n\\nDataTexture.prototype = Object.create( Texture.prototype );\\nDataTexture.prototype.constructor = DataTexture;\\n\\nDataTexture.prototype.isDataTexture = true;\\n\\n/**\\n * @author bhouston / http://clara.io\\n * @author WestLangley / http://github.com/WestLangley\\n */\\n\\nfunction Box3( min, max ) {\\n\\n\\tthis.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );\\n\\tthis.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );\\n\\n}\\n\\nObject.assign( Box3.prototype, {\\n\\n\\tisBox3: true,\\n\\n\\tset: function ( min, max ) {\\n\\n\\t\\tthis.min.copy( min );\\n\\t\\tthis.max.copy( max );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetFromArray: function ( array ) {\\n\\n\\t\\tvar minX = + Infinity;\\n\\t\\tvar minY = + Infinity;\\n\\t\\tvar minZ = + Infinity;\\n\\n\\t\\tvar maxX = - Infinity;\\n\\t\\tvar maxY = - Infinity;\\n\\t\\tvar maxZ = - Infinity;\\n\\n\\t\\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\\n\\n\\t\\t\\tvar x = array[ i ];\\n\\t\\t\\tvar y = array[ i + 1 ];\\n\\t\\t\\tvar z = array[ i + 2 ];\\n\\n\\t\\t\\tif ( x < minX ) minX = x;\\n\\t\\t\\tif ( y < minY ) minY = y;\\n\\t\\t\\tif ( z < minZ ) minZ = z;\\n\\n\\t\\t\\tif ( x > maxX ) maxX = x;\\n\\t\\t\\tif ( y > maxY ) maxY = y;\\n\\t\\t\\tif ( z > maxZ ) maxZ = z;\\n\\n\\t\\t}\\n\\n\\t\\tthis.min.set( minX, minY, minZ );\\n\\t\\tthis.max.set( maxX, maxY, maxZ );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetFromBufferAttribute: function ( attribute ) {\\n\\n\\t\\tvar minX = + Infinity;\\n\\t\\tvar minY = + Infinity;\\n\\t\\tvar minZ = + Infinity;\\n\\n\\t\\tvar maxX = - Infinity;\\n\\t\\tvar maxY = - Infinity;\\n\\t\\tvar maxZ = - Infinity;\\n\\n\\t\\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\\n\\n\\t\\t\\tvar x = attribute.getX( i );\\n\\t\\t\\tvar y = attribute.getY( i );\\n\\t\\t\\tvar z = attribute.getZ( i );\\n\\n\\t\\t\\tif ( x < minX ) minX = x;\\n\\t\\t\\tif ( y < minY ) minY = y;\\n\\t\\t\\tif ( z < minZ ) minZ = z;\\n\\n\\t\\t\\tif ( x > maxX ) maxX = x;\\n\\t\\t\\tif ( y > maxY ) maxY = y;\\n\\t\\t\\tif ( z > maxZ ) maxZ = z;\\n\\n\\t\\t}\\n\\n\\t\\tthis.min.set( minX, minY, minZ );\\n\\t\\tthis.max.set( maxX, maxY, maxZ );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetFromPoints: function ( points ) {\\n\\n\\t\\tthis.makeEmpty();\\n\\n\\t\\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\\n\\n\\t\\t\\tthis.expandByPoint( points[ i ] );\\n\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetFromCenterAndSize: function () {\\n\\n\\t\\tvar v1 = new Vector3();\\n\\n\\t\\treturn function setFromCenterAndSize( center, size ) {\\n\\n\\t\\t\\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\\n\\n\\t\\t\\tthis.min.copy( center ).sub( halfSize );\\n\\t\\t\\tthis.max.copy( center ).add( halfSize );\\n\\n\\t\\t\\treturn this;\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\tsetFromObject: function ( object ) {\\n\\n\\t\\tthis.makeEmpty();\\n\\n\\t\\treturn this.expandByObject( object );\\n\\n\\t},\\n\\n\\tclone: function () {\\n\\n\\t\\treturn new this.constructor().copy( this );\\n\\n\\t},\\n\\n\\tcopy: function ( box ) {\\n\\n\\t\\tthis.min.copy( box.min );\\n\\t\\tthis.max.copy( box.max );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tmakeEmpty: function () {\\n\\n\\t\\tthis.min.x = this.min.y = this.min.z = + Infinity;\\n\\t\\tthis.max.x = this.max.y = this.max.z = - Infinity;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tisEmpty: function () {\\n\\n\\t\\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\\n\\n\\t\\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\\n\\n\\t},\\n\\n\\tgetCenter: function ( target ) {\\n\\n\\t\\tif ( target === undefined ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Box3: .getCenter() target is now required' );\\n\\t\\t\\ttarget = new Vector3();\\n\\n\\t\\t}\\n\\n\\t\\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\\n\\n\\t},\\n\\n\\tgetSize: function ( target ) {\\n\\n\\t\\tif ( target === undefined ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Box3: .getSize() target is now required' );\\n\\t\\t\\ttarget = new Vector3();\\n\\n\\t\\t}\\n\\n\\t\\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );\\n\\n\\t},\\n\\n\\texpandByPoint: function ( point ) {\\n\\n\\t\\tthis.min.min( point );\\n\\t\\tthis.max.max( point );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\texpandByVector: function ( vector ) {\\n\\n\\t\\tthis.min.sub( vector );\\n\\t\\tthis.max.add( vector );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\texpandByScalar: function ( scalar ) {\\n\\n\\t\\tthis.min.addScalar( - scalar );\\n\\t\\tthis.max.addScalar( scalar );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\texpandByObject: function () {\\n\\n\\t\\t// Computes the world-axis-aligned bounding box of an object (including its children),\\n\\t\\t// accounting for both the object's, and children's, world transforms\\n\\n\\t\\tvar scope, i, l;\\n\\n\\t\\tvar v1 = new Vector3();\\n\\n\\t\\tfunction traverse( node ) {\\n\\n\\t\\t\\tvar geometry = node.geometry;\\n\\n\\t\\t\\tif ( geometry !== undefined ) {\\n\\n\\t\\t\\t\\tif ( geometry.isGeometry ) {\\n\\n\\t\\t\\t\\t\\tvar vertices = geometry.vertices;\\n\\n\\t\\t\\t\\t\\tfor ( i = 0, l = vertices.length; i < l; i ++ ) {\\n\\n\\t\\t\\t\\t\\t\\tv1.copy( vertices[ i ] );\\n\\t\\t\\t\\t\\t\\tv1.applyMatrix4( node.matrixWorld );\\n\\n\\t\\t\\t\\t\\t\\tscope.expandByPoint( v1 );\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t} else if ( geometry.isBufferGeometry ) {\\n\\n\\t\\t\\t\\t\\tvar attribute = geometry.attributes.position;\\n\\n\\t\\t\\t\\t\\tif ( attribute !== undefined ) {\\n\\n\\t\\t\\t\\t\\t\\tfor ( i = 0, l = attribute.count; i < l; i ++ ) {\\n\\n\\t\\t\\t\\t\\t\\t\\tv1.fromBufferAttribute( attribute, i ).applyMatrix4( node.matrixWorld );\\n\\n\\t\\t\\t\\t\\t\\t\\tscope.expandByPoint( v1 );\\n\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\treturn function expandByObject( object ) {\\n\\n\\t\\t\\tscope = this;\\n\\n\\t\\t\\tobject.updateMatrixWorld( true );\\n\\n\\t\\t\\tobject.traverse( traverse );\\n\\n\\t\\t\\treturn this;\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\tcontainsPoint: function ( point ) {\\n\\n\\t\\treturn point.x < this.min.x || point.x > this.max.x ||\\n\\t\\t\\tpoint.y < this.min.y || point.y > this.max.y ||\\n\\t\\t\\tpoint.z < this.min.z || point.z > this.max.z ? false : true;\\n\\n\\t},\\n\\n\\tcontainsBox: function ( box ) {\\n\\n\\t\\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\\n\\t\\t\\tthis.min.y <= box.min.y && box.max.y <= this.max.y &&\\n\\t\\t\\tthis.min.z <= box.min.z && box.max.z <= this.max.z;\\n\\n\\t},\\n\\n\\tgetParameter: function ( point, target ) {\\n\\n\\t\\t// This can potentially have a divide by zero if the box\\n\\t\\t// has a size dimension of 0.\\n\\n\\t\\tif ( target === undefined ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Box3: .getParameter() target is now required' );\\n\\t\\t\\ttarget = new Vector3();\\n\\n\\t\\t}\\n\\n\\t\\treturn target.set(\\n\\t\\t\\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\\n\\t\\t\\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\\n\\t\\t\\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\\n\\t\\t);\\n\\n\\t},\\n\\n\\tintersectsBox: function ( box ) {\\n\\n\\t\\t// using 6 splitting planes to rule out intersections.\\n\\t\\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\\n\\t\\t\\tbox.max.y < this.min.y || box.min.y > this.max.y ||\\n\\t\\t\\tbox.max.z < this.min.z || box.min.z > this.max.z ? false : true;\\n\\n\\t},\\n\\n\\tintersectsSphere: ( function () {\\n\\n\\t\\tvar closestPoint = new Vector3();\\n\\n\\t\\treturn function intersectsSphere( sphere ) {\\n\\n\\t\\t\\t// Find the point on the AABB closest to the sphere center.\\n\\t\\t\\tthis.clampPoint( sphere.center, closestPoint );\\n\\n\\t\\t\\t// If that point is inside the sphere, the AABB and sphere intersect.\\n\\t\\t\\treturn closestPoint.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\\n\\n\\t\\t};\\n\\n\\t} )(),\\n\\n\\tintersectsPlane: function ( plane ) {\\n\\n\\t\\t// We compute the minimum and maximum dot product values. If those values\\n\\t\\t// are on the same side (back or front) of the plane, then there is no intersection.\\n\\n\\t\\tvar min, max;\\n\\n\\t\\tif ( plane.normal.x > 0 ) {\\n\\n\\t\\t\\tmin = plane.normal.x * this.min.x;\\n\\t\\t\\tmax = plane.normal.x * this.max.x;\\n\\n\\t\\t} else {\\n\\n\\t\\t\\tmin = plane.normal.x * this.max.x;\\n\\t\\t\\tmax = plane.normal.x * this.min.x;\\n\\n\\t\\t}\\n\\n\\t\\tif ( plane.normal.y > 0 ) {\\n\\n\\t\\t\\tmin += plane.normal.y * this.min.y;\\n\\t\\t\\tmax += plane.normal.y * this.max.y;\\n\\n\\t\\t} else {\\n\\n\\t\\t\\tmin += plane.normal.y * this.max.y;\\n\\t\\t\\tmax += plane.normal.y * this.min.y;\\n\\n\\t\\t}\\n\\n\\t\\tif ( plane.normal.z > 0 ) {\\n\\n\\t\\t\\tmin += plane.normal.z * this.min.z;\\n\\t\\t\\tmax += plane.normal.z * this.max.z;\\n\\n\\t\\t} else {\\n\\n\\t\\t\\tmin += plane.normal.z * this.max.z;\\n\\t\\t\\tmax += plane.normal.z * this.min.z;\\n\\n\\t\\t}\\n\\n\\t\\treturn ( min <= - plane.constant && max >= - plane.constant );\\n\\n\\t},\\n\\n\\tintersectsTriangle: ( function () {\\n\\n\\t\\t// triangle centered vertices\\n\\t\\tvar v0 = new Vector3();\\n\\t\\tvar v1 = new Vector3();\\n\\t\\tvar v2 = new Vector3();\\n\\n\\t\\t// triangle edge vectors\\n\\t\\tvar f0 = new Vector3();\\n\\t\\tvar f1 = new Vector3();\\n\\t\\tvar f2 = new Vector3();\\n\\n\\t\\tvar testAxis = new Vector3();\\n\\n\\t\\tvar center = new Vector3();\\n\\t\\tvar extents = new Vector3();\\n\\n\\t\\tvar triangleNormal = new Vector3();\\n\\n\\t\\tfunction satForAxes( axes ) {\\n\\n\\t\\t\\tvar i, j;\\n\\n\\t\\t\\tfor ( i = 0, j = axes.length - 3; i <= j; i += 3 ) {\\n\\n\\t\\t\\t\\ttestAxis.fromArray( axes, i );\\n\\t\\t\\t\\t// project the aabb onto the seperating axis\\n\\t\\t\\t\\tvar r = extents.x * Math.abs( testAxis.x ) + extents.y * Math.abs( testAxis.y ) + extents.z * Math.abs( testAxis.z );\\n\\t\\t\\t\\t// project all 3 vertices of the triangle onto the seperating axis\\n\\t\\t\\t\\tvar p0 = v0.dot( testAxis );\\n\\t\\t\\t\\tvar p1 = v1.dot( testAxis );\\n\\t\\t\\t\\tvar p2 = v2.dot( testAxis );\\n\\t\\t\\t\\t// actual test, basically see if either of the most extreme of the triangle points intersects r\\n\\t\\t\\t\\tif ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {\\n\\n\\t\\t\\t\\t\\t// points of the projected triangle are outside the projected half-length of the aabb\\n\\t\\t\\t\\t\\t// the axis is seperating and we can exit\\n\\t\\t\\t\\t\\treturn false;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn true;\\n\\n\\t\\t}\\n\\n\\t\\treturn function intersectsTriangle( triangle ) {\\n\\n\\t\\t\\tif ( this.isEmpty() ) {\\n\\n\\t\\t\\t\\treturn false;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\t// compute box center and extents\\n\\t\\t\\tthis.getCenter( center );\\n\\t\\t\\textents.subVectors( this.max, center );\\n\\n\\t\\t\\t// translate triangle to aabb origin\\n\\t\\t\\tv0.subVectors( triangle.a, center );\\n\\t\\t\\tv1.subVectors( triangle.b, center );\\n\\t\\t\\tv2.subVectors( triangle.c, center );\\n\\n\\t\\t\\t// compute edge vectors for triangle\\n\\t\\t\\tf0.subVectors( v1, v0 );\\n\\t\\t\\tf1.subVectors( v2, v1 );\\n\\t\\t\\tf2.subVectors( v0, v2 );\\n\\n\\t\\t\\t// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\\n\\t\\t\\t// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\\n\\t\\t\\t// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\\n\\t\\t\\tvar axes = [\\n\\t\\t\\t\\t0, - f0.z, f0.y, 0, - f1.z, f1.y, 0, - f2.z, f2.y,\\n\\t\\t\\t\\tf0.z, 0, - f0.x, f1.z, 0, - f1.x, f2.z, 0, - f2.x,\\n\\t\\t\\t\\t- f0.y, f0.x, 0, - f1.y, f1.x, 0, - f2.y, f2.x, 0\\n\\t\\t\\t];\\n\\t\\t\\tif ( ! satForAxes( axes ) ) {\\n\\n\\t\\t\\t\\treturn false;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\t// test 3 face normals from the aabb\\n\\t\\t\\taxes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];\\n\\t\\t\\tif ( ! satForAxes( axes ) ) {\\n\\n\\t\\t\\t\\treturn false;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\t// finally testing the face normal of the triangle\\n\\t\\t\\t// use already existing triangle edge vectors here\\n\\t\\t\\ttriangleNormal.crossVectors( f0, f1 );\\n\\t\\t\\taxes = [ triangleNormal.x, triangleNormal.y, triangleNormal.z ];\\n\\t\\t\\treturn satForAxes( axes );\\n\\n\\t\\t};\\n\\n\\t} )(),\\n\\n\\tclampPoint: function ( point, target ) {\\n\\n\\t\\tif ( target === undefined ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Box3: .clampPoint() target is now required' );\\n\\t\\t\\ttarget = new Vector3();\\n\\n\\t\\t}\\n\\n\\t\\treturn target.copy( point ).clamp( this.min, this.max );\\n\\n\\t},\\n\\n\\tdistanceToPoint: function () {\\n\\n\\t\\tvar v1 = new Vector3();\\n\\n\\t\\treturn function distanceToPoint( point ) {\\n\\n\\t\\t\\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\\n\\t\\t\\treturn clampedPoint.sub( point ).length();\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\tgetBoundingSphere: function () {\\n\\n\\t\\tvar v1 = new Vector3();\\n\\n\\t\\treturn function getBoundingSphere( target ) {\\n\\n\\t\\t\\tif ( target === undefined ) {\\n\\n\\t\\t\\t\\tconsole.warn( 'THREE.Box3: .getBoundingSphere() target is now required' );\\n\\t\\t\\t\\ttarget = new Sphere();\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tthis.getCenter( target.center );\\n\\n\\t\\t\\ttarget.radius = this.getSize( v1 ).length() * 0.5;\\n\\n\\t\\t\\treturn target;\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\tintersect: function ( box ) {\\n\\n\\t\\tthis.min.max( box.min );\\n\\t\\tthis.max.min( box.max );\\n\\n\\t\\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\\n\\t\\tif ( this.isEmpty() ) this.makeEmpty();\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tunion: function ( box ) {\\n\\n\\t\\tthis.min.min( box.min );\\n\\t\\tthis.max.max( box.max );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tapplyMatrix4: function () {\\n\\n\\t\\tvar points = [\\n\\t\\t\\tnew Vector3(),\\n\\t\\t\\tnew Vector3(),\\n\\t\\t\\tnew Vector3(),\\n\\t\\t\\tnew Vector3(),\\n\\t\\t\\tnew Vector3(),\\n\\t\\t\\tnew Vector3(),\\n\\t\\t\\tnew Vector3(),\\n\\t\\t\\tnew Vector3()\\n\\t\\t];\\n\\n\\t\\treturn function applyMatrix4( matrix ) {\\n\\n\\t\\t\\t// transform of empty box is an empty box.\\n\\t\\t\\tif ( this.isEmpty() ) return this;\\n\\n\\t\\t\\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\\n\\t\\t\\tpoints[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\\n\\t\\t\\tpoints[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\\n\\t\\t\\tpoints[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\\n\\t\\t\\tpoints[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\\n\\t\\t\\tpoints[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\\n\\t\\t\\tpoints[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\\n\\t\\t\\tpoints[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\\n\\t\\t\\tpoints[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 111\\n\\n\\t\\t\\tthis.setFromPoints( points );\\n\\n\\t\\t\\treturn this;\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\ttranslate: function ( offset ) {\\n\\n\\t\\tthis.min.add( offset );\\n\\t\\tthis.max.add( offset );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tequals: function ( box ) {\\n\\n\\t\\treturn box.min.equals( this.min ) && box.max.equals( this.max );\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author bhouston / http://clara.io\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\nfunction Sphere( center, radius ) {\\n\\n\\tthis.center = ( center !== undefined ) ? center : new Vector3();\\n\\tthis.radius = ( radius !== undefined ) ? radius : 0;\\n\\n}\\n\\nObject.assign( Sphere.prototype, {\\n\\n\\tset: function ( center, radius ) {\\n\\n\\t\\tthis.center.copy( center );\\n\\t\\tthis.radius = radius;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetFromPoints: function () {\\n\\n\\t\\tvar box = new Box3();\\n\\n\\t\\treturn function setFromPoints( points, optionalCenter ) {\\n\\n\\t\\t\\tvar center = this.center;\\n\\n\\t\\t\\tif ( optionalCenter !== undefined ) {\\n\\n\\t\\t\\t\\tcenter.copy( optionalCenter );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tbox.setFromPoints( points ).getCenter( center );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tvar maxRadiusSq = 0;\\n\\n\\t\\t\\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\\n\\n\\t\\t\\t\\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tthis.radius = Math.sqrt( maxRadiusSq );\\n\\n\\t\\t\\treturn this;\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\tclone: function () {\\n\\n\\t\\treturn new this.constructor().copy( this );\\n\\n\\t},\\n\\n\\tcopy: function ( sphere ) {\\n\\n\\t\\tthis.center.copy( sphere.center );\\n\\t\\tthis.radius = sphere.radius;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tempty: function () {\\n\\n\\t\\treturn ( this.radius <= 0 );\\n\\n\\t},\\n\\n\\tcontainsPoint: function ( point ) {\\n\\n\\t\\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\\n\\n\\t},\\n\\n\\tdistanceToPoint: function ( point ) {\\n\\n\\t\\treturn ( point.distanceTo( this.center ) - this.radius );\\n\\n\\t},\\n\\n\\tintersectsSphere: function ( sphere ) {\\n\\n\\t\\tvar radiusSum = this.radius + sphere.radius;\\n\\n\\t\\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\\n\\n\\t},\\n\\n\\tintersectsBox: function ( box ) {\\n\\n\\t\\treturn box.intersectsSphere( this );\\n\\n\\t},\\n\\n\\tintersectsPlane: function ( plane ) {\\n\\n\\t\\treturn Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;\\n\\n\\t},\\n\\n\\tclampPoint: function ( point, target ) {\\n\\n\\t\\tvar deltaLengthSq = this.center.distanceToSquared( point );\\n\\n\\t\\tif ( target === undefined ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Sphere: .clampPoint() target is now required' );\\n\\t\\t\\ttarget = new Vector3();\\n\\n\\t\\t}\\n\\n\\t\\ttarget.copy( point );\\n\\n\\t\\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\\n\\n\\t\\t\\ttarget.sub( this.center ).normalize();\\n\\t\\t\\ttarget.multiplyScalar( this.radius ).add( this.center );\\n\\n\\t\\t}\\n\\n\\t\\treturn target;\\n\\n\\t},\\n\\n\\tgetBoundingBox: function ( target ) {\\n\\n\\t\\tif ( target === undefined ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Sphere: .getBoundingBox() target is now required' );\\n\\t\\t\\ttarget = new Box3();\\n\\n\\t\\t}\\n\\n\\t\\ttarget.set( this.center, this.center );\\n\\t\\ttarget.expandByScalar( this.radius );\\n\\n\\t\\treturn target;\\n\\n\\t},\\n\\n\\tapplyMatrix4: function ( matrix ) {\\n\\n\\t\\tthis.center.applyMatrix4( matrix );\\n\\t\\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\ttranslate: function ( offset ) {\\n\\n\\t\\tthis.center.add( offset );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tequals: function ( sphere ) {\\n\\n\\t\\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author bhouston / http://clara.io\\n */\\n\\nfunction Plane( normal, constant ) {\\n\\n\\t// normal is assumed to be normalized\\n\\n\\tthis.normal = ( normal !== undefined ) ? normal : new Vector3( 1, 0, 0 );\\n\\tthis.constant = ( constant !== undefined ) ? constant : 0;\\n\\n}\\n\\nObject.assign( Plane.prototype, {\\n\\n\\tset: function ( normal, constant ) {\\n\\n\\t\\tthis.normal.copy( normal );\\n\\t\\tthis.constant = constant;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetComponents: function ( x, y, z, w ) {\\n\\n\\t\\tthis.normal.set( x, y, z );\\n\\t\\tthis.constant = w;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetFromNormalAndCoplanarPoint: function ( normal, point ) {\\n\\n\\t\\tthis.normal.copy( normal );\\n\\t\\tthis.constant = - point.dot( this.normal );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetFromCoplanarPoints: function () {\\n\\n\\t\\tvar v1 = new Vector3();\\n\\t\\tvar v2 = new Vector3();\\n\\n\\t\\treturn function setFromCoplanarPoints( a, b, c ) {\\n\\n\\t\\t\\tvar normal = v1.subVectors( c, b ).cross( v2.subVectors( a, b ) ).normalize();\\n\\n\\t\\t\\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\\n\\n\\t\\t\\tthis.setFromNormalAndCoplanarPoint( normal, a );\\n\\n\\t\\t\\treturn this;\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\tclone: function () {\\n\\n\\t\\treturn new this.constructor().copy( this );\\n\\n\\t},\\n\\n\\tcopy: function ( plane ) {\\n\\n\\t\\tthis.normal.copy( plane.normal );\\n\\t\\tthis.constant = plane.constant;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tnormalize: function () {\\n\\n\\t\\t// Note: will lead to a divide by zero if the plane is invalid.\\n\\n\\t\\tvar inverseNormalLength = 1.0 / this.normal.length();\\n\\t\\tthis.normal.multiplyScalar( inverseNormalLength );\\n\\t\\tthis.constant *= inverseNormalLength;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tnegate: function () {\\n\\n\\t\\tthis.constant *= - 1;\\n\\t\\tthis.normal.negate();\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tdistanceToPoint: function ( point ) {\\n\\n\\t\\treturn this.normal.dot( point ) + this.constant;\\n\\n\\t},\\n\\n\\tdistanceToSphere: function ( sphere ) {\\n\\n\\t\\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\\n\\n\\t},\\n\\n\\tprojectPoint: function ( point, target ) {\\n\\n\\t\\tif ( target === undefined ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Plane: .projectPoint() target is now required' );\\n\\t\\t\\ttarget = new Vector3();\\n\\n\\t\\t}\\n\\n\\t\\treturn target.copy( this.normal ).multiplyScalar( - this.distanceToPoint( point ) ).add( point );\\n\\n\\t},\\n\\n\\tintersectLine: function () {\\n\\n\\t\\tvar v1 = new Vector3();\\n\\n\\t\\treturn function intersectLine( line, target ) {\\n\\n\\t\\t\\tif ( target === undefined ) {\\n\\n\\t\\t\\t\\tconsole.warn( 'THREE.Plane: .intersectLine() target is now required' );\\n\\t\\t\\t\\ttarget = new Vector3();\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tvar direction = line.delta( v1 );\\n\\n\\t\\t\\tvar denominator = this.normal.dot( direction );\\n\\n\\t\\t\\tif ( denominator === 0 ) {\\n\\n\\t\\t\\t\\t// line is coplanar, return origin\\n\\t\\t\\t\\tif ( this.distanceToPoint( line.start ) === 0 ) {\\n\\n\\t\\t\\t\\t\\treturn target.copy( line.start );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Unsure if this is the correct method to handle this case.\\n\\t\\t\\t\\treturn undefined;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tvar t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\\n\\n\\t\\t\\tif ( t < 0 || t > 1 ) {\\n\\n\\t\\t\\t\\treturn undefined;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn target.copy( direction ).multiplyScalar( t ).add( line.start );\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\tintersectsLine: function ( line ) {\\n\\n\\t\\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\\n\\n\\t\\tvar startSign = this.distanceToPoint( line.start );\\n\\t\\tvar endSign = this.distanceToPoint( line.end );\\n\\n\\t\\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\\n\\n\\t},\\n\\n\\tintersectsBox: function ( box ) {\\n\\n\\t\\treturn box.intersectsPlane( this );\\n\\n\\t},\\n\\n\\tintersectsSphere: function ( sphere ) {\\n\\n\\t\\treturn sphere.intersectsPlane( this );\\n\\n\\t},\\n\\n\\tcoplanarPoint: function ( target ) {\\n\\n\\t\\tif ( target === undefined ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Plane: .coplanarPoint() target is now required' );\\n\\t\\t\\ttarget = new Vector3();\\n\\n\\t\\t}\\n\\n\\t\\treturn target.copy( this.normal ).multiplyScalar( - this.constant );\\n\\n\\t},\\n\\n\\tapplyMatrix4: function () {\\n\\n\\t\\tvar v1 = new Vector3();\\n\\t\\tvar m1 = new Matrix3();\\n\\n\\t\\treturn function applyMatrix4( matrix, optionalNormalMatrix ) {\\n\\n\\t\\t\\tvar normalMatrix = optionalNormalMatrix || m1.getNormalMatrix( matrix );\\n\\n\\t\\t\\tvar referencePoint = this.coplanarPoint( v1 ).applyMatrix4( matrix );\\n\\n\\t\\t\\tvar normal = this.normal.applyMatrix3( normalMatrix ).normalize();\\n\\n\\t\\t\\tthis.constant = - referencePoint.dot( normal );\\n\\n\\t\\t\\treturn this;\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\ttranslate: function ( offset ) {\\n\\n\\t\\tthis.constant -= offset.dot( this.normal );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tequals: function ( plane ) {\\n\\n\\t\\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n * @author alteredq / http://alteredqualia.com/\\n * @author bhouston / http://clara.io\\n */\\n\\nfunction Frustum( p0, p1, p2, p3, p4, p5 ) {\\n\\n\\tthis.planes = [\\n\\n\\t\\t( p0 !== undefined ) ? p0 : new Plane(),\\n\\t\\t( p1 !== undefined ) ? p1 : new Plane(),\\n\\t\\t( p2 !== undefined ) ? p2 : new Plane(),\\n\\t\\t( p3 !== undefined ) ? p3 : new Plane(),\\n\\t\\t( p4 !== undefined ) ? p4 : new Plane(),\\n\\t\\t( p5 !== undefined ) ? p5 : new Plane()\\n\\n\\t];\\n\\n}\\n\\nObject.assign( Frustum.prototype, {\\n\\n\\tset: function ( p0, p1, p2, p3, p4, p5 ) {\\n\\n\\t\\tvar planes = this.planes;\\n\\n\\t\\tplanes[ 0 ].copy( p0 );\\n\\t\\tplanes[ 1 ].copy( p1 );\\n\\t\\tplanes[ 2 ].copy( p2 );\\n\\t\\tplanes[ 3 ].copy( p3 );\\n\\t\\tplanes[ 4 ].copy( p4 );\\n\\t\\tplanes[ 5 ].copy( p5 );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tclone: function () {\\n\\n\\t\\treturn new this.constructor().copy( this );\\n\\n\\t},\\n\\n\\tcopy: function ( frustum ) {\\n\\n\\t\\tvar planes = this.planes;\\n\\n\\t\\tfor ( var i = 0; i < 6; i ++ ) {\\n\\n\\t\\t\\tplanes[ i ].copy( frustum.planes[ i ] );\\n\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetFromMatrix: function ( m ) {\\n\\n\\t\\tvar planes = this.planes;\\n\\t\\tvar me = m.elements;\\n\\t\\tvar me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\\n\\t\\tvar me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\\n\\t\\tvar me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\\n\\t\\tvar me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\\n\\n\\t\\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\\n\\t\\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\\n\\t\\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\\n\\t\\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\\n\\t\\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\\n\\t\\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tintersectsObject: function () {\\n\\n\\t\\tvar sphere = new Sphere();\\n\\n\\t\\treturn function intersectsObject( object ) {\\n\\n\\t\\t\\tvar geometry = object.geometry;\\n\\n\\t\\t\\tif ( geometry.boundingSphere === null )\\n\\t\\t\\t\\tgeometry.computeBoundingSphere();\\n\\n\\t\\t\\tsphere.copy( geometry.boundingSphere )\\n\\t\\t\\t\\t.applyMatrix4( object.matrixWorld );\\n\\n\\t\\t\\treturn this.intersectsSphere( sphere );\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\tintersectsSprite: function () {\\n\\n\\t\\tvar sphere = new Sphere();\\n\\n\\t\\treturn function intersectsSprite( sprite ) {\\n\\n\\t\\t\\tsphere.center.set( 0, 0, 0 );\\n\\t\\t\\tsphere.radius = 0.7071067811865476;\\n\\t\\t\\tsphere.applyMatrix4( sprite.matrixWorld );\\n\\n\\t\\t\\treturn this.intersectsSphere( sphere );\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\tintersectsSphere: function ( sphere ) {\\n\\n\\t\\tvar planes = this.planes;\\n\\t\\tvar center = sphere.center;\\n\\t\\tvar negRadius = - sphere.radius;\\n\\n\\t\\tfor ( var i = 0; i < 6; i ++ ) {\\n\\n\\t\\t\\tvar distance = planes[ i ].distanceToPoint( center );\\n\\n\\t\\t\\tif ( distance < negRadius ) {\\n\\n\\t\\t\\t\\treturn false;\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\treturn true;\\n\\n\\t},\\n\\n\\tintersectsBox: function () {\\n\\n\\t\\tvar p = new Vector3();\\n\\n\\t\\treturn function intersectsBox( box ) {\\n\\n\\t\\t\\tvar planes = this.planes;\\n\\n\\t\\t\\tfor ( var i = 0; i < 6; i ++ ) {\\n\\n\\t\\t\\t\\tvar plane = planes[ i ];\\n\\n\\t\\t\\t\\t// corner at max distance\\n\\n\\t\\t\\t\\tp.x = plane.normal.x > 0 ? box.max.x : box.min.x;\\n\\t\\t\\t\\tp.y = plane.normal.y > 0 ? box.max.y : box.min.y;\\n\\t\\t\\t\\tp.z = plane.normal.z > 0 ? box.max.z : box.min.z;\\n\\n\\t\\t\\t\\tif ( plane.distanceToPoint( p ) < 0 ) {\\n\\n\\t\\t\\t\\t\\treturn false;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn true;\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\tcontainsPoint: function ( point ) {\\n\\n\\t\\tvar planes = this.planes;\\n\\n\\t\\tfor ( var i = 0; i < 6; i ++ ) {\\n\\n\\t\\t\\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\\n\\n\\t\\t\\t\\treturn false;\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\treturn true;\\n\\n\\t}\\n\\n} );\\n\\nvar alphamap_fragment = \\\"#ifdef USE_ALPHAMAP\\\\n\\\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\\\n#endif\\\";\\n\\nvar alphamap_pars_fragment = \\\"#ifdef USE_ALPHAMAP\\\\n\\\\tuniform sampler2D alphaMap;\\\\n#endif\\\";\\n\\nvar alphatest_fragment = \\\"#ifdef ALPHATEST\\\\n\\\\tif ( diffuseColor.a < ALPHATEST ) discard;\\\\n#endif\\\";\\n\\nvar aomap_fragment = \\\"#ifdef USE_AOMAP\\\\n\\\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\\\n\\\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\\\n\\\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\\\n\\\\t\\\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\\\n\\\\t\\\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\\\n\\\\t#endif\\\\n#endif\\\";\\n\\nvar aomap_pars_fragment = \\\"#ifdef USE_AOMAP\\\\n\\\\tuniform sampler2D aoMap;\\\\n\\\\tuniform float aoMapIntensity;\\\\n#endif\\\";\\n\\nvar begin_vertex = \\\"vec3 transformed = vec3( position );\\\";\\n\\nvar beginnormal_vertex = \\\"vec3 objectNormal = vec3( normal );\\\";\\n\\nvar bsdfs = \\\"vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\\\\n\\\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\\\n\\\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\\\n\\\\tvec4 r = roughness * c0 + c1;\\\\n\\\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\\\n\\\\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\\\\n}\\\\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\\\n\\\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\\\n\\\\tif( cutoffDistance > 0.0 ) {\\\\n\\\\t\\\\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\\\n\\\\t}\\\\n\\\\treturn distanceFalloff;\\\\n#else\\\\n\\\\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\\\\n\\\\t\\\\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\\\n\\\\t}\\\\n\\\\treturn 1.0;\\\\n#endif\\\\n}\\\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\\\n\\\\treturn RECIPROCAL_PI * diffuseColor;\\\\n}\\\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\\\n\\\\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\\\n\\\\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\\\n}\\\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\\\n\\\\tfloat a2 = pow2( alpha );\\\\n\\\\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\\\n\\\\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\\\n\\\\treturn 1.0 / ( gl * gv );\\\\n}\\\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\\\n\\\\tfloat a2 = pow2( alpha );\\\\n\\\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\\\n\\\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\\\n\\\\treturn 0.5 / max( gv + gl, EPSILON );\\\\n}\\\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\\\n\\\\tfloat a2 = pow2( alpha );\\\\n\\\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\\\n\\\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\\\n}\\\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\\\n\\\\tfloat alpha = pow2( roughness );\\\\n\\\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\\\n\\\\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\\\\n\\\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\\\n\\\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\\\n\\\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\\\n\\\\tvec3 F = F_Schlick( specularColor, dotLH );\\\\n\\\\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\\\n\\\\tfloat D = D_GGX( alpha, dotNH );\\\\n\\\\treturn F * ( G * D );\\\\n}\\\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\\\n\\\\tconst float LUT_SIZE  = 64.0;\\\\n\\\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\\\n\\\\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\\\\n\\\\tfloat dotNV = saturate( dot( N, V ) );\\\\n\\\\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\\\\n\\\\tuv = uv * LUT_SCALE + LUT_BIAS;\\\\n\\\\treturn uv;\\\\n}\\\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\\\n\\\\tfloat l = length( f );\\\\n\\\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\\\n}\\\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\\\n\\\\tfloat x = dot( v1, v2 );\\\\n\\\\tfloat y = abs( x );\\\\n\\\\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\\\\n\\\\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\\\\n\\\\tfloat v = a / b;\\\\n\\\\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\\\\n\\\\treturn cross( v1, v2 ) * theta_sintheta;\\\\n}\\\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\\\n\\\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\\\n\\\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\\\n\\\\tvec3 lightNormal = cross( v1, v2 );\\\\n\\\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\\\n\\\\tvec3 T1, T2;\\\\n\\\\tT1 = normalize( V - N * dot( V, N ) );\\\\n\\\\tT2 = - cross( N, T1 );\\\\n\\\\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\\\\n\\\\tvec3 coords[ 4 ];\\\\n\\\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\\\n\\\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\\\n\\\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\\\n\\\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\\\n\\\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\\\n\\\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\\\n\\\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\\\n\\\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\\\n\\\\tvec3 vectorFormFactor = vec3( 0.0 );\\\\n\\\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\\\n\\\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\\\n\\\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\\\n\\\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\\\n\\\\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\\\\n\\\\treturn vec3( result );\\\\n}\\\\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\\\n\\\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\\\n\\\\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\\\\n\\\\treturn specularColor * brdf.x + brdf.y;\\\\n}\\\\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\\\\n\\\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\\\n\\\\tvec3 F = F_Schlick( specularColor, dotNV );\\\\n\\\\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\\\\n\\\\tvec3 FssEss = F * brdf.x + brdf.y;\\\\n\\\\tfloat Ess = brdf.x + brdf.y;\\\\n\\\\tfloat Ems = 1.0 - Ess;\\\\n\\\\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\\\\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\\\\n\\\\tsingleScatter += FssEss;\\\\n\\\\tmultiScatter += Fms * Ems;\\\\n}\\\\nfloat G_BlinnPhong_Implicit( ) {\\\\n\\\\treturn 0.25;\\\\n}\\\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\\\n\\\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\\\n}\\\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\\\n\\\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\\\n\\\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\\\n\\\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\\\n\\\\tvec3 F = F_Schlick( specularColor, dotLH );\\\\n\\\\tfloat G = G_BlinnPhong_Implicit( );\\\\n\\\\tfloat D = D_BlinnPhong( shininess, dotNH );\\\\n\\\\treturn F * ( G * D );\\\\n}\\\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\\\n\\\\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\\\n}\\\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\\\n\\\\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\\\n}\\\";\\n\\nvar bumpmap_pars_fragment = \\\"#ifdef USE_BUMPMAP\\\\n\\\\tuniform sampler2D bumpMap;\\\\n\\\\tuniform float bumpScale;\\\\n\\\\tvec2 dHdxy_fwd() {\\\\n\\\\t\\\\tvec2 dSTdx = dFdx( vUv );\\\\n\\\\t\\\\tvec2 dSTdy = dFdy( vUv );\\\\n\\\\t\\\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\\\n\\\\t\\\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\\\n\\\\t\\\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\\\n\\\\t\\\\treturn vec2( dBx, dBy );\\\\n\\\\t}\\\\n\\\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\\\n\\\\t\\\\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\\\\n\\\\t\\\\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\\\\n\\\\t\\\\tvec3 vN = surf_norm;\\\\n\\\\t\\\\tvec3 R1 = cross( vSigmaY, vN );\\\\n\\\\t\\\\tvec3 R2 = cross( vN, vSigmaX );\\\\n\\\\t\\\\tfloat fDet = dot( vSigmaX, R1 );\\\\n\\\\t\\\\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\\\n\\\\t\\\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\\\n\\\\t\\\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\\\n\\\\t}\\\\n#endif\\\";\\n\\nvar clipping_planes_fragment = \\\"#if NUM_CLIPPING_PLANES > 0\\\\n\\\\tvec4 plane;\\\\n\\\\t#pragma unroll_loop\\\\n\\\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\\\\n\\\\t\\\\tplane = clippingPlanes[ i ];\\\\n\\\\t\\\\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\\\\n\\\\t}\\\\n\\\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\\\n\\\\t\\\\tbool clipped = true;\\\\n\\\\t\\\\t#pragma unroll_loop\\\\n\\\\t\\\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\\\\n\\\\t\\\\t\\\\tplane = clippingPlanes[ i ];\\\\n\\\\t\\\\t\\\\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\\\\n\\\\t\\\\t}\\\\n\\\\t\\\\tif ( clipped ) discard;\\\\n\\\\t#endif\\\\n#endif\\\";\\n\\nvar clipping_planes_pars_fragment = \\\"#if NUM_CLIPPING_PLANES > 0\\\\n\\\\t#if ! defined( PHYSICAL ) && ! defined( PHONG ) && ! defined( MATCAP )\\\\n\\\\t\\\\tvarying vec3 vViewPosition;\\\\n\\\\t#endif\\\\n\\\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\\\n#endif\\\";\\n\\nvar clipping_planes_pars_vertex = \\\"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG ) && ! defined( MATCAP )\\\\n\\\\tvarying vec3 vViewPosition;\\\\n#endif\\\";\\n\\nvar clipping_planes_vertex = \\\"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG ) && ! defined( MATCAP )\\\\n\\\\tvViewPosition = - mvPosition.xyz;\\\\n#endif\\\";\\n\\nvar color_fragment = \\\"#ifdef USE_COLOR\\\\n\\\\tdiffuseColor.rgb *= vColor;\\\\n#endif\\\";\\n\\nvar color_pars_fragment = \\\"#ifdef USE_COLOR\\\\n\\\\tvarying vec3 vColor;\\\\n#endif\\\";\\n\\nvar color_pars_vertex = \\\"#ifdef USE_COLOR\\\\n\\\\tvarying vec3 vColor;\\\\n#endif\\\";\\n\\nvar color_vertex = \\\"#ifdef USE_COLOR\\\\n\\\\tvColor.xyz = color.xyz;\\\\n#endif\\\";\\n\\nvar common = \\\"#define PI 3.14159265359\\\\n#define PI2 6.28318530718\\\\n#define PI_HALF 1.5707963267949\\\\n#define RECIPROCAL_PI 0.31830988618\\\\n#define RECIPROCAL_PI2 0.15915494\\\\n#define LOG2 1.442695\\\\n#define EPSILON 1e-6\\\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\\\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\\\\nfloat pow2( const in float x ) { return x*x; }\\\\nfloat pow3( const in float x ) { return x*x*x; }\\\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\\\nhighp float rand( const in vec2 uv ) {\\\\n\\\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\\\n\\\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\\\n\\\\treturn fract(sin(sn) * c);\\\\n}\\\\nstruct IncidentLight {\\\\n\\\\tvec3 color;\\\\n\\\\tvec3 direction;\\\\n\\\\tbool visible;\\\\n};\\\\nstruct ReflectedLight {\\\\n\\\\tvec3 directDiffuse;\\\\n\\\\tvec3 directSpecular;\\\\n\\\\tvec3 indirectDiffuse;\\\\n\\\\tvec3 indirectSpecular;\\\\n};\\\\nstruct GeometricContext {\\\\n\\\\tvec3 position;\\\\n\\\\tvec3 normal;\\\\n\\\\tvec3 viewDir;\\\\n};\\\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\\\n\\\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\\\n}\\\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\\\n\\\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\\\n}\\\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\\\n\\\\tfloat distance = dot( planeNormal, point - pointOnPlane );\\\\n\\\\treturn - distance * planeNormal + point;\\\\n}\\\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\\\n\\\\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\\\n}\\\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\\\n\\\\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\\\n}\\\\nmat3 transposeMat3( const in mat3 m ) {\\\\n\\\\tmat3 tmp;\\\\n\\\\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\\\\n\\\\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\\\\n\\\\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\\\\n\\\\treturn tmp;\\\\n}\\\\nfloat linearToRelativeLuminance( const in vec3 color ) {\\\\n\\\\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\\\\n\\\\treturn dot( weights, color.rgb );\\\\n}\\\";\\n\\nvar cube_uv_reflection_fragment = \\\"#ifdef ENVMAP_TYPE_CUBE_UV\\\\n#define cubeUV_textureSize (1024.0)\\\\nint getFaceFromDirection(vec3 direction) {\\\\n\\\\tvec3 absDirection = abs(direction);\\\\n\\\\tint face = -1;\\\\n\\\\tif( absDirection.x > absDirection.z ) {\\\\n\\\\t\\\\tif(absDirection.x > absDirection.y )\\\\n\\\\t\\\\t\\\\tface = direction.x > 0.0 ? 0 : 3;\\\\n\\\\t\\\\telse\\\\n\\\\t\\\\t\\\\tface = direction.y > 0.0 ? 1 : 4;\\\\n\\\\t}\\\\n\\\\telse {\\\\n\\\\t\\\\tif(absDirection.z > absDirection.y )\\\\n\\\\t\\\\t\\\\tface = direction.z > 0.0 ? 2 : 5;\\\\n\\\\t\\\\telse\\\\n\\\\t\\\\t\\\\tface = direction.y > 0.0 ? 1 : 4;\\\\n\\\\t}\\\\n\\\\treturn face;\\\\n}\\\\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\\\\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\\\\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\\\\n\\\\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\\\\n\\\\tfloat dxRoughness = dFdx(roughness);\\\\n\\\\tfloat dyRoughness = dFdy(roughness);\\\\n\\\\tvec3 dx = dFdx( vec * scale * dxRoughness );\\\\n\\\\tvec3 dy = dFdy( vec * scale * dyRoughness );\\\\n\\\\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\\\\n\\\\td = clamp(d, 1.0, cubeUV_rangeClamp);\\\\n\\\\tfloat mipLevel = 0.5 * log2(d);\\\\n\\\\treturn vec2(floor(mipLevel), fract(mipLevel));\\\\n}\\\\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\\\\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\\\\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\\\\n\\\\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\\\\n\\\\tfloat a = 16.0 * cubeUV_rcpTextureSize;\\\\n\\\\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\\\\n\\\\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\\\\n\\\\tfloat powScale = exp2_packed.x * exp2_packed.y;\\\\n\\\\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\\\\n\\\\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\\\\n\\\\tbool bRes = mipLevel == 0.0;\\\\n\\\\tscale =  bRes && (scale < a) ? a : scale;\\\\n\\\\tvec3 r;\\\\n\\\\tvec2 offset;\\\\n\\\\tint face = getFaceFromDirection(direction);\\\\n\\\\tfloat rcpPowScale = 1.0 / powScale;\\\\n\\\\tif( face == 0) {\\\\n\\\\t\\\\tr = vec3(direction.x, -direction.z, direction.y);\\\\n\\\\t\\\\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\\\\n\\\\t\\\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\\\n\\\\t}\\\\n\\\\telse if( face == 1) {\\\\n\\\\t\\\\tr = vec3(direction.y, direction.x, direction.z);\\\\n\\\\t\\\\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\\\\n\\\\t\\\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\\\n\\\\t}\\\\n\\\\telse if( face == 2) {\\\\n\\\\t\\\\tr = vec3(direction.z, direction.x, direction.y);\\\\n\\\\t\\\\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\\\\n\\\\t\\\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\\\n\\\\t}\\\\n\\\\telse if( face == 3) {\\\\n\\\\t\\\\tr = vec3(direction.x, direction.z, direction.y);\\\\n\\\\t\\\\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\\\\n\\\\t\\\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\\\n\\\\t}\\\\n\\\\telse if( face == 4) {\\\\n\\\\t\\\\tr = vec3(direction.y, direction.x, -direction.z);\\\\n\\\\t\\\\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\\\\n\\\\t\\\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\\\n\\\\t}\\\\n\\\\telse {\\\\n\\\\t\\\\tr = vec3(direction.z, -direction.x, direction.y);\\\\n\\\\t\\\\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\\\\n\\\\t\\\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\\\n\\\\t}\\\\n\\\\tr = normalize(r);\\\\n\\\\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\\\\n\\\\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\\\\n\\\\tvec2 base = offset + vec2( texelOffset );\\\\n\\\\treturn base + s * ( scale - 2.0 * texelOffset );\\\\n}\\\\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\\\\nvec4 textureCubeUV( sampler2D envMap, vec3 reflectedDirection, float roughness ) {\\\\n\\\\tfloat roughnessVal = roughness* cubeUV_maxLods3;\\\\n\\\\tfloat r1 = floor(roughnessVal);\\\\n\\\\tfloat r2 = r1 + 1.0;\\\\n\\\\tfloat t = fract(roughnessVal);\\\\n\\\\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\\\\n\\\\tfloat s = mipInfo.y;\\\\n\\\\tfloat level0 = mipInfo.x;\\\\n\\\\tfloat level1 = level0 + 1.0;\\\\n\\\\tlevel1 = level1 > 5.0 ? 5.0 : level1;\\\\n\\\\tlevel0 += min( floor( s + 0.5 ), 5.0 );\\\\n\\\\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\\\\n\\\\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\\\\n\\\\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\\\\n\\\\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\\\\n\\\\tvec4 result = mix(color10, color20, t);\\\\n\\\\treturn vec4(result.rgb, 1.0);\\\\n}\\\\n#endif\\\";\\n\\nvar defaultnormal_vertex = \\\"vec3 transformedNormal = normalMatrix * objectNormal;\\\\n#ifdef FLIP_SIDED\\\\n\\\\ttransformedNormal = - transformedNormal;\\\\n#endif\\\";\\n\\nvar displacementmap_pars_vertex = \\\"#ifdef USE_DISPLACEMENTMAP\\\\n\\\\tuniform sampler2D displacementMap;\\\\n\\\\tuniform float displacementScale;\\\\n\\\\tuniform float displacementBias;\\\\n#endif\\\";\\n\\nvar displacementmap_vertex = \\\"#ifdef USE_DISPLACEMENTMAP\\\\n\\\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\\\\n#endif\\\";\\n\\nvar emissivemap_fragment = \\\"#ifdef USE_EMISSIVEMAP\\\\n\\\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\\\n\\\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\\\n\\\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\\\n#endif\\\";\\n\\nvar emissivemap_pars_fragment = \\\"#ifdef USE_EMISSIVEMAP\\\\n\\\\tuniform sampler2D emissiveMap;\\\\n#endif\\\";\\n\\nvar encodings_fragment = \\\"gl_FragColor = linearToOutputTexel( gl_FragColor );\\\";\\n\\nvar encodings_pars_fragment = \\\"\\\\nvec4 LinearToLinear( in vec4 value ) {\\\\n\\\\treturn value;\\\\n}\\\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\\\n\\\\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\\\\n}\\\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\\\n\\\\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\\\\n}\\\\nvec4 sRGBToLinear( in vec4 value ) {\\\\n\\\\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\\\\n}\\\\nvec4 LinearTosRGB( in vec4 value ) {\\\\n\\\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\\\\n}\\\\nvec4 RGBEToLinear( in vec4 value ) {\\\\n\\\\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\\\n}\\\\nvec4 LinearToRGBE( in vec4 value ) {\\\\n\\\\tfloat maxComponent = max( max( value.r, value.g ), value.b );\\\\n\\\\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\\\n\\\\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\\\n}\\\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\\\n\\\\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\\\\n}\\\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\\\n\\\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\\\n\\\\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\\\\n\\\\tM = ceil( M * 255.0 ) / 255.0;\\\\n\\\\treturn vec4( value.rgb / ( M * maxRange ), M );\\\\n}\\\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\\\n\\\\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\\\n}\\\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\\\n\\\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\\\n\\\\tfloat D = max( maxRange / maxRGB, 1.0 );\\\\n\\\\tD = min( floor( D ) / 255.0, 1.0 );\\\\n\\\\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\\\n}\\\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\\\nvec4 LinearToLogLuv( in vec4 value )  {\\\\n\\\\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\\\\n\\\\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\\\\n\\\\tvec4 vResult;\\\\n\\\\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\\\n\\\\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\\\n\\\\tvResult.w = fract( Le );\\\\n\\\\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\\\\n\\\\treturn vResult;\\\\n}\\\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\\\nvec4 LogLuvToLinear( in vec4 value ) {\\\\n\\\\tfloat Le = value.z * 255.0 + value.w;\\\\n\\\\tvec3 Xp_Y_XYZp;\\\\n\\\\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\\\\n\\\\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\\\n\\\\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\\\n\\\\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\\\\n\\\\treturn vec4( max( vRGB, 0.0 ), 1.0 );\\\\n}\\\";\\n\\nvar envmap_fragment = \\\"#ifdef USE_ENVMAP\\\\n\\\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\\\n\\\\t\\\\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\\\\n\\\\t\\\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\\\n\\\\t\\\\t#ifdef ENVMAP_MODE_REFLECTION\\\\n\\\\t\\\\t\\\\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\\\\n\\\\t\\\\t#else\\\\n\\\\t\\\\t\\\\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\\\\n\\\\t\\\\t#endif\\\\n\\\\t#else\\\\n\\\\t\\\\tvec3 reflectVec = vReflect;\\\\n\\\\t#endif\\\\n\\\\t#ifdef ENVMAP_TYPE_CUBE\\\\n\\\\t\\\\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\\\n\\\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\\\n\\\\t\\\\tvec2 sampleUV;\\\\n\\\\t\\\\treflectVec = normalize( reflectVec );\\\\n\\\\t\\\\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\\\n\\\\t\\\\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\\\n\\\\t\\\\tvec4 envColor = texture2D( envMap, sampleUV );\\\\n\\\\t#elif defined( ENVMAP_TYPE_SPHERE )\\\\n\\\\t\\\\treflectVec = normalize( reflectVec );\\\\n\\\\t\\\\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\\\\n\\\\t\\\\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\\\\n\\\\t#else\\\\n\\\\t\\\\tvec4 envColor = vec4( 0.0 );\\\\n\\\\t#endif\\\\n\\\\tenvColor = envMapTexelToLinear( envColor );\\\\n\\\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\\\n\\\\t\\\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\\\n\\\\t#elif defined( ENVMAP_BLENDING_MIX )\\\\n\\\\t\\\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\\\n\\\\t#elif defined( ENVMAP_BLENDING_ADD )\\\\n\\\\t\\\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\\\n\\\\t#endif\\\\n#endif\\\";\\n\\nvar envmap_pars_fragment = \\\"#if defined( USE_ENVMAP ) || defined( PHYSICAL )\\\\n\\\\tuniform float reflectivity;\\\\n\\\\tuniform float envMapIntensity;\\\\n#endif\\\\n#ifdef USE_ENVMAP\\\\n\\\\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\\\\n\\\\t\\\\tvarying vec3 vWorldPosition;\\\\n\\\\t#endif\\\\n\\\\t#ifdef ENVMAP_TYPE_CUBE\\\\n\\\\t\\\\tuniform samplerCube envMap;\\\\n\\\\t#else\\\\n\\\\t\\\\tuniform sampler2D envMap;\\\\n\\\\t#endif\\\\n\\\\tuniform float flipEnvMap;\\\\n\\\\tuniform int maxMipLevel;\\\\n\\\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\\\\n\\\\t\\\\tuniform float refractionRatio;\\\\n\\\\t#else\\\\n\\\\t\\\\tvarying vec3 vReflect;\\\\n\\\\t#endif\\\\n#endif\\\";\\n\\nvar envmap_pars_vertex = \\\"#ifdef USE_ENVMAP\\\\n\\\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\\\n\\\\t\\\\tvarying vec3 vWorldPosition;\\\\n\\\\t#else\\\\n\\\\t\\\\tvarying vec3 vReflect;\\\\n\\\\t\\\\tuniform float refractionRatio;\\\\n\\\\t#endif\\\\n#endif\\\";\\n\\nvar envmap_vertex = \\\"#ifdef USE_ENVMAP\\\\n\\\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\\\n\\\\t\\\\tvWorldPosition = worldPosition.xyz;\\\\n\\\\t#else\\\\n\\\\t\\\\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\\\n\\\\t\\\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\\\n\\\\t\\\\t#ifdef ENVMAP_MODE_REFLECTION\\\\n\\\\t\\\\t\\\\tvReflect = reflect( cameraToVertex, worldNormal );\\\\n\\\\t\\\\t#else\\\\n\\\\t\\\\t\\\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\\\n\\\\t\\\\t#endif\\\\n\\\\t#endif\\\\n#endif\\\";\\n\\nvar fog_vertex = \\\"#ifdef USE_FOG\\\\n\\\\tfogDepth = -mvPosition.z;\\\\n#endif\\\";\\n\\nvar fog_pars_vertex = \\\"#ifdef USE_FOG\\\\n\\\\tvarying float fogDepth;\\\\n#endif\\\";\\n\\nvar fog_fragment = \\\"#ifdef USE_FOG\\\\n\\\\t#ifdef FOG_EXP2\\\\n\\\\t\\\\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );\\\\n\\\\t#else\\\\n\\\\t\\\\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\\\\n\\\\t#endif\\\\n\\\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\\\n#endif\\\";\\n\\nvar fog_pars_fragment = \\\"#ifdef USE_FOG\\\\n\\\\tuniform vec3 fogColor;\\\\n\\\\tvarying float fogDepth;\\\\n\\\\t#ifdef FOG_EXP2\\\\n\\\\t\\\\tuniform float fogDensity;\\\\n\\\\t#else\\\\n\\\\t\\\\tuniform float fogNear;\\\\n\\\\t\\\\tuniform float fogFar;\\\\n\\\\t#endif\\\\n#endif\\\";\\n\\nvar gradientmap_pars_fragment = \\\"#ifdef TOON\\\\n\\\\tuniform sampler2D gradientMap;\\\\n\\\\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\\\n\\\\t\\\\tfloat dotNL = dot( normal, lightDirection );\\\\n\\\\t\\\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\\\n\\\\t\\\\t#ifdef USE_GRADIENTMAP\\\\n\\\\t\\\\t\\\\treturn texture2D( gradientMap, coord ).rgb;\\\\n\\\\t\\\\t#else\\\\n\\\\t\\\\t\\\\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\\\\n\\\\t\\\\t#endif\\\\n\\\\t}\\\\n#endif\\\";\\n\\nvar lightmap_fragment = \\\"#ifdef USE_LIGHTMAP\\\\n\\\\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\\\n#endif\\\";\\n\\nvar lightmap_pars_fragment = \\\"#ifdef USE_LIGHTMAP\\\\n\\\\tuniform sampler2D lightMap;\\\\n\\\\tuniform float lightMapIntensity;\\\\n#endif\\\";\\n\\nvar lights_lambert_vertex = \\\"vec3 diffuse = vec3( 1.0 );\\\\nGeometricContext geometry;\\\\ngeometry.position = mvPosition.xyz;\\\\ngeometry.normal = normalize( transformedNormal );\\\\ngeometry.viewDir = normalize( -mvPosition.xyz );\\\\nGeometricContext backGeometry;\\\\nbackGeometry.position = geometry.position;\\\\nbackGeometry.normal = -geometry.normal;\\\\nbackGeometry.viewDir = geometry.viewDir;\\\\nvLightFront = vec3( 0.0 );\\\\nvIndirectFront = vec3( 0.0 );\\\\n#ifdef DOUBLE_SIDED\\\\n\\\\tvLightBack = vec3( 0.0 );\\\\n\\\\tvIndirectBack = vec3( 0.0 );\\\\n#endif\\\\nIncidentLight directLight;\\\\nfloat dotNL;\\\\nvec3 directLightColor_Diffuse;\\\\n#if NUM_POINT_LIGHTS > 0\\\\n\\\\t#pragma unroll_loop\\\\n\\\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\\\n\\\\t\\\\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\\\n\\\\t\\\\tdotNL = dot( geometry.normal, directLight.direction );\\\\n\\\\t\\\\tdirectLightColor_Diffuse = PI * directLight.color;\\\\n\\\\t\\\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\\\n\\\\t\\\\t#ifdef DOUBLE_SIDED\\\\n\\\\t\\\\t\\\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\\\n\\\\t\\\\t#endif\\\\n\\\\t}\\\\n#endif\\\\n#if NUM_SPOT_LIGHTS > 0\\\\n\\\\t#pragma unroll_loop\\\\n\\\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\\\n\\\\t\\\\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\\\n\\\\t\\\\tdotNL = dot( geometry.normal, directLight.direction );\\\\n\\\\t\\\\tdirectLightColor_Diffuse = PI * directLight.color;\\\\n\\\\t\\\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\\\n\\\\t\\\\t#ifdef DOUBLE_SIDED\\\\n\\\\t\\\\t\\\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\\\n\\\\t\\\\t#endif\\\\n\\\\t}\\\\n#endif\\\\n#if NUM_DIR_LIGHTS > 0\\\\n\\\\t#pragma unroll_loop\\\\n\\\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\\\n\\\\t\\\\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\\\n\\\\t\\\\tdotNL = dot( geometry.normal, directLight.direction );\\\\n\\\\t\\\\tdirectLightColor_Diffuse = PI * directLight.color;\\\\n\\\\t\\\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\\\n\\\\t\\\\t#ifdef DOUBLE_SIDED\\\\n\\\\t\\\\t\\\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\\\n\\\\t\\\\t#endif\\\\n\\\\t}\\\\n#endif\\\\n#if NUM_HEMI_LIGHTS > 0\\\\n\\\\t#pragma unroll_loop\\\\n\\\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\\\n\\\\t\\\\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\\\n\\\\t\\\\t#ifdef DOUBLE_SIDED\\\\n\\\\t\\\\t\\\\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\\\n\\\\t\\\\t#endif\\\\n\\\\t}\\\\n#endif\\\";\\n\\nvar lights_pars_begin = \\\"uniform vec3 ambientLightColor;\\\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\\\n\\\\tvec3 irradiance = ambientLightColor;\\\\n\\\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\\\n\\\\t\\\\tirradiance *= PI;\\\\n\\\\t#endif\\\\n\\\\treturn irradiance;\\\\n}\\\\n#if NUM_DIR_LIGHTS > 0\\\\n\\\\tstruct DirectionalLight {\\\\n\\\\t\\\\tvec3 direction;\\\\n\\\\t\\\\tvec3 color;\\\\n\\\\t\\\\tint shadow;\\\\n\\\\t\\\\tfloat shadowBias;\\\\n\\\\t\\\\tfloat shadowRadius;\\\\n\\\\t\\\\tvec2 shadowMapSize;\\\\n\\\\t};\\\\n\\\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\\\n\\\\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\\\n\\\\t\\\\tdirectLight.color = directionalLight.color;\\\\n\\\\t\\\\tdirectLight.direction = directionalLight.direction;\\\\n\\\\t\\\\tdirectLight.visible = true;\\\\n\\\\t}\\\\n#endif\\\\n#if NUM_POINT_LIGHTS > 0\\\\n\\\\tstruct PointLight {\\\\n\\\\t\\\\tvec3 position;\\\\n\\\\t\\\\tvec3 color;\\\\n\\\\t\\\\tfloat distance;\\\\n\\\\t\\\\tfloat decay;\\\\n\\\\t\\\\tint shadow;\\\\n\\\\t\\\\tfloat shadowBias;\\\\n\\\\t\\\\tfloat shadowRadius;\\\\n\\\\t\\\\tvec2 shadowMapSize;\\\\n\\\\t\\\\tfloat shadowCameraNear;\\\\n\\\\t\\\\tfloat shadowCameraFar;\\\\n\\\\t};\\\\n\\\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\\\n\\\\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\\\n\\\\t\\\\tvec3 lVector = pointLight.position - geometry.position;\\\\n\\\\t\\\\tdirectLight.direction = normalize( lVector );\\\\n\\\\t\\\\tfloat lightDistance = length( lVector );\\\\n\\\\t\\\\tdirectLight.color = pointLight.color;\\\\n\\\\t\\\\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\\\n\\\\t\\\\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\\\\n\\\\t}\\\\n#endif\\\\n#if NUM_SPOT_LIGHTS > 0\\\\n\\\\tstruct SpotLight {\\\\n\\\\t\\\\tvec3 position;\\\\n\\\\t\\\\tvec3 direction;\\\\n\\\\t\\\\tvec3 color;\\\\n\\\\t\\\\tfloat distance;\\\\n\\\\t\\\\tfloat decay;\\\\n\\\\t\\\\tfloat coneCos;\\\\n\\\\t\\\\tfloat penumbraCos;\\\\n\\\\t\\\\tint shadow;\\\\n\\\\t\\\\tfloat shadowBias;\\\\n\\\\t\\\\tfloat shadowRadius;\\\\n\\\\t\\\\tvec2 shadowMapSize;\\\\n\\\\t};\\\\n\\\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\\\n\\\\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\\\\n\\\\t\\\\tvec3 lVector = spotLight.position - geometry.position;\\\\n\\\\t\\\\tdirectLight.direction = normalize( lVector );\\\\n\\\\t\\\\tfloat lightDistance = length( lVector );\\\\n\\\\t\\\\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\\\n\\\\t\\\\tif ( angleCos > spotLight.coneCos ) {\\\\n\\\\t\\\\t\\\\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\\\n\\\\t\\\\t\\\\tdirectLight.color = spotLight.color;\\\\n\\\\t\\\\t\\\\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\\\n\\\\t\\\\t\\\\tdirectLight.visible = true;\\\\n\\\\t\\\\t} else {\\\\n\\\\t\\\\t\\\\tdirectLight.color = vec3( 0.0 );\\\\n\\\\t\\\\t\\\\tdirectLight.visible = false;\\\\n\\\\t\\\\t}\\\\n\\\\t}\\\\n#endif\\\\n#if NUM_RECT_AREA_LIGHTS > 0\\\\n\\\\tstruct RectAreaLight {\\\\n\\\\t\\\\tvec3 color;\\\\n\\\\t\\\\tvec3 position;\\\\n\\\\t\\\\tvec3 halfWidth;\\\\n\\\\t\\\\tvec3 halfHeight;\\\\n\\\\t};\\\\n\\\\tuniform sampler2D ltc_1;\\\\tuniform sampler2D ltc_2;\\\\n\\\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\\\n#endif\\\\n#if NUM_HEMI_LIGHTS > 0\\\\n\\\\tstruct HemisphereLight {\\\\n\\\\t\\\\tvec3 direction;\\\\n\\\\t\\\\tvec3 skyColor;\\\\n\\\\t\\\\tvec3 groundColor;\\\\n\\\\t};\\\\n\\\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\\\n\\\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\\\n\\\\t\\\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\\\n\\\\t\\\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\\\n\\\\t\\\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\\\n\\\\t\\\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\\\n\\\\t\\\\t\\\\tirradiance *= PI;\\\\n\\\\t\\\\t#endif\\\\n\\\\t\\\\treturn irradiance;\\\\n\\\\t}\\\\n#endif\\\";\\n\\nvar envmap_physical_pars_fragment = \\\"#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\\\n\\\\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\\\n\\\\t\\\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\\\n\\\\t\\\\t#ifdef ENVMAP_TYPE_CUBE\\\\n\\\\t\\\\t\\\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\\\n\\\\t\\\\t\\\\t#ifdef TEXTURE_LOD_EXT\\\\n\\\\t\\\\t\\\\t\\\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\\\n\\\\t\\\\t\\\\t#else\\\\n\\\\t\\\\t\\\\t\\\\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\\\n\\\\t\\\\t\\\\t#endif\\\\n\\\\t\\\\t\\\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\\\n\\\\t\\\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\\\n\\\\t\\\\t\\\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\\\n\\\\t\\\\t\\\\tvec4 envMapColor = textureCubeUV( envMap, queryVec, 1.0 );\\\\n\\\\t\\\\t#else\\\\n\\\\t\\\\t\\\\tvec4 envMapColor = vec4( 0.0 );\\\\n\\\\t\\\\t#endif\\\\n\\\\t\\\\treturn PI * envMapColor.rgb * envMapIntensity;\\\\n\\\\t}\\\\n\\\\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\\\\n\\\\t\\\\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\\\n\\\\t\\\\tfloat desiredMIPLevel = maxMIPLevelScalar + 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\\\\n\\\\t\\\\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\\\n\\\\t}\\\\n\\\\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\\\\n\\\\t\\\\t#ifdef ENVMAP_MODE_REFLECTION\\\\n\\\\t\\\\t\\\\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\\\\n\\\\t\\\\t#else\\\\n\\\\t\\\\t\\\\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\\\\n\\\\t\\\\t#endif\\\\n\\\\t\\\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\\\n\\\\t\\\\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\\\\n\\\\t\\\\t#ifdef ENVMAP_TYPE_CUBE\\\\n\\\\t\\\\t\\\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\\\n\\\\t\\\\t\\\\t#ifdef TEXTURE_LOD_EXT\\\\n\\\\t\\\\t\\\\t\\\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\\\n\\\\t\\\\t\\\\t#else\\\\n\\\\t\\\\t\\\\t\\\\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\\\n\\\\t\\\\t\\\\t#endif\\\\n\\\\t\\\\t\\\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\\\n\\\\t\\\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\\\n\\\\t\\\\t\\\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\\\n\\\\t\\\\t\\\\tvec4 envMapColor = textureCubeUV( envMap, queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent ));\\\\n\\\\t\\\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\\\n\\\\t\\\\t\\\\tvec2 sampleUV;\\\\n\\\\t\\\\t\\\\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\\\n\\\\t\\\\t\\\\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\\\n\\\\t\\\\t\\\\t#ifdef TEXTURE_LOD_EXT\\\\n\\\\t\\\\t\\\\t\\\\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\\\\n\\\\t\\\\t\\\\t#else\\\\n\\\\t\\\\t\\\\t\\\\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\\\\n\\\\t\\\\t\\\\t#endif\\\\n\\\\t\\\\t\\\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\\\n\\\\t\\\\t#elif defined( ENVMAP_TYPE_SPHERE )\\\\n\\\\t\\\\t\\\\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\\\\n\\\\t\\\\t\\\\t#ifdef TEXTURE_LOD_EXT\\\\n\\\\t\\\\t\\\\t\\\\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\\\n\\\\t\\\\t\\\\t#else\\\\n\\\\t\\\\t\\\\t\\\\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\\\n\\\\t\\\\t\\\\t#endif\\\\n\\\\t\\\\t\\\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\\\n\\\\t\\\\t#endif\\\\n\\\\t\\\\treturn envMapColor.rgb * envMapIntensity;\\\\n\\\\t}\\\\n#endif\\\";\\n\\nvar lights_phong_fragment = \\\"BlinnPhongMaterial material;\\\\nmaterial.diffuseColor = diffuseColor.rgb;\\\\nmaterial.specularColor = specular;\\\\nmaterial.specularShininess = shininess;\\\\nmaterial.specularStrength = specularStrength;\\\";\\n\\nvar lights_phong_pars_fragment = \\\"varying vec3 vViewPosition;\\\\n#ifndef FLAT_SHADED\\\\n\\\\tvarying vec3 vNormal;\\\\n#endif\\\\nstruct BlinnPhongMaterial {\\\\n\\\\tvec3\\\\tdiffuseColor;\\\\n\\\\tvec3\\\\tspecularColor;\\\\n\\\\tfloat\\\\tspecularShininess;\\\\n\\\\tfloat\\\\tspecularStrength;\\\\n};\\\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\\\n\\\\t#ifdef TOON\\\\n\\\\t\\\\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\\\\n\\\\t#else\\\\n\\\\t\\\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\\\n\\\\t\\\\tvec3 irradiance = dotNL * directLight.color;\\\\n\\\\t#endif\\\\n\\\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\\\n\\\\t\\\\tirradiance *= PI;\\\\n\\\\t#endif\\\\n\\\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\\\n\\\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\\\n}\\\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\\\n\\\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\\\n}\\\\n#define RE_Direct\\\\t\\\\t\\\\t\\\\tRE_Direct_BlinnPhong\\\\n#define RE_IndirectDiffuse\\\\t\\\\tRE_IndirectDiffuse_BlinnPhong\\\\n#define Material_LightProbeLOD( material )\\\\t(0)\\\";\\n\\nvar lights_physical_fragment = \\\"PhysicalMaterial material;\\\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\\\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\\\\n#ifdef STANDARD\\\\n\\\\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\\\\n#else\\\\n\\\\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\\\n\\\\tmaterial.clearCoat = saturate( clearCoat );\\\\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\\\\n#endif\\\";\\n\\nvar lights_physical_pars_fragment = \\\"struct PhysicalMaterial {\\\\n\\\\tvec3\\\\tdiffuseColor;\\\\n\\\\tfloat\\\\tspecularRoughness;\\\\n\\\\tvec3\\\\tspecularColor;\\\\n\\\\t#ifndef STANDARD\\\\n\\\\t\\\\tfloat clearCoat;\\\\n\\\\t\\\\tfloat clearCoatRoughness;\\\\n\\\\t#endif\\\\n};\\\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\\\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\\\\n\\\\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\\\n}\\\\n#if NUM_RECT_AREA_LIGHTS > 0\\\\n\\\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\\\n\\\\t\\\\tvec3 normal = geometry.normal;\\\\n\\\\t\\\\tvec3 viewDir = geometry.viewDir;\\\\n\\\\t\\\\tvec3 position = geometry.position;\\\\n\\\\t\\\\tvec3 lightPos = rectAreaLight.position;\\\\n\\\\t\\\\tvec3 halfWidth = rectAreaLight.halfWidth;\\\\n\\\\t\\\\tvec3 halfHeight = rectAreaLight.halfHeight;\\\\n\\\\t\\\\tvec3 lightColor = rectAreaLight.color;\\\\n\\\\t\\\\tfloat roughness = material.specularRoughness;\\\\n\\\\t\\\\tvec3 rectCoords[ 4 ];\\\\n\\\\t\\\\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\\\\t\\\\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\\\\n\\\\t\\\\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\\\\n\\\\t\\\\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\\\\n\\\\t\\\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\\\n\\\\t\\\\tvec4 t1 = texture2D( ltc_1, uv );\\\\n\\\\t\\\\tvec4 t2 = texture2D( ltc_2, uv );\\\\n\\\\t\\\\tmat3 mInv = mat3(\\\\n\\\\t\\\\t\\\\tvec3( t1.x, 0, t1.y ),\\\\n\\\\t\\\\t\\\\tvec3(    0, 1,    0 ),\\\\n\\\\t\\\\t\\\\tvec3( t1.z, 0, t1.w )\\\\n\\\\t\\\\t);\\\\n\\\\t\\\\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\\\\n\\\\t\\\\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\\\n\\\\t\\\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\\\\n\\\\t}\\\\n#endif\\\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\\\n\\\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\\\n\\\\tvec3 irradiance = dotNL * directLight.color;\\\\n\\\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\\\n\\\\t\\\\tirradiance *= PI;\\\\n\\\\t#endif\\\\n\\\\t#ifndef STANDARD\\\\n\\\\t\\\\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\\\n\\\\t#else\\\\n\\\\t\\\\tfloat clearCoatDHR = 0.0;\\\\n\\\\t#endif\\\\n\\\\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\\\\n\\\\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\\\n\\\\t#ifndef STANDARD\\\\n\\\\t\\\\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\\\n\\\\t#endif\\\\n}\\\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\\\n\\\\t#ifndef ENVMAP_TYPE_CUBE_UV\\\\n\\\\t\\\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\\\n\\\\t#endif\\\\n}\\\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\\\\n\\\\t#ifndef STANDARD\\\\n\\\\t\\\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\\\n\\\\t\\\\tfloat dotNL = dotNV;\\\\n\\\\t\\\\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\\\n\\\\t#else\\\\n\\\\t\\\\tfloat clearCoatDHR = 0.0;\\\\n\\\\t#endif\\\\n\\\\tfloat clearCoatInv = 1.0 - clearCoatDHR;\\\\n\\\\t#if defined( ENVMAP_TYPE_CUBE_UV )\\\\n\\\\t\\\\tvec3 singleScattering = vec3( 0.0 );\\\\n\\\\t\\\\tvec3 multiScattering = vec3( 0.0 );\\\\n\\\\t\\\\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\\\\n\\\\t\\\\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\\\\n\\\\t\\\\tvec3 diffuse = material.diffuseColor;\\\\n\\\\t\\\\treflectedLight.indirectSpecular += clearCoatInv * radiance * singleScattering;\\\\n\\\\t\\\\treflectedLight.indirectDiffuse += multiScattering * cosineWeightedIrradiance;\\\\n\\\\t\\\\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\\\\n\\\\t#else\\\\n\\\\t\\\\treflectedLight.indirectSpecular += clearCoatInv * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\\\\n\\\\t#endif\\\\n\\\\t#ifndef STANDARD\\\\n\\\\t\\\\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\\\n\\\\t#endif\\\\n}\\\\n#define RE_Direct\\\\t\\\\t\\\\t\\\\tRE_Direct_Physical\\\\n#define RE_Direct_RectArea\\\\t\\\\tRE_Direct_RectArea_Physical\\\\n#define RE_IndirectDiffuse\\\\t\\\\tRE_IndirectDiffuse_Physical\\\\n#define RE_IndirectSpecular\\\\t\\\\tRE_IndirectSpecular_Physical\\\\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\\\\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\\\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\\\n\\\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\\\n}\\\";\\n\\nvar lights_fragment_begin = \\\"\\\\nGeometricContext geometry;\\\\ngeometry.position = - vViewPosition;\\\\ngeometry.normal = normal;\\\\ngeometry.viewDir = normalize( vViewPosition );\\\\nIncidentLight directLight;\\\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\\\n\\\\tPointLight pointLight;\\\\n\\\\t#pragma unroll_loop\\\\n\\\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\\\n\\\\t\\\\tpointLight = pointLights[ i ];\\\\n\\\\t\\\\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\\\n\\\\t\\\\t#ifdef USE_SHADOWMAP\\\\n\\\\t\\\\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\\\n\\\\t\\\\t#endif\\\\n\\\\t\\\\tRE_Direct( directLight, geometry, material, reflectedLight );\\\\n\\\\t}\\\\n#endif\\\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\\\n\\\\tSpotLight spotLight;\\\\n\\\\t#pragma unroll_loop\\\\n\\\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\\\n\\\\t\\\\tspotLight = spotLights[ i ];\\\\n\\\\t\\\\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\\\n\\\\t\\\\t#ifdef USE_SHADOWMAP\\\\n\\\\t\\\\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\\\n\\\\t\\\\t#endif\\\\n\\\\t\\\\tRE_Direct( directLight, geometry, material, reflectedLight );\\\\n\\\\t}\\\\n#endif\\\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\\\n\\\\tDirectionalLight directionalLight;\\\\n\\\\t#pragma unroll_loop\\\\n\\\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\\\n\\\\t\\\\tdirectionalLight = directionalLights[ i ];\\\\n\\\\t\\\\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\\\n\\\\t\\\\t#ifdef USE_SHADOWMAP\\\\n\\\\t\\\\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\\\n\\\\t\\\\t#endif\\\\n\\\\t\\\\tRE_Direct( directLight, geometry, material, reflectedLight );\\\\n\\\\t}\\\\n#endif\\\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\\\n\\\\tRectAreaLight rectAreaLight;\\\\n\\\\t#pragma unroll_loop\\\\n\\\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\\\n\\\\t\\\\trectAreaLight = rectAreaLights[ i ];\\\\n\\\\t\\\\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\\\\n\\\\t}\\\\n#endif\\\\n#if defined( RE_IndirectDiffuse )\\\\n\\\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\\\n\\\\t#if ( NUM_HEMI_LIGHTS > 0 )\\\\n\\\\t\\\\t#pragma unroll_loop\\\\n\\\\t\\\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\\\n\\\\t\\\\t\\\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\\\n\\\\t\\\\t}\\\\n\\\\t#endif\\\\n#endif\\\\n#if defined( RE_IndirectSpecular )\\\\n\\\\tvec3 radiance = vec3( 0.0 );\\\\n\\\\tvec3 clearCoatRadiance = vec3( 0.0 );\\\\n#endif\\\";\\n\\nvar lights_fragment_maps = \\\"#if defined( RE_IndirectDiffuse )\\\\n\\\\t#ifdef USE_LIGHTMAP\\\\n\\\\t\\\\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\\\n\\\\t\\\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\\\n\\\\t\\\\t\\\\tlightMapIrradiance *= PI;\\\\n\\\\t\\\\t#endif\\\\n\\\\t\\\\tirradiance += lightMapIrradiance;\\\\n\\\\t#endif\\\\n\\\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\\\\n\\\\t\\\\tirradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\\\\n\\\\t#endif\\\\n#endif\\\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\\\n\\\\tradiance += getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), maxMipLevel );\\\\n\\\\t#ifndef STANDARD\\\\n\\\\t\\\\tclearCoatRadiance += getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), maxMipLevel );\\\\n\\\\t#endif\\\\n#endif\\\";\\n\\nvar lights_fragment_end = \\\"#if defined( RE_IndirectDiffuse )\\\\n\\\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\\\n#endif\\\\n#if defined( RE_IndirectSpecular )\\\\n\\\\tRE_IndirectSpecular( radiance, irradiance, clearCoatRadiance, geometry, material, reflectedLight );\\\\n#endif\\\";\\n\\nvar logdepthbuf_fragment = \\\"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\\\n\\\\tgl_FragDepthEXT = log2( vFragDepth ) * logDepthBufFC * 0.5;\\\\n#endif\\\";\\n\\nvar logdepthbuf_pars_fragment = \\\"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\\\n\\\\tuniform float logDepthBufFC;\\\\n\\\\tvarying float vFragDepth;\\\\n#endif\\\";\\n\\nvar logdepthbuf_pars_vertex = \\\"#ifdef USE_LOGDEPTHBUF\\\\n\\\\t#ifdef USE_LOGDEPTHBUF_EXT\\\\n\\\\t\\\\tvarying float vFragDepth;\\\\n\\\\t#else\\\\n\\\\t\\\\tuniform float logDepthBufFC;\\\\n\\\\t#endif\\\\n#endif\\\";\\n\\nvar logdepthbuf_vertex = \\\"#ifdef USE_LOGDEPTHBUF\\\\n\\\\t#ifdef USE_LOGDEPTHBUF_EXT\\\\n\\\\t\\\\tvFragDepth = 1.0 + gl_Position.w;\\\\n\\\\t#else\\\\n\\\\t\\\\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\\\\n\\\\t\\\\tgl_Position.z *= gl_Position.w;\\\\n\\\\t#endif\\\\n#endif\\\";\\n\\nvar map_fragment = \\\"#ifdef USE_MAP\\\\n\\\\tvec4 texelColor = texture2D( map, vUv );\\\\n\\\\ttexelColor = mapTexelToLinear( texelColor );\\\\n\\\\tdiffuseColor *= texelColor;\\\\n#endif\\\";\\n\\nvar map_pars_fragment = \\\"#ifdef USE_MAP\\\\n\\\\tuniform sampler2D map;\\\\n#endif\\\";\\n\\nvar map_particle_fragment = \\\"#ifdef USE_MAP\\\\n\\\\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\\\\n\\\\tvec4 mapTexel = texture2D( map, uv );\\\\n\\\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\\\n#endif\\\";\\n\\nvar map_particle_pars_fragment = \\\"#ifdef USE_MAP\\\\n\\\\tuniform mat3 uvTransform;\\\\n\\\\tuniform sampler2D map;\\\\n#endif\\\";\\n\\nvar metalnessmap_fragment = \\\"float metalnessFactor = metalness;\\\\n#ifdef USE_METALNESSMAP\\\\n\\\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\\\n\\\\tmetalnessFactor *= texelMetalness.b;\\\\n#endif\\\";\\n\\nvar metalnessmap_pars_fragment = \\\"#ifdef USE_METALNESSMAP\\\\n\\\\tuniform sampler2D metalnessMap;\\\\n#endif\\\";\\n\\nvar morphnormal_vertex = \\\"#ifdef USE_MORPHNORMALS\\\\n\\\\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\\\\n\\\\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\\\\n\\\\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\\\\n\\\\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\\\\n#endif\\\";\\n\\nvar morphtarget_pars_vertex = \\\"#ifdef USE_MORPHTARGETS\\\\n\\\\t#ifndef USE_MORPHNORMALS\\\\n\\\\tuniform float morphTargetInfluences[ 8 ];\\\\n\\\\t#else\\\\n\\\\tuniform float morphTargetInfluences[ 4 ];\\\\n\\\\t#endif\\\\n#endif\\\";\\n\\nvar morphtarget_vertex = \\\"#ifdef USE_MORPHTARGETS\\\\n\\\\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\\\\n\\\\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\\\\n\\\\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\\\\n\\\\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\\\\n\\\\t#ifndef USE_MORPHNORMALS\\\\n\\\\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\\\\n\\\\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\\\\n\\\\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\\\\n\\\\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\\\\n\\\\t#endif\\\\n#endif\\\";\\n\\nvar normal_fragment_begin = \\\"#ifdef FLAT_SHADED\\\\n\\\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\\\n\\\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\\\n\\\\tvec3 normal = normalize( cross( fdx, fdy ) );\\\\n#else\\\\n\\\\tvec3 normal = normalize( vNormal );\\\\n\\\\t#ifdef DOUBLE_SIDED\\\\n\\\\t\\\\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\\\n\\\\t#endif\\\\n#endif\\\";\\n\\nvar normal_fragment_maps = \\\"#ifdef USE_NORMALMAP\\\\n\\\\t#ifdef OBJECTSPACE_NORMALMAP\\\\n\\\\t\\\\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\\\n\\\\t\\\\t#ifdef FLIP_SIDED\\\\n\\\\t\\\\t\\\\tnormal = - normal;\\\\n\\\\t\\\\t#endif\\\\n\\\\t\\\\t#ifdef DOUBLE_SIDED\\\\n\\\\t\\\\t\\\\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\\\n\\\\t\\\\t#endif\\\\n\\\\t\\\\tnormal = normalize( normalMatrix * normal );\\\\n\\\\t#else\\\\n\\\\t\\\\tnormal = perturbNormal2Arb( -vViewPosition, normal );\\\\n\\\\t#endif\\\\n#elif defined( USE_BUMPMAP )\\\\n\\\\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\\\n#endif\\\";\\n\\nvar normalmap_pars_fragment = \\\"#ifdef USE_NORMALMAP\\\\n\\\\tuniform sampler2D normalMap;\\\\n\\\\tuniform vec2 normalScale;\\\\n\\\\t#ifdef OBJECTSPACE_NORMALMAP\\\\n\\\\t\\\\tuniform mat3 normalMatrix;\\\\n\\\\t#else\\\\n\\\\t\\\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\\\\n\\\\t\\\\t\\\\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\\\\n\\\\t\\\\t\\\\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\\\\n\\\\t\\\\t\\\\tvec2 st0 = dFdx( vUv.st );\\\\n\\\\t\\\\t\\\\tvec2 st1 = dFdy( vUv.st );\\\\n\\\\t\\\\t\\\\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\\\\n\\\\t\\\\t\\\\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\\\\n\\\\t\\\\t\\\\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\\\\n\\\\t\\\\t\\\\tvec3 N = normalize( surf_norm );\\\\n\\\\t\\\\t\\\\tmat3 tsn = mat3( S, T, N );\\\\n\\\\t\\\\t\\\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\\\n\\\\t\\\\t\\\\tmapN.xy *= normalScale;\\\\n\\\\t\\\\t\\\\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\\\n\\\\t\\\\t\\\\treturn normalize( tsn * mapN );\\\\n\\\\t\\\\t}\\\\n\\\\t#endif\\\\n#endif\\\";\\n\\nvar packing = \\\"vec3 packNormalToRGB( const in vec3 normal ) {\\\\n\\\\treturn normalize( normal ) * 0.5 + 0.5;\\\\n}\\\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\\\n\\\\treturn 2.0 * rgb.xyz - 1.0;\\\\n}\\\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\\\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\\\nconst float ShiftRight8 = 1. / 256.;\\\\nvec4 packDepthToRGBA( const in float v ) {\\\\n\\\\tvec4 r = vec4( fract( v * PackFactors ), v );\\\\n\\\\tr.yzw -= r.xyz * ShiftRight8;\\\\treturn r * PackUpscale;\\\\n}\\\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\\\n\\\\treturn dot( v, UnpackFactors );\\\\n}\\\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\\\n\\\\treturn ( viewZ + near ) / ( near - far );\\\\n}\\\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\\\n\\\\treturn linearClipZ * ( near - far ) - near;\\\\n}\\\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\\\n\\\\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\\\n}\\\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\\\n\\\\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\\\\n}\\\";\\n\\nvar premultiplied_alpha_fragment = \\\"#ifdef PREMULTIPLIED_ALPHA\\\\n\\\\tgl_FragColor.rgb *= gl_FragColor.a;\\\\n#endif\\\";\\n\\nvar project_vertex = \\\"vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\\\\ngl_Position = projectionMatrix * mvPosition;\\\";\\n\\nvar dithering_fragment = \\\"#if defined( DITHERING )\\\\n  gl_FragColor.rgb = dithering( gl_FragColor.rgb );\\\\n#endif\\\";\\n\\nvar dithering_pars_fragment = \\\"#if defined( DITHERING )\\\\n\\\\tvec3 dithering( vec3 color ) {\\\\n\\\\t\\\\tfloat grid_position = rand( gl_FragCoord.xy );\\\\n\\\\t\\\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\\\n\\\\t\\\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\\\n\\\\t\\\\treturn color + dither_shift_RGB;\\\\n\\\\t}\\\\n#endif\\\";\\n\\nvar roughnessmap_fragment = \\\"float roughnessFactor = roughness;\\\\n#ifdef USE_ROUGHNESSMAP\\\\n\\\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\\\n\\\\troughnessFactor *= texelRoughness.g;\\\\n#endif\\\";\\n\\nvar roughnessmap_pars_fragment = \\\"#ifdef USE_ROUGHNESSMAP\\\\n\\\\tuniform sampler2D roughnessMap;\\\\n#endif\\\";\\n\\nvar shadowmap_pars_fragment = \\\"#ifdef USE_SHADOWMAP\\\\n\\\\t#if NUM_DIR_LIGHTS > 0\\\\n\\\\t\\\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\\\\n\\\\t\\\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\\\n\\\\t#endif\\\\n\\\\t#if NUM_SPOT_LIGHTS > 0\\\\n\\\\t\\\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\\\\n\\\\t\\\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\\\n\\\\t#endif\\\\n\\\\t#if NUM_POINT_LIGHTS > 0\\\\n\\\\t\\\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\\\\n\\\\t\\\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\\\n\\\\t#endif\\\\n\\\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\\\n\\\\t\\\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\\\n\\\\t}\\\\n\\\\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\\\\n\\\\t\\\\tconst vec2 offset = vec2( 0.0, 1.0 );\\\\n\\\\t\\\\tvec2 texelSize = vec2( 1.0 ) / size;\\\\n\\\\t\\\\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\\\\n\\\\t\\\\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\\\\n\\\\t\\\\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\\\\n\\\\t\\\\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\\\\n\\\\t\\\\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\\\\n\\\\t\\\\tvec2 f = fract( uv * size + 0.5 );\\\\n\\\\t\\\\tfloat a = mix( lb, lt, f.y );\\\\n\\\\t\\\\tfloat b = mix( rb, rt, f.y );\\\\n\\\\t\\\\tfloat c = mix( a, b, f.x );\\\\n\\\\t\\\\treturn c;\\\\n\\\\t}\\\\n\\\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\\\n\\\\t\\\\tfloat shadow = 1.0;\\\\n\\\\t\\\\tshadowCoord.xyz /= shadowCoord.w;\\\\n\\\\t\\\\tshadowCoord.z += shadowBias;\\\\n\\\\t\\\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\\\n\\\\t\\\\tbool inFrustum = all( inFrustumVec );\\\\n\\\\t\\\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\\\n\\\\t\\\\tbool frustumTest = all( frustumTestVec );\\\\n\\\\t\\\\tif ( frustumTest ) {\\\\n\\\\t\\\\t#if defined( SHADOWMAP_TYPE_PCF )\\\\n\\\\t\\\\t\\\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\\\n\\\\t\\\\t\\\\tfloat dx0 = - texelSize.x * shadowRadius;\\\\n\\\\t\\\\t\\\\tfloat dy0 = - texelSize.y * shadowRadius;\\\\n\\\\t\\\\t\\\\tfloat dx1 = + texelSize.x * shadowRadius;\\\\n\\\\t\\\\t\\\\tfloat dy1 = + texelSize.y * shadowRadius;\\\\n\\\\t\\\\t\\\\tshadow = (\\\\n\\\\t\\\\t\\\\t\\\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\\\n\\\\t\\\\t\\\\t\\\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\\\n\\\\t\\\\t\\\\t\\\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\\\n\\\\t\\\\t\\\\t\\\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\\\n\\\\t\\\\t\\\\t\\\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\\\n\\\\t\\\\t\\\\t\\\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\\\n\\\\t\\\\t\\\\t\\\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\\\n\\\\t\\\\t\\\\t\\\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\\\n\\\\t\\\\t\\\\t\\\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\\\n\\\\t\\\\t\\\\t) * ( 1.0 / 9.0 );\\\\n\\\\t\\\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\\\n\\\\t\\\\t\\\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\\\n\\\\t\\\\t\\\\tfloat dx0 = - texelSize.x * shadowRadius;\\\\n\\\\t\\\\t\\\\tfloat dy0 = - texelSize.y * shadowRadius;\\\\n\\\\t\\\\t\\\\tfloat dx1 = + texelSize.x * shadowRadius;\\\\n\\\\t\\\\t\\\\tfloat dy1 = + texelSize.y * shadowRadius;\\\\n\\\\t\\\\t\\\\tshadow = (\\\\n\\\\t\\\\t\\\\t\\\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\\\n\\\\t\\\\t\\\\t\\\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\\\n\\\\t\\\\t\\\\t\\\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\\\n\\\\t\\\\t\\\\t\\\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\\\n\\\\t\\\\t\\\\t\\\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\\\\n\\\\t\\\\t\\\\t\\\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\\\n\\\\t\\\\t\\\\t\\\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\\\n\\\\t\\\\t\\\\t\\\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\\\n\\\\t\\\\t\\\\t\\\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\\\n\\\\t\\\\t\\\\t) * ( 1.0 / 9.0 );\\\\n\\\\t\\\\t#else\\\\n\\\\t\\\\t\\\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\\\n\\\\t\\\\t#endif\\\\n\\\\t\\\\t}\\\\n\\\\t\\\\treturn shadow;\\\\n\\\\t}\\\\n\\\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\\\n\\\\t\\\\tvec3 absV = abs( v );\\\\n\\\\t\\\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\\\n\\\\t\\\\tabsV *= scaleToCube;\\\\n\\\\t\\\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\\\n\\\\t\\\\tvec2 planar = v.xy;\\\\n\\\\t\\\\tfloat almostATexel = 1.5 * texelSizeY;\\\\n\\\\t\\\\tfloat almostOne = 1.0 - almostATexel;\\\\n\\\\t\\\\tif ( absV.z >= almostOne ) {\\\\n\\\\t\\\\t\\\\tif ( v.z > 0.0 )\\\\n\\\\t\\\\t\\\\t\\\\tplanar.x = 4.0 - v.x;\\\\n\\\\t\\\\t} else if ( absV.x >= almostOne ) {\\\\n\\\\t\\\\t\\\\tfloat signX = sign( v.x );\\\\n\\\\t\\\\t\\\\tplanar.x = v.z * signX + 2.0 * signX;\\\\n\\\\t\\\\t} else if ( absV.y >= almostOne ) {\\\\n\\\\t\\\\t\\\\tfloat signY = sign( v.y );\\\\n\\\\t\\\\t\\\\tplanar.x = v.x + 2.0 * signY + 2.0;\\\\n\\\\t\\\\t\\\\tplanar.y = v.z * signY - 2.0;\\\\n\\\\t\\\\t}\\\\n\\\\t\\\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\\\n\\\\t}\\\\n\\\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\\\\n\\\\t\\\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\\\n\\\\t\\\\tvec3 lightToPosition = shadowCoord.xyz;\\\\n\\\\t\\\\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\\\\t\\\\tdp += shadowBias;\\\\n\\\\t\\\\tvec3 bd3D = normalize( lightToPosition );\\\\n\\\\t\\\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\\\\n\\\\t\\\\t\\\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\\\n\\\\t\\\\t\\\\treturn (\\\\n\\\\t\\\\t\\\\t\\\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\\\n\\\\t\\\\t\\\\t\\\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\\\n\\\\t\\\\t\\\\t\\\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\\\n\\\\t\\\\t\\\\t\\\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\\\n\\\\t\\\\t\\\\t\\\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\\\n\\\\t\\\\t\\\\t\\\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\\\n\\\\t\\\\t\\\\t\\\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\\\n\\\\t\\\\t\\\\t\\\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\\\n\\\\t\\\\t\\\\t\\\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\\\n\\\\t\\\\t\\\\t) * ( 1.0 / 9.0 );\\\\n\\\\t\\\\t#else\\\\n\\\\t\\\\t\\\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\\\n\\\\t\\\\t#endif\\\\n\\\\t}\\\\n#endif\\\";\\n\\nvar shadowmap_pars_vertex = \\\"#ifdef USE_SHADOWMAP\\\\n\\\\t#if NUM_DIR_LIGHTS > 0\\\\n\\\\t\\\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\\\\n\\\\t\\\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\\\n\\\\t#endif\\\\n\\\\t#if NUM_SPOT_LIGHTS > 0\\\\n\\\\t\\\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\\\\n\\\\t\\\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\\\n\\\\t#endif\\\\n\\\\t#if NUM_POINT_LIGHTS > 0\\\\n\\\\t\\\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\\\\n\\\\t\\\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\\\n\\\\t#endif\\\\n#endif\\\";\\n\\nvar shadowmap_vertex = \\\"#ifdef USE_SHADOWMAP\\\\n\\\\t#if NUM_DIR_LIGHTS > 0\\\\n\\\\t#pragma unroll_loop\\\\n\\\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\\\n\\\\t\\\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\\\\n\\\\t}\\\\n\\\\t#endif\\\\n\\\\t#if NUM_SPOT_LIGHTS > 0\\\\n\\\\t#pragma unroll_loop\\\\n\\\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\\\n\\\\t\\\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\\\\n\\\\t}\\\\n\\\\t#endif\\\\n\\\\t#if NUM_POINT_LIGHTS > 0\\\\n\\\\t#pragma unroll_loop\\\\n\\\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\\\n\\\\t\\\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\\\\n\\\\t}\\\\n\\\\t#endif\\\\n#endif\\\";\\n\\nvar shadowmask_pars_fragment = \\\"float getShadowMask() {\\\\n\\\\tfloat shadow = 1.0;\\\\n\\\\t#ifdef USE_SHADOWMAP\\\\n\\\\t#if NUM_DIR_LIGHTS > 0\\\\n\\\\tDirectionalLight directionalLight;\\\\n\\\\t#pragma unroll_loop\\\\n\\\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\\\n\\\\t\\\\tdirectionalLight = directionalLights[ i ];\\\\n\\\\t\\\\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\\\n\\\\t}\\\\n\\\\t#endif\\\\n\\\\t#if NUM_SPOT_LIGHTS > 0\\\\n\\\\tSpotLight spotLight;\\\\n\\\\t#pragma unroll_loop\\\\n\\\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\\\n\\\\t\\\\tspotLight = spotLights[ i ];\\\\n\\\\t\\\\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\\\n\\\\t}\\\\n\\\\t#endif\\\\n\\\\t#if NUM_POINT_LIGHTS > 0\\\\n\\\\tPointLight pointLight;\\\\n\\\\t#pragma unroll_loop\\\\n\\\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\\\n\\\\t\\\\tpointLight = pointLights[ i ];\\\\n\\\\t\\\\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\\\n\\\\t}\\\\n\\\\t#endif\\\\n\\\\t#endif\\\\n\\\\treturn shadow;\\\\n}\\\";\\n\\nvar skinbase_vertex = \\\"#ifdef USE_SKINNING\\\\n\\\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\\\n\\\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\\\n\\\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\\\n\\\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\\\n#endif\\\";\\n\\nvar skinning_pars_vertex = \\\"#ifdef USE_SKINNING\\\\n\\\\tuniform mat4 bindMatrix;\\\\n\\\\tuniform mat4 bindMatrixInverse;\\\\n\\\\t#ifdef BONE_TEXTURE\\\\n\\\\t\\\\tuniform sampler2D boneTexture;\\\\n\\\\t\\\\tuniform int boneTextureSize;\\\\n\\\\t\\\\tmat4 getBoneMatrix( const in float i ) {\\\\n\\\\t\\\\t\\\\tfloat j = i * 4.0;\\\\n\\\\t\\\\t\\\\tfloat x = mod( j, float( boneTextureSize ) );\\\\n\\\\t\\\\t\\\\tfloat y = floor( j / float( boneTextureSize ) );\\\\n\\\\t\\\\t\\\\tfloat dx = 1.0 / float( boneTextureSize );\\\\n\\\\t\\\\t\\\\tfloat dy = 1.0 / float( boneTextureSize );\\\\n\\\\t\\\\t\\\\ty = dy * ( y + 0.5 );\\\\n\\\\t\\\\t\\\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\\\n\\\\t\\\\t\\\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\\\n\\\\t\\\\t\\\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\\\n\\\\t\\\\t\\\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\\\n\\\\t\\\\t\\\\tmat4 bone = mat4( v1, v2, v3, v4 );\\\\n\\\\t\\\\t\\\\treturn bone;\\\\n\\\\t\\\\t}\\\\n\\\\t#else\\\\n\\\\t\\\\tuniform mat4 boneMatrices[ MAX_BONES ];\\\\n\\\\t\\\\tmat4 getBoneMatrix( const in float i ) {\\\\n\\\\t\\\\t\\\\tmat4 bone = boneMatrices[ int(i) ];\\\\n\\\\t\\\\t\\\\treturn bone;\\\\n\\\\t\\\\t}\\\\n\\\\t#endif\\\\n#endif\\\";\\n\\nvar skinning_vertex = \\\"#ifdef USE_SKINNING\\\\n\\\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\\\n\\\\tvec4 skinned = vec4( 0.0 );\\\\n\\\\tskinned += boneMatX * skinVertex * skinWeight.x;\\\\n\\\\tskinned += boneMatY * skinVertex * skinWeight.y;\\\\n\\\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\\\n\\\\tskinned += boneMatW * skinVertex * skinWeight.w;\\\\n\\\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\\\n#endif\\\";\\n\\nvar skinnormal_vertex = \\\"#ifdef USE_SKINNING\\\\n\\\\tmat4 skinMatrix = mat4( 0.0 );\\\\n\\\\tskinMatrix += skinWeight.x * boneMatX;\\\\n\\\\tskinMatrix += skinWeight.y * boneMatY;\\\\n\\\\tskinMatrix += skinWeight.z * boneMatZ;\\\\n\\\\tskinMatrix += skinWeight.w * boneMatW;\\\\n\\\\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\\\\n\\\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\\\n#endif\\\";\\n\\nvar specularmap_fragment = \\\"float specularStrength;\\\\n#ifdef USE_SPECULARMAP\\\\n\\\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\\\n\\\\tspecularStrength = texelSpecular.r;\\\\n#else\\\\n\\\\tspecularStrength = 1.0;\\\\n#endif\\\";\\n\\nvar specularmap_pars_fragment = \\\"#ifdef USE_SPECULARMAP\\\\n\\\\tuniform sampler2D specularMap;\\\\n#endif\\\";\\n\\nvar tonemapping_fragment = \\\"#if defined( TONE_MAPPING )\\\\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\\\n#endif\\\";\\n\\nvar tonemapping_pars_fragment = \\\"#ifndef saturate\\\\n\\\\t#define saturate(a) clamp( a, 0.0, 1.0 )\\\\n#endif\\\\nuniform float toneMappingExposure;\\\\nuniform float toneMappingWhitePoint;\\\\nvec3 LinearToneMapping( vec3 color ) {\\\\n\\\\treturn toneMappingExposure * color;\\\\n}\\\\nvec3 ReinhardToneMapping( vec3 color ) {\\\\n\\\\tcolor *= toneMappingExposure;\\\\n\\\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\\\n}\\\\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\\\\nvec3 Uncharted2ToneMapping( vec3 color ) {\\\\n\\\\tcolor *= toneMappingExposure;\\\\n\\\\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\\\\n}\\\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\\\n\\\\tcolor *= toneMappingExposure;\\\\n\\\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\\\n\\\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\\\n}\\\\nvec3 ACESFilmicToneMapping( vec3 color ) {\\\\n\\\\tcolor *= toneMappingExposure;\\\\n\\\\treturn saturate( ( color * ( 2.51 * color + 0.03 ) ) / ( color * ( 2.43 * color + 0.59 ) + 0.14 ) );\\\\n}\\\";\\n\\nvar uv_pars_fragment = \\\"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\\\n\\\\tvarying vec2 vUv;\\\\n#endif\\\";\\n\\nvar uv_pars_vertex = \\\"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\\\n\\\\tvarying vec2 vUv;\\\\n\\\\tuniform mat3 uvTransform;\\\\n#endif\\\";\\n\\nvar uv_vertex = \\\"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\\\n\\\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\\\n#endif\\\";\\n\\nvar uv2_pars_fragment = \\\"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\\\n\\\\tvarying vec2 vUv2;\\\\n#endif\\\";\\n\\nvar uv2_pars_vertex = \\\"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\\\n\\\\tattribute vec2 uv2;\\\\n\\\\tvarying vec2 vUv2;\\\\n#endif\\\";\\n\\nvar uv2_vertex = \\\"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\\\n\\\\tvUv2 = uv2;\\\\n#endif\\\";\\n\\nvar worldpos_vertex = \\\"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\\\\n\\\\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\\\\n#endif\\\";\\n\\nvar background_frag = \\\"uniform sampler2D t2D;\\\\nvarying vec2 vUv;\\\\nvoid main() {\\\\n\\\\tvec4 texColor = texture2D( t2D, vUv );\\\\n\\\\tgl_FragColor = mapTexelToLinear( texColor );\\\\n\\\\t#include <tonemapping_fragment>\\\\n\\\\t#include <encodings_fragment>\\\\n}\\\";\\n\\nvar background_vert = \\\"varying vec2 vUv;\\\\nuniform mat3 uvTransform;\\\\nvoid main() {\\\\n\\\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\\\n\\\\tgl_Position = vec4( position.xy, 1.0, 1.0 );\\\\n}\\\";\\n\\nvar cube_frag = \\\"uniform samplerCube tCube;\\\\nuniform float tFlip;\\\\nuniform float opacity;\\\\nvarying vec3 vWorldDirection;\\\\nvoid main() {\\\\n\\\\tvec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\\\\n\\\\tgl_FragColor = mapTexelToLinear( texColor );\\\\n\\\\tgl_FragColor.a *= opacity;\\\\n\\\\t#include <tonemapping_fragment>\\\\n\\\\t#include <encodings_fragment>\\\\n}\\\";\\n\\nvar cube_vert = \\\"varying vec3 vWorldDirection;\\\\n#include <common>\\\\nvoid main() {\\\\n\\\\tvWorldDirection = transformDirection( position, modelMatrix );\\\\n\\\\t#include <begin_vertex>\\\\n\\\\t#include <project_vertex>\\\\n\\\\tgl_Position.z = gl_Position.w;\\\\n}\\\";\\n\\nvar depth_frag = \\\"#if DEPTH_PACKING == 3200\\\\n\\\\tuniform float opacity;\\\\n#endif\\\\n#include <common>\\\\n#include <packing>\\\\n#include <uv_pars_fragment>\\\\n#include <map_pars_fragment>\\\\n#include <alphamap_pars_fragment>\\\\n#include <logdepthbuf_pars_fragment>\\\\n#include <clipping_planes_pars_fragment>\\\\nvoid main() {\\\\n\\\\t#include <clipping_planes_fragment>\\\\n\\\\tvec4 diffuseColor = vec4( 1.0 );\\\\n\\\\t#if DEPTH_PACKING == 3200\\\\n\\\\t\\\\tdiffuseColor.a = opacity;\\\\n\\\\t#endif\\\\n\\\\t#include <map_fragment>\\\\n\\\\t#include <alphamap_fragment>\\\\n\\\\t#include <alphatest_fragment>\\\\n\\\\t#include <logdepthbuf_fragment>\\\\n\\\\t#if DEPTH_PACKING == 3200\\\\n\\\\t\\\\tgl_FragColor = vec4( vec3( 1.0 - gl_FragCoord.z ), opacity );\\\\n\\\\t#elif DEPTH_PACKING == 3201\\\\n\\\\t\\\\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\\\\n\\\\t#endif\\\\n}\\\";\\n\\nvar depth_vert = \\\"#include <common>\\\\n#include <uv_pars_vertex>\\\\n#include <displacementmap_pars_vertex>\\\\n#include <morphtarget_pars_vertex>\\\\n#include <skinning_pars_vertex>\\\\n#include <logdepthbuf_pars_vertex>\\\\n#include <clipping_planes_pars_vertex>\\\\nvoid main() {\\\\n\\\\t#include <uv_vertex>\\\\n\\\\t#include <skinbase_vertex>\\\\n\\\\t#ifdef USE_DISPLACEMENTMAP\\\\n\\\\t\\\\t#include <beginnormal_vertex>\\\\n\\\\t\\\\t#include <morphnormal_vertex>\\\\n\\\\t\\\\t#include <skinnormal_vertex>\\\\n\\\\t#endif\\\\n\\\\t#include <begin_vertex>\\\\n\\\\t#include <morphtarget_vertex>\\\\n\\\\t#include <skinning_vertex>\\\\n\\\\t#include <displacementmap_vertex>\\\\n\\\\t#include <project_vertex>\\\\n\\\\t#include <logdepthbuf_vertex>\\\\n\\\\t#include <clipping_planes_vertex>\\\\n}\\\";\\n\\nvar distanceRGBA_frag = \\\"#define DISTANCE\\\\nuniform vec3 referencePosition;\\\\nuniform float nearDistance;\\\\nuniform float farDistance;\\\\nvarying vec3 vWorldPosition;\\\\n#include <common>\\\\n#include <packing>\\\\n#include <uv_pars_fragment>\\\\n#include <map_pars_fragment>\\\\n#include <alphamap_pars_fragment>\\\\n#include <clipping_planes_pars_fragment>\\\\nvoid main () {\\\\n\\\\t#include <clipping_planes_fragment>\\\\n\\\\tvec4 diffuseColor = vec4( 1.0 );\\\\n\\\\t#include <map_fragment>\\\\n\\\\t#include <alphamap_fragment>\\\\n\\\\t#include <alphatest_fragment>\\\\n\\\\tfloat dist = length( vWorldPosition - referencePosition );\\\\n\\\\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\\\\n\\\\tdist = saturate( dist );\\\\n\\\\tgl_FragColor = packDepthToRGBA( dist );\\\\n}\\\";\\n\\nvar distanceRGBA_vert = \\\"#define DISTANCE\\\\nvarying vec3 vWorldPosition;\\\\n#include <common>\\\\n#include <uv_pars_vertex>\\\\n#include <displacementmap_pars_vertex>\\\\n#include <morphtarget_pars_vertex>\\\\n#include <skinning_pars_vertex>\\\\n#include <clipping_planes_pars_vertex>\\\\nvoid main() {\\\\n\\\\t#include <uv_vertex>\\\\n\\\\t#include <skinbase_vertex>\\\\n\\\\t#ifdef USE_DISPLACEMENTMAP\\\\n\\\\t\\\\t#include <beginnormal_vertex>\\\\n\\\\t\\\\t#include <morphnormal_vertex>\\\\n\\\\t\\\\t#include <skinnormal_vertex>\\\\n\\\\t#endif\\\\n\\\\t#include <begin_vertex>\\\\n\\\\t#include <morphtarget_vertex>\\\\n\\\\t#include <skinning_vertex>\\\\n\\\\t#include <displacementmap_vertex>\\\\n\\\\t#include <project_vertex>\\\\n\\\\t#include <worldpos_vertex>\\\\n\\\\t#include <clipping_planes_vertex>\\\\n\\\\tvWorldPosition = worldPosition.xyz;\\\\n}\\\";\\n\\nvar equirect_frag = \\\"uniform sampler2D tEquirect;\\\\nvarying vec3 vWorldDirection;\\\\n#include <common>\\\\nvoid main() {\\\\n\\\\tvec3 direction = normalize( vWorldDirection );\\\\n\\\\tvec2 sampleUV;\\\\n\\\\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\\\n\\\\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\\\\n\\\\tvec4 texColor = texture2D( tEquirect, sampleUV );\\\\n\\\\tgl_FragColor = mapTexelToLinear( texColor );\\\\n\\\\t#include <tonemapping_fragment>\\\\n\\\\t#include <encodings_fragment>\\\\n}\\\";\\n\\nvar equirect_vert = \\\"varying vec3 vWorldDirection;\\\\n#include <common>\\\\nvoid main() {\\\\n\\\\tvWorldDirection = transformDirection( position, modelMatrix );\\\\n\\\\t#include <begin_vertex>\\\\n\\\\t#include <project_vertex>\\\\n}\\\";\\n\\nvar linedashed_frag = \\\"uniform vec3 diffuse;\\\\nuniform float opacity;\\\\nuniform float dashSize;\\\\nuniform float totalSize;\\\\nvarying float vLineDistance;\\\\n#include <common>\\\\n#include <color_pars_fragment>\\\\n#include <fog_pars_fragment>\\\\n#include <logdepthbuf_pars_fragment>\\\\n#include <clipping_planes_pars_fragment>\\\\nvoid main() {\\\\n\\\\t#include <clipping_planes_fragment>\\\\n\\\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\\\n\\\\t\\\\tdiscard;\\\\n\\\\t}\\\\n\\\\tvec3 outgoingLight = vec3( 0.0 );\\\\n\\\\tvec4 diffuseColor = vec4( diffuse, opacity );\\\\n\\\\t#include <logdepthbuf_fragment>\\\\n\\\\t#include <color_fragment>\\\\n\\\\toutgoingLight = diffuseColor.rgb;\\\\n\\\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\\\n\\\\t#include <premultiplied_alpha_fragment>\\\\n\\\\t#include <tonemapping_fragment>\\\\n\\\\t#include <encodings_fragment>\\\\n\\\\t#include <fog_fragment>\\\\n}\\\";\\n\\nvar linedashed_vert = \\\"uniform float scale;\\\\nattribute float lineDistance;\\\\nvarying float vLineDistance;\\\\n#include <common>\\\\n#include <color_pars_vertex>\\\\n#include <fog_pars_vertex>\\\\n#include <logdepthbuf_pars_vertex>\\\\n#include <clipping_planes_pars_vertex>\\\\nvoid main() {\\\\n\\\\t#include <color_vertex>\\\\n\\\\tvLineDistance = scale * lineDistance;\\\\n\\\\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\\\n\\\\tgl_Position = projectionMatrix * mvPosition;\\\\n\\\\t#include <logdepthbuf_vertex>\\\\n\\\\t#include <clipping_planes_vertex>\\\\n\\\\t#include <fog_vertex>\\\\n}\\\";\\n\\nvar meshbasic_frag = \\\"uniform vec3 diffuse;\\\\nuniform float opacity;\\\\n#ifndef FLAT_SHADED\\\\n\\\\tvarying vec3 vNormal;\\\\n#endif\\\\n#include <common>\\\\n#include <color_pars_fragment>\\\\n#include <uv_pars_fragment>\\\\n#include <uv2_pars_fragment>\\\\n#include <map_pars_fragment>\\\\n#include <alphamap_pars_fragment>\\\\n#include <aomap_pars_fragment>\\\\n#include <lightmap_pars_fragment>\\\\n#include <envmap_pars_fragment>\\\\n#include <fog_pars_fragment>\\\\n#include <specularmap_pars_fragment>\\\\n#include <logdepthbuf_pars_fragment>\\\\n#include <clipping_planes_pars_fragment>\\\\nvoid main() {\\\\n\\\\t#include <clipping_planes_fragment>\\\\n\\\\tvec4 diffuseColor = vec4( diffuse, opacity );\\\\n\\\\t#include <logdepthbuf_fragment>\\\\n\\\\t#include <map_fragment>\\\\n\\\\t#include <color_fragment>\\\\n\\\\t#include <alphamap_fragment>\\\\n\\\\t#include <alphatest_fragment>\\\\n\\\\t#include <specularmap_fragment>\\\\n\\\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\\\n\\\\t#ifdef USE_LIGHTMAP\\\\n\\\\t\\\\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\\\n\\\\t#else\\\\n\\\\t\\\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\\\n\\\\t#endif\\\\n\\\\t#include <aomap_fragment>\\\\n\\\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\\\n\\\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\\\n\\\\t#include <envmap_fragment>\\\\n\\\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\\\n\\\\t#include <premultiplied_alpha_fragment>\\\\n\\\\t#include <tonemapping_fragment>\\\\n\\\\t#include <encodings_fragment>\\\\n\\\\t#include <fog_fragment>\\\\n}\\\";\\n\\nvar meshbasic_vert = \\\"#include <common>\\\\n#include <uv_pars_vertex>\\\\n#include <uv2_pars_vertex>\\\\n#include <envmap_pars_vertex>\\\\n#include <color_pars_vertex>\\\\n#include <fog_pars_vertex>\\\\n#include <morphtarget_pars_vertex>\\\\n#include <skinning_pars_vertex>\\\\n#include <logdepthbuf_pars_vertex>\\\\n#include <clipping_planes_pars_vertex>\\\\nvoid main() {\\\\n\\\\t#include <uv_vertex>\\\\n\\\\t#include <uv2_vertex>\\\\n\\\\t#include <color_vertex>\\\\n\\\\t#include <skinbase_vertex>\\\\n\\\\t#ifdef USE_ENVMAP\\\\n\\\\t#include <beginnormal_vertex>\\\\n\\\\t#include <morphnormal_vertex>\\\\n\\\\t#include <skinnormal_vertex>\\\\n\\\\t#include <defaultnormal_vertex>\\\\n\\\\t#endif\\\\n\\\\t#include <begin_vertex>\\\\n\\\\t#include <morphtarget_vertex>\\\\n\\\\t#include <skinning_vertex>\\\\n\\\\t#include <project_vertex>\\\\n\\\\t#include <logdepthbuf_vertex>\\\\n\\\\t#include <worldpos_vertex>\\\\n\\\\t#include <clipping_planes_vertex>\\\\n\\\\t#include <envmap_vertex>\\\\n\\\\t#include <fog_vertex>\\\\n}\\\";\\n\\nvar meshlambert_frag = \\\"uniform vec3 diffuse;\\\\nuniform vec3 emissive;\\\\nuniform float opacity;\\\\nvarying vec3 vLightFront;\\\\nvarying vec3 vIndirectFront;\\\\n#ifdef DOUBLE_SIDED\\\\n\\\\tvarying vec3 vLightBack;\\\\n\\\\tvarying vec3 vIndirectBack;\\\\n#endif\\\\n#include <common>\\\\n#include <packing>\\\\n#include <dithering_pars_fragment>\\\\n#include <color_pars_fragment>\\\\n#include <uv_pars_fragment>\\\\n#include <uv2_pars_fragment>\\\\n#include <map_pars_fragment>\\\\n#include <alphamap_pars_fragment>\\\\n#include <aomap_pars_fragment>\\\\n#include <lightmap_pars_fragment>\\\\n#include <emissivemap_pars_fragment>\\\\n#include <envmap_pars_fragment>\\\\n#include <bsdfs>\\\\n#include <lights_pars_begin>\\\\n#include <fog_pars_fragment>\\\\n#include <shadowmap_pars_fragment>\\\\n#include <shadowmask_pars_fragment>\\\\n#include <specularmap_pars_fragment>\\\\n#include <logdepthbuf_pars_fragment>\\\\n#include <clipping_planes_pars_fragment>\\\\nvoid main() {\\\\n\\\\t#include <clipping_planes_fragment>\\\\n\\\\tvec4 diffuseColor = vec4( diffuse, opacity );\\\\n\\\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\\\n\\\\tvec3 totalEmissiveRadiance = emissive;\\\\n\\\\t#include <logdepthbuf_fragment>\\\\n\\\\t#include <map_fragment>\\\\n\\\\t#include <color_fragment>\\\\n\\\\t#include <alphamap_fragment>\\\\n\\\\t#include <alphatest_fragment>\\\\n\\\\t#include <specularmap_fragment>\\\\n\\\\t#include <emissivemap_fragment>\\\\n\\\\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\\\\n\\\\t#ifdef DOUBLE_SIDED\\\\n\\\\t\\\\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\\\\n\\\\t#else\\\\n\\\\t\\\\treflectedLight.indirectDiffuse += vIndirectFront;\\\\n\\\\t#endif\\\\n\\\\t#include <lightmap_fragment>\\\\n\\\\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\\\n\\\\t#ifdef DOUBLE_SIDED\\\\n\\\\t\\\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\\\n\\\\t#else\\\\n\\\\t\\\\treflectedLight.directDiffuse = vLightFront;\\\\n\\\\t#endif\\\\n\\\\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\\\n\\\\t#include <aomap_fragment>\\\\n\\\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\\\n\\\\t#include <envmap_fragment>\\\\n\\\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\\\n\\\\t#include <tonemapping_fragment>\\\\n\\\\t#include <encodings_fragment>\\\\n\\\\t#include <fog_fragment>\\\\n\\\\t#include <premultiplied_alpha_fragment>\\\\n\\\\t#include <dithering_fragment>\\\\n}\\\";\\n\\nvar meshlambert_vert = \\\"#define LAMBERT\\\\nvarying vec3 vLightFront;\\\\nvarying vec3 vIndirectFront;\\\\n#ifdef DOUBLE_SIDED\\\\n\\\\tvarying vec3 vLightBack;\\\\n\\\\tvarying vec3 vIndirectBack;\\\\n#endif\\\\n#include <common>\\\\n#include <uv_pars_vertex>\\\\n#include <uv2_pars_vertex>\\\\n#include <envmap_pars_vertex>\\\\n#include <bsdfs>\\\\n#include <lights_pars_begin>\\\\n#include <color_pars_vertex>\\\\n#include <fog_pars_vertex>\\\\n#include <morphtarget_pars_vertex>\\\\n#include <skinning_pars_vertex>\\\\n#include <shadowmap_pars_vertex>\\\\n#include <logdepthbuf_pars_vertex>\\\\n#include <clipping_planes_pars_vertex>\\\\nvoid main() {\\\\n\\\\t#include <uv_vertex>\\\\n\\\\t#include <uv2_vertex>\\\\n\\\\t#include <color_vertex>\\\\n\\\\t#include <beginnormal_vertex>\\\\n\\\\t#include <morphnormal_vertex>\\\\n\\\\t#include <skinbase_vertex>\\\\n\\\\t#include <skinnormal_vertex>\\\\n\\\\t#include <defaultnormal_vertex>\\\\n\\\\t#include <begin_vertex>\\\\n\\\\t#include <morphtarget_vertex>\\\\n\\\\t#include <skinning_vertex>\\\\n\\\\t#include <project_vertex>\\\\n\\\\t#include <logdepthbuf_vertex>\\\\n\\\\t#include <clipping_planes_vertex>\\\\n\\\\t#include <worldpos_vertex>\\\\n\\\\t#include <envmap_vertex>\\\\n\\\\t#include <lights_lambert_vertex>\\\\n\\\\t#include <shadowmap_vertex>\\\\n\\\\t#include <fog_vertex>\\\\n}\\\";\\n\\nvar meshmatcap_frag = \\\"#define MATCAP\\\\nuniform vec3 diffuse;\\\\nuniform float opacity;\\\\nuniform sampler2D matcap;\\\\nvarying vec3 vViewPosition;\\\\n#ifndef FLAT_SHADED\\\\n\\\\tvarying vec3 vNormal;\\\\n#endif\\\\n#include <common>\\\\n#include <uv_pars_fragment>\\\\n#include <map_pars_fragment>\\\\n#include <alphamap_pars_fragment>\\\\n#include <fog_pars_fragment>\\\\n#include <bumpmap_pars_fragment>\\\\n#include <normalmap_pars_fragment>\\\\n#include <logdepthbuf_pars_fragment>\\\\n#include <clipping_planes_pars_fragment>\\\\nvoid main() {\\\\n\\\\t#include <clipping_planes_fragment>\\\\n\\\\tvec4 diffuseColor = vec4( diffuse, opacity );\\\\n\\\\t#include <logdepthbuf_fragment>\\\\n\\\\t#include <map_fragment>\\\\n\\\\t#include <alphamap_fragment>\\\\n\\\\t#include <alphatest_fragment>\\\\n\\\\t#include <normal_fragment_begin>\\\\n\\\\t#include <normal_fragment_maps>\\\\n\\\\tvec3 viewDir = normalize( vViewPosition );\\\\n\\\\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\\\\n\\\\tvec3 y = cross( viewDir, x );\\\\n\\\\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\\\\n\\\\t#ifdef USE_MATCAP\\\\n\\\\t\\\\tvec4 matcapColor = texture2D( matcap, uv );\\\\n\\\\t\\\\tmatcapColor = matcapTexelToLinear( matcapColor );\\\\n\\\\t#else\\\\n\\\\t\\\\tvec4 matcapColor = vec4( 1.0 );\\\\n\\\\t#endif\\\\n\\\\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\\\\n\\\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\\\n\\\\t#include <premultiplied_alpha_fragment>\\\\n\\\\t#include <tonemapping_fragment>\\\\n\\\\t#include <encodings_fragment>\\\\n\\\\t#include <fog_fragment>\\\\n}\\\";\\n\\nvar meshmatcap_vert = \\\"#define MATCAP\\\\nvarying vec3 vViewPosition;\\\\n#ifndef FLAT_SHADED\\\\n\\\\tvarying vec3 vNormal;\\\\n#endif\\\\n#include <common>\\\\n#include <uv_pars_vertex>\\\\n#include <displacementmap_pars_vertex>\\\\n#include <fog_pars_vertex>\\\\n#include <morphtarget_pars_vertex>\\\\n#include <skinning_pars_vertex>\\\\n#include <logdepthbuf_pars_vertex>\\\\n#include <clipping_planes_pars_vertex>\\\\nvoid main() {\\\\n\\\\t#include <uv_vertex>\\\\n\\\\t#include <beginnormal_vertex>\\\\n\\\\t#include <morphnormal_vertex>\\\\n\\\\t#include <skinbase_vertex>\\\\n\\\\t#include <skinnormal_vertex>\\\\n\\\\t#include <defaultnormal_vertex>\\\\n\\\\t#ifndef FLAT_SHADED\\\\n\\\\t\\\\tvNormal = normalize( transformedNormal );\\\\n\\\\t#endif\\\\n\\\\t#include <begin_vertex>\\\\n\\\\t#include <morphtarget_vertex>\\\\n\\\\t#include <skinning_vertex>\\\\n\\\\t#include <displacementmap_vertex>\\\\n\\\\t#include <project_vertex>\\\\n\\\\t#include <logdepthbuf_vertex>\\\\n\\\\t#include <clipping_planes_vertex>\\\\n\\\\t#include <fog_vertex>\\\\n\\\\tvViewPosition = - mvPosition.xyz;\\\\n}\\\";\\n\\nvar meshphong_frag = \\\"#define PHONG\\\\nuniform vec3 diffuse;\\\\nuniform vec3 emissive;\\\\nuniform vec3 specular;\\\\nuniform float shininess;\\\\nuniform float opacity;\\\\n#include <common>\\\\n#include <packing>\\\\n#include <dithering_pars_fragment>\\\\n#include <color_pars_fragment>\\\\n#include <uv_pars_fragment>\\\\n#include <uv2_pars_fragment>\\\\n#include <map_pars_fragment>\\\\n#include <alphamap_pars_fragment>\\\\n#include <aomap_pars_fragment>\\\\n#include <lightmap_pars_fragment>\\\\n#include <emissivemap_pars_fragment>\\\\n#include <envmap_pars_fragment>\\\\n#include <gradientmap_pars_fragment>\\\\n#include <fog_pars_fragment>\\\\n#include <bsdfs>\\\\n#include <lights_pars_begin>\\\\n#include <lights_phong_pars_fragment>\\\\n#include <shadowmap_pars_fragment>\\\\n#include <bumpmap_pars_fragment>\\\\n#include <normalmap_pars_fragment>\\\\n#include <specularmap_pars_fragment>\\\\n#include <logdepthbuf_pars_fragment>\\\\n#include <clipping_planes_pars_fragment>\\\\nvoid main() {\\\\n\\\\t#include <clipping_planes_fragment>\\\\n\\\\tvec4 diffuseColor = vec4( diffuse, opacity );\\\\n\\\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\\\n\\\\tvec3 totalEmissiveRadiance = emissive;\\\\n\\\\t#include <logdepthbuf_fragment>\\\\n\\\\t#include <map_fragment>\\\\n\\\\t#include <color_fragment>\\\\n\\\\t#include <alphamap_fragment>\\\\n\\\\t#include <alphatest_fragment>\\\\n\\\\t#include <specularmap_fragment>\\\\n\\\\t#include <normal_fragment_begin>\\\\n\\\\t#include <normal_fragment_maps>\\\\n\\\\t#include <emissivemap_fragment>\\\\n\\\\t#include <lights_phong_fragment>\\\\n\\\\t#include <lights_fragment_begin>\\\\n\\\\t#include <lights_fragment_maps>\\\\n\\\\t#include <lights_fragment_end>\\\\n\\\\t#include <aomap_fragment>\\\\n\\\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\\\n\\\\t#include <envmap_fragment>\\\\n\\\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\\\n\\\\t#include <tonemapping_fragment>\\\\n\\\\t#include <encodings_fragment>\\\\n\\\\t#include <fog_fragment>\\\\n\\\\t#include <premultiplied_alpha_fragment>\\\\n\\\\t#include <dithering_fragment>\\\\n}\\\";\\n\\nvar meshphong_vert = \\\"#define PHONG\\\\nvarying vec3 vViewPosition;\\\\n#ifndef FLAT_SHADED\\\\n\\\\tvarying vec3 vNormal;\\\\n#endif\\\\n#include <common>\\\\n#include <uv_pars_vertex>\\\\n#include <uv2_pars_vertex>\\\\n#include <displacementmap_pars_vertex>\\\\n#include <envmap_pars_vertex>\\\\n#include <color_pars_vertex>\\\\n#include <fog_pars_vertex>\\\\n#include <morphtarget_pars_vertex>\\\\n#include <skinning_pars_vertex>\\\\n#include <shadowmap_pars_vertex>\\\\n#include <logdepthbuf_pars_vertex>\\\\n#include <clipping_planes_pars_vertex>\\\\nvoid main() {\\\\n\\\\t#include <uv_vertex>\\\\n\\\\t#include <uv2_vertex>\\\\n\\\\t#include <color_vertex>\\\\n\\\\t#include <beginnormal_vertex>\\\\n\\\\t#include <morphnormal_vertex>\\\\n\\\\t#include <skinbase_vertex>\\\\n\\\\t#include <skinnormal_vertex>\\\\n\\\\t#include <defaultnormal_vertex>\\\\n#ifndef FLAT_SHADED\\\\n\\\\tvNormal = normalize( transformedNormal );\\\\n#endif\\\\n\\\\t#include <begin_vertex>\\\\n\\\\t#include <morphtarget_vertex>\\\\n\\\\t#include <skinning_vertex>\\\\n\\\\t#include <displacementmap_vertex>\\\\n\\\\t#include <project_vertex>\\\\n\\\\t#include <logdepthbuf_vertex>\\\\n\\\\t#include <clipping_planes_vertex>\\\\n\\\\tvViewPosition = - mvPosition.xyz;\\\\n\\\\t#include <worldpos_vertex>\\\\n\\\\t#include <envmap_vertex>\\\\n\\\\t#include <shadowmap_vertex>\\\\n\\\\t#include <fog_vertex>\\\\n}\\\";\\n\\nvar meshphysical_frag = \\\"#define PHYSICAL\\\\nuniform vec3 diffuse;\\\\nuniform vec3 emissive;\\\\nuniform float roughness;\\\\nuniform float metalness;\\\\nuniform float opacity;\\\\n#ifndef STANDARD\\\\n\\\\tuniform float clearCoat;\\\\n\\\\tuniform float clearCoatRoughness;\\\\n#endif\\\\nvarying vec3 vViewPosition;\\\\n#ifndef FLAT_SHADED\\\\n\\\\tvarying vec3 vNormal;\\\\n#endif\\\\n#include <common>\\\\n#include <packing>\\\\n#include <dithering_pars_fragment>\\\\n#include <color_pars_fragment>\\\\n#include <uv_pars_fragment>\\\\n#include <uv2_pars_fragment>\\\\n#include <map_pars_fragment>\\\\n#include <alphamap_pars_fragment>\\\\n#include <aomap_pars_fragment>\\\\n#include <lightmap_pars_fragment>\\\\n#include <emissivemap_pars_fragment>\\\\n#include <bsdfs>\\\\n#include <cube_uv_reflection_fragment>\\\\n#include <envmap_pars_fragment>\\\\n#include <envmap_physical_pars_fragment>\\\\n#include <fog_pars_fragment>\\\\n#include <lights_pars_begin>\\\\n#include <lights_physical_pars_fragment>\\\\n#include <shadowmap_pars_fragment>\\\\n#include <bumpmap_pars_fragment>\\\\n#include <normalmap_pars_fragment>\\\\n#include <roughnessmap_pars_fragment>\\\\n#include <metalnessmap_pars_fragment>\\\\n#include <logdepthbuf_pars_fragment>\\\\n#include <clipping_planes_pars_fragment>\\\\nvoid main() {\\\\n\\\\t#include <clipping_planes_fragment>\\\\n\\\\tvec4 diffuseColor = vec4( diffuse, opacity );\\\\n\\\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\\\n\\\\tvec3 totalEmissiveRadiance = emissive;\\\\n\\\\t#include <logdepthbuf_fragment>\\\\n\\\\t#include <map_fragment>\\\\n\\\\t#include <color_fragment>\\\\n\\\\t#include <alphamap_fragment>\\\\n\\\\t#include <alphatest_fragment>\\\\n\\\\t#include <roughnessmap_fragment>\\\\n\\\\t#include <metalnessmap_fragment>\\\\n\\\\t#include <normal_fragment_begin>\\\\n\\\\t#include <normal_fragment_maps>\\\\n\\\\t#include <emissivemap_fragment>\\\\n\\\\t#include <lights_physical_fragment>\\\\n\\\\t#include <lights_fragment_begin>\\\\n\\\\t#include <lights_fragment_maps>\\\\n\\\\t#include <lights_fragment_end>\\\\n\\\\t#include <aomap_fragment>\\\\n\\\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\\\n\\\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\\\n\\\\t#include <tonemapping_fragment>\\\\n\\\\t#include <encodings_fragment>\\\\n\\\\t#include <fog_fragment>\\\\n\\\\t#include <premultiplied_alpha_fragment>\\\\n\\\\t#include <dithering_fragment>\\\\n}\\\";\\n\\nvar meshphysical_vert = \\\"#define PHYSICAL\\\\nvarying vec3 vViewPosition;\\\\n#ifndef FLAT_SHADED\\\\n\\\\tvarying vec3 vNormal;\\\\n#endif\\\\n#include <common>\\\\n#include <uv_pars_vertex>\\\\n#include <uv2_pars_vertex>\\\\n#include <displacementmap_pars_vertex>\\\\n#include <color_pars_vertex>\\\\n#include <fog_pars_vertex>\\\\n#include <morphtarget_pars_vertex>\\\\n#include <skinning_pars_vertex>\\\\n#include <shadowmap_pars_vertex>\\\\n#include <logdepthbuf_pars_vertex>\\\\n#include <clipping_planes_pars_vertex>\\\\nvoid main() {\\\\n\\\\t#include <uv_vertex>\\\\n\\\\t#include <uv2_vertex>\\\\n\\\\t#include <color_vertex>\\\\n\\\\t#include <beginnormal_vertex>\\\\n\\\\t#include <morphnormal_vertex>\\\\n\\\\t#include <skinbase_vertex>\\\\n\\\\t#include <skinnormal_vertex>\\\\n\\\\t#include <defaultnormal_vertex>\\\\n#ifndef FLAT_SHADED\\\\n\\\\tvNormal = normalize( transformedNormal );\\\\n#endif\\\\n\\\\t#include <begin_vertex>\\\\n\\\\t#include <morphtarget_vertex>\\\\n\\\\t#include <skinning_vertex>\\\\n\\\\t#include <displacementmap_vertex>\\\\n\\\\t#include <project_vertex>\\\\n\\\\t#include <logdepthbuf_vertex>\\\\n\\\\t#include <clipping_planes_vertex>\\\\n\\\\tvViewPosition = - mvPosition.xyz;\\\\n\\\\t#include <worldpos_vertex>\\\\n\\\\t#include <shadowmap_vertex>\\\\n\\\\t#include <fog_vertex>\\\\n}\\\";\\n\\nvar normal_frag = \\\"#define NORMAL\\\\nuniform float opacity;\\\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\\\\n\\\\tvarying vec3 vViewPosition;\\\\n#endif\\\\n#ifndef FLAT_SHADED\\\\n\\\\tvarying vec3 vNormal;\\\\n#endif\\\\n#include <packing>\\\\n#include <uv_pars_fragment>\\\\n#include <bumpmap_pars_fragment>\\\\n#include <normalmap_pars_fragment>\\\\n#include <logdepthbuf_pars_fragment>\\\\nvoid main() {\\\\n\\\\t#include <logdepthbuf_fragment>\\\\n\\\\t#include <normal_fragment_begin>\\\\n\\\\t#include <normal_fragment_maps>\\\\n\\\\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\\\\n}\\\";\\n\\nvar normal_vert = \\\"#define NORMAL\\\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\\\\n\\\\tvarying vec3 vViewPosition;\\\\n#endif\\\\n#ifndef FLAT_SHADED\\\\n\\\\tvarying vec3 vNormal;\\\\n#endif\\\\n#include <uv_pars_vertex>\\\\n#include <displacementmap_pars_vertex>\\\\n#include <morphtarget_pars_vertex>\\\\n#include <skinning_pars_vertex>\\\\n#include <logdepthbuf_pars_vertex>\\\\nvoid main() {\\\\n\\\\t#include <uv_vertex>\\\\n\\\\t#include <beginnormal_vertex>\\\\n\\\\t#include <morphnormal_vertex>\\\\n\\\\t#include <skinbase_vertex>\\\\n\\\\t#include <skinnormal_vertex>\\\\n\\\\t#include <defaultnormal_vertex>\\\\n#ifndef FLAT_SHADED\\\\n\\\\tvNormal = normalize( transformedNormal );\\\\n#endif\\\\n\\\\t#include <begin_vertex>\\\\n\\\\t#include <morphtarget_vertex>\\\\n\\\\t#include <skinning_vertex>\\\\n\\\\t#include <displacementmap_vertex>\\\\n\\\\t#include <project_vertex>\\\\n\\\\t#include <logdepthbuf_vertex>\\\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\\\\n\\\\tvViewPosition = - mvPosition.xyz;\\\\n#endif\\\\n}\\\";\\n\\nvar points_frag = \\\"uniform vec3 diffuse;\\\\nuniform float opacity;\\\\n#include <common>\\\\n#include <color_pars_fragment>\\\\n#include <map_particle_pars_fragment>\\\\n#include <fog_pars_fragment>\\\\n#include <logdepthbuf_pars_fragment>\\\\n#include <clipping_planes_pars_fragment>\\\\nvoid main() {\\\\n\\\\t#include <clipping_planes_fragment>\\\\n\\\\tvec3 outgoingLight = vec3( 0.0 );\\\\n\\\\tvec4 diffuseColor = vec4( diffuse, opacity );\\\\n\\\\t#include <logdepthbuf_fragment>\\\\n\\\\t#include <map_particle_fragment>\\\\n\\\\t#include <color_fragment>\\\\n\\\\t#include <alphatest_fragment>\\\\n\\\\toutgoingLight = diffuseColor.rgb;\\\\n\\\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\\\n\\\\t#include <premultiplied_alpha_fragment>\\\\n\\\\t#include <tonemapping_fragment>\\\\n\\\\t#include <encodings_fragment>\\\\n\\\\t#include <fog_fragment>\\\\n}\\\";\\n\\nvar points_vert = \\\"uniform float size;\\\\nuniform float scale;\\\\n#include <common>\\\\n#include <color_pars_vertex>\\\\n#include <fog_pars_vertex>\\\\n#include <morphtarget_pars_vertex>\\\\n#include <logdepthbuf_pars_vertex>\\\\n#include <clipping_planes_pars_vertex>\\\\nvoid main() {\\\\n\\\\t#include <color_vertex>\\\\n\\\\t#include <begin_vertex>\\\\n\\\\t#include <morphtarget_vertex>\\\\n\\\\t#include <project_vertex>\\\\n\\\\tgl_PointSize = size;\\\\n\\\\t#ifdef USE_SIZEATTENUATION\\\\n\\\\t\\\\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\\\\n\\\\t\\\\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\\\\n\\\\t#endif\\\\n\\\\t#include <logdepthbuf_vertex>\\\\n\\\\t#include <clipping_planes_vertex>\\\\n\\\\t#include <worldpos_vertex>\\\\n\\\\t#include <fog_vertex>\\\\n}\\\";\\n\\nvar shadow_frag = \\\"uniform vec3 color;\\\\nuniform float opacity;\\\\n#include <common>\\\\n#include <packing>\\\\n#include <fog_pars_fragment>\\\\n#include <bsdfs>\\\\n#include <lights_pars_begin>\\\\n#include <shadowmap_pars_fragment>\\\\n#include <shadowmask_pars_fragment>\\\\nvoid main() {\\\\n\\\\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\\\\n\\\\t#include <fog_fragment>\\\\n}\\\";\\n\\nvar shadow_vert = \\\"#include <fog_pars_vertex>\\\\n#include <shadowmap_pars_vertex>\\\\nvoid main() {\\\\n\\\\t#include <begin_vertex>\\\\n\\\\t#include <project_vertex>\\\\n\\\\t#include <worldpos_vertex>\\\\n\\\\t#include <shadowmap_vertex>\\\\n\\\\t#include <fog_vertex>\\\\n}\\\";\\n\\nvar sprite_frag = \\\"uniform vec3 diffuse;\\\\nuniform float opacity;\\\\n#include <common>\\\\n#include <uv_pars_fragment>\\\\n#include <map_pars_fragment>\\\\n#include <fog_pars_fragment>\\\\n#include <logdepthbuf_pars_fragment>\\\\n#include <clipping_planes_pars_fragment>\\\\nvoid main() {\\\\n\\\\t#include <clipping_planes_fragment>\\\\n\\\\tvec3 outgoingLight = vec3( 0.0 );\\\\n\\\\tvec4 diffuseColor = vec4( diffuse, opacity );\\\\n\\\\t#include <logdepthbuf_fragment>\\\\n\\\\t#include <map_fragment>\\\\n\\\\t#include <alphatest_fragment>\\\\n\\\\toutgoingLight = diffuseColor.rgb;\\\\n\\\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\\\n\\\\t#include <tonemapping_fragment>\\\\n\\\\t#include <encodings_fragment>\\\\n\\\\t#include <fog_fragment>\\\\n}\\\";\\n\\nvar sprite_vert = \\\"uniform float rotation;\\\\nuniform vec2 center;\\\\n#include <common>\\\\n#include <uv_pars_vertex>\\\\n#include <fog_pars_vertex>\\\\n#include <logdepthbuf_pars_vertex>\\\\n#include <clipping_planes_pars_vertex>\\\\nvoid main() {\\\\n\\\\t#include <uv_vertex>\\\\n\\\\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\\\\n\\\\tvec2 scale;\\\\n\\\\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\\\\n\\\\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\\\\n\\\\t#ifndef USE_SIZEATTENUATION\\\\n\\\\t\\\\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\\\\n\\\\t\\\\tif ( isPerspective ) scale *= - mvPosition.z;\\\\n\\\\t#endif\\\\n\\\\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\\\\n\\\\tvec2 rotatedPosition;\\\\n\\\\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\\\\n\\\\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\\\\n\\\\tmvPosition.xy += rotatedPosition;\\\\n\\\\tgl_Position = projectionMatrix * mvPosition;\\\\n\\\\t#include <logdepthbuf_vertex>\\\\n\\\\t#include <clipping_planes_vertex>\\\\n\\\\t#include <fog_vertex>\\\\n}\\\";\\n\\nvar ShaderChunk = {\\n\\talphamap_fragment: alphamap_fragment,\\n\\talphamap_pars_fragment: alphamap_pars_fragment,\\n\\talphatest_fragment: alphatest_fragment,\\n\\taomap_fragment: aomap_fragment,\\n\\taomap_pars_fragment: aomap_pars_fragment,\\n\\tbegin_vertex: begin_vertex,\\n\\tbeginnormal_vertex: beginnormal_vertex,\\n\\tbsdfs: bsdfs,\\n\\tbumpmap_pars_fragment: bumpmap_pars_fragment,\\n\\tclipping_planes_fragment: clipping_planes_fragment,\\n\\tclipping_planes_pars_fragment: clipping_planes_pars_fragment,\\n\\tclipping_planes_pars_vertex: clipping_planes_pars_vertex,\\n\\tclipping_planes_vertex: clipping_planes_vertex,\\n\\tcolor_fragment: color_fragment,\\n\\tcolor_pars_fragment: color_pars_fragment,\\n\\tcolor_pars_vertex: color_pars_vertex,\\n\\tcolor_vertex: color_vertex,\\n\\tcommon: common,\\n\\tcube_uv_reflection_fragment: cube_uv_reflection_fragment,\\n\\tdefaultnormal_vertex: defaultnormal_vertex,\\n\\tdisplacementmap_pars_vertex: displacementmap_pars_vertex,\\n\\tdisplacementmap_vertex: displacementmap_vertex,\\n\\temissivemap_fragment: emissivemap_fragment,\\n\\temissivemap_pars_fragment: emissivemap_pars_fragment,\\n\\tencodings_fragment: encodings_fragment,\\n\\tencodings_pars_fragment: encodings_pars_fragment,\\n\\tenvmap_fragment: envmap_fragment,\\n\\tenvmap_pars_fragment: envmap_pars_fragment,\\n\\tenvmap_pars_vertex: envmap_pars_vertex,\\n\\tenvmap_physical_pars_fragment: envmap_physical_pars_fragment,\\n\\tenvmap_vertex: envmap_vertex,\\n\\tfog_vertex: fog_vertex,\\n\\tfog_pars_vertex: fog_pars_vertex,\\n\\tfog_fragment: fog_fragment,\\n\\tfog_pars_fragment: fog_pars_fragment,\\n\\tgradientmap_pars_fragment: gradientmap_pars_fragment,\\n\\tlightmap_fragment: lightmap_fragment,\\n\\tlightmap_pars_fragment: lightmap_pars_fragment,\\n\\tlights_lambert_vertex: lights_lambert_vertex,\\n\\tlights_pars_begin: lights_pars_begin,\\n\\tlights_phong_fragment: lights_phong_fragment,\\n\\tlights_phong_pars_fragment: lights_phong_pars_fragment,\\n\\tlights_physical_fragment: lights_physical_fragment,\\n\\tlights_physical_pars_fragment: lights_physical_pars_fragment,\\n\\tlights_fragment_begin: lights_fragment_begin,\\n\\tlights_fragment_maps: lights_fragment_maps,\\n\\tlights_fragment_end: lights_fragment_end,\\n\\tlogdepthbuf_fragment: logdepthbuf_fragment,\\n\\tlogdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\\n\\tlogdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\\n\\tlogdepthbuf_vertex: logdepthbuf_vertex,\\n\\tmap_fragment: map_fragment,\\n\\tmap_pars_fragment: map_pars_fragment,\\n\\tmap_particle_fragment: map_particle_fragment,\\n\\tmap_particle_pars_fragment: map_particle_pars_fragment,\\n\\tmetalnessmap_fragment: metalnessmap_fragment,\\n\\tmetalnessmap_pars_fragment: metalnessmap_pars_fragment,\\n\\tmorphnormal_vertex: morphnormal_vertex,\\n\\tmorphtarget_pars_vertex: morphtarget_pars_vertex,\\n\\tmorphtarget_vertex: morphtarget_vertex,\\n\\tnormal_fragment_begin: normal_fragment_begin,\\n\\tnormal_fragment_maps: normal_fragment_maps,\\n\\tnormalmap_pars_fragment: normalmap_pars_fragment,\\n\\tpacking: packing,\\n\\tpremultiplied_alpha_fragment: premultiplied_alpha_fragment,\\n\\tproject_vertex: project_vertex,\\n\\tdithering_fragment: dithering_fragment,\\n\\tdithering_pars_fragment: dithering_pars_fragment,\\n\\troughnessmap_fragment: roughnessmap_fragment,\\n\\troughnessmap_pars_fragment: roughnessmap_pars_fragment,\\n\\tshadowmap_pars_fragment: shadowmap_pars_fragment,\\n\\tshadowmap_pars_vertex: shadowmap_pars_vertex,\\n\\tshadowmap_vertex: shadowmap_vertex,\\n\\tshadowmask_pars_fragment: shadowmask_pars_fragment,\\n\\tskinbase_vertex: skinbase_vertex,\\n\\tskinning_pars_vertex: skinning_pars_vertex,\\n\\tskinning_vertex: skinning_vertex,\\n\\tskinnormal_vertex: skinnormal_vertex,\\n\\tspecularmap_fragment: specularmap_fragment,\\n\\tspecularmap_pars_fragment: specularmap_pars_fragment,\\n\\ttonemapping_fragment: tonemapping_fragment,\\n\\ttonemapping_pars_fragment: tonemapping_pars_fragment,\\n\\tuv_pars_fragment: uv_pars_fragment,\\n\\tuv_pars_vertex: uv_pars_vertex,\\n\\tuv_vertex: uv_vertex,\\n\\tuv2_pars_fragment: uv2_pars_fragment,\\n\\tuv2_pars_vertex: uv2_pars_vertex,\\n\\tuv2_vertex: uv2_vertex,\\n\\tworldpos_vertex: worldpos_vertex,\\n\\n\\tbackground_frag: background_frag,\\n\\tbackground_vert: background_vert,\\n\\tcube_frag: cube_frag,\\n\\tcube_vert: cube_vert,\\n\\tdepth_frag: depth_frag,\\n\\tdepth_vert: depth_vert,\\n\\tdistanceRGBA_frag: distanceRGBA_frag,\\n\\tdistanceRGBA_vert: distanceRGBA_vert,\\n\\tequirect_frag: equirect_frag,\\n\\tequirect_vert: equirect_vert,\\n\\tlinedashed_frag: linedashed_frag,\\n\\tlinedashed_vert: linedashed_vert,\\n\\tmeshbasic_frag: meshbasic_frag,\\n\\tmeshbasic_vert: meshbasic_vert,\\n\\tmeshlambert_frag: meshlambert_frag,\\n\\tmeshlambert_vert: meshlambert_vert,\\n\\tmeshmatcap_frag: meshmatcap_frag,\\n\\tmeshmatcap_vert: meshmatcap_vert,\\n\\tmeshphong_frag: meshphong_frag,\\n\\tmeshphong_vert: meshphong_vert,\\n\\tmeshphysical_frag: meshphysical_frag,\\n\\tmeshphysical_vert: meshphysical_vert,\\n\\tnormal_frag: normal_frag,\\n\\tnormal_vert: normal_vert,\\n\\tpoints_frag: points_frag,\\n\\tpoints_vert: points_vert,\\n\\tshadow_frag: shadow_frag,\\n\\tshadow_vert: shadow_vert,\\n\\tsprite_frag: sprite_frag,\\n\\tsprite_vert: sprite_vert\\n};\\n\\n/**\\n * Uniform Utilities\\n */\\n\\nfunction cloneUniforms( src ) {\\n\\n\\tvar dst = {};\\n\\n\\tfor ( var u in src ) {\\n\\n\\t\\tdst[ u ] = {};\\n\\n\\t\\tfor ( var p in src[ u ] ) {\\n\\n\\t\\t\\tvar property = src[ u ][ p ];\\n\\n\\t\\t\\tif ( property && ( property.isColor ||\\n\\t\\t\\t\\tproperty.isMatrix3 || property.isMatrix4 ||\\n\\t\\t\\t\\tproperty.isVector2 || property.isVector3 || property.isVector4 ||\\n\\t\\t\\t\\tproperty.isTexture ) ) {\\n\\n\\t\\t\\t\\tdst[ u ][ p ] = property.clone();\\n\\n\\t\\t\\t} else if ( Array.isArray( property ) ) {\\n\\n\\t\\t\\t\\tdst[ u ][ p ] = property.slice();\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tdst[ u ][ p ] = property;\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\treturn dst;\\n\\n}\\n\\nfunction mergeUniforms( uniforms ) {\\n\\n\\tvar merged = {};\\n\\n\\tfor ( var u = 0; u < uniforms.length; u ++ ) {\\n\\n\\t\\tvar tmp = cloneUniforms( uniforms[ u ] );\\n\\n\\t\\tfor ( var p in tmp ) {\\n\\n\\t\\t\\tmerged[ p ] = tmp[ p ];\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\treturn merged;\\n\\n}\\n\\n// Legacy\\n\\nvar UniformsUtils = { clone: cloneUniforms, merge: mergeUniforms };\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\nvar ColorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\\n\\t'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\\n\\t'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\\n\\t'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\\n\\t'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\\n\\t'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\\n\\t'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\\n\\t'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\\n\\t'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\\n\\t'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\\n\\t'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\\n\\t'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\\n\\t'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\\n\\t'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\\n\\t'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\\n\\t'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\\n\\t'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\\n\\t'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\\n\\t'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\\n\\t'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\\n\\t'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\\n\\t'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\\n\\t'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\\n\\t'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\\n\\nfunction Color( r, g, b ) {\\n\\n\\tif ( g === undefined && b === undefined ) {\\n\\n\\t\\t// r is THREE.Color, hex or string\\n\\t\\treturn this.set( r );\\n\\n\\t}\\n\\n\\treturn this.setRGB( r, g, b );\\n\\n}\\n\\nObject.assign( Color.prototype, {\\n\\n\\tisColor: true,\\n\\n\\tr: 1, g: 1, b: 1,\\n\\n\\tset: function ( value ) {\\n\\n\\t\\tif ( value && value.isColor ) {\\n\\n\\t\\t\\tthis.copy( value );\\n\\n\\t\\t} else if ( typeof value === 'number' ) {\\n\\n\\t\\t\\tthis.setHex( value );\\n\\n\\t\\t} else if ( typeof value === 'string' ) {\\n\\n\\t\\t\\tthis.setStyle( value );\\n\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetScalar: function ( scalar ) {\\n\\n\\t\\tthis.r = scalar;\\n\\t\\tthis.g = scalar;\\n\\t\\tthis.b = scalar;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetHex: function ( hex ) {\\n\\n\\t\\thex = Math.floor( hex );\\n\\n\\t\\tthis.r = ( hex >> 16 & 255 ) / 255;\\n\\t\\tthis.g = ( hex >> 8 & 255 ) / 255;\\n\\t\\tthis.b = ( hex & 255 ) / 255;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetRGB: function ( r, g, b ) {\\n\\n\\t\\tthis.r = r;\\n\\t\\tthis.g = g;\\n\\t\\tthis.b = b;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetHSL: function () {\\n\\n\\t\\tfunction hue2rgb( p, q, t ) {\\n\\n\\t\\t\\tif ( t < 0 ) t += 1;\\n\\t\\t\\tif ( t > 1 ) t -= 1;\\n\\t\\t\\tif ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;\\n\\t\\t\\tif ( t < 1 / 2 ) return q;\\n\\t\\t\\tif ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );\\n\\t\\t\\treturn p;\\n\\n\\t\\t}\\n\\n\\t\\treturn function setHSL( h, s, l ) {\\n\\n\\t\\t\\t// h,s,l ranges are in 0.0 - 1.0\\n\\t\\t\\th = _Math.euclideanModulo( h, 1 );\\n\\t\\t\\ts = _Math.clamp( s, 0, 1 );\\n\\t\\t\\tl = _Math.clamp( l, 0, 1 );\\n\\n\\t\\t\\tif ( s === 0 ) {\\n\\n\\t\\t\\t\\tthis.r = this.g = this.b = l;\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tvar p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\\n\\t\\t\\t\\tvar q = ( 2 * l ) - p;\\n\\n\\t\\t\\t\\tthis.r = hue2rgb( q, p, h + 1 / 3 );\\n\\t\\t\\t\\tthis.g = hue2rgb( q, p, h );\\n\\t\\t\\t\\tthis.b = hue2rgb( q, p, h - 1 / 3 );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn this;\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\tsetStyle: function ( style ) {\\n\\n\\t\\tfunction handleAlpha( string ) {\\n\\n\\t\\t\\tif ( string === undefined ) return;\\n\\n\\t\\t\\tif ( parseFloat( string ) < 1 ) {\\n\\n\\t\\t\\t\\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\n\\t\\tvar m;\\n\\n\\t\\tif ( m = /^((?:rgb|hsl)a?)\\\\(\\\\s*([^\\\\)]*)\\\\)/.exec( style ) ) {\\n\\n\\t\\t\\t// rgb / hsl\\n\\n\\t\\t\\tvar color;\\n\\t\\t\\tvar name = m[ 1 ];\\n\\t\\t\\tvar components = m[ 2 ];\\n\\n\\t\\t\\tswitch ( name ) {\\n\\n\\t\\t\\t\\tcase 'rgb':\\n\\t\\t\\t\\tcase 'rgba':\\n\\n\\t\\t\\t\\t\\tif ( color = /^(\\\\d+)\\\\s*,\\\\s*(\\\\d+)\\\\s*,\\\\s*(\\\\d+)\\\\s*(,\\\\s*([0-9]*\\\\.?[0-9]+)\\\\s*)?$/.exec( components ) ) {\\n\\n\\t\\t\\t\\t\\t\\t// rgb(255,0,0) rgba(255,0,0,0.5)\\n\\t\\t\\t\\t\\t\\tthis.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;\\n\\t\\t\\t\\t\\t\\tthis.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;\\n\\t\\t\\t\\t\\t\\tthis.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;\\n\\n\\t\\t\\t\\t\\t\\thandleAlpha( color[ 5 ] );\\n\\n\\t\\t\\t\\t\\t\\treturn this;\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tif ( color = /^(\\\\d+)\\\\%\\\\s*,\\\\s*(\\\\d+)\\\\%\\\\s*,\\\\s*(\\\\d+)\\\\%\\\\s*(,\\\\s*([0-9]*\\\\.?[0-9]+)\\\\s*)?$/.exec( components ) ) {\\n\\n\\t\\t\\t\\t\\t\\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\\n\\t\\t\\t\\t\\t\\tthis.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;\\n\\t\\t\\t\\t\\t\\tthis.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;\\n\\t\\t\\t\\t\\t\\tthis.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;\\n\\n\\t\\t\\t\\t\\t\\thandleAlpha( color[ 5 ] );\\n\\n\\t\\t\\t\\t\\t\\treturn this;\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\tcase 'hsl':\\n\\t\\t\\t\\tcase 'hsla':\\n\\n\\t\\t\\t\\t\\tif ( color = /^([0-9]*\\\\.?[0-9]+)\\\\s*,\\\\s*(\\\\d+)\\\\%\\\\s*,\\\\s*(\\\\d+)\\\\%\\\\s*(,\\\\s*([0-9]*\\\\.?[0-9]+)\\\\s*)?$/.exec( components ) ) {\\n\\n\\t\\t\\t\\t\\t\\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\\n\\t\\t\\t\\t\\t\\tvar h = parseFloat( color[ 1 ] ) / 360;\\n\\t\\t\\t\\t\\t\\tvar s = parseInt( color[ 2 ], 10 ) / 100;\\n\\t\\t\\t\\t\\t\\tvar l = parseInt( color[ 3 ], 10 ) / 100;\\n\\n\\t\\t\\t\\t\\t\\thandleAlpha( color[ 5 ] );\\n\\n\\t\\t\\t\\t\\t\\treturn this.setHSL( h, s, l );\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t}\\n\\n\\t\\t} else if ( m = /^\\\\#([A-Fa-f0-9]+)$/.exec( style ) ) {\\n\\n\\t\\t\\t// hex color\\n\\n\\t\\t\\tvar hex = m[ 1 ];\\n\\t\\t\\tvar size = hex.length;\\n\\n\\t\\t\\tif ( size === 3 ) {\\n\\n\\t\\t\\t\\t// #ff0\\n\\t\\t\\t\\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;\\n\\t\\t\\t\\tthis.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;\\n\\t\\t\\t\\tthis.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;\\n\\n\\t\\t\\t\\treturn this;\\n\\n\\t\\t\\t} else if ( size === 6 ) {\\n\\n\\t\\t\\t\\t// #ff0000\\n\\t\\t\\t\\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;\\n\\t\\t\\t\\tthis.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;\\n\\t\\t\\t\\tthis.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;\\n\\n\\t\\t\\t\\treturn this;\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tif ( style && style.length > 0 ) {\\n\\n\\t\\t\\t// color keywords\\n\\t\\t\\tvar hex = ColorKeywords[ style ];\\n\\n\\t\\t\\tif ( hex !== undefined ) {\\n\\n\\t\\t\\t\\t// red\\n\\t\\t\\t\\tthis.setHex( hex );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t// unknown color\\n\\t\\t\\t\\tconsole.warn( 'THREE.Color: Unknown color ' + style );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tclone: function () {\\n\\n\\t\\treturn new this.constructor( this.r, this.g, this.b );\\n\\n\\t},\\n\\n\\tcopy: function ( color ) {\\n\\n\\t\\tthis.r = color.r;\\n\\t\\tthis.g = color.g;\\n\\t\\tthis.b = color.b;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tcopyGammaToLinear: function ( color, gammaFactor ) {\\n\\n\\t\\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\\n\\n\\t\\tthis.r = Math.pow( color.r, gammaFactor );\\n\\t\\tthis.g = Math.pow( color.g, gammaFactor );\\n\\t\\tthis.b = Math.pow( color.b, gammaFactor );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tcopyLinearToGamma: function ( color, gammaFactor ) {\\n\\n\\t\\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\\n\\n\\t\\tvar safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;\\n\\n\\t\\tthis.r = Math.pow( color.r, safeInverse );\\n\\t\\tthis.g = Math.pow( color.g, safeInverse );\\n\\t\\tthis.b = Math.pow( color.b, safeInverse );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tconvertGammaToLinear: function ( gammaFactor ) {\\n\\n\\t\\tthis.copyGammaToLinear( this, gammaFactor );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tconvertLinearToGamma: function ( gammaFactor ) {\\n\\n\\t\\tthis.copyLinearToGamma( this, gammaFactor );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tcopySRGBToLinear: function () {\\n\\n\\t\\tfunction SRGBToLinear( c ) {\\n\\n\\t\\t\\treturn ( c < 0.04045 ) ? c * 0.0773993808 : Math.pow( c * 0.9478672986 + 0.0521327014, 2.4 );\\n\\n\\t\\t}\\n\\n\\t\\treturn function copySRGBToLinear( color ) {\\n\\n\\t\\t\\tthis.r = SRGBToLinear( color.r );\\n\\t\\t\\tthis.g = SRGBToLinear( color.g );\\n\\t\\t\\tthis.b = SRGBToLinear( color.b );\\n\\n\\t\\t\\treturn this;\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\tcopyLinearToSRGB: function () {\\n\\n\\t\\tfunction LinearToSRGB( c ) {\\n\\n\\t\\t\\treturn ( c < 0.0031308 ) ? c * 12.92 : 1.055 * ( Math.pow( c, 0.41666 ) ) - 0.055;\\n\\n\\t\\t}\\n\\n\\t\\treturn function copyLinearToSRGB( color ) {\\n\\n\\t\\t\\tthis.r = LinearToSRGB( color.r );\\n\\t\\t\\tthis.g = LinearToSRGB( color.g );\\n\\t\\t\\tthis.b = LinearToSRGB( color.b );\\n\\n\\t\\t\\treturn this;\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\tconvertSRGBToLinear: function () {\\n\\n\\t\\tthis.copySRGBToLinear( this );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tconvertLinearToSRGB: function () {\\n\\n\\t\\tthis.copyLinearToSRGB( this );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tgetHex: function () {\\n\\n\\t\\treturn ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;\\n\\n\\t},\\n\\n\\tgetHexString: function () {\\n\\n\\t\\treturn ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );\\n\\n\\t},\\n\\n\\tgetHSL: function ( target ) {\\n\\n\\t\\t// h,s,l ranges are in 0.0 - 1.0\\n\\n\\t\\tif ( target === undefined ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Color: .getHSL() target is now required' );\\n\\t\\t\\ttarget = { h: 0, s: 0, l: 0 };\\n\\n\\t\\t}\\n\\n\\t\\tvar r = this.r, g = this.g, b = this.b;\\n\\n\\t\\tvar max = Math.max( r, g, b );\\n\\t\\tvar min = Math.min( r, g, b );\\n\\n\\t\\tvar hue, saturation;\\n\\t\\tvar lightness = ( min + max ) / 2.0;\\n\\n\\t\\tif ( min === max ) {\\n\\n\\t\\t\\thue = 0;\\n\\t\\t\\tsaturation = 0;\\n\\n\\t\\t} else {\\n\\n\\t\\t\\tvar delta = max - min;\\n\\n\\t\\t\\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\\n\\n\\t\\t\\tswitch ( max ) {\\n\\n\\t\\t\\t\\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\\n\\t\\t\\t\\tcase g: hue = ( b - r ) / delta + 2; break;\\n\\t\\t\\t\\tcase b: hue = ( r - g ) / delta + 4; break;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\thue /= 6;\\n\\n\\t\\t}\\n\\n\\t\\ttarget.h = hue;\\n\\t\\ttarget.s = saturation;\\n\\t\\ttarget.l = lightness;\\n\\n\\t\\treturn target;\\n\\n\\t},\\n\\n\\tgetStyle: function () {\\n\\n\\t\\treturn 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';\\n\\n\\t},\\n\\n\\toffsetHSL: function () {\\n\\n\\t\\tvar hsl = {};\\n\\n\\t\\treturn function ( h, s, l ) {\\n\\n\\t\\t\\tthis.getHSL( hsl );\\n\\n\\t\\t\\thsl.h += h; hsl.s += s; hsl.l += l;\\n\\n\\t\\t\\tthis.setHSL( hsl.h, hsl.s, hsl.l );\\n\\n\\t\\t\\treturn this;\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\tadd: function ( color ) {\\n\\n\\t\\tthis.r += color.r;\\n\\t\\tthis.g += color.g;\\n\\t\\tthis.b += color.b;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\taddColors: function ( color1, color2 ) {\\n\\n\\t\\tthis.r = color1.r + color2.r;\\n\\t\\tthis.g = color1.g + color2.g;\\n\\t\\tthis.b = color1.b + color2.b;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\taddScalar: function ( s ) {\\n\\n\\t\\tthis.r += s;\\n\\t\\tthis.g += s;\\n\\t\\tthis.b += s;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsub: function ( color ) {\\n\\n\\t\\tthis.r = Math.max( 0, this.r - color.r );\\n\\t\\tthis.g = Math.max( 0, this.g - color.g );\\n\\t\\tthis.b = Math.max( 0, this.b - color.b );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tmultiply: function ( color ) {\\n\\n\\t\\tthis.r *= color.r;\\n\\t\\tthis.g *= color.g;\\n\\t\\tthis.b *= color.b;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tmultiplyScalar: function ( s ) {\\n\\n\\t\\tthis.r *= s;\\n\\t\\tthis.g *= s;\\n\\t\\tthis.b *= s;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tlerp: function ( color, alpha ) {\\n\\n\\t\\tthis.r += ( color.r - this.r ) * alpha;\\n\\t\\tthis.g += ( color.g - this.g ) * alpha;\\n\\t\\tthis.b += ( color.b - this.b ) * alpha;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tlerpHSL: function () {\\n\\n\\t\\tvar hslA = { h: 0, s: 0, l: 0 };\\n\\t\\tvar hslB = { h: 0, s: 0, l: 0 };\\n\\n\\t\\treturn function lerpHSL( color, alpha ) {\\n\\n\\t\\t\\tthis.getHSL( hslA );\\n\\t\\t\\tcolor.getHSL( hslB );\\n\\n\\t\\t\\tvar h = _Math.lerp( hslA.h, hslB.h, alpha );\\n\\t\\t\\tvar s = _Math.lerp( hslA.s, hslB.s, alpha );\\n\\t\\t\\tvar l = _Math.lerp( hslA.l, hslB.l, alpha );\\n\\n\\t\\t\\tthis.setHSL( h, s, l );\\n\\n\\t\\t\\treturn this;\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\tequals: function ( c ) {\\n\\n\\t\\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\\n\\n\\t},\\n\\n\\tfromArray: function ( array, offset ) {\\n\\n\\t\\tif ( offset === undefined ) offset = 0;\\n\\n\\t\\tthis.r = array[ offset ];\\n\\t\\tthis.g = array[ offset + 1 ];\\n\\t\\tthis.b = array[ offset + 2 ];\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\ttoArray: function ( array, offset ) {\\n\\n\\t\\tif ( array === undefined ) array = [];\\n\\t\\tif ( offset === undefined ) offset = 0;\\n\\n\\t\\tarray[ offset ] = this.r;\\n\\t\\tarray[ offset + 1 ] = this.g;\\n\\t\\tarray[ offset + 2 ] = this.b;\\n\\n\\t\\treturn array;\\n\\n\\t},\\n\\n\\ttoJSON: function () {\\n\\n\\t\\treturn this.getHex();\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * Uniforms library for shared webgl shaders\\n */\\n\\nvar UniformsLib = {\\n\\n\\tcommon: {\\n\\n\\t\\tdiffuse: { value: new Color( 0xeeeeee ) },\\n\\t\\topacity: { value: 1.0 },\\n\\n\\t\\tmap: { value: null },\\n\\t\\tuvTransform: { value: new Matrix3() },\\n\\n\\t\\talphaMap: { value: null },\\n\\n\\t},\\n\\n\\tspecularmap: {\\n\\n\\t\\tspecularMap: { value: null },\\n\\n\\t},\\n\\n\\tenvmap: {\\n\\n\\t\\tenvMap: { value: null },\\n\\t\\tflipEnvMap: { value: - 1 },\\n\\t\\treflectivity: { value: 1.0 },\\n\\t\\trefractionRatio: { value: 0.98 },\\n\\t\\tmaxMipLevel: { value: 0 }\\n\\n\\t},\\n\\n\\taomap: {\\n\\n\\t\\taoMap: { value: null },\\n\\t\\taoMapIntensity: { value: 1 }\\n\\n\\t},\\n\\n\\tlightmap: {\\n\\n\\t\\tlightMap: { value: null },\\n\\t\\tlightMapIntensity: { value: 1 }\\n\\n\\t},\\n\\n\\temissivemap: {\\n\\n\\t\\temissiveMap: { value: null }\\n\\n\\t},\\n\\n\\tbumpmap: {\\n\\n\\t\\tbumpMap: { value: null },\\n\\t\\tbumpScale: { value: 1 }\\n\\n\\t},\\n\\n\\tnormalmap: {\\n\\n\\t\\tnormalMap: { value: null },\\n\\t\\tnormalScale: { value: new Vector2( 1, 1 ) }\\n\\n\\t},\\n\\n\\tdisplacementmap: {\\n\\n\\t\\tdisplacementMap: { value: null },\\n\\t\\tdisplacementScale: { value: 1 },\\n\\t\\tdisplacementBias: { value: 0 }\\n\\n\\t},\\n\\n\\troughnessmap: {\\n\\n\\t\\troughnessMap: { value: null }\\n\\n\\t},\\n\\n\\tmetalnessmap: {\\n\\n\\t\\tmetalnessMap: { value: null }\\n\\n\\t},\\n\\n\\tgradientmap: {\\n\\n\\t\\tgradientMap: { value: null }\\n\\n\\t},\\n\\n\\tfog: {\\n\\n\\t\\tfogDensity: { value: 0.00025 },\\n\\t\\tfogNear: { value: 1 },\\n\\t\\tfogFar: { value: 2000 },\\n\\t\\tfogColor: { value: new Color( 0xffffff ) }\\n\\n\\t},\\n\\n\\tlights: {\\n\\n\\t\\tambientLightColor: { value: [] },\\n\\n\\t\\tdirectionalLights: { value: [], properties: {\\n\\t\\t\\tdirection: {},\\n\\t\\t\\tcolor: {},\\n\\n\\t\\t\\tshadow: {},\\n\\t\\t\\tshadowBias: {},\\n\\t\\t\\tshadowRadius: {},\\n\\t\\t\\tshadowMapSize: {}\\n\\t\\t} },\\n\\n\\t\\tdirectionalShadowMap: { value: [] },\\n\\t\\tdirectionalShadowMatrix: { value: [] },\\n\\n\\t\\tspotLights: { value: [], properties: {\\n\\t\\t\\tcolor: {},\\n\\t\\t\\tposition: {},\\n\\t\\t\\tdirection: {},\\n\\t\\t\\tdistance: {},\\n\\t\\t\\tconeCos: {},\\n\\t\\t\\tpenumbraCos: {},\\n\\t\\t\\tdecay: {},\\n\\n\\t\\t\\tshadow: {},\\n\\t\\t\\tshadowBias: {},\\n\\t\\t\\tshadowRadius: {},\\n\\t\\t\\tshadowMapSize: {}\\n\\t\\t} },\\n\\n\\t\\tspotShadowMap: { value: [] },\\n\\t\\tspotShadowMatrix: { value: [] },\\n\\n\\t\\tpointLights: { value: [], properties: {\\n\\t\\t\\tcolor: {},\\n\\t\\t\\tposition: {},\\n\\t\\t\\tdecay: {},\\n\\t\\t\\tdistance: {},\\n\\n\\t\\t\\tshadow: {},\\n\\t\\t\\tshadowBias: {},\\n\\t\\t\\tshadowRadius: {},\\n\\t\\t\\tshadowMapSize: {},\\n\\t\\t\\tshadowCameraNear: {},\\n\\t\\t\\tshadowCameraFar: {}\\n\\t\\t} },\\n\\n\\t\\tpointShadowMap: { value: [] },\\n\\t\\tpointShadowMatrix: { value: [] },\\n\\n\\t\\themisphereLights: { value: [], properties: {\\n\\t\\t\\tdirection: {},\\n\\t\\t\\tskyColor: {},\\n\\t\\t\\tgroundColor: {}\\n\\t\\t} },\\n\\n\\t\\t// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src\\n\\t\\trectAreaLights: { value: [], properties: {\\n\\t\\t\\tcolor: {},\\n\\t\\t\\tposition: {},\\n\\t\\t\\twidth: {},\\n\\t\\t\\theight: {}\\n\\t\\t} }\\n\\n\\t},\\n\\n\\tpoints: {\\n\\n\\t\\tdiffuse: { value: new Color( 0xeeeeee ) },\\n\\t\\topacity: { value: 1.0 },\\n\\t\\tsize: { value: 1.0 },\\n\\t\\tscale: { value: 1.0 },\\n\\t\\tmap: { value: null },\\n\\t\\tuvTransform: { value: new Matrix3() }\\n\\n\\t},\\n\\n\\tsprite: {\\n\\n\\t\\tdiffuse: { value: new Color( 0xeeeeee ) },\\n\\t\\topacity: { value: 1.0 },\\n\\t\\tcenter: { value: new Vector2( 0.5, 0.5 ) },\\n\\t\\trotation: { value: 0.0 },\\n\\t\\tmap: { value: null },\\n\\t\\tuvTransform: { value: new Matrix3() }\\n\\n\\t}\\n\\n};\\n\\n/**\\n * @author alteredq / http://alteredqualia.com/\\n * @author mrdoob / http://mrdoob.com/\\n * @author mikael emtinger / http://gomo.se/\\n */\\n\\nvar ShaderLib = {\\n\\n\\tbasic: {\\n\\n\\t\\tuniforms: mergeUniforms( [\\n\\t\\t\\tUniformsLib.common,\\n\\t\\t\\tUniformsLib.specularmap,\\n\\t\\t\\tUniformsLib.envmap,\\n\\t\\t\\tUniformsLib.aomap,\\n\\t\\t\\tUniformsLib.lightmap,\\n\\t\\t\\tUniformsLib.fog\\n\\t\\t] ),\\n\\n\\t\\tvertexShader: ShaderChunk.meshbasic_vert,\\n\\t\\tfragmentShader: ShaderChunk.meshbasic_frag\\n\\n\\t},\\n\\n\\tlambert: {\\n\\n\\t\\tuniforms: mergeUniforms( [\\n\\t\\t\\tUniformsLib.common,\\n\\t\\t\\tUniformsLib.specularmap,\\n\\t\\t\\tUniformsLib.envmap,\\n\\t\\t\\tUniformsLib.aomap,\\n\\t\\t\\tUniformsLib.lightmap,\\n\\t\\t\\tUniformsLib.emissivemap,\\n\\t\\t\\tUniformsLib.fog,\\n\\t\\t\\tUniformsLib.lights,\\n\\t\\t\\t{\\n\\t\\t\\t\\temissive: { value: new Color( 0x000000 ) }\\n\\t\\t\\t}\\n\\t\\t] ),\\n\\n\\t\\tvertexShader: ShaderChunk.meshlambert_vert,\\n\\t\\tfragmentShader: ShaderChunk.meshlambert_frag\\n\\n\\t},\\n\\n\\tphong: {\\n\\n\\t\\tuniforms: mergeUniforms( [\\n\\t\\t\\tUniformsLib.common,\\n\\t\\t\\tUniformsLib.specularmap,\\n\\t\\t\\tUniformsLib.envmap,\\n\\t\\t\\tUniformsLib.aomap,\\n\\t\\t\\tUniformsLib.lightmap,\\n\\t\\t\\tUniformsLib.emissivemap,\\n\\t\\t\\tUniformsLib.bumpmap,\\n\\t\\t\\tUniformsLib.normalmap,\\n\\t\\t\\tUniformsLib.displacementmap,\\n\\t\\t\\tUniformsLib.gradientmap,\\n\\t\\t\\tUniformsLib.fog,\\n\\t\\t\\tUniformsLib.lights,\\n\\t\\t\\t{\\n\\t\\t\\t\\temissive: { value: new Color( 0x000000 ) },\\n\\t\\t\\t\\tspecular: { value: new Color( 0x111111 ) },\\n\\t\\t\\t\\tshininess: { value: 30 }\\n\\t\\t\\t}\\n\\t\\t] ),\\n\\n\\t\\tvertexShader: ShaderChunk.meshphong_vert,\\n\\t\\tfragmentShader: ShaderChunk.meshphong_frag\\n\\n\\t},\\n\\n\\tstandard: {\\n\\n\\t\\tuniforms: mergeUniforms( [\\n\\t\\t\\tUniformsLib.common,\\n\\t\\t\\tUniformsLib.envmap,\\n\\t\\t\\tUniformsLib.aomap,\\n\\t\\t\\tUniformsLib.lightmap,\\n\\t\\t\\tUniformsLib.emissivemap,\\n\\t\\t\\tUniformsLib.bumpmap,\\n\\t\\t\\tUniformsLib.normalmap,\\n\\t\\t\\tUniformsLib.displacementmap,\\n\\t\\t\\tUniformsLib.roughnessmap,\\n\\t\\t\\tUniformsLib.metalnessmap,\\n\\t\\t\\tUniformsLib.fog,\\n\\t\\t\\tUniformsLib.lights,\\n\\t\\t\\t{\\n\\t\\t\\t\\temissive: { value: new Color( 0x000000 ) },\\n\\t\\t\\t\\troughness: { value: 0.5 },\\n\\t\\t\\t\\tmetalness: { value: 0.5 },\\n\\t\\t\\t\\tenvMapIntensity: { value: 1 } // temporary\\n\\t\\t\\t}\\n\\t\\t] ),\\n\\n\\t\\tvertexShader: ShaderChunk.meshphysical_vert,\\n\\t\\tfragmentShader: ShaderChunk.meshphysical_frag\\n\\n\\t},\\n\\n\\tmatcap: {\\n\\n\\t\\tuniforms: mergeUniforms( [\\n\\t\\t\\tUniformsLib.common,\\n\\t\\t\\tUniformsLib.bumpmap,\\n\\t\\t\\tUniformsLib.normalmap,\\n\\t\\t\\tUniformsLib.displacementmap,\\n\\t\\t\\tUniformsLib.fog,\\n\\t\\t\\t{\\n\\t\\t\\t\\tmatcap: { value: null }\\n\\t\\t\\t}\\n\\t\\t] ),\\n\\n\\t\\tvertexShader: ShaderChunk.meshmatcap_vert,\\n\\t\\tfragmentShader: ShaderChunk.meshmatcap_frag\\n\\n\\t},\\n\\n\\tpoints: {\\n\\n\\t\\tuniforms: mergeUniforms( [\\n\\t\\t\\tUniformsLib.points,\\n\\t\\t\\tUniformsLib.fog\\n\\t\\t] ),\\n\\n\\t\\tvertexShader: ShaderChunk.points_vert,\\n\\t\\tfragmentShader: ShaderChunk.points_frag\\n\\n\\t},\\n\\n\\tdashed: {\\n\\n\\t\\tuniforms: mergeUniforms( [\\n\\t\\t\\tUniformsLib.common,\\n\\t\\t\\tUniformsLib.fog,\\n\\t\\t\\t{\\n\\t\\t\\t\\tscale: { value: 1 },\\n\\t\\t\\t\\tdashSize: { value: 1 },\\n\\t\\t\\t\\ttotalSize: { value: 2 }\\n\\t\\t\\t}\\n\\t\\t] ),\\n\\n\\t\\tvertexShader: ShaderChunk.linedashed_vert,\\n\\t\\tfragmentShader: ShaderChunk.linedashed_frag\\n\\n\\t},\\n\\n\\tdepth: {\\n\\n\\t\\tuniforms: mergeUniforms( [\\n\\t\\t\\tUniformsLib.common,\\n\\t\\t\\tUniformsLib.displacementmap\\n\\t\\t] ),\\n\\n\\t\\tvertexShader: ShaderChunk.depth_vert,\\n\\t\\tfragmentShader: ShaderChunk.depth_frag\\n\\n\\t},\\n\\n\\tnormal: {\\n\\n\\t\\tuniforms: mergeUniforms( [\\n\\t\\t\\tUniformsLib.common,\\n\\t\\t\\tUniformsLib.bumpmap,\\n\\t\\t\\tUniformsLib.normalmap,\\n\\t\\t\\tUniformsLib.displacementmap,\\n\\t\\t\\t{\\n\\t\\t\\t\\topacity: { value: 1.0 }\\n\\t\\t\\t}\\n\\t\\t] ),\\n\\n\\t\\tvertexShader: ShaderChunk.normal_vert,\\n\\t\\tfragmentShader: ShaderChunk.normal_frag\\n\\n\\t},\\n\\n\\tsprite: {\\n\\n\\t\\tuniforms: mergeUniforms( [\\n\\t\\t\\tUniformsLib.sprite,\\n\\t\\t\\tUniformsLib.fog\\n\\t\\t] ),\\n\\n\\t\\tvertexShader: ShaderChunk.sprite_vert,\\n\\t\\tfragmentShader: ShaderChunk.sprite_frag\\n\\n\\t},\\n\\n\\tbackground: {\\n\\n\\t\\tuniforms: {\\n\\t\\t\\tuvTransform: { value: new Matrix3() },\\n\\t\\t\\tt2D: { value: null },\\n\\t\\t},\\n\\n\\t\\tvertexShader: ShaderChunk.background_vert,\\n\\t\\tfragmentShader: ShaderChunk.background_frag\\n\\n\\t},\\n\\t/* -------------------------------------------------------------------------\\n\\t//\\tCube map shader\\n\\t ------------------------------------------------------------------------- */\\n\\n\\tcube: {\\n\\n\\t\\tuniforms: {\\n\\t\\t\\ttCube: { value: null },\\n\\t\\t\\ttFlip: { value: - 1 },\\n\\t\\t\\topacity: { value: 1.0 }\\n\\t\\t},\\n\\n\\t\\tvertexShader: ShaderChunk.cube_vert,\\n\\t\\tfragmentShader: ShaderChunk.cube_frag\\n\\n\\t},\\n\\n\\tequirect: {\\n\\n\\t\\tuniforms: {\\n\\t\\t\\ttEquirect: { value: null },\\n\\t\\t},\\n\\n\\t\\tvertexShader: ShaderChunk.equirect_vert,\\n\\t\\tfragmentShader: ShaderChunk.equirect_frag\\n\\n\\t},\\n\\n\\tdistanceRGBA: {\\n\\n\\t\\tuniforms: mergeUniforms( [\\n\\t\\t\\tUniformsLib.common,\\n\\t\\t\\tUniformsLib.displacementmap,\\n\\t\\t\\t{\\n\\t\\t\\t\\treferencePosition: { value: new Vector3() },\\n\\t\\t\\t\\tnearDistance: { value: 1 },\\n\\t\\t\\t\\tfarDistance: { value: 1000 }\\n\\t\\t\\t}\\n\\t\\t] ),\\n\\n\\t\\tvertexShader: ShaderChunk.distanceRGBA_vert,\\n\\t\\tfragmentShader: ShaderChunk.distanceRGBA_frag\\n\\n\\t},\\n\\n\\tshadow: {\\n\\n\\t\\tuniforms: mergeUniforms( [\\n\\t\\t\\tUniformsLib.lights,\\n\\t\\t\\tUniformsLib.fog,\\n\\t\\t\\t{\\n\\t\\t\\t\\tcolor: { value: new Color( 0x00000 ) },\\n\\t\\t\\t\\topacity: { value: 1.0 }\\n\\t\\t\\t},\\n\\t\\t] ),\\n\\n\\t\\tvertexShader: ShaderChunk.shadow_vert,\\n\\t\\tfragmentShader: ShaderChunk.shadow_frag\\n\\n\\t}\\n\\n};\\n\\nShaderLib.physical = {\\n\\n\\tuniforms: mergeUniforms( [\\n\\t\\tShaderLib.standard.uniforms,\\n\\t\\t{\\n\\t\\t\\tclearCoat: { value: 0 },\\n\\t\\t\\tclearCoatRoughness: { value: 0 }\\n\\t\\t}\\n\\t] ),\\n\\n\\tvertexShader: ShaderChunk.meshphysical_vert,\\n\\tfragmentShader: ShaderChunk.meshphysical_frag\\n\\n};\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\nfunction WebGLAnimation() {\\n\\n\\tvar context = null;\\n\\tvar isAnimating = false;\\n\\tvar animationLoop = null;\\n\\n\\tfunction onAnimationFrame( time, frame ) {\\n\\n\\t\\tif ( isAnimating === false ) return;\\n\\n\\t\\tanimationLoop( time, frame );\\n\\n\\t\\tcontext.requestAnimationFrame( onAnimationFrame );\\n\\n\\t}\\n\\n\\treturn {\\n\\n\\t\\tstart: function () {\\n\\n\\t\\t\\tif ( isAnimating === true ) return;\\n\\t\\t\\tif ( animationLoop === null ) return;\\n\\n\\t\\t\\tcontext.requestAnimationFrame( onAnimationFrame );\\n\\n\\t\\t\\tisAnimating = true;\\n\\n\\t\\t},\\n\\n\\t\\tstop: function () {\\n\\n\\t\\t\\tisAnimating = false;\\n\\n\\t\\t},\\n\\n\\t\\tsetAnimationLoop: function ( callback ) {\\n\\n\\t\\t\\tanimationLoop = callback;\\n\\n\\t\\t},\\n\\n\\t\\tsetContext: function ( value ) {\\n\\n\\t\\t\\tcontext = value;\\n\\n\\t\\t}\\n\\n\\t};\\n\\n}\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\nfunction WebGLAttributes( gl ) {\\n\\n\\tvar buffers = new WeakMap();\\n\\n\\tfunction createBuffer( attribute, bufferType ) {\\n\\n\\t\\tvar array = attribute.array;\\n\\t\\tvar usage = attribute.dynamic ? 35048 : 35044;\\n\\n\\t\\tvar buffer = gl.createBuffer();\\n\\n\\t\\tgl.bindBuffer( bufferType, buffer );\\n\\t\\tgl.bufferData( bufferType, array, usage );\\n\\n\\t\\tattribute.onUploadCallback();\\n\\n\\t\\tvar type = 5126;\\n\\n\\t\\tif ( array instanceof Float32Array ) {\\n\\n\\t\\t\\ttype = 5126;\\n\\n\\t\\t} else if ( array instanceof Float64Array ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.' );\\n\\n\\t\\t} else if ( array instanceof Uint16Array ) {\\n\\n\\t\\t\\ttype = 5123;\\n\\n\\t\\t} else if ( array instanceof Int16Array ) {\\n\\n\\t\\t\\ttype = 5122;\\n\\n\\t\\t} else if ( array instanceof Uint32Array ) {\\n\\n\\t\\t\\ttype = 5125;\\n\\n\\t\\t} else if ( array instanceof Int32Array ) {\\n\\n\\t\\t\\ttype = 5124;\\n\\n\\t\\t} else if ( array instanceof Int8Array ) {\\n\\n\\t\\t\\ttype = 5120;\\n\\n\\t\\t} else if ( array instanceof Uint8Array ) {\\n\\n\\t\\t\\ttype = 5121;\\n\\n\\t\\t}\\n\\n\\t\\treturn {\\n\\t\\t\\tbuffer: buffer,\\n\\t\\t\\ttype: type,\\n\\t\\t\\tbytesPerElement: array.BYTES_PER_ELEMENT,\\n\\t\\t\\tversion: attribute.version\\n\\t\\t};\\n\\n\\t}\\n\\n\\tfunction updateBuffer( buffer, attribute, bufferType ) {\\n\\n\\t\\tvar array = attribute.array;\\n\\t\\tvar updateRange = attribute.updateRange;\\n\\n\\t\\tgl.bindBuffer( bufferType, buffer );\\n\\n\\t\\tif ( attribute.dynamic === false ) {\\n\\n\\t\\t\\tgl.bufferData( bufferType, array, 35044 );\\n\\n\\t\\t} else if ( updateRange.count === - 1 ) {\\n\\n\\t\\t\\t// Not using update ranges\\n\\n\\t\\t\\tgl.bufferSubData( bufferType, 0, array );\\n\\n\\t\\t} else if ( updateRange.count === 0 ) {\\n\\n\\t\\t\\tconsole.error( 'THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.' );\\n\\n\\t\\t} else {\\n\\n\\t\\t\\tgl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,\\n\\t\\t\\t\\tarray.subarray( updateRange.offset, updateRange.offset + updateRange.count ) );\\n\\n\\t\\t\\tupdateRange.count = - 1; // reset range\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\t//\\n\\n\\tfunction get( attribute ) {\\n\\n\\t\\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\\n\\n\\t\\treturn buffers.get( attribute );\\n\\n\\t}\\n\\n\\tfunction remove( attribute ) {\\n\\n\\t\\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\\n\\n\\t\\tvar data = buffers.get( attribute );\\n\\n\\t\\tif ( data ) {\\n\\n\\t\\t\\tgl.deleteBuffer( data.buffer );\\n\\n\\t\\t\\tbuffers.delete( attribute );\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tfunction update( attribute, bufferType ) {\\n\\n\\t\\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\\n\\n\\t\\tvar data = buffers.get( attribute );\\n\\n\\t\\tif ( data === undefined ) {\\n\\n\\t\\t\\tbuffers.set( attribute, createBuffer( attribute, bufferType ) );\\n\\n\\t\\t} else if ( data.version < attribute.version ) {\\n\\n\\t\\t\\tupdateBuffer( data.buffer, attribute, bufferType );\\n\\n\\t\\t\\tdata.version = attribute.version;\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\treturn {\\n\\n\\t\\tget: get,\\n\\t\\tremove: remove,\\n\\t\\tupdate: update\\n\\n\\t};\\n\\n}\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n * @author alteredq / http://alteredqualia.com/\\n */\\n\\nfunction Face3( a, b, c, normal, color, materialIndex ) {\\n\\n\\tthis.a = a;\\n\\tthis.b = b;\\n\\tthis.c = c;\\n\\n\\tthis.normal = ( normal && normal.isVector3 ) ? normal : new Vector3();\\n\\tthis.vertexNormals = Array.isArray( normal ) ? normal : [];\\n\\n\\tthis.color = ( color && color.isColor ) ? color : new Color();\\n\\tthis.vertexColors = Array.isArray( color ) ? color : [];\\n\\n\\tthis.materialIndex = materialIndex !== undefined ? materialIndex : 0;\\n\\n}\\n\\nObject.assign( Face3.prototype, {\\n\\n\\tclone: function () {\\n\\n\\t\\treturn new this.constructor().copy( this );\\n\\n\\t},\\n\\n\\tcopy: function ( source ) {\\n\\n\\t\\tthis.a = source.a;\\n\\t\\tthis.b = source.b;\\n\\t\\tthis.c = source.c;\\n\\n\\t\\tthis.normal.copy( source.normal );\\n\\t\\tthis.color.copy( source.color );\\n\\n\\t\\tthis.materialIndex = source.materialIndex;\\n\\n\\t\\tfor ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {\\n\\n\\t\\t\\tthis.vertexNormals[ i ] = source.vertexNormals[ i ].clone();\\n\\n\\t\\t}\\n\\n\\t\\tfor ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {\\n\\n\\t\\t\\tthis.vertexColors[ i ] = source.vertexColors[ i ].clone();\\n\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n * @author WestLangley / http://github.com/WestLangley\\n * @author bhouston / http://clara.io\\n */\\n\\nfunction Euler( x, y, z, order ) {\\n\\n\\tthis._x = x || 0;\\n\\tthis._y = y || 0;\\n\\tthis._z = z || 0;\\n\\tthis._order = order || Euler.DefaultOrder;\\n\\n}\\n\\nEuler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];\\n\\nEuler.DefaultOrder = 'XYZ';\\n\\nObject.defineProperties( Euler.prototype, {\\n\\n\\tx: {\\n\\n\\t\\tget: function () {\\n\\n\\t\\t\\treturn this._x;\\n\\n\\t\\t},\\n\\n\\t\\tset: function ( value ) {\\n\\n\\t\\t\\tthis._x = value;\\n\\t\\t\\tthis.onChangeCallback();\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\ty: {\\n\\n\\t\\tget: function () {\\n\\n\\t\\t\\treturn this._y;\\n\\n\\t\\t},\\n\\n\\t\\tset: function ( value ) {\\n\\n\\t\\t\\tthis._y = value;\\n\\t\\t\\tthis.onChangeCallback();\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\tz: {\\n\\n\\t\\tget: function () {\\n\\n\\t\\t\\treturn this._z;\\n\\n\\t\\t},\\n\\n\\t\\tset: function ( value ) {\\n\\n\\t\\t\\tthis._z = value;\\n\\t\\t\\tthis.onChangeCallback();\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\torder: {\\n\\n\\t\\tget: function () {\\n\\n\\t\\t\\treturn this._order;\\n\\n\\t\\t},\\n\\n\\t\\tset: function ( value ) {\\n\\n\\t\\t\\tthis._order = value;\\n\\t\\t\\tthis.onChangeCallback();\\n\\n\\t\\t}\\n\\n\\t}\\n\\n} );\\n\\nObject.assign( Euler.prototype, {\\n\\n\\tisEuler: true,\\n\\n\\tset: function ( x, y, z, order ) {\\n\\n\\t\\tthis._x = x;\\n\\t\\tthis._y = y;\\n\\t\\tthis._z = z;\\n\\t\\tthis._order = order || this._order;\\n\\n\\t\\tthis.onChangeCallback();\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tclone: function () {\\n\\n\\t\\treturn new this.constructor( this._x, this._y, this._z, this._order );\\n\\n\\t},\\n\\n\\tcopy: function ( euler ) {\\n\\n\\t\\tthis._x = euler._x;\\n\\t\\tthis._y = euler._y;\\n\\t\\tthis._z = euler._z;\\n\\t\\tthis._order = euler._order;\\n\\n\\t\\tthis.onChangeCallback();\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetFromRotationMatrix: function ( m, order, update ) {\\n\\n\\t\\tvar clamp = _Math.clamp;\\n\\n\\t\\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\\n\\n\\t\\tvar te = m.elements;\\n\\t\\tvar m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\\n\\t\\tvar m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\\n\\t\\tvar m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\\n\\n\\t\\torder = order || this._order;\\n\\n\\t\\tif ( order === 'XYZ' ) {\\n\\n\\t\\t\\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\\n\\n\\t\\t\\tif ( Math.abs( m13 ) < 0.99999 ) {\\n\\n\\t\\t\\t\\tthis._x = Math.atan2( - m23, m33 );\\n\\t\\t\\t\\tthis._z = Math.atan2( - m12, m11 );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tthis._x = Math.atan2( m32, m22 );\\n\\t\\t\\t\\tthis._z = 0;\\n\\n\\t\\t\\t}\\n\\n\\t\\t} else if ( order === 'YXZ' ) {\\n\\n\\t\\t\\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\\n\\n\\t\\t\\tif ( Math.abs( m23 ) < 0.99999 ) {\\n\\n\\t\\t\\t\\tthis._y = Math.atan2( m13, m33 );\\n\\t\\t\\t\\tthis._z = Math.atan2( m21, m22 );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tthis._y = Math.atan2( - m31, m11 );\\n\\t\\t\\t\\tthis._z = 0;\\n\\n\\t\\t\\t}\\n\\n\\t\\t} else if ( order === 'ZXY' ) {\\n\\n\\t\\t\\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\\n\\n\\t\\t\\tif ( Math.abs( m32 ) < 0.99999 ) {\\n\\n\\t\\t\\t\\tthis._y = Math.atan2( - m31, m33 );\\n\\t\\t\\t\\tthis._z = Math.atan2( - m12, m22 );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tthis._y = 0;\\n\\t\\t\\t\\tthis._z = Math.atan2( m21, m11 );\\n\\n\\t\\t\\t}\\n\\n\\t\\t} else if ( order === 'ZYX' ) {\\n\\n\\t\\t\\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\\n\\n\\t\\t\\tif ( Math.abs( m31 ) < 0.99999 ) {\\n\\n\\t\\t\\t\\tthis._x = Math.atan2( m32, m33 );\\n\\t\\t\\t\\tthis._z = Math.atan2( m21, m11 );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tthis._x = 0;\\n\\t\\t\\t\\tthis._z = Math.atan2( - m12, m22 );\\n\\n\\t\\t\\t}\\n\\n\\t\\t} else if ( order === 'YZX' ) {\\n\\n\\t\\t\\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\\n\\n\\t\\t\\tif ( Math.abs( m21 ) < 0.99999 ) {\\n\\n\\t\\t\\t\\tthis._x = Math.atan2( - m23, m22 );\\n\\t\\t\\t\\tthis._y = Math.atan2( - m31, m11 );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tthis._x = 0;\\n\\t\\t\\t\\tthis._y = Math.atan2( m13, m33 );\\n\\n\\t\\t\\t}\\n\\n\\t\\t} else if ( order === 'XZY' ) {\\n\\n\\t\\t\\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\\n\\n\\t\\t\\tif ( Math.abs( m12 ) < 0.99999 ) {\\n\\n\\t\\t\\t\\tthis._x = Math.atan2( m32, m22 );\\n\\t\\t\\t\\tthis._y = Math.atan2( m13, m11 );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tthis._x = Math.atan2( - m23, m33 );\\n\\t\\t\\t\\tthis._y = 0;\\n\\n\\t\\t\\t}\\n\\n\\t\\t} else {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );\\n\\n\\t\\t}\\n\\n\\t\\tthis._order = order;\\n\\n\\t\\tif ( update !== false ) this.onChangeCallback();\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetFromQuaternion: function () {\\n\\n\\t\\tvar matrix = new Matrix4();\\n\\n\\t\\treturn function setFromQuaternion( q, order, update ) {\\n\\n\\t\\t\\tmatrix.makeRotationFromQuaternion( q );\\n\\n\\t\\t\\treturn this.setFromRotationMatrix( matrix, order, update );\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\tsetFromVector3: function ( v, order ) {\\n\\n\\t\\treturn this.set( v.x, v.y, v.z, order || this._order );\\n\\n\\t},\\n\\n\\treorder: function () {\\n\\n\\t\\t// WARNING: this discards revolution information -bhouston\\n\\n\\t\\tvar q = new Quaternion();\\n\\n\\t\\treturn function reorder( newOrder ) {\\n\\n\\t\\t\\tq.setFromEuler( this );\\n\\n\\t\\t\\treturn this.setFromQuaternion( q, newOrder );\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\tequals: function ( euler ) {\\n\\n\\t\\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\\n\\n\\t},\\n\\n\\tfromArray: function ( array ) {\\n\\n\\t\\tthis._x = array[ 0 ];\\n\\t\\tthis._y = array[ 1 ];\\n\\t\\tthis._z = array[ 2 ];\\n\\t\\tif ( array[ 3 ] !== undefined ) this._order = array[ 3 ];\\n\\n\\t\\tthis.onChangeCallback();\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\ttoArray: function ( array, offset ) {\\n\\n\\t\\tif ( array === undefined ) array = [];\\n\\t\\tif ( offset === undefined ) offset = 0;\\n\\n\\t\\tarray[ offset ] = this._x;\\n\\t\\tarray[ offset + 1 ] = this._y;\\n\\t\\tarray[ offset + 2 ] = this._z;\\n\\t\\tarray[ offset + 3 ] = this._order;\\n\\n\\t\\treturn array;\\n\\n\\t},\\n\\n\\ttoVector3: function ( optionalResult ) {\\n\\n\\t\\tif ( optionalResult ) {\\n\\n\\t\\t\\treturn optionalResult.set( this._x, this._y, this._z );\\n\\n\\t\\t} else {\\n\\n\\t\\t\\treturn new Vector3( this._x, this._y, this._z );\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\tonChange: function ( callback ) {\\n\\n\\t\\tthis.onChangeCallback = callback;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tonChangeCallback: function () {}\\n\\n} );\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\nfunction Layers() {\\n\\n\\tthis.mask = 1 | 0;\\n\\n}\\n\\nObject.assign( Layers.prototype, {\\n\\n\\tset: function ( channel ) {\\n\\n\\t\\tthis.mask = 1 << channel | 0;\\n\\n\\t},\\n\\n\\tenable: function ( channel ) {\\n\\n\\t\\tthis.mask |= 1 << channel | 0;\\n\\n\\t},\\n\\n\\ttoggle: function ( channel ) {\\n\\n\\t\\tthis.mask ^= 1 << channel | 0;\\n\\n\\t},\\n\\n\\tdisable: function ( channel ) {\\n\\n\\t\\tthis.mask &= ~ ( 1 << channel | 0 );\\n\\n\\t},\\n\\n\\ttest: function ( layers ) {\\n\\n\\t\\treturn ( this.mask & layers.mask ) !== 0;\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n * @author mikael emtinger / http://gomo.se/\\n * @author alteredq / http://alteredqualia.com/\\n * @author WestLangley / http://github.com/WestLangley\\n * @author elephantatwork / www.elephantatwork.ch\\n */\\n\\nvar object3DId = 0;\\n\\nfunction Object3D() {\\n\\n\\tObject.defineProperty( this, 'id', { value: object3DId ++ } );\\n\\n\\tthis.uuid = _Math.generateUUID();\\n\\n\\tthis.name = '';\\n\\tthis.type = 'Object3D';\\n\\n\\tthis.parent = null;\\n\\tthis.children = [];\\n\\n\\tthis.up = Object3D.DefaultUp.clone();\\n\\n\\tvar position = new Vector3();\\n\\tvar rotation = new Euler();\\n\\tvar quaternion = new Quaternion();\\n\\tvar scale = new Vector3( 1, 1, 1 );\\n\\n\\tfunction onRotationChange() {\\n\\n\\t\\tquaternion.setFromEuler( rotation, false );\\n\\n\\t}\\n\\n\\tfunction onQuaternionChange() {\\n\\n\\t\\trotation.setFromQuaternion( quaternion, undefined, false );\\n\\n\\t}\\n\\n\\trotation.onChange( onRotationChange );\\n\\tquaternion.onChange( onQuaternionChange );\\n\\n\\tObject.defineProperties( this, {\\n\\t\\tposition: {\\n\\t\\t\\tconfigurable: true,\\n\\t\\t\\tenumerable: true,\\n\\t\\t\\tvalue: position\\n\\t\\t},\\n\\t\\trotation: {\\n\\t\\t\\tconfigurable: true,\\n\\t\\t\\tenumerable: true,\\n\\t\\t\\tvalue: rotation\\n\\t\\t},\\n\\t\\tquaternion: {\\n\\t\\t\\tconfigurable: true,\\n\\t\\t\\tenumerable: true,\\n\\t\\t\\tvalue: quaternion\\n\\t\\t},\\n\\t\\tscale: {\\n\\t\\t\\tconfigurable: true,\\n\\t\\t\\tenumerable: true,\\n\\t\\t\\tvalue: scale\\n\\t\\t},\\n\\t\\tmodelViewMatrix: {\\n\\t\\t\\tvalue: new Matrix4()\\n\\t\\t},\\n\\t\\tnormalMatrix: {\\n\\t\\t\\tvalue: new Matrix3()\\n\\t\\t}\\n\\t} );\\n\\n\\tthis.matrix = new Matrix4();\\n\\tthis.matrixWorld = new Matrix4();\\n\\n\\tthis.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\\n\\tthis.matrixWorldNeedsUpdate = false;\\n\\n\\tthis.layers = new Layers();\\n\\tthis.visible = true;\\n\\n\\tthis.castShadow = false;\\n\\tthis.receiveShadow = false;\\n\\n\\tthis.frustumCulled = true;\\n\\tthis.renderOrder = 0;\\n\\n\\tthis.userData = {};\\n\\n}\\n\\nObject3D.DefaultUp = new Vector3( 0, 1, 0 );\\nObject3D.DefaultMatrixAutoUpdate = true;\\n\\nObject3D.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\\n\\n\\tconstructor: Object3D,\\n\\n\\tisObject3D: true,\\n\\n\\tonBeforeRender: function () {},\\n\\tonAfterRender: function () {},\\n\\n\\tapplyMatrix: function ( matrix ) {\\n\\n\\t\\tthis.matrix.multiplyMatrices( matrix, this.matrix );\\n\\n\\t\\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\\n\\n\\t},\\n\\n\\tapplyQuaternion: function ( q ) {\\n\\n\\t\\tthis.quaternion.premultiply( q );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetRotationFromAxisAngle: function ( axis, angle ) {\\n\\n\\t\\t// assumes axis is normalized\\n\\n\\t\\tthis.quaternion.setFromAxisAngle( axis, angle );\\n\\n\\t},\\n\\n\\tsetRotationFromEuler: function ( euler ) {\\n\\n\\t\\tthis.quaternion.setFromEuler( euler, true );\\n\\n\\t},\\n\\n\\tsetRotationFromMatrix: function ( m ) {\\n\\n\\t\\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\\n\\n\\t\\tthis.quaternion.setFromRotationMatrix( m );\\n\\n\\t},\\n\\n\\tsetRotationFromQuaternion: function ( q ) {\\n\\n\\t\\t// assumes q is normalized\\n\\n\\t\\tthis.quaternion.copy( q );\\n\\n\\t},\\n\\n\\trotateOnAxis: function () {\\n\\n\\t\\t// rotate object on axis in object space\\n\\t\\t// axis is assumed to be normalized\\n\\n\\t\\tvar q1 = new Quaternion();\\n\\n\\t\\treturn function rotateOnAxis( axis, angle ) {\\n\\n\\t\\t\\tq1.setFromAxisAngle( axis, angle );\\n\\n\\t\\t\\tthis.quaternion.multiply( q1 );\\n\\n\\t\\t\\treturn this;\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\trotateOnWorldAxis: function () {\\n\\n\\t\\t// rotate object on axis in world space\\n\\t\\t// axis is assumed to be normalized\\n\\t\\t// method assumes no rotated parent\\n\\n\\t\\tvar q1 = new Quaternion();\\n\\n\\t\\treturn function rotateOnWorldAxis( axis, angle ) {\\n\\n\\t\\t\\tq1.setFromAxisAngle( axis, angle );\\n\\n\\t\\t\\tthis.quaternion.premultiply( q1 );\\n\\n\\t\\t\\treturn this;\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\trotateX: function () {\\n\\n\\t\\tvar v1 = new Vector3( 1, 0, 0 );\\n\\n\\t\\treturn function rotateX( angle ) {\\n\\n\\t\\t\\treturn this.rotateOnAxis( v1, angle );\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\trotateY: function () {\\n\\n\\t\\tvar v1 = new Vector3( 0, 1, 0 );\\n\\n\\t\\treturn function rotateY( angle ) {\\n\\n\\t\\t\\treturn this.rotateOnAxis( v1, angle );\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\trotateZ: function () {\\n\\n\\t\\tvar v1 = new Vector3( 0, 0, 1 );\\n\\n\\t\\treturn function rotateZ( angle ) {\\n\\n\\t\\t\\treturn this.rotateOnAxis( v1, angle );\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\ttranslateOnAxis: function () {\\n\\n\\t\\t// translate object by distance along axis in object space\\n\\t\\t// axis is assumed to be normalized\\n\\n\\t\\tvar v1 = new Vector3();\\n\\n\\t\\treturn function translateOnAxis( axis, distance ) {\\n\\n\\t\\t\\tv1.copy( axis ).applyQuaternion( this.quaternion );\\n\\n\\t\\t\\tthis.position.add( v1.multiplyScalar( distance ) );\\n\\n\\t\\t\\treturn this;\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\ttranslateX: function () {\\n\\n\\t\\tvar v1 = new Vector3( 1, 0, 0 );\\n\\n\\t\\treturn function translateX( distance ) {\\n\\n\\t\\t\\treturn this.translateOnAxis( v1, distance );\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\ttranslateY: function () {\\n\\n\\t\\tvar v1 = new Vector3( 0, 1, 0 );\\n\\n\\t\\treturn function translateY( distance ) {\\n\\n\\t\\t\\treturn this.translateOnAxis( v1, distance );\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\ttranslateZ: function () {\\n\\n\\t\\tvar v1 = new Vector3( 0, 0, 1 );\\n\\n\\t\\treturn function translateZ( distance ) {\\n\\n\\t\\t\\treturn this.translateOnAxis( v1, distance );\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\tlocalToWorld: function ( vector ) {\\n\\n\\t\\treturn vector.applyMatrix4( this.matrixWorld );\\n\\n\\t},\\n\\n\\tworldToLocal: function () {\\n\\n\\t\\tvar m1 = new Matrix4();\\n\\n\\t\\treturn function worldToLocal( vector ) {\\n\\n\\t\\t\\treturn vector.applyMatrix4( m1.getInverse( this.matrixWorld ) );\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\tlookAt: function () {\\n\\n\\t\\t// This method does not support objects having non-uniformly-scaled parent(s)\\n\\n\\t\\tvar q1 = new Quaternion();\\n\\t\\tvar m1 = new Matrix4();\\n\\t\\tvar target = new Vector3();\\n\\t\\tvar position = new Vector3();\\n\\n\\t\\treturn function lookAt( x, y, z ) {\\n\\n\\t\\t\\tif ( x.isVector3 ) {\\n\\n\\t\\t\\t\\ttarget.copy( x );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\ttarget.set( x, y, z );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tvar parent = this.parent;\\n\\n\\t\\t\\tthis.updateWorldMatrix( true, false );\\n\\n\\t\\t\\tposition.setFromMatrixPosition( this.matrixWorld );\\n\\n\\t\\t\\tif ( this.isCamera || this.isLight ) {\\n\\n\\t\\t\\t\\tm1.lookAt( position, target, this.up );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tm1.lookAt( target, position, this.up );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tthis.quaternion.setFromRotationMatrix( m1 );\\n\\n\\t\\t\\tif ( parent ) {\\n\\n\\t\\t\\t\\tm1.extractRotation( parent.matrixWorld );\\n\\t\\t\\t\\tq1.setFromRotationMatrix( m1 );\\n\\t\\t\\t\\tthis.quaternion.premultiply( q1.inverse() );\\n\\n\\t\\t\\t}\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\tadd: function ( object ) {\\n\\n\\t\\tif ( arguments.length > 1 ) {\\n\\n\\t\\t\\tfor ( var i = 0; i < arguments.length; i ++ ) {\\n\\n\\t\\t\\t\\tthis.add( arguments[ i ] );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn this;\\n\\n\\t\\t}\\n\\n\\t\\tif ( object === this ) {\\n\\n\\t\\t\\tconsole.error( \\\"THREE.Object3D.add: object can't be added as a child of itself.\\\", object );\\n\\t\\t\\treturn this;\\n\\n\\t\\t}\\n\\n\\t\\tif ( ( object && object.isObject3D ) ) {\\n\\n\\t\\t\\tif ( object.parent !== null ) {\\n\\n\\t\\t\\t\\tobject.parent.remove( object );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tobject.parent = this;\\n\\t\\t\\tobject.dispatchEvent( { type: 'added' } );\\n\\n\\t\\t\\tthis.children.push( object );\\n\\n\\t\\t} else {\\n\\n\\t\\t\\tconsole.error( \\\"THREE.Object3D.add: object not an instance of THREE.Object3D.\\\", object );\\n\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tremove: function ( object ) {\\n\\n\\t\\tif ( arguments.length > 1 ) {\\n\\n\\t\\t\\tfor ( var i = 0; i < arguments.length; i ++ ) {\\n\\n\\t\\t\\t\\tthis.remove( arguments[ i ] );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn this;\\n\\n\\t\\t}\\n\\n\\t\\tvar index = this.children.indexOf( object );\\n\\n\\t\\tif ( index !== - 1 ) {\\n\\n\\t\\t\\tobject.parent = null;\\n\\n\\t\\t\\tobject.dispatchEvent( { type: 'removed' } );\\n\\n\\t\\t\\tthis.children.splice( index, 1 );\\n\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tgetObjectById: function ( id ) {\\n\\n\\t\\treturn this.getObjectByProperty( 'id', id );\\n\\n\\t},\\n\\n\\tgetObjectByName: function ( name ) {\\n\\n\\t\\treturn this.getObjectByProperty( 'name', name );\\n\\n\\t},\\n\\n\\tgetObjectByProperty: function ( name, value ) {\\n\\n\\t\\tif ( this[ name ] === value ) return this;\\n\\n\\t\\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\\n\\n\\t\\t\\tvar child = this.children[ i ];\\n\\t\\t\\tvar object = child.getObjectByProperty( name, value );\\n\\n\\t\\t\\tif ( object !== undefined ) {\\n\\n\\t\\t\\t\\treturn object;\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\treturn undefined;\\n\\n\\t},\\n\\n\\tgetWorldPosition: function ( target ) {\\n\\n\\t\\tif ( target === undefined ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Object3D: .getWorldPosition() target is now required' );\\n\\t\\t\\ttarget = new Vector3();\\n\\n\\t\\t}\\n\\n\\t\\tthis.updateMatrixWorld( true );\\n\\n\\t\\treturn target.setFromMatrixPosition( this.matrixWorld );\\n\\n\\t},\\n\\n\\tgetWorldQuaternion: function () {\\n\\n\\t\\tvar position = new Vector3();\\n\\t\\tvar scale = new Vector3();\\n\\n\\t\\treturn function getWorldQuaternion( target ) {\\n\\n\\t\\t\\tif ( target === undefined ) {\\n\\n\\t\\t\\t\\tconsole.warn( 'THREE.Object3D: .getWorldQuaternion() target is now required' );\\n\\t\\t\\t\\ttarget = new Quaternion();\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tthis.updateMatrixWorld( true );\\n\\n\\t\\t\\tthis.matrixWorld.decompose( position, target, scale );\\n\\n\\t\\t\\treturn target;\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\tgetWorldScale: function () {\\n\\n\\t\\tvar position = new Vector3();\\n\\t\\tvar quaternion = new Quaternion();\\n\\n\\t\\treturn function getWorldScale( target ) {\\n\\n\\t\\t\\tif ( target === undefined ) {\\n\\n\\t\\t\\t\\tconsole.warn( 'THREE.Object3D: .getWorldScale() target is now required' );\\n\\t\\t\\t\\ttarget = new Vector3();\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tthis.updateMatrixWorld( true );\\n\\n\\t\\t\\tthis.matrixWorld.decompose( position, quaternion, target );\\n\\n\\t\\t\\treturn target;\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\tgetWorldDirection: function ( target ) {\\n\\n\\t\\tif ( target === undefined ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Object3D: .getWorldDirection() target is now required' );\\n\\t\\t\\ttarget = new Vector3();\\n\\n\\t\\t}\\n\\n\\t\\tthis.updateMatrixWorld( true );\\n\\n\\t\\tvar e = this.matrixWorld.elements;\\n\\n\\t\\treturn target.set( e[ 8 ], e[ 9 ], e[ 10 ] ).normalize();\\n\\n\\t},\\n\\n\\traycast: function () {},\\n\\n\\ttraverse: function ( callback ) {\\n\\n\\t\\tcallback( this );\\n\\n\\t\\tvar children = this.children;\\n\\n\\t\\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\\n\\n\\t\\t\\tchildren[ i ].traverse( callback );\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\ttraverseVisible: function ( callback ) {\\n\\n\\t\\tif ( this.visible === false ) return;\\n\\n\\t\\tcallback( this );\\n\\n\\t\\tvar children = this.children;\\n\\n\\t\\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\\n\\n\\t\\t\\tchildren[ i ].traverseVisible( callback );\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\ttraverseAncestors: function ( callback ) {\\n\\n\\t\\tvar parent = this.parent;\\n\\n\\t\\tif ( parent !== null ) {\\n\\n\\t\\t\\tcallback( parent );\\n\\n\\t\\t\\tparent.traverseAncestors( callback );\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\tupdateMatrix: function () {\\n\\n\\t\\tthis.matrix.compose( this.position, this.quaternion, this.scale );\\n\\n\\t\\tthis.matrixWorldNeedsUpdate = true;\\n\\n\\t},\\n\\n\\tupdateMatrixWorld: function ( force ) {\\n\\n\\t\\tif ( this.matrixAutoUpdate ) this.updateMatrix();\\n\\n\\t\\tif ( this.matrixWorldNeedsUpdate || force ) {\\n\\n\\t\\t\\tif ( this.parent === null ) {\\n\\n\\t\\t\\t\\tthis.matrixWorld.copy( this.matrix );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tthis.matrixWorldNeedsUpdate = false;\\n\\n\\t\\t\\tforce = true;\\n\\n\\t\\t}\\n\\n\\t\\t// update children\\n\\n\\t\\tvar children = this.children;\\n\\n\\t\\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\\n\\n\\t\\t\\tchildren[ i ].updateMatrixWorld( force );\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\tupdateWorldMatrix: function ( updateParents, updateChildren ) {\\n\\n\\t\\tvar parent = this.parent;\\n\\n\\t\\tif ( updateParents === true && parent !== null ) {\\n\\n\\t\\t\\tparent.updateWorldMatrix( true, false );\\n\\n\\t\\t}\\n\\n\\t\\tif ( this.matrixAutoUpdate ) this.updateMatrix();\\n\\n\\t\\tif ( this.parent === null ) {\\n\\n\\t\\t\\tthis.matrixWorld.copy( this.matrix );\\n\\n\\t\\t} else {\\n\\n\\t\\t\\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\\n\\n\\t\\t}\\n\\n\\t\\t// update children\\n\\n\\t\\tif ( updateChildren === true ) {\\n\\n\\t\\t\\tvar children = this.children;\\n\\n\\t\\t\\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\\n\\n\\t\\t\\t\\tchildren[ i ].updateWorldMatrix( false, true );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\ttoJSON: function ( meta ) {\\n\\n\\t\\t// meta is a string when called from JSON.stringify\\n\\t\\tvar isRootObject = ( meta === undefined || typeof meta === 'string' );\\n\\n\\t\\tvar output = {};\\n\\n\\t\\t// meta is a hash used to collect geometries, materials.\\n\\t\\t// not providing it implies that this is the root object\\n\\t\\t// being serialized.\\n\\t\\tif ( isRootObject ) {\\n\\n\\t\\t\\t// initialize meta obj\\n\\t\\t\\tmeta = {\\n\\t\\t\\t\\tgeometries: {},\\n\\t\\t\\t\\tmaterials: {},\\n\\t\\t\\t\\ttextures: {},\\n\\t\\t\\t\\timages: {},\\n\\t\\t\\t\\tshapes: {}\\n\\t\\t\\t};\\n\\n\\t\\t\\toutput.metadata = {\\n\\t\\t\\t\\tversion: 4.5,\\n\\t\\t\\t\\ttype: 'Object',\\n\\t\\t\\t\\tgenerator: 'Object3D.toJSON'\\n\\t\\t\\t};\\n\\n\\t\\t}\\n\\n\\t\\t// standard Object3D serialization\\n\\n\\t\\tvar object = {};\\n\\n\\t\\tobject.uuid = this.uuid;\\n\\t\\tobject.type = this.type;\\n\\n\\t\\tif ( this.name !== '' ) object.name = this.name;\\n\\t\\tif ( this.castShadow === true ) object.castShadow = true;\\n\\t\\tif ( this.receiveShadow === true ) object.receiveShadow = true;\\n\\t\\tif ( this.visible === false ) object.visible = false;\\n\\t\\tif ( this.frustumCulled === false ) object.frustumCulled = false;\\n\\t\\tif ( this.renderOrder !== 0 ) object.renderOrder = this.renderOrder;\\n\\t\\tif ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;\\n\\n\\t\\tobject.layers = this.layers.mask;\\n\\t\\tobject.matrix = this.matrix.toArray();\\n\\n\\t\\tif ( this.matrixAutoUpdate === false ) object.matrixAutoUpdate = false;\\n\\n\\t\\t// object specific properties\\n\\n\\t\\tif ( this.isMesh && this.drawMode !== TrianglesDrawMode ) object.drawMode = this.drawMode;\\n\\n\\t\\t//\\n\\n\\t\\tfunction serialize( library, element ) {\\n\\n\\t\\t\\tif ( library[ element.uuid ] === undefined ) {\\n\\n\\t\\t\\t\\tlibrary[ element.uuid ] = element.toJSON( meta );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn element.uuid;\\n\\n\\t\\t}\\n\\n\\t\\tif ( this.isMesh || this.isLine || this.isPoints ) {\\n\\n\\t\\t\\tobject.geometry = serialize( meta.geometries, this.geometry );\\n\\n\\t\\t\\tvar parameters = this.geometry.parameters;\\n\\n\\t\\t\\tif ( parameters !== undefined && parameters.shapes !== undefined ) {\\n\\n\\t\\t\\t\\tvar shapes = parameters.shapes;\\n\\n\\t\\t\\t\\tif ( Array.isArray( shapes ) ) {\\n\\n\\t\\t\\t\\t\\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\\n\\n\\t\\t\\t\\t\\t\\tvar shape = shapes[ i ];\\n\\n\\t\\t\\t\\t\\t\\tserialize( meta.shapes, shape );\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\tserialize( meta.shapes, shapes );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tif ( this.material !== undefined ) {\\n\\n\\t\\t\\tif ( Array.isArray( this.material ) ) {\\n\\n\\t\\t\\t\\tvar uuids = [];\\n\\n\\t\\t\\t\\tfor ( var i = 0, l = this.material.length; i < l; i ++ ) {\\n\\n\\t\\t\\t\\t\\tuuids.push( serialize( meta.materials, this.material[ i ] ) );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tobject.material = uuids;\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tobject.material = serialize( meta.materials, this.material );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\t//\\n\\n\\t\\tif ( this.children.length > 0 ) {\\n\\n\\t\\t\\tobject.children = [];\\n\\n\\t\\t\\tfor ( var i = 0; i < this.children.length; i ++ ) {\\n\\n\\t\\t\\t\\tobject.children.push( this.children[ i ].toJSON( meta ).object );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tif ( isRootObject ) {\\n\\n\\t\\t\\tvar geometries = extractFromCache( meta.geometries );\\n\\t\\t\\tvar materials = extractFromCache( meta.materials );\\n\\t\\t\\tvar textures = extractFromCache( meta.textures );\\n\\t\\t\\tvar images = extractFromCache( meta.images );\\n\\t\\t\\tvar shapes = extractFromCache( meta.shapes );\\n\\n\\t\\t\\tif ( geometries.length > 0 ) output.geometries = geometries;\\n\\t\\t\\tif ( materials.length > 0 ) output.materials = materials;\\n\\t\\t\\tif ( textures.length > 0 ) output.textures = textures;\\n\\t\\t\\tif ( images.length > 0 ) output.images = images;\\n\\t\\t\\tif ( shapes.length > 0 ) output.shapes = shapes;\\n\\n\\t\\t}\\n\\n\\t\\toutput.object = object;\\n\\n\\t\\treturn output;\\n\\n\\t\\t// extract data from the cache hash\\n\\t\\t// remove metadata on each item\\n\\t\\t// and return as array\\n\\t\\tfunction extractFromCache( cache ) {\\n\\n\\t\\t\\tvar values = [];\\n\\t\\t\\tfor ( var key in cache ) {\\n\\n\\t\\t\\t\\tvar data = cache[ key ];\\n\\t\\t\\t\\tdelete data.metadata;\\n\\t\\t\\t\\tvalues.push( data );\\n\\n\\t\\t\\t}\\n\\t\\t\\treturn values;\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\tclone: function ( recursive ) {\\n\\n\\t\\treturn new this.constructor().copy( this, recursive );\\n\\n\\t},\\n\\n\\tcopy: function ( source, recursive ) {\\n\\n\\t\\tif ( recursive === undefined ) recursive = true;\\n\\n\\t\\tthis.name = source.name;\\n\\n\\t\\tthis.up.copy( source.up );\\n\\n\\t\\tthis.position.copy( source.position );\\n\\t\\tthis.quaternion.copy( source.quaternion );\\n\\t\\tthis.scale.copy( source.scale );\\n\\n\\t\\tthis.matrix.copy( source.matrix );\\n\\t\\tthis.matrixWorld.copy( source.matrixWorld );\\n\\n\\t\\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\\n\\t\\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\\n\\n\\t\\tthis.layers.mask = source.layers.mask;\\n\\t\\tthis.visible = source.visible;\\n\\n\\t\\tthis.castShadow = source.castShadow;\\n\\t\\tthis.receiveShadow = source.receiveShadow;\\n\\n\\t\\tthis.frustumCulled = source.frustumCulled;\\n\\t\\tthis.renderOrder = source.renderOrder;\\n\\n\\t\\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\\n\\n\\t\\tif ( recursive === true ) {\\n\\n\\t\\t\\tfor ( var i = 0; i < source.children.length; i ++ ) {\\n\\n\\t\\t\\t\\tvar child = source.children[ i ];\\n\\t\\t\\t\\tthis.add( child.clone() );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n * @author kile / http://kile.stravaganza.org/\\n * @author alteredq / http://alteredqualia.com/\\n * @author mikael emtinger / http://gomo.se/\\n * @author zz85 / http://www.lab4games.net/zz85/blog\\n * @author bhouston / http://clara.io\\n */\\n\\nvar geometryId = 0; // Geometry uses even numbers as Id\\n\\nfunction Geometry() {\\n\\n\\tObject.defineProperty( this, 'id', { value: geometryId += 2 } );\\n\\n\\tthis.uuid = _Math.generateUUID();\\n\\n\\tthis.name = '';\\n\\tthis.type = 'Geometry';\\n\\n\\tthis.vertices = [];\\n\\tthis.colors = [];\\n\\tthis.faces = [];\\n\\tthis.faceVertexUvs = [[]];\\n\\n\\tthis.morphTargets = [];\\n\\tthis.morphNormals = [];\\n\\n\\tthis.skinWeights = [];\\n\\tthis.skinIndices = [];\\n\\n\\tthis.lineDistances = [];\\n\\n\\tthis.boundingBox = null;\\n\\tthis.boundingSphere = null;\\n\\n\\t// update flags\\n\\n\\tthis.elementsNeedUpdate = false;\\n\\tthis.verticesNeedUpdate = false;\\n\\tthis.uvsNeedUpdate = false;\\n\\tthis.normalsNeedUpdate = false;\\n\\tthis.colorsNeedUpdate = false;\\n\\tthis.lineDistancesNeedUpdate = false;\\n\\tthis.groupsNeedUpdate = false;\\n\\n}\\n\\nGeometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\\n\\n\\tconstructor: Geometry,\\n\\n\\tisGeometry: true,\\n\\n\\tapplyMatrix: function ( matrix ) {\\n\\n\\t\\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\\n\\n\\t\\tfor ( var i = 0, il = this.vertices.length; i < il; i ++ ) {\\n\\n\\t\\t\\tvar vertex = this.vertices[ i ];\\n\\t\\t\\tvertex.applyMatrix4( matrix );\\n\\n\\t\\t}\\n\\n\\t\\tfor ( var i = 0, il = this.faces.length; i < il; i ++ ) {\\n\\n\\t\\t\\tvar face = this.faces[ i ];\\n\\t\\t\\tface.normal.applyMatrix3( normalMatrix ).normalize();\\n\\n\\t\\t\\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\\n\\n\\t\\t\\t\\tface.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tif ( this.boundingBox !== null ) {\\n\\n\\t\\t\\tthis.computeBoundingBox();\\n\\n\\t\\t}\\n\\n\\t\\tif ( this.boundingSphere !== null ) {\\n\\n\\t\\t\\tthis.computeBoundingSphere();\\n\\n\\t\\t}\\n\\n\\t\\tthis.verticesNeedUpdate = true;\\n\\t\\tthis.normalsNeedUpdate = true;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\trotateX: function () {\\n\\n\\t\\t// rotate geometry around world x-axis\\n\\n\\t\\tvar m1 = new Matrix4();\\n\\n\\t\\treturn function rotateX( angle ) {\\n\\n\\t\\t\\tm1.makeRotationX( angle );\\n\\n\\t\\t\\tthis.applyMatrix( m1 );\\n\\n\\t\\t\\treturn this;\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\trotateY: function () {\\n\\n\\t\\t// rotate geometry around world y-axis\\n\\n\\t\\tvar m1 = new Matrix4();\\n\\n\\t\\treturn function rotateY( angle ) {\\n\\n\\t\\t\\tm1.makeRotationY( angle );\\n\\n\\t\\t\\tthis.applyMatrix( m1 );\\n\\n\\t\\t\\treturn this;\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\trotateZ: function () {\\n\\n\\t\\t// rotate geometry around world z-axis\\n\\n\\t\\tvar m1 = new Matrix4();\\n\\n\\t\\treturn function rotateZ( angle ) {\\n\\n\\t\\t\\tm1.makeRotationZ( angle );\\n\\n\\t\\t\\tthis.applyMatrix( m1 );\\n\\n\\t\\t\\treturn this;\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\ttranslate: function () {\\n\\n\\t\\t// translate geometry\\n\\n\\t\\tvar m1 = new Matrix4();\\n\\n\\t\\treturn function translate( x, y, z ) {\\n\\n\\t\\t\\tm1.makeTranslation( x, y, z );\\n\\n\\t\\t\\tthis.applyMatrix( m1 );\\n\\n\\t\\t\\treturn this;\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\tscale: function () {\\n\\n\\t\\t// scale geometry\\n\\n\\t\\tvar m1 = new Matrix4();\\n\\n\\t\\treturn function scale( x, y, z ) {\\n\\n\\t\\t\\tm1.makeScale( x, y, z );\\n\\n\\t\\t\\tthis.applyMatrix( m1 );\\n\\n\\t\\t\\treturn this;\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\tlookAt: function () {\\n\\n\\t\\tvar obj = new Object3D();\\n\\n\\t\\treturn function lookAt( vector ) {\\n\\n\\t\\t\\tobj.lookAt( vector );\\n\\n\\t\\t\\tobj.updateMatrix();\\n\\n\\t\\t\\tthis.applyMatrix( obj.matrix );\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\tfromBufferGeometry: function ( geometry ) {\\n\\n\\t\\tvar scope = this;\\n\\n\\t\\tvar indices = geometry.index !== null ? geometry.index.array : undefined;\\n\\t\\tvar attributes = geometry.attributes;\\n\\n\\t\\tvar positions = attributes.position.array;\\n\\t\\tvar normals = attributes.normal !== undefined ? attributes.normal.array : undefined;\\n\\t\\tvar colors = attributes.color !== undefined ? attributes.color.array : undefined;\\n\\t\\tvar uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;\\n\\t\\tvar uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;\\n\\n\\t\\tif ( uvs2 !== undefined ) this.faceVertexUvs[ 1 ] = [];\\n\\n\\t\\tfor ( var i = 0, j = 0; i < positions.length; i += 3, j += 2 ) {\\n\\n\\t\\t\\tscope.vertices.push( new Vector3().fromArray( positions, i ) );\\n\\n\\t\\t\\tif ( colors !== undefined ) {\\n\\n\\t\\t\\t\\tscope.colors.push( new Color().fromArray( colors, i ) );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tfunction addFace( a, b, c, materialIndex ) {\\n\\n\\t\\t\\tvar vertexColors = ( colors === undefined ) ? [] : [\\n\\t\\t\\t\\tscope.colors[ a ].clone(),\\n\\t\\t\\t\\tscope.colors[ b ].clone(),\\n\\t\\t\\t\\tscope.colors[ c ].clone() ];\\n\\n\\t\\t\\tvar vertexNormals = ( normals === undefined ) ? [] : [\\n\\t\\t\\t\\tnew Vector3().fromArray( normals, a * 3 ),\\n\\t\\t\\t\\tnew Vector3().fromArray( normals, b * 3 ),\\n\\t\\t\\t\\tnew Vector3().fromArray( normals, c * 3 )\\n\\t\\t\\t];\\n\\n\\t\\t\\tvar face = new Face3( a, b, c, vertexNormals, vertexColors, materialIndex );\\n\\n\\t\\t\\tscope.faces.push( face );\\n\\n\\t\\t\\tif ( uvs !== undefined ) {\\n\\n\\t\\t\\t\\tscope.faceVertexUvs[ 0 ].push( [\\n\\t\\t\\t\\t\\tnew Vector2().fromArray( uvs, a * 2 ),\\n\\t\\t\\t\\t\\tnew Vector2().fromArray( uvs, b * 2 ),\\n\\t\\t\\t\\t\\tnew Vector2().fromArray( uvs, c * 2 )\\n\\t\\t\\t\\t] );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( uvs2 !== undefined ) {\\n\\n\\t\\t\\t\\tscope.faceVertexUvs[ 1 ].push( [\\n\\t\\t\\t\\t\\tnew Vector2().fromArray( uvs2, a * 2 ),\\n\\t\\t\\t\\t\\tnew Vector2().fromArray( uvs2, b * 2 ),\\n\\t\\t\\t\\t\\tnew Vector2().fromArray( uvs2, c * 2 )\\n\\t\\t\\t\\t] );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tvar groups = geometry.groups;\\n\\n\\t\\tif ( groups.length > 0 ) {\\n\\n\\t\\t\\tfor ( var i = 0; i < groups.length; i ++ ) {\\n\\n\\t\\t\\t\\tvar group = groups[ i ];\\n\\n\\t\\t\\t\\tvar start = group.start;\\n\\t\\t\\t\\tvar count = group.count;\\n\\n\\t\\t\\t\\tfor ( var j = start, jl = start + count; j < jl; j += 3 ) {\\n\\n\\t\\t\\t\\t\\tif ( indices !== undefined ) {\\n\\n\\t\\t\\t\\t\\t\\taddFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex );\\n\\n\\t\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\t\\taddFace( j, j + 1, j + 2, group.materialIndex );\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t} else {\\n\\n\\t\\t\\tif ( indices !== undefined ) {\\n\\n\\t\\t\\t\\tfor ( var i = 0; i < indices.length; i += 3 ) {\\n\\n\\t\\t\\t\\t\\taddFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tfor ( var i = 0; i < positions.length / 3; i += 3 ) {\\n\\n\\t\\t\\t\\t\\taddFace( i, i + 1, i + 2 );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tthis.computeFaceNormals();\\n\\n\\t\\tif ( geometry.boundingBox !== null ) {\\n\\n\\t\\t\\tthis.boundingBox = geometry.boundingBox.clone();\\n\\n\\t\\t}\\n\\n\\t\\tif ( geometry.boundingSphere !== null ) {\\n\\n\\t\\t\\tthis.boundingSphere = geometry.boundingSphere.clone();\\n\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tcenter: function () {\\n\\n\\t\\tvar offset = new Vector3();\\n\\n\\t\\treturn function center() {\\n\\n\\t\\t\\tthis.computeBoundingBox();\\n\\n\\t\\t\\tthis.boundingBox.getCenter( offset ).negate();\\n\\n\\t\\t\\tthis.translate( offset.x, offset.y, offset.z );\\n\\n\\t\\t\\treturn this;\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\tnormalize: function () {\\n\\n\\t\\tthis.computeBoundingSphere();\\n\\n\\t\\tvar center = this.boundingSphere.center;\\n\\t\\tvar radius = this.boundingSphere.radius;\\n\\n\\t\\tvar s = radius === 0 ? 1 : 1.0 / radius;\\n\\n\\t\\tvar matrix = new Matrix4();\\n\\t\\tmatrix.set(\\n\\t\\t\\ts, 0, 0, - s * center.x,\\n\\t\\t\\t0, s, 0, - s * center.y,\\n\\t\\t\\t0, 0, s, - s * center.z,\\n\\t\\t\\t0, 0, 0, 1\\n\\t\\t);\\n\\n\\t\\tthis.applyMatrix( matrix );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tcomputeFaceNormals: function () {\\n\\n\\t\\tvar cb = new Vector3(), ab = new Vector3();\\n\\n\\t\\tfor ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {\\n\\n\\t\\t\\tvar face = this.faces[ f ];\\n\\n\\t\\t\\tvar vA = this.vertices[ face.a ];\\n\\t\\t\\tvar vB = this.vertices[ face.b ];\\n\\t\\t\\tvar vC = this.vertices[ face.c ];\\n\\n\\t\\t\\tcb.subVectors( vC, vB );\\n\\t\\t\\tab.subVectors( vA, vB );\\n\\t\\t\\tcb.cross( ab );\\n\\n\\t\\t\\tcb.normalize();\\n\\n\\t\\t\\tface.normal.copy( cb );\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\tcomputeVertexNormals: function ( areaWeighted ) {\\n\\n\\t\\tif ( areaWeighted === undefined ) areaWeighted = true;\\n\\n\\t\\tvar v, vl, f, fl, face, vertices;\\n\\n\\t\\tvertices = new Array( this.vertices.length );\\n\\n\\t\\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\\n\\n\\t\\t\\tvertices[ v ] = new Vector3();\\n\\n\\t\\t}\\n\\n\\t\\tif ( areaWeighted ) {\\n\\n\\t\\t\\t// vertex normals weighted by triangle areas\\n\\t\\t\\t// http://www.iquilezles.org/www/articles/normals/normals.htm\\n\\n\\t\\t\\tvar vA, vB, vC;\\n\\t\\t\\tvar cb = new Vector3(), ab = new Vector3();\\n\\n\\t\\t\\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\\n\\n\\t\\t\\t\\tface = this.faces[ f ];\\n\\n\\t\\t\\t\\tvA = this.vertices[ face.a ];\\n\\t\\t\\t\\tvB = this.vertices[ face.b ];\\n\\t\\t\\t\\tvC = this.vertices[ face.c ];\\n\\n\\t\\t\\t\\tcb.subVectors( vC, vB );\\n\\t\\t\\t\\tab.subVectors( vA, vB );\\n\\t\\t\\t\\tcb.cross( ab );\\n\\n\\t\\t\\t\\tvertices[ face.a ].add( cb );\\n\\t\\t\\t\\tvertices[ face.b ].add( cb );\\n\\t\\t\\t\\tvertices[ face.c ].add( cb );\\n\\n\\t\\t\\t}\\n\\n\\t\\t} else {\\n\\n\\t\\t\\tthis.computeFaceNormals();\\n\\n\\t\\t\\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\\n\\n\\t\\t\\t\\tface = this.faces[ f ];\\n\\n\\t\\t\\t\\tvertices[ face.a ].add( face.normal );\\n\\t\\t\\t\\tvertices[ face.b ].add( face.normal );\\n\\t\\t\\t\\tvertices[ face.c ].add( face.normal );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\\n\\n\\t\\t\\tvertices[ v ].normalize();\\n\\n\\t\\t}\\n\\n\\t\\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\\n\\n\\t\\t\\tface = this.faces[ f ];\\n\\n\\t\\t\\tvar vertexNormals = face.vertexNormals;\\n\\n\\t\\t\\tif ( vertexNormals.length === 3 ) {\\n\\n\\t\\t\\t\\tvertexNormals[ 0 ].copy( vertices[ face.a ] );\\n\\t\\t\\t\\tvertexNormals[ 1 ].copy( vertices[ face.b ] );\\n\\t\\t\\t\\tvertexNormals[ 2 ].copy( vertices[ face.c ] );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tvertexNormals[ 0 ] = vertices[ face.a ].clone();\\n\\t\\t\\t\\tvertexNormals[ 1 ] = vertices[ face.b ].clone();\\n\\t\\t\\t\\tvertexNormals[ 2 ] = vertices[ face.c ].clone();\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tif ( this.faces.length > 0 ) {\\n\\n\\t\\t\\tthis.normalsNeedUpdate = true;\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\tcomputeFlatVertexNormals: function () {\\n\\n\\t\\tvar f, fl, face;\\n\\n\\t\\tthis.computeFaceNormals();\\n\\n\\t\\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\\n\\n\\t\\t\\tface = this.faces[ f ];\\n\\n\\t\\t\\tvar vertexNormals = face.vertexNormals;\\n\\n\\t\\t\\tif ( vertexNormals.length === 3 ) {\\n\\n\\t\\t\\t\\tvertexNormals[ 0 ].copy( face.normal );\\n\\t\\t\\t\\tvertexNormals[ 1 ].copy( face.normal );\\n\\t\\t\\t\\tvertexNormals[ 2 ].copy( face.normal );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tvertexNormals[ 0 ] = face.normal.clone();\\n\\t\\t\\t\\tvertexNormals[ 1 ] = face.normal.clone();\\n\\t\\t\\t\\tvertexNormals[ 2 ] = face.normal.clone();\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tif ( this.faces.length > 0 ) {\\n\\n\\t\\t\\tthis.normalsNeedUpdate = true;\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\tcomputeMorphNormals: function () {\\n\\n\\t\\tvar i, il, f, fl, face;\\n\\n\\t\\t// save original normals\\n\\t\\t// - create temp variables on first access\\n\\t\\t//   otherwise just copy (for faster repeated calls)\\n\\n\\t\\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\\n\\n\\t\\t\\tface = this.faces[ f ];\\n\\n\\t\\t\\tif ( ! face.__originalFaceNormal ) {\\n\\n\\t\\t\\t\\tface.__originalFaceNormal = face.normal.clone();\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tface.__originalFaceNormal.copy( face.normal );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];\\n\\n\\t\\t\\tfor ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {\\n\\n\\t\\t\\t\\tif ( ! face.__originalVertexNormals[ i ] ) {\\n\\n\\t\\t\\t\\t\\tface.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();\\n\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\tface.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\t// use temp geometry to compute face and vertex normals for each morph\\n\\n\\t\\tvar tmpGeo = new Geometry();\\n\\t\\ttmpGeo.faces = this.faces;\\n\\n\\t\\tfor ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {\\n\\n\\t\\t\\t// create on first access\\n\\n\\t\\t\\tif ( ! this.morphNormals[ i ] ) {\\n\\n\\t\\t\\t\\tthis.morphNormals[ i ] = {};\\n\\t\\t\\t\\tthis.morphNormals[ i ].faceNormals = [];\\n\\t\\t\\t\\tthis.morphNormals[ i ].vertexNormals = [];\\n\\n\\t\\t\\t\\tvar dstNormalsFace = this.morphNormals[ i ].faceNormals;\\n\\t\\t\\t\\tvar dstNormalsVertex = this.morphNormals[ i ].vertexNormals;\\n\\n\\t\\t\\t\\tvar faceNormal, vertexNormals;\\n\\n\\t\\t\\t\\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\\n\\n\\t\\t\\t\\t\\tfaceNormal = new Vector3();\\n\\t\\t\\t\\t\\tvertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };\\n\\n\\t\\t\\t\\t\\tdstNormalsFace.push( faceNormal );\\n\\t\\t\\t\\t\\tdstNormalsVertex.push( vertexNormals );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tvar morphNormals = this.morphNormals[ i ];\\n\\n\\t\\t\\t// set vertices to morph target\\n\\n\\t\\t\\ttmpGeo.vertices = this.morphTargets[ i ].vertices;\\n\\n\\t\\t\\t// compute morph normals\\n\\n\\t\\t\\ttmpGeo.computeFaceNormals();\\n\\t\\t\\ttmpGeo.computeVertexNormals();\\n\\n\\t\\t\\t// store morph normals\\n\\n\\t\\t\\tvar faceNormal, vertexNormals;\\n\\n\\t\\t\\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\\n\\n\\t\\t\\t\\tface = this.faces[ f ];\\n\\n\\t\\t\\t\\tfaceNormal = morphNormals.faceNormals[ f ];\\n\\t\\t\\t\\tvertexNormals = morphNormals.vertexNormals[ f ];\\n\\n\\t\\t\\t\\tfaceNormal.copy( face.normal );\\n\\n\\t\\t\\t\\tvertexNormals.a.copy( face.vertexNormals[ 0 ] );\\n\\t\\t\\t\\tvertexNormals.b.copy( face.vertexNormals[ 1 ] );\\n\\t\\t\\t\\tvertexNormals.c.copy( face.vertexNormals[ 2 ] );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\t// restore original normals\\n\\n\\t\\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\\n\\n\\t\\t\\tface = this.faces[ f ];\\n\\n\\t\\t\\tface.normal = face.__originalFaceNormal;\\n\\t\\t\\tface.vertexNormals = face.__originalVertexNormals;\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\tcomputeBoundingBox: function () {\\n\\n\\t\\tif ( this.boundingBox === null ) {\\n\\n\\t\\t\\tthis.boundingBox = new Box3();\\n\\n\\t\\t}\\n\\n\\t\\tthis.boundingBox.setFromPoints( this.vertices );\\n\\n\\t},\\n\\n\\tcomputeBoundingSphere: function () {\\n\\n\\t\\tif ( this.boundingSphere === null ) {\\n\\n\\t\\t\\tthis.boundingSphere = new Sphere();\\n\\n\\t\\t}\\n\\n\\t\\tthis.boundingSphere.setFromPoints( this.vertices );\\n\\n\\t},\\n\\n\\tmerge: function ( geometry, matrix, materialIndexOffset ) {\\n\\n\\t\\tif ( ! ( geometry && geometry.isGeometry ) ) {\\n\\n\\t\\t\\tconsole.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );\\n\\t\\t\\treturn;\\n\\n\\t\\t}\\n\\n\\t\\tvar normalMatrix,\\n\\t\\t\\tvertexOffset = this.vertices.length,\\n\\t\\t\\tvertices1 = this.vertices,\\n\\t\\t\\tvertices2 = geometry.vertices,\\n\\t\\t\\tfaces1 = this.faces,\\n\\t\\t\\tfaces2 = geometry.faces,\\n\\t\\t\\tuvs1 = this.faceVertexUvs[ 0 ],\\n\\t\\t\\tuvs2 = geometry.faceVertexUvs[ 0 ],\\n\\t\\t\\tcolors1 = this.colors,\\n\\t\\t\\tcolors2 = geometry.colors;\\n\\n\\t\\tif ( materialIndexOffset === undefined ) materialIndexOffset = 0;\\n\\n\\t\\tif ( matrix !== undefined ) {\\n\\n\\t\\t\\tnormalMatrix = new Matrix3().getNormalMatrix( matrix );\\n\\n\\t\\t}\\n\\n\\t\\t// vertices\\n\\n\\t\\tfor ( var i = 0, il = vertices2.length; i < il; i ++ ) {\\n\\n\\t\\t\\tvar vertex = vertices2[ i ];\\n\\n\\t\\t\\tvar vertexCopy = vertex.clone();\\n\\n\\t\\t\\tif ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );\\n\\n\\t\\t\\tvertices1.push( vertexCopy );\\n\\n\\t\\t}\\n\\n\\t\\t// colors\\n\\n\\t\\tfor ( var i = 0, il = colors2.length; i < il; i ++ ) {\\n\\n\\t\\t\\tcolors1.push( colors2[ i ].clone() );\\n\\n\\t\\t}\\n\\n\\t\\t// faces\\n\\n\\t\\tfor ( i = 0, il = faces2.length; i < il; i ++ ) {\\n\\n\\t\\t\\tvar face = faces2[ i ], faceCopy, normal, color,\\n\\t\\t\\t\\tfaceVertexNormals = face.vertexNormals,\\n\\t\\t\\t\\tfaceVertexColors = face.vertexColors;\\n\\n\\t\\t\\tfaceCopy = new Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );\\n\\t\\t\\tfaceCopy.normal.copy( face.normal );\\n\\n\\t\\t\\tif ( normalMatrix !== undefined ) {\\n\\n\\t\\t\\t\\tfaceCopy.normal.applyMatrix3( normalMatrix ).normalize();\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tfor ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {\\n\\n\\t\\t\\t\\tnormal = faceVertexNormals[ j ].clone();\\n\\n\\t\\t\\t\\tif ( normalMatrix !== undefined ) {\\n\\n\\t\\t\\t\\t\\tnormal.applyMatrix3( normalMatrix ).normalize();\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tfaceCopy.vertexNormals.push( normal );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tfaceCopy.color.copy( face.color );\\n\\n\\t\\t\\tfor ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {\\n\\n\\t\\t\\t\\tcolor = faceVertexColors[ j ];\\n\\t\\t\\t\\tfaceCopy.vertexColors.push( color.clone() );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tfaceCopy.materialIndex = face.materialIndex + materialIndexOffset;\\n\\n\\t\\t\\tfaces1.push( faceCopy );\\n\\n\\t\\t}\\n\\n\\t\\t// uvs\\n\\n\\t\\tfor ( i = 0, il = uvs2.length; i < il; i ++ ) {\\n\\n\\t\\t\\tvar uv = uvs2[ i ], uvCopy = [];\\n\\n\\t\\t\\tif ( uv === undefined ) {\\n\\n\\t\\t\\t\\tcontinue;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tfor ( var j = 0, jl = uv.length; j < jl; j ++ ) {\\n\\n\\t\\t\\t\\tuvCopy.push( uv[ j ].clone() );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tuvs1.push( uvCopy );\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\tmergeMesh: function ( mesh ) {\\n\\n\\t\\tif ( ! ( mesh && mesh.isMesh ) ) {\\n\\n\\t\\t\\tconsole.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );\\n\\t\\t\\treturn;\\n\\n\\t\\t}\\n\\n\\t\\tif ( mesh.matrixAutoUpdate ) mesh.updateMatrix();\\n\\n\\t\\tthis.merge( mesh.geometry, mesh.matrix );\\n\\n\\t},\\n\\n\\t/*\\n\\t * Checks for duplicate vertices with hashmap.\\n\\t * Duplicated vertices are removed\\n\\t * and faces' vertices are updated.\\n\\t */\\n\\n\\tmergeVertices: function () {\\n\\n\\t\\tvar verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\\n\\t\\tvar unique = [], changes = [];\\n\\n\\t\\tvar v, key;\\n\\t\\tvar precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\\n\\t\\tvar precision = Math.pow( 10, precisionPoints );\\n\\t\\tvar i, il, face;\\n\\t\\tvar indices, j, jl;\\n\\n\\t\\tfor ( i = 0, il = this.vertices.length; i < il; i ++ ) {\\n\\n\\t\\t\\tv = this.vertices[ i ];\\n\\t\\t\\tkey = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );\\n\\n\\t\\t\\tif ( verticesMap[ key ] === undefined ) {\\n\\n\\t\\t\\t\\tverticesMap[ key ] = i;\\n\\t\\t\\t\\tunique.push( this.vertices[ i ] );\\n\\t\\t\\t\\tchanges[ i ] = unique.length - 1;\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\\n\\t\\t\\t\\tchanges[ i ] = changes[ verticesMap[ key ] ];\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\n\\t\\t// if faces are completely degenerate after merging vertices, we\\n\\t\\t// have to remove them from the geometry.\\n\\t\\tvar faceIndicesToRemove = [];\\n\\n\\t\\tfor ( i = 0, il = this.faces.length; i < il; i ++ ) {\\n\\n\\t\\t\\tface = this.faces[ i ];\\n\\n\\t\\t\\tface.a = changes[ face.a ];\\n\\t\\t\\tface.b = changes[ face.b ];\\n\\t\\t\\tface.c = changes[ face.c ];\\n\\n\\t\\t\\tindices = [ face.a, face.b, face.c ];\\n\\n\\t\\t\\t// if any duplicate vertices are found in a Face3\\n\\t\\t\\t// we have to remove the face as nothing can be saved\\n\\t\\t\\tfor ( var n = 0; n < 3; n ++ ) {\\n\\n\\t\\t\\t\\tif ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {\\n\\n\\t\\t\\t\\t\\tfaceIndicesToRemove.push( i );\\n\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tfor ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {\\n\\n\\t\\t\\tvar idx = faceIndicesToRemove[ i ];\\n\\n\\t\\t\\tthis.faces.splice( idx, 1 );\\n\\n\\t\\t\\tfor ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {\\n\\n\\t\\t\\t\\tthis.faceVertexUvs[ j ].splice( idx, 1 );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\t// Use unique set of vertices\\n\\n\\t\\tvar diff = this.vertices.length - unique.length;\\n\\t\\tthis.vertices = unique;\\n\\t\\treturn diff;\\n\\n\\t},\\n\\n\\tsetFromPoints: function ( points ) {\\n\\n\\t\\tthis.vertices = [];\\n\\n\\t\\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\\n\\n\\t\\t\\tvar point = points[ i ];\\n\\t\\t\\tthis.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );\\n\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsortFacesByMaterialIndex: function () {\\n\\n\\t\\tvar faces = this.faces;\\n\\t\\tvar length = faces.length;\\n\\n\\t\\t// tag faces\\n\\n\\t\\tfor ( var i = 0; i < length; i ++ ) {\\n\\n\\t\\t\\tfaces[ i ]._id = i;\\n\\n\\t\\t}\\n\\n\\t\\t// sort faces\\n\\n\\t\\tfunction materialIndexSort( a, b ) {\\n\\n\\t\\t\\treturn a.materialIndex - b.materialIndex;\\n\\n\\t\\t}\\n\\n\\t\\tfaces.sort( materialIndexSort );\\n\\n\\t\\t// sort uvs\\n\\n\\t\\tvar uvs1 = this.faceVertexUvs[ 0 ];\\n\\t\\tvar uvs2 = this.faceVertexUvs[ 1 ];\\n\\n\\t\\tvar newUvs1, newUvs2;\\n\\n\\t\\tif ( uvs1 && uvs1.length === length ) newUvs1 = [];\\n\\t\\tif ( uvs2 && uvs2.length === length ) newUvs2 = [];\\n\\n\\t\\tfor ( var i = 0; i < length; i ++ ) {\\n\\n\\t\\t\\tvar id = faces[ i ]._id;\\n\\n\\t\\t\\tif ( newUvs1 ) newUvs1.push( uvs1[ id ] );\\n\\t\\t\\tif ( newUvs2 ) newUvs2.push( uvs2[ id ] );\\n\\n\\t\\t}\\n\\n\\t\\tif ( newUvs1 ) this.faceVertexUvs[ 0 ] = newUvs1;\\n\\t\\tif ( newUvs2 ) this.faceVertexUvs[ 1 ] = newUvs2;\\n\\n\\t},\\n\\n\\ttoJSON: function () {\\n\\n\\t\\tvar data = {\\n\\t\\t\\tmetadata: {\\n\\t\\t\\t\\tversion: 4.5,\\n\\t\\t\\t\\ttype: 'Geometry',\\n\\t\\t\\t\\tgenerator: 'Geometry.toJSON'\\n\\t\\t\\t}\\n\\t\\t};\\n\\n\\t\\t// standard Geometry serialization\\n\\n\\t\\tdata.uuid = this.uuid;\\n\\t\\tdata.type = this.type;\\n\\t\\tif ( this.name !== '' ) data.name = this.name;\\n\\n\\t\\tif ( this.parameters !== undefined ) {\\n\\n\\t\\t\\tvar parameters = this.parameters;\\n\\n\\t\\t\\tfor ( var key in parameters ) {\\n\\n\\t\\t\\t\\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn data;\\n\\n\\t\\t}\\n\\n\\t\\tvar vertices = [];\\n\\n\\t\\tfor ( var i = 0; i < this.vertices.length; i ++ ) {\\n\\n\\t\\t\\tvar vertex = this.vertices[ i ];\\n\\t\\t\\tvertices.push( vertex.x, vertex.y, vertex.z );\\n\\n\\t\\t}\\n\\n\\t\\tvar faces = [];\\n\\t\\tvar normals = [];\\n\\t\\tvar normalsHash = {};\\n\\t\\tvar colors = [];\\n\\t\\tvar colorsHash = {};\\n\\t\\tvar uvs = [];\\n\\t\\tvar uvsHash = {};\\n\\n\\t\\tfor ( var i = 0; i < this.faces.length; i ++ ) {\\n\\n\\t\\t\\tvar face = this.faces[ i ];\\n\\n\\t\\t\\tvar hasMaterial = true;\\n\\t\\t\\tvar hasFaceUv = false; // deprecated\\n\\t\\t\\tvar hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;\\n\\t\\t\\tvar hasFaceNormal = face.normal.length() > 0;\\n\\t\\t\\tvar hasFaceVertexNormal = face.vertexNormals.length > 0;\\n\\t\\t\\tvar hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\\n\\t\\t\\tvar hasFaceVertexColor = face.vertexColors.length > 0;\\n\\n\\t\\t\\tvar faceType = 0;\\n\\n\\t\\t\\tfaceType = setBit( faceType, 0, 0 ); // isQuad\\n\\t\\t\\tfaceType = setBit( faceType, 1, hasMaterial );\\n\\t\\t\\tfaceType = setBit( faceType, 2, hasFaceUv );\\n\\t\\t\\tfaceType = setBit( faceType, 3, hasFaceVertexUv );\\n\\t\\t\\tfaceType = setBit( faceType, 4, hasFaceNormal );\\n\\t\\t\\tfaceType = setBit( faceType, 5, hasFaceVertexNormal );\\n\\t\\t\\tfaceType = setBit( faceType, 6, hasFaceColor );\\n\\t\\t\\tfaceType = setBit( faceType, 7, hasFaceVertexColor );\\n\\n\\t\\t\\tfaces.push( faceType );\\n\\t\\t\\tfaces.push( face.a, face.b, face.c );\\n\\t\\t\\tfaces.push( face.materialIndex );\\n\\n\\t\\t\\tif ( hasFaceVertexUv ) {\\n\\n\\t\\t\\t\\tvar faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];\\n\\n\\t\\t\\t\\tfaces.push(\\n\\t\\t\\t\\t\\tgetUvIndex( faceVertexUvs[ 0 ] ),\\n\\t\\t\\t\\t\\tgetUvIndex( faceVertexUvs[ 1 ] ),\\n\\t\\t\\t\\t\\tgetUvIndex( faceVertexUvs[ 2 ] )\\n\\t\\t\\t\\t);\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( hasFaceNormal ) {\\n\\n\\t\\t\\t\\tfaces.push( getNormalIndex( face.normal ) );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( hasFaceVertexNormal ) {\\n\\n\\t\\t\\t\\tvar vertexNormals = face.vertexNormals;\\n\\n\\t\\t\\t\\tfaces.push(\\n\\t\\t\\t\\t\\tgetNormalIndex( vertexNormals[ 0 ] ),\\n\\t\\t\\t\\t\\tgetNormalIndex( vertexNormals[ 1 ] ),\\n\\t\\t\\t\\t\\tgetNormalIndex( vertexNormals[ 2 ] )\\n\\t\\t\\t\\t);\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( hasFaceColor ) {\\n\\n\\t\\t\\t\\tfaces.push( getColorIndex( face.color ) );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( hasFaceVertexColor ) {\\n\\n\\t\\t\\t\\tvar vertexColors = face.vertexColors;\\n\\n\\t\\t\\t\\tfaces.push(\\n\\t\\t\\t\\t\\tgetColorIndex( vertexColors[ 0 ] ),\\n\\t\\t\\t\\t\\tgetColorIndex( vertexColors[ 1 ] ),\\n\\t\\t\\t\\t\\tgetColorIndex( vertexColors[ 2 ] )\\n\\t\\t\\t\\t);\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tfunction setBit( value, position, enabled ) {\\n\\n\\t\\t\\treturn enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );\\n\\n\\t\\t}\\n\\n\\t\\tfunction getNormalIndex( normal ) {\\n\\n\\t\\t\\tvar hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\\n\\n\\t\\t\\tif ( normalsHash[ hash ] !== undefined ) {\\n\\n\\t\\t\\t\\treturn normalsHash[ hash ];\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tnormalsHash[ hash ] = normals.length / 3;\\n\\t\\t\\tnormals.push( normal.x, normal.y, normal.z );\\n\\n\\t\\t\\treturn normalsHash[ hash ];\\n\\n\\t\\t}\\n\\n\\t\\tfunction getColorIndex( color ) {\\n\\n\\t\\t\\tvar hash = color.r.toString() + color.g.toString() + color.b.toString();\\n\\n\\t\\t\\tif ( colorsHash[ hash ] !== undefined ) {\\n\\n\\t\\t\\t\\treturn colorsHash[ hash ];\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tcolorsHash[ hash ] = colors.length;\\n\\t\\t\\tcolors.push( color.getHex() );\\n\\n\\t\\t\\treturn colorsHash[ hash ];\\n\\n\\t\\t}\\n\\n\\t\\tfunction getUvIndex( uv ) {\\n\\n\\t\\t\\tvar hash = uv.x.toString() + uv.y.toString();\\n\\n\\t\\t\\tif ( uvsHash[ hash ] !== undefined ) {\\n\\n\\t\\t\\t\\treturn uvsHash[ hash ];\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tuvsHash[ hash ] = uvs.length / 2;\\n\\t\\t\\tuvs.push( uv.x, uv.y );\\n\\n\\t\\t\\treturn uvsHash[ hash ];\\n\\n\\t\\t}\\n\\n\\t\\tdata.data = {};\\n\\n\\t\\tdata.data.vertices = vertices;\\n\\t\\tdata.data.normals = normals;\\n\\t\\tif ( colors.length > 0 ) data.data.colors = colors;\\n\\t\\tif ( uvs.length > 0 ) data.data.uvs = [ uvs ]; // temporal backward compatibility\\n\\t\\tdata.data.faces = faces;\\n\\n\\t\\treturn data;\\n\\n\\t},\\n\\n\\tclone: function () {\\n\\n\\t\\t/*\\n\\t\\t // Handle primitives\\n\\n\\t\\t var parameters = this.parameters;\\n\\n\\t\\t if ( parameters !== undefined ) {\\n\\n\\t\\t var values = [];\\n\\n\\t\\t for ( var key in parameters ) {\\n\\n\\t\\t values.push( parameters[ key ] );\\n\\n\\t\\t }\\n\\n\\t\\t var geometry = Object.create( this.constructor.prototype );\\n\\t\\t this.constructor.apply( geometry, values );\\n\\t\\t return geometry;\\n\\n\\t\\t }\\n\\n\\t\\t return new this.constructor().copy( this );\\n\\t\\t */\\n\\n\\t\\treturn new Geometry().copy( this );\\n\\n\\t},\\n\\n\\tcopy: function ( source ) {\\n\\n\\t\\tvar i, il, j, jl, k, kl;\\n\\n\\t\\t// reset\\n\\n\\t\\tthis.vertices = [];\\n\\t\\tthis.colors = [];\\n\\t\\tthis.faces = [];\\n\\t\\tthis.faceVertexUvs = [[]];\\n\\t\\tthis.morphTargets = [];\\n\\t\\tthis.morphNormals = [];\\n\\t\\tthis.skinWeights = [];\\n\\t\\tthis.skinIndices = [];\\n\\t\\tthis.lineDistances = [];\\n\\t\\tthis.boundingBox = null;\\n\\t\\tthis.boundingSphere = null;\\n\\n\\t\\t// name\\n\\n\\t\\tthis.name = source.name;\\n\\n\\t\\t// vertices\\n\\n\\t\\tvar vertices = source.vertices;\\n\\n\\t\\tfor ( i = 0, il = vertices.length; i < il; i ++ ) {\\n\\n\\t\\t\\tthis.vertices.push( vertices[ i ].clone() );\\n\\n\\t\\t}\\n\\n\\t\\t// colors\\n\\n\\t\\tvar colors = source.colors;\\n\\n\\t\\tfor ( i = 0, il = colors.length; i < il; i ++ ) {\\n\\n\\t\\t\\tthis.colors.push( colors[ i ].clone() );\\n\\n\\t\\t}\\n\\n\\t\\t// faces\\n\\n\\t\\tvar faces = source.faces;\\n\\n\\t\\tfor ( i = 0, il = faces.length; i < il; i ++ ) {\\n\\n\\t\\t\\tthis.faces.push( faces[ i ].clone() );\\n\\n\\t\\t}\\n\\n\\t\\t// face vertex uvs\\n\\n\\t\\tfor ( i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {\\n\\n\\t\\t\\tvar faceVertexUvs = source.faceVertexUvs[ i ];\\n\\n\\t\\t\\tif ( this.faceVertexUvs[ i ] === undefined ) {\\n\\n\\t\\t\\t\\tthis.faceVertexUvs[ i ] = [];\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tfor ( j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {\\n\\n\\t\\t\\t\\tvar uvs = faceVertexUvs[ j ], uvsCopy = [];\\n\\n\\t\\t\\t\\tfor ( k = 0, kl = uvs.length; k < kl; k ++ ) {\\n\\n\\t\\t\\t\\t\\tvar uv = uvs[ k ];\\n\\n\\t\\t\\t\\t\\tuvsCopy.push( uv.clone() );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tthis.faceVertexUvs[ i ].push( uvsCopy );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\t// morph targets\\n\\n\\t\\tvar morphTargets = source.morphTargets;\\n\\n\\t\\tfor ( i = 0, il = morphTargets.length; i < il; i ++ ) {\\n\\n\\t\\t\\tvar morphTarget = {};\\n\\t\\t\\tmorphTarget.name = morphTargets[ i ].name;\\n\\n\\t\\t\\t// vertices\\n\\n\\t\\t\\tif ( morphTargets[ i ].vertices !== undefined ) {\\n\\n\\t\\t\\t\\tmorphTarget.vertices = [];\\n\\n\\t\\t\\t\\tfor ( j = 0, jl = morphTargets[ i ].vertices.length; j < jl; j ++ ) {\\n\\n\\t\\t\\t\\t\\tmorphTarget.vertices.push( morphTargets[ i ].vertices[ j ].clone() );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\t// normals\\n\\n\\t\\t\\tif ( morphTargets[ i ].normals !== undefined ) {\\n\\n\\t\\t\\t\\tmorphTarget.normals = [];\\n\\n\\t\\t\\t\\tfor ( j = 0, jl = morphTargets[ i ].normals.length; j < jl; j ++ ) {\\n\\n\\t\\t\\t\\t\\tmorphTarget.normals.push( morphTargets[ i ].normals[ j ].clone() );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tthis.morphTargets.push( morphTarget );\\n\\n\\t\\t}\\n\\n\\t\\t// morph normals\\n\\n\\t\\tvar morphNormals = source.morphNormals;\\n\\n\\t\\tfor ( i = 0, il = morphNormals.length; i < il; i ++ ) {\\n\\n\\t\\t\\tvar morphNormal = {};\\n\\n\\t\\t\\t// vertex normals\\n\\n\\t\\t\\tif ( morphNormals[ i ].vertexNormals !== undefined ) {\\n\\n\\t\\t\\t\\tmorphNormal.vertexNormals = [];\\n\\n\\t\\t\\t\\tfor ( j = 0, jl = morphNormals[ i ].vertexNormals.length; j < jl; j ++ ) {\\n\\n\\t\\t\\t\\t\\tvar srcVertexNormal = morphNormals[ i ].vertexNormals[ j ];\\n\\t\\t\\t\\t\\tvar destVertexNormal = {};\\n\\n\\t\\t\\t\\t\\tdestVertexNormal.a = srcVertexNormal.a.clone();\\n\\t\\t\\t\\t\\tdestVertexNormal.b = srcVertexNormal.b.clone();\\n\\t\\t\\t\\t\\tdestVertexNormal.c = srcVertexNormal.c.clone();\\n\\n\\t\\t\\t\\t\\tmorphNormal.vertexNormals.push( destVertexNormal );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\t// face normals\\n\\n\\t\\t\\tif ( morphNormals[ i ].faceNormals !== undefined ) {\\n\\n\\t\\t\\t\\tmorphNormal.faceNormals = [];\\n\\n\\t\\t\\t\\tfor ( j = 0, jl = morphNormals[ i ].faceNormals.length; j < jl; j ++ ) {\\n\\n\\t\\t\\t\\t\\tmorphNormal.faceNormals.push( morphNormals[ i ].faceNormals[ j ].clone() );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tthis.morphNormals.push( morphNormal );\\n\\n\\t\\t}\\n\\n\\t\\t// skin weights\\n\\n\\t\\tvar skinWeights = source.skinWeights;\\n\\n\\t\\tfor ( i = 0, il = skinWeights.length; i < il; i ++ ) {\\n\\n\\t\\t\\tthis.skinWeights.push( skinWeights[ i ].clone() );\\n\\n\\t\\t}\\n\\n\\t\\t// skin indices\\n\\n\\t\\tvar skinIndices = source.skinIndices;\\n\\n\\t\\tfor ( i = 0, il = skinIndices.length; i < il; i ++ ) {\\n\\n\\t\\t\\tthis.skinIndices.push( skinIndices[ i ].clone() );\\n\\n\\t\\t}\\n\\n\\t\\t// line distances\\n\\n\\t\\tvar lineDistances = source.lineDistances;\\n\\n\\t\\tfor ( i = 0, il = lineDistances.length; i < il; i ++ ) {\\n\\n\\t\\t\\tthis.lineDistances.push( lineDistances[ i ] );\\n\\n\\t\\t}\\n\\n\\t\\t// bounding box\\n\\n\\t\\tvar boundingBox = source.boundingBox;\\n\\n\\t\\tif ( boundingBox !== null ) {\\n\\n\\t\\t\\tthis.boundingBox = boundingBox.clone();\\n\\n\\t\\t}\\n\\n\\t\\t// bounding sphere\\n\\n\\t\\tvar boundingSphere = source.boundingSphere;\\n\\n\\t\\tif ( boundingSphere !== null ) {\\n\\n\\t\\t\\tthis.boundingSphere = boundingSphere.clone();\\n\\n\\t\\t}\\n\\n\\t\\t// update flags\\n\\n\\t\\tthis.elementsNeedUpdate = source.elementsNeedUpdate;\\n\\t\\tthis.verticesNeedUpdate = source.verticesNeedUpdate;\\n\\t\\tthis.uvsNeedUpdate = source.uvsNeedUpdate;\\n\\t\\tthis.normalsNeedUpdate = source.normalsNeedUpdate;\\n\\t\\tthis.colorsNeedUpdate = source.colorsNeedUpdate;\\n\\t\\tthis.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;\\n\\t\\tthis.groupsNeedUpdate = source.groupsNeedUpdate;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tdispose: function () {\\n\\n\\t\\tthis.dispatchEvent( { type: 'dispose' } );\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\nfunction BufferAttribute( array, itemSize, normalized ) {\\n\\n\\tif ( Array.isArray( array ) ) {\\n\\n\\t\\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\\n\\n\\t}\\n\\n\\tthis.name = '';\\n\\n\\tthis.array = array;\\n\\tthis.itemSize = itemSize;\\n\\tthis.count = array !== undefined ? array.length / itemSize : 0;\\n\\tthis.normalized = normalized === true;\\n\\n\\tthis.dynamic = false;\\n\\tthis.updateRange = { offset: 0, count: - 1 };\\n\\n\\tthis.version = 0;\\n\\n}\\n\\nObject.defineProperty( BufferAttribute.prototype, 'needsUpdate', {\\n\\n\\tset: function ( value ) {\\n\\n\\t\\tif ( value === true ) this.version ++;\\n\\n\\t}\\n\\n} );\\n\\nObject.assign( BufferAttribute.prototype, {\\n\\n\\tisBufferAttribute: true,\\n\\n\\tonUploadCallback: function () {},\\n\\n\\tsetArray: function ( array ) {\\n\\n\\t\\tif ( Array.isArray( array ) ) {\\n\\n\\t\\t\\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\\n\\n\\t\\t}\\n\\n\\t\\tthis.count = array !== undefined ? array.length / this.itemSize : 0;\\n\\t\\tthis.array = array;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetDynamic: function ( value ) {\\n\\n\\t\\tthis.dynamic = value;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tcopy: function ( source ) {\\n\\n\\t\\tthis.name = source.name;\\n\\t\\tthis.array = new source.array.constructor( source.array );\\n\\t\\tthis.itemSize = source.itemSize;\\n\\t\\tthis.count = source.count;\\n\\t\\tthis.normalized = source.normalized;\\n\\n\\t\\tthis.dynamic = source.dynamic;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tcopyAt: function ( index1, attribute, index2 ) {\\n\\n\\t\\tindex1 *= this.itemSize;\\n\\t\\tindex2 *= attribute.itemSize;\\n\\n\\t\\tfor ( var i = 0, l = this.itemSize; i < l; i ++ ) {\\n\\n\\t\\t\\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\\n\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tcopyArray: function ( array ) {\\n\\n\\t\\tthis.array.set( array );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tcopyColorsArray: function ( colors ) {\\n\\n\\t\\tvar array = this.array, offset = 0;\\n\\n\\t\\tfor ( var i = 0, l = colors.length; i < l; i ++ ) {\\n\\n\\t\\t\\tvar color = colors[ i ];\\n\\n\\t\\t\\tif ( color === undefined ) {\\n\\n\\t\\t\\t\\tconsole.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );\\n\\t\\t\\t\\tcolor = new Color();\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tarray[ offset ++ ] = color.r;\\n\\t\\t\\tarray[ offset ++ ] = color.g;\\n\\t\\t\\tarray[ offset ++ ] = color.b;\\n\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tcopyVector2sArray: function ( vectors ) {\\n\\n\\t\\tvar array = this.array, offset = 0;\\n\\n\\t\\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\\n\\n\\t\\t\\tvar vector = vectors[ i ];\\n\\n\\t\\t\\tif ( vector === undefined ) {\\n\\n\\t\\t\\t\\tconsole.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );\\n\\t\\t\\t\\tvector = new Vector2();\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tarray[ offset ++ ] = vector.x;\\n\\t\\t\\tarray[ offset ++ ] = vector.y;\\n\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tcopyVector3sArray: function ( vectors ) {\\n\\n\\t\\tvar array = this.array, offset = 0;\\n\\n\\t\\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\\n\\n\\t\\t\\tvar vector = vectors[ i ];\\n\\n\\t\\t\\tif ( vector === undefined ) {\\n\\n\\t\\t\\t\\tconsole.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );\\n\\t\\t\\t\\tvector = new Vector3();\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tarray[ offset ++ ] = vector.x;\\n\\t\\t\\tarray[ offset ++ ] = vector.y;\\n\\t\\t\\tarray[ offset ++ ] = vector.z;\\n\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tcopyVector4sArray: function ( vectors ) {\\n\\n\\t\\tvar array = this.array, offset = 0;\\n\\n\\t\\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\\n\\n\\t\\t\\tvar vector = vectors[ i ];\\n\\n\\t\\t\\tif ( vector === undefined ) {\\n\\n\\t\\t\\t\\tconsole.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );\\n\\t\\t\\t\\tvector = new Vector4();\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tarray[ offset ++ ] = vector.x;\\n\\t\\t\\tarray[ offset ++ ] = vector.y;\\n\\t\\t\\tarray[ offset ++ ] = vector.z;\\n\\t\\t\\tarray[ offset ++ ] = vector.w;\\n\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tset: function ( value, offset ) {\\n\\n\\t\\tif ( offset === undefined ) offset = 0;\\n\\n\\t\\tthis.array.set( value, offset );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tgetX: function ( index ) {\\n\\n\\t\\treturn this.array[ index * this.itemSize ];\\n\\n\\t},\\n\\n\\tsetX: function ( index, x ) {\\n\\n\\t\\tthis.array[ index * this.itemSize ] = x;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tgetY: function ( index ) {\\n\\n\\t\\treturn this.array[ index * this.itemSize + 1 ];\\n\\n\\t},\\n\\n\\tsetY: function ( index, y ) {\\n\\n\\t\\tthis.array[ index * this.itemSize + 1 ] = y;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tgetZ: function ( index ) {\\n\\n\\t\\treturn this.array[ index * this.itemSize + 2 ];\\n\\n\\t},\\n\\n\\tsetZ: function ( index, z ) {\\n\\n\\t\\tthis.array[ index * this.itemSize + 2 ] = z;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tgetW: function ( index ) {\\n\\n\\t\\treturn this.array[ index * this.itemSize + 3 ];\\n\\n\\t},\\n\\n\\tsetW: function ( index, w ) {\\n\\n\\t\\tthis.array[ index * this.itemSize + 3 ] = w;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetXY: function ( index, x, y ) {\\n\\n\\t\\tindex *= this.itemSize;\\n\\n\\t\\tthis.array[ index + 0 ] = x;\\n\\t\\tthis.array[ index + 1 ] = y;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetXYZ: function ( index, x, y, z ) {\\n\\n\\t\\tindex *= this.itemSize;\\n\\n\\t\\tthis.array[ index + 0 ] = x;\\n\\t\\tthis.array[ index + 1 ] = y;\\n\\t\\tthis.array[ index + 2 ] = z;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetXYZW: function ( index, x, y, z, w ) {\\n\\n\\t\\tindex *= this.itemSize;\\n\\n\\t\\tthis.array[ index + 0 ] = x;\\n\\t\\tthis.array[ index + 1 ] = y;\\n\\t\\tthis.array[ index + 2 ] = z;\\n\\t\\tthis.array[ index + 3 ] = w;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tonUpload: function ( callback ) {\\n\\n\\t\\tthis.onUploadCallback = callback;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tclone: function () {\\n\\n\\t\\treturn new this.constructor( this.array, this.itemSize ).copy( this );\\n\\n\\t}\\n\\n} );\\n\\n//\\n\\nfunction Int8BufferAttribute( array, itemSize, normalized ) {\\n\\n\\tBufferAttribute.call( this, new Int8Array( array ), itemSize, normalized );\\n\\n}\\n\\nInt8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\\nInt8BufferAttribute.prototype.constructor = Int8BufferAttribute;\\n\\n\\nfunction Uint8BufferAttribute( array, itemSize, normalized ) {\\n\\n\\tBufferAttribute.call( this, new Uint8Array( array ), itemSize, normalized );\\n\\n}\\n\\nUint8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\\nUint8BufferAttribute.prototype.constructor = Uint8BufferAttribute;\\n\\n\\nfunction Uint8ClampedBufferAttribute( array, itemSize, normalized ) {\\n\\n\\tBufferAttribute.call( this, new Uint8ClampedArray( array ), itemSize, normalized );\\n\\n}\\n\\nUint8ClampedBufferAttribute.prototype = Object.create( BufferAttribute.prototype );\\nUint8ClampedBufferAttribute.prototype.constructor = Uint8ClampedBufferAttribute;\\n\\n\\nfunction Int16BufferAttribute( array, itemSize, normalized ) {\\n\\n\\tBufferAttribute.call( this, new Int16Array( array ), itemSize, normalized );\\n\\n}\\n\\nInt16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\\nInt16BufferAttribute.prototype.constructor = Int16BufferAttribute;\\n\\n\\nfunction Uint16BufferAttribute( array, itemSize, normalized ) {\\n\\n\\tBufferAttribute.call( this, new Uint16Array( array ), itemSize, normalized );\\n\\n}\\n\\nUint16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\\nUint16BufferAttribute.prototype.constructor = Uint16BufferAttribute;\\n\\n\\nfunction Int32BufferAttribute( array, itemSize, normalized ) {\\n\\n\\tBufferAttribute.call( this, new Int32Array( array ), itemSize, normalized );\\n\\n}\\n\\nInt32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\\nInt32BufferAttribute.prototype.constructor = Int32BufferAttribute;\\n\\n\\nfunction Uint32BufferAttribute( array, itemSize, normalized ) {\\n\\n\\tBufferAttribute.call( this, new Uint32Array( array ), itemSize, normalized );\\n\\n}\\n\\nUint32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\\nUint32BufferAttribute.prototype.constructor = Uint32BufferAttribute;\\n\\n\\nfunction Float32BufferAttribute( array, itemSize, normalized ) {\\n\\n\\tBufferAttribute.call( this, new Float32Array( array ), itemSize, normalized );\\n\\n}\\n\\nFloat32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\\nFloat32BufferAttribute.prototype.constructor = Float32BufferAttribute;\\n\\n\\nfunction Float64BufferAttribute( array, itemSize, normalized ) {\\n\\n\\tBufferAttribute.call( this, new Float64Array( array ), itemSize, normalized );\\n\\n}\\n\\nFloat64BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\\nFloat64BufferAttribute.prototype.constructor = Float64BufferAttribute;\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\nfunction DirectGeometry() {\\n\\n\\tthis.vertices = [];\\n\\tthis.normals = [];\\n\\tthis.colors = [];\\n\\tthis.uvs = [];\\n\\tthis.uvs2 = [];\\n\\n\\tthis.groups = [];\\n\\n\\tthis.morphTargets = {};\\n\\n\\tthis.skinWeights = [];\\n\\tthis.skinIndices = [];\\n\\n\\t// this.lineDistances = [];\\n\\n\\tthis.boundingBox = null;\\n\\tthis.boundingSphere = null;\\n\\n\\t// update flags\\n\\n\\tthis.verticesNeedUpdate = false;\\n\\tthis.normalsNeedUpdate = false;\\n\\tthis.colorsNeedUpdate = false;\\n\\tthis.uvsNeedUpdate = false;\\n\\tthis.groupsNeedUpdate = false;\\n\\n}\\n\\nObject.assign( DirectGeometry.prototype, {\\n\\n\\tcomputeGroups: function ( geometry ) {\\n\\n\\t\\tvar group;\\n\\t\\tvar groups = [];\\n\\t\\tvar materialIndex = undefined;\\n\\n\\t\\tvar faces = geometry.faces;\\n\\n\\t\\tfor ( var i = 0; i < faces.length; i ++ ) {\\n\\n\\t\\t\\tvar face = faces[ i ];\\n\\n\\t\\t\\t// materials\\n\\n\\t\\t\\tif ( face.materialIndex !== materialIndex ) {\\n\\n\\t\\t\\t\\tmaterialIndex = face.materialIndex;\\n\\n\\t\\t\\t\\tif ( group !== undefined ) {\\n\\n\\t\\t\\t\\t\\tgroup.count = ( i * 3 ) - group.start;\\n\\t\\t\\t\\t\\tgroups.push( group );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tgroup = {\\n\\t\\t\\t\\t\\tstart: i * 3,\\n\\t\\t\\t\\t\\tmaterialIndex: materialIndex\\n\\t\\t\\t\\t};\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tif ( group !== undefined ) {\\n\\n\\t\\t\\tgroup.count = ( i * 3 ) - group.start;\\n\\t\\t\\tgroups.push( group );\\n\\n\\t\\t}\\n\\n\\t\\tthis.groups = groups;\\n\\n\\t},\\n\\n\\tfromGeometry: function ( geometry ) {\\n\\n\\t\\tvar faces = geometry.faces;\\n\\t\\tvar vertices = geometry.vertices;\\n\\t\\tvar faceVertexUvs = geometry.faceVertexUvs;\\n\\n\\t\\tvar hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;\\n\\t\\tvar hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;\\n\\n\\t\\t// morphs\\n\\n\\t\\tvar morphTargets = geometry.morphTargets;\\n\\t\\tvar morphTargetsLength = morphTargets.length;\\n\\n\\t\\tvar morphTargetsPosition;\\n\\n\\t\\tif ( morphTargetsLength > 0 ) {\\n\\n\\t\\t\\tmorphTargetsPosition = [];\\n\\n\\t\\t\\tfor ( var i = 0; i < morphTargetsLength; i ++ ) {\\n\\n\\t\\t\\t\\tmorphTargetsPosition[ i ] = {\\n\\t\\t\\t\\t\\tname: morphTargets[ i ].name,\\n\\t\\t\\t\\t \\tdata: []\\n\\t\\t\\t\\t};\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tthis.morphTargets.position = morphTargetsPosition;\\n\\n\\t\\t}\\n\\n\\t\\tvar morphNormals = geometry.morphNormals;\\n\\t\\tvar morphNormalsLength = morphNormals.length;\\n\\n\\t\\tvar morphTargetsNormal;\\n\\n\\t\\tif ( morphNormalsLength > 0 ) {\\n\\n\\t\\t\\tmorphTargetsNormal = [];\\n\\n\\t\\t\\tfor ( var i = 0; i < morphNormalsLength; i ++ ) {\\n\\n\\t\\t\\t\\tmorphTargetsNormal[ i ] = {\\n\\t\\t\\t\\t\\tname: morphNormals[ i ].name,\\n\\t\\t\\t\\t \\tdata: []\\n\\t\\t\\t\\t};\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tthis.morphTargets.normal = morphTargetsNormal;\\n\\n\\t\\t}\\n\\n\\t\\t// skins\\n\\n\\t\\tvar skinIndices = geometry.skinIndices;\\n\\t\\tvar skinWeights = geometry.skinWeights;\\n\\n\\t\\tvar hasSkinIndices = skinIndices.length === vertices.length;\\n\\t\\tvar hasSkinWeights = skinWeights.length === vertices.length;\\n\\n\\t\\t//\\n\\n\\t\\tif ( vertices.length > 0 && faces.length === 0 ) {\\n\\n\\t\\t\\tconsole.error( 'THREE.DirectGeometry: Faceless geometries are not supported.' );\\n\\n\\t\\t}\\n\\n\\t\\tfor ( var i = 0; i < faces.length; i ++ ) {\\n\\n\\t\\t\\tvar face = faces[ i ];\\n\\n\\t\\t\\tthis.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );\\n\\n\\t\\t\\tvar vertexNormals = face.vertexNormals;\\n\\n\\t\\t\\tif ( vertexNormals.length === 3 ) {\\n\\n\\t\\t\\t\\tthis.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tvar normal = face.normal;\\n\\n\\t\\t\\t\\tthis.normals.push( normal, normal, normal );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tvar vertexColors = face.vertexColors;\\n\\n\\t\\t\\tif ( vertexColors.length === 3 ) {\\n\\n\\t\\t\\t\\tthis.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tvar color = face.color;\\n\\n\\t\\t\\t\\tthis.colors.push( color, color, color );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( hasFaceVertexUv === true ) {\\n\\n\\t\\t\\t\\tvar vertexUvs = faceVertexUvs[ 0 ][ i ];\\n\\n\\t\\t\\t\\tif ( vertexUvs !== undefined ) {\\n\\n\\t\\t\\t\\t\\tthis.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\\n\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );\\n\\n\\t\\t\\t\\t\\tthis.uvs.push( new Vector2(), new Vector2(), new Vector2() );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( hasFaceVertexUv2 === true ) {\\n\\n\\t\\t\\t\\tvar vertexUvs = faceVertexUvs[ 1 ][ i ];\\n\\n\\t\\t\\t\\tif ( vertexUvs !== undefined ) {\\n\\n\\t\\t\\t\\t\\tthis.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\\n\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );\\n\\n\\t\\t\\t\\t\\tthis.uvs2.push( new Vector2(), new Vector2(), new Vector2() );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\t// morphs\\n\\n\\t\\t\\tfor ( var j = 0; j < morphTargetsLength; j ++ ) {\\n\\n\\t\\t\\t\\tvar morphTarget = morphTargets[ j ].vertices;\\n\\n\\t\\t\\t\\tmorphTargetsPosition[ j ].data.push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tfor ( var j = 0; j < morphNormalsLength; j ++ ) {\\n\\n\\t\\t\\t\\tvar morphNormal = morphNormals[ j ].vertexNormals[ i ];\\n\\n\\t\\t\\t\\tmorphTargetsNormal[ j ].data.push( morphNormal.a, morphNormal.b, morphNormal.c );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\t// skins\\n\\n\\t\\t\\tif ( hasSkinIndices ) {\\n\\n\\t\\t\\t\\tthis.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( hasSkinWeights ) {\\n\\n\\t\\t\\t\\tthis.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tthis.computeGroups( geometry );\\n\\n\\t\\tthis.verticesNeedUpdate = geometry.verticesNeedUpdate;\\n\\t\\tthis.normalsNeedUpdate = geometry.normalsNeedUpdate;\\n\\t\\tthis.colorsNeedUpdate = geometry.colorsNeedUpdate;\\n\\t\\tthis.uvsNeedUpdate = geometry.uvsNeedUpdate;\\n\\t\\tthis.groupsNeedUpdate = geometry.groupsNeedUpdate;\\n\\n\\t\\treturn this;\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\nfunction arrayMax( array ) {\\n\\n\\tif ( array.length === 0 ) return - Infinity;\\n\\n\\tvar max = array[ 0 ];\\n\\n\\tfor ( var i = 1, l = array.length; i < l; ++ i ) {\\n\\n\\t\\tif ( array[ i ] > max ) max = array[ i ];\\n\\n\\t}\\n\\n\\treturn max;\\n\\n}\\n\\n/**\\n * @author alteredq / http://alteredqualia.com/\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\nvar bufferGeometryId = 1; // BufferGeometry uses odd numbers as Id\\n\\nfunction BufferGeometry() {\\n\\n\\tObject.defineProperty( this, 'id', { value: bufferGeometryId += 2 } );\\n\\n\\tthis.uuid = _Math.generateUUID();\\n\\n\\tthis.name = '';\\n\\tthis.type = 'BufferGeometry';\\n\\n\\tthis.index = null;\\n\\tthis.attributes = {};\\n\\n\\tthis.morphAttributes = {};\\n\\n\\tthis.groups = [];\\n\\n\\tthis.boundingBox = null;\\n\\tthis.boundingSphere = null;\\n\\n\\tthis.drawRange = { start: 0, count: Infinity };\\n\\n\\tthis.userData = {};\\n\\n}\\n\\nBufferGeometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\\n\\n\\tconstructor: BufferGeometry,\\n\\n\\tisBufferGeometry: true,\\n\\n\\tgetIndex: function () {\\n\\n\\t\\treturn this.index;\\n\\n\\t},\\n\\n\\tsetIndex: function ( index ) {\\n\\n\\t\\tif ( Array.isArray( index ) ) {\\n\\n\\t\\t\\tthis.index = new ( arrayMax( index ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );\\n\\n\\t\\t} else {\\n\\n\\t\\t\\tthis.index = index;\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\taddAttribute: function ( name, attribute ) {\\n\\n\\t\\tif ( ! ( attribute && attribute.isBufferAttribute ) && ! ( attribute && attribute.isInterleavedBufferAttribute ) ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );\\n\\n\\t\\t\\treturn this.addAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );\\n\\n\\t\\t}\\n\\n\\t\\tif ( name === 'index' ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );\\n\\t\\t\\tthis.setIndex( attribute );\\n\\n\\t\\t\\treturn this;\\n\\n\\t\\t}\\n\\n\\t\\tthis.attributes[ name ] = attribute;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tgetAttribute: function ( name ) {\\n\\n\\t\\treturn this.attributes[ name ];\\n\\n\\t},\\n\\n\\tremoveAttribute: function ( name ) {\\n\\n\\t\\tdelete this.attributes[ name ];\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\taddGroup: function ( start, count, materialIndex ) {\\n\\n\\t\\tthis.groups.push( {\\n\\n\\t\\t\\tstart: start,\\n\\t\\t\\tcount: count,\\n\\t\\t\\tmaterialIndex: materialIndex !== undefined ? materialIndex : 0\\n\\n\\t\\t} );\\n\\n\\t},\\n\\n\\tclearGroups: function () {\\n\\n\\t\\tthis.groups = [];\\n\\n\\t},\\n\\n\\tsetDrawRange: function ( start, count ) {\\n\\n\\t\\tthis.drawRange.start = start;\\n\\t\\tthis.drawRange.count = count;\\n\\n\\t},\\n\\n\\tapplyMatrix: function ( matrix ) {\\n\\n\\t\\tvar position = this.attributes.position;\\n\\n\\t\\tif ( position !== undefined ) {\\n\\n\\t\\t\\tmatrix.applyToBufferAttribute( position );\\n\\t\\t\\tposition.needsUpdate = true;\\n\\n\\t\\t}\\n\\n\\t\\tvar normal = this.attributes.normal;\\n\\n\\t\\tif ( normal !== undefined ) {\\n\\n\\t\\t\\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\\n\\n\\t\\t\\tnormalMatrix.applyToBufferAttribute( normal );\\n\\t\\t\\tnormal.needsUpdate = true;\\n\\n\\t\\t}\\n\\n\\t\\tif ( this.boundingBox !== null ) {\\n\\n\\t\\t\\tthis.computeBoundingBox();\\n\\n\\t\\t}\\n\\n\\t\\tif ( this.boundingSphere !== null ) {\\n\\n\\t\\t\\tthis.computeBoundingSphere();\\n\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\trotateX: function () {\\n\\n\\t\\t// rotate geometry around world x-axis\\n\\n\\t\\tvar m1 = new Matrix4();\\n\\n\\t\\treturn function rotateX( angle ) {\\n\\n\\t\\t\\tm1.makeRotationX( angle );\\n\\n\\t\\t\\tthis.applyMatrix( m1 );\\n\\n\\t\\t\\treturn this;\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\trotateY: function () {\\n\\n\\t\\t// rotate geometry around world y-axis\\n\\n\\t\\tvar m1 = new Matrix4();\\n\\n\\t\\treturn function rotateY( angle ) {\\n\\n\\t\\t\\tm1.makeRotationY( angle );\\n\\n\\t\\t\\tthis.applyMatrix( m1 );\\n\\n\\t\\t\\treturn this;\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\trotateZ: function () {\\n\\n\\t\\t// rotate geometry around world z-axis\\n\\n\\t\\tvar m1 = new Matrix4();\\n\\n\\t\\treturn function rotateZ( angle ) {\\n\\n\\t\\t\\tm1.makeRotationZ( angle );\\n\\n\\t\\t\\tthis.applyMatrix( m1 );\\n\\n\\t\\t\\treturn this;\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\ttranslate: function () {\\n\\n\\t\\t// translate geometry\\n\\n\\t\\tvar m1 = new Matrix4();\\n\\n\\t\\treturn function translate( x, y, z ) {\\n\\n\\t\\t\\tm1.makeTranslation( x, y, z );\\n\\n\\t\\t\\tthis.applyMatrix( m1 );\\n\\n\\t\\t\\treturn this;\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\tscale: function () {\\n\\n\\t\\t// scale geometry\\n\\n\\t\\tvar m1 = new Matrix4();\\n\\n\\t\\treturn function scale( x, y, z ) {\\n\\n\\t\\t\\tm1.makeScale( x, y, z );\\n\\n\\t\\t\\tthis.applyMatrix( m1 );\\n\\n\\t\\t\\treturn this;\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\tlookAt: function () {\\n\\n\\t\\tvar obj = new Object3D();\\n\\n\\t\\treturn function lookAt( vector ) {\\n\\n\\t\\t\\tobj.lookAt( vector );\\n\\n\\t\\t\\tobj.updateMatrix();\\n\\n\\t\\t\\tthis.applyMatrix( obj.matrix );\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\tcenter: function () {\\n\\n\\t\\tvar offset = new Vector3();\\n\\n\\t\\treturn function center() {\\n\\n\\t\\t\\tthis.computeBoundingBox();\\n\\n\\t\\t\\tthis.boundingBox.getCenter( offset ).negate();\\n\\n\\t\\t\\tthis.translate( offset.x, offset.y, offset.z );\\n\\n\\t\\t\\treturn this;\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\tsetFromObject: function ( object ) {\\n\\n\\t\\t// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );\\n\\n\\t\\tvar geometry = object.geometry;\\n\\n\\t\\tif ( object.isPoints || object.isLine ) {\\n\\n\\t\\t\\tvar positions = new Float32BufferAttribute( geometry.vertices.length * 3, 3 );\\n\\t\\t\\tvar colors = new Float32BufferAttribute( geometry.colors.length * 3, 3 );\\n\\n\\t\\t\\tthis.addAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );\\n\\t\\t\\tthis.addAttribute( 'color', colors.copyColorsArray( geometry.colors ) );\\n\\n\\t\\t\\tif ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {\\n\\n\\t\\t\\t\\tvar lineDistances = new Float32BufferAttribute( geometry.lineDistances.length, 1 );\\n\\n\\t\\t\\t\\tthis.addAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( geometry.boundingSphere !== null ) {\\n\\n\\t\\t\\t\\tthis.boundingSphere = geometry.boundingSphere.clone();\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( geometry.boundingBox !== null ) {\\n\\n\\t\\t\\t\\tthis.boundingBox = geometry.boundingBox.clone();\\n\\n\\t\\t\\t}\\n\\n\\t\\t} else if ( object.isMesh ) {\\n\\n\\t\\t\\tif ( geometry && geometry.isGeometry ) {\\n\\n\\t\\t\\t\\tthis.fromGeometry( geometry );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetFromPoints: function ( points ) {\\n\\n\\t\\tvar position = [];\\n\\n\\t\\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\\n\\n\\t\\t\\tvar point = points[ i ];\\n\\t\\t\\tposition.push( point.x, point.y, point.z || 0 );\\n\\n\\t\\t}\\n\\n\\t\\tthis.addAttribute( 'position', new Float32BufferAttribute( position, 3 ) );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tupdateFromObject: function ( object ) {\\n\\n\\t\\tvar geometry = object.geometry;\\n\\n\\t\\tif ( object.isMesh ) {\\n\\n\\t\\t\\tvar direct = geometry.__directGeometry;\\n\\n\\t\\t\\tif ( geometry.elementsNeedUpdate === true ) {\\n\\n\\t\\t\\t\\tdirect = undefined;\\n\\t\\t\\t\\tgeometry.elementsNeedUpdate = false;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( direct === undefined ) {\\n\\n\\t\\t\\t\\treturn this.fromGeometry( geometry );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tdirect.verticesNeedUpdate = geometry.verticesNeedUpdate;\\n\\t\\t\\tdirect.normalsNeedUpdate = geometry.normalsNeedUpdate;\\n\\t\\t\\tdirect.colorsNeedUpdate = geometry.colorsNeedUpdate;\\n\\t\\t\\tdirect.uvsNeedUpdate = geometry.uvsNeedUpdate;\\n\\t\\t\\tdirect.groupsNeedUpdate = geometry.groupsNeedUpdate;\\n\\n\\t\\t\\tgeometry.verticesNeedUpdate = false;\\n\\t\\t\\tgeometry.normalsNeedUpdate = false;\\n\\t\\t\\tgeometry.colorsNeedUpdate = false;\\n\\t\\t\\tgeometry.uvsNeedUpdate = false;\\n\\t\\t\\tgeometry.groupsNeedUpdate = false;\\n\\n\\t\\t\\tgeometry = direct;\\n\\n\\t\\t}\\n\\n\\t\\tvar attribute;\\n\\n\\t\\tif ( geometry.verticesNeedUpdate === true ) {\\n\\n\\t\\t\\tattribute = this.attributes.position;\\n\\n\\t\\t\\tif ( attribute !== undefined ) {\\n\\n\\t\\t\\t\\tattribute.copyVector3sArray( geometry.vertices );\\n\\t\\t\\t\\tattribute.needsUpdate = true;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tgeometry.verticesNeedUpdate = false;\\n\\n\\t\\t}\\n\\n\\t\\tif ( geometry.normalsNeedUpdate === true ) {\\n\\n\\t\\t\\tattribute = this.attributes.normal;\\n\\n\\t\\t\\tif ( attribute !== undefined ) {\\n\\n\\t\\t\\t\\tattribute.copyVector3sArray( geometry.normals );\\n\\t\\t\\t\\tattribute.needsUpdate = true;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tgeometry.normalsNeedUpdate = false;\\n\\n\\t\\t}\\n\\n\\t\\tif ( geometry.colorsNeedUpdate === true ) {\\n\\n\\t\\t\\tattribute = this.attributes.color;\\n\\n\\t\\t\\tif ( attribute !== undefined ) {\\n\\n\\t\\t\\t\\tattribute.copyColorsArray( geometry.colors );\\n\\t\\t\\t\\tattribute.needsUpdate = true;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tgeometry.colorsNeedUpdate = false;\\n\\n\\t\\t}\\n\\n\\t\\tif ( geometry.uvsNeedUpdate ) {\\n\\n\\t\\t\\tattribute = this.attributes.uv;\\n\\n\\t\\t\\tif ( attribute !== undefined ) {\\n\\n\\t\\t\\t\\tattribute.copyVector2sArray( geometry.uvs );\\n\\t\\t\\t\\tattribute.needsUpdate = true;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tgeometry.uvsNeedUpdate = false;\\n\\n\\t\\t}\\n\\n\\t\\tif ( geometry.lineDistancesNeedUpdate ) {\\n\\n\\t\\t\\tattribute = this.attributes.lineDistance;\\n\\n\\t\\t\\tif ( attribute !== undefined ) {\\n\\n\\t\\t\\t\\tattribute.copyArray( geometry.lineDistances );\\n\\t\\t\\t\\tattribute.needsUpdate = true;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tgeometry.lineDistancesNeedUpdate = false;\\n\\n\\t\\t}\\n\\n\\t\\tif ( geometry.groupsNeedUpdate ) {\\n\\n\\t\\t\\tgeometry.computeGroups( object.geometry );\\n\\t\\t\\tthis.groups = geometry.groups;\\n\\n\\t\\t\\tgeometry.groupsNeedUpdate = false;\\n\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tfromGeometry: function ( geometry ) {\\n\\n\\t\\tgeometry.__directGeometry = new DirectGeometry().fromGeometry( geometry );\\n\\n\\t\\treturn this.fromDirectGeometry( geometry.__directGeometry );\\n\\n\\t},\\n\\n\\tfromDirectGeometry: function ( geometry ) {\\n\\n\\t\\tvar positions = new Float32Array( geometry.vertices.length * 3 );\\n\\t\\tthis.addAttribute( 'position', new BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );\\n\\n\\t\\tif ( geometry.normals.length > 0 ) {\\n\\n\\t\\t\\tvar normals = new Float32Array( geometry.normals.length * 3 );\\n\\t\\t\\tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );\\n\\n\\t\\t}\\n\\n\\t\\tif ( geometry.colors.length > 0 ) {\\n\\n\\t\\t\\tvar colors = new Float32Array( geometry.colors.length * 3 );\\n\\t\\t\\tthis.addAttribute( 'color', new BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );\\n\\n\\t\\t}\\n\\n\\t\\tif ( geometry.uvs.length > 0 ) {\\n\\n\\t\\t\\tvar uvs = new Float32Array( geometry.uvs.length * 2 );\\n\\t\\t\\tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );\\n\\n\\t\\t}\\n\\n\\t\\tif ( geometry.uvs2.length > 0 ) {\\n\\n\\t\\t\\tvar uvs2 = new Float32Array( geometry.uvs2.length * 2 );\\n\\t\\t\\tthis.addAttribute( 'uv2', new BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );\\n\\n\\t\\t}\\n\\n\\t\\t// groups\\n\\n\\t\\tthis.groups = geometry.groups;\\n\\n\\t\\t// morphs\\n\\n\\t\\tfor ( var name in geometry.morphTargets ) {\\n\\n\\t\\t\\tvar array = [];\\n\\t\\t\\tvar morphTargets = geometry.morphTargets[ name ];\\n\\n\\t\\t\\tfor ( var i = 0, l = morphTargets.length; i < l; i ++ ) {\\n\\n\\t\\t\\t\\tvar morphTarget = morphTargets[ i ];\\n\\n\\t\\t\\t\\tvar attribute = new Float32BufferAttribute( morphTarget.data.length * 3, 3 );\\n\\t\\t\\t\\tattribute.name = morphTarget.name;\\n\\n\\t\\t\\t\\tarray.push( attribute.copyVector3sArray( morphTarget.data ) );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tthis.morphAttributes[ name ] = array;\\n\\n\\t\\t}\\n\\n\\t\\t// skinning\\n\\n\\t\\tif ( geometry.skinIndices.length > 0 ) {\\n\\n\\t\\t\\tvar skinIndices = new Float32BufferAttribute( geometry.skinIndices.length * 4, 4 );\\n\\t\\t\\tthis.addAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );\\n\\n\\t\\t}\\n\\n\\t\\tif ( geometry.skinWeights.length > 0 ) {\\n\\n\\t\\t\\tvar skinWeights = new Float32BufferAttribute( geometry.skinWeights.length * 4, 4 );\\n\\t\\t\\tthis.addAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );\\n\\n\\t\\t}\\n\\n\\t\\t//\\n\\n\\t\\tif ( geometry.boundingSphere !== null ) {\\n\\n\\t\\t\\tthis.boundingSphere = geometry.boundingSphere.clone();\\n\\n\\t\\t}\\n\\n\\t\\tif ( geometry.boundingBox !== null ) {\\n\\n\\t\\t\\tthis.boundingBox = geometry.boundingBox.clone();\\n\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tcomputeBoundingBox: function () {\\n\\n\\t\\tif ( this.boundingBox === null ) {\\n\\n\\t\\t\\tthis.boundingBox = new Box3();\\n\\n\\t\\t}\\n\\n\\t\\tvar position = this.attributes.position;\\n\\n\\t\\tif ( position !== undefined ) {\\n\\n\\t\\t\\tthis.boundingBox.setFromBufferAttribute( position );\\n\\n\\t\\t} else {\\n\\n\\t\\t\\tthis.boundingBox.makeEmpty();\\n\\n\\t\\t}\\n\\n\\t\\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\\n\\n\\t\\t\\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The \\\"position\\\" attribute is likely to have NaN values.', this );\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\tcomputeBoundingSphere: function () {\\n\\n\\t\\tvar box = new Box3();\\n\\t\\tvar vector = new Vector3();\\n\\n\\t\\treturn function computeBoundingSphere() {\\n\\n\\t\\t\\tif ( this.boundingSphere === null ) {\\n\\n\\t\\t\\t\\tthis.boundingSphere = new Sphere();\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tvar position = this.attributes.position;\\n\\n\\t\\t\\tif ( position ) {\\n\\n\\t\\t\\t\\tvar center = this.boundingSphere.center;\\n\\n\\t\\t\\t\\tbox.setFromBufferAttribute( position );\\n\\t\\t\\t\\tbox.getCenter( center );\\n\\n\\t\\t\\t\\t// hoping to find a boundingSphere with a radius smaller than the\\n\\t\\t\\t\\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\\n\\n\\t\\t\\t\\tvar maxRadiusSq = 0;\\n\\n\\t\\t\\t\\tfor ( var i = 0, il = position.count; i < il; i ++ ) {\\n\\n\\t\\t\\t\\t\\tvector.x = position.getX( i );\\n\\t\\t\\t\\t\\tvector.y = position.getY( i );\\n\\t\\t\\t\\t\\tvector.z = position.getZ( i );\\n\\t\\t\\t\\t\\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\\n\\n\\t\\t\\t\\tif ( isNaN( this.boundingSphere.radius ) ) {\\n\\n\\t\\t\\t\\t\\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \\\"position\\\" attribute is likely to have NaN values.', this );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\tcomputeFaceNormals: function () {\\n\\n\\t\\t// backwards compatibility\\n\\n\\t},\\n\\n\\tcomputeVertexNormals: function () {\\n\\n\\t\\tvar index = this.index;\\n\\t\\tvar attributes = this.attributes;\\n\\n\\t\\tif ( attributes.position ) {\\n\\n\\t\\t\\tvar positions = attributes.position.array;\\n\\n\\t\\t\\tif ( attributes.normal === undefined ) {\\n\\n\\t\\t\\t\\tthis.addAttribute( 'normal', new BufferAttribute( new Float32Array( positions.length ), 3 ) );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t// reset existing normals to zero\\n\\n\\t\\t\\t\\tvar array = attributes.normal.array;\\n\\n\\t\\t\\t\\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\\n\\n\\t\\t\\t\\t\\tarray[ i ] = 0;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tvar normals = attributes.normal.array;\\n\\n\\t\\t\\tvar vA, vB, vC;\\n\\t\\t\\tvar pA = new Vector3(), pB = new Vector3(), pC = new Vector3();\\n\\t\\t\\tvar cb = new Vector3(), ab = new Vector3();\\n\\n\\t\\t\\t// indexed elements\\n\\n\\t\\t\\tif ( index ) {\\n\\n\\t\\t\\t\\tvar indices = index.array;\\n\\n\\t\\t\\t\\tfor ( var i = 0, il = index.count; i < il; i += 3 ) {\\n\\n\\t\\t\\t\\t\\tvA = indices[ i + 0 ] * 3;\\n\\t\\t\\t\\t\\tvB = indices[ i + 1 ] * 3;\\n\\t\\t\\t\\t\\tvC = indices[ i + 2 ] * 3;\\n\\n\\t\\t\\t\\t\\tpA.fromArray( positions, vA );\\n\\t\\t\\t\\t\\tpB.fromArray( positions, vB );\\n\\t\\t\\t\\t\\tpC.fromArray( positions, vC );\\n\\n\\t\\t\\t\\t\\tcb.subVectors( pC, pB );\\n\\t\\t\\t\\t\\tab.subVectors( pA, pB );\\n\\t\\t\\t\\t\\tcb.cross( ab );\\n\\n\\t\\t\\t\\t\\tnormals[ vA ] += cb.x;\\n\\t\\t\\t\\t\\tnormals[ vA + 1 ] += cb.y;\\n\\t\\t\\t\\t\\tnormals[ vA + 2 ] += cb.z;\\n\\n\\t\\t\\t\\t\\tnormals[ vB ] += cb.x;\\n\\t\\t\\t\\t\\tnormals[ vB + 1 ] += cb.y;\\n\\t\\t\\t\\t\\tnormals[ vB + 2 ] += cb.z;\\n\\n\\t\\t\\t\\t\\tnormals[ vC ] += cb.x;\\n\\t\\t\\t\\t\\tnormals[ vC + 1 ] += cb.y;\\n\\t\\t\\t\\t\\tnormals[ vC + 2 ] += cb.z;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t// non-indexed elements (unconnected triangle soup)\\n\\n\\t\\t\\t\\tfor ( var i = 0, il = positions.length; i < il; i += 9 ) {\\n\\n\\t\\t\\t\\t\\tpA.fromArray( positions, i );\\n\\t\\t\\t\\t\\tpB.fromArray( positions, i + 3 );\\n\\t\\t\\t\\t\\tpC.fromArray( positions, i + 6 );\\n\\n\\t\\t\\t\\t\\tcb.subVectors( pC, pB );\\n\\t\\t\\t\\t\\tab.subVectors( pA, pB );\\n\\t\\t\\t\\t\\tcb.cross( ab );\\n\\n\\t\\t\\t\\t\\tnormals[ i ] = cb.x;\\n\\t\\t\\t\\t\\tnormals[ i + 1 ] = cb.y;\\n\\t\\t\\t\\t\\tnormals[ i + 2 ] = cb.z;\\n\\n\\t\\t\\t\\t\\tnormals[ i + 3 ] = cb.x;\\n\\t\\t\\t\\t\\tnormals[ i + 4 ] = cb.y;\\n\\t\\t\\t\\t\\tnormals[ i + 5 ] = cb.z;\\n\\n\\t\\t\\t\\t\\tnormals[ i + 6 ] = cb.x;\\n\\t\\t\\t\\t\\tnormals[ i + 7 ] = cb.y;\\n\\t\\t\\t\\t\\tnormals[ i + 8 ] = cb.z;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tthis.normalizeNormals();\\n\\n\\t\\t\\tattributes.normal.needsUpdate = true;\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\tmerge: function ( geometry, offset ) {\\n\\n\\t\\tif ( ! ( geometry && geometry.isBufferGeometry ) ) {\\n\\n\\t\\t\\tconsole.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );\\n\\t\\t\\treturn;\\n\\n\\t\\t}\\n\\n\\t\\tif ( offset === undefined ) {\\n\\n\\t\\t\\toffset = 0;\\n\\n\\t\\t\\tconsole.warn(\\n\\t\\t\\t\\t'THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. '\\n\\t\\t\\t\\t+ 'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.'\\n\\t\\t\\t);\\n\\n\\t\\t}\\n\\n\\t\\tvar attributes = this.attributes;\\n\\n\\t\\tfor ( var key in attributes ) {\\n\\n\\t\\t\\tif ( geometry.attributes[ key ] === undefined ) continue;\\n\\n\\t\\t\\tvar attribute1 = attributes[ key ];\\n\\t\\t\\tvar attributeArray1 = attribute1.array;\\n\\n\\t\\t\\tvar attribute2 = geometry.attributes[ key ];\\n\\t\\t\\tvar attributeArray2 = attribute2.array;\\n\\n\\t\\t\\tvar attributeSize = attribute2.itemSize;\\n\\n\\t\\t\\tfor ( var i = 0, j = attributeSize * offset; i < attributeArray2.length; i ++, j ++ ) {\\n\\n\\t\\t\\t\\tattributeArray1[ j ] = attributeArray2[ i ];\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tnormalizeNormals: function () {\\n\\n\\t\\tvar vector = new Vector3();\\n\\n\\t\\treturn function normalizeNormals() {\\n\\n\\t\\t\\tvar normals = this.attributes.normal;\\n\\n\\t\\t\\tfor ( var i = 0, il = normals.count; i < il; i ++ ) {\\n\\n\\t\\t\\t\\tvector.x = normals.getX( i );\\n\\t\\t\\t\\tvector.y = normals.getY( i );\\n\\t\\t\\t\\tvector.z = normals.getZ( i );\\n\\n\\t\\t\\t\\tvector.normalize();\\n\\n\\t\\t\\t\\tnormals.setXYZ( i, vector.x, vector.y, vector.z );\\n\\n\\t\\t\\t}\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\ttoNonIndexed: function () {\\n\\n\\t\\tfunction convertBufferAttribute( attribute, indices ) {\\n\\n\\t\\t\\tvar array = attribute.array;\\n\\t\\t\\tvar itemSize = attribute.itemSize;\\n\\n\\t\\t\\tvar array2 = new array.constructor( indices.length * itemSize );\\n\\n\\t\\t\\tvar index = 0, index2 = 0;\\n\\n\\t\\t\\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\\n\\n\\t\\t\\t\\tindex = indices[ i ] * itemSize;\\n\\n\\t\\t\\t\\tfor ( var j = 0; j < itemSize; j ++ ) {\\n\\n\\t\\t\\t\\t\\tarray2[ index2 ++ ] = array[ index ++ ];\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn new BufferAttribute( array2, itemSize );\\n\\n\\t\\t}\\n\\n\\t\\t//\\n\\n\\t\\tif ( this.index === null ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );\\n\\t\\t\\treturn this;\\n\\n\\t\\t}\\n\\n\\t\\tvar geometry2 = new BufferGeometry();\\n\\n\\t\\tvar indices = this.index.array;\\n\\t\\tvar attributes = this.attributes;\\n\\n\\t\\t// attributes\\n\\n\\t\\tfor ( var name in attributes ) {\\n\\n\\t\\t\\tvar attribute = attributes[ name ];\\n\\n\\t\\t\\tvar newAttribute = convertBufferAttribute( attribute, indices );\\n\\n\\t\\t\\tgeometry2.addAttribute( name, newAttribute );\\n\\n\\t\\t}\\n\\n\\t\\t// morph attributes\\n\\n\\t\\tvar morphAttributes = this.morphAttributes;\\n\\n\\t\\tfor ( name in morphAttributes ) {\\n\\n\\t\\t\\tvar morphArray = [];\\n\\t\\t\\tvar morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\\n\\n\\t\\t\\tfor ( var i = 0, il = morphAttribute.length; i < il; i ++ ) {\\n\\n\\t\\t\\t\\tvar attribute = morphAttribute[ i ];\\n\\n\\t\\t\\t\\tvar newAttribute = convertBufferAttribute( attribute, indices );\\n\\n\\t\\t\\t\\tmorphArray.push( newAttribute );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tgeometry2.morphAttributes[ name ] = morphArray;\\n\\n\\t\\t}\\n\\n\\t\\t// groups\\n\\n\\t\\tvar groups = this.groups;\\n\\n\\t\\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\\n\\n\\t\\t\\tvar group = groups[ i ];\\n\\t\\t\\tgeometry2.addGroup( group.start, group.count, group.materialIndex );\\n\\n\\t\\t}\\n\\n\\t\\treturn geometry2;\\n\\n\\t},\\n\\n\\ttoJSON: function () {\\n\\n\\t\\tvar data = {\\n\\t\\t\\tmetadata: {\\n\\t\\t\\t\\tversion: 4.5,\\n\\t\\t\\t\\ttype: 'BufferGeometry',\\n\\t\\t\\t\\tgenerator: 'BufferGeometry.toJSON'\\n\\t\\t\\t}\\n\\t\\t};\\n\\n\\t\\t// standard BufferGeometry serialization\\n\\n\\t\\tdata.uuid = this.uuid;\\n\\t\\tdata.type = this.type;\\n\\t\\tif ( this.name !== '' ) data.name = this.name;\\n\\t\\tif ( Object.keys( this.userData ).length > 0 ) data.userData = this.userData;\\n\\n\\t\\tif ( this.parameters !== undefined ) {\\n\\n\\t\\t\\tvar parameters = this.parameters;\\n\\n\\t\\t\\tfor ( var key in parameters ) {\\n\\n\\t\\t\\t\\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn data;\\n\\n\\t\\t}\\n\\n\\t\\tdata.data = { attributes: {} };\\n\\n\\t\\tvar index = this.index;\\n\\n\\t\\tif ( index !== null ) {\\n\\n\\t\\t\\tvar array = Array.prototype.slice.call( index.array );\\n\\n\\t\\t\\tdata.data.index = {\\n\\t\\t\\t\\ttype: index.array.constructor.name,\\n\\t\\t\\t\\tarray: array\\n\\t\\t\\t};\\n\\n\\t\\t}\\n\\n\\t\\tvar attributes = this.attributes;\\n\\n\\t\\tfor ( var key in attributes ) {\\n\\n\\t\\t\\tvar attribute = attributes[ key ];\\n\\n\\t\\t\\tvar array = Array.prototype.slice.call( attribute.array );\\n\\n\\t\\t\\tdata.data.attributes[ key ] = {\\n\\t\\t\\t\\titemSize: attribute.itemSize,\\n\\t\\t\\t\\ttype: attribute.array.constructor.name,\\n\\t\\t\\t\\tarray: array,\\n\\t\\t\\t\\tnormalized: attribute.normalized\\n\\t\\t\\t};\\n\\n\\t\\t}\\n\\n\\t\\tvar groups = this.groups;\\n\\n\\t\\tif ( groups.length > 0 ) {\\n\\n\\t\\t\\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\\n\\n\\t\\t}\\n\\n\\t\\tvar boundingSphere = this.boundingSphere;\\n\\n\\t\\tif ( boundingSphere !== null ) {\\n\\n\\t\\t\\tdata.data.boundingSphere = {\\n\\t\\t\\t\\tcenter: boundingSphere.center.toArray(),\\n\\t\\t\\t\\tradius: boundingSphere.radius\\n\\t\\t\\t};\\n\\n\\t\\t}\\n\\n\\t\\treturn data;\\n\\n\\t},\\n\\n\\tclone: function () {\\n\\n\\t\\t/*\\n\\t\\t // Handle primitives\\n\\n\\t\\t var parameters = this.parameters;\\n\\n\\t\\t if ( parameters !== undefined ) {\\n\\n\\t\\t var values = [];\\n\\n\\t\\t for ( var key in parameters ) {\\n\\n\\t\\t values.push( parameters[ key ] );\\n\\n\\t\\t }\\n\\n\\t\\t var geometry = Object.create( this.constructor.prototype );\\n\\t\\t this.constructor.apply( geometry, values );\\n\\t\\t return geometry;\\n\\n\\t\\t }\\n\\n\\t\\t return new this.constructor().copy( this );\\n\\t\\t */\\n\\n\\t\\treturn new BufferGeometry().copy( this );\\n\\n\\t},\\n\\n\\tcopy: function ( source ) {\\n\\n\\t\\tvar name, i, l;\\n\\n\\t\\t// reset\\n\\n\\t\\tthis.index = null;\\n\\t\\tthis.attributes = {};\\n\\t\\tthis.morphAttributes = {};\\n\\t\\tthis.groups = [];\\n\\t\\tthis.boundingBox = null;\\n\\t\\tthis.boundingSphere = null;\\n\\n\\t\\t// name\\n\\n\\t\\tthis.name = source.name;\\n\\n\\t\\t// index\\n\\n\\t\\tvar index = source.index;\\n\\n\\t\\tif ( index !== null ) {\\n\\n\\t\\t\\tthis.setIndex( index.clone() );\\n\\n\\t\\t}\\n\\n\\t\\t// attributes\\n\\n\\t\\tvar attributes = source.attributes;\\n\\n\\t\\tfor ( name in attributes ) {\\n\\n\\t\\t\\tvar attribute = attributes[ name ];\\n\\t\\t\\tthis.addAttribute( name, attribute.clone() );\\n\\n\\t\\t}\\n\\n\\t\\t// morph attributes\\n\\n\\t\\tvar morphAttributes = source.morphAttributes;\\n\\n\\t\\tfor ( name in morphAttributes ) {\\n\\n\\t\\t\\tvar array = [];\\n\\t\\t\\tvar morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\\n\\n\\t\\t\\tfor ( i = 0, l = morphAttribute.length; i < l; i ++ ) {\\n\\n\\t\\t\\t\\tarray.push( morphAttribute[ i ].clone() );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tthis.morphAttributes[ name ] = array;\\n\\n\\t\\t}\\n\\n\\t\\t// groups\\n\\n\\t\\tvar groups = source.groups;\\n\\n\\t\\tfor ( i = 0, l = groups.length; i < l; i ++ ) {\\n\\n\\t\\t\\tvar group = groups[ i ];\\n\\t\\t\\tthis.addGroup( group.start, group.count, group.materialIndex );\\n\\n\\t\\t}\\n\\n\\t\\t// bounding box\\n\\n\\t\\tvar boundingBox = source.boundingBox;\\n\\n\\t\\tif ( boundingBox !== null ) {\\n\\n\\t\\t\\tthis.boundingBox = boundingBox.clone();\\n\\n\\t\\t}\\n\\n\\t\\t// bounding sphere\\n\\n\\t\\tvar boundingSphere = source.boundingSphere;\\n\\n\\t\\tif ( boundingSphere !== null ) {\\n\\n\\t\\t\\tthis.boundingSphere = boundingSphere.clone();\\n\\n\\t\\t}\\n\\n\\t\\t// draw range\\n\\n\\t\\tthis.drawRange.start = source.drawRange.start;\\n\\t\\tthis.drawRange.count = source.drawRange.count;\\n\\n\\t\\t// user data\\n\\n\\t\\tthis.userData = source.userData;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tdispose: function () {\\n\\n\\t\\tthis.dispatchEvent( { type: 'dispose' } );\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n * @author Mugen87 / https://github.com/Mugen87\\n */\\n\\n// BoxGeometry\\n\\nfunction BoxGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\\n\\n\\tGeometry.call( this );\\n\\n\\tthis.type = 'BoxGeometry';\\n\\n\\tthis.parameters = {\\n\\t\\twidth: width,\\n\\t\\theight: height,\\n\\t\\tdepth: depth,\\n\\t\\twidthSegments: widthSegments,\\n\\t\\theightSegments: heightSegments,\\n\\t\\tdepthSegments: depthSegments\\n\\t};\\n\\n\\tthis.fromBufferGeometry( new BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );\\n\\tthis.mergeVertices();\\n\\n}\\n\\nBoxGeometry.prototype = Object.create( Geometry.prototype );\\nBoxGeometry.prototype.constructor = BoxGeometry;\\n\\n// BoxBufferGeometry\\n\\nfunction BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\\n\\n\\tBufferGeometry.call( this );\\n\\n\\tthis.type = 'BoxBufferGeometry';\\n\\n\\tthis.parameters = {\\n\\t\\twidth: width,\\n\\t\\theight: height,\\n\\t\\tdepth: depth,\\n\\t\\twidthSegments: widthSegments,\\n\\t\\theightSegments: heightSegments,\\n\\t\\tdepthSegments: depthSegments\\n\\t};\\n\\n\\tvar scope = this;\\n\\n\\twidth = width || 1;\\n\\theight = height || 1;\\n\\tdepth = depth || 1;\\n\\n\\t// segments\\n\\n\\twidthSegments = Math.floor( widthSegments ) || 1;\\n\\theightSegments = Math.floor( heightSegments ) || 1;\\n\\tdepthSegments = Math.floor( depthSegments ) || 1;\\n\\n\\t// buffers\\n\\n\\tvar indices = [];\\n\\tvar vertices = [];\\n\\tvar normals = [];\\n\\tvar uvs = [];\\n\\n\\t// helper variables\\n\\n\\tvar numberOfVertices = 0;\\n\\tvar groupStart = 0;\\n\\n\\t// build each side of the box geometry\\n\\n\\tbuildPlane( 'z', 'y', 'x', - 1, - 1, depth, height, width, depthSegments, heightSegments, 0 ); // px\\n\\tbuildPlane( 'z', 'y', 'x', 1, - 1, depth, height, - width, depthSegments, heightSegments, 1 ); // nx\\n\\tbuildPlane( 'x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2 ); // py\\n\\tbuildPlane( 'x', 'z', 'y', 1, - 1, width, depth, - height, widthSegments, depthSegments, 3 ); // ny\\n\\tbuildPlane( 'x', 'y', 'z', 1, - 1, width, height, depth, widthSegments, heightSegments, 4 ); // pz\\n\\tbuildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth, widthSegments, heightSegments, 5 ); // nz\\n\\n\\t// build geometry\\n\\n\\tthis.setIndex( indices );\\n\\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\\n\\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\\n\\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\\n\\n\\tfunction buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {\\n\\n\\t\\tvar segmentWidth = width / gridX;\\n\\t\\tvar segmentHeight = height / gridY;\\n\\n\\t\\tvar widthHalf = width / 2;\\n\\t\\tvar heightHalf = height / 2;\\n\\t\\tvar depthHalf = depth / 2;\\n\\n\\t\\tvar gridX1 = gridX + 1;\\n\\t\\tvar gridY1 = gridY + 1;\\n\\n\\t\\tvar vertexCounter = 0;\\n\\t\\tvar groupCount = 0;\\n\\n\\t\\tvar ix, iy;\\n\\n\\t\\tvar vector = new Vector3();\\n\\n\\t\\t// generate vertices, normals and uvs\\n\\n\\t\\tfor ( iy = 0; iy < gridY1; iy ++ ) {\\n\\n\\t\\t\\tvar y = iy * segmentHeight - heightHalf;\\n\\n\\t\\t\\tfor ( ix = 0; ix < gridX1; ix ++ ) {\\n\\n\\t\\t\\t\\tvar x = ix * segmentWidth - widthHalf;\\n\\n\\t\\t\\t\\t// set values to correct vector component\\n\\n\\t\\t\\t\\tvector[ u ] = x * udir;\\n\\t\\t\\t\\tvector[ v ] = y * vdir;\\n\\t\\t\\t\\tvector[ w ] = depthHalf;\\n\\n\\t\\t\\t\\t// now apply vector to vertex buffer\\n\\n\\t\\t\\t\\tvertices.push( vector.x, vector.y, vector.z );\\n\\n\\t\\t\\t\\t// set values to correct vector component\\n\\n\\t\\t\\t\\tvector[ u ] = 0;\\n\\t\\t\\t\\tvector[ v ] = 0;\\n\\t\\t\\t\\tvector[ w ] = depth > 0 ? 1 : - 1;\\n\\n\\t\\t\\t\\t// now apply vector to normal buffer\\n\\n\\t\\t\\t\\tnormals.push( vector.x, vector.y, vector.z );\\n\\n\\t\\t\\t\\t// uvs\\n\\n\\t\\t\\t\\tuvs.push( ix / gridX );\\n\\t\\t\\t\\tuvs.push( 1 - ( iy / gridY ) );\\n\\n\\t\\t\\t\\t// counters\\n\\n\\t\\t\\t\\tvertexCounter += 1;\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\t// indices\\n\\n\\t\\t// 1. you need three indices to draw a single face\\n\\t\\t// 2. a single segment consists of two faces\\n\\t\\t// 3. so we need to generate six (2*3) indices per segment\\n\\n\\t\\tfor ( iy = 0; iy < gridY; iy ++ ) {\\n\\n\\t\\t\\tfor ( ix = 0; ix < gridX; ix ++ ) {\\n\\n\\t\\t\\t\\tvar a = numberOfVertices + ix + gridX1 * iy;\\n\\t\\t\\t\\tvar b = numberOfVertices + ix + gridX1 * ( iy + 1 );\\n\\t\\t\\t\\tvar c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );\\n\\t\\t\\t\\tvar d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;\\n\\n\\t\\t\\t\\t// faces\\n\\n\\t\\t\\t\\tindices.push( a, b, d );\\n\\t\\t\\t\\tindices.push( b, c, d );\\n\\n\\t\\t\\t\\t// increase counter\\n\\n\\t\\t\\t\\tgroupCount += 6;\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\t// add a group to the geometry. this will ensure multi material support\\n\\n\\t\\tscope.addGroup( groupStart, groupCount, materialIndex );\\n\\n\\t\\t// calculate new start value for groups\\n\\n\\t\\tgroupStart += groupCount;\\n\\n\\t\\t// update total number of vertices\\n\\n\\t\\tnumberOfVertices += vertexCounter;\\n\\n\\t}\\n\\n}\\n\\nBoxBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\\nBoxBufferGeometry.prototype.constructor = BoxBufferGeometry;\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n * @author Mugen87 / https://github.com/Mugen87\\n */\\n\\n// PlaneGeometry\\n\\nfunction PlaneGeometry( width, height, widthSegments, heightSegments ) {\\n\\n\\tGeometry.call( this );\\n\\n\\tthis.type = 'PlaneGeometry';\\n\\n\\tthis.parameters = {\\n\\t\\twidth: width,\\n\\t\\theight: height,\\n\\t\\twidthSegments: widthSegments,\\n\\t\\theightSegments: heightSegments\\n\\t};\\n\\n\\tthis.fromBufferGeometry( new PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );\\n\\tthis.mergeVertices();\\n\\n}\\n\\nPlaneGeometry.prototype = Object.create( Geometry.prototype );\\nPlaneGeometry.prototype.constructor = PlaneGeometry;\\n\\n// PlaneBufferGeometry\\n\\nfunction PlaneBufferGeometry( width, height, widthSegments, heightSegments ) {\\n\\n\\tBufferGeometry.call( this );\\n\\n\\tthis.type = 'PlaneBufferGeometry';\\n\\n\\tthis.parameters = {\\n\\t\\twidth: width,\\n\\t\\theight: height,\\n\\t\\twidthSegments: widthSegments,\\n\\t\\theightSegments: heightSegments\\n\\t};\\n\\n\\twidth = width || 1;\\n\\theight = height || 1;\\n\\n\\tvar width_half = width / 2;\\n\\tvar height_half = height / 2;\\n\\n\\tvar gridX = Math.floor( widthSegments ) || 1;\\n\\tvar gridY = Math.floor( heightSegments ) || 1;\\n\\n\\tvar gridX1 = gridX + 1;\\n\\tvar gridY1 = gridY + 1;\\n\\n\\tvar segment_width = width / gridX;\\n\\tvar segment_height = height / gridY;\\n\\n\\tvar ix, iy;\\n\\n\\t// buffers\\n\\n\\tvar indices = [];\\n\\tvar vertices = [];\\n\\tvar normals = [];\\n\\tvar uvs = [];\\n\\n\\t// generate vertices, normals and uvs\\n\\n\\tfor ( iy = 0; iy < gridY1; iy ++ ) {\\n\\n\\t\\tvar y = iy * segment_height - height_half;\\n\\n\\t\\tfor ( ix = 0; ix < gridX1; ix ++ ) {\\n\\n\\t\\t\\tvar x = ix * segment_width - width_half;\\n\\n\\t\\t\\tvertices.push( x, - y, 0 );\\n\\n\\t\\t\\tnormals.push( 0, 0, 1 );\\n\\n\\t\\t\\tuvs.push( ix / gridX );\\n\\t\\t\\tuvs.push( 1 - ( iy / gridY ) );\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\t// indices\\n\\n\\tfor ( iy = 0; iy < gridY; iy ++ ) {\\n\\n\\t\\tfor ( ix = 0; ix < gridX; ix ++ ) {\\n\\n\\t\\t\\tvar a = ix + gridX1 * iy;\\n\\t\\t\\tvar b = ix + gridX1 * ( iy + 1 );\\n\\t\\t\\tvar c = ( ix + 1 ) + gridX1 * ( iy + 1 );\\n\\t\\t\\tvar d = ( ix + 1 ) + gridX1 * iy;\\n\\n\\t\\t\\t// faces\\n\\n\\t\\t\\tindices.push( a, b, d );\\n\\t\\t\\tindices.push( b, c, d );\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\t// build geometry\\n\\n\\tthis.setIndex( indices );\\n\\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\\n\\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\\n\\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\\n\\n}\\n\\nPlaneBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\\nPlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n * @author alteredq / http://alteredqualia.com/\\n */\\n\\nvar materialId = 0;\\n\\nfunction Material() {\\n\\n\\tObject.defineProperty( this, 'id', { value: materialId ++ } );\\n\\n\\tthis.uuid = _Math.generateUUID();\\n\\n\\tthis.name = '';\\n\\tthis.type = 'Material';\\n\\n\\tthis.fog = true;\\n\\tthis.lights = true;\\n\\n\\tthis.blending = NormalBlending;\\n\\tthis.side = FrontSide;\\n\\tthis.flatShading = false;\\n\\tthis.vertexColors = NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors\\n\\n\\tthis.opacity = 1;\\n\\tthis.transparent = false;\\n\\n\\tthis.blendSrc = SrcAlphaFactor;\\n\\tthis.blendDst = OneMinusSrcAlphaFactor;\\n\\tthis.blendEquation = AddEquation;\\n\\tthis.blendSrcAlpha = null;\\n\\tthis.blendDstAlpha = null;\\n\\tthis.blendEquationAlpha = null;\\n\\n\\tthis.depthFunc = LessEqualDepth;\\n\\tthis.depthTest = true;\\n\\tthis.depthWrite = true;\\n\\n\\tthis.clippingPlanes = null;\\n\\tthis.clipIntersection = false;\\n\\tthis.clipShadows = false;\\n\\n\\tthis.shadowSide = null;\\n\\n\\tthis.colorWrite = true;\\n\\n\\tthis.precision = null; // override the renderer's default precision for this material\\n\\n\\tthis.polygonOffset = false;\\n\\tthis.polygonOffsetFactor = 0;\\n\\tthis.polygonOffsetUnits = 0;\\n\\n\\tthis.dithering = false;\\n\\n\\tthis.alphaTest = 0;\\n\\tthis.premultipliedAlpha = false;\\n\\n\\tthis.visible = true;\\n\\n\\tthis.userData = {};\\n\\n\\tthis.needsUpdate = true;\\n\\n}\\n\\nMaterial.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\\n\\n\\tconstructor: Material,\\n\\n\\tisMaterial: true,\\n\\n\\tonBeforeCompile: function () {},\\n\\n\\tsetValues: function ( values ) {\\n\\n\\t\\tif ( values === undefined ) return;\\n\\n\\t\\tfor ( var key in values ) {\\n\\n\\t\\t\\tvar newValue = values[ key ];\\n\\n\\t\\t\\tif ( newValue === undefined ) {\\n\\n\\t\\t\\t\\tconsole.warn( \\\"THREE.Material: '\\\" + key + \\\"' parameter is undefined.\\\" );\\n\\t\\t\\t\\tcontinue;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\t// for backward compatability if shading is set in the constructor\\n\\t\\t\\tif ( key === 'shading' ) {\\n\\n\\t\\t\\t\\tconsole.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\\n\\t\\t\\t\\tthis.flatShading = ( newValue === FlatShading ) ? true : false;\\n\\t\\t\\t\\tcontinue;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tvar currentValue = this[ key ];\\n\\n\\t\\t\\tif ( currentValue === undefined ) {\\n\\n\\t\\t\\t\\tconsole.warn( \\\"THREE.\\\" + this.type + \\\": '\\\" + key + \\\"' is not a property of this material.\\\" );\\n\\t\\t\\t\\tcontinue;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( currentValue && currentValue.isColor ) {\\n\\n\\t\\t\\t\\tcurrentValue.set( newValue );\\n\\n\\t\\t\\t} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {\\n\\n\\t\\t\\t\\tcurrentValue.copy( newValue );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tthis[ key ] = newValue;\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\ttoJSON: function ( meta ) {\\n\\n\\t\\tvar isRoot = ( meta === undefined || typeof meta === 'string' );\\n\\n\\t\\tif ( isRoot ) {\\n\\n\\t\\t\\tmeta = {\\n\\t\\t\\t\\ttextures: {},\\n\\t\\t\\t\\timages: {}\\n\\t\\t\\t};\\n\\n\\t\\t}\\n\\n\\t\\tvar data = {\\n\\t\\t\\tmetadata: {\\n\\t\\t\\t\\tversion: 4.5,\\n\\t\\t\\t\\ttype: 'Material',\\n\\t\\t\\t\\tgenerator: 'Material.toJSON'\\n\\t\\t\\t}\\n\\t\\t};\\n\\n\\t\\t// standard Material serialization\\n\\t\\tdata.uuid = this.uuid;\\n\\t\\tdata.type = this.type;\\n\\n\\t\\tif ( this.name !== '' ) data.name = this.name;\\n\\n\\t\\tif ( this.color && this.color.isColor ) data.color = this.color.getHex();\\n\\n\\t\\tif ( this.roughness !== undefined ) data.roughness = this.roughness;\\n\\t\\tif ( this.metalness !== undefined ) data.metalness = this.metalness;\\n\\n\\t\\tif ( this.emissive && this.emissive.isColor ) data.emissive = this.emissive.getHex();\\n\\t\\tif ( this.emissiveIntensity !== 1 ) data.emissiveIntensity = this.emissiveIntensity;\\n\\n\\t\\tif ( this.specular && this.specular.isColor ) data.specular = this.specular.getHex();\\n\\t\\tif ( this.shininess !== undefined ) data.shininess = this.shininess;\\n\\t\\tif ( this.clearCoat !== undefined ) data.clearCoat = this.clearCoat;\\n\\t\\tif ( this.clearCoatRoughness !== undefined ) data.clearCoatRoughness = this.clearCoatRoughness;\\n\\n\\t\\tif ( this.map && this.map.isTexture ) data.map = this.map.toJSON( meta ).uuid;\\n\\t\\tif ( this.alphaMap && this.alphaMap.isTexture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;\\n\\t\\tif ( this.lightMap && this.lightMap.isTexture ) data.lightMap = this.lightMap.toJSON( meta ).uuid;\\n\\n\\t\\tif ( this.aoMap && this.aoMap.isTexture ) {\\n\\n\\t\\t\\tdata.aoMap = this.aoMap.toJSON( meta ).uuid;\\n\\t\\t\\tdata.aoMapIntensity = this.aoMapIntensity;\\n\\n\\t\\t}\\n\\n\\t\\tif ( this.bumpMap && this.bumpMap.isTexture ) {\\n\\n\\t\\t\\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\\n\\t\\t\\tdata.bumpScale = this.bumpScale;\\n\\n\\t\\t}\\n\\n\\t\\tif ( this.normalMap && this.normalMap.isTexture ) {\\n\\n\\t\\t\\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\\n\\t\\t\\tdata.normalMapType = this.normalMapType;\\n\\t\\t\\tdata.normalScale = this.normalScale.toArray();\\n\\n\\t\\t}\\n\\n\\t\\tif ( this.displacementMap && this.displacementMap.isTexture ) {\\n\\n\\t\\t\\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\\n\\t\\t\\tdata.displacementScale = this.displacementScale;\\n\\t\\t\\tdata.displacementBias = this.displacementBias;\\n\\n\\t\\t}\\n\\n\\t\\tif ( this.roughnessMap && this.roughnessMap.isTexture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;\\n\\t\\tif ( this.metalnessMap && this.metalnessMap.isTexture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;\\n\\n\\t\\tif ( this.emissiveMap && this.emissiveMap.isTexture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;\\n\\t\\tif ( this.specularMap && this.specularMap.isTexture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;\\n\\n\\t\\tif ( this.envMap && this.envMap.isTexture ) {\\n\\n\\t\\t\\tdata.envMap = this.envMap.toJSON( meta ).uuid;\\n\\t\\t\\tdata.reflectivity = this.reflectivity; // Scale behind envMap\\n\\n\\t\\t\\tif ( this.combine !== undefined ) data.combine = this.combine;\\n\\t\\t\\tif ( this.envMapIntensity !== undefined ) data.envMapIntensity = this.envMapIntensity;\\n\\n\\t\\t}\\n\\n\\t\\tif ( this.gradientMap && this.gradientMap.isTexture ) {\\n\\n\\t\\t\\tdata.gradientMap = this.gradientMap.toJSON( meta ).uuid;\\n\\n\\t\\t}\\n\\n\\t\\tif ( this.size !== undefined ) data.size = this.size;\\n\\t\\tif ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;\\n\\n\\t\\tif ( this.blending !== NormalBlending ) data.blending = this.blending;\\n\\t\\tif ( this.flatShading === true ) data.flatShading = this.flatShading;\\n\\t\\tif ( this.side !== FrontSide ) data.side = this.side;\\n\\t\\tif ( this.vertexColors !== NoColors ) data.vertexColors = this.vertexColors;\\n\\n\\t\\tif ( this.opacity < 1 ) data.opacity = this.opacity;\\n\\t\\tif ( this.transparent === true ) data.transparent = this.transparent;\\n\\n\\t\\tdata.depthFunc = this.depthFunc;\\n\\t\\tdata.depthTest = this.depthTest;\\n\\t\\tdata.depthWrite = this.depthWrite;\\n\\n\\t\\t// rotation (SpriteMaterial)\\n\\t\\tif ( this.rotation !== 0 ) data.rotation = this.rotation;\\n\\n\\t\\tif ( this.polygonOffset === true ) data.polygonOffset = true;\\n\\t\\tif ( this.polygonOffsetFactor !== 0 ) data.polygonOffsetFactor = this.polygonOffsetFactor;\\n\\t\\tif ( this.polygonOffsetUnits !== 0 ) data.polygonOffsetUnits = this.polygonOffsetUnits;\\n\\n\\t\\tif ( this.linewidth !== 1 ) data.linewidth = this.linewidth;\\n\\t\\tif ( this.dashSize !== undefined ) data.dashSize = this.dashSize;\\n\\t\\tif ( this.gapSize !== undefined ) data.gapSize = this.gapSize;\\n\\t\\tif ( this.scale !== undefined ) data.scale = this.scale;\\n\\n\\t\\tif ( this.dithering === true ) data.dithering = true;\\n\\n\\t\\tif ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;\\n\\t\\tif ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;\\n\\n\\t\\tif ( this.wireframe === true ) data.wireframe = this.wireframe;\\n\\t\\tif ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;\\n\\t\\tif ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;\\n\\t\\tif ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;\\n\\n\\t\\tif ( this.morphTargets === true ) data.morphTargets = true;\\n\\t\\tif ( this.skinning === true ) data.skinning = true;\\n\\n\\t\\tif ( this.visible === false ) data.visible = false;\\n\\t\\tif ( JSON.stringify( this.userData ) !== '{}' ) data.userData = this.userData;\\n\\n\\t\\t// TODO: Copied from Object3D.toJSON\\n\\n\\t\\tfunction extractFromCache( cache ) {\\n\\n\\t\\t\\tvar values = [];\\n\\n\\t\\t\\tfor ( var key in cache ) {\\n\\n\\t\\t\\t\\tvar data = cache[ key ];\\n\\t\\t\\t\\tdelete data.metadata;\\n\\t\\t\\t\\tvalues.push( data );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn values;\\n\\n\\t\\t}\\n\\n\\t\\tif ( isRoot ) {\\n\\n\\t\\t\\tvar textures = extractFromCache( meta.textures );\\n\\t\\t\\tvar images = extractFromCache( meta.images );\\n\\n\\t\\t\\tif ( textures.length > 0 ) data.textures = textures;\\n\\t\\t\\tif ( images.length > 0 ) data.images = images;\\n\\n\\t\\t}\\n\\n\\t\\treturn data;\\n\\n\\t},\\n\\n\\tclone: function () {\\n\\n\\t\\treturn new this.constructor().copy( this );\\n\\n\\t},\\n\\n\\tcopy: function ( source ) {\\n\\n\\t\\tthis.name = source.name;\\n\\n\\t\\tthis.fog = source.fog;\\n\\t\\tthis.lights = source.lights;\\n\\n\\t\\tthis.blending = source.blending;\\n\\t\\tthis.side = source.side;\\n\\t\\tthis.flatShading = source.flatShading;\\n\\t\\tthis.vertexColors = source.vertexColors;\\n\\n\\t\\tthis.opacity = source.opacity;\\n\\t\\tthis.transparent = source.transparent;\\n\\n\\t\\tthis.blendSrc = source.blendSrc;\\n\\t\\tthis.blendDst = source.blendDst;\\n\\t\\tthis.blendEquation = source.blendEquation;\\n\\t\\tthis.blendSrcAlpha = source.blendSrcAlpha;\\n\\t\\tthis.blendDstAlpha = source.blendDstAlpha;\\n\\t\\tthis.blendEquationAlpha = source.blendEquationAlpha;\\n\\n\\t\\tthis.depthFunc = source.depthFunc;\\n\\t\\tthis.depthTest = source.depthTest;\\n\\t\\tthis.depthWrite = source.depthWrite;\\n\\n\\t\\tthis.colorWrite = source.colorWrite;\\n\\n\\t\\tthis.precision = source.precision;\\n\\n\\t\\tthis.polygonOffset = source.polygonOffset;\\n\\t\\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\\n\\t\\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\\n\\n\\t\\tthis.dithering = source.dithering;\\n\\n\\t\\tthis.alphaTest = source.alphaTest;\\n\\t\\tthis.premultipliedAlpha = source.premultipliedAlpha;\\n\\n\\t\\tthis.visible = source.visible;\\n\\t\\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\\n\\n\\t\\tthis.clipShadows = source.clipShadows;\\n\\t\\tthis.clipIntersection = source.clipIntersection;\\n\\n\\t\\tvar srcPlanes = source.clippingPlanes,\\n\\t\\t\\tdstPlanes = null;\\n\\n\\t\\tif ( srcPlanes !== null ) {\\n\\n\\t\\t\\tvar n = srcPlanes.length;\\n\\t\\t\\tdstPlanes = new Array( n );\\n\\n\\t\\t\\tfor ( var i = 0; i !== n; ++ i )\\n\\t\\t\\t\\tdstPlanes[ i ] = srcPlanes[ i ].clone();\\n\\n\\t\\t}\\n\\n\\t\\tthis.clippingPlanes = dstPlanes;\\n\\n\\t\\tthis.shadowSide = source.shadowSide;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tdispose: function () {\\n\\n\\t\\tthis.dispatchEvent( { type: 'dispose' } );\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author alteredq / http://alteredqualia.com/\\n *\\n * parameters = {\\n *  defines: { \\\"label\\\" : \\\"value\\\" },\\n *  uniforms: { \\\"parameter1\\\": { value: 1.0 }, \\\"parameter2\\\": { value2: 2 } },\\n *\\n *  fragmentShader: <string>,\\n *  vertexShader: <string>,\\n *\\n *  wireframe: <boolean>,\\n *  wireframeLinewidth: <float>,\\n *\\n *  lights: <bool>,\\n *\\n *  skinning: <bool>,\\n *  morphTargets: <bool>,\\n *  morphNormals: <bool>\\n * }\\n */\\n\\nfunction ShaderMaterial( parameters ) {\\n\\n\\tMaterial.call( this );\\n\\n\\tthis.type = 'ShaderMaterial';\\n\\n\\tthis.defines = {};\\n\\tthis.uniforms = {};\\n\\n\\tthis.vertexShader = 'void main() {\\\\n\\\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\\\n}';\\n\\tthis.fragmentShader = 'void main() {\\\\n\\\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\\\n}';\\n\\n\\tthis.linewidth = 1;\\n\\n\\tthis.wireframe = false;\\n\\tthis.wireframeLinewidth = 1;\\n\\n\\tthis.fog = false; // set to use scene fog\\n\\tthis.lights = false; // set to use scene lights\\n\\tthis.clipping = false; // set to use user-defined clipping planes\\n\\n\\tthis.skinning = false; // set to use skinning attribute streams\\n\\tthis.morphTargets = false; // set to use morph targets\\n\\tthis.morphNormals = false; // set to use morph normals\\n\\n\\tthis.extensions = {\\n\\t\\tderivatives: false, // set to use derivatives\\n\\t\\tfragDepth: false, // set to use fragment depth values\\n\\t\\tdrawBuffers: false, // set to use draw buffers\\n\\t\\tshaderTextureLOD: false // set to use shader texture LOD\\n\\t};\\n\\n\\t// When rendered geometry doesn't include these attributes but the material does,\\n\\t// use these default values in WebGL. This avoids errors when buffer data is missing.\\n\\tthis.defaultAttributeValues = {\\n\\t\\t'color': [ 1, 1, 1 ],\\n\\t\\t'uv': [ 0, 0 ],\\n\\t\\t'uv2': [ 0, 0 ]\\n\\t};\\n\\n\\tthis.index0AttributeName = undefined;\\n\\tthis.uniformsNeedUpdate = false;\\n\\n\\tif ( parameters !== undefined ) {\\n\\n\\t\\tif ( parameters.attributes !== undefined ) {\\n\\n\\t\\t\\tconsole.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );\\n\\n\\t\\t}\\n\\n\\t\\tthis.setValues( parameters );\\n\\n\\t}\\n\\n}\\n\\nShaderMaterial.prototype = Object.create( Material.prototype );\\nShaderMaterial.prototype.constructor = ShaderMaterial;\\n\\nShaderMaterial.prototype.isShaderMaterial = true;\\n\\nShaderMaterial.prototype.copy = function ( source ) {\\n\\n\\tMaterial.prototype.copy.call( this, source );\\n\\n\\tthis.fragmentShader = source.fragmentShader;\\n\\tthis.vertexShader = source.vertexShader;\\n\\n\\tthis.uniforms = cloneUniforms( source.uniforms );\\n\\n\\tthis.defines = Object.assign( {}, source.defines );\\n\\n\\tthis.wireframe = source.wireframe;\\n\\tthis.wireframeLinewidth = source.wireframeLinewidth;\\n\\n\\tthis.lights = source.lights;\\n\\tthis.clipping = source.clipping;\\n\\n\\tthis.skinning = source.skinning;\\n\\n\\tthis.morphTargets = source.morphTargets;\\n\\tthis.morphNormals = source.morphNormals;\\n\\n\\tthis.extensions = source.extensions;\\n\\n\\treturn this;\\n\\n};\\n\\nShaderMaterial.prototype.toJSON = function ( meta ) {\\n\\n\\tvar data = Material.prototype.toJSON.call( this, meta );\\n\\n\\tdata.uniforms = {};\\n\\n\\tfor ( var name in this.uniforms ) {\\n\\n\\t\\tvar uniform = this.uniforms[ name ];\\n\\t\\tvar value = uniform.value;\\n\\n\\t\\tif ( value && value.isTexture ) {\\n\\n\\t\\t\\tdata.uniforms[ name ] = {\\n\\t\\t\\t\\ttype: 't',\\n\\t\\t\\t\\tvalue: value.toJSON( meta ).uuid\\n\\t\\t\\t};\\n\\n\\t\\t} else if ( value && value.isColor ) {\\n\\n\\t\\t\\tdata.uniforms[ name ] = {\\n\\t\\t\\t\\ttype: 'c',\\n\\t\\t\\t\\tvalue: value.getHex()\\n\\t\\t\\t};\\n\\n\\t\\t} else if ( value && value.isVector2 ) {\\n\\n\\t\\t\\tdata.uniforms[ name ] = {\\n\\t\\t\\t\\ttype: 'v2',\\n\\t\\t\\t\\tvalue: value.toArray()\\n\\t\\t\\t};\\n\\n\\t\\t} else if ( value && value.isVector3 ) {\\n\\n\\t\\t\\tdata.uniforms[ name ] = {\\n\\t\\t\\t\\ttype: 'v3',\\n\\t\\t\\t\\tvalue: value.toArray()\\n\\t\\t\\t};\\n\\n\\t\\t} else if ( value && value.isVector4 ) {\\n\\n\\t\\t\\tdata.uniforms[ name ] = {\\n\\t\\t\\t\\ttype: 'v4',\\n\\t\\t\\t\\tvalue: value.toArray()\\n\\t\\t\\t};\\n\\n\\t\\t} else if ( value && value.isMatrix3 ) {\\n\\n\\t\\t\\tdata.uniforms[ name ] = {\\n\\t\\t\\t\\ttype: 'm3',\\n\\t\\t\\t\\tvalue: value.toArray()\\n\\t\\t\\t};\\n\\n\\t\\t} else if ( value && value.isMatrix4 ) {\\n\\n\\t\\t\\tdata.uniforms[ name ] = {\\n\\t\\t\\t\\ttype: 'm4',\\n\\t\\t\\t\\tvalue: value.toArray()\\n\\t\\t\\t};\\n\\n\\t\\t} else {\\n\\n\\t\\t\\tdata.uniforms[ name ] = {\\n\\t\\t\\t\\tvalue: value\\n\\t\\t\\t};\\n\\n\\t\\t\\t// note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tif ( Object.keys( this.defines ).length > 0 ) data.defines = this.defines;\\n\\n\\tdata.vertexShader = this.vertexShader;\\n\\tdata.fragmentShader = this.fragmentShader;\\n\\n\\tvar extensions = {};\\n\\n\\tfor ( var key in this.extensions ) {\\n\\n\\t\\tif ( this.extensions[ key ] === true ) extensions[ key ] = true;\\n\\n\\t}\\n\\n\\tif ( Object.keys( extensions ).length > 0 ) data.extensions = extensions;\\n\\n\\treturn data;\\n\\n};\\n\\n/**\\n * @author bhouston / http://clara.io\\n */\\n\\nfunction Ray( origin, direction ) {\\n\\n\\tthis.origin = ( origin !== undefined ) ? origin : new Vector3();\\n\\tthis.direction = ( direction !== undefined ) ? direction : new Vector3();\\n\\n}\\n\\nObject.assign( Ray.prototype, {\\n\\n\\tset: function ( origin, direction ) {\\n\\n\\t\\tthis.origin.copy( origin );\\n\\t\\tthis.direction.copy( direction );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tclone: function () {\\n\\n\\t\\treturn new this.constructor().copy( this );\\n\\n\\t},\\n\\n\\tcopy: function ( ray ) {\\n\\n\\t\\tthis.origin.copy( ray.origin );\\n\\t\\tthis.direction.copy( ray.direction );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tat: function ( t, target ) {\\n\\n\\t\\tif ( target === undefined ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Ray: .at() target is now required' );\\n\\t\\t\\ttarget = new Vector3();\\n\\n\\t\\t}\\n\\n\\t\\treturn target.copy( this.direction ).multiplyScalar( t ).add( this.origin );\\n\\n\\t},\\n\\n\\tlookAt: function ( v ) {\\n\\n\\t\\tthis.direction.copy( v ).sub( this.origin ).normalize();\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\trecast: function () {\\n\\n\\t\\tvar v1 = new Vector3();\\n\\n\\t\\treturn function recast( t ) {\\n\\n\\t\\t\\tthis.origin.copy( this.at( t, v1 ) );\\n\\n\\t\\t\\treturn this;\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\tclosestPointToPoint: function ( point, target ) {\\n\\n\\t\\tif ( target === undefined ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Ray: .closestPointToPoint() target is now required' );\\n\\t\\t\\ttarget = new Vector3();\\n\\n\\t\\t}\\n\\n\\t\\ttarget.subVectors( point, this.origin );\\n\\n\\t\\tvar directionDistance = target.dot( this.direction );\\n\\n\\t\\tif ( directionDistance < 0 ) {\\n\\n\\t\\t\\treturn target.copy( this.origin );\\n\\n\\t\\t}\\n\\n\\t\\treturn target.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\\n\\n\\t},\\n\\n\\tdistanceToPoint: function ( point ) {\\n\\n\\t\\treturn Math.sqrt( this.distanceSqToPoint( point ) );\\n\\n\\t},\\n\\n\\tdistanceSqToPoint: function () {\\n\\n\\t\\tvar v1 = new Vector3();\\n\\n\\t\\treturn function distanceSqToPoint( point ) {\\n\\n\\t\\t\\tvar directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );\\n\\n\\t\\t\\t// point behind the ray\\n\\n\\t\\t\\tif ( directionDistance < 0 ) {\\n\\n\\t\\t\\t\\treturn this.origin.distanceToSquared( point );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tv1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\\n\\n\\t\\t\\treturn v1.distanceToSquared( point );\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\tdistanceSqToSegment: function () {\\n\\n\\t\\tvar segCenter = new Vector3();\\n\\t\\tvar segDir = new Vector3();\\n\\t\\tvar diff = new Vector3();\\n\\n\\t\\treturn function distanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\\n\\n\\t\\t\\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\\n\\t\\t\\t// It returns the min distance between the ray and the segment\\n\\t\\t\\t// defined by v0 and v1\\n\\t\\t\\t// It can also set two optional targets :\\n\\t\\t\\t// - The closest point on the ray\\n\\t\\t\\t// - The closest point on the segment\\n\\n\\t\\t\\tsegCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\\n\\t\\t\\tsegDir.copy( v1 ).sub( v0 ).normalize();\\n\\t\\t\\tdiff.copy( this.origin ).sub( segCenter );\\n\\n\\t\\t\\tvar segExtent = v0.distanceTo( v1 ) * 0.5;\\n\\t\\t\\tvar a01 = - this.direction.dot( segDir );\\n\\t\\t\\tvar b0 = diff.dot( this.direction );\\n\\t\\t\\tvar b1 = - diff.dot( segDir );\\n\\t\\t\\tvar c = diff.lengthSq();\\n\\t\\t\\tvar det = Math.abs( 1 - a01 * a01 );\\n\\t\\t\\tvar s0, s1, sqrDist, extDet;\\n\\n\\t\\t\\tif ( det > 0 ) {\\n\\n\\t\\t\\t\\t// The ray and segment are not parallel.\\n\\n\\t\\t\\t\\ts0 = a01 * b1 - b0;\\n\\t\\t\\t\\ts1 = a01 * b0 - b1;\\n\\t\\t\\t\\textDet = segExtent * det;\\n\\n\\t\\t\\t\\tif ( s0 >= 0 ) {\\n\\n\\t\\t\\t\\t\\tif ( s1 >= - extDet ) {\\n\\n\\t\\t\\t\\t\\t\\tif ( s1 <= extDet ) {\\n\\n\\t\\t\\t\\t\\t\\t\\t// region 0\\n\\t\\t\\t\\t\\t\\t\\t// Minimum at interior points of ray and segment.\\n\\n\\t\\t\\t\\t\\t\\t\\tvar invDet = 1 / det;\\n\\t\\t\\t\\t\\t\\t\\ts0 *= invDet;\\n\\t\\t\\t\\t\\t\\t\\ts1 *= invDet;\\n\\t\\t\\t\\t\\t\\t\\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\\n\\n\\t\\t\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\t\\t\\t// region 1\\n\\n\\t\\t\\t\\t\\t\\t\\ts1 = segExtent;\\n\\t\\t\\t\\t\\t\\t\\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\\n\\t\\t\\t\\t\\t\\t\\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\\n\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\t\\t// region 5\\n\\n\\t\\t\\t\\t\\t\\ts1 = - segExtent;\\n\\t\\t\\t\\t\\t\\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\\n\\t\\t\\t\\t\\t\\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\tif ( s1 <= - extDet ) {\\n\\n\\t\\t\\t\\t\\t\\t// region 4\\n\\n\\t\\t\\t\\t\\t\\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\\n\\t\\t\\t\\t\\t\\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\\n\\t\\t\\t\\t\\t\\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\\n\\n\\t\\t\\t\\t\\t} else if ( s1 <= extDet ) {\\n\\n\\t\\t\\t\\t\\t\\t// region 3\\n\\n\\t\\t\\t\\t\\t\\ts0 = 0;\\n\\t\\t\\t\\t\\t\\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\\n\\t\\t\\t\\t\\t\\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\\n\\n\\t\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\t\\t// region 2\\n\\n\\t\\t\\t\\t\\t\\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\\n\\t\\t\\t\\t\\t\\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\\n\\t\\t\\t\\t\\t\\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t// Ray and segment are parallel.\\n\\n\\t\\t\\t\\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\\n\\t\\t\\t\\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\\n\\t\\t\\t\\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( optionalPointOnRay ) {\\n\\n\\t\\t\\t\\toptionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( optionalPointOnSegment ) {\\n\\n\\t\\t\\t\\toptionalPointOnSegment.copy( segDir ).multiplyScalar( s1 ).add( segCenter );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn sqrDist;\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\tintersectSphere: function () {\\n\\n\\t\\tvar v1 = new Vector3();\\n\\n\\t\\treturn function intersectSphere( sphere, target ) {\\n\\n\\t\\t\\tv1.subVectors( sphere.center, this.origin );\\n\\t\\t\\tvar tca = v1.dot( this.direction );\\n\\t\\t\\tvar d2 = v1.dot( v1 ) - tca * tca;\\n\\t\\t\\tvar radius2 = sphere.radius * sphere.radius;\\n\\n\\t\\t\\tif ( d2 > radius2 ) return null;\\n\\n\\t\\t\\tvar thc = Math.sqrt( radius2 - d2 );\\n\\n\\t\\t\\t// t0 = first intersect point - entrance on front of sphere\\n\\t\\t\\tvar t0 = tca - thc;\\n\\n\\t\\t\\t// t1 = second intersect point - exit point on back of sphere\\n\\t\\t\\tvar t1 = tca + thc;\\n\\n\\t\\t\\t// test to see if both t0 and t1 are behind the ray - if so, return null\\n\\t\\t\\tif ( t0 < 0 && t1 < 0 ) return null;\\n\\n\\t\\t\\t// test to see if t0 is behind the ray:\\n\\t\\t\\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\\n\\t\\t\\t// in order to always return an intersect point that is in front of the ray.\\n\\t\\t\\tif ( t0 < 0 ) return this.at( t1, target );\\n\\n\\t\\t\\t// else t0 is in front of the ray, so return the first collision point scaled by t0\\n\\t\\t\\treturn this.at( t0, target );\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\tintersectsSphere: function ( sphere ) {\\n\\n\\t\\treturn this.distanceSqToPoint( sphere.center ) <= ( sphere.radius * sphere.radius );\\n\\n\\t},\\n\\n\\tdistanceToPlane: function ( plane ) {\\n\\n\\t\\tvar denominator = plane.normal.dot( this.direction );\\n\\n\\t\\tif ( denominator === 0 ) {\\n\\n\\t\\t\\t// line is coplanar, return origin\\n\\t\\t\\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\\n\\n\\t\\t\\t\\treturn 0;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Null is preferable to undefined since undefined means.... it is undefined\\n\\n\\t\\t\\treturn null;\\n\\n\\t\\t}\\n\\n\\t\\tvar t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\\n\\n\\t\\t// Return if the ray never intersects the plane\\n\\n\\t\\treturn t >= 0 ? t : null;\\n\\n\\t},\\n\\n\\tintersectPlane: function ( plane, target ) {\\n\\n\\t\\tvar t = this.distanceToPlane( plane );\\n\\n\\t\\tif ( t === null ) {\\n\\n\\t\\t\\treturn null;\\n\\n\\t\\t}\\n\\n\\t\\treturn this.at( t, target );\\n\\n\\t},\\n\\n\\tintersectsPlane: function ( plane ) {\\n\\n\\t\\t// check if the ray lies on the plane first\\n\\n\\t\\tvar distToPoint = plane.distanceToPoint( this.origin );\\n\\n\\t\\tif ( distToPoint === 0 ) {\\n\\n\\t\\t\\treturn true;\\n\\n\\t\\t}\\n\\n\\t\\tvar denominator = plane.normal.dot( this.direction );\\n\\n\\t\\tif ( denominator * distToPoint < 0 ) {\\n\\n\\t\\t\\treturn true;\\n\\n\\t\\t}\\n\\n\\t\\t// ray origin is behind the plane (and is pointing behind it)\\n\\n\\t\\treturn false;\\n\\n\\t},\\n\\n\\tintersectBox: function ( box, target ) {\\n\\n\\t\\tvar tmin, tmax, tymin, tymax, tzmin, tzmax;\\n\\n\\t\\tvar invdirx = 1 / this.direction.x,\\n\\t\\t\\tinvdiry = 1 / this.direction.y,\\n\\t\\t\\tinvdirz = 1 / this.direction.z;\\n\\n\\t\\tvar origin = this.origin;\\n\\n\\t\\tif ( invdirx >= 0 ) {\\n\\n\\t\\t\\ttmin = ( box.min.x - origin.x ) * invdirx;\\n\\t\\t\\ttmax = ( box.max.x - origin.x ) * invdirx;\\n\\n\\t\\t} else {\\n\\n\\t\\t\\ttmin = ( box.max.x - origin.x ) * invdirx;\\n\\t\\t\\ttmax = ( box.min.x - origin.x ) * invdirx;\\n\\n\\t\\t}\\n\\n\\t\\tif ( invdiry >= 0 ) {\\n\\n\\t\\t\\ttymin = ( box.min.y - origin.y ) * invdiry;\\n\\t\\t\\ttymax = ( box.max.y - origin.y ) * invdiry;\\n\\n\\t\\t} else {\\n\\n\\t\\t\\ttymin = ( box.max.y - origin.y ) * invdiry;\\n\\t\\t\\ttymax = ( box.min.y - origin.y ) * invdiry;\\n\\n\\t\\t}\\n\\n\\t\\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;\\n\\n\\t\\t// These lines also handle the case where tmin or tmax is NaN\\n\\t\\t// (result of 0 * Infinity). x !== x returns true if x is NaN\\n\\n\\t\\tif ( tymin > tmin || tmin !== tmin ) tmin = tymin;\\n\\n\\t\\tif ( tymax < tmax || tmax !== tmax ) tmax = tymax;\\n\\n\\t\\tif ( invdirz >= 0 ) {\\n\\n\\t\\t\\ttzmin = ( box.min.z - origin.z ) * invdirz;\\n\\t\\t\\ttzmax = ( box.max.z - origin.z ) * invdirz;\\n\\n\\t\\t} else {\\n\\n\\t\\t\\ttzmin = ( box.max.z - origin.z ) * invdirz;\\n\\t\\t\\ttzmax = ( box.min.z - origin.z ) * invdirz;\\n\\n\\t\\t}\\n\\n\\t\\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;\\n\\n\\t\\tif ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;\\n\\n\\t\\tif ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;\\n\\n\\t\\t//return point closest to the ray (positive side)\\n\\n\\t\\tif ( tmax < 0 ) return null;\\n\\n\\t\\treturn this.at( tmin >= 0 ? tmin : tmax, target );\\n\\n\\t},\\n\\n\\tintersectsBox: ( function () {\\n\\n\\t\\tvar v = new Vector3();\\n\\n\\t\\treturn function intersectsBox( box ) {\\n\\n\\t\\t\\treturn this.intersectBox( box, v ) !== null;\\n\\n\\t\\t};\\n\\n\\t} )(),\\n\\n\\tintersectTriangle: function () {\\n\\n\\t\\t// Compute the offset origin, edges, and normal.\\n\\t\\tvar diff = new Vector3();\\n\\t\\tvar edge1 = new Vector3();\\n\\t\\tvar edge2 = new Vector3();\\n\\t\\tvar normal = new Vector3();\\n\\n\\t\\treturn function intersectTriangle( a, b, c, backfaceCulling, target ) {\\n\\n\\t\\t\\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\\n\\n\\t\\t\\tedge1.subVectors( b, a );\\n\\t\\t\\tedge2.subVectors( c, a );\\n\\t\\t\\tnormal.crossVectors( edge1, edge2 );\\n\\n\\t\\t\\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\\n\\t\\t\\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\\n\\t\\t\\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\\n\\t\\t\\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\\n\\t\\t\\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\\n\\t\\t\\tvar DdN = this.direction.dot( normal );\\n\\t\\t\\tvar sign;\\n\\n\\t\\t\\tif ( DdN > 0 ) {\\n\\n\\t\\t\\t\\tif ( backfaceCulling ) return null;\\n\\t\\t\\t\\tsign = 1;\\n\\n\\t\\t\\t} else if ( DdN < 0 ) {\\n\\n\\t\\t\\t\\tsign = - 1;\\n\\t\\t\\t\\tDdN = - DdN;\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\treturn null;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tdiff.subVectors( this.origin, a );\\n\\t\\t\\tvar DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );\\n\\n\\t\\t\\t// b1 < 0, no intersection\\n\\t\\t\\tif ( DdQxE2 < 0 ) {\\n\\n\\t\\t\\t\\treturn null;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tvar DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );\\n\\n\\t\\t\\t// b2 < 0, no intersection\\n\\t\\t\\tif ( DdE1xQ < 0 ) {\\n\\n\\t\\t\\t\\treturn null;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\t// b1+b2 > 1, no intersection\\n\\t\\t\\tif ( DdQxE2 + DdE1xQ > DdN ) {\\n\\n\\t\\t\\t\\treturn null;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Line intersects triangle, check if ray does.\\n\\t\\t\\tvar QdN = - sign * diff.dot( normal );\\n\\n\\t\\t\\t// t < 0, no intersection\\n\\t\\t\\tif ( QdN < 0 ) {\\n\\n\\t\\t\\t\\treturn null;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Ray intersects triangle.\\n\\t\\t\\treturn this.at( QdN / DdN, target );\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\tapplyMatrix4: function ( matrix4 ) {\\n\\n\\t\\tthis.origin.applyMatrix4( matrix4 );\\n\\t\\tthis.direction.transformDirection( matrix4 );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tequals: function ( ray ) {\\n\\n\\t\\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author bhouston / http://clara.io\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\nfunction Triangle( a, b, c ) {\\n\\n\\tthis.a = ( a !== undefined ) ? a : new Vector3();\\n\\tthis.b = ( b !== undefined ) ? b : new Vector3();\\n\\tthis.c = ( c !== undefined ) ? c : new Vector3();\\n\\n}\\n\\nObject.assign( Triangle, {\\n\\n\\tgetNormal: function () {\\n\\n\\t\\tvar v0 = new Vector3();\\n\\n\\t\\treturn function getNormal( a, b, c, target ) {\\n\\n\\t\\t\\tif ( target === undefined ) {\\n\\n\\t\\t\\t\\tconsole.warn( 'THREE.Triangle: .getNormal() target is now required' );\\n\\t\\t\\t\\ttarget = new Vector3();\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\ttarget.subVectors( c, b );\\n\\t\\t\\tv0.subVectors( a, b );\\n\\t\\t\\ttarget.cross( v0 );\\n\\n\\t\\t\\tvar targetLengthSq = target.lengthSq();\\n\\t\\t\\tif ( targetLengthSq > 0 ) {\\n\\n\\t\\t\\t\\treturn target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn target.set( 0, 0, 0 );\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\t// static/instance method to calculate barycentric coordinates\\n\\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\\n\\tgetBarycoord: function () {\\n\\n\\t\\tvar v0 = new Vector3();\\n\\t\\tvar v1 = new Vector3();\\n\\t\\tvar v2 = new Vector3();\\n\\n\\t\\treturn function getBarycoord( point, a, b, c, target ) {\\n\\n\\t\\t\\tv0.subVectors( c, a );\\n\\t\\t\\tv1.subVectors( b, a );\\n\\t\\t\\tv2.subVectors( point, a );\\n\\n\\t\\t\\tvar dot00 = v0.dot( v0 );\\n\\t\\t\\tvar dot01 = v0.dot( v1 );\\n\\t\\t\\tvar dot02 = v0.dot( v2 );\\n\\t\\t\\tvar dot11 = v1.dot( v1 );\\n\\t\\t\\tvar dot12 = v1.dot( v2 );\\n\\n\\t\\t\\tvar denom = ( dot00 * dot11 - dot01 * dot01 );\\n\\n\\t\\t\\tif ( target === undefined ) {\\n\\n\\t\\t\\t\\tconsole.warn( 'THREE.Triangle: .getBarycoord() target is now required' );\\n\\t\\t\\t\\ttarget = new Vector3();\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\t// collinear or singular triangle\\n\\t\\t\\tif ( denom === 0 ) {\\n\\n\\t\\t\\t\\t// arbitrary location outside of triangle?\\n\\t\\t\\t\\t// not sure if this is the best idea, maybe should be returning undefined\\n\\t\\t\\t\\treturn target.set( - 2, - 1, - 1 );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tvar invDenom = 1 / denom;\\n\\t\\t\\tvar u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\\n\\t\\t\\tvar v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\\n\\n\\t\\t\\t// barycentric coordinates must always sum to 1\\n\\t\\t\\treturn target.set( 1 - u - v, v, u );\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\tcontainsPoint: function () {\\n\\n\\t\\tvar v1 = new Vector3();\\n\\n\\t\\treturn function containsPoint( point, a, b, c ) {\\n\\n\\t\\t\\tTriangle.getBarycoord( point, a, b, c, v1 );\\n\\n\\t\\t\\treturn ( v1.x >= 0 ) && ( v1.y >= 0 ) && ( ( v1.x + v1.y ) <= 1 );\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\tgetUV: function () {\\n\\n\\t\\tvar barycoord = new Vector3();\\n\\n\\t\\treturn function getUV( point, p1, p2, p3, uv1, uv2, uv3, target ) {\\n\\n\\t\\t\\tthis.getBarycoord( point, p1, p2, p3, barycoord );\\n\\n\\t\\t\\ttarget.set( 0, 0 );\\n\\t\\t\\ttarget.addScaledVector( uv1, barycoord.x );\\n\\t\\t\\ttarget.addScaledVector( uv2, barycoord.y );\\n\\t\\t\\ttarget.addScaledVector( uv3, barycoord.z );\\n\\n\\t\\t\\treturn target;\\n\\n\\t\\t};\\n\\n\\t}()\\n\\n} );\\n\\nObject.assign( Triangle.prototype, {\\n\\n\\tset: function ( a, b, c ) {\\n\\n\\t\\tthis.a.copy( a );\\n\\t\\tthis.b.copy( b );\\n\\t\\tthis.c.copy( c );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetFromPointsAndIndices: function ( points, i0, i1, i2 ) {\\n\\n\\t\\tthis.a.copy( points[ i0 ] );\\n\\t\\tthis.b.copy( points[ i1 ] );\\n\\t\\tthis.c.copy( points[ i2 ] );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tclone: function () {\\n\\n\\t\\treturn new this.constructor().copy( this );\\n\\n\\t},\\n\\n\\tcopy: function ( triangle ) {\\n\\n\\t\\tthis.a.copy( triangle.a );\\n\\t\\tthis.b.copy( triangle.b );\\n\\t\\tthis.c.copy( triangle.c );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tgetArea: function () {\\n\\n\\t\\tvar v0 = new Vector3();\\n\\t\\tvar v1 = new Vector3();\\n\\n\\t\\treturn function getArea() {\\n\\n\\t\\t\\tv0.subVectors( this.c, this.b );\\n\\t\\t\\tv1.subVectors( this.a, this.b );\\n\\n\\t\\t\\treturn v0.cross( v1 ).length() * 0.5;\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\tgetMidpoint: function ( target ) {\\n\\n\\t\\tif ( target === undefined ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Triangle: .getMidpoint() target is now required' );\\n\\t\\t\\ttarget = new Vector3();\\n\\n\\t\\t}\\n\\n\\t\\treturn target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\\n\\n\\t},\\n\\n\\tgetNormal: function ( target ) {\\n\\n\\t\\treturn Triangle.getNormal( this.a, this.b, this.c, target );\\n\\n\\t},\\n\\n\\tgetPlane: function ( target ) {\\n\\n\\t\\tif ( target === undefined ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Triangle: .getPlane() target is now required' );\\n\\t\\t\\ttarget = new Vector3();\\n\\n\\t\\t}\\n\\n\\t\\treturn target.setFromCoplanarPoints( this.a, this.b, this.c );\\n\\n\\t},\\n\\n\\tgetBarycoord: function ( point, target ) {\\n\\n\\t\\treturn Triangle.getBarycoord( point, this.a, this.b, this.c, target );\\n\\n\\t},\\n\\n\\tcontainsPoint: function ( point ) {\\n\\n\\t\\treturn Triangle.containsPoint( point, this.a, this.b, this.c );\\n\\n\\t},\\n\\n\\tgetUV: function ( point, uv1, uv2, uv3, result ) {\\n\\n\\t\\treturn Triangle.getUV( point, this.a, this.b, this.c, uv1, uv2, uv3, result );\\n\\n\\t},\\n\\n\\tintersectsBox: function ( box ) {\\n\\n\\t\\treturn box.intersectsTriangle( this );\\n\\n\\t},\\n\\n\\tclosestPointToPoint: function () {\\n\\n\\t\\tvar vab = new Vector3();\\n\\t\\tvar vac = new Vector3();\\n\\t\\tvar vbc = new Vector3();\\n\\t\\tvar vap = new Vector3();\\n\\t\\tvar vbp = new Vector3();\\n\\t\\tvar vcp = new Vector3();\\n\\n\\t\\treturn function closestPointToPoint( p, target ) {\\n\\n\\t\\t\\tif ( target === undefined ) {\\n\\n\\t\\t\\t\\tconsole.warn( 'THREE.Triangle: .closestPointToPoint() target is now required' );\\n\\t\\t\\t\\ttarget = new Vector3();\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tvar a = this.a, b = this.b, c = this.c;\\n\\t\\t\\tvar v, w;\\n\\n\\t\\t\\t// algorithm thanks to Real-Time Collision Detection by Christer Ericson,\\n\\t\\t\\t// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\\n\\t\\t\\t// under the accompanying license; see chapter 5.1.5 for detailed explanation.\\n\\t\\t\\t// basically, we're distinguishing which of the voronoi regions of the triangle\\n\\t\\t\\t// the point lies in with the minimum amount of redundant computation.\\n\\n\\t\\t\\tvab.subVectors( b, a );\\n\\t\\t\\tvac.subVectors( c, a );\\n\\t\\t\\tvap.subVectors( p, a );\\n\\t\\t\\tvar d1 = vab.dot( vap );\\n\\t\\t\\tvar d2 = vac.dot( vap );\\n\\t\\t\\tif ( d1 <= 0 && d2 <= 0 ) {\\n\\n\\t\\t\\t\\t// vertex region of A; barycentric coords (1, 0, 0)\\n\\t\\t\\t\\treturn target.copy( a );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tvbp.subVectors( p, b );\\n\\t\\t\\tvar d3 = vab.dot( vbp );\\n\\t\\t\\tvar d4 = vac.dot( vbp );\\n\\t\\t\\tif ( d3 >= 0 && d4 <= d3 ) {\\n\\n\\t\\t\\t\\t// vertex region of B; barycentric coords (0, 1, 0)\\n\\t\\t\\t\\treturn target.copy( b );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tvar vc = d1 * d4 - d3 * d2;\\n\\t\\t\\tif ( vc <= 0 && d1 >= 0 && d3 <= 0 ) {\\n\\n\\t\\t\\t\\tv = d1 / ( d1 - d3 );\\n\\t\\t\\t\\t// edge region of AB; barycentric coords (1-v, v, 0)\\n\\t\\t\\t\\treturn target.copy( a ).addScaledVector( vab, v );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tvcp.subVectors( p, c );\\n\\t\\t\\tvar d5 = vab.dot( vcp );\\n\\t\\t\\tvar d6 = vac.dot( vcp );\\n\\t\\t\\tif ( d6 >= 0 && d5 <= d6 ) {\\n\\n\\t\\t\\t\\t// vertex region of C; barycentric coords (0, 0, 1)\\n\\t\\t\\t\\treturn target.copy( c );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tvar vb = d5 * d2 - d1 * d6;\\n\\t\\t\\tif ( vb <= 0 && d2 >= 0 && d6 <= 0 ) {\\n\\n\\t\\t\\t\\tw = d2 / ( d2 - d6 );\\n\\t\\t\\t\\t// edge region of AC; barycentric coords (1-w, 0, w)\\n\\t\\t\\t\\treturn target.copy( a ).addScaledVector( vac, w );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tvar va = d3 * d6 - d5 * d4;\\n\\t\\t\\tif ( va <= 0 && ( d4 - d3 ) >= 0 && ( d5 - d6 ) >= 0 ) {\\n\\n\\t\\t\\t\\tvbc.subVectors( c, b );\\n\\t\\t\\t\\tw = ( d4 - d3 ) / ( ( d4 - d3 ) + ( d5 - d6 ) );\\n\\t\\t\\t\\t// edge region of BC; barycentric coords (0, 1-w, w)\\n\\t\\t\\t\\treturn target.copy( b ).addScaledVector( vbc, w ); // edge region of BC\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\t// face region\\n\\t\\t\\tvar denom = 1 / ( va + vb + vc );\\n\\t\\t\\t// u = va * denom\\n\\t\\t\\tv = vb * denom;\\n\\t\\t\\tw = vc * denom;\\n\\t\\t\\treturn target.copy( a ).addScaledVector( vab, v ).addScaledVector( vac, w );\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\tequals: function ( triangle ) {\\n\\n\\t\\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n * @author alteredq / http://alteredqualia.com/\\n *\\n * parameters = {\\n *  color: <hex>,\\n *  opacity: <float>,\\n *  map: new THREE.Texture( <Image> ),\\n *\\n *  lightMap: new THREE.Texture( <Image> ),\\n *  lightMapIntensity: <float>\\n *\\n *  aoMap: new THREE.Texture( <Image> ),\\n *  aoMapIntensity: <float>\\n *\\n *  specularMap: new THREE.Texture( <Image> ),\\n *\\n *  alphaMap: new THREE.Texture( <Image> ),\\n *\\n *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\\n *  combine: THREE.Multiply,\\n *  reflectivity: <float>,\\n *  refractionRatio: <float>,\\n *\\n *  depthTest: <bool>,\\n *  depthWrite: <bool>,\\n *\\n *  wireframe: <boolean>,\\n *  wireframeLinewidth: <float>,\\n *\\n *  skinning: <bool>,\\n *  morphTargets: <bool>\\n * }\\n */\\n\\nfunction MeshBasicMaterial( parameters ) {\\n\\n\\tMaterial.call( this );\\n\\n\\tthis.type = 'MeshBasicMaterial';\\n\\n\\tthis.color = new Color( 0xffffff ); // emissive\\n\\n\\tthis.map = null;\\n\\n\\tthis.lightMap = null;\\n\\tthis.lightMapIntensity = 1.0;\\n\\n\\tthis.aoMap = null;\\n\\tthis.aoMapIntensity = 1.0;\\n\\n\\tthis.specularMap = null;\\n\\n\\tthis.alphaMap = null;\\n\\n\\tthis.envMap = null;\\n\\tthis.combine = MultiplyOperation;\\n\\tthis.reflectivity = 1;\\n\\tthis.refractionRatio = 0.98;\\n\\n\\tthis.wireframe = false;\\n\\tthis.wireframeLinewidth = 1;\\n\\tthis.wireframeLinecap = 'round';\\n\\tthis.wireframeLinejoin = 'round';\\n\\n\\tthis.skinning = false;\\n\\tthis.morphTargets = false;\\n\\n\\tthis.lights = false;\\n\\n\\tthis.setValues( parameters );\\n\\n}\\n\\nMeshBasicMaterial.prototype = Object.create( Material.prototype );\\nMeshBasicMaterial.prototype.constructor = MeshBasicMaterial;\\n\\nMeshBasicMaterial.prototype.isMeshBasicMaterial = true;\\n\\nMeshBasicMaterial.prototype.copy = function ( source ) {\\n\\n\\tMaterial.prototype.copy.call( this, source );\\n\\n\\tthis.color.copy( source.color );\\n\\n\\tthis.map = source.map;\\n\\n\\tthis.lightMap = source.lightMap;\\n\\tthis.lightMapIntensity = source.lightMapIntensity;\\n\\n\\tthis.aoMap = source.aoMap;\\n\\tthis.aoMapIntensity = source.aoMapIntensity;\\n\\n\\tthis.specularMap = source.specularMap;\\n\\n\\tthis.alphaMap = source.alphaMap;\\n\\n\\tthis.envMap = source.envMap;\\n\\tthis.combine = source.combine;\\n\\tthis.reflectivity = source.reflectivity;\\n\\tthis.refractionRatio = source.refractionRatio;\\n\\n\\tthis.wireframe = source.wireframe;\\n\\tthis.wireframeLinewidth = source.wireframeLinewidth;\\n\\tthis.wireframeLinecap = source.wireframeLinecap;\\n\\tthis.wireframeLinejoin = source.wireframeLinejoin;\\n\\n\\tthis.skinning = source.skinning;\\n\\tthis.morphTargets = source.morphTargets;\\n\\n\\treturn this;\\n\\n};\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n * @author alteredq / http://alteredqualia.com/\\n * @author mikael emtinger / http://gomo.se/\\n * @author jonobr1 / http://jonobr1.com/\\n */\\n\\nfunction Mesh( geometry, material ) {\\n\\n\\tObject3D.call( this );\\n\\n\\tthis.type = 'Mesh';\\n\\n\\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\\n\\tthis.material = material !== undefined ? material : new MeshBasicMaterial( { color: Math.random() * 0xffffff } );\\n\\n\\tthis.drawMode = TrianglesDrawMode;\\n\\n\\tthis.updateMorphTargets();\\n\\n}\\n\\nMesh.prototype = Object.assign( Object.create( Object3D.prototype ), {\\n\\n\\tconstructor: Mesh,\\n\\n\\tisMesh: true,\\n\\n\\tsetDrawMode: function ( value ) {\\n\\n\\t\\tthis.drawMode = value;\\n\\n\\t},\\n\\n\\tcopy: function ( source ) {\\n\\n\\t\\tObject3D.prototype.copy.call( this, source );\\n\\n\\t\\tthis.drawMode = source.drawMode;\\n\\n\\t\\tif ( source.morphTargetInfluences !== undefined ) {\\n\\n\\t\\t\\tthis.morphTargetInfluences = source.morphTargetInfluences.slice();\\n\\n\\t\\t}\\n\\n\\t\\tif ( source.morphTargetDictionary !== undefined ) {\\n\\n\\t\\t\\tthis.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );\\n\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tupdateMorphTargets: function () {\\n\\n\\t\\tvar geometry = this.geometry;\\n\\t\\tvar m, ml, name;\\n\\n\\t\\tif ( geometry.isBufferGeometry ) {\\n\\n\\t\\t\\tvar morphAttributes = geometry.morphAttributes;\\n\\t\\t\\tvar keys = Object.keys( morphAttributes );\\n\\n\\t\\t\\tif ( keys.length > 0 ) {\\n\\n\\t\\t\\t\\tvar morphAttribute = morphAttributes[ keys[ 0 ] ];\\n\\n\\t\\t\\t\\tif ( morphAttribute !== undefined ) {\\n\\n\\t\\t\\t\\t\\tthis.morphTargetInfluences = [];\\n\\t\\t\\t\\t\\tthis.morphTargetDictionary = {};\\n\\n\\t\\t\\t\\t\\tfor ( m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\\n\\n\\t\\t\\t\\t\\t\\tname = morphAttribute[ m ].name || String( m );\\n\\n\\t\\t\\t\\t\\t\\tthis.morphTargetInfluences.push( 0 );\\n\\t\\t\\t\\t\\t\\tthis.morphTargetDictionary[ name ] = m;\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t} else {\\n\\n\\t\\t\\tvar morphTargets = geometry.morphTargets;\\n\\n\\t\\t\\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\\n\\n\\t\\t\\t\\tconsole.error( 'THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\traycast: ( function () {\\n\\n\\t\\tvar inverseMatrix = new Matrix4();\\n\\t\\tvar ray = new Ray();\\n\\t\\tvar sphere = new Sphere();\\n\\n\\t\\tvar vA = new Vector3();\\n\\t\\tvar vB = new Vector3();\\n\\t\\tvar vC = new Vector3();\\n\\n\\t\\tvar tempA = new Vector3();\\n\\t\\tvar tempB = new Vector3();\\n\\t\\tvar tempC = new Vector3();\\n\\n\\t\\tvar uvA = new Vector2();\\n\\t\\tvar uvB = new Vector2();\\n\\t\\tvar uvC = new Vector2();\\n\\n\\t\\tvar intersectionPoint = new Vector3();\\n\\t\\tvar intersectionPointWorld = new Vector3();\\n\\n\\t\\tfunction checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {\\n\\n\\t\\t\\tvar intersect;\\n\\n\\t\\t\\tif ( material.side === BackSide ) {\\n\\n\\t\\t\\t\\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tintersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( intersect === null ) return null;\\n\\n\\t\\t\\tintersectionPointWorld.copy( point );\\n\\t\\t\\tintersectionPointWorld.applyMatrix4( object.matrixWorld );\\n\\n\\t\\t\\tvar distance = raycaster.ray.origin.distanceTo( intersectionPointWorld );\\n\\n\\t\\t\\tif ( distance < raycaster.near || distance > raycaster.far ) return null;\\n\\n\\t\\t\\treturn {\\n\\t\\t\\t\\tdistance: distance,\\n\\t\\t\\t\\tpoint: intersectionPointWorld.clone(),\\n\\t\\t\\t\\tobject: object\\n\\t\\t\\t};\\n\\n\\t\\t}\\n\\n\\t\\tfunction checkBufferGeometryIntersection( object, material, raycaster, ray, position, uv, a, b, c ) {\\n\\n\\t\\t\\tvA.fromBufferAttribute( position, a );\\n\\t\\t\\tvB.fromBufferAttribute( position, b );\\n\\t\\t\\tvC.fromBufferAttribute( position, c );\\n\\n\\t\\t\\tvar intersection = checkIntersection( object, material, raycaster, ray, vA, vB, vC, intersectionPoint );\\n\\n\\t\\t\\tif ( intersection ) {\\n\\n\\t\\t\\t\\tif ( uv ) {\\n\\n\\t\\t\\t\\t\\tuvA.fromBufferAttribute( uv, a );\\n\\t\\t\\t\\t\\tuvB.fromBufferAttribute( uv, b );\\n\\t\\t\\t\\t\\tuvC.fromBufferAttribute( uv, c );\\n\\n\\t\\t\\t\\t\\tintersection.uv = Triangle.getUV( intersectionPoint, vA, vB, vC, uvA, uvB, uvC, new Vector2() );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tvar face = new Face3( a, b, c );\\n\\t\\t\\t\\tTriangle.getNormal( vA, vB, vC, face.normal );\\n\\n\\t\\t\\t\\tintersection.face = face;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn intersection;\\n\\n\\t\\t}\\n\\n\\t\\treturn function raycast( raycaster, intersects ) {\\n\\n\\t\\t\\tvar geometry = this.geometry;\\n\\t\\t\\tvar material = this.material;\\n\\t\\t\\tvar matrixWorld = this.matrixWorld;\\n\\n\\t\\t\\tif ( material === undefined ) return;\\n\\n\\t\\t\\t// Checking boundingSphere distance to ray\\n\\n\\t\\t\\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\\n\\n\\t\\t\\tsphere.copy( geometry.boundingSphere );\\n\\t\\t\\tsphere.applyMatrix4( matrixWorld );\\n\\n\\t\\t\\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\\n\\n\\t\\t\\t//\\n\\n\\t\\t\\tinverseMatrix.getInverse( matrixWorld );\\n\\t\\t\\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\\n\\n\\t\\t\\t// Check boundingBox before continuing\\n\\n\\t\\t\\tif ( geometry.boundingBox !== null ) {\\n\\n\\t\\t\\t\\tif ( ray.intersectsBox( geometry.boundingBox ) === false ) return;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tvar intersection;\\n\\n\\t\\t\\tif ( geometry.isBufferGeometry ) {\\n\\n\\t\\t\\t\\tvar a, b, c;\\n\\t\\t\\t\\tvar index = geometry.index;\\n\\t\\t\\t\\tvar position = geometry.attributes.position;\\n\\t\\t\\t\\tvar uv = geometry.attributes.uv;\\n\\t\\t\\t\\tvar groups = geometry.groups;\\n\\t\\t\\t\\tvar drawRange = geometry.drawRange;\\n\\t\\t\\t\\tvar i, j, il, jl;\\n\\t\\t\\t\\tvar group, groupMaterial;\\n\\t\\t\\t\\tvar start, end;\\n\\n\\t\\t\\t\\tif ( index !== null ) {\\n\\n\\t\\t\\t\\t\\t// indexed buffer geometry\\n\\n\\t\\t\\t\\t\\tif ( Array.isArray( material ) ) {\\n\\n\\t\\t\\t\\t\\t\\tfor ( i = 0, il = groups.length; i < il; i ++ ) {\\n\\n\\t\\t\\t\\t\\t\\t\\tgroup = groups[ i ];\\n\\t\\t\\t\\t\\t\\t\\tgroupMaterial = material[ group.materialIndex ];\\n\\n\\t\\t\\t\\t\\t\\t\\tstart = Math.max( group.start, drawRange.start );\\n\\t\\t\\t\\t\\t\\t\\tend = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );\\n\\n\\t\\t\\t\\t\\t\\t\\tfor ( j = start, jl = end; j < jl; j += 3 ) {\\n\\n\\t\\t\\t\\t\\t\\t\\t\\ta = index.getX( j );\\n\\t\\t\\t\\t\\t\\t\\t\\tb = index.getX( j + 1 );\\n\\t\\t\\t\\t\\t\\t\\t\\tc = index.getX( j + 2 );\\n\\n\\t\\t\\t\\t\\t\\t\\t\\tintersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, ray, position, uv, a, b, c );\\n\\n\\t\\t\\t\\t\\t\\t\\t\\tif ( intersection ) {\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in indexed buffer semantics\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tintersection.face.materialIndex = group.materialIndex;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tintersects.push( intersection );\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\t\\tstart = Math.max( 0, drawRange.start );\\n\\t\\t\\t\\t\\t\\tend = Math.min( index.count, ( drawRange.start + drawRange.count ) );\\n\\n\\t\\t\\t\\t\\t\\tfor ( i = start, il = end; i < il; i += 3 ) {\\n\\n\\t\\t\\t\\t\\t\\t\\ta = index.getX( i );\\n\\t\\t\\t\\t\\t\\t\\tb = index.getX( i + 1 );\\n\\t\\t\\t\\t\\t\\t\\tc = index.getX( i + 2 );\\n\\n\\t\\t\\t\\t\\t\\t\\tintersection = checkBufferGeometryIntersection( this, material, raycaster, ray, position, uv, a, b, c );\\n\\n\\t\\t\\t\\t\\t\\t\\tif ( intersection ) {\\n\\n\\t\\t\\t\\t\\t\\t\\t\\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indexed buffer semantics\\n\\t\\t\\t\\t\\t\\t\\t\\tintersects.push( intersection );\\n\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t} else if ( position !== undefined ) {\\n\\n\\t\\t\\t\\t\\t// non-indexed buffer geometry\\n\\n\\t\\t\\t\\t\\tif ( Array.isArray( material ) ) {\\n\\n\\t\\t\\t\\t\\t\\tfor ( i = 0, il = groups.length; i < il; i ++ ) {\\n\\n\\t\\t\\t\\t\\t\\t\\tgroup = groups[ i ];\\n\\t\\t\\t\\t\\t\\t\\tgroupMaterial = material[ group.materialIndex ];\\n\\n\\t\\t\\t\\t\\t\\t\\tstart = Math.max( group.start, drawRange.start );\\n\\t\\t\\t\\t\\t\\t\\tend = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );\\n\\n\\t\\t\\t\\t\\t\\t\\tfor ( j = start, jl = end; j < jl; j += 3 ) {\\n\\n\\t\\t\\t\\t\\t\\t\\t\\ta = j;\\n\\t\\t\\t\\t\\t\\t\\t\\tb = j + 1;\\n\\t\\t\\t\\t\\t\\t\\t\\tc = j + 2;\\n\\n\\t\\t\\t\\t\\t\\t\\t\\tintersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, ray, position, uv, a, b, c );\\n\\n\\t\\t\\t\\t\\t\\t\\t\\tif ( intersection ) {\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in non-indexed buffer semantics\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tintersection.face.materialIndex = group.materialIndex;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tintersects.push( intersection );\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\t\\tstart = Math.max( 0, drawRange.start );\\n\\t\\t\\t\\t\\t\\tend = Math.min( position.count, ( drawRange.start + drawRange.count ) );\\n\\n\\t\\t\\t\\t\\t\\tfor ( i = start, il = end; i < il; i += 3 ) {\\n\\n\\t\\t\\t\\t\\t\\t\\ta = i;\\n\\t\\t\\t\\t\\t\\t\\tb = i + 1;\\n\\t\\t\\t\\t\\t\\t\\tc = i + 2;\\n\\n\\t\\t\\t\\t\\t\\t\\tintersection = checkBufferGeometryIntersection( this, material, raycaster, ray, position, uv, a, b, c );\\n\\n\\t\\t\\t\\t\\t\\t\\tif ( intersection ) {\\n\\n\\t\\t\\t\\t\\t\\t\\t\\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in non-indexed buffer semantics\\n\\t\\t\\t\\t\\t\\t\\t\\tintersects.push( intersection );\\n\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t} else if ( geometry.isGeometry ) {\\n\\n\\t\\t\\t\\tvar fvA, fvB, fvC;\\n\\t\\t\\t\\tvar isMultiMaterial = Array.isArray( material );\\n\\n\\t\\t\\t\\tvar vertices = geometry.vertices;\\n\\t\\t\\t\\tvar faces = geometry.faces;\\n\\t\\t\\t\\tvar uvs;\\n\\n\\t\\t\\t\\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\\n\\t\\t\\t\\tif ( faceVertexUvs.length > 0 ) uvs = faceVertexUvs;\\n\\n\\t\\t\\t\\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\\n\\n\\t\\t\\t\\t\\tvar face = faces[ f ];\\n\\t\\t\\t\\t\\tvar faceMaterial = isMultiMaterial ? material[ face.materialIndex ] : material;\\n\\n\\t\\t\\t\\t\\tif ( faceMaterial === undefined ) continue;\\n\\n\\t\\t\\t\\t\\tfvA = vertices[ face.a ];\\n\\t\\t\\t\\t\\tfvB = vertices[ face.b ];\\n\\t\\t\\t\\t\\tfvC = vertices[ face.c ];\\n\\n\\t\\t\\t\\t\\tif ( faceMaterial.morphTargets === true ) {\\n\\n\\t\\t\\t\\t\\t\\tvar morphTargets = geometry.morphTargets;\\n\\t\\t\\t\\t\\t\\tvar morphInfluences = this.morphTargetInfluences;\\n\\n\\t\\t\\t\\t\\t\\tvA.set( 0, 0, 0 );\\n\\t\\t\\t\\t\\t\\tvB.set( 0, 0, 0 );\\n\\t\\t\\t\\t\\t\\tvC.set( 0, 0, 0 );\\n\\n\\t\\t\\t\\t\\t\\tfor ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {\\n\\n\\t\\t\\t\\t\\t\\t\\tvar influence = morphInfluences[ t ];\\n\\n\\t\\t\\t\\t\\t\\t\\tif ( influence === 0 ) continue;\\n\\n\\t\\t\\t\\t\\t\\t\\tvar targets = morphTargets[ t ].vertices;\\n\\n\\t\\t\\t\\t\\t\\t\\tvA.addScaledVector( tempA.subVectors( targets[ face.a ], fvA ), influence );\\n\\t\\t\\t\\t\\t\\t\\tvB.addScaledVector( tempB.subVectors( targets[ face.b ], fvB ), influence );\\n\\t\\t\\t\\t\\t\\t\\tvC.addScaledVector( tempC.subVectors( targets[ face.c ], fvC ), influence );\\n\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\tvA.add( fvA );\\n\\t\\t\\t\\t\\t\\tvB.add( fvB );\\n\\t\\t\\t\\t\\t\\tvC.add( fvC );\\n\\n\\t\\t\\t\\t\\t\\tfvA = vA;\\n\\t\\t\\t\\t\\t\\tfvB = vB;\\n\\t\\t\\t\\t\\t\\tfvC = vC;\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tintersection = checkIntersection( this, faceMaterial, raycaster, ray, fvA, fvB, fvC, intersectionPoint );\\n\\n\\t\\t\\t\\t\\tif ( intersection ) {\\n\\n\\t\\t\\t\\t\\t\\tif ( uvs && uvs[ f ] ) {\\n\\n\\t\\t\\t\\t\\t\\t\\tvar uvs_f = uvs[ f ];\\n\\t\\t\\t\\t\\t\\t\\tuvA.copy( uvs_f[ 0 ] );\\n\\t\\t\\t\\t\\t\\t\\tuvB.copy( uvs_f[ 1 ] );\\n\\t\\t\\t\\t\\t\\t\\tuvC.copy( uvs_f[ 2 ] );\\n\\n\\t\\t\\t\\t\\t\\t\\tintersection.uv = Triangle.getUV( intersectionPoint, fvA, fvB, fvC, uvA, uvB, uvC, new Vector2() );\\n\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\tintersection.face = face;\\n\\t\\t\\t\\t\\t\\tintersection.faceIndex = f;\\n\\t\\t\\t\\t\\t\\tintersects.push( intersection );\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t};\\n\\n\\t}() ),\\n\\n\\tclone: function () {\\n\\n\\t\\treturn new this.constructor( this.geometry, this.material ).copy( this );\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\nfunction WebGLBackground( renderer, state, objects, premultipliedAlpha ) {\\n\\n\\tvar clearColor = new Color( 0x000000 );\\n\\tvar clearAlpha = 0;\\n\\n\\tvar planeMesh;\\n\\tvar boxMesh;\\n\\t// Store the current background texture and its `version`\\n\\t// so we can recompile the material accordingly.\\n\\tvar currentBackground = null;\\n\\tvar currentBackgroundVersion = 0;\\n\\n\\tfunction render( renderList, scene, camera, forceClear ) {\\n\\n\\t\\tvar background = scene.background;\\n\\n\\t\\tif ( background === null ) {\\n\\n\\t\\t\\tsetClear( clearColor, clearAlpha );\\n\\t\\t\\tcurrentBackground = null;\\n\\t\\t\\tcurrentBackgroundVersion = 0;\\n\\n\\t\\t} else if ( background && background.isColor ) {\\n\\n\\t\\t\\tsetClear( background, 1 );\\n\\t\\t\\tforceClear = true;\\n\\t\\t\\tcurrentBackground = null;\\n\\t\\t\\tcurrentBackgroundVersion = 0;\\n\\n\\t\\t}\\n\\n\\t\\tif ( renderer.autoClear || forceClear ) {\\n\\n\\t\\t\\trenderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\\n\\n\\t\\t}\\n\\n\\t\\tif ( background && ( background.isCubeTexture || background.isWebGLRenderTargetCube ) ) {\\n\\n\\t\\t\\tif ( boxMesh === undefined ) {\\n\\n\\t\\t\\t\\tboxMesh = new Mesh(\\n\\t\\t\\t\\t\\tnew BoxBufferGeometry( 1, 1, 1 ),\\n\\t\\t\\t\\t\\tnew ShaderMaterial( {\\n\\t\\t\\t\\t\\t\\ttype: 'BackgroundCubeMaterial',\\n\\t\\t\\t\\t\\t\\tuniforms: cloneUniforms( ShaderLib.cube.uniforms ),\\n\\t\\t\\t\\t\\t\\tvertexShader: ShaderLib.cube.vertexShader,\\n\\t\\t\\t\\t\\t\\tfragmentShader: ShaderLib.cube.fragmentShader,\\n\\t\\t\\t\\t\\t\\tside: BackSide,\\n\\t\\t\\t\\t\\t\\tdepthTest: false,\\n\\t\\t\\t\\t\\t\\tdepthWrite: false,\\n\\t\\t\\t\\t\\t\\tfog: false\\n\\t\\t\\t\\t\\t} )\\n\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\tboxMesh.geometry.removeAttribute( 'normal' );\\n\\t\\t\\t\\tboxMesh.geometry.removeAttribute( 'uv' );\\n\\n\\t\\t\\t\\tboxMesh.onBeforeRender = function ( renderer, scene, camera ) {\\n\\n\\t\\t\\t\\t\\tthis.matrixWorld.copyPosition( camera.matrixWorld );\\n\\n\\t\\t\\t\\t};\\n\\n\\t\\t\\t\\t// enable code injection for non-built-in material\\n\\t\\t\\t\\tObject.defineProperty( boxMesh.material, 'map', {\\n\\n\\t\\t\\t\\t\\tget: function () {\\n\\n\\t\\t\\t\\t\\t\\treturn this.uniforms.tCube.value;\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t} );\\n\\n\\t\\t\\t\\tobjects.update( boxMesh );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tvar texture = background.isWebGLRenderTargetCube ? background.texture : background;\\n\\t\\t\\tboxMesh.material.uniforms.tCube.value = texture;\\n\\t\\t\\tboxMesh.material.uniforms.tFlip.value = ( background.isWebGLRenderTargetCube ) ? 1 : - 1;\\n\\n\\t\\t\\tif ( currentBackground !== background ||\\n\\t\\t\\t     currentBackgroundVersion !== texture.version ) {\\n\\n\\t\\t\\t\\tboxMesh.material.needsUpdate = true;\\n\\n\\t\\t\\t\\tcurrentBackground = background;\\n\\t\\t\\t\\tcurrentBackgroundVersion = texture.version;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\t// push to the pre-sorted opaque render list\\n\\t\\t\\trenderList.unshift( boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null );\\n\\n\\t\\t} else if ( background && background.isTexture ) {\\n\\n\\t\\t\\tif ( planeMesh === undefined ) {\\n\\n\\t\\t\\t\\tplaneMesh = new Mesh(\\n\\t\\t\\t\\t\\tnew PlaneBufferGeometry( 2, 2 ),\\n\\t\\t\\t\\t\\tnew ShaderMaterial( {\\n\\t\\t\\t\\t\\t\\ttype: 'BackgroundMaterial',\\n\\t\\t\\t\\t\\t\\tuniforms: cloneUniforms( ShaderLib.background.uniforms ),\\n\\t\\t\\t\\t\\t\\tvertexShader: ShaderLib.background.vertexShader,\\n\\t\\t\\t\\t\\t\\tfragmentShader: ShaderLib.background.fragmentShader,\\n\\t\\t\\t\\t\\t\\tside: FrontSide,\\n\\t\\t\\t\\t\\t\\tdepthTest: false,\\n\\t\\t\\t\\t\\t\\tdepthWrite: false,\\n\\t\\t\\t\\t\\t\\tfog: false\\n\\t\\t\\t\\t\\t} )\\n\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\tplaneMesh.geometry.removeAttribute( 'normal' );\\n\\n\\t\\t\\t\\t// enable code injection for non-built-in material\\n\\t\\t\\t\\tObject.defineProperty( planeMesh.material, 'map', {\\n\\n\\t\\t\\t\\t\\tget: function () {\\n\\n\\t\\t\\t\\t\\t\\treturn this.uniforms.t2D.value;\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t} );\\n\\n\\t\\t\\t\\tobjects.update( planeMesh );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tplaneMesh.material.uniforms.t2D.value = background;\\n\\n\\t\\t\\tif ( background.matrixAutoUpdate === true ) {\\n\\n\\t\\t\\t\\tbackground.updateMatrix();\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tplaneMesh.material.uniforms.uvTransform.value.copy( background.matrix );\\n\\n\\t\\t\\tif ( currentBackground !== background ||\\n\\t\\t\\t\\t   currentBackgroundVersion !== background.version ) {\\n\\n\\t\\t\\t\\tplaneMesh.material.needsUpdate = true;\\n\\n\\t\\t\\t\\tcurrentBackground = background;\\n\\t\\t\\t\\tcurrentBackgroundVersion = background.version;\\n\\n\\t\\t\\t}\\n\\n\\n\\t\\t\\t// push to the pre-sorted opaque render list\\n\\t\\t\\trenderList.unshift( planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null );\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tfunction setClear( color, alpha ) {\\n\\n\\t\\tstate.buffers.color.setClear( color.r, color.g, color.b, alpha, premultipliedAlpha );\\n\\n\\t}\\n\\n\\treturn {\\n\\n\\t\\tgetClearColor: function () {\\n\\n\\t\\t\\treturn clearColor;\\n\\n\\t\\t},\\n\\t\\tsetClearColor: function ( color, alpha ) {\\n\\n\\t\\t\\tclearColor.set( color );\\n\\t\\t\\tclearAlpha = alpha !== undefined ? alpha : 1;\\n\\t\\t\\tsetClear( clearColor, clearAlpha );\\n\\n\\t\\t},\\n\\t\\tgetClearAlpha: function () {\\n\\n\\t\\t\\treturn clearAlpha;\\n\\n\\t\\t},\\n\\t\\tsetClearAlpha: function ( alpha ) {\\n\\n\\t\\t\\tclearAlpha = alpha;\\n\\t\\t\\tsetClear( clearColor, clearAlpha );\\n\\n\\t\\t},\\n\\t\\trender: render\\n\\n\\t};\\n\\n}\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\nfunction WebGLBufferRenderer( gl, extensions, info, capabilities ) {\\n\\n\\tvar mode;\\n\\n\\tfunction setMode( value ) {\\n\\n\\t\\tmode = value;\\n\\n\\t}\\n\\n\\tfunction render( start, count ) {\\n\\n\\t\\tgl.drawArrays( mode, start, count );\\n\\n\\t\\tinfo.update( count, mode );\\n\\n\\t}\\n\\n\\tfunction renderInstances( geometry, start, count ) {\\n\\n\\t\\tvar extension;\\n\\n\\t\\tif ( capabilities.isWebGL2 ) {\\n\\n\\t\\t\\textension = gl;\\n\\n\\t\\t} else {\\n\\n\\t\\t\\textension = extensions.get( 'ANGLE_instanced_arrays' );\\n\\n\\t\\t\\tif ( extension === null ) {\\n\\n\\t\\t\\t\\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\\n\\t\\t\\t\\treturn;\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\textension[ capabilities.isWebGL2 ? 'drawArraysInstanced' : 'drawArraysInstancedANGLE' ]( mode, start, count, geometry.maxInstancedCount );\\n\\n\\t\\tinfo.update( count, mode, geometry.maxInstancedCount );\\n\\n\\t}\\n\\n\\t//\\n\\n\\tthis.setMode = setMode;\\n\\tthis.render = render;\\n\\tthis.renderInstances = renderInstances;\\n\\n}\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\nfunction WebGLCapabilities( gl, extensions, parameters ) {\\n\\n\\tvar maxAnisotropy;\\n\\n\\tfunction getMaxAnisotropy() {\\n\\n\\t\\tif ( maxAnisotropy !== undefined ) return maxAnisotropy;\\n\\n\\t\\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\\n\\n\\t\\tif ( extension !== null ) {\\n\\n\\t\\t\\tmaxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\\n\\n\\t\\t} else {\\n\\n\\t\\t\\tmaxAnisotropy = 0;\\n\\n\\t\\t}\\n\\n\\t\\treturn maxAnisotropy;\\n\\n\\t}\\n\\n\\tfunction getMaxPrecision( precision ) {\\n\\n\\t\\tif ( precision === 'highp' ) {\\n\\n\\t\\t\\tif ( gl.getShaderPrecisionFormat( 35633, 36338 ).precision > 0 &&\\n\\t\\t\\t     gl.getShaderPrecisionFormat( 35632, 36338 ).precision > 0 ) {\\n\\n\\t\\t\\t\\treturn 'highp';\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tprecision = 'mediump';\\n\\n\\t\\t}\\n\\n\\t\\tif ( precision === 'mediump' ) {\\n\\n\\t\\t\\tif ( gl.getShaderPrecisionFormat( 35633, 36337 ).precision > 0 &&\\n\\t\\t\\t     gl.getShaderPrecisionFormat( 35632, 36337 ).precision > 0 ) {\\n\\n\\t\\t\\t\\treturn 'mediump';\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\treturn 'lowp';\\n\\n\\t}\\n\\n\\tvar isWebGL2 = typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext;\\n\\n\\tvar precision = parameters.precision !== undefined ? parameters.precision : 'highp';\\n\\tvar maxPrecision = getMaxPrecision( precision );\\n\\n\\tif ( maxPrecision !== precision ) {\\n\\n\\t\\tconsole.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );\\n\\t\\tprecision = maxPrecision;\\n\\n\\t}\\n\\n\\tvar logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\\n\\n\\tvar maxTextures = gl.getParameter( 34930 );\\n\\tvar maxVertexTextures = gl.getParameter( 35660 );\\n\\tvar maxTextureSize = gl.getParameter( 3379 );\\n\\tvar maxCubemapSize = gl.getParameter( 34076 );\\n\\n\\tvar maxAttributes = gl.getParameter( 34921 );\\n\\tvar maxVertexUniforms = gl.getParameter( 36347 );\\n\\tvar maxVaryings = gl.getParameter( 36348 );\\n\\tvar maxFragmentUniforms = gl.getParameter( 36349 );\\n\\n\\tvar vertexTextures = maxVertexTextures > 0;\\n\\tvar floatFragmentTextures = isWebGL2 || !! extensions.get( 'OES_texture_float' );\\n\\tvar floatVertexTextures = vertexTextures && floatFragmentTextures;\\n\\n\\tvar maxSamples = isWebGL2 ? gl.getParameter( 36183 ) : 0;\\n\\n\\treturn {\\n\\n\\t\\tisWebGL2: isWebGL2,\\n\\n\\t\\tgetMaxAnisotropy: getMaxAnisotropy,\\n\\t\\tgetMaxPrecision: getMaxPrecision,\\n\\n\\t\\tprecision: precision,\\n\\t\\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\\n\\n\\t\\tmaxTextures: maxTextures,\\n\\t\\tmaxVertexTextures: maxVertexTextures,\\n\\t\\tmaxTextureSize: maxTextureSize,\\n\\t\\tmaxCubemapSize: maxCubemapSize,\\n\\n\\t\\tmaxAttributes: maxAttributes,\\n\\t\\tmaxVertexUniforms: maxVertexUniforms,\\n\\t\\tmaxVaryings: maxVaryings,\\n\\t\\tmaxFragmentUniforms: maxFragmentUniforms,\\n\\n\\t\\tvertexTextures: vertexTextures,\\n\\t\\tfloatFragmentTextures: floatFragmentTextures,\\n\\t\\tfloatVertexTextures: floatVertexTextures,\\n\\n\\t\\tmaxSamples: maxSamples\\n\\n\\t};\\n\\n}\\n\\n/**\\n * @author tschw\\n */\\n\\nfunction WebGLClipping() {\\n\\n\\tvar scope = this,\\n\\n\\t\\tglobalState = null,\\n\\t\\tnumGlobalPlanes = 0,\\n\\t\\tlocalClippingEnabled = false,\\n\\t\\trenderingShadows = false,\\n\\n\\t\\tplane = new Plane(),\\n\\t\\tviewNormalMatrix = new Matrix3(),\\n\\n\\t\\tuniform = { value: null, needsUpdate: false };\\n\\n\\tthis.uniform = uniform;\\n\\tthis.numPlanes = 0;\\n\\tthis.numIntersection = 0;\\n\\n\\tthis.init = function ( planes, enableLocalClipping, camera ) {\\n\\n\\t\\tvar enabled =\\n\\t\\t\\tplanes.length !== 0 ||\\n\\t\\t\\tenableLocalClipping ||\\n\\t\\t\\t// enable state of previous frame - the clipping code has to\\n\\t\\t\\t// run another frame in order to reset the state:\\n\\t\\t\\tnumGlobalPlanes !== 0 ||\\n\\t\\t\\tlocalClippingEnabled;\\n\\n\\t\\tlocalClippingEnabled = enableLocalClipping;\\n\\n\\t\\tglobalState = projectPlanes( planes, camera, 0 );\\n\\t\\tnumGlobalPlanes = planes.length;\\n\\n\\t\\treturn enabled;\\n\\n\\t};\\n\\n\\tthis.beginShadows = function () {\\n\\n\\t\\trenderingShadows = true;\\n\\t\\tprojectPlanes( null );\\n\\n\\t};\\n\\n\\tthis.endShadows = function () {\\n\\n\\t\\trenderingShadows = false;\\n\\t\\tresetGlobalState();\\n\\n\\t};\\n\\n\\tthis.setState = function ( planes, clipIntersection, clipShadows, camera, cache, fromCache ) {\\n\\n\\t\\tif ( ! localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && ! clipShadows ) {\\n\\n\\t\\t\\t// there's no local clipping\\n\\n\\t\\t\\tif ( renderingShadows ) {\\n\\n\\t\\t\\t\\t// there's no global clipping\\n\\n\\t\\t\\t\\tprojectPlanes( null );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tresetGlobalState();\\n\\n\\t\\t\\t}\\n\\n\\t\\t} else {\\n\\n\\t\\t\\tvar nGlobal = renderingShadows ? 0 : numGlobalPlanes,\\n\\t\\t\\t\\tlGlobal = nGlobal * 4,\\n\\n\\t\\t\\t\\tdstArray = cache.clippingState || null;\\n\\n\\t\\t\\tuniform.value = dstArray; // ensure unique state\\n\\n\\t\\t\\tdstArray = projectPlanes( planes, camera, lGlobal, fromCache );\\n\\n\\t\\t\\tfor ( var i = 0; i !== lGlobal; ++ i ) {\\n\\n\\t\\t\\t\\tdstArray[ i ] = globalState[ i ];\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tcache.clippingState = dstArray;\\n\\t\\t\\tthis.numIntersection = clipIntersection ? this.numPlanes : 0;\\n\\t\\t\\tthis.numPlanes += nGlobal;\\n\\n\\t\\t}\\n\\n\\n\\t};\\n\\n\\tfunction resetGlobalState() {\\n\\n\\t\\tif ( uniform.value !== globalState ) {\\n\\n\\t\\t\\tuniform.value = globalState;\\n\\t\\t\\tuniform.needsUpdate = numGlobalPlanes > 0;\\n\\n\\t\\t}\\n\\n\\t\\tscope.numPlanes = numGlobalPlanes;\\n\\t\\tscope.numIntersection = 0;\\n\\n\\t}\\n\\n\\tfunction projectPlanes( planes, camera, dstOffset, skipTransform ) {\\n\\n\\t\\tvar nPlanes = planes !== null ? planes.length : 0,\\n\\t\\t\\tdstArray = null;\\n\\n\\t\\tif ( nPlanes !== 0 ) {\\n\\n\\t\\t\\tdstArray = uniform.value;\\n\\n\\t\\t\\tif ( skipTransform !== true || dstArray === null ) {\\n\\n\\t\\t\\t\\tvar flatSize = dstOffset + nPlanes * 4,\\n\\t\\t\\t\\t\\tviewMatrix = camera.matrixWorldInverse;\\n\\n\\t\\t\\t\\tviewNormalMatrix.getNormalMatrix( viewMatrix );\\n\\n\\t\\t\\t\\tif ( dstArray === null || dstArray.length < flatSize ) {\\n\\n\\t\\t\\t\\t\\tdstArray = new Float32Array( flatSize );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tfor ( var i = 0, i4 = dstOffset; i !== nPlanes; ++ i, i4 += 4 ) {\\n\\n\\t\\t\\t\\t\\tplane.copy( planes[ i ] ).applyMatrix4( viewMatrix, viewNormalMatrix );\\n\\n\\t\\t\\t\\t\\tplane.normal.toArray( dstArray, i4 );\\n\\t\\t\\t\\t\\tdstArray[ i4 + 3 ] = plane.constant;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tuniform.value = dstArray;\\n\\t\\t\\tuniform.needsUpdate = true;\\n\\n\\t\\t}\\n\\n\\t\\tscope.numPlanes = nPlanes;\\n\\n\\t\\treturn dstArray;\\n\\n\\t}\\n\\n}\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\nfunction WebGLExtensions( gl ) {\\n\\n\\tvar extensions = {};\\n\\n\\treturn {\\n\\n\\t\\tget: function ( name ) {\\n\\n\\t\\t\\tif ( extensions[ name ] !== undefined ) {\\n\\n\\t\\t\\t\\treturn extensions[ name ];\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tvar extension;\\n\\n\\t\\t\\tswitch ( name ) {\\n\\n\\t\\t\\t\\tcase 'WEBGL_depth_texture':\\n\\t\\t\\t\\t\\textension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\\n\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\tcase 'EXT_texture_filter_anisotropic':\\n\\t\\t\\t\\t\\textension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\\n\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\tcase 'WEBGL_compressed_texture_s3tc':\\n\\t\\t\\t\\t\\textension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\\n\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\tcase 'WEBGL_compressed_texture_pvrtc':\\n\\t\\t\\t\\t\\textension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\\n\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\textension = gl.getExtension( name );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( extension === null ) {\\n\\n\\t\\t\\t\\tconsole.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\textensions[ name ] = extension;\\n\\n\\t\\t\\treturn extension;\\n\\n\\t\\t}\\n\\n\\t};\\n\\n}\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\nfunction WebGLGeometries( gl, attributes, info ) {\\n\\n\\tvar geometries = {};\\n\\tvar wireframeAttributes = {};\\n\\n\\tfunction onGeometryDispose( event ) {\\n\\n\\t\\tvar geometry = event.target;\\n\\t\\tvar buffergeometry = geometries[ geometry.id ];\\n\\n\\t\\tif ( buffergeometry.index !== null ) {\\n\\n\\t\\t\\tattributes.remove( buffergeometry.index );\\n\\n\\t\\t}\\n\\n\\t\\tfor ( var name in buffergeometry.attributes ) {\\n\\n\\t\\t\\tattributes.remove( buffergeometry.attributes[ name ] );\\n\\n\\t\\t}\\n\\n\\t\\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\\n\\n\\t\\tdelete geometries[ geometry.id ];\\n\\n\\t\\tvar attribute = wireframeAttributes[ buffergeometry.id ];\\n\\n\\t\\tif ( attribute ) {\\n\\n\\t\\t\\tattributes.remove( attribute );\\n\\t\\t\\tdelete wireframeAttributes[ buffergeometry.id ];\\n\\n\\t\\t}\\n\\n\\t\\t//\\n\\n\\t\\tinfo.memory.geometries --;\\n\\n\\t}\\n\\n\\tfunction get( object, geometry ) {\\n\\n\\t\\tvar buffergeometry = geometries[ geometry.id ];\\n\\n\\t\\tif ( buffergeometry ) return buffergeometry;\\n\\n\\t\\tgeometry.addEventListener( 'dispose', onGeometryDispose );\\n\\n\\t\\tif ( geometry.isBufferGeometry ) {\\n\\n\\t\\t\\tbuffergeometry = geometry;\\n\\n\\t\\t} else if ( geometry.isGeometry ) {\\n\\n\\t\\t\\tif ( geometry._bufferGeometry === undefined ) {\\n\\n\\t\\t\\t\\tgeometry._bufferGeometry = new BufferGeometry().setFromObject( object );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tbuffergeometry = geometry._bufferGeometry;\\n\\n\\t\\t}\\n\\n\\t\\tgeometries[ geometry.id ] = buffergeometry;\\n\\n\\t\\tinfo.memory.geometries ++;\\n\\n\\t\\treturn buffergeometry;\\n\\n\\t}\\n\\n\\tfunction update( geometry ) {\\n\\n\\t\\tvar index = geometry.index;\\n\\t\\tvar geometryAttributes = geometry.attributes;\\n\\n\\t\\tif ( index !== null ) {\\n\\n\\t\\t\\tattributes.update( index, 34963 );\\n\\n\\t\\t}\\n\\n\\t\\tfor ( var name in geometryAttributes ) {\\n\\n\\t\\t\\tattributes.update( geometryAttributes[ name ], 34962 );\\n\\n\\t\\t}\\n\\n\\t\\t// morph targets\\n\\n\\t\\tvar morphAttributes = geometry.morphAttributes;\\n\\n\\t\\tfor ( var name in morphAttributes ) {\\n\\n\\t\\t\\tvar array = morphAttributes[ name ];\\n\\n\\t\\t\\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\\n\\n\\t\\t\\t\\tattributes.update( array[ i ], 34962 );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tfunction getWireframeAttribute( geometry ) {\\n\\n\\t\\tvar attribute = wireframeAttributes[ geometry.id ];\\n\\n\\t\\tif ( attribute ) return attribute;\\n\\n\\t\\tvar indices = [];\\n\\n\\t\\tvar geometryIndex = geometry.index;\\n\\t\\tvar geometryAttributes = geometry.attributes;\\n\\n\\t\\t// console.time( 'wireframe' );\\n\\n\\t\\tif ( geometryIndex !== null ) {\\n\\n\\t\\t\\tvar array = geometryIndex.array;\\n\\n\\t\\t\\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\\n\\n\\t\\t\\t\\tvar a = array[ i + 0 ];\\n\\t\\t\\t\\tvar b = array[ i + 1 ];\\n\\t\\t\\t\\tvar c = array[ i + 2 ];\\n\\n\\t\\t\\t\\tindices.push( a, b, b, c, c, a );\\n\\n\\t\\t\\t}\\n\\n\\t\\t} else {\\n\\n\\t\\t\\tvar array = geometryAttributes.position.array;\\n\\n\\t\\t\\tfor ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {\\n\\n\\t\\t\\t\\tvar a = i + 0;\\n\\t\\t\\t\\tvar b = i + 1;\\n\\t\\t\\t\\tvar c = i + 2;\\n\\n\\t\\t\\t\\tindices.push( a, b, b, c, c, a );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\t// console.timeEnd( 'wireframe' );\\n\\n\\t\\tattribute = new ( arrayMax( indices ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );\\n\\n\\t\\tattributes.update( attribute, 34963 );\\n\\n\\t\\twireframeAttributes[ geometry.id ] = attribute;\\n\\n\\t\\treturn attribute;\\n\\n\\t}\\n\\n\\treturn {\\n\\n\\t\\tget: get,\\n\\t\\tupdate: update,\\n\\n\\t\\tgetWireframeAttribute: getWireframeAttribute\\n\\n\\t};\\n\\n}\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\nfunction WebGLIndexedBufferRenderer( gl, extensions, info, capabilities ) {\\n\\n\\tvar mode;\\n\\n\\tfunction setMode( value ) {\\n\\n\\t\\tmode = value;\\n\\n\\t}\\n\\n\\tvar type, bytesPerElement;\\n\\n\\tfunction setIndex( value ) {\\n\\n\\t\\ttype = value.type;\\n\\t\\tbytesPerElement = value.bytesPerElement;\\n\\n\\t}\\n\\n\\tfunction render( start, count ) {\\n\\n\\t\\tgl.drawElements( mode, count, type, start * bytesPerElement );\\n\\n\\t\\tinfo.update( count, mode );\\n\\n\\t}\\n\\n\\tfunction renderInstances( geometry, start, count ) {\\n\\n\\t\\tvar extension;\\n\\n\\t\\tif ( capabilities.isWebGL2 ) {\\n\\n\\t\\t\\textension = gl;\\n\\n\\t\\t} else {\\n\\n\\t\\t\\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\\n\\n\\t\\t\\tif ( extension === null ) {\\n\\n\\t\\t\\t\\tconsole.error( 'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\\n\\t\\t\\t\\treturn;\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\textension[ capabilities.isWebGL2 ? 'drawElementsInstanced' : 'drawElementsInstancedANGLE' ]( mode, count, type, start * bytesPerElement, geometry.maxInstancedCount );\\n\\n\\t\\tinfo.update( count, mode, geometry.maxInstancedCount );\\n\\n\\t}\\n\\n\\t//\\n\\n\\tthis.setMode = setMode;\\n\\tthis.setIndex = setIndex;\\n\\tthis.render = render;\\n\\tthis.renderInstances = renderInstances;\\n\\n}\\n\\n/**\\n * @author Mugen87 / https://github.com/Mugen87\\n */\\n\\nfunction WebGLInfo( gl ) {\\n\\n\\tvar memory = {\\n\\t\\tgeometries: 0,\\n\\t\\ttextures: 0\\n\\t};\\n\\n\\tvar render = {\\n\\t\\tframe: 0,\\n\\t\\tcalls: 0,\\n\\t\\ttriangles: 0,\\n\\t\\tpoints: 0,\\n\\t\\tlines: 0\\n\\t};\\n\\n\\tfunction update( count, mode, instanceCount ) {\\n\\n\\t\\tinstanceCount = instanceCount || 1;\\n\\n\\t\\trender.calls ++;\\n\\n\\t\\tswitch ( mode ) {\\n\\n\\t\\t\\tcase 4:\\n\\t\\t\\t\\trender.triangles += instanceCount * ( count / 3 );\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 5:\\n\\t\\t\\tcase 6:\\n\\t\\t\\t\\trender.triangles += instanceCount * ( count - 2 );\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\trender.lines += instanceCount * ( count / 2 );\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 3:\\n\\t\\t\\t\\trender.lines += instanceCount * ( count - 1 );\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\trender.lines += instanceCount * count;\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\trender.points += instanceCount * count;\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tconsole.error( 'THREE.WebGLInfo: Unknown draw mode:', mode );\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tfunction reset() {\\n\\n\\t\\trender.frame ++;\\n\\t\\trender.calls = 0;\\n\\t\\trender.triangles = 0;\\n\\t\\trender.points = 0;\\n\\t\\trender.lines = 0;\\n\\n\\t}\\n\\n\\treturn {\\n\\t\\tmemory: memory,\\n\\t\\trender: render,\\n\\t\\tprograms: null,\\n\\t\\tautoReset: true,\\n\\t\\treset: reset,\\n\\t\\tupdate: update\\n\\t};\\n\\n}\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\nfunction absNumericalSort( a, b ) {\\n\\n\\treturn Math.abs( b[ 1 ] ) - Math.abs( a[ 1 ] );\\n\\n}\\n\\nfunction WebGLMorphtargets( gl ) {\\n\\n\\tvar influencesList = {};\\n\\tvar morphInfluences = new Float32Array( 8 );\\n\\n\\tfunction update( object, geometry, material, program ) {\\n\\n\\t\\tvar objectInfluences = object.morphTargetInfluences;\\n\\n\\t\\tvar length = objectInfluences.length;\\n\\n\\t\\tvar influences = influencesList[ geometry.id ];\\n\\n\\t\\tif ( influences === undefined ) {\\n\\n\\t\\t\\t// initialise list\\n\\n\\t\\t\\tinfluences = [];\\n\\n\\t\\t\\tfor ( var i = 0; i < length; i ++ ) {\\n\\n\\t\\t\\t\\tinfluences[ i ] = [ i, 0 ];\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tinfluencesList[ geometry.id ] = influences;\\n\\n\\t\\t}\\n\\n\\t\\tvar morphTargets = material.morphTargets && geometry.morphAttributes.position;\\n\\t\\tvar morphNormals = material.morphNormals && geometry.morphAttributes.normal;\\n\\n\\t\\t// Remove current morphAttributes\\n\\n\\t\\tfor ( var i = 0; i < length; i ++ ) {\\n\\n\\t\\t\\tvar influence = influences[ i ];\\n\\n\\t\\t\\tif ( influence[ 1 ] !== 0 ) {\\n\\n\\t\\t\\t\\tif ( morphTargets ) geometry.removeAttribute( 'morphTarget' + i );\\n\\t\\t\\t\\tif ( morphNormals ) geometry.removeAttribute( 'morphNormal' + i );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\t// Collect influences\\n\\n\\t\\tfor ( var i = 0; i < length; i ++ ) {\\n\\n\\t\\t\\tvar influence = influences[ i ];\\n\\n\\t\\t\\tinfluence[ 0 ] = i;\\n\\t\\t\\tinfluence[ 1 ] = objectInfluences[ i ];\\n\\n\\t\\t}\\n\\n\\t\\tinfluences.sort( absNumericalSort );\\n\\n\\t\\t// Add morphAttributes\\n\\n\\t\\tfor ( var i = 0; i < 8; i ++ ) {\\n\\n\\t\\t\\tvar influence = influences[ i ];\\n\\n\\t\\t\\tif ( influence ) {\\n\\n\\t\\t\\t\\tvar index = influence[ 0 ];\\n\\t\\t\\t\\tvar value = influence[ 1 ];\\n\\n\\t\\t\\t\\tif ( value ) {\\n\\n\\t\\t\\t\\t\\tif ( morphTargets ) geometry.addAttribute( 'morphTarget' + i, morphTargets[ index ] );\\n\\t\\t\\t\\t\\tif ( morphNormals ) geometry.addAttribute( 'morphNormal' + i, morphNormals[ index ] );\\n\\n\\t\\t\\t\\t\\tmorphInfluences[ i ] = value;\\n\\t\\t\\t\\t\\tcontinue;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tmorphInfluences[ i ] = 0;\\n\\n\\t\\t}\\n\\n\\t\\tprogram.getUniforms().setValue( gl, 'morphTargetInfluences', morphInfluences );\\n\\n\\t}\\n\\n\\treturn {\\n\\n\\t\\tupdate: update\\n\\n\\t};\\n\\n}\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\nfunction WebGLObjects( geometries, info ) {\\n\\n\\tvar updateList = {};\\n\\n\\tfunction update( object ) {\\n\\n\\t\\tvar frame = info.render.frame;\\n\\n\\t\\tvar geometry = object.geometry;\\n\\t\\tvar buffergeometry = geometries.get( object, geometry );\\n\\n\\t\\t// Update once per frame\\n\\n\\t\\tif ( updateList[ buffergeometry.id ] !== frame ) {\\n\\n\\t\\t\\tif ( geometry.isGeometry ) {\\n\\n\\t\\t\\t\\tbuffergeometry.updateFromObject( object );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tgeometries.update( buffergeometry );\\n\\n\\t\\t\\tupdateList[ buffergeometry.id ] = frame;\\n\\n\\t\\t}\\n\\n\\t\\treturn buffergeometry;\\n\\n\\t}\\n\\n\\tfunction dispose() {\\n\\n\\t\\tupdateList = {};\\n\\n\\t}\\n\\n\\treturn {\\n\\n\\t\\tupdate: update,\\n\\t\\tdispose: dispose\\n\\n\\t};\\n\\n}\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\nfunction CubeTexture( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\\n\\n\\timages = images !== undefined ? images : [];\\n\\tmapping = mapping !== undefined ? mapping : CubeReflectionMapping;\\n\\n\\tTexture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\\n\\n\\tthis.flipY = false;\\n\\n}\\n\\nCubeTexture.prototype = Object.create( Texture.prototype );\\nCubeTexture.prototype.constructor = CubeTexture;\\n\\nCubeTexture.prototype.isCubeTexture = true;\\n\\nObject.defineProperty( CubeTexture.prototype, 'images', {\\n\\n\\tget: function () {\\n\\n\\t\\treturn this.image;\\n\\n\\t},\\n\\n\\tset: function ( value ) {\\n\\n\\t\\tthis.image = value;\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author Artur Trzesiok\\n */\\n\\nfunction DataTexture3D( data, width, height, depth ) {\\n\\n\\t// We're going to add .setXXX() methods for setting properties later.\\n\\t// Users can still set in DataTexture3D directly.\\n\\t//\\n\\t//\\tvar texture = new THREE.DataTexture3D( data, width, height, depth );\\n\\t// \\ttexture.anisotropy = 16;\\n\\t//\\n\\t// See #14839\\n\\n\\tTexture.call( this, null );\\n\\n\\tthis.image = { data: data, width: width, height: height, depth: depth };\\n\\n\\tthis.magFilter = NearestFilter;\\n\\tthis.minFilter = NearestFilter;\\n\\n\\tthis.generateMipmaps = false;\\n\\tthis.flipY = false;\\n\\n}\\n\\nDataTexture3D.prototype = Object.create( Texture.prototype );\\nDataTexture3D.prototype.constructor = DataTexture3D;\\nDataTexture3D.prototype.isDataTexture3D = true;\\n\\n/**\\n * @author tschw\\n * @author Mugen87 / https://github.com/Mugen87\\n * @author mrdoob / http://mrdoob.com/\\n *\\n * Uniforms of a program.\\n * Those form a tree structure with a special top-level container for the root,\\n * which you get by calling 'new WebGLUniforms( gl, program, renderer )'.\\n *\\n *\\n * Properties of inner nodes including the top-level container:\\n *\\n * .seq - array of nested uniforms\\n * .map - nested uniforms by name\\n *\\n *\\n * Methods of all nodes except the top-level container:\\n *\\n * .setValue( gl, value, [renderer] )\\n *\\n * \\t\\tuploads a uniform value(s)\\n *  \\tthe 'renderer' parameter is needed for sampler uniforms\\n *\\n *\\n * Static methods of the top-level container (renderer factorizations):\\n *\\n * .upload( gl, seq, values, renderer )\\n *\\n * \\t\\tsets uniforms in 'seq' to 'values[id].value'\\n *\\n * .seqWithValue( seq, values ) : filteredSeq\\n *\\n * \\t\\tfilters 'seq' entries with corresponding entry in values\\n *\\n *\\n * Methods of the top-level container (renderer factorizations):\\n *\\n * .setValue( gl, name, value )\\n *\\n * \\t\\tsets uniform with  name 'name' to 'value'\\n *\\n * .set( gl, obj, prop )\\n *\\n * \\t\\tsets uniform from object and property with same name than uniform\\n *\\n * .setOptional( gl, obj, prop )\\n *\\n * \\t\\tlike .set for an optional property of the object\\n *\\n */\\n\\nvar emptyTexture = new Texture();\\nvar emptyTexture3d = new DataTexture3D();\\nvar emptyCubeTexture = new CubeTexture();\\n\\n// --- Base for inner nodes (including the root) ---\\n\\nfunction UniformContainer() {\\n\\n\\tthis.seq = [];\\n\\tthis.map = {};\\n\\n}\\n\\n// --- Utilities ---\\n\\n// Array Caches (provide typed arrays for temporary by size)\\n\\nvar arrayCacheF32 = [];\\nvar arrayCacheI32 = [];\\n\\n// Float32Array caches used for uploading Matrix uniforms\\n\\nvar mat4array = new Float32Array( 16 );\\nvar mat3array = new Float32Array( 9 );\\nvar mat2array = new Float32Array( 4 );\\n\\n// Flattening for arrays of vectors and matrices\\n\\nfunction flatten( array, nBlocks, blockSize ) {\\n\\n\\tvar firstElem = array[ 0 ];\\n\\n\\tif ( firstElem <= 0 || firstElem > 0 ) return array;\\n\\t// unoptimized: ! isNaN( firstElem )\\n\\t// see http://jacksondunstan.com/articles/983\\n\\n\\tvar n = nBlocks * blockSize,\\n\\t\\tr = arrayCacheF32[ n ];\\n\\n\\tif ( r === undefined ) {\\n\\n\\t\\tr = new Float32Array( n );\\n\\t\\tarrayCacheF32[ n ] = r;\\n\\n\\t}\\n\\n\\tif ( nBlocks !== 0 ) {\\n\\n\\t\\tfirstElem.toArray( r, 0 );\\n\\n\\t\\tfor ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {\\n\\n\\t\\t\\toffset += blockSize;\\n\\t\\t\\tarray[ i ].toArray( r, offset );\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\treturn r;\\n\\n}\\n\\nfunction arraysEqual( a, b ) {\\n\\n\\tif ( a.length !== b.length ) return false;\\n\\n\\tfor ( var i = 0, l = a.length; i < l; i ++ ) {\\n\\n\\t\\tif ( a[ i ] !== b[ i ] ) return false;\\n\\n\\t}\\n\\n\\treturn true;\\n\\n}\\n\\nfunction copyArray( a, b ) {\\n\\n\\tfor ( var i = 0, l = b.length; i < l; i ++ ) {\\n\\n\\t\\ta[ i ] = b[ i ];\\n\\n\\t}\\n\\n}\\n\\n// Texture unit allocation\\n\\nfunction allocTexUnits( renderer, n ) {\\n\\n\\tvar r = arrayCacheI32[ n ];\\n\\n\\tif ( r === undefined ) {\\n\\n\\t\\tr = new Int32Array( n );\\n\\t\\tarrayCacheI32[ n ] = r;\\n\\n\\t}\\n\\n\\tfor ( var i = 0; i !== n; ++ i )\\n\\t\\tr[ i ] = renderer.allocTextureUnit();\\n\\n\\treturn r;\\n\\n}\\n\\n// --- Setters ---\\n\\n// Note: Defining these methods externally, because they come in a bunch\\n// and this way their names minify.\\n\\n// Single scalar\\n\\nfunction setValue1f( gl, v ) {\\n\\n\\tvar cache = this.cache;\\n\\n\\tif ( cache[ 0 ] === v ) return;\\n\\n\\tgl.uniform1f( this.addr, v );\\n\\n\\tcache[ 0 ] = v;\\n\\n}\\n\\nfunction setValue1i( gl, v ) {\\n\\n\\tvar cache = this.cache;\\n\\n\\tif ( cache[ 0 ] === v ) return;\\n\\n\\tgl.uniform1i( this.addr, v );\\n\\n\\tcache[ 0 ] = v;\\n\\n}\\n\\n// Single float vector (from flat array or THREE.VectorN)\\n\\nfunction setValue2fv( gl, v ) {\\n\\n\\tvar cache = this.cache;\\n\\n\\tif ( v.x !== undefined ) {\\n\\n\\t\\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {\\n\\n\\t\\t\\tgl.uniform2f( this.addr, v.x, v.y );\\n\\n\\t\\t\\tcache[ 0 ] = v.x;\\n\\t\\t\\tcache[ 1 ] = v.y;\\n\\n\\t\\t}\\n\\n\\t} else {\\n\\n\\t\\tif ( arraysEqual( cache, v ) ) return;\\n\\n\\t\\tgl.uniform2fv( this.addr, v );\\n\\n\\t\\tcopyArray( cache, v );\\n\\n\\t}\\n\\n}\\n\\nfunction setValue3fv( gl, v ) {\\n\\n\\tvar cache = this.cache;\\n\\n\\tif ( v.x !== undefined ) {\\n\\n\\t\\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {\\n\\n\\t\\t\\tgl.uniform3f( this.addr, v.x, v.y, v.z );\\n\\n\\t\\t\\tcache[ 0 ] = v.x;\\n\\t\\t\\tcache[ 1 ] = v.y;\\n\\t\\t\\tcache[ 2 ] = v.z;\\n\\n\\t\\t}\\n\\n\\t} else if ( v.r !== undefined ) {\\n\\n\\t\\tif ( cache[ 0 ] !== v.r || cache[ 1 ] !== v.g || cache[ 2 ] !== v.b ) {\\n\\n\\t\\t\\tgl.uniform3f( this.addr, v.r, v.g, v.b );\\n\\n\\t\\t\\tcache[ 0 ] = v.r;\\n\\t\\t\\tcache[ 1 ] = v.g;\\n\\t\\t\\tcache[ 2 ] = v.b;\\n\\n\\t\\t}\\n\\n\\t} else {\\n\\n\\t\\tif ( arraysEqual( cache, v ) ) return;\\n\\n\\t\\tgl.uniform3fv( this.addr, v );\\n\\n\\t\\tcopyArray( cache, v );\\n\\n\\t}\\n\\n}\\n\\nfunction setValue4fv( gl, v ) {\\n\\n\\tvar cache = this.cache;\\n\\n\\tif ( v.x !== undefined ) {\\n\\n\\t\\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {\\n\\n\\t\\t\\tgl.uniform4f( this.addr, v.x, v.y, v.z, v.w );\\n\\n\\t\\t\\tcache[ 0 ] = v.x;\\n\\t\\t\\tcache[ 1 ] = v.y;\\n\\t\\t\\tcache[ 2 ] = v.z;\\n\\t\\t\\tcache[ 3 ] = v.w;\\n\\n\\t\\t}\\n\\n\\t} else {\\n\\n\\t\\tif ( arraysEqual( cache, v ) ) return;\\n\\n\\t\\tgl.uniform4fv( this.addr, v );\\n\\n\\t\\tcopyArray( cache, v );\\n\\n\\t}\\n\\n}\\n\\n// Single matrix (from flat array or MatrixN)\\n\\nfunction setValue2fm( gl, v ) {\\n\\n\\tvar cache = this.cache;\\n\\tvar elements = v.elements;\\n\\n\\tif ( elements === undefined ) {\\n\\n\\t\\tif ( arraysEqual( cache, v ) ) return;\\n\\n\\t\\tgl.uniformMatrix2fv( this.addr, false, v );\\n\\n\\t\\tcopyArray( cache, v );\\n\\n\\t} else {\\n\\n\\t\\tif ( arraysEqual( cache, elements ) ) return;\\n\\n\\t\\tmat2array.set( elements );\\n\\n\\t\\tgl.uniformMatrix2fv( this.addr, false, mat2array );\\n\\n\\t\\tcopyArray( cache, elements );\\n\\n\\t}\\n\\n}\\n\\nfunction setValue3fm( gl, v ) {\\n\\n\\tvar cache = this.cache;\\n\\tvar elements = v.elements;\\n\\n\\tif ( elements === undefined ) {\\n\\n\\t\\tif ( arraysEqual( cache, v ) ) return;\\n\\n\\t\\tgl.uniformMatrix3fv( this.addr, false, v );\\n\\n\\t\\tcopyArray( cache, v );\\n\\n\\t} else {\\n\\n\\t\\tif ( arraysEqual( cache, elements ) ) return;\\n\\n\\t\\tmat3array.set( elements );\\n\\n\\t\\tgl.uniformMatrix3fv( this.addr, false, mat3array );\\n\\n\\t\\tcopyArray( cache, elements );\\n\\n\\t}\\n\\n}\\n\\nfunction setValue4fm( gl, v ) {\\n\\n\\tvar cache = this.cache;\\n\\tvar elements = v.elements;\\n\\n\\tif ( elements === undefined ) {\\n\\n\\t\\tif ( arraysEqual( cache, v ) ) return;\\n\\n\\t\\tgl.uniformMatrix4fv( this.addr, false, v );\\n\\n\\t\\tcopyArray( cache, v );\\n\\n\\t} else {\\n\\n\\t\\tif ( arraysEqual( cache, elements ) ) return;\\n\\n\\t\\tmat4array.set( elements );\\n\\n\\t\\tgl.uniformMatrix4fv( this.addr, false, mat4array );\\n\\n\\t\\tcopyArray( cache, elements );\\n\\n\\t}\\n\\n}\\n\\n// Single texture (2D / Cube)\\n\\nfunction setValueT1( gl, v, renderer ) {\\n\\n\\tvar cache = this.cache;\\n\\tvar unit = renderer.allocTextureUnit();\\n\\n\\tif ( cache[ 0 ] !== unit ) {\\n\\n\\t\\tgl.uniform1i( this.addr, unit );\\n\\t\\tcache[ 0 ] = unit;\\n\\n\\t}\\n\\n\\trenderer.setTexture2D( v || emptyTexture, unit );\\n\\n}\\n\\nfunction setValueT3D1( gl, v, renderer ) {\\n\\n\\tvar cache = this.cache;\\n\\tvar unit = renderer.allocTextureUnit();\\n\\n\\tif ( cache[ 0 ] !== unit ) {\\n\\n\\t\\tgl.uniform1i( this.addr, unit );\\n\\t\\tcache[ 0 ] = unit;\\n\\n\\t}\\n\\n\\trenderer.setTexture3D( v || emptyTexture3d, unit );\\n\\n}\\n\\nfunction setValueT6( gl, v, renderer ) {\\n\\n\\tvar cache = this.cache;\\n\\tvar unit = renderer.allocTextureUnit();\\n\\n\\tif ( cache[ 0 ] !== unit ) {\\n\\n\\t\\tgl.uniform1i( this.addr, unit );\\n\\t\\tcache[ 0 ] = unit;\\n\\n\\t}\\n\\n\\trenderer.setTextureCube( v || emptyCubeTexture, unit );\\n\\n}\\n\\n// Integer / Boolean vectors or arrays thereof (always flat arrays)\\n\\nfunction setValue2iv( gl, v ) {\\n\\n\\tvar cache = this.cache;\\n\\n\\tif ( arraysEqual( cache, v ) ) return;\\n\\n\\tgl.uniform2iv( this.addr, v );\\n\\n\\tcopyArray( cache, v );\\n\\n}\\n\\nfunction setValue3iv( gl, v ) {\\n\\n\\tvar cache = this.cache;\\n\\n\\tif ( arraysEqual( cache, v ) ) return;\\n\\n\\tgl.uniform3iv( this.addr, v );\\n\\n\\tcopyArray( cache, v );\\n\\n}\\n\\nfunction setValue4iv( gl, v ) {\\n\\n\\tvar cache = this.cache;\\n\\n\\tif ( arraysEqual( cache, v ) ) return;\\n\\n\\tgl.uniform4iv( this.addr, v );\\n\\n\\tcopyArray( cache, v );\\n\\n}\\n\\n// Helper to pick the right setter for the singular case\\n\\nfunction getSingularSetter( type ) {\\n\\n\\tswitch ( type ) {\\n\\n\\t\\tcase 0x1406: return setValue1f; // FLOAT\\n\\t\\tcase 0x8b50: return setValue2fv; // _VEC2\\n\\t\\tcase 0x8b51: return setValue3fv; // _VEC3\\n\\t\\tcase 0x8b52: return setValue4fv; // _VEC4\\n\\n\\t\\tcase 0x8b5a: return setValue2fm; // _MAT2\\n\\t\\tcase 0x8b5b: return setValue3fm; // _MAT3\\n\\t\\tcase 0x8b5c: return setValue4fm; // _MAT4\\n\\n\\t\\tcase 0x8b5e: case 0x8d66: return setValueT1; // SAMPLER_2D, SAMPLER_EXTERNAL_OES\\n\\t\\tcase 0x8B5F: return setValueT3D1; // SAMPLER_3D\\n\\t\\tcase 0x8b60: return setValueT6; // SAMPLER_CUBE\\n\\n\\t\\tcase 0x1404: case 0x8b56: return setValue1i; // INT, BOOL\\n\\t\\tcase 0x8b53: case 0x8b57: return setValue2iv; // _VEC2\\n\\t\\tcase 0x8b54: case 0x8b58: return setValue3iv; // _VEC3\\n\\t\\tcase 0x8b55: case 0x8b59: return setValue4iv; // _VEC4\\n\\n\\t}\\n\\n}\\n\\n// Array of scalars\\n\\nfunction setValue1fv( gl, v ) {\\n\\n\\tvar cache = this.cache;\\n\\n\\tif ( arraysEqual( cache, v ) ) return;\\n\\n\\tgl.uniform1fv( this.addr, v );\\n\\n\\tcopyArray( cache, v );\\n\\n}\\nfunction setValue1iv( gl, v ) {\\n\\n\\tvar cache = this.cache;\\n\\n\\tif ( arraysEqual( cache, v ) ) return;\\n\\n\\tgl.uniform1iv( this.addr, v );\\n\\n\\tcopyArray( cache, v );\\n\\n}\\n\\n// Array of vectors (flat or from THREE classes)\\n\\nfunction setValueV2a( gl, v ) {\\n\\n\\tvar cache = this.cache;\\n\\tvar data = flatten( v, this.size, 2 );\\n\\n\\tif ( arraysEqual( cache, data ) ) return;\\n\\n\\tgl.uniform2fv( this.addr, data );\\n\\n\\tthis.updateCache( data );\\n\\n}\\n\\nfunction setValueV3a( gl, v ) {\\n\\n\\tvar cache = this.cache;\\n\\tvar data = flatten( v, this.size, 3 );\\n\\n\\tif ( arraysEqual( cache, data ) ) return;\\n\\n\\tgl.uniform3fv( this.addr, data );\\n\\n\\tthis.updateCache( data );\\n\\n}\\n\\nfunction setValueV4a( gl, v ) {\\n\\n\\tvar cache = this.cache;\\n\\tvar data = flatten( v, this.size, 4 );\\n\\n\\tif ( arraysEqual( cache, data ) ) return;\\n\\n\\tgl.uniform4fv( this.addr, data );\\n\\n\\tthis.updateCache( data );\\n\\n}\\n\\n// Array of matrices (flat or from THREE clases)\\n\\nfunction setValueM2a( gl, v ) {\\n\\n\\tvar cache = this.cache;\\n\\tvar data = flatten( v, this.size, 4 );\\n\\n\\tif ( arraysEqual( cache, data ) ) return;\\n\\n\\tgl.uniformMatrix2fv( this.addr, false, data );\\n\\n\\tthis.updateCache( data );\\n\\n}\\n\\nfunction setValueM3a( gl, v ) {\\n\\n\\tvar cache = this.cache;\\n\\tvar data = flatten( v, this.size, 9 );\\n\\n\\tif ( arraysEqual( cache, data ) ) return;\\n\\n\\tgl.uniformMatrix3fv( this.addr, false, data );\\n\\n\\tthis.updateCache( data );\\n\\n}\\n\\nfunction setValueM4a( gl, v ) {\\n\\n\\tvar cache = this.cache;\\n\\tvar data = flatten( v, this.size, 16 );\\n\\n\\tif ( arraysEqual( cache, data ) ) return;\\n\\n\\tgl.uniformMatrix4fv( this.addr, false, data );\\n\\n\\tthis.updateCache( data );\\n\\n}\\n\\n// Array of textures (2D / Cube)\\n\\nfunction setValueT1a( gl, v, renderer ) {\\n\\n\\tvar cache = this.cache;\\n\\tvar n = v.length;\\n\\n\\tvar units = allocTexUnits( renderer, n );\\n\\n\\tif ( arraysEqual( cache, units ) === false ) {\\n\\n\\t\\tgl.uniform1iv( this.addr, units );\\n\\t\\tcopyArray( cache, units );\\n\\n\\t}\\n\\n\\tfor ( var i = 0; i !== n; ++ i ) {\\n\\n\\t\\trenderer.setTexture2D( v[ i ] || emptyTexture, units[ i ] );\\n\\n\\t}\\n\\n}\\n\\nfunction setValueT6a( gl, v, renderer ) {\\n\\n\\tvar cache = this.cache;\\n\\tvar n = v.length;\\n\\n\\tvar units = allocTexUnits( renderer, n );\\n\\n\\tif ( arraysEqual( cache, units ) === false ) {\\n\\n\\t\\tgl.uniform1iv( this.addr, units );\\n\\t\\tcopyArray( cache, units );\\n\\n\\t}\\n\\n\\tfor ( var i = 0; i !== n; ++ i ) {\\n\\n\\t\\trenderer.setTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );\\n\\n\\t}\\n\\n}\\n\\n// Helper to pick the right setter for a pure (bottom-level) array\\n\\nfunction getPureArraySetter( type ) {\\n\\n\\tswitch ( type ) {\\n\\n\\t\\tcase 0x1406: return setValue1fv; // FLOAT\\n\\t\\tcase 0x8b50: return setValueV2a; // _VEC2\\n\\t\\tcase 0x8b51: return setValueV3a; // _VEC3\\n\\t\\tcase 0x8b52: return setValueV4a; // _VEC4\\n\\n\\t\\tcase 0x8b5a: return setValueM2a; // _MAT2\\n\\t\\tcase 0x8b5b: return setValueM3a; // _MAT3\\n\\t\\tcase 0x8b5c: return setValueM4a; // _MAT4\\n\\n\\t\\tcase 0x8b5e: return setValueT1a; // SAMPLER_2D\\n\\t\\tcase 0x8b60: return setValueT6a; // SAMPLER_CUBE\\n\\n\\t\\tcase 0x1404: case 0x8b56: return setValue1iv; // INT, BOOL\\n\\t\\tcase 0x8b53: case 0x8b57: return setValue2iv; // _VEC2\\n\\t\\tcase 0x8b54: case 0x8b58: return setValue3iv; // _VEC3\\n\\t\\tcase 0x8b55: case 0x8b59: return setValue4iv; // _VEC4\\n\\n\\t}\\n\\n}\\n\\n// --- Uniform Classes ---\\n\\nfunction SingleUniform( id, activeInfo, addr ) {\\n\\n\\tthis.id = id;\\n\\tthis.addr = addr;\\n\\tthis.cache = [];\\n\\tthis.setValue = getSingularSetter( activeInfo.type );\\n\\n\\t// this.path = activeInfo.name; // DEBUG\\n\\n}\\n\\nfunction PureArrayUniform( id, activeInfo, addr ) {\\n\\n\\tthis.id = id;\\n\\tthis.addr = addr;\\n\\tthis.cache = [];\\n\\tthis.size = activeInfo.size;\\n\\tthis.setValue = getPureArraySetter( activeInfo.type );\\n\\n\\t// this.path = activeInfo.name; // DEBUG\\n\\n}\\n\\nPureArrayUniform.prototype.updateCache = function ( data ) {\\n\\n\\tvar cache = this.cache;\\n\\n\\tif ( data instanceof Float32Array && cache.length !== data.length ) {\\n\\n\\t\\tthis.cache = new Float32Array( data.length );\\n\\n\\t}\\n\\n\\tcopyArray( cache, data );\\n\\n};\\n\\nfunction StructuredUniform( id ) {\\n\\n\\tthis.id = id;\\n\\n\\tUniformContainer.call( this ); // mix-in\\n\\n}\\n\\nStructuredUniform.prototype.setValue = function ( gl, value, renderer ) {\\n\\n\\tvar seq = this.seq;\\n\\n\\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\\n\\n\\t\\tvar u = seq[ i ];\\n\\t\\tu.setValue( gl, value[ u.id ], renderer );\\n\\n\\t}\\n\\n};\\n\\n// --- Top-level ---\\n\\n// Parser - builds up the property tree from the path strings\\n\\nvar RePathPart = /([\\\\w\\\\d_]+)(\\\\])?(\\\\[|\\\\.)?/g;\\n\\n// extracts\\n// \\t- the identifier (member name or array index)\\n//  - followed by an optional right bracket (found when array index)\\n//  - followed by an optional left bracket or dot (type of subscript)\\n//\\n// Note: These portions can be read in a non-overlapping fashion and\\n// allow straightforward parsing of the hierarchy that WebGL encodes\\n// in the uniform names.\\n\\nfunction addUniform( container, uniformObject ) {\\n\\n\\tcontainer.seq.push( uniformObject );\\n\\tcontainer.map[ uniformObject.id ] = uniformObject;\\n\\n}\\n\\nfunction parseUniform( activeInfo, addr, container ) {\\n\\n\\tvar path = activeInfo.name,\\n\\t\\tpathLength = path.length;\\n\\n\\t// reset RegExp object, because of the early exit of a previous run\\n\\tRePathPart.lastIndex = 0;\\n\\n\\twhile ( true ) {\\n\\n\\t\\tvar match = RePathPart.exec( path ),\\n\\t\\t\\tmatchEnd = RePathPart.lastIndex,\\n\\n\\t\\t\\tid = match[ 1 ],\\n\\t\\t\\tidIsIndex = match[ 2 ] === ']',\\n\\t\\t\\tsubscript = match[ 3 ];\\n\\n\\t\\tif ( idIsIndex ) id = id | 0; // convert to integer\\n\\n\\t\\tif ( subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength ) {\\n\\n\\t\\t\\t// bare name or \\\"pure\\\" bottom-level array \\\"[0]\\\" suffix\\n\\n\\t\\t\\taddUniform( container, subscript === undefined ?\\n\\t\\t\\t\\tnew SingleUniform( id, activeInfo, addr ) :\\n\\t\\t\\t\\tnew PureArrayUniform( id, activeInfo, addr ) );\\n\\n\\t\\t\\tbreak;\\n\\n\\t\\t} else {\\n\\n\\t\\t\\t// step into inner node / create it in case it doesn't exist\\n\\n\\t\\t\\tvar map = container.map, next = map[ id ];\\n\\n\\t\\t\\tif ( next === undefined ) {\\n\\n\\t\\t\\t\\tnext = new StructuredUniform( id );\\n\\t\\t\\t\\taddUniform( container, next );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tcontainer = next;\\n\\n\\t\\t}\\n\\n\\t}\\n\\n}\\n\\n// Root Container\\n\\nfunction WebGLUniforms( gl, program, renderer ) {\\n\\n\\tUniformContainer.call( this );\\n\\n\\tthis.renderer = renderer;\\n\\n\\tvar n = gl.getProgramParameter( program, 35718 );\\n\\n\\tfor ( var i = 0; i < n; ++ i ) {\\n\\n\\t\\tvar info = gl.getActiveUniform( program, i ),\\n\\t\\t\\taddr = gl.getUniformLocation( program, info.name );\\n\\n\\t\\tparseUniform( info, addr, this );\\n\\n\\t}\\n\\n}\\n\\nWebGLUniforms.prototype.setValue = function ( gl, name, value ) {\\n\\n\\tvar u = this.map[ name ];\\n\\n\\tif ( u !== undefined ) u.setValue( gl, value, this.renderer );\\n\\n};\\n\\nWebGLUniforms.prototype.setOptional = function ( gl, object, name ) {\\n\\n\\tvar v = object[ name ];\\n\\n\\tif ( v !== undefined ) this.setValue( gl, name, v );\\n\\n};\\n\\n\\n// Static interface\\n\\nWebGLUniforms.upload = function ( gl, seq, values, renderer ) {\\n\\n\\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\\n\\n\\t\\tvar u = seq[ i ],\\n\\t\\t\\tv = values[ u.id ];\\n\\n\\t\\tif ( v.needsUpdate !== false ) {\\n\\n\\t\\t\\t// note: always updating when .needsUpdate is undefined\\n\\t\\t\\tu.setValue( gl, v.value, renderer );\\n\\n\\t\\t}\\n\\n\\t}\\n\\n};\\n\\nWebGLUniforms.seqWithValue = function ( seq, values ) {\\n\\n\\tvar r = [];\\n\\n\\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\\n\\n\\t\\tvar u = seq[ i ];\\n\\t\\tif ( u.id in values ) r.push( u );\\n\\n\\t}\\n\\n\\treturn r;\\n\\n};\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\nfunction addLineNumbers( string ) {\\n\\n\\tvar lines = string.split( '\\\\n' );\\n\\n\\tfor ( var i = 0; i < lines.length; i ++ ) {\\n\\n\\t\\tlines[ i ] = ( i + 1 ) + ': ' + lines[ i ];\\n\\n\\t}\\n\\n\\treturn lines.join( '\\\\n' );\\n\\n}\\n\\nfunction WebGLShader( gl, type, string ) {\\n\\n\\tvar shader = gl.createShader( type );\\n\\n\\tgl.shaderSource( shader, string );\\n\\tgl.compileShader( shader );\\n\\n\\tif ( gl.getShaderParameter( shader, 35713 ) === false ) {\\n\\n\\t\\tconsole.error( 'THREE.WebGLShader: Shader couldn\\\\'t compile.' );\\n\\n\\t}\\n\\n\\tif ( gl.getShaderInfoLog( shader ) !== '' ) {\\n\\n\\t\\tconsole.warn( 'THREE.WebGLShader: gl.getShaderInfoLog()', type === 35633 ? 'vertex' : 'fragment', gl.getShaderInfoLog( shader ), addLineNumbers( string ) );\\n\\n\\t}\\n\\n\\t// --enable-privileged-webgl-extension\\n\\t// console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\\n\\n\\treturn shader;\\n\\n}\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\nvar programIdCount = 0;\\n\\nfunction getEncodingComponents( encoding ) {\\n\\n\\tswitch ( encoding ) {\\n\\n\\t\\tcase LinearEncoding:\\n\\t\\t\\treturn [ 'Linear', '( value )' ];\\n\\t\\tcase sRGBEncoding:\\n\\t\\t\\treturn [ 'sRGB', '( value )' ];\\n\\t\\tcase RGBEEncoding:\\n\\t\\t\\treturn [ 'RGBE', '( value )' ];\\n\\t\\tcase RGBM7Encoding:\\n\\t\\t\\treturn [ 'RGBM', '( value, 7.0 )' ];\\n\\t\\tcase RGBM16Encoding:\\n\\t\\t\\treturn [ 'RGBM', '( value, 16.0 )' ];\\n\\t\\tcase RGBDEncoding:\\n\\t\\t\\treturn [ 'RGBD', '( value, 256.0 )' ];\\n\\t\\tcase GammaEncoding:\\n\\t\\t\\treturn [ 'Gamma', '( value, float( GAMMA_FACTOR ) )' ];\\n\\t\\tdefault:\\n\\t\\t\\tthrow new Error( 'unsupported encoding: ' + encoding );\\n\\n\\t}\\n\\n}\\n\\nfunction getTexelDecodingFunction( functionName, encoding ) {\\n\\n\\tvar components = getEncodingComponents( encoding );\\n\\treturn 'vec4 ' + functionName + '( vec4 value ) { return ' + components[ 0 ] + 'ToLinear' + components[ 1 ] + '; }';\\n\\n}\\n\\nfunction getTexelEncodingFunction( functionName, encoding ) {\\n\\n\\tvar components = getEncodingComponents( encoding );\\n\\treturn 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[ 0 ] + components[ 1 ] + '; }';\\n\\n}\\n\\nfunction getToneMappingFunction( functionName, toneMapping ) {\\n\\n\\tvar toneMappingName;\\n\\n\\tswitch ( toneMapping ) {\\n\\n\\t\\tcase LinearToneMapping:\\n\\t\\t\\ttoneMappingName = 'Linear';\\n\\t\\t\\tbreak;\\n\\n\\t\\tcase ReinhardToneMapping:\\n\\t\\t\\ttoneMappingName = 'Reinhard';\\n\\t\\t\\tbreak;\\n\\n\\t\\tcase Uncharted2ToneMapping:\\n\\t\\t\\ttoneMappingName = 'Uncharted2';\\n\\t\\t\\tbreak;\\n\\n\\t\\tcase CineonToneMapping:\\n\\t\\t\\ttoneMappingName = 'OptimizedCineon';\\n\\t\\t\\tbreak;\\n\\n\\t\\tcase ACESFilmicToneMapping:\\n\\t\\t\\ttoneMappingName = 'ACESFilmic';\\n\\t\\t\\tbreak;\\n\\n\\t\\tdefault:\\n\\t\\t\\tthrow new Error( 'unsupported toneMapping: ' + toneMapping );\\n\\n\\t}\\n\\n\\treturn 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';\\n\\n}\\n\\nfunction generateExtensions( extensions, parameters, rendererExtensions ) {\\n\\n\\textensions = extensions || {};\\n\\n\\tvar chunks = [\\n\\t\\t( extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || ( parameters.normalMap && ! parameters.objectSpaceNormalMap ) || parameters.flatShading ) ? '#extension GL_OES_standard_derivatives : enable' : '',\\n\\t\\t( extensions.fragDepth || parameters.logarithmicDepthBuffer ) && rendererExtensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',\\n\\t\\t( extensions.drawBuffers ) && rendererExtensions.get( 'WEBGL_draw_buffers' ) ? '#extension GL_EXT_draw_buffers : require' : '',\\n\\t\\t( extensions.shaderTextureLOD || parameters.envMap ) && rendererExtensions.get( 'EXT_shader_texture_lod' ) ? '#extension GL_EXT_shader_texture_lod : enable' : ''\\n\\t];\\n\\n\\treturn chunks.filter( filterEmptyLine ).join( '\\\\n' );\\n\\n}\\n\\nfunction generateDefines( defines ) {\\n\\n\\tvar chunks = [];\\n\\n\\tfor ( var name in defines ) {\\n\\n\\t\\tvar value = defines[ name ];\\n\\n\\t\\tif ( value === false ) continue;\\n\\n\\t\\tchunks.push( '#define ' + name + ' ' + value );\\n\\n\\t}\\n\\n\\treturn chunks.join( '\\\\n' );\\n\\n}\\n\\nfunction fetchAttributeLocations( gl, program ) {\\n\\n\\tvar attributes = {};\\n\\n\\tvar n = gl.getProgramParameter( program, 35721 );\\n\\n\\tfor ( var i = 0; i < n; i ++ ) {\\n\\n\\t\\tvar info = gl.getActiveAttrib( program, i );\\n\\t\\tvar name = info.name;\\n\\n\\t\\t// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );\\n\\n\\t\\tattributes[ name ] = gl.getAttribLocation( program, name );\\n\\n\\t}\\n\\n\\treturn attributes;\\n\\n}\\n\\nfunction filterEmptyLine( string ) {\\n\\n\\treturn string !== '';\\n\\n}\\n\\nfunction replaceLightNums( string, parameters ) {\\n\\n\\treturn string\\n\\t\\t.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )\\n\\t\\t.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )\\n\\t\\t.replace( /NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights )\\n\\t\\t.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )\\n\\t\\t.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights );\\n\\n}\\n\\nfunction replaceClippingPlaneNums( string, parameters ) {\\n\\n\\treturn string\\n\\t\\t.replace( /NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes )\\n\\t\\t.replace( /UNION_CLIPPING_PLANES/g, ( parameters.numClippingPlanes - parameters.numClipIntersection ) );\\n\\n}\\n\\nfunction parseIncludes( string ) {\\n\\n\\tvar pattern = /^[ \\\\t]*#include +<([\\\\w\\\\d./]+)>/gm;\\n\\n\\tfunction replace( match, include ) {\\n\\n\\t\\tvar replace = ShaderChunk[ include ];\\n\\n\\t\\tif ( replace === undefined ) {\\n\\n\\t\\t\\tthrow new Error( 'Can not resolve #include <' + include + '>' );\\n\\n\\t\\t}\\n\\n\\t\\treturn parseIncludes( replace );\\n\\n\\t}\\n\\n\\treturn string.replace( pattern, replace );\\n\\n}\\n\\nfunction unrollLoops( string ) {\\n\\n\\tvar pattern = /#pragma unroll_loop[\\\\s]+?for \\\\( int i \\\\= (\\\\d+)\\\\; i < (\\\\d+)\\\\; i \\\\+\\\\+ \\\\) \\\\{([\\\\s\\\\S]+?)(?=\\\\})\\\\}/g;\\n\\n\\tfunction replace( match, start, end, snippet ) {\\n\\n\\t\\tvar unroll = '';\\n\\n\\t\\tfor ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {\\n\\n\\t\\t\\tunroll += snippet.replace( /\\\\[ i \\\\]/g, '[ ' + i + ' ]' );\\n\\n\\t\\t}\\n\\n\\t\\treturn unroll;\\n\\n\\t}\\n\\n\\treturn string.replace( pattern, replace );\\n\\n}\\n\\nfunction WebGLProgram( renderer, extensions, code, material, shader, parameters, capabilities ) {\\n\\n\\tvar gl = renderer.context;\\n\\n\\tvar defines = material.defines;\\n\\n\\tvar vertexShader = shader.vertexShader;\\n\\tvar fragmentShader = shader.fragmentShader;\\n\\n\\tvar shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\\n\\n\\tif ( parameters.shadowMapType === PCFShadowMap ) {\\n\\n\\t\\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\\n\\n\\t} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {\\n\\n\\t\\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\\n\\n\\t}\\n\\n\\tvar envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\\n\\tvar envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\\n\\tvar envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\\n\\n\\tif ( parameters.envMap ) {\\n\\n\\t\\tswitch ( material.envMap.mapping ) {\\n\\n\\t\\t\\tcase CubeReflectionMapping:\\n\\t\\t\\tcase CubeRefractionMapping:\\n\\t\\t\\t\\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase CubeUVReflectionMapping:\\n\\t\\t\\tcase CubeUVRefractionMapping:\\n\\t\\t\\t\\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase EquirectangularReflectionMapping:\\n\\t\\t\\tcase EquirectangularRefractionMapping:\\n\\t\\t\\t\\tenvMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase SphericalReflectionMapping:\\n\\t\\t\\t\\tenvMapTypeDefine = 'ENVMAP_TYPE_SPHERE';\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t}\\n\\n\\t\\tswitch ( material.envMap.mapping ) {\\n\\n\\t\\t\\tcase CubeRefractionMapping:\\n\\t\\t\\tcase EquirectangularRefractionMapping:\\n\\t\\t\\t\\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t}\\n\\n\\t\\tswitch ( material.combine ) {\\n\\n\\t\\t\\tcase MultiplyOperation:\\n\\t\\t\\t\\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase MixOperation:\\n\\t\\t\\t\\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase AddOperation:\\n\\t\\t\\t\\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tvar gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;\\n\\n\\t// console.log( 'building new program ' );\\n\\n\\t//\\n\\n\\tvar customExtensions = capabilities.isWebGL2 ? '' : generateExtensions( material.extensions, parameters, extensions );\\n\\n\\tvar customDefines = generateDefines( defines );\\n\\n\\t//\\n\\n\\tvar program = gl.createProgram();\\n\\n\\tvar prefixVertex, prefixFragment;\\n\\n\\tif ( material.isRawShaderMaterial ) {\\n\\n\\t\\tprefixVertex = [\\n\\n\\t\\t\\tcustomDefines\\n\\n\\t\\t].filter( filterEmptyLine ).join( '\\\\n' );\\n\\n\\t\\tif ( prefixVertex.length > 0 ) {\\n\\n\\t\\t\\tprefixVertex += '\\\\n';\\n\\n\\t\\t}\\n\\n\\t\\tprefixFragment = [\\n\\n\\t\\t\\tcustomExtensions,\\n\\t\\t\\tcustomDefines\\n\\n\\t\\t].filter( filterEmptyLine ).join( '\\\\n' );\\n\\n\\t\\tif ( prefixFragment.length > 0 ) {\\n\\n\\t\\t\\tprefixFragment += '\\\\n';\\n\\n\\t\\t}\\n\\n\\t} else {\\n\\n\\t\\tprefixVertex = [\\n\\n\\t\\t\\t'precision ' + parameters.precision + ' float;',\\n\\t\\t\\t'precision ' + parameters.precision + ' int;',\\n\\n\\t\\t\\t'#define SHADER_NAME ' + shader.name,\\n\\n\\t\\t\\tcustomDefines,\\n\\n\\t\\t\\tparameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',\\n\\n\\t\\t\\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\\n\\n\\t\\t\\t'#define MAX_BONES ' + parameters.maxBones,\\n\\t\\t\\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\\n\\t\\t\\t( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',\\n\\n\\t\\t\\tparameters.map ? '#define USE_MAP' : '',\\n\\t\\t\\tparameters.envMap ? '#define USE_ENVMAP' : '',\\n\\t\\t\\tparameters.envMap ? '#define ' + envMapModeDefine : '',\\n\\t\\t\\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\\n\\t\\t\\tparameters.aoMap ? '#define USE_AOMAP' : '',\\n\\t\\t\\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\\n\\t\\t\\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\\n\\t\\t\\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\\n\\t\\t\\t( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',\\n\\t\\t\\tparameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',\\n\\t\\t\\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\\n\\t\\t\\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\\n\\t\\t\\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\\n\\t\\t\\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\\n\\t\\t\\tparameters.vertexColors ? '#define USE_COLOR' : '',\\n\\n\\t\\t\\tparameters.flatShading ? '#define FLAT_SHADED' : '',\\n\\n\\t\\t\\tparameters.skinning ? '#define USE_SKINNING' : '',\\n\\t\\t\\tparameters.useVertexTexture ? '#define BONE_TEXTURE' : '',\\n\\n\\t\\t\\tparameters.morphTargets ? '#define USE_MORPHTARGETS' : '',\\n\\t\\t\\tparameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',\\n\\t\\t\\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\\n\\t\\t\\tparameters.flipSided ? '#define FLIP_SIDED' : '',\\n\\n\\t\\t\\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\\n\\t\\t\\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\\n\\n\\t\\t\\tparameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',\\n\\n\\t\\t\\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\\n\\t\\t\\tparameters.logarithmicDepthBuffer && ( capabilities.isWebGL2 || extensions.get( 'EXT_frag_depth' ) ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\\n\\n\\t\\t\\t'uniform mat4 modelMatrix;',\\n\\t\\t\\t'uniform mat4 modelViewMatrix;',\\n\\t\\t\\t'uniform mat4 projectionMatrix;',\\n\\t\\t\\t'uniform mat4 viewMatrix;',\\n\\t\\t\\t'uniform mat3 normalMatrix;',\\n\\t\\t\\t'uniform vec3 cameraPosition;',\\n\\n\\t\\t\\t'attribute vec3 position;',\\n\\t\\t\\t'attribute vec3 normal;',\\n\\t\\t\\t'attribute vec2 uv;',\\n\\n\\t\\t\\t'#ifdef USE_COLOR',\\n\\n\\t\\t\\t'\\tattribute vec3 color;',\\n\\n\\t\\t\\t'#endif',\\n\\n\\t\\t\\t'#ifdef USE_MORPHTARGETS',\\n\\n\\t\\t\\t'\\tattribute vec3 morphTarget0;',\\n\\t\\t\\t'\\tattribute vec3 morphTarget1;',\\n\\t\\t\\t'\\tattribute vec3 morphTarget2;',\\n\\t\\t\\t'\\tattribute vec3 morphTarget3;',\\n\\n\\t\\t\\t'\\t#ifdef USE_MORPHNORMALS',\\n\\n\\t\\t\\t'\\t\\tattribute vec3 morphNormal0;',\\n\\t\\t\\t'\\t\\tattribute vec3 morphNormal1;',\\n\\t\\t\\t'\\t\\tattribute vec3 morphNormal2;',\\n\\t\\t\\t'\\t\\tattribute vec3 morphNormal3;',\\n\\n\\t\\t\\t'\\t#else',\\n\\n\\t\\t\\t'\\t\\tattribute vec3 morphTarget4;',\\n\\t\\t\\t'\\t\\tattribute vec3 morphTarget5;',\\n\\t\\t\\t'\\t\\tattribute vec3 morphTarget6;',\\n\\t\\t\\t'\\t\\tattribute vec3 morphTarget7;',\\n\\n\\t\\t\\t'\\t#endif',\\n\\n\\t\\t\\t'#endif',\\n\\n\\t\\t\\t'#ifdef USE_SKINNING',\\n\\n\\t\\t\\t'\\tattribute vec4 skinIndex;',\\n\\t\\t\\t'\\tattribute vec4 skinWeight;',\\n\\n\\t\\t\\t'#endif',\\n\\n\\t\\t\\t'\\\\n'\\n\\n\\t\\t].filter( filterEmptyLine ).join( '\\\\n' );\\n\\n\\t\\tprefixFragment = [\\n\\n\\t\\t\\tcustomExtensions,\\n\\n\\t\\t\\t'precision ' + parameters.precision + ' float;',\\n\\t\\t\\t'precision ' + parameters.precision + ' int;',\\n\\n\\t\\t\\t'#define SHADER_NAME ' + shader.name,\\n\\n\\t\\t\\tcustomDefines,\\n\\n\\t\\t\\tparameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest + ( parameters.alphaTest % 1 ? '' : '.0' ) : '', // add '.0' if integer\\n\\n\\t\\t\\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\\n\\n\\t\\t\\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\\n\\t\\t\\t( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',\\n\\n\\t\\t\\tparameters.map ? '#define USE_MAP' : '',\\n\\t\\t\\tparameters.matcap ? '#define USE_MATCAP' : '',\\n\\t\\t\\tparameters.envMap ? '#define USE_ENVMAP' : '',\\n\\t\\t\\tparameters.envMap ? '#define ' + envMapTypeDefine : '',\\n\\t\\t\\tparameters.envMap ? '#define ' + envMapModeDefine : '',\\n\\t\\t\\tparameters.envMap ? '#define ' + envMapBlendingDefine : '',\\n\\t\\t\\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\\n\\t\\t\\tparameters.aoMap ? '#define USE_AOMAP' : '',\\n\\t\\t\\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\\n\\t\\t\\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\\n\\t\\t\\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\\n\\t\\t\\t( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',\\n\\t\\t\\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\\n\\t\\t\\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\\n\\t\\t\\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\\n\\t\\t\\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\\n\\t\\t\\tparameters.vertexColors ? '#define USE_COLOR' : '',\\n\\n\\t\\t\\tparameters.gradientMap ? '#define USE_GRADIENTMAP' : '',\\n\\n\\t\\t\\tparameters.flatShading ? '#define FLAT_SHADED' : '',\\n\\n\\t\\t\\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\\n\\t\\t\\tparameters.flipSided ? '#define FLIP_SIDED' : '',\\n\\n\\t\\t\\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\\n\\t\\t\\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\\n\\n\\t\\t\\tparameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',\\n\\n\\t\\t\\tparameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '',\\n\\n\\t\\t\\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\\n\\t\\t\\tparameters.logarithmicDepthBuffer && ( capabilities.isWebGL2 || extensions.get( 'EXT_frag_depth' ) ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\\n\\n\\t\\t\\tparameters.envMap && ( capabilities.isWebGL2 || extensions.get( 'EXT_shader_texture_lod' ) ) ? '#define TEXTURE_LOD_EXT' : '',\\n\\n\\t\\t\\t'uniform mat4 viewMatrix;',\\n\\t\\t\\t'uniform vec3 cameraPosition;',\\n\\n\\t\\t\\t( parameters.toneMapping !== NoToneMapping ) ? '#define TONE_MAPPING' : '',\\n\\t\\t\\t( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '', // this code is required here because it is used by the toneMapping() function defined below\\n\\t\\t\\t( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( 'toneMapping', parameters.toneMapping ) : '',\\n\\n\\t\\t\\tparameters.dithering ? '#define DITHERING' : '',\\n\\n\\t\\t\\t( parameters.outputEncoding || parameters.mapEncoding || parameters.matcapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding ) ?\\n\\t\\t\\t\\tShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below\\n\\t\\t\\tparameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',\\n\\t\\t\\tparameters.matcapEncoding ? getTexelDecodingFunction( 'matcapTexelToLinear', parameters.matcapEncoding ) : '',\\n\\t\\t\\tparameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',\\n\\t\\t\\tparameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',\\n\\t\\t\\tparameters.outputEncoding ? getTexelEncodingFunction( 'linearToOutputTexel', parameters.outputEncoding ) : '',\\n\\n\\t\\t\\tparameters.depthPacking ? '#define DEPTH_PACKING ' + material.depthPacking : '',\\n\\n\\t\\t\\t'\\\\n'\\n\\n\\t\\t].filter( filterEmptyLine ).join( '\\\\n' );\\n\\n\\t}\\n\\n\\tvertexShader = parseIncludes( vertexShader );\\n\\tvertexShader = replaceLightNums( vertexShader, parameters );\\n\\tvertexShader = replaceClippingPlaneNums( vertexShader, parameters );\\n\\n\\tfragmentShader = parseIncludes( fragmentShader );\\n\\tfragmentShader = replaceLightNums( fragmentShader, parameters );\\n\\tfragmentShader = replaceClippingPlaneNums( fragmentShader, parameters );\\n\\n\\tvertexShader = unrollLoops( vertexShader );\\n\\tfragmentShader = unrollLoops( fragmentShader );\\n\\n\\tif ( capabilities.isWebGL2 && ! material.isRawShaderMaterial ) {\\n\\n\\t\\tvar isGLSL3ShaderMaterial = false;\\n\\n\\t\\tvar versionRegex = /^\\\\s*#version\\\\s+300\\\\s+es\\\\s*\\\\n/;\\n\\n\\t\\tif ( material.isShaderMaterial &&\\n\\t\\t\\tvertexShader.match( versionRegex ) !== null &&\\n\\t\\t\\tfragmentShader.match( versionRegex ) !== null ) {\\n\\n\\t\\t\\tisGLSL3ShaderMaterial = true;\\n\\n\\t\\t\\tvertexShader = vertexShader.replace( versionRegex, '' );\\n\\t\\t\\tfragmentShader = fragmentShader.replace( versionRegex, '' );\\n\\n\\t\\t}\\n\\n\\t\\t// GLSL 3.0 conversion\\n\\t\\tprefixVertex = [\\n\\t\\t\\t'#version 300 es\\\\n',\\n\\t\\t\\t'#define attribute in',\\n\\t\\t\\t'#define varying out',\\n\\t\\t\\t'#define texture2D texture'\\n\\t\\t].join( '\\\\n' ) + '\\\\n' + prefixVertex;\\n\\n\\t\\tprefixFragment = [\\n\\t\\t\\t'#version 300 es\\\\n',\\n\\t\\t\\t'#define varying in',\\n\\t\\t\\tisGLSL3ShaderMaterial ? '' : 'out highp vec4 pc_fragColor;',\\n\\t\\t\\tisGLSL3ShaderMaterial ? '' : '#define gl_FragColor pc_fragColor',\\n\\t\\t\\t'#define gl_FragDepthEXT gl_FragDepth',\\n\\t\\t\\t'#define texture2D texture',\\n\\t\\t\\t'#define textureCube texture',\\n\\t\\t\\t'#define texture2DProj textureProj',\\n\\t\\t\\t'#define texture2DLodEXT textureLod',\\n\\t\\t\\t'#define texture2DProjLodEXT textureProjLod',\\n\\t\\t\\t'#define textureCubeLodEXT textureLod',\\n\\t\\t\\t'#define texture2DGradEXT textureGrad',\\n\\t\\t\\t'#define texture2DProjGradEXT textureProjGrad',\\n\\t\\t\\t'#define textureCubeGradEXT textureGrad'\\n\\t\\t].join( '\\\\n' ) + '\\\\n' + prefixFragment;\\n\\n\\t}\\n\\n\\tvar vertexGlsl = prefixVertex + vertexShader;\\n\\tvar fragmentGlsl = prefixFragment + fragmentShader;\\n\\n\\t// console.log( '*VERTEX*', vertexGlsl );\\n\\t// console.log( '*FRAGMENT*', fragmentGlsl );\\n\\n\\tvar glVertexShader = WebGLShader( gl, 35633, vertexGlsl );\\n\\tvar glFragmentShader = WebGLShader( gl, 35632, fragmentGlsl );\\n\\n\\tgl.attachShader( program, glVertexShader );\\n\\tgl.attachShader( program, glFragmentShader );\\n\\n\\t// Force a particular attribute to index 0.\\n\\n\\tif ( material.index0AttributeName !== undefined ) {\\n\\n\\t\\tgl.bindAttribLocation( program, 0, material.index0AttributeName );\\n\\n\\t} else if ( parameters.morphTargets === true ) {\\n\\n\\t\\t// programs with morphTargets displace position out of attribute 0\\n\\t\\tgl.bindAttribLocation( program, 0, 'position' );\\n\\n\\t}\\n\\n\\tgl.linkProgram( program );\\n\\n\\tvar programLog = gl.getProgramInfoLog( program ).trim();\\n\\tvar vertexLog = gl.getShaderInfoLog( glVertexShader ).trim();\\n\\tvar fragmentLog = gl.getShaderInfoLog( glFragmentShader ).trim();\\n\\n\\tvar runnable = true;\\n\\tvar haveDiagnostics = true;\\n\\n\\t// console.log( '**VERTEX**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glVertexShader ) );\\n\\t// console.log( '**FRAGMENT**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glFragmentShader ) );\\n\\n\\tif ( gl.getProgramParameter( program, 35714 ) === false ) {\\n\\n\\t\\trunnable = false;\\n\\n\\t\\tconsole.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), '35715', gl.getProgramParameter( program, 35715 ), 'gl.getProgramInfoLog', programLog, vertexLog, fragmentLog );\\n\\n\\t} else if ( programLog !== '' ) {\\n\\n\\t\\tconsole.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );\\n\\n\\t} else if ( vertexLog === '' || fragmentLog === '' ) {\\n\\n\\t\\thaveDiagnostics = false;\\n\\n\\t}\\n\\n\\tif ( haveDiagnostics ) {\\n\\n\\t\\tthis.diagnostics = {\\n\\n\\t\\t\\trunnable: runnable,\\n\\t\\t\\tmaterial: material,\\n\\n\\t\\t\\tprogramLog: programLog,\\n\\n\\t\\t\\tvertexShader: {\\n\\n\\t\\t\\t\\tlog: vertexLog,\\n\\t\\t\\t\\tprefix: prefixVertex\\n\\n\\t\\t\\t},\\n\\n\\t\\t\\tfragmentShader: {\\n\\n\\t\\t\\t\\tlog: fragmentLog,\\n\\t\\t\\t\\tprefix: prefixFragment\\n\\n\\t\\t\\t}\\n\\n\\t\\t};\\n\\n\\t}\\n\\n\\t// clean up\\n\\n\\tgl.deleteShader( glVertexShader );\\n\\tgl.deleteShader( glFragmentShader );\\n\\n\\t// set up caching for uniform locations\\n\\n\\tvar cachedUniforms;\\n\\n\\tthis.getUniforms = function () {\\n\\n\\t\\tif ( cachedUniforms === undefined ) {\\n\\n\\t\\t\\tcachedUniforms = new WebGLUniforms( gl, program, renderer );\\n\\n\\t\\t}\\n\\n\\t\\treturn cachedUniforms;\\n\\n\\t};\\n\\n\\t// set up caching for attribute locations\\n\\n\\tvar cachedAttributes;\\n\\n\\tthis.getAttributes = function () {\\n\\n\\t\\tif ( cachedAttributes === undefined ) {\\n\\n\\t\\t\\tcachedAttributes = fetchAttributeLocations( gl, program );\\n\\n\\t\\t}\\n\\n\\t\\treturn cachedAttributes;\\n\\n\\t};\\n\\n\\t// free resource\\n\\n\\tthis.destroy = function () {\\n\\n\\t\\tgl.deleteProgram( program );\\n\\t\\tthis.program = undefined;\\n\\n\\t};\\n\\n\\t// DEPRECATED\\n\\n\\tObject.defineProperties( this, {\\n\\n\\t\\tuniforms: {\\n\\t\\t\\tget: function () {\\n\\n\\t\\t\\t\\tconsole.warn( 'THREE.WebGLProgram: .uniforms is now .getUniforms().' );\\n\\t\\t\\t\\treturn this.getUniforms();\\n\\n\\t\\t\\t}\\n\\t\\t},\\n\\n\\t\\tattributes: {\\n\\t\\t\\tget: function () {\\n\\n\\t\\t\\t\\tconsole.warn( 'THREE.WebGLProgram: .attributes is now .getAttributes().' );\\n\\t\\t\\t\\treturn this.getAttributes();\\n\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t} );\\n\\n\\n\\t//\\n\\n\\tthis.name = shader.name;\\n\\tthis.id = programIdCount ++;\\n\\tthis.code = code;\\n\\tthis.usedTimes = 1;\\n\\tthis.program = program;\\n\\tthis.vertexShader = glVertexShader;\\n\\tthis.fragmentShader = glFragmentShader;\\n\\n\\treturn this;\\n\\n}\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\nfunction WebGLPrograms( renderer, extensions, capabilities ) {\\n\\n\\tvar programs = [];\\n\\n\\tvar shaderIDs = {\\n\\t\\tMeshDepthMaterial: 'depth',\\n\\t\\tMeshDistanceMaterial: 'distanceRGBA',\\n\\t\\tMeshNormalMaterial: 'normal',\\n\\t\\tMeshBasicMaterial: 'basic',\\n\\t\\tMeshLambertMaterial: 'lambert',\\n\\t\\tMeshPhongMaterial: 'phong',\\n\\t\\tMeshToonMaterial: 'phong',\\n\\t\\tMeshStandardMaterial: 'physical',\\n\\t\\tMeshPhysicalMaterial: 'physical',\\n\\t\\tMeshMatcapMaterial: 'matcap',\\n\\t\\tLineBasicMaterial: 'basic',\\n\\t\\tLineDashedMaterial: 'dashed',\\n\\t\\tPointsMaterial: 'points',\\n\\t\\tShadowMaterial: 'shadow',\\n\\t\\tSpriteMaterial: 'sprite'\\n\\t};\\n\\n\\tvar parameterNames = [\\n\\t\\t\\\"precision\\\", \\\"supportsVertexTextures\\\", \\\"map\\\", \\\"mapEncoding\\\", \\\"matcap\\\", \\\"matcapEncoding\\\", \\\"envMap\\\", \\\"envMapMode\\\", \\\"envMapEncoding\\\",\\n\\t\\t\\\"lightMap\\\", \\\"aoMap\\\", \\\"emissiveMap\\\", \\\"emissiveMapEncoding\\\", \\\"bumpMap\\\", \\\"normalMap\\\", \\\"objectSpaceNormalMap\\\", \\\"displacementMap\\\", \\\"specularMap\\\",\\n\\t\\t\\\"roughnessMap\\\", \\\"metalnessMap\\\", \\\"gradientMap\\\",\\n\\t\\t\\\"alphaMap\\\", \\\"combine\\\", \\\"vertexColors\\\", \\\"fog\\\", \\\"useFog\\\", \\\"fogExp\\\",\\n\\t\\t\\\"flatShading\\\", \\\"sizeAttenuation\\\", \\\"logarithmicDepthBuffer\\\", \\\"skinning\\\",\\n\\t\\t\\\"maxBones\\\", \\\"useVertexTexture\\\", \\\"morphTargets\\\", \\\"morphNormals\\\",\\n\\t\\t\\\"maxMorphTargets\\\", \\\"maxMorphNormals\\\", \\\"premultipliedAlpha\\\",\\n\\t\\t\\\"numDirLights\\\", \\\"numPointLights\\\", \\\"numSpotLights\\\", \\\"numHemiLights\\\", \\\"numRectAreaLights\\\",\\n\\t\\t\\\"shadowMapEnabled\\\", \\\"shadowMapType\\\", \\\"toneMapping\\\", 'physicallyCorrectLights',\\n\\t\\t\\\"alphaTest\\\", \\\"doubleSided\\\", \\\"flipSided\\\", \\\"numClippingPlanes\\\", \\\"numClipIntersection\\\", \\\"depthPacking\\\", \\\"dithering\\\"\\n\\t];\\n\\n\\n\\tfunction allocateBones( object ) {\\n\\n\\t\\tvar skeleton = object.skeleton;\\n\\t\\tvar bones = skeleton.bones;\\n\\n\\t\\tif ( capabilities.floatVertexTextures ) {\\n\\n\\t\\t\\treturn 1024;\\n\\n\\t\\t} else {\\n\\n\\t\\t\\t// default for when object is not specified\\n\\t\\t\\t// ( for example when prebuilding shader to be used with multiple objects )\\n\\t\\t\\t//\\n\\t\\t\\t//  - leave some extra space for other uniforms\\n\\t\\t\\t//  - limit here is ANGLE's 254 max uniform vectors\\n\\t\\t\\t//    (up to 54 should be safe)\\n\\n\\t\\t\\tvar nVertexUniforms = capabilities.maxVertexUniforms;\\n\\t\\t\\tvar nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );\\n\\n\\t\\t\\tvar maxBones = Math.min( nVertexMatrices, bones.length );\\n\\n\\t\\t\\tif ( maxBones < bones.length ) {\\n\\n\\t\\t\\t\\tconsole.warn( 'THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.' );\\n\\t\\t\\t\\treturn 0;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn maxBones;\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tfunction getTextureEncodingFromMap( map, gammaOverrideLinear ) {\\n\\n\\t\\tvar encoding;\\n\\n\\t\\tif ( ! map ) {\\n\\n\\t\\t\\tencoding = LinearEncoding;\\n\\n\\t\\t} else if ( map.isTexture ) {\\n\\n\\t\\t\\tencoding = map.encoding;\\n\\n\\t\\t} else if ( map.isWebGLRenderTarget ) {\\n\\n\\t\\t\\tconsole.warn( \\\"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\\\" );\\n\\t\\t\\tencoding = map.texture.encoding;\\n\\n\\t\\t}\\n\\n\\t\\t// add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.\\n\\t\\tif ( encoding === LinearEncoding && gammaOverrideLinear ) {\\n\\n\\t\\t\\tencoding = GammaEncoding;\\n\\n\\t\\t}\\n\\n\\t\\treturn encoding;\\n\\n\\t}\\n\\n\\tthis.getParameters = function ( material, lights, shadows, fog, nClipPlanes, nClipIntersection, object ) {\\n\\n\\t\\tvar shaderID = shaderIDs[ material.type ];\\n\\n\\t\\t// heuristics to create shader parameters according to lights in the scene\\n\\t\\t// (not to blow over maxLights budget)\\n\\n\\t\\tvar maxBones = object.isSkinnedMesh ? allocateBones( object ) : 0;\\n\\t\\tvar precision = capabilities.precision;\\n\\n\\t\\tif ( material.precision !== null ) {\\n\\n\\t\\t\\tprecision = capabilities.getMaxPrecision( material.precision );\\n\\n\\t\\t\\tif ( precision !== material.precision ) {\\n\\n\\t\\t\\t\\tconsole.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tvar currentRenderTarget = renderer.getRenderTarget();\\n\\n\\t\\tvar parameters = {\\n\\n\\t\\t\\tshaderID: shaderID,\\n\\n\\t\\t\\tprecision: precision,\\n\\t\\t\\tsupportsVertexTextures: capabilities.vertexTextures,\\n\\t\\t\\toutputEncoding: getTextureEncodingFromMap( ( ! currentRenderTarget ) ? null : currentRenderTarget.texture, renderer.gammaOutput ),\\n\\t\\t\\tmap: !! material.map,\\n\\t\\t\\tmapEncoding: getTextureEncodingFromMap( material.map, renderer.gammaInput ),\\n\\t\\t\\tmatcap: !! material.matcap,\\n\\t\\t\\tmatcapEncoding: getTextureEncodingFromMap( material.matcap, renderer.gammaInput ),\\n\\t\\t\\tenvMap: !! material.envMap,\\n\\t\\t\\tenvMapMode: material.envMap && material.envMap.mapping,\\n\\t\\t\\tenvMapEncoding: getTextureEncodingFromMap( material.envMap, renderer.gammaInput ),\\n\\t\\t\\tenvMapCubeUV: ( !! material.envMap ) && ( ( material.envMap.mapping === CubeUVReflectionMapping ) || ( material.envMap.mapping === CubeUVRefractionMapping ) ),\\n\\t\\t\\tlightMap: !! material.lightMap,\\n\\t\\t\\taoMap: !! material.aoMap,\\n\\t\\t\\temissiveMap: !! material.emissiveMap,\\n\\t\\t\\temissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap, renderer.gammaInput ),\\n\\t\\t\\tbumpMap: !! material.bumpMap,\\n\\t\\t\\tnormalMap: !! material.normalMap,\\n\\t\\t\\tobjectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,\\n\\t\\t\\tdisplacementMap: !! material.displacementMap,\\n\\t\\t\\troughnessMap: !! material.roughnessMap,\\n\\t\\t\\tmetalnessMap: !! material.metalnessMap,\\n\\t\\t\\tspecularMap: !! material.specularMap,\\n\\t\\t\\talphaMap: !! material.alphaMap,\\n\\n\\t\\t\\tgradientMap: !! material.gradientMap,\\n\\n\\t\\t\\tcombine: material.combine,\\n\\n\\t\\t\\tvertexColors: material.vertexColors,\\n\\n\\t\\t\\tfog: !! fog,\\n\\t\\t\\tuseFog: material.fog,\\n\\t\\t\\tfogExp: ( fog && fog.isFogExp2 ),\\n\\n\\t\\t\\tflatShading: material.flatShading,\\n\\n\\t\\t\\tsizeAttenuation: material.sizeAttenuation,\\n\\t\\t\\tlogarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,\\n\\n\\t\\t\\tskinning: material.skinning && maxBones > 0,\\n\\t\\t\\tmaxBones: maxBones,\\n\\t\\t\\tuseVertexTexture: capabilities.floatVertexTextures,\\n\\n\\t\\t\\tmorphTargets: material.morphTargets,\\n\\t\\t\\tmorphNormals: material.morphNormals,\\n\\t\\t\\tmaxMorphTargets: renderer.maxMorphTargets,\\n\\t\\t\\tmaxMorphNormals: renderer.maxMorphNormals,\\n\\n\\t\\t\\tnumDirLights: lights.directional.length,\\n\\t\\t\\tnumPointLights: lights.point.length,\\n\\t\\t\\tnumSpotLights: lights.spot.length,\\n\\t\\t\\tnumRectAreaLights: lights.rectArea.length,\\n\\t\\t\\tnumHemiLights: lights.hemi.length,\\n\\n\\t\\t\\tnumClippingPlanes: nClipPlanes,\\n\\t\\t\\tnumClipIntersection: nClipIntersection,\\n\\n\\t\\t\\tdithering: material.dithering,\\n\\n\\t\\t\\tshadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && shadows.length > 0,\\n\\t\\t\\tshadowMapType: renderer.shadowMap.type,\\n\\n\\t\\t\\ttoneMapping: renderer.toneMapping,\\n\\t\\t\\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\\n\\n\\t\\t\\tpremultipliedAlpha: material.premultipliedAlpha,\\n\\n\\t\\t\\talphaTest: material.alphaTest,\\n\\t\\t\\tdoubleSided: material.side === DoubleSide,\\n\\t\\t\\tflipSided: material.side === BackSide,\\n\\n\\t\\t\\tdepthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false\\n\\n\\t\\t};\\n\\n\\t\\treturn parameters;\\n\\n\\t};\\n\\n\\tthis.getProgramCode = function ( material, parameters ) {\\n\\n\\t\\tvar array = [];\\n\\n\\t\\tif ( parameters.shaderID ) {\\n\\n\\t\\t\\tarray.push( parameters.shaderID );\\n\\n\\t\\t} else {\\n\\n\\t\\t\\tarray.push( material.fragmentShader );\\n\\t\\t\\tarray.push( material.vertexShader );\\n\\n\\t\\t}\\n\\n\\t\\tif ( material.defines !== undefined ) {\\n\\n\\t\\t\\tfor ( var name in material.defines ) {\\n\\n\\t\\t\\t\\tarray.push( name );\\n\\t\\t\\t\\tarray.push( material.defines[ name ] );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tfor ( var i = 0; i < parameterNames.length; i ++ ) {\\n\\n\\t\\t\\tarray.push( parameters[ parameterNames[ i ] ] );\\n\\n\\t\\t}\\n\\n\\t\\tarray.push( material.onBeforeCompile.toString() );\\n\\n\\t\\tarray.push( renderer.gammaOutput );\\n\\n\\t\\tarray.push( renderer.gammaFactor );\\n\\n\\t\\treturn array.join();\\n\\n\\t};\\n\\n\\tthis.acquireProgram = function ( material, shader, parameters, code ) {\\n\\n\\t\\tvar program;\\n\\n\\t\\t// Check if code has been already compiled\\n\\t\\tfor ( var p = 0, pl = programs.length; p < pl; p ++ ) {\\n\\n\\t\\t\\tvar programInfo = programs[ p ];\\n\\n\\t\\t\\tif ( programInfo.code === code ) {\\n\\n\\t\\t\\t\\tprogram = programInfo;\\n\\t\\t\\t\\t++ program.usedTimes;\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tif ( program === undefined ) {\\n\\n\\t\\t\\tprogram = new WebGLProgram( renderer, extensions, code, material, shader, parameters, capabilities );\\n\\t\\t\\tprograms.push( program );\\n\\n\\t\\t}\\n\\n\\t\\treturn program;\\n\\n\\t};\\n\\n\\tthis.releaseProgram = function ( program ) {\\n\\n\\t\\tif ( -- program.usedTimes === 0 ) {\\n\\n\\t\\t\\t// Remove from unordered set\\n\\t\\t\\tvar i = programs.indexOf( program );\\n\\t\\t\\tprograms[ i ] = programs[ programs.length - 1 ];\\n\\t\\t\\tprograms.pop();\\n\\n\\t\\t\\t// Free WebGL resources\\n\\t\\t\\tprogram.destroy();\\n\\n\\t\\t}\\n\\n\\t};\\n\\n\\t// Exposed for resource monitoring & error feedback via renderer.info:\\n\\tthis.programs = programs;\\n\\n}\\n\\n/**\\n * @author fordacious / fordacious.github.io\\n */\\n\\nfunction WebGLProperties() {\\n\\n\\tvar properties = new WeakMap();\\n\\n\\tfunction get( object ) {\\n\\n\\t\\tvar map = properties.get( object );\\n\\n\\t\\tif ( map === undefined ) {\\n\\n\\t\\t\\tmap = {};\\n\\t\\t\\tproperties.set( object, map );\\n\\n\\t\\t}\\n\\n\\t\\treturn map;\\n\\n\\t}\\n\\n\\tfunction remove( object ) {\\n\\n\\t\\tproperties.delete( object );\\n\\n\\t}\\n\\n\\tfunction update( object, key, value ) {\\n\\n\\t\\tproperties.get( object )[ key ] = value;\\n\\n\\t}\\n\\n\\tfunction dispose() {\\n\\n\\t\\tproperties = new WeakMap();\\n\\n\\t}\\n\\n\\treturn {\\n\\t\\tget: get,\\n\\t\\tremove: remove,\\n\\t\\tupdate: update,\\n\\t\\tdispose: dispose\\n\\t};\\n\\n}\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\nfunction painterSortStable( a, b ) {\\n\\n\\tif ( a.groupOrder !== b.groupOrder ) {\\n\\n\\t\\treturn a.groupOrder - b.groupOrder;\\n\\n\\t} else if ( a.renderOrder !== b.renderOrder ) {\\n\\n\\t\\treturn a.renderOrder - b.renderOrder;\\n\\n\\t} else if ( a.program && b.program && a.program !== b.program ) {\\n\\n\\t\\treturn a.program.id - b.program.id;\\n\\n\\t} else if ( a.material.id !== b.material.id ) {\\n\\n\\t\\treturn a.material.id - b.material.id;\\n\\n\\t} else if ( a.z !== b.z ) {\\n\\n\\t\\treturn a.z - b.z;\\n\\n\\t} else {\\n\\n\\t\\treturn a.id - b.id;\\n\\n\\t}\\n\\n}\\n\\nfunction reversePainterSortStable( a, b ) {\\n\\n\\tif ( a.groupOrder !== b.groupOrder ) {\\n\\n\\t\\treturn a.groupOrder - b.groupOrder;\\n\\n\\t} else if ( a.renderOrder !== b.renderOrder ) {\\n\\n\\t\\treturn a.renderOrder - b.renderOrder;\\n\\n\\t} if ( a.z !== b.z ) {\\n\\n\\t\\treturn b.z - a.z;\\n\\n\\t} else {\\n\\n\\t\\treturn a.id - b.id;\\n\\n\\t}\\n\\n}\\n\\n\\nfunction WebGLRenderList() {\\n\\n\\tvar renderItems = [];\\n\\tvar renderItemsIndex = 0;\\n\\n\\tvar opaque = [];\\n\\tvar transparent = [];\\n\\n\\tfunction init() {\\n\\n\\t\\trenderItemsIndex = 0;\\n\\n\\t\\topaque.length = 0;\\n\\t\\ttransparent.length = 0;\\n\\n\\t}\\n\\n\\tfunction getNextRenderItem( object, geometry, material, groupOrder, z, group ) {\\n\\n\\t\\tvar renderItem = renderItems[ renderItemsIndex ];\\n\\n\\t\\tif ( renderItem === undefined ) {\\n\\n\\t\\t\\trenderItem = {\\n\\t\\t\\t\\tid: object.id,\\n\\t\\t\\t\\tobject: object,\\n\\t\\t\\t\\tgeometry: geometry,\\n\\t\\t\\t\\tmaterial: material,\\n\\t\\t\\t\\tprogram: material.program,\\n\\t\\t\\t\\tgroupOrder: groupOrder,\\n\\t\\t\\t\\trenderOrder: object.renderOrder,\\n\\t\\t\\t\\tz: z,\\n\\t\\t\\t\\tgroup: group\\n\\t\\t\\t};\\n\\n\\t\\t\\trenderItems[ renderItemsIndex ] = renderItem;\\n\\n\\t\\t} else {\\n\\n\\t\\t\\trenderItem.id = object.id;\\n\\t\\t\\trenderItem.object = object;\\n\\t\\t\\trenderItem.geometry = geometry;\\n\\t\\t\\trenderItem.material = material;\\n\\t\\t\\trenderItem.program = material.program;\\n\\t\\t\\trenderItem.groupOrder = groupOrder;\\n\\t\\t\\trenderItem.renderOrder = object.renderOrder;\\n\\t\\t\\trenderItem.z = z;\\n\\t\\t\\trenderItem.group = group;\\n\\n\\t\\t}\\n\\n\\t\\trenderItemsIndex ++;\\n\\n\\t\\treturn renderItem;\\n\\n\\t}\\n\\n\\tfunction push( object, geometry, material, groupOrder, z, group ) {\\n\\n\\t\\tvar renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );\\n\\n\\t\\t( material.transparent === true ? transparent : opaque ).push( renderItem );\\n\\n\\t}\\n\\n\\tfunction unshift( object, geometry, material, groupOrder, z, group ) {\\n\\n\\t\\tvar renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );\\n\\n\\t\\t( material.transparent === true ? transparent : opaque ).unshift( renderItem );\\n\\n\\t}\\n\\n\\tfunction sort() {\\n\\n\\t\\tif ( opaque.length > 1 ) opaque.sort( painterSortStable );\\n\\t\\tif ( transparent.length > 1 ) transparent.sort( reversePainterSortStable );\\n\\n\\t}\\n\\n\\treturn {\\n\\t\\topaque: opaque,\\n\\t\\ttransparent: transparent,\\n\\n\\t\\tinit: init,\\n\\t\\tpush: push,\\n\\t\\tunshift: unshift,\\n\\n\\t\\tsort: sort\\n\\t};\\n\\n}\\n\\nfunction WebGLRenderLists() {\\n\\n\\tvar lists = {};\\n\\n\\tfunction onSceneDispose( event ) {\\n\\n\\t\\tvar scene = event.target;\\n\\n\\t\\tscene.removeEventListener( 'dispose', onSceneDispose );\\n\\n\\t\\tdelete lists[ scene.id ];\\n\\n\\t}\\n\\n\\tfunction get( scene, camera ) {\\n\\n\\t\\tvar cameras = lists[ scene.id ];\\n\\t\\tvar list;\\n\\t\\tif ( cameras === undefined ) {\\n\\n\\t\\t\\tlist = new WebGLRenderList();\\n\\t\\t\\tlists[ scene.id ] = {};\\n\\t\\t\\tlists[ scene.id ][ camera.id ] = list;\\n\\n\\t\\t\\tscene.addEventListener( 'dispose', onSceneDispose );\\n\\n\\t\\t} else {\\n\\n\\t\\t\\tlist = cameras[ camera.id ];\\n\\t\\t\\tif ( list === undefined ) {\\n\\n\\t\\t\\t\\tlist = new WebGLRenderList();\\n\\t\\t\\t\\tcameras[ camera.id ] = list;\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\treturn list;\\n\\n\\t}\\n\\n\\tfunction dispose() {\\n\\n\\t\\tlists = {};\\n\\n\\t}\\n\\n\\treturn {\\n\\t\\tget: get,\\n\\t\\tdispose: dispose\\n\\t};\\n\\n}\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\nfunction UniformsCache() {\\n\\n\\tvar lights = {};\\n\\n\\treturn {\\n\\n\\t\\tget: function ( light ) {\\n\\n\\t\\t\\tif ( lights[ light.id ] !== undefined ) {\\n\\n\\t\\t\\t\\treturn lights[ light.id ];\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tvar uniforms;\\n\\n\\t\\t\\tswitch ( light.type ) {\\n\\n\\t\\t\\t\\tcase 'DirectionalLight':\\n\\t\\t\\t\\t\\tuniforms = {\\n\\t\\t\\t\\t\\t\\tdirection: new Vector3(),\\n\\t\\t\\t\\t\\t\\tcolor: new Color(),\\n\\n\\t\\t\\t\\t\\t\\tshadow: false,\\n\\t\\t\\t\\t\\t\\tshadowBias: 0,\\n\\t\\t\\t\\t\\t\\tshadowRadius: 1,\\n\\t\\t\\t\\t\\t\\tshadowMapSize: new Vector2()\\n\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\tcase 'SpotLight':\\n\\t\\t\\t\\t\\tuniforms = {\\n\\t\\t\\t\\t\\t\\tposition: new Vector3(),\\n\\t\\t\\t\\t\\t\\tdirection: new Vector3(),\\n\\t\\t\\t\\t\\t\\tcolor: new Color(),\\n\\t\\t\\t\\t\\t\\tdistance: 0,\\n\\t\\t\\t\\t\\t\\tconeCos: 0,\\n\\t\\t\\t\\t\\t\\tpenumbraCos: 0,\\n\\t\\t\\t\\t\\t\\tdecay: 0,\\n\\n\\t\\t\\t\\t\\t\\tshadow: false,\\n\\t\\t\\t\\t\\t\\tshadowBias: 0,\\n\\t\\t\\t\\t\\t\\tshadowRadius: 1,\\n\\t\\t\\t\\t\\t\\tshadowMapSize: new Vector2()\\n\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\tcase 'PointLight':\\n\\t\\t\\t\\t\\tuniforms = {\\n\\t\\t\\t\\t\\t\\tposition: new Vector3(),\\n\\t\\t\\t\\t\\t\\tcolor: new Color(),\\n\\t\\t\\t\\t\\t\\tdistance: 0,\\n\\t\\t\\t\\t\\t\\tdecay: 0,\\n\\n\\t\\t\\t\\t\\t\\tshadow: false,\\n\\t\\t\\t\\t\\t\\tshadowBias: 0,\\n\\t\\t\\t\\t\\t\\tshadowRadius: 1,\\n\\t\\t\\t\\t\\t\\tshadowMapSize: new Vector2(),\\n\\t\\t\\t\\t\\t\\tshadowCameraNear: 1,\\n\\t\\t\\t\\t\\t\\tshadowCameraFar: 1000\\n\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\tcase 'HemisphereLight':\\n\\t\\t\\t\\t\\tuniforms = {\\n\\t\\t\\t\\t\\t\\tdirection: new Vector3(),\\n\\t\\t\\t\\t\\t\\tskyColor: new Color(),\\n\\t\\t\\t\\t\\t\\tgroundColor: new Color()\\n\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\tcase 'RectAreaLight':\\n\\t\\t\\t\\t\\tuniforms = {\\n\\t\\t\\t\\t\\t\\tcolor: new Color(),\\n\\t\\t\\t\\t\\t\\tposition: new Vector3(),\\n\\t\\t\\t\\t\\t\\thalfWidth: new Vector3(),\\n\\t\\t\\t\\t\\t\\thalfHeight: new Vector3()\\n\\t\\t\\t\\t\\t\\t// TODO (abelnation): set RectAreaLight shadow uniforms\\n\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tlights[ light.id ] = uniforms;\\n\\n\\t\\t\\treturn uniforms;\\n\\n\\t\\t}\\n\\n\\t};\\n\\n}\\n\\nvar count = 0;\\n\\nfunction WebGLLights() {\\n\\n\\tvar cache = new UniformsCache();\\n\\n\\tvar state = {\\n\\n\\t\\tid: count ++,\\n\\n\\t\\thash: {\\n\\t\\t\\tstateID: - 1,\\n\\t\\t\\tdirectionalLength: - 1,\\n\\t\\t\\tpointLength: - 1,\\n\\t\\t\\tspotLength: - 1,\\n\\t\\t\\trectAreaLength: - 1,\\n\\t\\t\\themiLength: - 1,\\n\\t\\t\\tshadowsLength: - 1\\n\\t\\t},\\n\\n\\t\\tambient: [ 0, 0, 0 ],\\n\\t\\tdirectional: [],\\n\\t\\tdirectionalShadowMap: [],\\n\\t\\tdirectionalShadowMatrix: [],\\n\\t\\tspot: [],\\n\\t\\tspotShadowMap: [],\\n\\t\\tspotShadowMatrix: [],\\n\\t\\trectArea: [],\\n\\t\\tpoint: [],\\n\\t\\tpointShadowMap: [],\\n\\t\\tpointShadowMatrix: [],\\n\\t\\themi: []\\n\\n\\t};\\n\\n\\tvar vector3 = new Vector3();\\n\\tvar matrix4 = new Matrix4();\\n\\tvar matrix42 = new Matrix4();\\n\\n\\tfunction setup( lights, shadows, camera ) {\\n\\n\\t\\tvar r = 0, g = 0, b = 0;\\n\\n\\t\\tvar directionalLength = 0;\\n\\t\\tvar pointLength = 0;\\n\\t\\tvar spotLength = 0;\\n\\t\\tvar rectAreaLength = 0;\\n\\t\\tvar hemiLength = 0;\\n\\n\\t\\tvar viewMatrix = camera.matrixWorldInverse;\\n\\n\\t\\tfor ( var i = 0, l = lights.length; i < l; i ++ ) {\\n\\n\\t\\t\\tvar light = lights[ i ];\\n\\n\\t\\t\\tvar color = light.color;\\n\\t\\t\\tvar intensity = light.intensity;\\n\\t\\t\\tvar distance = light.distance;\\n\\n\\t\\t\\tvar shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;\\n\\n\\t\\t\\tif ( light.isAmbientLight ) {\\n\\n\\t\\t\\t\\tr += color.r * intensity;\\n\\t\\t\\t\\tg += color.g * intensity;\\n\\t\\t\\t\\tb += color.b * intensity;\\n\\n\\t\\t\\t} else if ( light.isDirectionalLight ) {\\n\\n\\t\\t\\t\\tvar uniforms = cache.get( light );\\n\\n\\t\\t\\t\\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\\n\\t\\t\\t\\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\\n\\t\\t\\t\\tvector3.setFromMatrixPosition( light.target.matrixWorld );\\n\\t\\t\\t\\tuniforms.direction.sub( vector3 );\\n\\t\\t\\t\\tuniforms.direction.transformDirection( viewMatrix );\\n\\n\\t\\t\\t\\tuniforms.shadow = light.castShadow;\\n\\n\\t\\t\\t\\tif ( light.castShadow ) {\\n\\n\\t\\t\\t\\t\\tvar shadow = light.shadow;\\n\\n\\t\\t\\t\\t\\tuniforms.shadowBias = shadow.bias;\\n\\t\\t\\t\\t\\tuniforms.shadowRadius = shadow.radius;\\n\\t\\t\\t\\t\\tuniforms.shadowMapSize = shadow.mapSize;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tstate.directionalShadowMap[ directionalLength ] = shadowMap;\\n\\t\\t\\t\\tstate.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;\\n\\t\\t\\t\\tstate.directional[ directionalLength ] = uniforms;\\n\\n\\t\\t\\t\\tdirectionalLength ++;\\n\\n\\t\\t\\t} else if ( light.isSpotLight ) {\\n\\n\\t\\t\\t\\tvar uniforms = cache.get( light );\\n\\n\\t\\t\\t\\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\\n\\t\\t\\t\\tuniforms.position.applyMatrix4( viewMatrix );\\n\\n\\t\\t\\t\\tuniforms.color.copy( color ).multiplyScalar( intensity );\\n\\t\\t\\t\\tuniforms.distance = distance;\\n\\n\\t\\t\\t\\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\\n\\t\\t\\t\\tvector3.setFromMatrixPosition( light.target.matrixWorld );\\n\\t\\t\\t\\tuniforms.direction.sub( vector3 );\\n\\t\\t\\t\\tuniforms.direction.transformDirection( viewMatrix );\\n\\n\\t\\t\\t\\tuniforms.coneCos = Math.cos( light.angle );\\n\\t\\t\\t\\tuniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );\\n\\t\\t\\t\\tuniforms.decay = light.decay;\\n\\n\\t\\t\\t\\tuniforms.shadow = light.castShadow;\\n\\n\\t\\t\\t\\tif ( light.castShadow ) {\\n\\n\\t\\t\\t\\t\\tvar shadow = light.shadow;\\n\\n\\t\\t\\t\\t\\tuniforms.shadowBias = shadow.bias;\\n\\t\\t\\t\\t\\tuniforms.shadowRadius = shadow.radius;\\n\\t\\t\\t\\t\\tuniforms.shadowMapSize = shadow.mapSize;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tstate.spotShadowMap[ spotLength ] = shadowMap;\\n\\t\\t\\t\\tstate.spotShadowMatrix[ spotLength ] = light.shadow.matrix;\\n\\t\\t\\t\\tstate.spot[ spotLength ] = uniforms;\\n\\n\\t\\t\\t\\tspotLength ++;\\n\\n\\t\\t\\t} else if ( light.isRectAreaLight ) {\\n\\n\\t\\t\\t\\tvar uniforms = cache.get( light );\\n\\n\\t\\t\\t\\t// (a) intensity is the total visible light emitted\\n\\t\\t\\t\\t//uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );\\n\\n\\t\\t\\t\\t// (b) intensity is the brightness of the light\\n\\t\\t\\t\\tuniforms.color.copy( color ).multiplyScalar( intensity );\\n\\n\\t\\t\\t\\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\\n\\t\\t\\t\\tuniforms.position.applyMatrix4( viewMatrix );\\n\\n\\t\\t\\t\\t// extract local rotation of light to derive width/height half vectors\\n\\t\\t\\t\\tmatrix42.identity();\\n\\t\\t\\t\\tmatrix4.copy( light.matrixWorld );\\n\\t\\t\\t\\tmatrix4.premultiply( viewMatrix );\\n\\t\\t\\t\\tmatrix42.extractRotation( matrix4 );\\n\\n\\t\\t\\t\\tuniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );\\n\\t\\t\\t\\tuniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );\\n\\n\\t\\t\\t\\tuniforms.halfWidth.applyMatrix4( matrix42 );\\n\\t\\t\\t\\tuniforms.halfHeight.applyMatrix4( matrix42 );\\n\\n\\t\\t\\t\\t// TODO (abelnation): RectAreaLight distance?\\n\\t\\t\\t\\t// uniforms.distance = distance;\\n\\n\\t\\t\\t\\tstate.rectArea[ rectAreaLength ] = uniforms;\\n\\n\\t\\t\\t\\trectAreaLength ++;\\n\\n\\t\\t\\t} else if ( light.isPointLight ) {\\n\\n\\t\\t\\t\\tvar uniforms = cache.get( light );\\n\\n\\t\\t\\t\\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\\n\\t\\t\\t\\tuniforms.position.applyMatrix4( viewMatrix );\\n\\n\\t\\t\\t\\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\\n\\t\\t\\t\\tuniforms.distance = light.distance;\\n\\t\\t\\t\\tuniforms.decay = light.decay;\\n\\n\\t\\t\\t\\tuniforms.shadow = light.castShadow;\\n\\n\\t\\t\\t\\tif ( light.castShadow ) {\\n\\n\\t\\t\\t\\t\\tvar shadow = light.shadow;\\n\\n\\t\\t\\t\\t\\tuniforms.shadowBias = shadow.bias;\\n\\t\\t\\t\\t\\tuniforms.shadowRadius = shadow.radius;\\n\\t\\t\\t\\t\\tuniforms.shadowMapSize = shadow.mapSize;\\n\\t\\t\\t\\t\\tuniforms.shadowCameraNear = shadow.camera.near;\\n\\t\\t\\t\\t\\tuniforms.shadowCameraFar = shadow.camera.far;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tstate.pointShadowMap[ pointLength ] = shadowMap;\\n\\t\\t\\t\\tstate.pointShadowMatrix[ pointLength ] = light.shadow.matrix;\\n\\t\\t\\t\\tstate.point[ pointLength ] = uniforms;\\n\\n\\t\\t\\t\\tpointLength ++;\\n\\n\\t\\t\\t} else if ( light.isHemisphereLight ) {\\n\\n\\t\\t\\t\\tvar uniforms = cache.get( light );\\n\\n\\t\\t\\t\\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\\n\\t\\t\\t\\tuniforms.direction.transformDirection( viewMatrix );\\n\\t\\t\\t\\tuniforms.direction.normalize();\\n\\n\\t\\t\\t\\tuniforms.skyColor.copy( light.color ).multiplyScalar( intensity );\\n\\t\\t\\t\\tuniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );\\n\\n\\t\\t\\t\\tstate.hemi[ hemiLength ] = uniforms;\\n\\n\\t\\t\\t\\themiLength ++;\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tstate.ambient[ 0 ] = r;\\n\\t\\tstate.ambient[ 1 ] = g;\\n\\t\\tstate.ambient[ 2 ] = b;\\n\\n\\t\\tstate.directional.length = directionalLength;\\n\\t\\tstate.spot.length = spotLength;\\n\\t\\tstate.rectArea.length = rectAreaLength;\\n\\t\\tstate.point.length = pointLength;\\n\\t\\tstate.hemi.length = hemiLength;\\n\\n\\t\\tstate.hash.stateID = state.id;\\n\\t\\tstate.hash.directionalLength = directionalLength;\\n\\t\\tstate.hash.pointLength = pointLength;\\n\\t\\tstate.hash.spotLength = spotLength;\\n\\t\\tstate.hash.rectAreaLength = rectAreaLength;\\n\\t\\tstate.hash.hemiLength = hemiLength;\\n\\t\\tstate.hash.shadowsLength = shadows.length;\\n\\n\\t}\\n\\n\\treturn {\\n\\t\\tsetup: setup,\\n\\t\\tstate: state\\n\\t};\\n\\n}\\n\\n/**\\n * @author Mugen87 / https://github.com/Mugen87\\n */\\n\\nfunction WebGLRenderState() {\\n\\n\\tvar lights = new WebGLLights();\\n\\n\\tvar lightsArray = [];\\n\\tvar shadowsArray = [];\\n\\n\\tfunction init() {\\n\\n\\t\\tlightsArray.length = 0;\\n\\t\\tshadowsArray.length = 0;\\n\\n\\t}\\n\\n\\tfunction pushLight( light ) {\\n\\n\\t\\tlightsArray.push( light );\\n\\n\\t}\\n\\n\\tfunction pushShadow( shadowLight ) {\\n\\n\\t\\tshadowsArray.push( shadowLight );\\n\\n\\t}\\n\\n\\tfunction setupLights( camera ) {\\n\\n\\t\\tlights.setup( lightsArray, shadowsArray, camera );\\n\\n\\t}\\n\\n\\tvar state = {\\n\\t\\tlightsArray: lightsArray,\\n\\t\\tshadowsArray: shadowsArray,\\n\\n\\t\\tlights: lights\\n\\t};\\n\\n\\treturn {\\n\\t\\tinit: init,\\n\\t\\tstate: state,\\n\\t\\tsetupLights: setupLights,\\n\\n\\t\\tpushLight: pushLight,\\n\\t\\tpushShadow: pushShadow\\n\\t};\\n\\n}\\n\\nfunction WebGLRenderStates() {\\n\\n\\tvar renderStates = {};\\n\\n\\tfunction onSceneDispose( event ) {\\n\\n\\t\\tvar scene = event.target;\\n\\n\\t\\tscene.removeEventListener( 'dispose', onSceneDispose );\\n\\n\\t\\tdelete renderStates[ scene.id ];\\n\\n\\t}\\n\\n\\tfunction get( scene, camera ) {\\n\\n\\t\\tvar renderState;\\n\\n\\t\\tif ( renderStates[ scene.id ] === undefined ) {\\n\\n\\t\\t\\trenderState = new WebGLRenderState();\\n\\t\\t\\trenderStates[ scene.id ] = {};\\n\\t\\t\\trenderStates[ scene.id ][ camera.id ] = renderState;\\n\\n\\t\\t\\tscene.addEventListener( 'dispose', onSceneDispose );\\n\\n\\t\\t} else {\\n\\n\\t\\t\\tif ( renderStates[ scene.id ][ camera.id ] === undefined ) {\\n\\n\\t\\t\\t\\trenderState = new WebGLRenderState();\\n\\t\\t\\t\\trenderStates[ scene.id ][ camera.id ] = renderState;\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\trenderState = renderStates[ scene.id ][ camera.id ];\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\treturn renderState;\\n\\n\\t}\\n\\n\\tfunction dispose() {\\n\\n\\t\\trenderStates = {};\\n\\n\\t}\\n\\n\\treturn {\\n\\t\\tget: get,\\n\\t\\tdispose: dispose\\n\\t};\\n\\n}\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n * @author alteredq / http://alteredqualia.com/\\n * @author bhouston / https://clara.io\\n * @author WestLangley / http://github.com/WestLangley\\n *\\n * parameters = {\\n *\\n *  opacity: <float>,\\n *\\n *  map: new THREE.Texture( <Image> ),\\n *\\n *  alphaMap: new THREE.Texture( <Image> ),\\n *\\n *  displacementMap: new THREE.Texture( <Image> ),\\n *  displacementScale: <float>,\\n *  displacementBias: <float>,\\n *\\n *  wireframe: <boolean>,\\n *  wireframeLinewidth: <float>\\n * }\\n */\\n\\nfunction MeshDepthMaterial( parameters ) {\\n\\n\\tMaterial.call( this );\\n\\n\\tthis.type = 'MeshDepthMaterial';\\n\\n\\tthis.depthPacking = BasicDepthPacking;\\n\\n\\tthis.skinning = false;\\n\\tthis.morphTargets = false;\\n\\n\\tthis.map = null;\\n\\n\\tthis.alphaMap = null;\\n\\n\\tthis.displacementMap = null;\\n\\tthis.displacementScale = 1;\\n\\tthis.displacementBias = 0;\\n\\n\\tthis.wireframe = false;\\n\\tthis.wireframeLinewidth = 1;\\n\\n\\tthis.fog = false;\\n\\tthis.lights = false;\\n\\n\\tthis.setValues( parameters );\\n\\n}\\n\\nMeshDepthMaterial.prototype = Object.create( Material.prototype );\\nMeshDepthMaterial.prototype.constructor = MeshDepthMaterial;\\n\\nMeshDepthMaterial.prototype.isMeshDepthMaterial = true;\\n\\nMeshDepthMaterial.prototype.copy = function ( source ) {\\n\\n\\tMaterial.prototype.copy.call( this, source );\\n\\n\\tthis.depthPacking = source.depthPacking;\\n\\n\\tthis.skinning = source.skinning;\\n\\tthis.morphTargets = source.morphTargets;\\n\\n\\tthis.map = source.map;\\n\\n\\tthis.alphaMap = source.alphaMap;\\n\\n\\tthis.displacementMap = source.displacementMap;\\n\\tthis.displacementScale = source.displacementScale;\\n\\tthis.displacementBias = source.displacementBias;\\n\\n\\tthis.wireframe = source.wireframe;\\n\\tthis.wireframeLinewidth = source.wireframeLinewidth;\\n\\n\\treturn this;\\n\\n};\\n\\n/**\\n * @author WestLangley / http://github.com/WestLangley\\n *\\n * parameters = {\\n *\\n *  referencePosition: <float>,\\n *  nearDistance: <float>,\\n *  farDistance: <float>,\\n *\\n *  skinning: <bool>,\\n *  morphTargets: <bool>,\\n *\\n *  map: new THREE.Texture( <Image> ),\\n *\\n *  alphaMap: new THREE.Texture( <Image> ),\\n *\\n *  displacementMap: new THREE.Texture( <Image> ),\\n *  displacementScale: <float>,\\n *  displacementBias: <float>\\n *\\n * }\\n */\\n\\nfunction MeshDistanceMaterial( parameters ) {\\n\\n\\tMaterial.call( this );\\n\\n\\tthis.type = 'MeshDistanceMaterial';\\n\\n\\tthis.referencePosition = new Vector3();\\n\\tthis.nearDistance = 1;\\n\\tthis.farDistance = 1000;\\n\\n\\tthis.skinning = false;\\n\\tthis.morphTargets = false;\\n\\n\\tthis.map = null;\\n\\n\\tthis.alphaMap = null;\\n\\n\\tthis.displacementMap = null;\\n\\tthis.displacementScale = 1;\\n\\tthis.displacementBias = 0;\\n\\n\\tthis.fog = false;\\n\\tthis.lights = false;\\n\\n\\tthis.setValues( parameters );\\n\\n}\\n\\nMeshDistanceMaterial.prototype = Object.create( Material.prototype );\\nMeshDistanceMaterial.prototype.constructor = MeshDistanceMaterial;\\n\\nMeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;\\n\\nMeshDistanceMaterial.prototype.copy = function ( source ) {\\n\\n\\tMaterial.prototype.copy.call( this, source );\\n\\n\\tthis.referencePosition.copy( source.referencePosition );\\n\\tthis.nearDistance = source.nearDistance;\\n\\tthis.farDistance = source.farDistance;\\n\\n\\tthis.skinning = source.skinning;\\n\\tthis.morphTargets = source.morphTargets;\\n\\n\\tthis.map = source.map;\\n\\n\\tthis.alphaMap = source.alphaMap;\\n\\n\\tthis.displacementMap = source.displacementMap;\\n\\tthis.displacementScale = source.displacementScale;\\n\\tthis.displacementBias = source.displacementBias;\\n\\n\\treturn this;\\n\\n};\\n\\n/**\\n * @author alteredq / http://alteredqualia.com/\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\nfunction WebGLShadowMap( _renderer, _objects, maxTextureSize ) {\\n\\n\\tvar _frustum = new Frustum(),\\n\\t\\t_projScreenMatrix = new Matrix4(),\\n\\n\\t\\t_shadowMapSize = new Vector2(),\\n\\t\\t_maxShadowMapSize = new Vector2( maxTextureSize, maxTextureSize ),\\n\\n\\t\\t_lookTarget = new Vector3(),\\n\\t\\t_lightPositionWorld = new Vector3(),\\n\\n\\t\\t_MorphingFlag = 1,\\n\\t\\t_SkinningFlag = 2,\\n\\n\\t\\t_NumberOfMaterialVariants = ( _MorphingFlag | _SkinningFlag ) + 1,\\n\\n\\t\\t_depthMaterials = new Array( _NumberOfMaterialVariants ),\\n\\t\\t_distanceMaterials = new Array( _NumberOfMaterialVariants ),\\n\\n\\t\\t_materialCache = {};\\n\\n\\tvar shadowSide = { 0: BackSide, 1: FrontSide, 2: DoubleSide };\\n\\n\\tvar cubeDirections = [\\n\\t\\tnew Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),\\n\\t\\tnew Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )\\n\\t];\\n\\n\\tvar cubeUps = [\\n\\t\\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),\\n\\t\\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),\\tnew Vector3( 0, 0, - 1 )\\n\\t];\\n\\n\\tvar cube2DViewPorts = [\\n\\t\\tnew Vector4(), new Vector4(), new Vector4(),\\n\\t\\tnew Vector4(), new Vector4(), new Vector4()\\n\\t];\\n\\n\\t// init\\n\\n\\tfor ( var i = 0; i !== _NumberOfMaterialVariants; ++ i ) {\\n\\n\\t\\tvar useMorphing = ( i & _MorphingFlag ) !== 0;\\n\\t\\tvar useSkinning = ( i & _SkinningFlag ) !== 0;\\n\\n\\t\\tvar depthMaterial = new MeshDepthMaterial( {\\n\\n\\t\\t\\tdepthPacking: RGBADepthPacking,\\n\\n\\t\\t\\tmorphTargets: useMorphing,\\n\\t\\t\\tskinning: useSkinning\\n\\n\\t\\t} );\\n\\n\\t\\t_depthMaterials[ i ] = depthMaterial;\\n\\n\\t\\t//\\n\\n\\t\\tvar distanceMaterial = new MeshDistanceMaterial( {\\n\\n\\t\\t\\tmorphTargets: useMorphing,\\n\\t\\t\\tskinning: useSkinning\\n\\n\\t\\t} );\\n\\n\\t\\t_distanceMaterials[ i ] = distanceMaterial;\\n\\n\\t}\\n\\n\\t//\\n\\n\\tvar scope = this;\\n\\n\\tthis.enabled = false;\\n\\n\\tthis.autoUpdate = true;\\n\\tthis.needsUpdate = false;\\n\\n\\tthis.type = PCFShadowMap;\\n\\n\\tthis.render = function ( lights, scene, camera ) {\\n\\n\\t\\tif ( scope.enabled === false ) return;\\n\\t\\tif ( scope.autoUpdate === false && scope.needsUpdate === false ) return;\\n\\n\\t\\tif ( lights.length === 0 ) return;\\n\\n\\t\\tvar _state = _renderer.state;\\n\\n\\t\\t// Set GL state for depth map.\\n\\t\\t_state.setBlending( NoBlending );\\n\\t\\t_state.buffers.color.setClear( 1, 1, 1, 1 );\\n\\t\\t_state.buffers.depth.setTest( true );\\n\\t\\t_state.setScissorTest( false );\\n\\n\\t\\t// render depth map\\n\\n\\t\\tvar faceCount;\\n\\n\\t\\tfor ( var i = 0, il = lights.length; i < il; i ++ ) {\\n\\n\\t\\t\\tvar light = lights[ i ];\\n\\t\\t\\tvar shadow = light.shadow;\\n\\t\\t\\tvar isPointLight = light && light.isPointLight;\\n\\n\\t\\t\\tif ( shadow === undefined ) {\\n\\n\\t\\t\\t\\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );\\n\\t\\t\\t\\tcontinue;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tvar shadowCamera = shadow.camera;\\n\\n\\t\\t\\t_shadowMapSize.copy( shadow.mapSize );\\n\\t\\t\\t_shadowMapSize.min( _maxShadowMapSize );\\n\\n\\t\\t\\tif ( isPointLight ) {\\n\\n\\t\\t\\t\\tvar vpWidth = _shadowMapSize.x;\\n\\t\\t\\t\\tvar vpHeight = _shadowMapSize.y;\\n\\n\\t\\t\\t\\t// These viewports map a cube-map onto a 2D texture with the\\n\\t\\t\\t\\t// following orientation:\\n\\t\\t\\t\\t//\\n\\t\\t\\t\\t//  xzXZ\\n\\t\\t\\t\\t//   y Y\\n\\t\\t\\t\\t//\\n\\t\\t\\t\\t// X - Positive x direction\\n\\t\\t\\t\\t// x - Negative x direction\\n\\t\\t\\t\\t// Y - Positive y direction\\n\\t\\t\\t\\t// y - Negative y direction\\n\\t\\t\\t\\t// Z - Positive z direction\\n\\t\\t\\t\\t// z - Negative z direction\\n\\n\\t\\t\\t\\t// positive X\\n\\t\\t\\t\\tcube2DViewPorts[ 0 ].set( vpWidth * 2, vpHeight, vpWidth, vpHeight );\\n\\t\\t\\t\\t// negative X\\n\\t\\t\\t\\tcube2DViewPorts[ 1 ].set( 0, vpHeight, vpWidth, vpHeight );\\n\\t\\t\\t\\t// positive Z\\n\\t\\t\\t\\tcube2DViewPorts[ 2 ].set( vpWidth * 3, vpHeight, vpWidth, vpHeight );\\n\\t\\t\\t\\t// negative Z\\n\\t\\t\\t\\tcube2DViewPorts[ 3 ].set( vpWidth, vpHeight, vpWidth, vpHeight );\\n\\t\\t\\t\\t// positive Y\\n\\t\\t\\t\\tcube2DViewPorts[ 4 ].set( vpWidth * 3, 0, vpWidth, vpHeight );\\n\\t\\t\\t\\t// negative Y\\n\\t\\t\\t\\tcube2DViewPorts[ 5 ].set( vpWidth, 0, vpWidth, vpHeight );\\n\\n\\t\\t\\t\\t_shadowMapSize.x *= 4.0;\\n\\t\\t\\t\\t_shadowMapSize.y *= 2.0;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( shadow.map === null ) {\\n\\n\\t\\t\\t\\tvar pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };\\n\\n\\t\\t\\t\\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\\n\\t\\t\\t\\tshadow.map.texture.name = light.name + \\\".shadowMap\\\";\\n\\n\\t\\t\\t\\tshadowCamera.updateProjectionMatrix();\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( shadow.isSpotLightShadow ) {\\n\\n\\t\\t\\t\\tshadow.update( light );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tvar shadowMap = shadow.map;\\n\\t\\t\\tvar shadowMatrix = shadow.matrix;\\n\\n\\t\\t\\t_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );\\n\\t\\t\\tshadowCamera.position.copy( _lightPositionWorld );\\n\\n\\t\\t\\tif ( isPointLight ) {\\n\\n\\t\\t\\t\\tfaceCount = 6;\\n\\n\\t\\t\\t\\t// for point lights we set the shadow matrix to be a translation-only matrix\\n\\t\\t\\t\\t// equal to inverse of the light's position\\n\\n\\t\\t\\t\\tshadowMatrix.makeTranslation( - _lightPositionWorld.x, - _lightPositionWorld.y, - _lightPositionWorld.z );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tfaceCount = 1;\\n\\n\\t\\t\\t\\t_lookTarget.setFromMatrixPosition( light.target.matrixWorld );\\n\\t\\t\\t\\tshadowCamera.lookAt( _lookTarget );\\n\\t\\t\\t\\tshadowCamera.updateMatrixWorld();\\n\\n\\t\\t\\t\\t// compute shadow matrix\\n\\n\\t\\t\\t\\tshadowMatrix.set(\\n\\t\\t\\t\\t\\t0.5, 0.0, 0.0, 0.5,\\n\\t\\t\\t\\t\\t0.0, 0.5, 0.0, 0.5,\\n\\t\\t\\t\\t\\t0.0, 0.0, 0.5, 0.5,\\n\\t\\t\\t\\t\\t0.0, 0.0, 0.0, 1.0\\n\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\tshadowMatrix.multiply( shadowCamera.projectionMatrix );\\n\\t\\t\\t\\tshadowMatrix.multiply( shadowCamera.matrixWorldInverse );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\t_renderer.setRenderTarget( shadowMap );\\n\\t\\t\\t_renderer.clear();\\n\\n\\t\\t\\t// render shadow map for each cube face (if omni-directional) or\\n\\t\\t\\t// run a single pass if not\\n\\n\\t\\t\\tfor ( var face = 0; face < faceCount; face ++ ) {\\n\\n\\t\\t\\t\\tif ( isPointLight ) {\\n\\n\\t\\t\\t\\t\\t_lookTarget.copy( shadowCamera.position );\\n\\t\\t\\t\\t\\t_lookTarget.add( cubeDirections[ face ] );\\n\\t\\t\\t\\t\\tshadowCamera.up.copy( cubeUps[ face ] );\\n\\t\\t\\t\\t\\tshadowCamera.lookAt( _lookTarget );\\n\\t\\t\\t\\t\\tshadowCamera.updateMatrixWorld();\\n\\n\\t\\t\\t\\t\\tvar vpDimensions = cube2DViewPorts[ face ];\\n\\t\\t\\t\\t\\t_state.viewport( vpDimensions );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// update camera matrices and frustum\\n\\n\\t\\t\\t\\t_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\\n\\t\\t\\t\\t_frustum.setFromMatrix( _projScreenMatrix );\\n\\n\\t\\t\\t\\t// set object matrices & frustum culling\\n\\n\\t\\t\\t\\trenderObject( scene, camera, shadowCamera, isPointLight );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tscope.needsUpdate = false;\\n\\n\\t};\\n\\n\\tfunction getDepthMaterial( object, material, isPointLight, lightPositionWorld, shadowCameraNear, shadowCameraFar ) {\\n\\n\\t\\tvar geometry = object.geometry;\\n\\n\\t\\tvar result = null;\\n\\n\\t\\tvar materialVariants = _depthMaterials;\\n\\t\\tvar customMaterial = object.customDepthMaterial;\\n\\n\\t\\tif ( isPointLight ) {\\n\\n\\t\\t\\tmaterialVariants = _distanceMaterials;\\n\\t\\t\\tcustomMaterial = object.customDistanceMaterial;\\n\\n\\t\\t}\\n\\n\\t\\tif ( ! customMaterial ) {\\n\\n\\t\\t\\tvar useMorphing = false;\\n\\n\\t\\t\\tif ( material.morphTargets ) {\\n\\n\\t\\t\\t\\tif ( geometry && geometry.isBufferGeometry ) {\\n\\n\\t\\t\\t\\t\\tuseMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;\\n\\n\\t\\t\\t\\t} else if ( geometry && geometry.isGeometry ) {\\n\\n\\t\\t\\t\\t\\tuseMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( object.isSkinnedMesh && material.skinning === false ) {\\n\\n\\t\\t\\t\\tconsole.warn( 'THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:', object );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tvar useSkinning = object.isSkinnedMesh && material.skinning;\\n\\n\\t\\t\\tvar variantIndex = 0;\\n\\n\\t\\t\\tif ( useMorphing ) variantIndex |= _MorphingFlag;\\n\\t\\t\\tif ( useSkinning ) variantIndex |= _SkinningFlag;\\n\\n\\t\\t\\tresult = materialVariants[ variantIndex ];\\n\\n\\t\\t} else {\\n\\n\\t\\t\\tresult = customMaterial;\\n\\n\\t\\t}\\n\\n\\t\\tif ( _renderer.localClippingEnabled &&\\n\\t\\t\\t\\tmaterial.clipShadows === true &&\\n\\t\\t\\t\\tmaterial.clippingPlanes.length !== 0 ) {\\n\\n\\t\\t\\t// in this case we need a unique material instance reflecting the\\n\\t\\t\\t// appropriate state\\n\\n\\t\\t\\tvar keyA = result.uuid, keyB = material.uuid;\\n\\n\\t\\t\\tvar materialsForVariant = _materialCache[ keyA ];\\n\\n\\t\\t\\tif ( materialsForVariant === undefined ) {\\n\\n\\t\\t\\t\\tmaterialsForVariant = {};\\n\\t\\t\\t\\t_materialCache[ keyA ] = materialsForVariant;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tvar cachedMaterial = materialsForVariant[ keyB ];\\n\\n\\t\\t\\tif ( cachedMaterial === undefined ) {\\n\\n\\t\\t\\t\\tcachedMaterial = result.clone();\\n\\t\\t\\t\\tmaterialsForVariant[ keyB ] = cachedMaterial;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tresult = cachedMaterial;\\n\\n\\t\\t}\\n\\n\\t\\tresult.visible = material.visible;\\n\\t\\tresult.wireframe = material.wireframe;\\n\\n\\t\\tresult.side = ( material.shadowSide != null ) ? material.shadowSide : shadowSide[ material.side ];\\n\\n\\t\\tresult.clipShadows = material.clipShadows;\\n\\t\\tresult.clippingPlanes = material.clippingPlanes;\\n\\t\\tresult.clipIntersection = material.clipIntersection;\\n\\n\\t\\tresult.wireframeLinewidth = material.wireframeLinewidth;\\n\\t\\tresult.linewidth = material.linewidth;\\n\\n\\t\\tif ( isPointLight && result.isMeshDistanceMaterial ) {\\n\\n\\t\\t\\tresult.referencePosition.copy( lightPositionWorld );\\n\\t\\t\\tresult.nearDistance = shadowCameraNear;\\n\\t\\t\\tresult.farDistance = shadowCameraFar;\\n\\n\\t\\t}\\n\\n\\t\\treturn result;\\n\\n\\t}\\n\\n\\tfunction renderObject( object, camera, shadowCamera, isPointLight ) {\\n\\n\\t\\tif ( object.visible === false ) return;\\n\\n\\t\\tvar visible = object.layers.test( camera.layers );\\n\\n\\t\\tif ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {\\n\\n\\t\\t\\tif ( object.castShadow && ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) ) {\\n\\n\\t\\t\\t\\tobject.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\\n\\n\\t\\t\\t\\tvar geometry = _objects.update( object );\\n\\t\\t\\t\\tvar material = object.material;\\n\\n\\t\\t\\t\\tif ( Array.isArray( material ) ) {\\n\\n\\t\\t\\t\\t\\tvar groups = geometry.groups;\\n\\n\\t\\t\\t\\t\\tfor ( var k = 0, kl = groups.length; k < kl; k ++ ) {\\n\\n\\t\\t\\t\\t\\t\\tvar group = groups[ k ];\\n\\t\\t\\t\\t\\t\\tvar groupMaterial = material[ group.materialIndex ];\\n\\n\\t\\t\\t\\t\\t\\tif ( groupMaterial && groupMaterial.visible ) {\\n\\n\\t\\t\\t\\t\\t\\t\\tvar depthMaterial = getDepthMaterial( object, groupMaterial, isPointLight, _lightPositionWorld, shadowCamera.near, shadowCamera.far );\\n\\t\\t\\t\\t\\t\\t\\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );\\n\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t} else if ( material.visible ) {\\n\\n\\t\\t\\t\\t\\tvar depthMaterial = getDepthMaterial( object, material, isPointLight, _lightPositionWorld, shadowCamera.near, shadowCamera.far );\\n\\t\\t\\t\\t\\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tvar children = object.children;\\n\\n\\t\\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\\n\\n\\t\\t\\trenderObject( children[ i ], camera, shadowCamera, isPointLight );\\n\\n\\t\\t}\\n\\n\\t}\\n\\n}\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\nfunction WebGLState( gl, extensions, utils, capabilities ) {\\n\\n\\tfunction ColorBuffer() {\\n\\n\\t\\tvar locked = false;\\n\\n\\t\\tvar color = new Vector4();\\n\\t\\tvar currentColorMask = null;\\n\\t\\tvar currentColorClear = new Vector4( 0, 0, 0, 0 );\\n\\n\\t\\treturn {\\n\\n\\t\\t\\tsetMask: function ( colorMask ) {\\n\\n\\t\\t\\t\\tif ( currentColorMask !== colorMask && ! locked ) {\\n\\n\\t\\t\\t\\t\\tgl.colorMask( colorMask, colorMask, colorMask, colorMask );\\n\\t\\t\\t\\t\\tcurrentColorMask = colorMask;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t},\\n\\n\\t\\t\\tsetLocked: function ( lock ) {\\n\\n\\t\\t\\t\\tlocked = lock;\\n\\n\\t\\t\\t},\\n\\n\\t\\t\\tsetClear: function ( r, g, b, a, premultipliedAlpha ) {\\n\\n\\t\\t\\t\\tif ( premultipliedAlpha === true ) {\\n\\n\\t\\t\\t\\t\\tr *= a; g *= a; b *= a;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tcolor.set( r, g, b, a );\\n\\n\\t\\t\\t\\tif ( currentColorClear.equals( color ) === false ) {\\n\\n\\t\\t\\t\\t\\tgl.clearColor( r, g, b, a );\\n\\t\\t\\t\\t\\tcurrentColorClear.copy( color );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t},\\n\\n\\t\\t\\treset: function () {\\n\\n\\t\\t\\t\\tlocked = false;\\n\\n\\t\\t\\t\\tcurrentColorMask = null;\\n\\t\\t\\t\\tcurrentColorClear.set( - 1, 0, 0, 0 ); // set to invalid state\\n\\n\\t\\t\\t}\\n\\n\\t\\t};\\n\\n\\t}\\n\\n\\tfunction DepthBuffer() {\\n\\n\\t\\tvar locked = false;\\n\\n\\t\\tvar currentDepthMask = null;\\n\\t\\tvar currentDepthFunc = null;\\n\\t\\tvar currentDepthClear = null;\\n\\n\\t\\treturn {\\n\\n\\t\\t\\tsetTest: function ( depthTest ) {\\n\\n\\t\\t\\t\\tif ( depthTest ) {\\n\\n\\t\\t\\t\\t\\tenable( 2929 );\\n\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\tdisable( 2929 );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t},\\n\\n\\t\\t\\tsetMask: function ( depthMask ) {\\n\\n\\t\\t\\t\\tif ( currentDepthMask !== depthMask && ! locked ) {\\n\\n\\t\\t\\t\\t\\tgl.depthMask( depthMask );\\n\\t\\t\\t\\t\\tcurrentDepthMask = depthMask;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t},\\n\\n\\t\\t\\tsetFunc: function ( depthFunc ) {\\n\\n\\t\\t\\t\\tif ( currentDepthFunc !== depthFunc ) {\\n\\n\\t\\t\\t\\t\\tif ( depthFunc ) {\\n\\n\\t\\t\\t\\t\\t\\tswitch ( depthFunc ) {\\n\\n\\t\\t\\t\\t\\t\\t\\tcase NeverDepth:\\n\\n\\t\\t\\t\\t\\t\\t\\t\\tgl.depthFunc( 512 );\\n\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\t\\t\\tcase AlwaysDepth:\\n\\n\\t\\t\\t\\t\\t\\t\\t\\tgl.depthFunc( 519 );\\n\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\t\\t\\tcase LessDepth:\\n\\n\\t\\t\\t\\t\\t\\t\\t\\tgl.depthFunc( 513 );\\n\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\t\\t\\tcase LessEqualDepth:\\n\\n\\t\\t\\t\\t\\t\\t\\t\\tgl.depthFunc( 515 );\\n\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\t\\t\\tcase EqualDepth:\\n\\n\\t\\t\\t\\t\\t\\t\\t\\tgl.depthFunc( 514 );\\n\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\t\\t\\tcase GreaterEqualDepth:\\n\\n\\t\\t\\t\\t\\t\\t\\t\\tgl.depthFunc( 518 );\\n\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\t\\t\\tcase GreaterDepth:\\n\\n\\t\\t\\t\\t\\t\\t\\t\\tgl.depthFunc( 516 );\\n\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\t\\t\\tcase NotEqualDepth:\\n\\n\\t\\t\\t\\t\\t\\t\\t\\tgl.depthFunc( 517 );\\n\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\t\\t\\tdefault:\\n\\n\\t\\t\\t\\t\\t\\t\\t\\tgl.depthFunc( 515 );\\n\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\t\\tgl.depthFunc( 515 );\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tcurrentDepthFunc = depthFunc;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t},\\n\\n\\t\\t\\tsetLocked: function ( lock ) {\\n\\n\\t\\t\\t\\tlocked = lock;\\n\\n\\t\\t\\t},\\n\\n\\t\\t\\tsetClear: function ( depth ) {\\n\\n\\t\\t\\t\\tif ( currentDepthClear !== depth ) {\\n\\n\\t\\t\\t\\t\\tgl.clearDepth( depth );\\n\\t\\t\\t\\t\\tcurrentDepthClear = depth;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t},\\n\\n\\t\\t\\treset: function () {\\n\\n\\t\\t\\t\\tlocked = false;\\n\\n\\t\\t\\t\\tcurrentDepthMask = null;\\n\\t\\t\\t\\tcurrentDepthFunc = null;\\n\\t\\t\\t\\tcurrentDepthClear = null;\\n\\n\\t\\t\\t}\\n\\n\\t\\t};\\n\\n\\t}\\n\\n\\tfunction StencilBuffer() {\\n\\n\\t\\tvar locked = false;\\n\\n\\t\\tvar currentStencilMask = null;\\n\\t\\tvar currentStencilFunc = null;\\n\\t\\tvar currentStencilRef = null;\\n\\t\\tvar currentStencilFuncMask = null;\\n\\t\\tvar currentStencilFail = null;\\n\\t\\tvar currentStencilZFail = null;\\n\\t\\tvar currentStencilZPass = null;\\n\\t\\tvar currentStencilClear = null;\\n\\n\\t\\treturn {\\n\\n\\t\\t\\tsetTest: function ( stencilTest ) {\\n\\n\\t\\t\\t\\tif ( stencilTest ) {\\n\\n\\t\\t\\t\\t\\tenable( 2960 );\\n\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\tdisable( 2960 );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t},\\n\\n\\t\\t\\tsetMask: function ( stencilMask ) {\\n\\n\\t\\t\\t\\tif ( currentStencilMask !== stencilMask && ! locked ) {\\n\\n\\t\\t\\t\\t\\tgl.stencilMask( stencilMask );\\n\\t\\t\\t\\t\\tcurrentStencilMask = stencilMask;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t},\\n\\n\\t\\t\\tsetFunc: function ( stencilFunc, stencilRef, stencilMask ) {\\n\\n\\t\\t\\t\\tif ( currentStencilFunc !== stencilFunc ||\\n\\t\\t\\t\\t     currentStencilRef \\t!== stencilRef \\t||\\n\\t\\t\\t\\t     currentStencilFuncMask !== stencilMask ) {\\n\\n\\t\\t\\t\\t\\tgl.stencilFunc( stencilFunc, stencilRef, stencilMask );\\n\\n\\t\\t\\t\\t\\tcurrentStencilFunc = stencilFunc;\\n\\t\\t\\t\\t\\tcurrentStencilRef = stencilRef;\\n\\t\\t\\t\\t\\tcurrentStencilFuncMask = stencilMask;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t},\\n\\n\\t\\t\\tsetOp: function ( stencilFail, stencilZFail, stencilZPass ) {\\n\\n\\t\\t\\t\\tif ( currentStencilFail\\t !== stencilFail \\t||\\n\\t\\t\\t\\t     currentStencilZFail !== stencilZFail ||\\n\\t\\t\\t\\t     currentStencilZPass !== stencilZPass ) {\\n\\n\\t\\t\\t\\t\\tgl.stencilOp( stencilFail, stencilZFail, stencilZPass );\\n\\n\\t\\t\\t\\t\\tcurrentStencilFail = stencilFail;\\n\\t\\t\\t\\t\\tcurrentStencilZFail = stencilZFail;\\n\\t\\t\\t\\t\\tcurrentStencilZPass = stencilZPass;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t},\\n\\n\\t\\t\\tsetLocked: function ( lock ) {\\n\\n\\t\\t\\t\\tlocked = lock;\\n\\n\\t\\t\\t},\\n\\n\\t\\t\\tsetClear: function ( stencil ) {\\n\\n\\t\\t\\t\\tif ( currentStencilClear !== stencil ) {\\n\\n\\t\\t\\t\\t\\tgl.clearStencil( stencil );\\n\\t\\t\\t\\t\\tcurrentStencilClear = stencil;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t},\\n\\n\\t\\t\\treset: function () {\\n\\n\\t\\t\\t\\tlocked = false;\\n\\n\\t\\t\\t\\tcurrentStencilMask = null;\\n\\t\\t\\t\\tcurrentStencilFunc = null;\\n\\t\\t\\t\\tcurrentStencilRef = null;\\n\\t\\t\\t\\tcurrentStencilFuncMask = null;\\n\\t\\t\\t\\tcurrentStencilFail = null;\\n\\t\\t\\t\\tcurrentStencilZFail = null;\\n\\t\\t\\t\\tcurrentStencilZPass = null;\\n\\t\\t\\t\\tcurrentStencilClear = null;\\n\\n\\t\\t\\t}\\n\\n\\t\\t};\\n\\n\\t}\\n\\n\\t//\\n\\n\\tvar colorBuffer = new ColorBuffer();\\n\\tvar depthBuffer = new DepthBuffer();\\n\\tvar stencilBuffer = new StencilBuffer();\\n\\n\\tvar maxVertexAttributes = gl.getParameter( 34921 );\\n\\tvar newAttributes = new Uint8Array( maxVertexAttributes );\\n\\tvar enabledAttributes = new Uint8Array( maxVertexAttributes );\\n\\tvar attributeDivisors = new Uint8Array( maxVertexAttributes );\\n\\n\\tvar enabledCapabilities = {};\\n\\n\\tvar compressedTextureFormats = null;\\n\\n\\tvar currentProgram = null;\\n\\n\\tvar currentBlendingEnabled = null;\\n\\tvar currentBlending = null;\\n\\tvar currentBlendEquation = null;\\n\\tvar currentBlendSrc = null;\\n\\tvar currentBlendDst = null;\\n\\tvar currentBlendEquationAlpha = null;\\n\\tvar currentBlendSrcAlpha = null;\\n\\tvar currentBlendDstAlpha = null;\\n\\tvar currentPremultipledAlpha = false;\\n\\n\\tvar currentFlipSided = null;\\n\\tvar currentCullFace = null;\\n\\n\\tvar currentLineWidth = null;\\n\\n\\tvar currentPolygonOffsetFactor = null;\\n\\tvar currentPolygonOffsetUnits = null;\\n\\n\\tvar maxTextures = gl.getParameter( 35661 );\\n\\n\\tvar lineWidthAvailable = false;\\n\\tvar version = 0;\\n\\tvar glVersion = gl.getParameter( 7938 );\\n\\n\\tif ( glVersion.indexOf( 'WebGL' ) !== - 1 ) {\\n\\n\\t\\tversion = parseFloat( /^WebGL\\\\ ([0-9])/.exec( glVersion )[ 1 ] );\\n\\t\\tlineWidthAvailable = ( version >= 1.0 );\\n\\n\\t} else if ( glVersion.indexOf( 'OpenGL ES' ) !== - 1 ) {\\n\\n\\t\\tversion = parseFloat( /^OpenGL\\\\ ES\\\\ ([0-9])/.exec( glVersion )[ 1 ] );\\n\\t\\tlineWidthAvailable = ( version >= 2.0 );\\n\\n\\t}\\n\\n\\tvar currentTextureSlot = null;\\n\\tvar currentBoundTextures = {};\\n\\n\\tvar currentScissor = new Vector4();\\n\\tvar currentViewport = new Vector4();\\n\\n\\tfunction createTexture( type, target, count ) {\\n\\n\\t\\tvar data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.\\n\\t\\tvar texture = gl.createTexture();\\n\\n\\t\\tgl.bindTexture( type, texture );\\n\\t\\tgl.texParameteri( type, 10241, 9728 );\\n\\t\\tgl.texParameteri( type, 10240, 9728 );\\n\\n\\t\\tfor ( var i = 0; i < count; i ++ ) {\\n\\n\\t\\t\\tgl.texImage2D( target + i, 0, 6408, 1, 1, 0, 6408, 5121, data );\\n\\n\\t\\t}\\n\\n\\t\\treturn texture;\\n\\n\\t}\\n\\n\\tvar emptyTextures = {};\\n\\temptyTextures[ 3553 ] = createTexture( 3553, 3553, 1 );\\n\\temptyTextures[ 34067 ] = createTexture( 34067, 34069, 6 );\\n\\n\\t// init\\n\\n\\tcolorBuffer.setClear( 0, 0, 0, 1 );\\n\\tdepthBuffer.setClear( 1 );\\n\\tstencilBuffer.setClear( 0 );\\n\\n\\tenable( 2929 );\\n\\tdepthBuffer.setFunc( LessEqualDepth );\\n\\n\\tsetFlipSided( false );\\n\\tsetCullFace( CullFaceBack );\\n\\tenable( 2884 );\\n\\n\\tsetBlending( NoBlending );\\n\\n\\t//\\n\\n\\tfunction initAttributes() {\\n\\n\\t\\tfor ( var i = 0, l = newAttributes.length; i < l; i ++ ) {\\n\\n\\t\\t\\tnewAttributes[ i ] = 0;\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tfunction enableAttribute( attribute ) {\\n\\n\\t\\tenableAttributeAndDivisor( attribute, 0 );\\n\\n\\t}\\n\\n\\tfunction enableAttributeAndDivisor( attribute, meshPerAttribute ) {\\n\\n\\t\\tnewAttributes[ attribute ] = 1;\\n\\n\\t\\tif ( enabledAttributes[ attribute ] === 0 ) {\\n\\n\\t\\t\\tgl.enableVertexAttribArray( attribute );\\n\\t\\t\\tenabledAttributes[ attribute ] = 1;\\n\\n\\t\\t}\\n\\n\\t\\tif ( attributeDivisors[ attribute ] !== meshPerAttribute ) {\\n\\n\\t\\t\\tvar extension = capabilities.isWebGL2 ? gl : extensions.get( 'ANGLE_instanced_arrays' );\\n\\n\\t\\t\\textension[ capabilities.isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE' ]( attribute, meshPerAttribute );\\n\\t\\t\\tattributeDivisors[ attribute ] = meshPerAttribute;\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tfunction disableUnusedAttributes() {\\n\\n\\t\\tfor ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {\\n\\n\\t\\t\\tif ( enabledAttributes[ i ] !== newAttributes[ i ] ) {\\n\\n\\t\\t\\t\\tgl.disableVertexAttribArray( i );\\n\\t\\t\\t\\tenabledAttributes[ i ] = 0;\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tfunction enable( id ) {\\n\\n\\t\\tif ( enabledCapabilities[ id ] !== true ) {\\n\\n\\t\\t\\tgl.enable( id );\\n\\t\\t\\tenabledCapabilities[ id ] = true;\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tfunction disable( id ) {\\n\\n\\t\\tif ( enabledCapabilities[ id ] !== false ) {\\n\\n\\t\\t\\tgl.disable( id );\\n\\t\\t\\tenabledCapabilities[ id ] = false;\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tfunction getCompressedTextureFormats() {\\n\\n\\t\\tif ( compressedTextureFormats === null ) {\\n\\n\\t\\t\\tcompressedTextureFormats = [];\\n\\n\\t\\t\\tif ( extensions.get( 'WEBGL_compressed_texture_pvrtc' ) ||\\n\\t\\t\\t     extensions.get( 'WEBGL_compressed_texture_s3tc' ) ||\\n\\t\\t\\t     extensions.get( 'WEBGL_compressed_texture_etc1' ) ||\\n\\t\\t\\t     extensions.get( 'WEBGL_compressed_texture_astc' ) ) {\\n\\n\\t\\t\\t\\tvar formats = gl.getParameter( 34467 );\\n\\n\\t\\t\\t\\tfor ( var i = 0; i < formats.length; i ++ ) {\\n\\n\\t\\t\\t\\t\\tcompressedTextureFormats.push( formats[ i ] );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\treturn compressedTextureFormats;\\n\\n\\t}\\n\\n\\tfunction useProgram( program ) {\\n\\n\\t\\tif ( currentProgram !== program ) {\\n\\n\\t\\t\\tgl.useProgram( program );\\n\\n\\t\\t\\tcurrentProgram = program;\\n\\n\\t\\t\\treturn true;\\n\\n\\t\\t}\\n\\n\\t\\treturn false;\\n\\n\\t}\\n\\n\\tfunction setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {\\n\\n\\t\\tif ( blending === NoBlending ) {\\n\\n\\t\\t\\tif ( currentBlendingEnabled ) {\\n\\n\\t\\t\\t\\tdisable( 3042 );\\n\\t\\t\\t\\tcurrentBlendingEnabled = false;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn;\\n\\n\\t\\t}\\n\\n\\t\\tif ( ! currentBlendingEnabled ) {\\n\\n\\t\\t\\tenable( 3042 );\\n\\t\\t\\tcurrentBlendingEnabled = true;\\n\\n\\t\\t}\\n\\n\\t\\tif ( blending !== CustomBlending ) {\\n\\n\\t\\t\\tif ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {\\n\\n\\t\\t\\t\\tif ( currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation ) {\\n\\n\\t\\t\\t\\t\\tgl.blendEquation( 32774 );\\n\\n\\t\\t\\t\\t\\tcurrentBlendEquation = AddEquation;\\n\\t\\t\\t\\t\\tcurrentBlendEquationAlpha = AddEquation;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif ( premultipliedAlpha ) {\\n\\n\\t\\t\\t\\t\\tswitch ( blending ) {\\n\\n\\t\\t\\t\\t\\t\\tcase NormalBlending:\\n\\t\\t\\t\\t\\t\\t\\tgl.blendFuncSeparate( 1, 771, 1, 771 );\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\t\\tcase AdditiveBlending:\\n\\t\\t\\t\\t\\t\\t\\tgl.blendFunc( 1, 1 );\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\t\\tcase SubtractiveBlending:\\n\\t\\t\\t\\t\\t\\t\\tgl.blendFuncSeparate( 0, 0, 769, 771 );\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\t\\tcase MultiplyBlending:\\n\\t\\t\\t\\t\\t\\t\\tgl.blendFuncSeparate( 0, 768, 0, 770 );\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\t\\t\\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\tswitch ( blending ) {\\n\\n\\t\\t\\t\\t\\t\\tcase NormalBlending:\\n\\t\\t\\t\\t\\t\\t\\tgl.blendFuncSeparate( 770, 771, 1, 771 );\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\t\\tcase AdditiveBlending:\\n\\t\\t\\t\\t\\t\\t\\tgl.blendFunc( 770, 1 );\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\t\\tcase SubtractiveBlending:\\n\\t\\t\\t\\t\\t\\t\\tgl.blendFunc( 0, 769 );\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\t\\tcase MultiplyBlending:\\n\\t\\t\\t\\t\\t\\t\\tgl.blendFunc( 0, 768 );\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\t\\t\\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tcurrentBlendSrc = null;\\n\\t\\t\\t\\tcurrentBlendDst = null;\\n\\t\\t\\t\\tcurrentBlendSrcAlpha = null;\\n\\t\\t\\t\\tcurrentBlendDstAlpha = null;\\n\\n\\t\\t\\t\\tcurrentBlending = blending;\\n\\t\\t\\t\\tcurrentPremultipledAlpha = premultipliedAlpha;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn;\\n\\n\\t\\t}\\n\\n\\t\\t// custom blending\\n\\n\\t\\tblendEquationAlpha = blendEquationAlpha || blendEquation;\\n\\t\\tblendSrcAlpha = blendSrcAlpha || blendSrc;\\n\\t\\tblendDstAlpha = blendDstAlpha || blendDst;\\n\\n\\t\\tif ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {\\n\\n\\t\\t\\tgl.blendEquationSeparate( utils.convert( blendEquation ), utils.convert( blendEquationAlpha ) );\\n\\n\\t\\t\\tcurrentBlendEquation = blendEquation;\\n\\t\\t\\tcurrentBlendEquationAlpha = blendEquationAlpha;\\n\\n\\t\\t}\\n\\n\\t\\tif ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {\\n\\n\\t\\t\\tgl.blendFuncSeparate( utils.convert( blendSrc ), utils.convert( blendDst ), utils.convert( blendSrcAlpha ), utils.convert( blendDstAlpha ) );\\n\\n\\t\\t\\tcurrentBlendSrc = blendSrc;\\n\\t\\t\\tcurrentBlendDst = blendDst;\\n\\t\\t\\tcurrentBlendSrcAlpha = blendSrcAlpha;\\n\\t\\t\\tcurrentBlendDstAlpha = blendDstAlpha;\\n\\n\\t\\t}\\n\\n\\t\\tcurrentBlending = blending;\\n\\t\\tcurrentPremultipledAlpha = null;\\n\\n\\t}\\n\\n\\tfunction setMaterial( material, frontFaceCW ) {\\n\\n\\t\\tmaterial.side === DoubleSide\\n\\t\\t\\t? disable( 2884 )\\n\\t\\t\\t: enable( 2884 );\\n\\n\\t\\tvar flipSided = ( material.side === BackSide );\\n\\t\\tif ( frontFaceCW ) flipSided = ! flipSided;\\n\\n\\t\\tsetFlipSided( flipSided );\\n\\n\\t\\t( material.blending === NormalBlending && material.transparent === false )\\n\\t\\t\\t? setBlending( NoBlending )\\n\\t\\t\\t: setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );\\n\\n\\t\\tdepthBuffer.setFunc( material.depthFunc );\\n\\t\\tdepthBuffer.setTest( material.depthTest );\\n\\t\\tdepthBuffer.setMask( material.depthWrite );\\n\\t\\tcolorBuffer.setMask( material.colorWrite );\\n\\n\\t\\tsetPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\\n\\n\\t}\\n\\n\\t//\\n\\n\\tfunction setFlipSided( flipSided ) {\\n\\n\\t\\tif ( currentFlipSided !== flipSided ) {\\n\\n\\t\\t\\tif ( flipSided ) {\\n\\n\\t\\t\\t\\tgl.frontFace( 2304 );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tgl.frontFace( 2305 );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tcurrentFlipSided = flipSided;\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tfunction setCullFace( cullFace ) {\\n\\n\\t\\tif ( cullFace !== CullFaceNone ) {\\n\\n\\t\\t\\tenable( 2884 );\\n\\n\\t\\t\\tif ( cullFace !== currentCullFace ) {\\n\\n\\t\\t\\t\\tif ( cullFace === CullFaceBack ) {\\n\\n\\t\\t\\t\\t\\tgl.cullFace( 1029 );\\n\\n\\t\\t\\t\\t} else if ( cullFace === CullFaceFront ) {\\n\\n\\t\\t\\t\\t\\tgl.cullFace( 1028 );\\n\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\tgl.cullFace( 1032 );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t} else {\\n\\n\\t\\t\\tdisable( 2884 );\\n\\n\\t\\t}\\n\\n\\t\\tcurrentCullFace = cullFace;\\n\\n\\t}\\n\\n\\tfunction setLineWidth( width ) {\\n\\n\\t\\tif ( width !== currentLineWidth ) {\\n\\n\\t\\t\\tif ( lineWidthAvailable ) gl.lineWidth( width );\\n\\n\\t\\t\\tcurrentLineWidth = width;\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tfunction setPolygonOffset( polygonOffset, factor, units ) {\\n\\n\\t\\tif ( polygonOffset ) {\\n\\n\\t\\t\\tenable( 32823 );\\n\\n\\t\\t\\tif ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {\\n\\n\\t\\t\\t\\tgl.polygonOffset( factor, units );\\n\\n\\t\\t\\t\\tcurrentPolygonOffsetFactor = factor;\\n\\t\\t\\t\\tcurrentPolygonOffsetUnits = units;\\n\\n\\t\\t\\t}\\n\\n\\t\\t} else {\\n\\n\\t\\t\\tdisable( 32823 );\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tfunction setScissorTest( scissorTest ) {\\n\\n\\t\\tif ( scissorTest ) {\\n\\n\\t\\t\\tenable( 3089 );\\n\\n\\t\\t} else {\\n\\n\\t\\t\\tdisable( 3089 );\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\t// texture\\n\\n\\tfunction activeTexture( webglSlot ) {\\n\\n\\t\\tif ( webglSlot === undefined ) webglSlot = 33984 + maxTextures - 1;\\n\\n\\t\\tif ( currentTextureSlot !== webglSlot ) {\\n\\n\\t\\t\\tgl.activeTexture( webglSlot );\\n\\t\\t\\tcurrentTextureSlot = webglSlot;\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tfunction bindTexture( webglType, webglTexture ) {\\n\\n\\t\\tif ( currentTextureSlot === null ) {\\n\\n\\t\\t\\tactiveTexture();\\n\\n\\t\\t}\\n\\n\\t\\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\\n\\n\\t\\tif ( boundTexture === undefined ) {\\n\\n\\t\\t\\tboundTexture = { type: undefined, texture: undefined };\\n\\t\\t\\tcurrentBoundTextures[ currentTextureSlot ] = boundTexture;\\n\\n\\t\\t}\\n\\n\\t\\tif ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\\n\\n\\t\\t\\tgl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );\\n\\n\\t\\t\\tboundTexture.type = webglType;\\n\\t\\t\\tboundTexture.texture = webglTexture;\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tfunction compressedTexImage2D() {\\n\\n\\t\\ttry {\\n\\n\\t\\t\\tgl.compressedTexImage2D.apply( gl, arguments );\\n\\n\\t\\t} catch ( error ) {\\n\\n\\t\\t\\tconsole.error( 'THREE.WebGLState:', error );\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tfunction texImage2D() {\\n\\n\\t\\ttry {\\n\\n\\t\\t\\tgl.texImage2D.apply( gl, arguments );\\n\\n\\t\\t} catch ( error ) {\\n\\n\\t\\t\\tconsole.error( 'THREE.WebGLState:', error );\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tfunction texImage3D() {\\n\\n\\t\\ttry {\\n\\n\\t\\t\\tgl.texImage3D.apply( gl, arguments );\\n\\n\\t\\t} catch ( error ) {\\n\\n\\t\\t\\tconsole.error( 'THREE.WebGLState:', error );\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\t//\\n\\n\\tfunction scissor( scissor ) {\\n\\n\\t\\tif ( currentScissor.equals( scissor ) === false ) {\\n\\n\\t\\t\\tgl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );\\n\\t\\t\\tcurrentScissor.copy( scissor );\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tfunction viewport( viewport ) {\\n\\n\\t\\tif ( currentViewport.equals( viewport ) === false ) {\\n\\n\\t\\t\\tgl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );\\n\\t\\t\\tcurrentViewport.copy( viewport );\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\t//\\n\\n\\tfunction reset() {\\n\\n\\t\\tfor ( var i = 0; i < enabledAttributes.length; i ++ ) {\\n\\n\\t\\t\\tif ( enabledAttributes[ i ] === 1 ) {\\n\\n\\t\\t\\t\\tgl.disableVertexAttribArray( i );\\n\\t\\t\\t\\tenabledAttributes[ i ] = 0;\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tenabledCapabilities = {};\\n\\n\\t\\tcompressedTextureFormats = null;\\n\\n\\t\\tcurrentTextureSlot = null;\\n\\t\\tcurrentBoundTextures = {};\\n\\n\\t\\tcurrentProgram = null;\\n\\n\\t\\tcurrentBlending = null;\\n\\n\\t\\tcurrentFlipSided = null;\\n\\t\\tcurrentCullFace = null;\\n\\n\\t\\tcolorBuffer.reset();\\n\\t\\tdepthBuffer.reset();\\n\\t\\tstencilBuffer.reset();\\n\\n\\t}\\n\\n\\treturn {\\n\\n\\t\\tbuffers: {\\n\\t\\t\\tcolor: colorBuffer,\\n\\t\\t\\tdepth: depthBuffer,\\n\\t\\t\\tstencil: stencilBuffer\\n\\t\\t},\\n\\n\\t\\tinitAttributes: initAttributes,\\n\\t\\tenableAttribute: enableAttribute,\\n\\t\\tenableAttributeAndDivisor: enableAttributeAndDivisor,\\n\\t\\tdisableUnusedAttributes: disableUnusedAttributes,\\n\\t\\tenable: enable,\\n\\t\\tdisable: disable,\\n\\t\\tgetCompressedTextureFormats: getCompressedTextureFormats,\\n\\n\\t\\tuseProgram: useProgram,\\n\\n\\t\\tsetBlending: setBlending,\\n\\t\\tsetMaterial: setMaterial,\\n\\n\\t\\tsetFlipSided: setFlipSided,\\n\\t\\tsetCullFace: setCullFace,\\n\\n\\t\\tsetLineWidth: setLineWidth,\\n\\t\\tsetPolygonOffset: setPolygonOffset,\\n\\n\\t\\tsetScissorTest: setScissorTest,\\n\\n\\t\\tactiveTexture: activeTexture,\\n\\t\\tbindTexture: bindTexture,\\n\\t\\tcompressedTexImage2D: compressedTexImage2D,\\n\\t\\ttexImage2D: texImage2D,\\n\\t\\ttexImage3D: texImage3D,\\n\\n\\t\\tscissor: scissor,\\n\\t\\tviewport: viewport,\\n\\n\\t\\treset: reset\\n\\n\\t};\\n\\n}\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\nfunction WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info ) {\\n\\n\\tvar _videoTextures = {};\\n\\tvar _canvas;\\n\\n\\t//\\n\\n\\tfunction resizeImage( image, needsPowerOfTwo, needsNewCanvas, maxSize ) {\\n\\n\\t\\tvar scale = 1;\\n\\n\\t\\t// handle case if texture exceeds max size\\n\\n\\t\\tif ( image.width > maxSize || image.height > maxSize ) {\\n\\n\\t\\t\\tscale = maxSize / Math.max( image.width, image.height );\\n\\n\\t\\t}\\n\\n\\t\\t// only perform resize if necessary\\n\\n\\t\\tif ( scale < 1 || needsPowerOfTwo === true ) {\\n\\n\\t\\t\\t// only perform resize for certain image types\\n\\n\\t\\t\\tif ( image instanceof HTMLImageElement || image instanceof HTMLCanvasElement || image instanceof ImageBitmap ) {\\n\\n\\t\\t\\t\\tif ( _canvas === undefined ) _canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\\n\\n\\t\\t\\t\\t// cube textures can't reuse the same canvas\\n\\n\\t\\t\\t\\tvar canvas = needsNewCanvas ? document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ) : _canvas;\\n\\n\\t\\t\\t\\tvar floor = needsPowerOfTwo ? _Math.floorPowerOfTwo : Math.floor;\\n\\n\\t\\t\\t\\tcanvas.width = floor( scale * image.width );\\n\\t\\t\\t\\tcanvas.height = floor( scale * image.height );\\n\\n\\t\\t\\t\\tvar context = canvas.getContext( '2d' );\\n\\t\\t\\t\\tcontext.drawImage( image, 0, 0, canvas.width, canvas.height );\\n\\n\\t\\t\\t\\tconsole.warn( 'THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + canvas.width + 'x' + canvas.height + ').' );\\n\\n\\t\\t\\t\\treturn canvas;\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tif ( 'data' in image ) {\\n\\n\\t\\t\\t\\t\\tconsole.warn( 'THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').' );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\treturn image;\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\treturn image;\\n\\n\\t}\\n\\n\\tfunction isPowerOfTwo( image ) {\\n\\n\\t\\treturn _Math.isPowerOfTwo( image.width ) && _Math.isPowerOfTwo( image.height );\\n\\n\\t}\\n\\n\\tfunction textureNeedsPowerOfTwo( texture ) {\\n\\n\\t\\tif ( capabilities.isWebGL2 ) return false;\\n\\n\\t\\treturn ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||\\n\\t\\t\\t( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );\\n\\n\\t}\\n\\n\\tfunction textureNeedsGenerateMipmaps( texture, supportsMips ) {\\n\\n\\t\\treturn texture.generateMipmaps && supportsMips &&\\n\\t\\t\\ttexture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\\n\\n\\t}\\n\\n\\tfunction generateMipmap( target, texture, width, height ) {\\n\\n\\t\\t_gl.generateMipmap( target );\\n\\n\\t\\tvar textureProperties = properties.get( texture );\\n\\n\\t\\t// Note: Math.log( x ) * Math.LOG2E used instead of Math.log2( x ) which is not supported by IE11\\n\\t\\ttextureProperties.__maxMipLevel = Math.log( Math.max( width, height ) ) * Math.LOG2E;\\n\\n\\t}\\n\\n\\tfunction getInternalFormat( glFormat, glType ) {\\n\\n\\t\\tif ( ! capabilities.isWebGL2 ) return glFormat;\\n\\n\\t\\tvar internalFormat = glFormat;\\n\\n\\t\\tif ( glFormat === 6403 ) {\\n\\n\\t\\t\\tif ( glType === 5126 ) internalFormat = 33326;\\n\\t\\t\\tif ( glType === 5131 ) internalFormat = 33325;\\n\\t\\t\\tif ( glType === 5121 ) internalFormat = 33321;\\n\\n\\t\\t}\\n\\n\\t\\tif ( glFormat === 6407 ) {\\n\\n\\t\\t\\tif ( glType === 5126 ) internalFormat = 34837;\\n\\t\\t\\tif ( glType === 5131 ) internalFormat = 34843;\\n\\t\\t\\tif ( glType === 5121 ) internalFormat = 32849;\\n\\n\\t\\t}\\n\\n\\t\\tif ( glFormat === 6408 ) {\\n\\n\\t\\t\\tif ( glType === 5126 ) internalFormat = 34836;\\n\\t\\t\\tif ( glType === 5131 ) internalFormat = 34842;\\n\\t\\t\\tif ( glType === 5121 ) internalFormat = 32856;\\n\\n\\t\\t}\\n\\n\\t\\tif ( internalFormat === 33325 || internalFormat === 33326 ||\\n\\t\\t\\tinternalFormat === 34842 || internalFormat === 34836 ) {\\n\\n\\t\\t\\textensions.get( 'EXT_color_buffer_float' );\\n\\n\\t\\t} else if ( internalFormat === 34843 || internalFormat === 34837 ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.WebGLRenderer: Floating point textures with RGB format not supported. Please use RGBA instead.' );\\n\\n\\t\\t}\\n\\n\\t\\treturn internalFormat;\\n\\n\\t}\\n\\n\\t// Fallback filters for non-power-of-2 textures\\n\\n\\tfunction filterFallback( f ) {\\n\\n\\t\\tif ( f === NearestFilter || f === NearestMipMapNearestFilter || f === NearestMipMapLinearFilter ) {\\n\\n\\t\\t\\treturn 9728;\\n\\n\\t\\t}\\n\\n\\t\\treturn 9729;\\n\\n\\t}\\n\\n\\t//\\n\\n\\tfunction onTextureDispose( event ) {\\n\\n\\t\\tvar texture = event.target;\\n\\n\\t\\ttexture.removeEventListener( 'dispose', onTextureDispose );\\n\\n\\t\\tdeallocateTexture( texture );\\n\\n\\t\\tif ( texture.isVideoTexture ) {\\n\\n\\t\\t\\tdelete _videoTextures[ texture.id ];\\n\\n\\t\\t}\\n\\n\\t\\tinfo.memory.textures --;\\n\\n\\t}\\n\\n\\tfunction onRenderTargetDispose( event ) {\\n\\n\\t\\tvar renderTarget = event.target;\\n\\n\\t\\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\\n\\n\\t\\tdeallocateRenderTarget( renderTarget );\\n\\n\\t\\tinfo.memory.textures --;\\n\\n\\t}\\n\\n\\t//\\n\\n\\tfunction deallocateTexture( texture ) {\\n\\n\\t\\tvar textureProperties = properties.get( texture );\\n\\n\\t\\tif ( texture.image && textureProperties.__image__webglTextureCube ) {\\n\\n\\t\\t\\t// cube texture\\n\\n\\t\\t\\t_gl.deleteTexture( textureProperties.__image__webglTextureCube );\\n\\n\\t\\t} else {\\n\\n\\t\\t\\t// 2D texture\\n\\n\\t\\t\\tif ( textureProperties.__webglInit === undefined ) return;\\n\\n\\t\\t\\t_gl.deleteTexture( textureProperties.__webglTexture );\\n\\n\\t\\t}\\n\\n\\t\\t// remove all webgl properties\\n\\t\\tproperties.remove( texture );\\n\\n\\t}\\n\\n\\tfunction deallocateRenderTarget( renderTarget ) {\\n\\n\\t\\tvar renderTargetProperties = properties.get( renderTarget );\\n\\t\\tvar textureProperties = properties.get( renderTarget.texture );\\n\\n\\t\\tif ( ! renderTarget ) return;\\n\\n\\t\\tif ( textureProperties.__webglTexture !== undefined ) {\\n\\n\\t\\t\\t_gl.deleteTexture( textureProperties.__webglTexture );\\n\\n\\t\\t}\\n\\n\\t\\tif ( renderTarget.depthTexture ) {\\n\\n\\t\\t\\trenderTarget.depthTexture.dispose();\\n\\n\\t\\t}\\n\\n\\t\\tif ( renderTarget.isWebGLRenderTargetCube ) {\\n\\n\\t\\t\\tfor ( var i = 0; i < 6; i ++ ) {\\n\\n\\t\\t\\t\\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\\n\\t\\t\\t\\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );\\n\\n\\t\\t\\t}\\n\\n\\t\\t} else {\\n\\n\\t\\t\\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\\n\\t\\t\\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );\\n\\n\\t\\t}\\n\\n\\t\\tproperties.remove( renderTarget.texture );\\n\\t\\tproperties.remove( renderTarget );\\n\\n\\t}\\n\\n\\t//\\n\\n\\n\\n\\tfunction setTexture2D( texture, slot ) {\\n\\n\\t\\tvar textureProperties = properties.get( texture );\\n\\n\\t\\tif ( texture.isVideoTexture ) updateVideoTexture( texture );\\n\\n\\t\\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\\n\\n\\t\\t\\tvar image = texture.image;\\n\\n\\t\\t\\tif ( image === undefined ) {\\n\\n\\t\\t\\t\\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined' );\\n\\n\\t\\t\\t} else if ( image.complete === false ) {\\n\\n\\t\\t\\t\\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete' );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tuploadTexture( textureProperties, texture, slot );\\n\\t\\t\\t\\treturn;\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tstate.activeTexture( 33984 + slot );\\n\\t\\tstate.bindTexture( 3553, textureProperties.__webglTexture );\\n\\n\\t}\\n\\n\\tfunction setTexture3D( texture, slot ) {\\n\\n\\t\\tvar textureProperties = properties.get( texture );\\n\\n\\t\\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\\n\\n\\t\\t\\tuploadTexture( textureProperties, texture, slot );\\n\\t\\t\\treturn;\\n\\n\\t\\t}\\n\\n\\t\\tstate.activeTexture( 33984 + slot );\\n\\t\\tstate.bindTexture( 32879, textureProperties.__webglTexture );\\n\\n\\t}\\n\\n\\n\\tfunction setTextureCube( texture, slot ) {\\n\\n\\t\\tvar textureProperties = properties.get( texture );\\n\\n\\t\\tif ( texture.image.length === 6 ) {\\n\\n\\t\\t\\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\\n\\n\\t\\t\\t\\tif ( ! textureProperties.__image__webglTextureCube ) {\\n\\n\\t\\t\\t\\t\\ttexture.addEventListener( 'dispose', onTextureDispose );\\n\\n\\t\\t\\t\\t\\ttextureProperties.__image__webglTextureCube = _gl.createTexture();\\n\\n\\t\\t\\t\\t\\tinfo.memory.textures ++;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tstate.activeTexture( 33984 + slot );\\n\\t\\t\\t\\tstate.bindTexture( 34067, textureProperties.__image__webglTextureCube );\\n\\n\\t\\t\\t\\t_gl.pixelStorei( 37440, texture.flipY );\\n\\n\\t\\t\\t\\tvar isCompressed = ( texture && texture.isCompressedTexture );\\n\\t\\t\\t\\tvar isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );\\n\\n\\t\\t\\t\\tvar cubeImage = [];\\n\\n\\t\\t\\t\\tfor ( var i = 0; i < 6; i ++ ) {\\n\\n\\t\\t\\t\\t\\tif ( ! isCompressed && ! isDataTexture ) {\\n\\n\\t\\t\\t\\t\\t\\tcubeImage[ i ] = resizeImage( texture.image[ i ], false, true, capabilities.maxCubemapSize );\\n\\n\\t\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\t\\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tvar image = cubeImage[ 0 ],\\n\\t\\t\\t\\t\\tsupportsMips = isPowerOfTwo( image ) || capabilities.isWebGL2,\\n\\t\\t\\t\\t\\tglFormat = utils.convert( texture.format ),\\n\\t\\t\\t\\t\\tglType = utils.convert( texture.type ),\\n\\t\\t\\t\\t\\tglInternalFormat = getInternalFormat( glFormat, glType );\\n\\n\\t\\t\\t\\tsetTextureParameters( 34067, texture, supportsMips );\\n\\n\\t\\t\\t\\tfor ( var i = 0; i < 6; i ++ ) {\\n\\n\\t\\t\\t\\t\\tif ( ! isCompressed ) {\\n\\n\\t\\t\\t\\t\\t\\tif ( isDataTexture ) {\\n\\n\\t\\t\\t\\t\\t\\t\\tstate.texImage2D( 34069 + i, 0, glInternalFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );\\n\\n\\t\\t\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\t\\t\\tstate.texImage2D( 34069 + i, 0, glInternalFormat, glFormat, glType, cubeImage[ i ] );\\n\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\t\\tvar mipmap, mipmaps = cubeImage[ i ].mipmaps;\\n\\n\\t\\t\\t\\t\\t\\tfor ( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {\\n\\n\\t\\t\\t\\t\\t\\t\\tmipmap = mipmaps[ j ];\\n\\n\\t\\t\\t\\t\\t\\t\\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\\n\\n\\t\\t\\t\\t\\t\\t\\t\\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tstate.compressedTexImage2D( 34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\t\\t\\t\\tstate.texImage2D( 34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\\n\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif ( ! isCompressed ) {\\n\\n\\t\\t\\t\\t\\ttextureProperties.__maxMipLevel = 0;\\n\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\\n\\n\\t\\t\\t\\t\\t// We assume images for cube map have the same size.\\n\\t\\t\\t\\t\\tgenerateMipmap( 34067, texture, image.width, image.height );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\ttextureProperties.__version = texture.version;\\n\\n\\t\\t\\t\\tif ( texture.onUpdate ) texture.onUpdate( texture );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tstate.activeTexture( 33984 + slot );\\n\\t\\t\\t\\tstate.bindTexture( 34067, textureProperties.__image__webglTextureCube );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tfunction setTextureCubeDynamic( texture, slot ) {\\n\\n\\t\\tstate.activeTexture( 33984 + slot );\\n\\t\\tstate.bindTexture( 34067, properties.get( texture ).__webglTexture );\\n\\n\\t}\\n\\n\\tfunction setTextureParameters( textureType, texture, supportsMips ) {\\n\\n\\t\\tvar extension;\\n\\n\\t\\tif ( supportsMips ) {\\n\\n\\t\\t\\t_gl.texParameteri( textureType, 10242, utils.convert( texture.wrapS ) );\\n\\t\\t\\t_gl.texParameteri( textureType, 10243, utils.convert( texture.wrapT ) );\\n\\n\\t\\t\\t_gl.texParameteri( textureType, 10240, utils.convert( texture.magFilter ) );\\n\\t\\t\\t_gl.texParameteri( textureType, 10241, utils.convert( texture.minFilter ) );\\n\\n\\t\\t} else {\\n\\n\\t\\t\\t_gl.texParameteri( textureType, 10242, 33071 );\\n\\t\\t\\t_gl.texParameteri( textureType, 10243, 33071 );\\n\\n\\t\\t\\tif ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {\\n\\n\\t\\t\\t\\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.' );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\t_gl.texParameteri( textureType, 10240, filterFallback( texture.magFilter ) );\\n\\t\\t\\t_gl.texParameteri( textureType, 10241, filterFallback( texture.minFilter ) );\\n\\n\\t\\t\\tif ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {\\n\\n\\t\\t\\t\\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.' );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\textension = extensions.get( 'EXT_texture_filter_anisotropic' );\\n\\n\\t\\tif ( extension ) {\\n\\n\\t\\t\\tif ( texture.type === FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) return;\\n\\t\\t\\tif ( texture.type === HalfFloatType && ( capabilities.isWebGL2 || extensions.get( 'OES_texture_half_float_linear' ) ) === null ) return;\\n\\n\\t\\t\\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\\n\\n\\t\\t\\t\\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );\\n\\t\\t\\t\\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tfunction uploadTexture( textureProperties, texture, slot ) {\\n\\n\\t\\tvar textureType;\\n\\n\\t\\tif ( texture.isDataTexture3D ) {\\n\\n\\t\\t\\ttextureType = 32879;\\n\\n\\t\\t} else {\\n\\n\\t\\t\\ttextureType = 3553;\\n\\n\\t\\t}\\n\\n\\n\\t\\tif ( textureProperties.__webglInit === undefined ) {\\n\\n\\t\\t\\ttextureProperties.__webglInit = true;\\n\\n\\t\\t\\ttexture.addEventListener( 'dispose', onTextureDispose );\\n\\n\\t\\t\\ttextureProperties.__webglTexture = _gl.createTexture();\\n\\n\\t\\t\\tinfo.memory.textures ++;\\n\\n\\t\\t}\\n\\t\\tstate.activeTexture( 33984 + slot );\\n\\n\\n\\t\\tstate.bindTexture( textureType, textureProperties.__webglTexture );\\n\\n\\n\\n\\t\\t_gl.pixelStorei( 37440, texture.flipY );\\n\\t\\t_gl.pixelStorei( 37441, texture.premultiplyAlpha );\\n\\t\\t_gl.pixelStorei( 3317, texture.unpackAlignment );\\n\\n\\t\\tvar needsPowerOfTwo = textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( texture.image ) === false;\\n\\t\\tvar image = resizeImage( texture.image, needsPowerOfTwo, false, capabilities.maxTextureSize );\\n\\n\\t\\tvar supportsMips = isPowerOfTwo( image ) || capabilities.isWebGL2,\\n\\t\\t\\tglFormat = utils.convert( texture.format ),\\n\\t\\t\\tglType = utils.convert( texture.type ),\\n\\t\\t\\tglInternalFormat = getInternalFormat( glFormat, glType );\\n\\n\\t\\tsetTextureParameters( textureType, texture, supportsMips );\\n\\n\\t\\tvar mipmap, mipmaps = texture.mipmaps;\\n\\n\\t\\tif ( texture.isDepthTexture ) {\\n\\n\\t\\t\\t// populate depth texture with dummy data\\n\\n\\t\\t\\tglInternalFormat = 6402;\\n\\n\\t\\t\\tif ( texture.type === FloatType ) {\\n\\n\\t\\t\\t\\tif ( ! capabilities.isWebGL2 ) throw new Error( 'Float Depth Texture only supported in WebGL2.0' );\\n\\t\\t\\t\\tglInternalFormat = 36012;\\n\\n\\t\\t\\t} else if ( capabilities.isWebGL2 ) {\\n\\n\\t\\t\\t\\t// WebGL 2.0 requires signed internalformat for glTexImage2D\\n\\t\\t\\t\\tglInternalFormat = 33189;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( texture.format === DepthFormat && glInternalFormat === 6402 ) {\\n\\n\\t\\t\\t\\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\\n\\t\\t\\t\\t// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT\\n\\t\\t\\t\\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\\n\\t\\t\\t\\tif ( texture.type !== UnsignedShortType && texture.type !== UnsignedIntType ) {\\n\\n\\t\\t\\t\\t\\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.' );\\n\\n\\t\\t\\t\\t\\ttexture.type = UnsignedShortType;\\n\\t\\t\\t\\t\\tglType = utils.convert( texture.type );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Depth stencil textures need the DEPTH_STENCIL internal format\\n\\t\\t\\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\\n\\t\\t\\tif ( texture.format === DepthStencilFormat ) {\\n\\n\\t\\t\\t\\tglInternalFormat = 34041;\\n\\n\\t\\t\\t\\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\\n\\t\\t\\t\\t// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.\\n\\t\\t\\t\\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\\n\\t\\t\\t\\tif ( texture.type !== UnsignedInt248Type ) {\\n\\n\\t\\t\\t\\t\\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.' );\\n\\n\\t\\t\\t\\t\\ttexture.type = UnsignedInt248Type;\\n\\t\\t\\t\\t\\tglType = utils.convert( texture.type );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tstate.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null );\\n\\n\\t\\t} else if ( texture.isDataTexture ) {\\n\\n\\t\\t\\t// use manually created mipmaps if available\\n\\t\\t\\t// if there are no manual mipmaps\\n\\t\\t\\t// set 0 level mipmap and then use GL to generate other mipmap levels\\n\\n\\t\\t\\tif ( mipmaps.length > 0 && supportsMips ) {\\n\\n\\t\\t\\t\\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\\n\\n\\t\\t\\t\\t\\tmipmap = mipmaps[ i ];\\n\\t\\t\\t\\t\\tstate.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\ttexture.generateMipmaps = false;\\n\\t\\t\\t\\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tstate.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data );\\n\\t\\t\\t\\ttextureProperties.__maxMipLevel = 0;\\n\\n\\t\\t\\t}\\n\\n\\t\\t} else if ( texture.isCompressedTexture ) {\\n\\n\\t\\t\\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\\n\\n\\t\\t\\t\\tmipmap = mipmaps[ i ];\\n\\n\\t\\t\\t\\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\\n\\n\\t\\t\\t\\t\\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\\n\\n\\t\\t\\t\\t\\t\\tstate.compressedTexImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\\n\\n\\t\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\t\\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\tstate.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\\n\\n\\t\\t} else if ( texture.isDataTexture3D ) {\\n\\n\\t\\t\\tstate.texImage3D( 32879, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );\\n\\t\\t\\ttextureProperties.__maxMipLevel = 0;\\n\\n\\t\\t} else {\\n\\n\\t\\t\\t// regular Texture (image, video, canvas)\\n\\n\\t\\t\\t// use manually created mipmaps if available\\n\\t\\t\\t// if there are no manual mipmaps\\n\\t\\t\\t// set 0 level mipmap and then use GL to generate other mipmap levels\\n\\n\\t\\t\\tif ( mipmaps.length > 0 && supportsMips ) {\\n\\n\\t\\t\\t\\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\\n\\n\\t\\t\\t\\t\\tmipmap = mipmaps[ i ];\\n\\t\\t\\t\\t\\tstate.texImage2D( 3553, i, glInternalFormat, glFormat, glType, mipmap );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\ttexture.generateMipmaps = false;\\n\\t\\t\\t\\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tstate.texImage2D( 3553, 0, glInternalFormat, glFormat, glType, image );\\n\\t\\t\\t\\ttextureProperties.__maxMipLevel = 0;\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\\n\\n\\t\\t\\tgenerateMipmap( 3553, texture, image.width, image.height );\\n\\n\\t\\t}\\n\\n\\t\\ttextureProperties.__version = texture.version;\\n\\n\\t\\tif ( texture.onUpdate ) texture.onUpdate( texture );\\n\\n\\t}\\n\\n\\t// Render targets\\n\\n\\t// Setup storage for target texture and bind it to correct framebuffer\\n\\tfunction setupFrameBufferTexture( framebuffer, renderTarget, attachment, textureTarget ) {\\n\\n\\t\\tvar glFormat = utils.convert( renderTarget.texture.format );\\n\\t\\tvar glType = utils.convert( renderTarget.texture.type );\\n\\t\\tvar glInternalFormat = getInternalFormat( glFormat, glType );\\n\\t\\tstate.texImage2D( textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\\n\\t\\t_gl.bindFramebuffer( 36160, framebuffer );\\n\\t\\t_gl.framebufferTexture2D( 36160, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );\\n\\t\\t_gl.bindFramebuffer( 36160, null );\\n\\n\\t}\\n\\n\\t// Setup storage for internal depth/stencil buffers and bind to correct framebuffer\\n\\tfunction setupRenderBufferStorage( renderbuffer, renderTarget, isMultisample ) {\\n\\n\\t\\t_gl.bindRenderbuffer( 36161, renderbuffer );\\n\\n\\t\\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\\n\\n\\t\\t\\tif ( isMultisample ) {\\n\\n\\t\\t\\t\\tvar samples = getRenderTargetSamples( renderTarget );\\n\\n\\t\\t\\t\\t_gl.renderbufferStorageMultisample( 36161, samples, 33189, renderTarget.width, renderTarget.height );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t_gl.renderbufferStorage( 36161, 33189, renderTarget.width, renderTarget.height );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\t_gl.framebufferRenderbuffer( 36160, 36096, 36161, renderbuffer );\\n\\n\\t\\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\\n\\n\\t\\t\\tif ( isMultisample ) {\\n\\n\\t\\t\\t\\tvar samples = getRenderTargetSamples( renderTarget );\\n\\n\\t\\t\\t\\t_gl.renderbufferStorageMultisample( 36161, samples, 34041, renderTarget.width, renderTarget.height );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t_gl.renderbufferStorage( 36161, 34041, renderTarget.width, renderTarget.height );\\n\\n\\t\\t\\t}\\n\\n\\n\\t\\t\\t_gl.framebufferRenderbuffer( 36160, 33306, 36161, renderbuffer );\\n\\n\\t\\t} else {\\n\\n\\t\\t\\tvar glFormat = utils.convert( renderTarget.texture.format );\\n\\t\\t\\tvar glType = utils.convert( renderTarget.texture.type );\\n\\t\\t\\tvar glInternalFormat = getInternalFormat( glFormat, glType );\\n\\n\\t\\t\\tif ( isMultisample ) {\\n\\n\\t\\t\\t\\tvar samples = getRenderTargetSamples( renderTarget );\\n\\n\\t\\t\\t\\t_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t_gl.renderbufferStorage( 36161, glInternalFormat, renderTarget.width, renderTarget.height );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\t_gl.bindRenderbuffer( 36161, null );\\n\\n\\t}\\n\\n\\t// Setup resources for a Depth Texture for a FBO (needs an extension)\\n\\tfunction setupDepthTexture( framebuffer, renderTarget ) {\\n\\n\\t\\tvar isCube = ( renderTarget && renderTarget.isWebGLRenderTargetCube );\\n\\t\\tif ( isCube ) throw new Error( 'Depth Texture with cube render targets is not supported' );\\n\\n\\t\\t_gl.bindFramebuffer( 36160, framebuffer );\\n\\n\\t\\tif ( ! ( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {\\n\\n\\t\\t\\tthrow new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );\\n\\n\\t\\t}\\n\\n\\t\\t// upload an empty depth texture with framebuffer size\\n\\t\\tif ( ! properties.get( renderTarget.depthTexture ).__webglTexture ||\\n\\t\\t\\t\\trenderTarget.depthTexture.image.width !== renderTarget.width ||\\n\\t\\t\\t\\trenderTarget.depthTexture.image.height !== renderTarget.height ) {\\n\\n\\t\\t\\trenderTarget.depthTexture.image.width = renderTarget.width;\\n\\t\\t\\trenderTarget.depthTexture.image.height = renderTarget.height;\\n\\t\\t\\trenderTarget.depthTexture.needsUpdate = true;\\n\\n\\t\\t}\\n\\n\\t\\tsetTexture2D( renderTarget.depthTexture, 0 );\\n\\n\\t\\tvar webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;\\n\\n\\t\\tif ( renderTarget.depthTexture.format === DepthFormat ) {\\n\\n\\t\\t\\t_gl.framebufferTexture2D( 36160, 36096, 3553, webglDepthTexture, 0 );\\n\\n\\t\\t} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {\\n\\n\\t\\t\\t_gl.framebufferTexture2D( 36160, 33306, 3553, webglDepthTexture, 0 );\\n\\n\\t\\t} else {\\n\\n\\t\\t\\tthrow new Error( 'Unknown depthTexture format' );\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\t// Setup GL resources for a non-texture depth buffer\\n\\tfunction setupDepthRenderbuffer( renderTarget ) {\\n\\n\\t\\tvar renderTargetProperties = properties.get( renderTarget );\\n\\n\\t\\tvar isCube = ( renderTarget.isWebGLRenderTargetCube === true );\\n\\n\\t\\tif ( renderTarget.depthTexture ) {\\n\\n\\t\\t\\tif ( isCube ) throw new Error( 'target.depthTexture not supported in Cube render targets' );\\n\\n\\t\\t\\tsetupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );\\n\\n\\t\\t} else {\\n\\n\\t\\t\\tif ( isCube ) {\\n\\n\\t\\t\\t\\trenderTargetProperties.__webglDepthbuffer = [];\\n\\n\\t\\t\\t\\tfor ( var i = 0; i < 6; i ++ ) {\\n\\n\\t\\t\\t\\t\\t_gl.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer[ i ] );\\n\\t\\t\\t\\t\\trenderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();\\n\\t\\t\\t\\t\\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t_gl.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer );\\n\\t\\t\\t\\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\\n\\t\\t\\t\\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\t_gl.bindFramebuffer( 36160, null );\\n\\n\\t}\\n\\n\\t// Set up GL resources for the render target\\n\\tfunction setupRenderTarget( renderTarget ) {\\n\\n\\t\\tvar renderTargetProperties = properties.get( renderTarget );\\n\\t\\tvar textureProperties = properties.get( renderTarget.texture );\\n\\n\\t\\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\\n\\n\\t\\ttextureProperties.__webglTexture = _gl.createTexture();\\n\\n\\t\\tinfo.memory.textures ++;\\n\\n\\t\\tvar isCube = ( renderTarget.isWebGLRenderTargetCube === true );\\n\\t\\tvar isMultisample = ( renderTarget.isWebGLMultisampleRenderTarget === true );\\n\\t\\tvar supportsMips = isPowerOfTwo( renderTarget ) || capabilities.isWebGL2;\\n\\n\\t\\t// Setup framebuffer\\n\\n\\t\\tif ( isCube ) {\\n\\n\\t\\t\\trenderTargetProperties.__webglFramebuffer = [];\\n\\n\\t\\t\\tfor ( var i = 0; i < 6; i ++ ) {\\n\\n\\t\\t\\t\\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\\n\\n\\t\\t\\t}\\n\\n\\t\\t} else {\\n\\n\\t\\t\\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\\n\\n\\t\\t\\tif ( isMultisample ) {\\n\\n\\t\\t\\t\\tif ( capabilities.isWebGL2 ) {\\n\\n\\t\\t\\t\\t\\trenderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();\\n\\t\\t\\t\\t\\trenderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();\\n\\n\\t\\t\\t\\t\\t_gl.bindRenderbuffer( 36161, renderTargetProperties.__webglColorRenderbuffer );\\n\\t\\t\\t\\t\\tvar glFormat = utils.convert( renderTarget.texture.format );\\n\\t\\t\\t\\t\\tvar glType = utils.convert( renderTarget.texture.type );\\n\\t\\t\\t\\t\\tvar glInternalFormat = getInternalFormat( glFormat, glType );\\n\\t\\t\\t\\t\\tvar samples = getRenderTargetSamples( renderTarget );\\n\\t\\t\\t\\t\\t_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\\n\\n\\t\\t\\t\\t\\t_gl.bindFramebuffer( 36160, renderTargetProperties.__webglMultisampledFramebuffer );\\n\\t\\t\\t\\t\\t_gl.framebufferRenderbuffer( 36160, 36064, 36161, renderTargetProperties.__webglColorRenderbuffer );\\n\\t\\t\\t\\t\\t_gl.bindRenderbuffer( 36161, null );\\n\\n\\t\\t\\t\\t\\tif ( renderTarget.depthBuffer ) {\\n\\n\\t\\t\\t\\t\\t\\trenderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();\\n\\t\\t\\t\\t\\t\\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true );\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t_gl.bindFramebuffer( 36160, null );\\n\\n\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\tconsole.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\t// Setup color buffer\\n\\n\\t\\tif ( isCube ) {\\n\\n\\t\\t\\tstate.bindTexture( 34067, textureProperties.__webglTexture );\\n\\t\\t\\tsetTextureParameters( 34067, renderTarget.texture, supportsMips );\\n\\n\\t\\t\\tfor ( var i = 0; i < 6; i ++ ) {\\n\\n\\t\\t\\t\\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, 36064, 34069 + i );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( textureNeedsGenerateMipmaps( renderTarget.texture, supportsMips ) ) {\\n\\n\\t\\t\\t\\tgenerateMipmap( 34067, renderTarget.texture, renderTarget.width, renderTarget.height );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tstate.bindTexture( 34067, null );\\n\\n\\t\\t} else {\\n\\n\\t\\t\\tstate.bindTexture( 3553, textureProperties.__webglTexture );\\n\\t\\t\\tsetTextureParameters( 3553, renderTarget.texture, supportsMips );\\n\\t\\t\\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, 36064, 3553 );\\n\\n\\t\\t\\tif ( textureNeedsGenerateMipmaps( renderTarget.texture, supportsMips ) ) {\\n\\n\\t\\t\\t\\tgenerateMipmap( 3553, renderTarget.texture, renderTarget.width, renderTarget.height );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tstate.bindTexture( 3553, null );\\n\\n\\t\\t}\\n\\n\\t\\t// Setup depth and stencil buffers\\n\\n\\t\\tif ( renderTarget.depthBuffer ) {\\n\\n\\t\\t\\tsetupDepthRenderbuffer( renderTarget );\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tfunction updateRenderTargetMipmap( renderTarget ) {\\n\\n\\t\\tvar texture = renderTarget.texture;\\n\\t\\tvar supportsMips = isPowerOfTwo( renderTarget ) || capabilities.isWebGL2;\\n\\n\\t\\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\\n\\n\\t\\t\\tvar target = renderTarget.isWebGLRenderTargetCube ? 34067 : 3553;\\n\\t\\t\\tvar webglTexture = properties.get( texture ).__webglTexture;\\n\\n\\t\\t\\tstate.bindTexture( target, webglTexture );\\n\\t\\t\\tgenerateMipmap( target, texture, renderTarget.width, renderTarget.height );\\n\\t\\t\\tstate.bindTexture( target, null );\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tfunction updateMultisampleRenderTarget( renderTarget ) {\\n\\n\\t\\tif ( renderTarget.isWebGLMultisampleRenderTarget ) {\\n\\n\\t\\t\\tif ( capabilities.isWebGL2 ) {\\n\\n\\t\\t\\t\\tvar renderTargetProperties = properties.get( renderTarget );\\n\\n\\t\\t\\t\\t_gl.bindFramebuffer( 36008, renderTargetProperties.__webglMultisampledFramebuffer );\\n\\t\\t\\t\\t_gl.bindFramebuffer( 36009, renderTargetProperties.__webglFramebuffer );\\n\\n\\t\\t\\t\\tvar width = renderTarget.width;\\n\\t\\t\\t\\tvar height = renderTarget.height;\\n\\t\\t\\t\\tvar mask = 16384;\\n\\n\\t\\t\\t\\tif ( renderTarget.depthBuffer ) mask |= 256;\\n\\t\\t\\t\\tif ( renderTarget.stencilBuffer ) mask |= 1024;\\n\\n\\t\\t\\t\\t_gl.blitFramebuffer( 0, 0, width, height, 0, 0, width, height, mask, 9728 );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tconsole.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tfunction getRenderTargetSamples( renderTarget ) {\\n\\n\\t\\treturn ( capabilities.isWebGL2 && renderTarget.isWebGLMultisampleRenderTarget ) ?\\n\\t\\t\\tMath.min( capabilities.maxSamples, renderTarget.samples ) : 0;\\n\\n\\t}\\n\\n\\tfunction updateVideoTexture( texture ) {\\n\\n\\t\\tvar id = texture.id;\\n\\t\\tvar frame = info.render.frame;\\n\\n\\t\\t// Check the last frame we updated the VideoTexture\\n\\n\\t\\tif ( _videoTextures[ id ] !== frame ) {\\n\\n\\t\\t\\t_videoTextures[ id ] = frame;\\n\\t\\t\\ttexture.update();\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tthis.setTexture2D = setTexture2D;\\n\\tthis.setTexture3D = setTexture3D;\\n\\tthis.setTextureCube = setTextureCube;\\n\\tthis.setTextureCubeDynamic = setTextureCubeDynamic;\\n\\tthis.setupRenderTarget = setupRenderTarget;\\n\\tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\\n\\tthis.updateMultisampleRenderTarget = updateMultisampleRenderTarget;\\n\\n}\\n\\n/**\\n * @author thespite / http://www.twitter.com/thespite\\n */\\n\\nfunction WebGLUtils( gl, extensions, capabilities ) {\\n\\n\\tfunction convert( p ) {\\n\\n\\t\\tvar extension;\\n\\n\\t\\tif ( p === RepeatWrapping ) return 10497;\\n\\t\\tif ( p === ClampToEdgeWrapping ) return 33071;\\n\\t\\tif ( p === MirroredRepeatWrapping ) return 33648;\\n\\n\\t\\tif ( p === NearestFilter ) return 9728;\\n\\t\\tif ( p === NearestMipMapNearestFilter ) return 9984;\\n\\t\\tif ( p === NearestMipMapLinearFilter ) return 9986;\\n\\n\\t\\tif ( p === LinearFilter ) return 9729;\\n\\t\\tif ( p === LinearMipMapNearestFilter ) return 9985;\\n\\t\\tif ( p === LinearMipMapLinearFilter ) return 9987;\\n\\n\\t\\tif ( p === UnsignedByteType ) return 5121;\\n\\t\\tif ( p === UnsignedShort4444Type ) return 32819;\\n\\t\\tif ( p === UnsignedShort5551Type ) return 32820;\\n\\t\\tif ( p === UnsignedShort565Type ) return 33635;\\n\\n\\t\\tif ( p === ByteType ) return 5120;\\n\\t\\tif ( p === ShortType ) return 5122;\\n\\t\\tif ( p === UnsignedShortType ) return 5123;\\n\\t\\tif ( p === IntType ) return 5124;\\n\\t\\tif ( p === UnsignedIntType ) return 5125;\\n\\t\\tif ( p === FloatType ) return 5126;\\n\\n\\t\\tif ( p === HalfFloatType ) {\\n\\n\\t\\t\\tif ( capabilities.isWebGL2 ) return 5131;\\n\\n\\t\\t\\textension = extensions.get( 'OES_texture_half_float' );\\n\\n\\t\\t\\tif ( extension !== null ) return extension.HALF_FLOAT_OES;\\n\\n\\t\\t}\\n\\n\\t\\tif ( p === AlphaFormat ) return 6406;\\n\\t\\tif ( p === RGBFormat ) return 6407;\\n\\t\\tif ( p === RGBAFormat ) return 6408;\\n\\t\\tif ( p === LuminanceFormat ) return 6409;\\n\\t\\tif ( p === LuminanceAlphaFormat ) return 6410;\\n\\t\\tif ( p === DepthFormat ) return 6402;\\n\\t\\tif ( p === DepthStencilFormat ) return 34041;\\n\\t\\tif ( p === RedFormat ) return 6403;\\n\\n\\t\\tif ( p === AddEquation ) return 32774;\\n\\t\\tif ( p === SubtractEquation ) return 32778;\\n\\t\\tif ( p === ReverseSubtractEquation ) return 32779;\\n\\n\\t\\tif ( p === ZeroFactor ) return 0;\\n\\t\\tif ( p === OneFactor ) return 1;\\n\\t\\tif ( p === SrcColorFactor ) return 768;\\n\\t\\tif ( p === OneMinusSrcColorFactor ) return 769;\\n\\t\\tif ( p === SrcAlphaFactor ) return 770;\\n\\t\\tif ( p === OneMinusSrcAlphaFactor ) return 771;\\n\\t\\tif ( p === DstAlphaFactor ) return 772;\\n\\t\\tif ( p === OneMinusDstAlphaFactor ) return 773;\\n\\n\\t\\tif ( p === DstColorFactor ) return 774;\\n\\t\\tif ( p === OneMinusDstColorFactor ) return 775;\\n\\t\\tif ( p === SrcAlphaSaturateFactor ) return 776;\\n\\n\\t\\tif ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format ||\\n\\t\\t\\tp === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {\\n\\n\\t\\t\\textension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\\n\\n\\t\\t\\tif ( extension !== null ) {\\n\\n\\t\\t\\t\\tif ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\\n\\t\\t\\t\\tif ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\\n\\t\\t\\t\\tif ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\\n\\t\\t\\t\\tif ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tif ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format ||\\n\\t\\t\\tp === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {\\n\\n\\t\\t\\textension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\\n\\n\\t\\t\\tif ( extension !== null ) {\\n\\n\\t\\t\\t\\tif ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\\n\\t\\t\\t\\tif ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\\n\\t\\t\\t\\tif ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\\n\\t\\t\\t\\tif ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tif ( p === RGB_ETC1_Format ) {\\n\\n\\t\\t\\textension = extensions.get( 'WEBGL_compressed_texture_etc1' );\\n\\n\\t\\t\\tif ( extension !== null ) return extension.COMPRESSED_RGB_ETC1_WEBGL;\\n\\n\\t\\t}\\n\\n\\t\\tif ( p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format ||\\n\\t\\t\\tp === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format ||\\n\\t\\t\\tp === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format ||\\n\\t\\t\\tp === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format ||\\n\\t\\t\\tp === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format ) {\\n\\n\\t\\t\\textension = extensions.get( 'WEBGL_compressed_texture_astc' );\\n\\n\\t\\t\\tif ( extension !== null ) {\\n\\n\\t\\t\\t\\treturn p;\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tif ( p === MinEquation || p === MaxEquation ) {\\n\\n\\t\\t\\tif ( capabilities.isWebGL2 ) {\\n\\n\\t\\t\\t\\tif ( p === MinEquation ) return 32775;\\n\\t\\t\\t\\tif ( p === MaxEquation ) return 32776;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\textension = extensions.get( 'EXT_blend_minmax' );\\n\\n\\t\\t\\tif ( extension !== null ) {\\n\\n\\t\\t\\t\\tif ( p === MinEquation ) return extension.MIN_EXT;\\n\\t\\t\\t\\tif ( p === MaxEquation ) return extension.MAX_EXT;\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tif ( p === UnsignedInt248Type ) {\\n\\n\\t\\t\\tif ( capabilities.isWebGL2 ) return 34042;\\n\\n\\t\\t\\textension = extensions.get( 'WEBGL_depth_texture' );\\n\\n\\t\\t\\tif ( extension !== null ) return extension.UNSIGNED_INT_24_8_WEBGL;\\n\\n\\t\\t}\\n\\n\\t\\treturn 0;\\n\\n\\t}\\n\\n\\treturn { convert: convert };\\n\\n}\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\nfunction Group() {\\n\\n\\tObject3D.call( this );\\n\\n\\tthis.type = 'Group';\\n\\n}\\n\\nGroup.prototype = Object.assign( Object.create( Object3D.prototype ), {\\n\\n\\tconstructor: Group,\\n\\n\\tisGroup: true\\n\\n} );\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n * @author mikael emtinger / http://gomo.se/\\n * @author WestLangley / http://github.com/WestLangley\\n*/\\n\\nfunction Camera() {\\n\\n\\tObject3D.call( this );\\n\\n\\tthis.type = 'Camera';\\n\\n\\tthis.matrixWorldInverse = new Matrix4();\\n\\n\\tthis.projectionMatrix = new Matrix4();\\n\\tthis.projectionMatrixInverse = new Matrix4();\\n\\n}\\n\\nCamera.prototype = Object.assign( Object.create( Object3D.prototype ), {\\n\\n\\tconstructor: Camera,\\n\\n\\tisCamera: true,\\n\\n\\tcopy: function ( source, recursive ) {\\n\\n\\t\\tObject3D.prototype.copy.call( this, source, recursive );\\n\\n\\t\\tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\\n\\n\\t\\tthis.projectionMatrix.copy( source.projectionMatrix );\\n\\t\\tthis.projectionMatrixInverse.copy( source.projectionMatrixInverse );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tgetWorldDirection: function ( target ) {\\n\\n\\t\\tif ( target === undefined ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Camera: .getWorldDirection() target is now required' );\\n\\t\\t\\ttarget = new Vector3();\\n\\n\\t\\t}\\n\\n\\t\\tthis.updateMatrixWorld( true );\\n\\n\\t\\tvar e = this.matrixWorld.elements;\\n\\n\\t\\treturn target.set( - e[ 8 ], - e[ 9 ], - e[ 10 ] ).normalize();\\n\\n\\t},\\n\\n\\tupdateMatrixWorld: function ( force ) {\\n\\n\\t\\tObject3D.prototype.updateMatrixWorld.call( this, force );\\n\\n\\t\\tthis.matrixWorldInverse.getInverse( this.matrixWorld );\\n\\n\\t},\\n\\n\\tclone: function () {\\n\\n\\t\\treturn new this.constructor().copy( this );\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n * @author greggman / http://games.greggman.com/\\n * @author zz85 / http://www.lab4games.net/zz85/blog\\n * @author tschw\\n */\\n\\nfunction PerspectiveCamera( fov, aspect, near, far ) {\\n\\n\\tCamera.call( this );\\n\\n\\tthis.type = 'PerspectiveCamera';\\n\\n\\tthis.fov = fov !== undefined ? fov : 50;\\n\\tthis.zoom = 1;\\n\\n\\tthis.near = near !== undefined ? near : 0.1;\\n\\tthis.far = far !== undefined ? far : 2000;\\n\\tthis.focus = 10;\\n\\n\\tthis.aspect = aspect !== undefined ? aspect : 1;\\n\\tthis.view = null;\\n\\n\\tthis.filmGauge = 35;\\t// width of the film (default in millimeters)\\n\\tthis.filmOffset = 0;\\t// horizontal film offset (same unit as gauge)\\n\\n\\tthis.updateProjectionMatrix();\\n\\n}\\n\\nPerspectiveCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\\n\\n\\tconstructor: PerspectiveCamera,\\n\\n\\tisPerspectiveCamera: true,\\n\\n\\tcopy: function ( source, recursive ) {\\n\\n\\t\\tCamera.prototype.copy.call( this, source, recursive );\\n\\n\\t\\tthis.fov = source.fov;\\n\\t\\tthis.zoom = source.zoom;\\n\\n\\t\\tthis.near = source.near;\\n\\t\\tthis.far = source.far;\\n\\t\\tthis.focus = source.focus;\\n\\n\\t\\tthis.aspect = source.aspect;\\n\\t\\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\\n\\n\\t\\tthis.filmGauge = source.filmGauge;\\n\\t\\tthis.filmOffset = source.filmOffset;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\t/**\\n\\t * Sets the FOV by focal length in respect to the current .filmGauge.\\n\\t *\\n\\t * The default film gauge is 35, so that the focal length can be specified for\\n\\t * a 35mm (full frame) camera.\\n\\t *\\n\\t * Values for focal length and film gauge must have the same unit.\\n\\t */\\n\\tsetFocalLength: function ( focalLength ) {\\n\\n\\t\\t// see http://www.bobatkins.com/photography/technical/field_of_view.html\\n\\t\\tvar vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\\n\\n\\t\\tthis.fov = _Math.RAD2DEG * 2 * Math.atan( vExtentSlope );\\n\\t\\tthis.updateProjectionMatrix();\\n\\n\\t},\\n\\n\\t/**\\n\\t * Calculates the focal length from the current .fov and .filmGauge.\\n\\t */\\n\\tgetFocalLength: function () {\\n\\n\\t\\tvar vExtentSlope = Math.tan( _Math.DEG2RAD * 0.5 * this.fov );\\n\\n\\t\\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\\n\\n\\t},\\n\\n\\tgetEffectiveFOV: function () {\\n\\n\\t\\treturn _Math.RAD2DEG * 2 * Math.atan(\\n\\t\\t\\tMath.tan( _Math.DEG2RAD * 0.5 * this.fov ) / this.zoom );\\n\\n\\t},\\n\\n\\tgetFilmWidth: function () {\\n\\n\\t\\t// film not completely covered in portrait format (aspect < 1)\\n\\t\\treturn this.filmGauge * Math.min( this.aspect, 1 );\\n\\n\\t},\\n\\n\\tgetFilmHeight: function () {\\n\\n\\t\\t// film not completely covered in landscape format (aspect > 1)\\n\\t\\treturn this.filmGauge / Math.max( this.aspect, 1 );\\n\\n\\t},\\n\\n\\t/**\\n\\t * Sets an offset in a larger frustum. This is useful for multi-window or\\n\\t * multi-monitor/multi-machine setups.\\n\\t *\\n\\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\\n\\t * the monitors are in grid like this\\n\\t *\\n\\t *   +---+---+---+\\n\\t *   | A | B | C |\\n\\t *   +---+---+---+\\n\\t *   | D | E | F |\\n\\t *   +---+---+---+\\n\\t *\\n\\t * then for each monitor you would call it like this\\n\\t *\\n\\t *   var w = 1920;\\n\\t *   var h = 1080;\\n\\t *   var fullWidth = w * 3;\\n\\t *   var fullHeight = h * 2;\\n\\t *\\n\\t *   --A--\\n\\t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\\n\\t *   --B--\\n\\t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\\n\\t *   --C--\\n\\t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\\n\\t *   --D--\\n\\t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\\n\\t *   --E--\\n\\t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\\n\\t *   --F--\\n\\t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\\n\\t *\\n\\t *   Note there is no reason monitors have to be the same size or in a grid.\\n\\t */\\n\\tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\\n\\n\\t\\tthis.aspect = fullWidth / fullHeight;\\n\\n\\t\\tif ( this.view === null ) {\\n\\n\\t\\t\\tthis.view = {\\n\\t\\t\\t\\tenabled: true,\\n\\t\\t\\t\\tfullWidth: 1,\\n\\t\\t\\t\\tfullHeight: 1,\\n\\t\\t\\t\\toffsetX: 0,\\n\\t\\t\\t\\toffsetY: 0,\\n\\t\\t\\t\\twidth: 1,\\n\\t\\t\\t\\theight: 1\\n\\t\\t\\t};\\n\\n\\t\\t}\\n\\n\\t\\tthis.view.enabled = true;\\n\\t\\tthis.view.fullWidth = fullWidth;\\n\\t\\tthis.view.fullHeight = fullHeight;\\n\\t\\tthis.view.offsetX = x;\\n\\t\\tthis.view.offsetY = y;\\n\\t\\tthis.view.width = width;\\n\\t\\tthis.view.height = height;\\n\\n\\t\\tthis.updateProjectionMatrix();\\n\\n\\t},\\n\\n\\tclearViewOffset: function () {\\n\\n\\t\\tif ( this.view !== null ) {\\n\\n\\t\\t\\tthis.view.enabled = false;\\n\\n\\t\\t}\\n\\n\\t\\tthis.updateProjectionMatrix();\\n\\n\\t},\\n\\n\\tupdateProjectionMatrix: function () {\\n\\n\\t\\tvar near = this.near,\\n\\t\\t\\ttop = near * Math.tan( _Math.DEG2RAD * 0.5 * this.fov ) / this.zoom,\\n\\t\\t\\theight = 2 * top,\\n\\t\\t\\twidth = this.aspect * height,\\n\\t\\t\\tleft = - 0.5 * width,\\n\\t\\t\\tview = this.view;\\n\\n\\t\\tif ( this.view !== null && this.view.enabled ) {\\n\\n\\t\\t\\tvar fullWidth = view.fullWidth,\\n\\t\\t\\t\\tfullHeight = view.fullHeight;\\n\\n\\t\\t\\tleft += view.offsetX * width / fullWidth;\\n\\t\\t\\ttop -= view.offsetY * height / fullHeight;\\n\\t\\t\\twidth *= view.width / fullWidth;\\n\\t\\t\\theight *= view.height / fullHeight;\\n\\n\\t\\t}\\n\\n\\t\\tvar skew = this.filmOffset;\\n\\t\\tif ( skew !== 0 ) left += near * skew / this.getFilmWidth();\\n\\n\\t\\tthis.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far );\\n\\n\\t\\tthis.projectionMatrixInverse.getInverse( this.projectionMatrix );\\n\\n\\t},\\n\\n\\ttoJSON: function ( meta ) {\\n\\n\\t\\tvar data = Object3D.prototype.toJSON.call( this, meta );\\n\\n\\t\\tdata.object.fov = this.fov;\\n\\t\\tdata.object.zoom = this.zoom;\\n\\n\\t\\tdata.object.near = this.near;\\n\\t\\tdata.object.far = this.far;\\n\\t\\tdata.object.focus = this.focus;\\n\\n\\t\\tdata.object.aspect = this.aspect;\\n\\n\\t\\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\\n\\n\\t\\tdata.object.filmGauge = this.filmGauge;\\n\\t\\tdata.object.filmOffset = this.filmOffset;\\n\\n\\t\\treturn data;\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\nfunction ArrayCamera( array ) {\\n\\n\\tPerspectiveCamera.call( this );\\n\\n\\tthis.cameras = array || [];\\n\\n}\\n\\nArrayCamera.prototype = Object.assign( Object.create( PerspectiveCamera.prototype ), {\\n\\n\\tconstructor: ArrayCamera,\\n\\n\\tisArrayCamera: true\\n\\n} );\\n\\n/**\\n * @author jsantell / https://www.jsantell.com/\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\nvar cameraLPos = new Vector3();\\nvar cameraRPos = new Vector3();\\n\\n/**\\n * Assumes 2 cameras that are parallel and share an X-axis, and that\\n * the cameras' projection and world matrices have already been set.\\n * And that near and far planes are identical for both cameras.\\n * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765\\n */\\nfunction setProjectionFromUnion( camera, cameraL, cameraR ) {\\n\\n\\tcameraLPos.setFromMatrixPosition( cameraL.matrixWorld );\\n\\tcameraRPos.setFromMatrixPosition( cameraR.matrixWorld );\\n\\n\\tvar ipd = cameraLPos.distanceTo( cameraRPos );\\n\\n\\tvar projL = cameraL.projectionMatrix.elements;\\n\\tvar projR = cameraR.projectionMatrix.elements;\\n\\n\\t// VR systems will have identical far and near planes, and\\n\\t// most likely identical top and bottom frustum extents.\\n\\t// Use the left camera for these values.\\n\\tvar near = projL[ 14 ] / ( projL[ 10 ] - 1 );\\n\\tvar far = projL[ 14 ] / ( projL[ 10 ] + 1 );\\n\\tvar topFov = ( projL[ 9 ] + 1 ) / projL[ 5 ];\\n\\tvar bottomFov = ( projL[ 9 ] - 1 ) / projL[ 5 ];\\n\\n\\tvar leftFov = ( projL[ 8 ] - 1 ) / projL[ 0 ];\\n\\tvar rightFov = ( projR[ 8 ] + 1 ) / projR[ 0 ];\\n\\tvar left = near * leftFov;\\n\\tvar right = near * rightFov;\\n\\n\\t// Calculate the new camera's position offset from the\\n\\t// left camera. xOffset should be roughly half `ipd`.\\n\\tvar zOffset = ipd / ( - leftFov + rightFov );\\n\\tvar xOffset = zOffset * - leftFov;\\n\\n\\t// TODO: Better way to apply this offset?\\n\\tcameraL.matrixWorld.decompose( camera.position, camera.quaternion, camera.scale );\\n\\tcamera.translateX( xOffset );\\n\\tcamera.translateZ( zOffset );\\n\\tcamera.matrixWorld.compose( camera.position, camera.quaternion, camera.scale );\\n\\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\\n\\n\\t// Find the union of the frustum values of the cameras and scale\\n\\t// the values so that the near plane's position does not change in world space,\\n\\t// although must now be relative to the new union camera.\\n\\tvar near2 = near + zOffset;\\n\\tvar far2 = far + zOffset;\\n\\tvar left2 = left - xOffset;\\n\\tvar right2 = right + ( ipd - xOffset );\\n\\tvar top2 = topFov * far / far2 * near2;\\n\\tvar bottom2 = bottomFov * far / far2 * near2;\\n\\n\\tcamera.projectionMatrix.makePerspective( left2, right2, top2, bottom2, near2, far2 );\\n\\n}\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\nfunction WebVRManager( renderer ) {\\n\\n\\tvar scope = this;\\n\\n\\tvar device = null;\\n\\tvar frameData = null;\\n\\n\\tvar poseTarget = null;\\n\\n\\tvar controllers = [];\\n\\tvar standingMatrix = new Matrix4();\\n\\tvar standingMatrixInverse = new Matrix4();\\n\\n\\tvar framebufferScaleFactor = 1.0;\\n\\n\\tvar frameOfReferenceType = 'stage';\\n\\n\\tif ( typeof window !== 'undefined' && 'VRFrameData' in window ) {\\n\\n\\t\\tframeData = new window.VRFrameData();\\n\\t\\twindow.addEventListener( 'vrdisplaypresentchange', onVRDisplayPresentChange, false );\\n\\n\\t}\\n\\n\\tvar matrixWorldInverse = new Matrix4();\\n\\tvar tempQuaternion = new Quaternion();\\n\\tvar tempPosition = new Vector3();\\n\\n\\tvar cameraL = new PerspectiveCamera();\\n\\tcameraL.bounds = new Vector4( 0.0, 0.0, 0.5, 1.0 );\\n\\tcameraL.layers.enable( 1 );\\n\\n\\tvar cameraR = new PerspectiveCamera();\\n\\tcameraR.bounds = new Vector4( 0.5, 0.0, 0.5, 1.0 );\\n\\tcameraR.layers.enable( 2 );\\n\\n\\tvar cameraVR = new ArrayCamera( [ cameraL, cameraR ] );\\n\\tcameraVR.layers.enable( 1 );\\n\\tcameraVR.layers.enable( 2 );\\n\\n\\t//\\n\\n\\tfunction isPresenting() {\\n\\n\\t\\treturn device !== null && device.isPresenting === true;\\n\\n\\t}\\n\\n\\tvar currentSize, currentPixelRatio;\\n\\n\\tfunction onVRDisplayPresentChange() {\\n\\n\\t\\tif ( isPresenting() ) {\\n\\n\\t\\t\\tvar eyeParameters = device.getEyeParameters( 'left' );\\n\\t\\t\\tvar renderWidth = eyeParameters.renderWidth * framebufferScaleFactor;\\n\\t\\t\\tvar renderHeight = eyeParameters.renderHeight * framebufferScaleFactor;\\n\\n\\t\\t\\tcurrentPixelRatio = renderer.getPixelRatio();\\n\\t\\t\\tcurrentSize = renderer.getSize();\\n\\n\\t\\t\\trenderer.setDrawingBufferSize( renderWidth * 2, renderHeight, 1 );\\n\\n\\t\\t\\tanimation.start();\\n\\n\\t\\t} else {\\n\\n\\t\\t\\tif ( scope.enabled ) {\\n\\n\\t\\t\\t\\trenderer.setDrawingBufferSize( currentSize.width, currentSize.height, currentPixelRatio );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tanimation.stop();\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\t//\\n\\n\\tvar triggers = [];\\n\\n\\tfunction findGamepad( id ) {\\n\\n\\t\\tvar gamepads = navigator.getGamepads && navigator.getGamepads();\\n\\n\\t\\tfor ( var i = 0, j = 0, l = gamepads.length; i < l; i ++ ) {\\n\\n\\t\\t\\tvar gamepad = gamepads[ i ];\\n\\n\\t\\t\\tif ( gamepad && ( gamepad.id === 'Daydream Controller' ||\\n\\t\\t\\t\\tgamepad.id === 'Gear VR Controller' || gamepad.id === 'Oculus Go Controller' ||\\n\\t\\t\\t\\tgamepad.id === 'OpenVR Gamepad' || gamepad.id.startsWith( 'Oculus Touch' ) ||\\n\\t\\t\\t\\tgamepad.id.startsWith( 'Spatial Controller' ) ) ) {\\n\\n\\t\\t\\t\\tif ( j === id ) return gamepad;\\n\\n\\t\\t\\t\\tj ++;\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tfunction updateControllers() {\\n\\n\\t\\tfor ( var i = 0; i < controllers.length; i ++ ) {\\n\\n\\t\\t\\tvar controller = controllers[ i ];\\n\\n\\t\\t\\tvar gamepad = findGamepad( i );\\n\\n\\t\\t\\tif ( gamepad !== undefined && gamepad.pose !== undefined ) {\\n\\n\\t\\t\\t\\tif ( gamepad.pose === null ) return;\\n\\n\\t\\t\\t\\t//  Pose\\n\\n\\t\\t\\t\\tvar pose = gamepad.pose;\\n\\n\\t\\t\\t\\tif ( pose.hasPosition === false ) controller.position.set( 0.2, - 0.6, - 0.05 );\\n\\n\\t\\t\\t\\tif ( pose.position !== null ) controller.position.fromArray( pose.position );\\n\\t\\t\\t\\tif ( pose.orientation !== null ) controller.quaternion.fromArray( pose.orientation );\\n\\t\\t\\t\\tcontroller.matrix.compose( controller.position, controller.quaternion, controller.scale );\\n\\t\\t\\t\\tcontroller.matrix.premultiply( standingMatrix );\\n\\t\\t\\t\\tcontroller.matrix.decompose( controller.position, controller.quaternion, controller.scale );\\n\\t\\t\\t\\tcontroller.matrixWorldNeedsUpdate = true;\\n\\t\\t\\t\\tcontroller.visible = true;\\n\\n\\t\\t\\t\\t//  Trigger\\n\\n\\t\\t\\t\\tvar buttonId = gamepad.id === 'Daydream Controller' ? 0 : 1;\\n\\n\\t\\t\\t\\tif ( triggers[ i ] !== gamepad.buttons[ buttonId ].pressed ) {\\n\\n\\t\\t\\t\\t\\ttriggers[ i ] = gamepad.buttons[ buttonId ].pressed;\\n\\n\\t\\t\\t\\t\\tif ( triggers[ i ] === true ) {\\n\\n\\t\\t\\t\\t\\t\\tcontroller.dispatchEvent( { type: 'selectstart' } );\\n\\n\\t\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\t\\tcontroller.dispatchEvent( { type: 'selectend' } );\\n\\t\\t\\t\\t\\t\\tcontroller.dispatchEvent( { type: 'select' } );\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tcontroller.visible = false;\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\t//\\n\\n\\tthis.enabled = false;\\n\\n\\tthis.getController = function ( id ) {\\n\\n\\t\\tvar controller = controllers[ id ];\\n\\n\\t\\tif ( controller === undefined ) {\\n\\n\\t\\t\\tcontroller = new Group();\\n\\t\\t\\tcontroller.matrixAutoUpdate = false;\\n\\t\\t\\tcontroller.visible = false;\\n\\n\\t\\t\\tcontrollers[ id ] = controller;\\n\\n\\t\\t}\\n\\n\\t\\treturn controller;\\n\\n\\t};\\n\\n\\tthis.getDevice = function () {\\n\\n\\t\\treturn device;\\n\\n\\t};\\n\\n\\tthis.setDevice = function ( value ) {\\n\\n\\t\\tif ( value !== undefined ) device = value;\\n\\n\\t\\tanimation.setContext( value );\\n\\n\\t};\\n\\n\\tthis.setFramebufferScaleFactor = function ( value ) {\\n\\n\\t\\tframebufferScaleFactor = value;\\n\\n\\t};\\n\\n\\tthis.setFrameOfReferenceType = function ( value ) {\\n\\n\\t\\tframeOfReferenceType = value;\\n\\n\\t};\\n\\n\\tthis.setPoseTarget = function ( object ) {\\n\\n\\t\\tif ( object !== undefined ) poseTarget = object;\\n\\n\\t};\\n\\n\\tthis.getCamera = function ( camera ) {\\n\\n\\t\\tvar userHeight = frameOfReferenceType === 'stage' ? 1.6 : 0;\\n\\n\\t\\tif ( device === null ) {\\n\\n\\t\\t\\tcamera.position.set( 0, userHeight, 0 );\\n\\t\\t\\treturn camera;\\n\\n\\t\\t}\\n\\n\\t\\tdevice.depthNear = camera.near;\\n\\t\\tdevice.depthFar = camera.far;\\n\\n\\t\\tdevice.getFrameData( frameData );\\n\\n\\t\\t//\\n\\n\\t\\tif ( frameOfReferenceType === 'stage' ) {\\n\\n\\t\\t\\tvar stageParameters = device.stageParameters;\\n\\n\\t\\t\\tif ( stageParameters ) {\\n\\n\\t\\t\\t\\tstandingMatrix.fromArray( stageParameters.sittingToStandingTransform );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tstandingMatrix.makeTranslation( 0, userHeight, 0 );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\n\\t\\tvar pose = frameData.pose;\\n\\t\\tvar poseObject = poseTarget !== null ? poseTarget : camera;\\n\\n\\t\\t// We want to manipulate poseObject by its position and quaternion components since users may rely on them.\\n\\t\\tposeObject.matrix.copy( standingMatrix );\\n\\t\\tposeObject.matrix.decompose( poseObject.position, poseObject.quaternion, poseObject.scale );\\n\\n\\t\\tif ( pose.orientation !== null ) {\\n\\n\\t\\t\\ttempQuaternion.fromArray( pose.orientation );\\n\\t\\t\\tposeObject.quaternion.multiply( tempQuaternion );\\n\\n\\t\\t}\\n\\n\\t\\tif ( pose.position !== null ) {\\n\\n\\t\\t\\ttempQuaternion.setFromRotationMatrix( standingMatrix );\\n\\t\\t\\ttempPosition.fromArray( pose.position );\\n\\t\\t\\ttempPosition.applyQuaternion( tempQuaternion );\\n\\t\\t\\tposeObject.position.add( tempPosition );\\n\\n\\t\\t}\\n\\n\\t\\tposeObject.updateMatrixWorld();\\n\\n\\t\\tif ( device.isPresenting === false ) return camera;\\n\\n\\t\\t//\\n\\n\\t\\tcameraL.near = camera.near;\\n\\t\\tcameraR.near = camera.near;\\n\\n\\t\\tcameraL.far = camera.far;\\n\\t\\tcameraR.far = camera.far;\\n\\n\\t\\tcameraL.matrixWorldInverse.fromArray( frameData.leftViewMatrix );\\n\\t\\tcameraR.matrixWorldInverse.fromArray( frameData.rightViewMatrix );\\n\\n\\t\\t// TODO (mrdoob) Double check this code\\n\\n\\t\\tstandingMatrixInverse.getInverse( standingMatrix );\\n\\n\\t\\tif ( frameOfReferenceType === 'stage' ) {\\n\\n\\t\\t\\tcameraL.matrixWorldInverse.multiply( standingMatrixInverse );\\n\\t\\t\\tcameraR.matrixWorldInverse.multiply( standingMatrixInverse );\\n\\n\\t\\t}\\n\\n\\t\\tvar parent = poseObject.parent;\\n\\n\\t\\tif ( parent !== null ) {\\n\\n\\t\\t\\tmatrixWorldInverse.getInverse( parent.matrixWorld );\\n\\n\\t\\t\\tcameraL.matrixWorldInverse.multiply( matrixWorldInverse );\\n\\t\\t\\tcameraR.matrixWorldInverse.multiply( matrixWorldInverse );\\n\\n\\t\\t}\\n\\n\\t\\t// envMap and Mirror needs camera.matrixWorld\\n\\n\\t\\tcameraL.matrixWorld.getInverse( cameraL.matrixWorldInverse );\\n\\t\\tcameraR.matrixWorld.getInverse( cameraR.matrixWorldInverse );\\n\\n\\t\\tcameraL.projectionMatrix.fromArray( frameData.leftProjectionMatrix );\\n\\t\\tcameraR.projectionMatrix.fromArray( frameData.rightProjectionMatrix );\\n\\n\\t\\tsetProjectionFromUnion( cameraVR, cameraL, cameraR );\\n\\n\\t\\t//\\n\\n\\t\\tvar layers = device.getLayers();\\n\\n\\t\\tif ( layers.length ) {\\n\\n\\t\\t\\tvar layer = layers[ 0 ];\\n\\n\\t\\t\\tif ( layer.leftBounds !== null && layer.leftBounds.length === 4 ) {\\n\\n\\t\\t\\t\\tcameraL.bounds.fromArray( layer.leftBounds );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( layer.rightBounds !== null && layer.rightBounds.length === 4 ) {\\n\\n\\t\\t\\t\\tcameraR.bounds.fromArray( layer.rightBounds );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tupdateControllers();\\n\\n\\t\\treturn cameraVR;\\n\\n\\t};\\n\\n\\tthis.getStandingMatrix = function () {\\n\\n\\t\\treturn standingMatrix;\\n\\n\\t};\\n\\n\\tthis.isPresenting = isPresenting;\\n\\n\\t// Animation Loop\\n\\n\\tvar animation = new WebGLAnimation();\\n\\n\\tthis.setAnimationLoop = function ( callback ) {\\n\\n\\t\\tanimation.setAnimationLoop( callback );\\n\\n\\t};\\n\\n\\tthis.submitFrame = function () {\\n\\n\\t\\tif ( isPresenting() ) device.submitFrame();\\n\\n\\t};\\n\\n\\tthis.dispose = function () {\\n\\n\\t\\tif ( typeof window !== 'undefined' ) {\\n\\n\\t\\t\\twindow.removeEventListener( 'vrdisplaypresentchange', onVRDisplayPresentChange );\\n\\n\\t\\t}\\n\\n\\t};\\n\\n}\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\nfunction WebXRManager( renderer ) {\\n\\n\\tvar gl = renderer.context;\\n\\n\\tvar device = null;\\n\\tvar session = null;\\n\\n\\tvar framebufferScaleFactor = 1.0;\\n\\n\\tvar frameOfReference = null;\\n\\tvar frameOfReferenceType = 'stage';\\n\\n\\tvar pose = null;\\n\\n\\tvar controllers = [];\\n\\tvar inputSources = [];\\n\\n\\tfunction isPresenting() {\\n\\n\\t\\treturn session !== null && frameOfReference !== null;\\n\\n\\t}\\n\\n\\t//\\n\\n\\tvar cameraL = new PerspectiveCamera();\\n\\tcameraL.layers.enable( 1 );\\n\\tcameraL.viewport = new Vector4();\\n\\n\\tvar cameraR = new PerspectiveCamera();\\n\\tcameraR.layers.enable( 2 );\\n\\tcameraR.viewport = new Vector4();\\n\\n\\tvar cameraVR = new ArrayCamera( [ cameraL, cameraR ] );\\n\\tcameraVR.layers.enable( 1 );\\n\\tcameraVR.layers.enable( 2 );\\n\\n\\t//\\n\\n\\tthis.enabled = false;\\n\\n\\tthis.getController = function ( id ) {\\n\\n\\t\\tvar controller = controllers[ id ];\\n\\n\\t\\tif ( controller === undefined ) {\\n\\n\\t\\t\\tcontroller = new Group();\\n\\t\\t\\tcontroller.matrixAutoUpdate = false;\\n\\t\\t\\tcontroller.visible = false;\\n\\n\\t\\t\\tcontrollers[ id ] = controller;\\n\\n\\t\\t}\\n\\n\\t\\treturn controller;\\n\\n\\t};\\n\\n\\tthis.getDevice = function () {\\n\\n\\t\\treturn device;\\n\\n\\t};\\n\\n\\tthis.setDevice = function ( value ) {\\n\\n\\t\\tif ( value !== undefined ) device = value;\\n\\t\\tif ( value instanceof XRDevice ) gl.setCompatibleXRDevice( value );\\n\\n\\t};\\n\\n\\t//\\n\\n\\tfunction onSessionEvent( event ) {\\n\\n\\t\\tvar controller = controllers[ inputSources.indexOf( event.inputSource ) ];\\n\\t\\tif ( controller ) controller.dispatchEvent( { type: event.type } );\\n\\n\\t}\\n\\n\\tfunction onSessionEnd() {\\n\\n\\t\\trenderer.setFramebuffer( null );\\n\\t\\tanimation.stop();\\n\\n\\t}\\n\\n\\tthis.setFramebufferScaleFactor = function ( value ) {\\n\\n\\t\\tframebufferScaleFactor = value;\\n\\n\\t};\\n\\n\\tthis.setFrameOfReferenceType = function ( value ) {\\n\\n\\t\\tframeOfReferenceType = value;\\n\\n\\t};\\n\\n\\tthis.setSession = function ( value ) {\\n\\n\\t\\tsession = value;\\n\\n\\t\\tif ( session !== null ) {\\n\\n\\t\\t\\tsession.addEventListener( 'select', onSessionEvent );\\n\\t\\t\\tsession.addEventListener( 'selectstart', onSessionEvent );\\n\\t\\t\\tsession.addEventListener( 'selectend', onSessionEvent );\\n\\t\\t\\tsession.addEventListener( 'end', onSessionEnd );\\n\\n\\t\\t\\tsession.baseLayer = new XRWebGLLayer( session, gl, { framebufferScaleFactor: framebufferScaleFactor } );\\n\\t\\t\\tsession.requestFrameOfReference( frameOfReferenceType ).then( function ( value ) {\\n\\n\\t\\t\\t\\tframeOfReference = value;\\n\\n\\t\\t\\t\\trenderer.setFramebuffer( session.baseLayer.framebuffer );\\n\\n\\t\\t\\t\\tanimation.setContext( session );\\n\\t\\t\\t\\tanimation.start();\\n\\n\\t\\t\\t} );\\n\\n\\t\\t\\t//\\n\\n\\t\\t\\tinputSources = session.getInputSources();\\n\\n\\t\\t\\tsession.addEventListener( 'inputsourceschange', function () {\\n\\n\\t\\t\\t\\tinputSources = session.getInputSources();\\n\\t\\t\\t\\tconsole.log( inputSources );\\n\\n\\t\\t\\t\\tfor ( var i = 0; i < controllers.length; i ++ ) {\\n\\n\\t\\t\\t\\t\\tvar controller = controllers[ i ];\\n\\t\\t\\t\\t\\tcontroller.userData.inputSource = inputSources[ i ];\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t} );\\n\\n\\t\\t}\\n\\n\\t};\\n\\n\\tfunction updateCamera( camera, parent ) {\\n\\n\\t\\tif ( parent === null ) {\\n\\n\\t\\t\\tcamera.matrixWorld.copy( camera.matrix );\\n\\n\\t\\t} else {\\n\\n\\t\\t\\tcamera.matrixWorld.multiplyMatrices( parent.matrixWorld, camera.matrix );\\n\\n\\t\\t}\\n\\n\\t\\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\\n\\n\\t}\\n\\n\\tthis.getCamera = function ( camera ) {\\n\\n\\t\\tif ( isPresenting() ) {\\n\\n\\t\\t\\tvar parent = camera.parent;\\n\\t\\t\\tvar cameras = cameraVR.cameras;\\n\\n\\t\\t\\tupdateCamera( cameraVR, parent );\\n\\n\\t\\t\\tfor ( var i = 0; i < cameras.length; i ++ ) {\\n\\n\\t\\t\\t\\tupdateCamera( cameras[ i ], parent );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\t// update camera and its children\\n\\n\\t\\t\\tcamera.matrixWorld.copy( cameraVR.matrixWorld );\\n\\n\\t\\t\\tvar children = camera.children;\\n\\n\\t\\t\\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\\n\\n\\t\\t\\t\\tchildren[ i ].updateMatrixWorld( true );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tsetProjectionFromUnion( cameraVR, cameraL, cameraR );\\n\\n\\t\\t\\treturn cameraVR;\\n\\n\\t\\t}\\n\\n\\t\\treturn camera;\\n\\n\\t};\\n\\n\\tthis.isPresenting = isPresenting;\\n\\n\\t// Animation Loop\\n\\n\\tvar onAnimationFrameCallback = null;\\n\\n\\tfunction onAnimationFrame( time, frame ) {\\n\\n\\t\\tpose = frame.getDevicePose( frameOfReference );\\n\\n\\t\\tif ( pose !== null ) {\\n\\n\\t\\t\\tvar layer = session.baseLayer;\\n\\t\\t\\tvar views = frame.views;\\n\\n\\t\\t\\tfor ( var i = 0; i < views.length; i ++ ) {\\n\\n\\t\\t\\t\\tvar view = views[ i ];\\n\\t\\t\\t\\tvar viewport = layer.getViewport( view );\\n\\t\\t\\t\\tvar viewMatrix = pose.getViewMatrix( view );\\n\\n\\t\\t\\t\\tvar camera = cameraVR.cameras[ i ];\\n\\t\\t\\t\\tcamera.matrix.fromArray( viewMatrix ).getInverse( camera.matrix );\\n\\t\\t\\t\\tcamera.projectionMatrix.fromArray( view.projectionMatrix );\\n\\t\\t\\t\\tcamera.viewport.set( viewport.x, viewport.y, viewport.width, viewport.height );\\n\\n\\t\\t\\t\\tif ( i === 0 ) {\\n\\n\\t\\t\\t\\t\\tcameraVR.matrix.copy( camera.matrix );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\t//\\n\\n\\t\\tfor ( var i = 0; i < controllers.length; i ++ ) {\\n\\n\\t\\t\\tvar controller = controllers[ i ];\\n\\n\\t\\t\\tvar inputSource = inputSources[ i ];\\n\\n\\t\\t\\tif ( inputSource ) {\\n\\n\\t\\t\\t\\tvar inputPose = frame.getInputPose( inputSource, frameOfReference );\\n\\n\\t\\t\\t\\tif ( inputPose !== null ) {\\n\\n\\t\\t\\t\\t\\tif ( 'targetRay' in inputPose ) {\\n\\n\\t\\t\\t\\t\\t\\tcontroller.matrix.elements = inputPose.targetRay.transformMatrix;\\n\\n\\t\\t\\t\\t\\t} else if ( 'pointerMatrix' in inputPose ) {\\n\\n\\t\\t\\t\\t\\t\\t// DEPRECATED\\n\\n\\t\\t\\t\\t\\t\\tcontroller.matrix.elements = inputPose.pointerMatrix;\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tcontroller.matrix.decompose( controller.position, controller.rotation, controller.scale );\\n\\t\\t\\t\\t\\tcontroller.visible = true;\\n\\n\\t\\t\\t\\t\\tcontinue;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tcontroller.visible = false;\\n\\n\\t\\t}\\n\\n\\t\\tif ( onAnimationFrameCallback ) onAnimationFrameCallback( time );\\n\\n\\t}\\n\\n\\tvar animation = new WebGLAnimation();\\n\\tanimation.setAnimationLoop( onAnimationFrame );\\n\\n\\tthis.setAnimationLoop = function ( callback ) {\\n\\n\\t\\tonAnimationFrameCallback = callback;\\n\\n\\t};\\n\\n\\tthis.dispose = function () {};\\n\\n\\t// DEPRECATED\\n\\n\\tthis.getStandingMatrix = function () {\\n\\n\\t\\tconsole.warn( 'THREE.WebXRManager: getStandingMatrix() is no longer needed.' );\\n\\t\\treturn new THREE.Matrix4();\\n\\n\\t};\\n\\n\\tthis.submitFrame = function () {};\\n\\n}\\n\\n/**\\n * @author supereggbert / http://www.paulbrunt.co.uk/\\n * @author mrdoob / http://mrdoob.com/\\n * @author alteredq / http://alteredqualia.com/\\n * @author szimek / https://github.com/szimek/\\n * @author tschw\\n */\\n\\nfunction WebGLRenderer( parameters ) {\\n\\n\\tconsole.log( 'THREE.WebGLRenderer', REVISION );\\n\\n\\tparameters = parameters || {};\\n\\n\\tvar _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),\\n\\t\\t_context = parameters.context !== undefined ? parameters.context : null,\\n\\n\\t\\t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\\n\\t\\t_depth = parameters.depth !== undefined ? parameters.depth : true,\\n\\t\\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\\n\\t\\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\\n\\t\\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\\n\\t\\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,\\n\\t\\t_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default';\\n\\n\\tvar currentRenderList = null;\\n\\tvar currentRenderState = null;\\n\\n\\t// public properties\\n\\n\\tthis.domElement = _canvas;\\n\\tthis.context = null;\\n\\n\\t// clearing\\n\\n\\tthis.autoClear = true;\\n\\tthis.autoClearColor = true;\\n\\tthis.autoClearDepth = true;\\n\\tthis.autoClearStencil = true;\\n\\n\\t// scene graph\\n\\n\\tthis.sortObjects = true;\\n\\n\\t// user-defined clipping\\n\\n\\tthis.clippingPlanes = [];\\n\\tthis.localClippingEnabled = false;\\n\\n\\t// physically based shading\\n\\n\\tthis.gammaFactor = 2.0;\\t// for backwards compatibility\\n\\tthis.gammaInput = false;\\n\\tthis.gammaOutput = false;\\n\\n\\t// physical lights\\n\\n\\tthis.physicallyCorrectLights = false;\\n\\n\\t// tone mapping\\n\\n\\tthis.toneMapping = LinearToneMapping;\\n\\tthis.toneMappingExposure = 1.0;\\n\\tthis.toneMappingWhitePoint = 1.0;\\n\\n\\t// morphs\\n\\n\\tthis.maxMorphTargets = 8;\\n\\tthis.maxMorphNormals = 4;\\n\\n\\t// internal properties\\n\\n\\tvar _this = this,\\n\\n\\t\\t_isContextLost = false,\\n\\n\\t\\t// internal state cache\\n\\n\\t\\t_framebuffer = null,\\n\\n\\t\\t_currentRenderTarget = null,\\n\\t\\t_currentFramebuffer = null,\\n\\t\\t_currentMaterialId = - 1,\\n\\n\\t\\t// geometry and program caching\\n\\n\\t\\t_currentGeometryProgram = {\\n\\t\\t\\tgeometry: null,\\n\\t\\t\\tprogram: null,\\n\\t\\t\\twireframe: false\\n\\t\\t},\\n\\n\\t\\t_currentCamera = null,\\n\\t\\t_currentArrayCamera = null,\\n\\n\\t\\t_currentViewport = new Vector4(),\\n\\t\\t_currentScissor = new Vector4(),\\n\\t\\t_currentScissorTest = null,\\n\\n\\t\\t//\\n\\n\\t\\t_usedTextureUnits = 0,\\n\\n\\t\\t//\\n\\n\\t\\t_width = _canvas.width,\\n\\t\\t_height = _canvas.height,\\n\\n\\t\\t_pixelRatio = 1,\\n\\n\\t\\t_viewport = new Vector4( 0, 0, _width, _height ),\\n\\t\\t_scissor = new Vector4( 0, 0, _width, _height ),\\n\\t\\t_scissorTest = false,\\n\\n\\t\\t// frustum\\n\\n\\t\\t_frustum = new Frustum(),\\n\\n\\t\\t// clipping\\n\\n\\t\\t_clipping = new WebGLClipping(),\\n\\t\\t_clippingEnabled = false,\\n\\t\\t_localClippingEnabled = false,\\n\\n\\t\\t// camera matrices cache\\n\\n\\t\\t_projScreenMatrix = new Matrix4(),\\n\\n\\t\\t_vector3 = new Vector3();\\n\\n\\tfunction getTargetPixelRatio() {\\n\\n\\t\\treturn _currentRenderTarget === null ? _pixelRatio : 1;\\n\\n\\t}\\n\\n\\t// initialize\\n\\n\\tvar _gl;\\n\\n\\ttry {\\n\\n\\t\\tvar contextAttributes = {\\n\\t\\t\\talpha: _alpha,\\n\\t\\t\\tdepth: _depth,\\n\\t\\t\\tstencil: _stencil,\\n\\t\\t\\tantialias: _antialias,\\n\\t\\t\\tpremultipliedAlpha: _premultipliedAlpha,\\n\\t\\t\\tpreserveDrawingBuffer: _preserveDrawingBuffer,\\n\\t\\t\\tpowerPreference: _powerPreference\\n\\t\\t};\\n\\n\\t\\t// event listeners must be registered before WebGL context is created, see #12753\\n\\n\\t\\t_canvas.addEventListener( 'webglcontextlost', onContextLost, false );\\n\\t\\t_canvas.addEventListener( 'webglcontextrestored', onContextRestore, false );\\n\\n\\t\\t_gl = _context || _canvas.getContext( 'webgl', contextAttributes ) || _canvas.getContext( 'experimental-webgl', contextAttributes );\\n\\n\\t\\tif ( _gl === null ) {\\n\\n\\t\\t\\tif ( _canvas.getContext( 'webgl' ) !== null ) {\\n\\n\\t\\t\\t\\tthrow new Error( 'Error creating WebGL context with your selected attributes.' );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tthrow new Error( 'Error creating WebGL context.' );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\t// Some experimental-webgl implementations do not have getShaderPrecisionFormat\\n\\n\\t\\tif ( _gl.getShaderPrecisionFormat === undefined ) {\\n\\n\\t\\t\\t_gl.getShaderPrecisionFormat = function () {\\n\\n\\t\\t\\t\\treturn { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };\\n\\n\\t\\t\\t};\\n\\n\\t\\t}\\n\\n\\t} catch ( error ) {\\n\\n\\t\\tconsole.error( 'THREE.WebGLRenderer: ' + error.message );\\n\\n\\t}\\n\\n\\tvar extensions, capabilities, state, info;\\n\\tvar properties, textures, attributes, geometries, objects;\\n\\tvar programCache, renderLists, renderStates;\\n\\n\\tvar background, morphtargets, bufferRenderer, indexedBufferRenderer;\\n\\n\\tvar utils;\\n\\n\\tfunction initGLContext() {\\n\\n\\t\\textensions = new WebGLExtensions( _gl );\\n\\n\\t\\tcapabilities = new WebGLCapabilities( _gl, extensions, parameters );\\n\\n\\t\\tif ( ! capabilities.isWebGL2 ) {\\n\\n\\t\\t\\textensions.get( 'WEBGL_depth_texture' );\\n\\t\\t\\textensions.get( 'OES_texture_float' );\\n\\t\\t\\textensions.get( 'OES_texture_half_float' );\\n\\t\\t\\textensions.get( 'OES_texture_half_float_linear' );\\n\\t\\t\\textensions.get( 'OES_standard_derivatives' );\\n\\t\\t\\textensions.get( 'OES_element_index_uint' );\\n\\t\\t\\textensions.get( 'ANGLE_instanced_arrays' );\\n\\n\\t\\t}\\n\\n\\t\\textensions.get( 'OES_texture_float_linear' );\\n\\n\\t\\tutils = new WebGLUtils( _gl, extensions, capabilities );\\n\\n\\t\\tstate = new WebGLState( _gl, extensions, utils, capabilities );\\n\\t\\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );\\n\\t\\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );\\n\\n\\t\\tinfo = new WebGLInfo( _gl );\\n\\t\\tproperties = new WebGLProperties();\\n\\t\\ttextures = new WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info );\\n\\t\\tattributes = new WebGLAttributes( _gl );\\n\\t\\tgeometries = new WebGLGeometries( _gl, attributes, info );\\n\\t\\tobjects = new WebGLObjects( geometries, info );\\n\\t\\tmorphtargets = new WebGLMorphtargets( _gl );\\n\\t\\tprogramCache = new WebGLPrograms( _this, extensions, capabilities );\\n\\t\\trenderLists = new WebGLRenderLists();\\n\\t\\trenderStates = new WebGLRenderStates();\\n\\n\\t\\tbackground = new WebGLBackground( _this, state, objects, _premultipliedAlpha );\\n\\n\\t\\tbufferRenderer = new WebGLBufferRenderer( _gl, extensions, info, capabilities );\\n\\t\\tindexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, info, capabilities );\\n\\n\\t\\tinfo.programs = programCache.programs;\\n\\n\\t\\t_this.context = _gl;\\n\\t\\t_this.capabilities = capabilities;\\n\\t\\t_this.extensions = extensions;\\n\\t\\t_this.properties = properties;\\n\\t\\t_this.renderLists = renderLists;\\n\\t\\t_this.state = state;\\n\\t\\t_this.info = info;\\n\\n\\t}\\n\\n\\tinitGLContext();\\n\\n\\t// vr\\n\\n\\tvar vr = null;\\n\\n\\tif ( typeof navigator !== 'undefined' ) {\\n\\n\\t\\tvr = ( 'xr' in navigator ) ? new WebXRManager( _this ) : new WebVRManager( _this );\\n\\n\\t}\\n\\n\\tthis.vr = vr;\\n\\n\\t// shadow map\\n\\n\\tvar shadowMap = new WebGLShadowMap( _this, objects, capabilities.maxTextureSize );\\n\\n\\tthis.shadowMap = shadowMap;\\n\\n\\t// API\\n\\n\\tthis.getContext = function () {\\n\\n\\t\\treturn _gl;\\n\\n\\t};\\n\\n\\tthis.getContextAttributes = function () {\\n\\n\\t\\treturn _gl.getContextAttributes();\\n\\n\\t};\\n\\n\\tthis.forceContextLoss = function () {\\n\\n\\t\\tvar extension = extensions.get( 'WEBGL_lose_context' );\\n\\t\\tif ( extension ) extension.loseContext();\\n\\n\\t};\\n\\n\\tthis.forceContextRestore = function () {\\n\\n\\t\\tvar extension = extensions.get( 'WEBGL_lose_context' );\\n\\t\\tif ( extension ) extension.restoreContext();\\n\\n\\t};\\n\\n\\tthis.getPixelRatio = function () {\\n\\n\\t\\treturn _pixelRatio;\\n\\n\\t};\\n\\n\\tthis.setPixelRatio = function ( value ) {\\n\\n\\t\\tif ( value === undefined ) return;\\n\\n\\t\\t_pixelRatio = value;\\n\\n\\t\\tthis.setSize( _width, _height, false );\\n\\n\\t};\\n\\n\\tthis.getSize = function () {\\n\\n\\t\\treturn {\\n\\t\\t\\twidth: _width,\\n\\t\\t\\theight: _height\\n\\t\\t};\\n\\n\\t};\\n\\n\\tthis.setSize = function ( width, height, updateStyle ) {\\n\\n\\t\\tif ( vr.isPresenting() ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.WebGLRenderer: Can\\\\'t change size while VR device is presenting.' );\\n\\t\\t\\treturn;\\n\\n\\t\\t}\\n\\n\\t\\t_width = width;\\n\\t\\t_height = height;\\n\\n\\t\\t_canvas.width = width * _pixelRatio;\\n\\t\\t_canvas.height = height * _pixelRatio;\\n\\n\\t\\tif ( updateStyle !== false ) {\\n\\n\\t\\t\\t_canvas.style.width = width + 'px';\\n\\t\\t\\t_canvas.style.height = height + 'px';\\n\\n\\t\\t}\\n\\n\\t\\tthis.setViewport( 0, 0, width, height );\\n\\n\\t};\\n\\n\\tthis.getDrawingBufferSize = function () {\\n\\n\\t\\treturn {\\n\\t\\t\\twidth: _width * _pixelRatio,\\n\\t\\t\\theight: _height * _pixelRatio\\n\\t\\t};\\n\\n\\t};\\n\\n\\tthis.setDrawingBufferSize = function ( width, height, pixelRatio ) {\\n\\n\\t\\t_width = width;\\n\\t\\t_height = height;\\n\\n\\t\\t_pixelRatio = pixelRatio;\\n\\n\\t\\t_canvas.width = width * pixelRatio;\\n\\t\\t_canvas.height = height * pixelRatio;\\n\\n\\t\\tthis.setViewport( 0, 0, width, height );\\n\\n\\t};\\n\\n\\tthis.getCurrentViewport = function () {\\n\\n\\t\\treturn _currentViewport;\\n\\n\\t};\\n\\n\\tthis.setViewport = function ( x, y, width, height ) {\\n\\n\\t\\t_viewport.set( x, _height - y - height, width, height );\\n\\t\\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );\\n\\n\\t};\\n\\n\\tthis.setScissor = function ( x, y, width, height ) {\\n\\n\\t\\t_scissor.set( x, _height - y - height, width, height );\\n\\t\\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );\\n\\n\\t};\\n\\n\\tthis.setScissorTest = function ( boolean ) {\\n\\n\\t\\tstate.setScissorTest( _scissorTest = boolean );\\n\\n\\t};\\n\\n\\t// Clearing\\n\\n\\tthis.getClearColor = function () {\\n\\n\\t\\treturn background.getClearColor();\\n\\n\\t};\\n\\n\\tthis.setClearColor = function () {\\n\\n\\t\\tbackground.setClearColor.apply( background, arguments );\\n\\n\\t};\\n\\n\\tthis.getClearAlpha = function () {\\n\\n\\t\\treturn background.getClearAlpha();\\n\\n\\t};\\n\\n\\tthis.setClearAlpha = function () {\\n\\n\\t\\tbackground.setClearAlpha.apply( background, arguments );\\n\\n\\t};\\n\\n\\tthis.clear = function ( color, depth, stencil ) {\\n\\n\\t\\tvar bits = 0;\\n\\n\\t\\tif ( color === undefined || color ) bits |= 16384;\\n\\t\\tif ( depth === undefined || depth ) bits |= 256;\\n\\t\\tif ( stencil === undefined || stencil ) bits |= 1024;\\n\\n\\t\\t_gl.clear( bits );\\n\\n\\t};\\n\\n\\tthis.clearColor = function () {\\n\\n\\t\\tthis.clear( true, false, false );\\n\\n\\t};\\n\\n\\tthis.clearDepth = function () {\\n\\n\\t\\tthis.clear( false, true, false );\\n\\n\\t};\\n\\n\\tthis.clearStencil = function () {\\n\\n\\t\\tthis.clear( false, false, true );\\n\\n\\t};\\n\\n\\t//\\n\\n\\tthis.dispose = function () {\\n\\n\\t\\t_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );\\n\\t\\t_canvas.removeEventListener( 'webglcontextrestored', onContextRestore, false );\\n\\n\\t\\trenderLists.dispose();\\n\\t\\trenderStates.dispose();\\n\\t\\tproperties.dispose();\\n\\t\\tobjects.dispose();\\n\\n\\t\\tvr.dispose();\\n\\n\\t\\tanimation.stop();\\n\\n\\t};\\n\\n\\t// Events\\n\\n\\tfunction onContextLost( event ) {\\n\\n\\t\\tevent.preventDefault();\\n\\n\\t\\tconsole.log( 'THREE.WebGLRenderer: Context Lost.' );\\n\\n\\t\\t_isContextLost = true;\\n\\n\\t}\\n\\n\\tfunction onContextRestore( /* event */ ) {\\n\\n\\t\\tconsole.log( 'THREE.WebGLRenderer: Context Restored.' );\\n\\n\\t\\t_isContextLost = false;\\n\\n\\t\\tinitGLContext();\\n\\n\\t}\\n\\n\\tfunction onMaterialDispose( event ) {\\n\\n\\t\\tvar material = event.target;\\n\\n\\t\\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\\n\\n\\t\\tdeallocateMaterial( material );\\n\\n\\t}\\n\\n\\t// Buffer deallocation\\n\\n\\tfunction deallocateMaterial( material ) {\\n\\n\\t\\treleaseMaterialProgramReference( material );\\n\\n\\t\\tproperties.remove( material );\\n\\n\\t}\\n\\n\\n\\tfunction releaseMaterialProgramReference( material ) {\\n\\n\\t\\tvar programInfo = properties.get( material ).program;\\n\\n\\t\\tmaterial.program = undefined;\\n\\n\\t\\tif ( programInfo !== undefined ) {\\n\\n\\t\\t\\tprogramCache.releaseProgram( programInfo );\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\t// Buffer rendering\\n\\n\\tfunction renderObjectImmediate( object, program ) {\\n\\n\\t\\tobject.render( function ( object ) {\\n\\n\\t\\t\\t_this.renderBufferImmediate( object, program );\\n\\n\\t\\t} );\\n\\n\\t}\\n\\n\\tthis.renderBufferImmediate = function ( object, program ) {\\n\\n\\t\\tstate.initAttributes();\\n\\n\\t\\tvar buffers = properties.get( object );\\n\\n\\t\\tif ( object.hasPositions && ! buffers.position ) buffers.position = _gl.createBuffer();\\n\\t\\tif ( object.hasNormals && ! buffers.normal ) buffers.normal = _gl.createBuffer();\\n\\t\\tif ( object.hasUvs && ! buffers.uv ) buffers.uv = _gl.createBuffer();\\n\\t\\tif ( object.hasColors && ! buffers.color ) buffers.color = _gl.createBuffer();\\n\\n\\t\\tvar programAttributes = program.getAttributes();\\n\\n\\t\\tif ( object.hasPositions ) {\\n\\n\\t\\t\\t_gl.bindBuffer( 34962, buffers.position );\\n\\t\\t\\t_gl.bufferData( 34962, object.positionArray, 35048 );\\n\\n\\t\\t\\tstate.enableAttribute( programAttributes.position );\\n\\t\\t\\t_gl.vertexAttribPointer( programAttributes.position, 3, 5126, false, 0, 0 );\\n\\n\\t\\t}\\n\\n\\t\\tif ( object.hasNormals ) {\\n\\n\\t\\t\\t_gl.bindBuffer( 34962, buffers.normal );\\n\\t\\t\\t_gl.bufferData( 34962, object.normalArray, 35048 );\\n\\n\\t\\t\\tstate.enableAttribute( programAttributes.normal );\\n\\t\\t\\t_gl.vertexAttribPointer( programAttributes.normal, 3, 5126, false, 0, 0 );\\n\\n\\t\\t}\\n\\n\\t\\tif ( object.hasUvs ) {\\n\\n\\t\\t\\t_gl.bindBuffer( 34962, buffers.uv );\\n\\t\\t\\t_gl.bufferData( 34962, object.uvArray, 35048 );\\n\\n\\t\\t\\tstate.enableAttribute( programAttributes.uv );\\n\\t\\t\\t_gl.vertexAttribPointer( programAttributes.uv, 2, 5126, false, 0, 0 );\\n\\n\\t\\t}\\n\\n\\t\\tif ( object.hasColors ) {\\n\\n\\t\\t\\t_gl.bindBuffer( 34962, buffers.color );\\n\\t\\t\\t_gl.bufferData( 34962, object.colorArray, 35048 );\\n\\n\\t\\t\\tstate.enableAttribute( programAttributes.color );\\n\\t\\t\\t_gl.vertexAttribPointer( programAttributes.color, 3, 5126, false, 0, 0 );\\n\\n\\t\\t}\\n\\n\\t\\tstate.disableUnusedAttributes();\\n\\n\\t\\t_gl.drawArrays( 4, 0, object.count );\\n\\n\\t\\tobject.count = 0;\\n\\n\\t};\\n\\n\\tthis.renderBufferDirect = function ( camera, fog, geometry, material, object, group ) {\\n\\n\\t\\tvar frontFaceCW = ( object.isMesh && object.normalMatrix.determinant() < 0 );\\n\\n\\t\\tstate.setMaterial( material, frontFaceCW );\\n\\n\\t\\tvar program = setProgram( camera, fog, material, object );\\n\\n\\t\\tvar updateBuffers = false;\\n\\n\\t\\tif ( _currentGeometryProgram.geometry !== geometry.id ||\\n\\t\\t\\t_currentGeometryProgram.program !== program.id ||\\n\\t\\t\\t_currentGeometryProgram.wireframe !== ( material.wireframe === true ) ) {\\n\\n\\t\\t\\t_currentGeometryProgram.geometry = geometry.id;\\n\\t\\t\\t_currentGeometryProgram.program = program.id;\\n\\t\\t\\t_currentGeometryProgram.wireframe = material.wireframe === true;\\n\\t\\t\\tupdateBuffers = true;\\n\\n\\t\\t}\\n\\n\\t\\tif ( object.morphTargetInfluences ) {\\n\\n\\t\\t\\tmorphtargets.update( object, geometry, material, program );\\n\\n\\t\\t\\tupdateBuffers = true;\\n\\n\\t\\t}\\n\\n\\t\\t//\\n\\n\\t\\tvar index = geometry.index;\\n\\t\\tvar position = geometry.attributes.position;\\n\\t\\tvar rangeFactor = 1;\\n\\n\\t\\tif ( material.wireframe === true ) {\\n\\n\\t\\t\\tindex = geometries.getWireframeAttribute( geometry );\\n\\t\\t\\trangeFactor = 2;\\n\\n\\t\\t}\\n\\n\\t\\tvar attribute;\\n\\t\\tvar renderer = bufferRenderer;\\n\\n\\t\\tif ( index !== null ) {\\n\\n\\t\\t\\tattribute = attributes.get( index );\\n\\n\\t\\t\\trenderer = indexedBufferRenderer;\\n\\t\\t\\trenderer.setIndex( attribute );\\n\\n\\t\\t}\\n\\n\\t\\tif ( updateBuffers ) {\\n\\n\\t\\t\\tsetupVertexAttributes( material, program, geometry );\\n\\n\\t\\t\\tif ( index !== null ) {\\n\\n\\t\\t\\t\\t_gl.bindBuffer( 34963, attribute.buffer );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\t//\\n\\n\\t\\tvar dataCount = Infinity;\\n\\n\\t\\tif ( index !== null ) {\\n\\n\\t\\t\\tdataCount = index.count;\\n\\n\\t\\t} else if ( position !== undefined ) {\\n\\n\\t\\t\\tdataCount = position.count;\\n\\n\\t\\t}\\n\\n\\t\\tvar rangeStart = geometry.drawRange.start * rangeFactor;\\n\\t\\tvar rangeCount = geometry.drawRange.count * rangeFactor;\\n\\n\\t\\tvar groupStart = group !== null ? group.start * rangeFactor : 0;\\n\\t\\tvar groupCount = group !== null ? group.count * rangeFactor : Infinity;\\n\\n\\t\\tvar drawStart = Math.max( rangeStart, groupStart );\\n\\t\\tvar drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;\\n\\n\\t\\tvar drawCount = Math.max( 0, drawEnd - drawStart + 1 );\\n\\n\\t\\tif ( drawCount === 0 ) return;\\n\\n\\t\\t//\\n\\n\\t\\tif ( object.isMesh ) {\\n\\n\\t\\t\\tif ( material.wireframe === true ) {\\n\\n\\t\\t\\t\\tstate.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );\\n\\t\\t\\t\\trenderer.setMode( 1 );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tswitch ( object.drawMode ) {\\n\\n\\t\\t\\t\\t\\tcase TrianglesDrawMode:\\n\\t\\t\\t\\t\\t\\trenderer.setMode( 4 );\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\tcase TriangleStripDrawMode:\\n\\t\\t\\t\\t\\t\\trenderer.setMode( 5 );\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\tcase TriangleFanDrawMode:\\n\\t\\t\\t\\t\\t\\trenderer.setMode( 6 );\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\n\\t\\t} else if ( object.isLine ) {\\n\\n\\t\\t\\tvar lineWidth = material.linewidth;\\n\\n\\t\\t\\tif ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material\\n\\n\\t\\t\\tstate.setLineWidth( lineWidth * getTargetPixelRatio() );\\n\\n\\t\\t\\tif ( object.isLineSegments ) {\\n\\n\\t\\t\\t\\trenderer.setMode( 1 );\\n\\n\\t\\t\\t} else if ( object.isLineLoop ) {\\n\\n\\t\\t\\t\\trenderer.setMode( 2 );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\trenderer.setMode( 3 );\\n\\n\\t\\t\\t}\\n\\n\\t\\t} else if ( object.isPoints ) {\\n\\n\\t\\t\\trenderer.setMode( 0 );\\n\\n\\t\\t} else if ( object.isSprite ) {\\n\\n\\t\\t\\trenderer.setMode( 4 );\\n\\n\\t\\t}\\n\\n\\t\\tif ( geometry && geometry.isInstancedBufferGeometry ) {\\n\\n\\t\\t\\tif ( geometry.maxInstancedCount > 0 ) {\\n\\n\\t\\t\\t\\trenderer.renderInstances( geometry, drawStart, drawCount );\\n\\n\\t\\t\\t}\\n\\n\\t\\t} else {\\n\\n\\t\\t\\trenderer.render( drawStart, drawCount );\\n\\n\\t\\t}\\n\\n\\t};\\n\\n\\tfunction setupVertexAttributes( material, program, geometry ) {\\n\\n\\t\\tif ( geometry && geometry.isInstancedBufferGeometry & ! capabilities.isWebGL2 ) {\\n\\n\\t\\t\\tif ( extensions.get( 'ANGLE_instanced_arrays' ) === null ) {\\n\\n\\t\\t\\t\\tconsole.error( 'THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\\n\\t\\t\\t\\treturn;\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tstate.initAttributes();\\n\\n\\t\\tvar geometryAttributes = geometry.attributes;\\n\\n\\t\\tvar programAttributes = program.getAttributes();\\n\\n\\t\\tvar materialDefaultAttributeValues = material.defaultAttributeValues;\\n\\n\\t\\tfor ( var name in programAttributes ) {\\n\\n\\t\\t\\tvar programAttribute = programAttributes[ name ];\\n\\n\\t\\t\\tif ( programAttribute >= 0 ) {\\n\\n\\t\\t\\t\\tvar geometryAttribute = geometryAttributes[ name ];\\n\\n\\t\\t\\t\\tif ( geometryAttribute !== undefined ) {\\n\\n\\t\\t\\t\\t\\tvar normalized = geometryAttribute.normalized;\\n\\t\\t\\t\\t\\tvar size = geometryAttribute.itemSize;\\n\\n\\t\\t\\t\\t\\tvar attribute = attributes.get( geometryAttribute );\\n\\n\\t\\t\\t\\t\\t// TODO Attribute may not be available on context restore\\n\\n\\t\\t\\t\\t\\tif ( attribute === undefined ) continue;\\n\\n\\t\\t\\t\\t\\tvar buffer = attribute.buffer;\\n\\t\\t\\t\\t\\tvar type = attribute.type;\\n\\t\\t\\t\\t\\tvar bytesPerElement = attribute.bytesPerElement;\\n\\n\\t\\t\\t\\t\\tif ( geometryAttribute.isInterleavedBufferAttribute ) {\\n\\n\\t\\t\\t\\t\\t\\tvar data = geometryAttribute.data;\\n\\t\\t\\t\\t\\t\\tvar stride = data.stride;\\n\\t\\t\\t\\t\\t\\tvar offset = geometryAttribute.offset;\\n\\n\\t\\t\\t\\t\\t\\tif ( data && data.isInstancedInterleavedBuffer ) {\\n\\n\\t\\t\\t\\t\\t\\t\\tstate.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute );\\n\\n\\t\\t\\t\\t\\t\\t\\tif ( geometry.maxInstancedCount === undefined ) {\\n\\n\\t\\t\\t\\t\\t\\t\\t\\tgeometry.maxInstancedCount = data.meshPerAttribute * data.count;\\n\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\t\\t\\tstate.enableAttribute( programAttribute );\\n\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t_gl.bindBuffer( 34962, buffer );\\n\\t\\t\\t\\t\\t\\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * bytesPerElement, offset * bytesPerElement );\\n\\n\\t\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\t\\tif ( geometryAttribute.isInstancedBufferAttribute ) {\\n\\n\\t\\t\\t\\t\\t\\t\\tstate.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute );\\n\\n\\t\\t\\t\\t\\t\\t\\tif ( geometry.maxInstancedCount === undefined ) {\\n\\n\\t\\t\\t\\t\\t\\t\\t\\tgeometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\\n\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\t\\t\\tstate.enableAttribute( programAttribute );\\n\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t_gl.bindBuffer( 34962, buffer );\\n\\t\\t\\t\\t\\t\\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, 0 );\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t} else if ( materialDefaultAttributeValues !== undefined ) {\\n\\n\\t\\t\\t\\t\\tvar value = materialDefaultAttributeValues[ name ];\\n\\n\\t\\t\\t\\t\\tif ( value !== undefined ) {\\n\\n\\t\\t\\t\\t\\t\\tswitch ( value.length ) {\\n\\n\\t\\t\\t\\t\\t\\t\\tcase 2:\\n\\t\\t\\t\\t\\t\\t\\t\\t_gl.vertexAttrib2fv( programAttribute, value );\\n\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\t\\t\\tcase 3:\\n\\t\\t\\t\\t\\t\\t\\t\\t_gl.vertexAttrib3fv( programAttribute, value );\\n\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\t\\t\\tcase 4:\\n\\t\\t\\t\\t\\t\\t\\t\\t_gl.vertexAttrib4fv( programAttribute, value );\\n\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\t\\t\\t\\t_gl.vertexAttrib1fv( programAttribute, value );\\n\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tstate.disableUnusedAttributes();\\n\\n\\t}\\n\\n\\t// Compile\\n\\n\\tthis.compile = function ( scene, camera ) {\\n\\n\\t\\tcurrentRenderState = renderStates.get( scene, camera );\\n\\t\\tcurrentRenderState.init();\\n\\n\\t\\tscene.traverse( function ( object ) {\\n\\n\\t\\t\\tif ( object.isLight ) {\\n\\n\\t\\t\\t\\tcurrentRenderState.pushLight( object );\\n\\n\\t\\t\\t\\tif ( object.castShadow ) {\\n\\n\\t\\t\\t\\t\\tcurrentRenderState.pushShadow( object );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t} );\\n\\n\\t\\tcurrentRenderState.setupLights( camera );\\n\\n\\t\\tscene.traverse( function ( object ) {\\n\\n\\t\\t\\tif ( object.material ) {\\n\\n\\t\\t\\t\\tif ( Array.isArray( object.material ) ) {\\n\\n\\t\\t\\t\\t\\tfor ( var i = 0; i < object.material.length; i ++ ) {\\n\\n\\t\\t\\t\\t\\t\\tinitMaterial( object.material[ i ], scene.fog, object );\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\tinitMaterial( object.material, scene.fog, object );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t} );\\n\\n\\t};\\n\\n\\t// Animation Loop\\n\\n\\tvar onAnimationFrameCallback = null;\\n\\n\\tfunction onAnimationFrame( time ) {\\n\\n\\t\\tif ( vr.isPresenting() ) return;\\n\\t\\tif ( onAnimationFrameCallback ) onAnimationFrameCallback( time );\\n\\n\\t}\\n\\n\\tvar animation = new WebGLAnimation();\\n\\tanimation.setAnimationLoop( onAnimationFrame );\\n\\n\\tif ( typeof window !== 'undefined' ) animation.setContext( window );\\n\\n\\tthis.setAnimationLoop = function ( callback ) {\\n\\n\\t\\tonAnimationFrameCallback = callback;\\n\\t\\tvr.setAnimationLoop( callback );\\n\\n\\t\\tanimation.start();\\n\\n\\t};\\n\\n\\t// Rendering\\n\\n\\tthis.render = function ( scene, camera, renderTarget, forceClear ) {\\n\\n\\t\\tif ( ! ( camera && camera.isCamera ) ) {\\n\\n\\t\\t\\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\\n\\t\\t\\treturn;\\n\\n\\t\\t}\\n\\n\\t\\tif ( _isContextLost ) return;\\n\\n\\t\\t// reset caching for this frame\\n\\n\\t\\t_currentGeometryProgram.geometry = null;\\n\\t\\t_currentGeometryProgram.program = null;\\n\\t\\t_currentGeometryProgram.wireframe = false;\\n\\t\\t_currentMaterialId = - 1;\\n\\t\\t_currentCamera = null;\\n\\n\\t\\t// update scene graph\\n\\n\\t\\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\\n\\n\\t\\t// update camera matrices and frustum\\n\\n\\t\\tif ( camera.parent === null ) camera.updateMatrixWorld();\\n\\n\\t\\tif ( vr.enabled ) {\\n\\n\\t\\t\\tcamera = vr.getCamera( camera );\\n\\n\\t\\t}\\n\\n\\t\\t//\\n\\n\\t\\tcurrentRenderState = renderStates.get( scene, camera );\\n\\t\\tcurrentRenderState.init();\\n\\n\\t\\tscene.onBeforeRender( _this, scene, camera, renderTarget );\\n\\n\\t\\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\\n\\t\\t_frustum.setFromMatrix( _projScreenMatrix );\\n\\n\\t\\t_localClippingEnabled = this.localClippingEnabled;\\n\\t\\t_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );\\n\\n\\t\\tcurrentRenderList = renderLists.get( scene, camera );\\n\\t\\tcurrentRenderList.init();\\n\\n\\t\\tprojectObject( scene, camera, 0, _this.sortObjects );\\n\\n\\t\\tif ( _this.sortObjects === true ) {\\n\\n\\t\\t\\tcurrentRenderList.sort();\\n\\n\\t\\t}\\n\\n\\t\\t//\\n\\n\\t\\tif ( _clippingEnabled ) _clipping.beginShadows();\\n\\n\\t\\tvar shadowsArray = currentRenderState.state.shadowsArray;\\n\\n\\t\\tshadowMap.render( shadowsArray, scene, camera );\\n\\n\\t\\tcurrentRenderState.setupLights( camera );\\n\\n\\t\\tif ( _clippingEnabled ) _clipping.endShadows();\\n\\n\\t\\t//\\n\\n\\t\\tif ( this.info.autoReset ) this.info.reset();\\n\\n\\t\\tif ( renderTarget === undefined ) {\\n\\n\\t\\t\\trenderTarget = null;\\n\\n\\t\\t}\\n\\n\\t\\tthis.setRenderTarget( renderTarget );\\n\\n\\t\\t//\\n\\n\\t\\tbackground.render( currentRenderList, scene, camera, forceClear );\\n\\n\\t\\t// render scene\\n\\n\\t\\tvar opaqueObjects = currentRenderList.opaque;\\n\\t\\tvar transparentObjects = currentRenderList.transparent;\\n\\n\\t\\tif ( scene.overrideMaterial ) {\\n\\n\\t\\t\\tvar overrideMaterial = scene.overrideMaterial;\\n\\n\\t\\t\\tif ( opaqueObjects.length ) renderObjects( opaqueObjects, scene, camera, overrideMaterial );\\n\\t\\t\\tif ( transparentObjects.length ) renderObjects( transparentObjects, scene, camera, overrideMaterial );\\n\\n\\t\\t} else {\\n\\n\\t\\t\\t// opaque pass (front-to-back order)\\n\\n\\t\\t\\tif ( opaqueObjects.length ) renderObjects( opaqueObjects, scene, camera );\\n\\n\\t\\t\\t// transparent pass (back-to-front order)\\n\\n\\t\\t\\tif ( transparentObjects.length ) renderObjects( transparentObjects, scene, camera );\\n\\n\\t\\t}\\n\\n\\t\\t//\\n\\n\\t\\tif ( renderTarget ) {\\n\\n\\t\\t\\t// Generate mipmap if we're using any kind of mipmap filtering\\n\\n\\t\\t\\ttextures.updateRenderTargetMipmap( renderTarget );\\n\\n\\t\\t\\t// resolve multisample renderbuffers to a single-sample texture if necessary\\n\\n\\t\\t\\ttextures.updateMultisampleRenderTarget( renderTarget );\\n\\n\\t\\t}\\n\\n\\t\\t// Ensure depth buffer writing is enabled so it can be cleared on next render\\n\\n\\t\\tstate.buffers.depth.setTest( true );\\n\\t\\tstate.buffers.depth.setMask( true );\\n\\t\\tstate.buffers.color.setMask( true );\\n\\n\\t\\tstate.setPolygonOffset( false );\\n\\n\\t\\tscene.onAfterRender( _this, scene, camera );\\n\\n\\t\\tif ( vr.enabled ) {\\n\\n\\t\\t\\tvr.submitFrame();\\n\\n\\t\\t}\\n\\n\\t\\t// _gl.finish();\\n\\n\\t\\tcurrentRenderList = null;\\n\\t\\tcurrentRenderState = null;\\n\\n\\t};\\n\\n\\tfunction projectObject( object, camera, groupOrder, sortObjects ) {\\n\\n\\t\\tif ( object.visible === false ) return;\\n\\n\\t\\tvar visible = object.layers.test( camera.layers );\\n\\n\\t\\tif ( visible ) {\\n\\n\\t\\t\\tif ( object.isGroup ) {\\n\\n\\t\\t\\t\\tgroupOrder = object.renderOrder;\\n\\n\\t\\t\\t} else if ( object.isLight ) {\\n\\n\\t\\t\\t\\tcurrentRenderState.pushLight( object );\\n\\n\\t\\t\\t\\tif ( object.castShadow ) {\\n\\n\\t\\t\\t\\t\\tcurrentRenderState.pushShadow( object );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t} else if ( object.isSprite ) {\\n\\n\\t\\t\\t\\tif ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {\\n\\n\\t\\t\\t\\t\\tif ( sortObjects ) {\\n\\n\\t\\t\\t\\t\\t\\t_vector3.setFromMatrixPosition( object.matrixWorld )\\n\\t\\t\\t\\t\\t\\t\\t.applyMatrix4( _projScreenMatrix );\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tvar geometry = objects.update( object );\\n\\t\\t\\t\\t\\tvar material = object.material;\\n\\n\\t\\t\\t\\t\\tcurrentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t} else if ( object.isImmediateRenderObject ) {\\n\\n\\t\\t\\t\\tif ( sortObjects ) {\\n\\n\\t\\t\\t\\t\\t_vector3.setFromMatrixPosition( object.matrixWorld )\\n\\t\\t\\t\\t\\t\\t.applyMatrix4( _projScreenMatrix );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tcurrentRenderList.push( object, null, object.material, groupOrder, _vector3.z, null );\\n\\n\\t\\t\\t} else if ( object.isMesh || object.isLine || object.isPoints ) {\\n\\n\\t\\t\\t\\tif ( object.isSkinnedMesh ) {\\n\\n\\t\\t\\t\\t\\tobject.skeleton.update();\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {\\n\\n\\t\\t\\t\\t\\tif ( sortObjects ) {\\n\\n\\t\\t\\t\\t\\t\\t_vector3.setFromMatrixPosition( object.matrixWorld )\\n\\t\\t\\t\\t\\t\\t\\t.applyMatrix4( _projScreenMatrix );\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tvar geometry = objects.update( object );\\n\\t\\t\\t\\t\\tvar material = object.material;\\n\\n\\t\\t\\t\\t\\tif ( Array.isArray( material ) ) {\\n\\n\\t\\t\\t\\t\\t\\tvar groups = geometry.groups;\\n\\n\\t\\t\\t\\t\\t\\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\\n\\n\\t\\t\\t\\t\\t\\t\\tvar group = groups[ i ];\\n\\t\\t\\t\\t\\t\\t\\tvar groupMaterial = material[ group.materialIndex ];\\n\\n\\t\\t\\t\\t\\t\\t\\tif ( groupMaterial && groupMaterial.visible ) {\\n\\n\\t\\t\\t\\t\\t\\t\\t\\tcurrentRenderList.push( object, geometry, groupMaterial, groupOrder, _vector3.z, group );\\n\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t} else if ( material.visible ) {\\n\\n\\t\\t\\t\\t\\t\\tcurrentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tvar children = object.children;\\n\\n\\t\\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\\n\\n\\t\\t\\tprojectObject( children[ i ], camera, groupOrder, sortObjects );\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tfunction renderObjects( renderList, scene, camera, overrideMaterial ) {\\n\\n\\t\\tfor ( var i = 0, l = renderList.length; i < l; i ++ ) {\\n\\n\\t\\t\\tvar renderItem = renderList[ i ];\\n\\n\\t\\t\\tvar object = renderItem.object;\\n\\t\\t\\tvar geometry = renderItem.geometry;\\n\\t\\t\\tvar material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;\\n\\t\\t\\tvar group = renderItem.group;\\n\\n\\t\\t\\tif ( camera.isArrayCamera ) {\\n\\n\\t\\t\\t\\t_currentArrayCamera = camera;\\n\\n\\t\\t\\t\\tvar cameras = camera.cameras;\\n\\n\\t\\t\\t\\tfor ( var j = 0, jl = cameras.length; j < jl; j ++ ) {\\n\\n\\t\\t\\t\\t\\tvar camera2 = cameras[ j ];\\n\\n\\t\\t\\t\\t\\tif ( object.layers.test( camera2.layers ) ) {\\n\\n\\t\\t\\t\\t\\t\\tif ( 'viewport' in camera2 ) { // XR\\n\\n\\t\\t\\t\\t\\t\\t\\tstate.viewport( _currentViewport.copy( camera2.viewport ) );\\n\\n\\t\\t\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\t\\t\\tvar bounds = camera2.bounds;\\n\\n\\t\\t\\t\\t\\t\\t\\tvar x = bounds.x * _width;\\n\\t\\t\\t\\t\\t\\t\\tvar y = bounds.y * _height;\\n\\t\\t\\t\\t\\t\\t\\tvar width = bounds.z * _width;\\n\\t\\t\\t\\t\\t\\t\\tvar height = bounds.w * _height;\\n\\n\\t\\t\\t\\t\\t\\t\\tstate.viewport( _currentViewport.set( x, y, width, height ).multiplyScalar( _pixelRatio ) );\\n\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\tcurrentRenderState.setupLights( camera2 );\\n\\n\\t\\t\\t\\t\\t\\trenderObject( object, scene, camera2, geometry, material, group );\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t_currentArrayCamera = null;\\n\\n\\t\\t\\t\\trenderObject( object, scene, camera, geometry, material, group );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tfunction renderObject( object, scene, camera, geometry, material, group ) {\\n\\n\\t\\tobject.onBeforeRender( _this, scene, camera, geometry, material, group );\\n\\t\\tcurrentRenderState = renderStates.get( scene, _currentArrayCamera || camera );\\n\\n\\t\\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\\n\\t\\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\\n\\n\\t\\tif ( object.isImmediateRenderObject ) {\\n\\n\\t\\t\\tstate.setMaterial( material );\\n\\n\\t\\t\\tvar program = setProgram( camera, scene.fog, material, object );\\n\\n\\t\\t\\t_currentGeometryProgram.geometry = null;\\n\\t\\t\\t_currentGeometryProgram.program = null;\\n\\t\\t\\t_currentGeometryProgram.wireframe = false;\\n\\n\\t\\t\\trenderObjectImmediate( object, program );\\n\\n\\t\\t} else {\\n\\n\\t\\t\\t_this.renderBufferDirect( camera, scene.fog, geometry, material, object, group );\\n\\n\\t\\t}\\n\\n\\t\\tobject.onAfterRender( _this, scene, camera, geometry, material, group );\\n\\t\\tcurrentRenderState = renderStates.get( scene, _currentArrayCamera || camera );\\n\\n\\t}\\n\\n\\tfunction initMaterial( material, fog, object ) {\\n\\n\\t\\tvar materialProperties = properties.get( material );\\n\\n\\t\\tvar lights = currentRenderState.state.lights;\\n\\t\\tvar shadowsArray = currentRenderState.state.shadowsArray;\\n\\n\\t\\tvar lightsHash = materialProperties.lightsHash;\\n\\t\\tvar lightsStateHash = lights.state.hash;\\n\\n\\t\\tvar parameters = programCache.getParameters(\\n\\t\\t\\tmaterial, lights.state, shadowsArray, fog, _clipping.numPlanes, _clipping.numIntersection, object );\\n\\n\\t\\tvar code = programCache.getProgramCode( material, parameters );\\n\\n\\t\\tvar program = materialProperties.program;\\n\\t\\tvar programChange = true;\\n\\n\\t\\tif ( program === undefined ) {\\n\\n\\t\\t\\t// new material\\n\\t\\t\\tmaterial.addEventListener( 'dispose', onMaterialDispose );\\n\\n\\t\\t} else if ( program.code !== code ) {\\n\\n\\t\\t\\t// changed glsl or parameters\\n\\t\\t\\treleaseMaterialProgramReference( material );\\n\\n\\t\\t} else if ( lightsHash.stateID !== lightsStateHash.stateID ||\\n\\t\\t\\tlightsHash.directionalLength !== lightsStateHash.directionalLength ||\\n\\t\\t\\tlightsHash.pointLength !== lightsStateHash.pointLength ||\\n\\t\\t\\tlightsHash.spotLength !== lightsStateHash.spotLength ||\\n\\t\\t\\tlightsHash.rectAreaLength !== lightsStateHash.rectAreaLength ||\\n\\t\\t\\tlightsHash.hemiLength !== lightsStateHash.hemiLength ||\\n\\t\\t\\tlightsHash.shadowsLength !== lightsStateHash.shadowsLength ) {\\n\\n\\t\\t\\tlightsHash.stateID = lightsStateHash.stateID;\\n\\t\\t\\tlightsHash.directionalLength = lightsStateHash.directionalLength;\\n\\t\\t\\tlightsHash.pointLength = lightsStateHash.pointLength;\\n\\t\\t\\tlightsHash.spotLength = lightsStateHash.spotLength;\\n\\t\\t\\tlightsHash.rectAreaLength = lightsStateHash.rectAreaLength;\\n\\t\\t\\tlightsHash.hemiLength = lightsStateHash.hemiLength;\\n\\t\\t\\tlightsHash.shadowsLength = lightsStateHash.shadowsLength;\\n\\n\\t\\t\\tprogramChange = false;\\n\\n\\t\\t} else if ( parameters.shaderID !== undefined ) {\\n\\n\\t\\t\\t// same glsl and uniform list\\n\\t\\t\\treturn;\\n\\n\\t\\t} else {\\n\\n\\t\\t\\t// only rebuild uniform list\\n\\t\\t\\tprogramChange = false;\\n\\n\\t\\t}\\n\\n\\t\\tif ( programChange ) {\\n\\n\\t\\t\\tif ( parameters.shaderID ) {\\n\\n\\t\\t\\t\\tvar shader = ShaderLib[ parameters.shaderID ];\\n\\n\\t\\t\\t\\tmaterialProperties.shader = {\\n\\t\\t\\t\\t\\tname: material.type,\\n\\t\\t\\t\\t\\tuniforms: cloneUniforms( shader.uniforms ),\\n\\t\\t\\t\\t\\tvertexShader: shader.vertexShader,\\n\\t\\t\\t\\t\\tfragmentShader: shader.fragmentShader\\n\\t\\t\\t\\t};\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tmaterialProperties.shader = {\\n\\t\\t\\t\\t\\tname: material.type,\\n\\t\\t\\t\\t\\tuniforms: material.uniforms,\\n\\t\\t\\t\\t\\tvertexShader: material.vertexShader,\\n\\t\\t\\t\\t\\tfragmentShader: material.fragmentShader\\n\\t\\t\\t\\t};\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tmaterial.onBeforeCompile( materialProperties.shader, _this );\\n\\n\\t\\t\\t// Computing code again as onBeforeCompile may have changed the shaders\\n\\t\\t\\tcode = programCache.getProgramCode( material, parameters );\\n\\n\\t\\t\\tprogram = programCache.acquireProgram( material, materialProperties.shader, parameters, code );\\n\\n\\t\\t\\tmaterialProperties.program = program;\\n\\t\\t\\tmaterial.program = program;\\n\\n\\t\\t}\\n\\n\\t\\tvar programAttributes = program.getAttributes();\\n\\n\\t\\tif ( material.morphTargets ) {\\n\\n\\t\\t\\tmaterial.numSupportedMorphTargets = 0;\\n\\n\\t\\t\\tfor ( var i = 0; i < _this.maxMorphTargets; i ++ ) {\\n\\n\\t\\t\\t\\tif ( programAttributes[ 'morphTarget' + i ] >= 0 ) {\\n\\n\\t\\t\\t\\t\\tmaterial.numSupportedMorphTargets ++;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tif ( material.morphNormals ) {\\n\\n\\t\\t\\tmaterial.numSupportedMorphNormals = 0;\\n\\n\\t\\t\\tfor ( var i = 0; i < _this.maxMorphNormals; i ++ ) {\\n\\n\\t\\t\\t\\tif ( programAttributes[ 'morphNormal' + i ] >= 0 ) {\\n\\n\\t\\t\\t\\t\\tmaterial.numSupportedMorphNormals ++;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tvar uniforms = materialProperties.shader.uniforms;\\n\\n\\t\\tif ( ! material.isShaderMaterial &&\\n\\t\\t\\t! material.isRawShaderMaterial ||\\n\\t\\t\\tmaterial.clipping === true ) {\\n\\n\\t\\t\\tmaterialProperties.numClippingPlanes = _clipping.numPlanes;\\n\\t\\t\\tmaterialProperties.numIntersection = _clipping.numIntersection;\\n\\t\\t\\tuniforms.clippingPlanes = _clipping.uniform;\\n\\n\\t\\t}\\n\\n\\t\\tmaterialProperties.fog = fog;\\n\\n\\t\\t// store the light setup it was created for\\n\\t\\tif ( lightsHash === undefined ) {\\n\\n\\t\\t\\tmaterialProperties.lightsHash = lightsHash = {};\\n\\n\\t\\t}\\n\\n\\t\\tlightsHash.stateID = lightsStateHash.stateID;\\n\\t\\tlightsHash.directionalLength = lightsStateHash.directionalLength;\\n\\t\\tlightsHash.pointLength = lightsStateHash.pointLength;\\n\\t\\tlightsHash.spotLength = lightsStateHash.spotLength;\\n\\t\\tlightsHash.rectAreaLength = lightsStateHash.rectAreaLength;\\n\\t\\tlightsHash.hemiLength = lightsStateHash.hemiLength;\\n\\t\\tlightsHash.shadowsLength = lightsStateHash.shadowsLength;\\n\\n\\t\\tif ( material.lights ) {\\n\\n\\t\\t\\t// wire up the material to this renderer's lighting state\\n\\n\\t\\t\\tuniforms.ambientLightColor.value = lights.state.ambient;\\n\\t\\t\\tuniforms.directionalLights.value = lights.state.directional;\\n\\t\\t\\tuniforms.spotLights.value = lights.state.spot;\\n\\t\\t\\tuniforms.rectAreaLights.value = lights.state.rectArea;\\n\\t\\t\\tuniforms.pointLights.value = lights.state.point;\\n\\t\\t\\tuniforms.hemisphereLights.value = lights.state.hemi;\\n\\n\\t\\t\\tuniforms.directionalShadowMap.value = lights.state.directionalShadowMap;\\n\\t\\t\\tuniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;\\n\\t\\t\\tuniforms.spotShadowMap.value = lights.state.spotShadowMap;\\n\\t\\t\\tuniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;\\n\\t\\t\\tuniforms.pointShadowMap.value = lights.state.pointShadowMap;\\n\\t\\t\\tuniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;\\n\\t\\t\\t// TODO (abelnation): add area lights shadow info to uniforms\\n\\n\\t\\t}\\n\\n\\t\\tvar progUniforms = materialProperties.program.getUniforms(),\\n\\t\\t\\tuniformsList =\\n\\t\\t\\t\\tWebGLUniforms.seqWithValue( progUniforms.seq, uniforms );\\n\\n\\t\\tmaterialProperties.uniformsList = uniformsList;\\n\\n\\t}\\n\\n\\tfunction setProgram( camera, fog, material, object ) {\\n\\n\\t\\t_usedTextureUnits = 0;\\n\\n\\t\\tvar materialProperties = properties.get( material );\\n\\t\\tvar lights = currentRenderState.state.lights;\\n\\n\\t\\tvar lightsHash = materialProperties.lightsHash;\\n\\t\\tvar lightsStateHash = lights.state.hash;\\n\\n\\t\\tif ( _clippingEnabled ) {\\n\\n\\t\\t\\tif ( _localClippingEnabled || camera !== _currentCamera ) {\\n\\n\\t\\t\\t\\tvar useCache =\\n\\t\\t\\t\\t\\tcamera === _currentCamera &&\\n\\t\\t\\t\\t\\tmaterial.id === _currentMaterialId;\\n\\n\\t\\t\\t\\t// we might want to call this function with some ClippingGroup\\n\\t\\t\\t\\t// object instead of the material, once it becomes feasible\\n\\t\\t\\t\\t// (#8465, #8379)\\n\\t\\t\\t\\t_clipping.setState(\\n\\t\\t\\t\\t\\tmaterial.clippingPlanes, material.clipIntersection, material.clipShadows,\\n\\t\\t\\t\\t\\tcamera, materialProperties, useCache );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tif ( material.needsUpdate === false ) {\\n\\n\\t\\t\\tif ( materialProperties.program === undefined ) {\\n\\n\\t\\t\\t\\tmaterial.needsUpdate = true;\\n\\n\\t\\t\\t} else if ( material.fog && materialProperties.fog !== fog ) {\\n\\n\\t\\t\\t\\tmaterial.needsUpdate = true;\\n\\n\\t\\t\\t} else if ( material.lights && ( lightsHash.stateID !== lightsStateHash.stateID ||\\n\\t\\t\\t\\tlightsHash.directionalLength !== lightsStateHash.directionalLength ||\\n\\t\\t\\t\\tlightsHash.pointLength !== lightsStateHash.pointLength ||\\n\\t\\t\\t\\tlightsHash.spotLength !== lightsStateHash.spotLength ||\\n\\t\\t\\t\\tlightsHash.rectAreaLength !== lightsStateHash.rectAreaLength ||\\n\\t\\t\\t\\tlightsHash.hemiLength !== lightsStateHash.hemiLength ||\\n\\t\\t\\t\\tlightsHash.shadowsLength !== lightsStateHash.shadowsLength ) ) {\\n\\n\\t\\t\\t\\tmaterial.needsUpdate = true;\\n\\n\\t\\t\\t} else if ( materialProperties.numClippingPlanes !== undefined &&\\n\\t\\t\\t\\t( materialProperties.numClippingPlanes !== _clipping.numPlanes ||\\n\\t\\t\\t\\tmaterialProperties.numIntersection !== _clipping.numIntersection ) ) {\\n\\n\\t\\t\\t\\tmaterial.needsUpdate = true;\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tif ( material.needsUpdate ) {\\n\\n\\t\\t\\tinitMaterial( material, fog, object );\\n\\t\\t\\tmaterial.needsUpdate = false;\\n\\n\\t\\t}\\n\\n\\t\\tvar refreshProgram = false;\\n\\t\\tvar refreshMaterial = false;\\n\\t\\tvar refreshLights = false;\\n\\n\\t\\tvar program = materialProperties.program,\\n\\t\\t\\tp_uniforms = program.getUniforms(),\\n\\t\\t\\tm_uniforms = materialProperties.shader.uniforms;\\n\\n\\t\\tif ( state.useProgram( program.program ) ) {\\n\\n\\t\\t\\trefreshProgram = true;\\n\\t\\t\\trefreshMaterial = true;\\n\\t\\t\\trefreshLights = true;\\n\\n\\t\\t}\\n\\n\\t\\tif ( material.id !== _currentMaterialId ) {\\n\\n\\t\\t\\t_currentMaterialId = material.id;\\n\\n\\t\\t\\trefreshMaterial = true;\\n\\n\\t\\t}\\n\\n\\t\\tif ( refreshProgram || _currentCamera !== camera ) {\\n\\n\\t\\t\\tp_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );\\n\\n\\t\\t\\tif ( capabilities.logarithmicDepthBuffer ) {\\n\\n\\t\\t\\t\\tp_uniforms.setValue( _gl, 'logDepthBufFC',\\n\\t\\t\\t\\t\\t2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( _currentCamera !== camera ) {\\n\\n\\t\\t\\t\\t_currentCamera = camera;\\n\\n\\t\\t\\t\\t// lighting uniforms depend on the camera so enforce an update\\n\\t\\t\\t\\t// now, in case this material supports lights - or later, when\\n\\t\\t\\t\\t// the next material that does gets activated:\\n\\n\\t\\t\\t\\trefreshMaterial = true;\\t\\t// set to true on material change\\n\\t\\t\\t\\trefreshLights = true;\\t\\t// remains set until update done\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\t// load material specific uniforms\\n\\t\\t\\t// (shader material also gets them for the sake of genericity)\\n\\n\\t\\t\\tif ( material.isShaderMaterial ||\\n\\t\\t\\t\\tmaterial.isMeshPhongMaterial ||\\n\\t\\t\\t\\tmaterial.isMeshStandardMaterial ||\\n\\t\\t\\t\\tmaterial.envMap ) {\\n\\n\\t\\t\\t\\tvar uCamPos = p_uniforms.map.cameraPosition;\\n\\n\\t\\t\\t\\tif ( uCamPos !== undefined ) {\\n\\n\\t\\t\\t\\t\\tuCamPos.setValue( _gl,\\n\\t\\t\\t\\t\\t\\t_vector3.setFromMatrixPosition( camera.matrixWorld ) );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( material.isMeshPhongMaterial ||\\n\\t\\t\\t\\tmaterial.isMeshLambertMaterial ||\\n\\t\\t\\t\\tmaterial.isMeshBasicMaterial ||\\n\\t\\t\\t\\tmaterial.isMeshStandardMaterial ||\\n\\t\\t\\t\\tmaterial.isShaderMaterial ||\\n\\t\\t\\t\\tmaterial.skinning ) {\\n\\n\\t\\t\\t\\tp_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\t// skinning uniforms must be set even if material didn't change\\n\\t\\t// auto-setting of texture unit for bone texture must go before other textures\\n\\t\\t// not sure why, but otherwise weird things happen\\n\\n\\t\\tif ( material.skinning ) {\\n\\n\\t\\t\\tp_uniforms.setOptional( _gl, object, 'bindMatrix' );\\n\\t\\t\\tp_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );\\n\\n\\t\\t\\tvar skeleton = object.skeleton;\\n\\n\\t\\t\\tif ( skeleton ) {\\n\\n\\t\\t\\t\\tvar bones = skeleton.bones;\\n\\n\\t\\t\\t\\tif ( capabilities.floatVertexTextures ) {\\n\\n\\t\\t\\t\\t\\tif ( skeleton.boneTexture === undefined ) {\\n\\n\\t\\t\\t\\t\\t\\t// layout (1 matrix = 4 pixels)\\n\\t\\t\\t\\t\\t\\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\\n\\t\\t\\t\\t\\t\\t//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\\n\\t\\t\\t\\t\\t\\t//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\\n\\t\\t\\t\\t\\t\\t//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\\n\\t\\t\\t\\t\\t\\t//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\\n\\n\\n\\t\\t\\t\\t\\t\\tvar size = Math.sqrt( bones.length * 4 ); // 4 pixels needed for 1 matrix\\n\\t\\t\\t\\t\\t\\tsize = _Math.ceilPowerOfTwo( size );\\n\\t\\t\\t\\t\\t\\tsize = Math.max( size, 4 );\\n\\n\\t\\t\\t\\t\\t\\tvar boneMatrices = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel\\n\\t\\t\\t\\t\\t\\tboneMatrices.set( skeleton.boneMatrices ); // copy current values\\n\\n\\t\\t\\t\\t\\t\\tvar boneTexture = new DataTexture( boneMatrices, size, size, RGBAFormat, FloatType );\\n\\t\\t\\t\\t\\t\\tboneTexture.needsUpdate = true;\\n\\n\\t\\t\\t\\t\\t\\tskeleton.boneMatrices = boneMatrices;\\n\\t\\t\\t\\t\\t\\tskeleton.boneTexture = boneTexture;\\n\\t\\t\\t\\t\\t\\tskeleton.boneTextureSize = size;\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tp_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture );\\n\\t\\t\\t\\t\\tp_uniforms.setValue( _gl, 'boneTextureSize', skeleton.boneTextureSize );\\n\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\tp_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tif ( refreshMaterial ) {\\n\\n\\t\\t\\tp_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );\\n\\t\\t\\tp_uniforms.setValue( _gl, 'toneMappingWhitePoint', _this.toneMappingWhitePoint );\\n\\n\\t\\t\\tif ( material.lights ) {\\n\\n\\t\\t\\t\\t// the current material requires lighting info\\n\\n\\t\\t\\t\\t// note: all lighting uniforms are always set correctly\\n\\t\\t\\t\\t// they simply reference the renderer's state for their\\n\\t\\t\\t\\t// values\\n\\t\\t\\t\\t//\\n\\t\\t\\t\\t// use the current material's .needsUpdate flags to set\\n\\t\\t\\t\\t// the GL state when required\\n\\n\\t\\t\\t\\tmarkUniformsLightsNeedsUpdate( m_uniforms, refreshLights );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\t// refresh uniforms common to several materials\\n\\n\\t\\t\\tif ( fog && material.fog ) {\\n\\n\\t\\t\\t\\trefreshUniformsFog( m_uniforms, fog );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( material.isMeshBasicMaterial ) {\\n\\n\\t\\t\\t\\trefreshUniformsCommon( m_uniforms, material );\\n\\n\\t\\t\\t} else if ( material.isMeshLambertMaterial ) {\\n\\n\\t\\t\\t\\trefreshUniformsCommon( m_uniforms, material );\\n\\t\\t\\t\\trefreshUniformsLambert( m_uniforms, material );\\n\\n\\t\\t\\t} else if ( material.isMeshPhongMaterial ) {\\n\\n\\t\\t\\t\\trefreshUniformsCommon( m_uniforms, material );\\n\\n\\t\\t\\t\\tif ( material.isMeshToonMaterial ) {\\n\\n\\t\\t\\t\\t\\trefreshUniformsToon( m_uniforms, material );\\n\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\trefreshUniformsPhong( m_uniforms, material );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t} else if ( material.isMeshStandardMaterial ) {\\n\\n\\t\\t\\t\\trefreshUniformsCommon( m_uniforms, material );\\n\\n\\t\\t\\t\\tif ( material.isMeshPhysicalMaterial ) {\\n\\n\\t\\t\\t\\t\\trefreshUniformsPhysical( m_uniforms, material );\\n\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\trefreshUniformsStandard( m_uniforms, material );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t} else if ( material.isMeshMatcapMaterial ) {\\n\\n\\t\\t\\t\\trefreshUniformsCommon( m_uniforms, material );\\n\\n\\t\\t\\t\\trefreshUniformsMatcap( m_uniforms, material );\\n\\n\\t\\t\\t} else if ( material.isMeshDepthMaterial ) {\\n\\n\\t\\t\\t\\trefreshUniformsCommon( m_uniforms, material );\\n\\t\\t\\t\\trefreshUniformsDepth( m_uniforms, material );\\n\\n\\t\\t\\t} else if ( material.isMeshDistanceMaterial ) {\\n\\n\\t\\t\\t\\trefreshUniformsCommon( m_uniforms, material );\\n\\t\\t\\t\\trefreshUniformsDistance( m_uniforms, material );\\n\\n\\t\\t\\t} else if ( material.isMeshNormalMaterial ) {\\n\\n\\t\\t\\t\\trefreshUniformsCommon( m_uniforms, material );\\n\\t\\t\\t\\trefreshUniformsNormal( m_uniforms, material );\\n\\n\\t\\t\\t} else if ( material.isLineBasicMaterial ) {\\n\\n\\t\\t\\t\\trefreshUniformsLine( m_uniforms, material );\\n\\n\\t\\t\\t\\tif ( material.isLineDashedMaterial ) {\\n\\n\\t\\t\\t\\t\\trefreshUniformsDash( m_uniforms, material );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t} else if ( material.isPointsMaterial ) {\\n\\n\\t\\t\\t\\trefreshUniformsPoints( m_uniforms, material );\\n\\n\\t\\t\\t} else if ( material.isSpriteMaterial ) {\\n\\n\\t\\t\\t\\trefreshUniformsSprites( m_uniforms, material );\\n\\n\\t\\t\\t} else if ( material.isShadowMaterial ) {\\n\\n\\t\\t\\t\\tm_uniforms.color.value = material.color;\\n\\t\\t\\t\\tm_uniforms.opacity.value = material.opacity;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\t// RectAreaLight Texture\\n\\t\\t\\t// TODO (mrdoob): Find a nicer implementation\\n\\n\\t\\t\\tif ( m_uniforms.ltc_1 !== undefined ) m_uniforms.ltc_1.value = UniformsLib.LTC_1;\\n\\t\\t\\tif ( m_uniforms.ltc_2 !== undefined ) m_uniforms.ltc_2.value = UniformsLib.LTC_2;\\n\\n\\t\\t\\tWebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, _this );\\n\\n\\t\\t}\\n\\n\\t\\tif ( material.isShaderMaterial && material.uniformsNeedUpdate === true ) {\\n\\n\\t\\t\\tWebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, _this );\\n\\t\\t\\tmaterial.uniformsNeedUpdate = false;\\n\\n\\t\\t}\\n\\n\\t\\tif ( material.isSpriteMaterial ) {\\n\\n\\t\\t\\tp_uniforms.setValue( _gl, 'center', object.center );\\n\\n\\t\\t}\\n\\n\\t\\t// common matrices\\n\\n\\t\\tp_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );\\n\\t\\tp_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );\\n\\t\\tp_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );\\n\\n\\t\\treturn program;\\n\\n\\t}\\n\\n\\t// Uniforms (refresh uniforms objects)\\n\\n\\tfunction refreshUniformsCommon( uniforms, material ) {\\n\\n\\t\\tuniforms.opacity.value = material.opacity;\\n\\n\\t\\tif ( material.color ) {\\n\\n\\t\\t\\tuniforms.diffuse.value = material.color;\\n\\n\\t\\t}\\n\\n\\t\\tif ( material.emissive ) {\\n\\n\\t\\t\\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\\n\\n\\t\\t}\\n\\n\\t\\tif ( material.map ) {\\n\\n\\t\\t\\tuniforms.map.value = material.map;\\n\\n\\t\\t}\\n\\n\\t\\tif ( material.alphaMap ) {\\n\\n\\t\\t\\tuniforms.alphaMap.value = material.alphaMap;\\n\\n\\t\\t}\\n\\n\\t\\tif ( material.specularMap ) {\\n\\n\\t\\t\\tuniforms.specularMap.value = material.specularMap;\\n\\n\\t\\t}\\n\\n\\t\\tif ( material.envMap ) {\\n\\n\\t\\t\\tuniforms.envMap.value = material.envMap;\\n\\n\\t\\t\\t// don't flip CubeTexture envMaps, flip everything else:\\n\\t\\t\\t//  WebGLRenderTargetCube will be flipped for backwards compatibility\\n\\t\\t\\t//  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture\\n\\t\\t\\t// this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future\\n\\t\\t\\tuniforms.flipEnvMap.value = material.envMap.isCubeTexture ? - 1 : 1;\\n\\n\\t\\t\\tuniforms.reflectivity.value = material.reflectivity;\\n\\t\\t\\tuniforms.refractionRatio.value = material.refractionRatio;\\n\\n\\t\\t\\tuniforms.maxMipLevel.value = properties.get( material.envMap ).__maxMipLevel;\\n\\n\\t\\t}\\n\\n\\t\\tif ( material.lightMap ) {\\n\\n\\t\\t\\tuniforms.lightMap.value = material.lightMap;\\n\\t\\t\\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\\n\\n\\t\\t}\\n\\n\\t\\tif ( material.aoMap ) {\\n\\n\\t\\t\\tuniforms.aoMap.value = material.aoMap;\\n\\t\\t\\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\\n\\n\\t\\t}\\n\\n\\t\\t// uv repeat and offset setting priorities\\n\\t\\t// 1. color map\\n\\t\\t// 2. specular map\\n\\t\\t// 3. normal map\\n\\t\\t// 4. bump map\\n\\t\\t// 5. alpha map\\n\\t\\t// 6. emissive map\\n\\n\\t\\tvar uvScaleMap;\\n\\n\\t\\tif ( material.map ) {\\n\\n\\t\\t\\tuvScaleMap = material.map;\\n\\n\\t\\t} else if ( material.specularMap ) {\\n\\n\\t\\t\\tuvScaleMap = material.specularMap;\\n\\n\\t\\t} else if ( material.displacementMap ) {\\n\\n\\t\\t\\tuvScaleMap = material.displacementMap;\\n\\n\\t\\t} else if ( material.normalMap ) {\\n\\n\\t\\t\\tuvScaleMap = material.normalMap;\\n\\n\\t\\t} else if ( material.bumpMap ) {\\n\\n\\t\\t\\tuvScaleMap = material.bumpMap;\\n\\n\\t\\t} else if ( material.roughnessMap ) {\\n\\n\\t\\t\\tuvScaleMap = material.roughnessMap;\\n\\n\\t\\t} else if ( material.metalnessMap ) {\\n\\n\\t\\t\\tuvScaleMap = material.metalnessMap;\\n\\n\\t\\t} else if ( material.alphaMap ) {\\n\\n\\t\\t\\tuvScaleMap = material.alphaMap;\\n\\n\\t\\t} else if ( material.emissiveMap ) {\\n\\n\\t\\t\\tuvScaleMap = material.emissiveMap;\\n\\n\\t\\t}\\n\\n\\t\\tif ( uvScaleMap !== undefined ) {\\n\\n\\t\\t\\t// backwards compatibility\\n\\t\\t\\tif ( uvScaleMap.isWebGLRenderTarget ) {\\n\\n\\t\\t\\t\\tuvScaleMap = uvScaleMap.texture;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( uvScaleMap.matrixAutoUpdate === true ) {\\n\\n\\t\\t\\t\\tuvScaleMap.updateMatrix();\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tfunction refreshUniformsLine( uniforms, material ) {\\n\\n\\t\\tuniforms.diffuse.value = material.color;\\n\\t\\tuniforms.opacity.value = material.opacity;\\n\\n\\t}\\n\\n\\tfunction refreshUniformsDash( uniforms, material ) {\\n\\n\\t\\tuniforms.dashSize.value = material.dashSize;\\n\\t\\tuniforms.totalSize.value = material.dashSize + material.gapSize;\\n\\t\\tuniforms.scale.value = material.scale;\\n\\n\\t}\\n\\n\\tfunction refreshUniformsPoints( uniforms, material ) {\\n\\n\\t\\tuniforms.diffuse.value = material.color;\\n\\t\\tuniforms.opacity.value = material.opacity;\\n\\t\\tuniforms.size.value = material.size * _pixelRatio;\\n\\t\\tuniforms.scale.value = _height * 0.5;\\n\\n\\t\\tuniforms.map.value = material.map;\\n\\n\\t\\tif ( material.map !== null ) {\\n\\n\\t\\t\\tif ( material.map.matrixAutoUpdate === true ) {\\n\\n\\t\\t\\t\\tmaterial.map.updateMatrix();\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tuniforms.uvTransform.value.copy( material.map.matrix );\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tfunction refreshUniformsSprites( uniforms, material ) {\\n\\n\\t\\tuniforms.diffuse.value = material.color;\\n\\t\\tuniforms.opacity.value = material.opacity;\\n\\t\\tuniforms.rotation.value = material.rotation;\\n\\t\\tuniforms.map.value = material.map;\\n\\n\\t\\tif ( material.map !== null ) {\\n\\n\\t\\t\\tif ( material.map.matrixAutoUpdate === true ) {\\n\\n\\t\\t\\t\\tmaterial.map.updateMatrix();\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tuniforms.uvTransform.value.copy( material.map.matrix );\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tfunction refreshUniformsFog( uniforms, fog ) {\\n\\n\\t\\tuniforms.fogColor.value = fog.color;\\n\\n\\t\\tif ( fog.isFog ) {\\n\\n\\t\\t\\tuniforms.fogNear.value = fog.near;\\n\\t\\t\\tuniforms.fogFar.value = fog.far;\\n\\n\\t\\t} else if ( fog.isFogExp2 ) {\\n\\n\\t\\t\\tuniforms.fogDensity.value = fog.density;\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tfunction refreshUniformsLambert( uniforms, material ) {\\n\\n\\t\\tif ( material.emissiveMap ) {\\n\\n\\t\\t\\tuniforms.emissiveMap.value = material.emissiveMap;\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tfunction refreshUniformsPhong( uniforms, material ) {\\n\\n\\t\\tuniforms.specular.value = material.specular;\\n\\t\\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\\n\\n\\t\\tif ( material.emissiveMap ) {\\n\\n\\t\\t\\tuniforms.emissiveMap.value = material.emissiveMap;\\n\\n\\t\\t}\\n\\n\\t\\tif ( material.bumpMap ) {\\n\\n\\t\\t\\tuniforms.bumpMap.value = material.bumpMap;\\n\\t\\t\\tuniforms.bumpScale.value = material.bumpScale;\\n\\t\\t\\tif ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;\\n\\n\\t\\t}\\n\\n\\t\\tif ( material.normalMap ) {\\n\\n\\t\\t\\tuniforms.normalMap.value = material.normalMap;\\n\\t\\t\\tuniforms.normalScale.value.copy( material.normalScale );\\n\\t\\t\\tif ( material.side === BackSide ) uniforms.normalScale.value.negate();\\n\\n\\t\\t}\\n\\n\\t\\tif ( material.displacementMap ) {\\n\\n\\t\\t\\tuniforms.displacementMap.value = material.displacementMap;\\n\\t\\t\\tuniforms.displacementScale.value = material.displacementScale;\\n\\t\\t\\tuniforms.displacementBias.value = material.displacementBias;\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tfunction refreshUniformsToon( uniforms, material ) {\\n\\n\\t\\trefreshUniformsPhong( uniforms, material );\\n\\n\\t\\tif ( material.gradientMap ) {\\n\\n\\t\\t\\tuniforms.gradientMap.value = material.gradientMap;\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tfunction refreshUniformsStandard( uniforms, material ) {\\n\\n\\t\\tuniforms.roughness.value = material.roughness;\\n\\t\\tuniforms.metalness.value = material.metalness;\\n\\n\\t\\tif ( material.roughnessMap ) {\\n\\n\\t\\t\\tuniforms.roughnessMap.value = material.roughnessMap;\\n\\n\\t\\t}\\n\\n\\t\\tif ( material.metalnessMap ) {\\n\\n\\t\\t\\tuniforms.metalnessMap.value = material.metalnessMap;\\n\\n\\t\\t}\\n\\n\\t\\tif ( material.emissiveMap ) {\\n\\n\\t\\t\\tuniforms.emissiveMap.value = material.emissiveMap;\\n\\n\\t\\t}\\n\\n\\t\\tif ( material.bumpMap ) {\\n\\n\\t\\t\\tuniforms.bumpMap.value = material.bumpMap;\\n\\t\\t\\tuniforms.bumpScale.value = material.bumpScale;\\n\\t\\t\\tif ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;\\n\\n\\t\\t}\\n\\n\\t\\tif ( material.normalMap ) {\\n\\n\\t\\t\\tuniforms.normalMap.value = material.normalMap;\\n\\t\\t\\tuniforms.normalScale.value.copy( material.normalScale );\\n\\t\\t\\tif ( material.side === BackSide ) uniforms.normalScale.value.negate();\\n\\n\\t\\t}\\n\\n\\t\\tif ( material.displacementMap ) {\\n\\n\\t\\t\\tuniforms.displacementMap.value = material.displacementMap;\\n\\t\\t\\tuniforms.displacementScale.value = material.displacementScale;\\n\\t\\t\\tuniforms.displacementBias.value = material.displacementBias;\\n\\n\\t\\t}\\n\\n\\t\\tif ( material.envMap ) {\\n\\n\\t\\t\\t//uniforms.envMap.value = material.envMap; // part of uniforms common\\n\\t\\t\\tuniforms.envMapIntensity.value = material.envMapIntensity;\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tfunction refreshUniformsPhysical( uniforms, material ) {\\n\\n\\t\\trefreshUniformsStandard( uniforms, material );\\n\\n\\t\\tuniforms.reflectivity.value = material.reflectivity; // also part of uniforms common\\n\\n\\t\\tuniforms.clearCoat.value = material.clearCoat;\\n\\t\\tuniforms.clearCoatRoughness.value = material.clearCoatRoughness;\\n\\n\\t}\\n\\n\\tfunction refreshUniformsMatcap( uniforms, material ) {\\n\\n\\t\\tif ( material.matcap ) {\\n\\n\\t\\t\\tuniforms.matcap.value = material.matcap;\\n\\n\\t\\t}\\n\\n\\t\\tif ( material.bumpMap ) {\\n\\n\\t\\t\\tuniforms.bumpMap.value = material.bumpMap;\\n\\t\\t\\tuniforms.bumpScale.value = material.bumpScale;\\n\\t\\t\\tif ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;\\n\\n\\t\\t}\\n\\n\\t\\tif ( material.normalMap ) {\\n\\n\\t\\t\\tuniforms.normalMap.value = material.normalMap;\\n\\t\\t\\tuniforms.normalScale.value.copy( material.normalScale );\\n\\t\\t\\tif ( material.side === BackSide ) uniforms.normalScale.value.negate();\\n\\n\\t\\t}\\n\\n\\t\\tif ( material.displacementMap ) {\\n\\n\\t\\t\\tuniforms.displacementMap.value = material.displacementMap;\\n\\t\\t\\tuniforms.displacementScale.value = material.displacementScale;\\n\\t\\t\\tuniforms.displacementBias.value = material.displacementBias;\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tfunction refreshUniformsDepth( uniforms, material ) {\\n\\n\\t\\tif ( material.displacementMap ) {\\n\\n\\t\\t\\tuniforms.displacementMap.value = material.displacementMap;\\n\\t\\t\\tuniforms.displacementScale.value = material.displacementScale;\\n\\t\\t\\tuniforms.displacementBias.value = material.displacementBias;\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tfunction refreshUniformsDistance( uniforms, material ) {\\n\\n\\t\\tif ( material.displacementMap ) {\\n\\n\\t\\t\\tuniforms.displacementMap.value = material.displacementMap;\\n\\t\\t\\tuniforms.displacementScale.value = material.displacementScale;\\n\\t\\t\\tuniforms.displacementBias.value = material.displacementBias;\\n\\n\\t\\t}\\n\\n\\t\\tuniforms.referencePosition.value.copy( material.referencePosition );\\n\\t\\tuniforms.nearDistance.value = material.nearDistance;\\n\\t\\tuniforms.farDistance.value = material.farDistance;\\n\\n\\t}\\n\\n\\tfunction refreshUniformsNormal( uniforms, material ) {\\n\\n\\t\\tif ( material.bumpMap ) {\\n\\n\\t\\t\\tuniforms.bumpMap.value = material.bumpMap;\\n\\t\\t\\tuniforms.bumpScale.value = material.bumpScale;\\n\\t\\t\\tif ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;\\n\\n\\t\\t}\\n\\n\\t\\tif ( material.normalMap ) {\\n\\n\\t\\t\\tuniforms.normalMap.value = material.normalMap;\\n\\t\\t\\tuniforms.normalScale.value.copy( material.normalScale );\\n\\t\\t\\tif ( material.side === BackSide ) uniforms.normalScale.value.negate();\\n\\n\\t\\t}\\n\\n\\t\\tif ( material.displacementMap ) {\\n\\n\\t\\t\\tuniforms.displacementMap.value = material.displacementMap;\\n\\t\\t\\tuniforms.displacementScale.value = material.displacementScale;\\n\\t\\t\\tuniforms.displacementBias.value = material.displacementBias;\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\t// If uniforms are marked as clean, they don't need to be loaded to the GPU.\\n\\n\\tfunction markUniformsLightsNeedsUpdate( uniforms, value ) {\\n\\n\\t\\tuniforms.ambientLightColor.needsUpdate = value;\\n\\n\\t\\tuniforms.directionalLights.needsUpdate = value;\\n\\t\\tuniforms.pointLights.needsUpdate = value;\\n\\t\\tuniforms.spotLights.needsUpdate = value;\\n\\t\\tuniforms.rectAreaLights.needsUpdate = value;\\n\\t\\tuniforms.hemisphereLights.needsUpdate = value;\\n\\n\\t}\\n\\n\\t// Textures\\n\\n\\tfunction allocTextureUnit() {\\n\\n\\t\\tvar textureUnit = _usedTextureUnits;\\n\\n\\t\\tif ( textureUnit >= capabilities.maxTextures ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.WebGLRenderer: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures );\\n\\n\\t\\t}\\n\\n\\t\\t_usedTextureUnits += 1;\\n\\n\\t\\treturn textureUnit;\\n\\n\\t}\\n\\n\\tthis.allocTextureUnit = allocTextureUnit;\\n\\n\\t// this.setTexture2D = setTexture2D;\\n\\tthis.setTexture2D = ( function () {\\n\\n\\t\\tvar warned = false;\\n\\n\\t\\t// backwards compatibility: peel texture.texture\\n\\t\\treturn function setTexture2D( texture, slot ) {\\n\\n\\t\\t\\tif ( texture && texture.isWebGLRenderTarget ) {\\n\\n\\t\\t\\t\\tif ( ! warned ) {\\n\\n\\t\\t\\t\\t\\tconsole.warn( \\\"THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead.\\\" );\\n\\t\\t\\t\\t\\twarned = true;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\ttexture = texture.texture;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\ttextures.setTexture2D( texture, slot );\\n\\n\\t\\t};\\n\\n\\t}() );\\n\\n\\tthis.setTexture3D = ( function () {\\n\\n\\t\\t// backwards compatibility: peel texture.texture\\n\\t\\treturn function setTexture3D( texture, slot ) {\\n\\n\\t\\t\\ttextures.setTexture3D( texture, slot );\\n\\n\\t\\t};\\n\\n\\t}() );\\n\\n\\tthis.setTexture = ( function () {\\n\\n\\t\\tvar warned = false;\\n\\n\\t\\treturn function setTexture( texture, slot ) {\\n\\n\\t\\t\\tif ( ! warned ) {\\n\\n\\t\\t\\t\\tconsole.warn( \\\"THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead.\\\" );\\n\\t\\t\\t\\twarned = true;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\ttextures.setTexture2D( texture, slot );\\n\\n\\t\\t};\\n\\n\\t}() );\\n\\n\\tthis.setTextureCube = ( function () {\\n\\n\\t\\tvar warned = false;\\n\\n\\t\\treturn function setTextureCube( texture, slot ) {\\n\\n\\t\\t\\t// backwards compatibility: peel texture.texture\\n\\t\\t\\tif ( texture && texture.isWebGLRenderTargetCube ) {\\n\\n\\t\\t\\t\\tif ( ! warned ) {\\n\\n\\t\\t\\t\\t\\tconsole.warn( \\\"THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead.\\\" );\\n\\t\\t\\t\\t\\twarned = true;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\ttexture = texture.texture;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\t// currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture\\n\\t\\t\\t// TODO: unify these code paths\\n\\t\\t\\tif ( ( texture && texture.isCubeTexture ) ||\\n\\t\\t\\t\\t( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {\\n\\n\\t\\t\\t\\t// CompressedTexture can have Array in image :/\\n\\n\\t\\t\\t\\t// this function alone should take care of cube textures\\n\\t\\t\\t\\ttextures.setTextureCube( texture, slot );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t// assumed: texture property of THREE.WebGLRenderTargetCube\\n\\n\\t\\t\\t\\ttextures.setTextureCubeDynamic( texture, slot );\\n\\n\\t\\t\\t}\\n\\n\\t\\t};\\n\\n\\t}() );\\n\\n\\t//\\n\\n\\tthis.setFramebuffer = function ( value ) {\\n\\n\\t\\t_framebuffer = value;\\n\\n\\t};\\n\\n\\tthis.getRenderTarget = function () {\\n\\n\\t\\treturn _currentRenderTarget;\\n\\n\\t};\\n\\n\\tthis.setRenderTarget = function ( renderTarget ) {\\n\\n\\t\\t_currentRenderTarget = renderTarget;\\n\\n\\t\\tif ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {\\n\\n\\t\\t\\ttextures.setupRenderTarget( renderTarget );\\n\\n\\t\\t}\\n\\n\\t\\tvar framebuffer = _framebuffer;\\n\\t\\tvar isCube = false;\\n\\n\\t\\tif ( renderTarget ) {\\n\\n\\t\\t\\tvar __webglFramebuffer = properties.get( renderTarget ).__webglFramebuffer;\\n\\n\\t\\t\\tif ( renderTarget.isWebGLRenderTargetCube ) {\\n\\n\\t\\t\\t\\tframebuffer = __webglFramebuffer[ renderTarget.activeCubeFace ];\\n\\t\\t\\t\\tisCube = true;\\n\\n\\t\\t\\t} else if ( renderTarget.isWebGLMultisampleRenderTarget ) {\\n\\n\\t\\t\\t\\tframebuffer = properties.get( renderTarget ).__webglMultisampledFramebuffer;\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tframebuffer = __webglFramebuffer;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\t_currentViewport.copy( renderTarget.viewport );\\n\\t\\t\\t_currentScissor.copy( renderTarget.scissor );\\n\\t\\t\\t_currentScissorTest = renderTarget.scissorTest;\\n\\n\\t\\t} else {\\n\\n\\t\\t\\t_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio );\\n\\t\\t\\t_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio );\\n\\t\\t\\t_currentScissorTest = _scissorTest;\\n\\n\\t\\t}\\n\\n\\t\\tif ( _currentFramebuffer !== framebuffer ) {\\n\\n\\t\\t\\t_gl.bindFramebuffer( 36160, framebuffer );\\n\\t\\t\\t_currentFramebuffer = framebuffer;\\n\\n\\t\\t}\\n\\n\\t\\tstate.viewport( _currentViewport );\\n\\t\\tstate.scissor( _currentScissor );\\n\\t\\tstate.setScissorTest( _currentScissorTest );\\n\\n\\t\\tif ( isCube ) {\\n\\n\\t\\t\\tvar textureProperties = properties.get( renderTarget.texture );\\n\\t\\t\\t_gl.framebufferTexture2D( 36160, 36064, 34069 + renderTarget.activeCubeFace, textureProperties.__webglTexture, renderTarget.activeMipMapLevel );\\n\\n\\t\\t}\\n\\n\\t};\\n\\n\\tthis.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer ) {\\n\\n\\t\\tif ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {\\n\\n\\t\\t\\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\\n\\t\\t\\treturn;\\n\\n\\t\\t}\\n\\n\\t\\tvar framebuffer = properties.get( renderTarget ).__webglFramebuffer;\\n\\n\\t\\tif ( framebuffer ) {\\n\\n\\t\\t\\tvar restore = false;\\n\\n\\t\\t\\tif ( framebuffer !== _currentFramebuffer ) {\\n\\n\\t\\t\\t\\t_gl.bindFramebuffer( 36160, framebuffer );\\n\\n\\t\\t\\t\\trestore = true;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\ttry {\\n\\n\\t\\t\\t\\tvar texture = renderTarget.texture;\\n\\t\\t\\t\\tvar textureFormat = texture.format;\\n\\t\\t\\t\\tvar textureType = texture.type;\\n\\n\\t\\t\\t\\tif ( textureFormat !== RGBAFormat && utils.convert( textureFormat ) !== _gl.getParameter( 35739 ) ) {\\n\\n\\t\\t\\t\\t\\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );\\n\\t\\t\\t\\t\\treturn;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif ( textureType !== UnsignedByteType && utils.convert( textureType ) !== _gl.getParameter( 35738 ) && // IE11, Edge and Chrome Mac < 52 (#9513)\\n\\t\\t\\t\\t\\t! ( textureType === FloatType && ( capabilities.isWebGL2 || extensions.get( 'OES_texture_float' ) || extensions.get( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox\\n\\t\\t\\t\\t\\t! ( textureType === HalfFloatType && ( capabilities.isWebGL2 ? extensions.get( 'EXT_color_buffer_float' ) : extensions.get( 'EXT_color_buffer_half_float' ) ) ) ) {\\n\\n\\t\\t\\t\\t\\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );\\n\\t\\t\\t\\t\\treturn;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif ( _gl.checkFramebufferStatus( 36160 ) === 36053 ) {\\n\\n\\t\\t\\t\\t\\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\\n\\n\\t\\t\\t\\t\\tif ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {\\n\\n\\t\\t\\t\\t\\t\\t_gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), buffer );\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t} finally {\\n\\n\\t\\t\\t\\tif ( restore ) {\\n\\n\\t\\t\\t\\t\\t_gl.bindFramebuffer( 36160, _currentFramebuffer );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t};\\n\\n\\tthis.copyFramebufferToTexture = function ( position, texture, level ) {\\n\\n\\t\\tvar width = texture.image.width;\\n\\t\\tvar height = texture.image.height;\\n\\t\\tvar glFormat = utils.convert( texture.format );\\n\\n\\t\\tthis.setTexture2D( texture, 0 );\\n\\n\\t\\t_gl.copyTexImage2D( 3553, level || 0, glFormat, position.x, position.y, width, height, 0 );\\n\\n\\t};\\n\\n\\tthis.copyTextureToTexture = function ( position, srcTexture, dstTexture, level ) {\\n\\n\\t\\tvar width = srcTexture.image.width;\\n\\t\\tvar height = srcTexture.image.height;\\n\\t\\tvar glFormat = utils.convert( dstTexture.format );\\n\\t\\tvar glType = utils.convert( dstTexture.type );\\n\\n\\t\\tthis.setTexture2D( dstTexture, 0 );\\n\\n\\t\\tif ( srcTexture.isDataTexture ) {\\n\\n\\t\\t\\t_gl.texSubImage2D( 3553, level || 0, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data );\\n\\n\\t\\t} else {\\n\\n\\t\\t\\t_gl.texSubImage2D( 3553, level || 0, position.x, position.y, glFormat, glType, srcTexture.image );\\n\\n\\t\\t}\\n\\n\\t};\\n\\n}\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n * @author alteredq / http://alteredqualia.com/\\n */\\n\\nfunction FogExp2( color, density ) {\\n\\n\\tthis.name = '';\\n\\n\\tthis.color = new Color( color );\\n\\tthis.density = ( density !== undefined ) ? density : 0.00025;\\n\\n}\\n\\nFogExp2.prototype.isFogExp2 = true;\\n\\nFogExp2.prototype.clone = function () {\\n\\n\\treturn new FogExp2( this.color, this.density );\\n\\n};\\n\\nFogExp2.prototype.toJSON = function ( /* meta */ ) {\\n\\n\\treturn {\\n\\t\\ttype: 'FogExp2',\\n\\t\\tcolor: this.color.getHex(),\\n\\t\\tdensity: this.density\\n\\t};\\n\\n};\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n * @author alteredq / http://alteredqualia.com/\\n */\\n\\nfunction Fog( color, near, far ) {\\n\\n\\tthis.name = '';\\n\\n\\tthis.color = new Color( color );\\n\\n\\tthis.near = ( near !== undefined ) ? near : 1;\\n\\tthis.far = ( far !== undefined ) ? far : 1000;\\n\\n}\\n\\nFog.prototype.isFog = true;\\n\\nFog.prototype.clone = function () {\\n\\n\\treturn new Fog( this.color, this.near, this.far );\\n\\n};\\n\\nFog.prototype.toJSON = function ( /* meta */ ) {\\n\\n\\treturn {\\n\\t\\ttype: 'Fog',\\n\\t\\tcolor: this.color.getHex(),\\n\\t\\tnear: this.near,\\n\\t\\tfar: this.far\\n\\t};\\n\\n};\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\nfunction Scene() {\\n\\n\\tObject3D.call( this );\\n\\n\\tthis.type = 'Scene';\\n\\n\\tthis.background = null;\\n\\tthis.fog = null;\\n\\tthis.overrideMaterial = null;\\n\\n\\tthis.autoUpdate = true; // checked by the renderer\\n\\n}\\n\\nScene.prototype = Object.assign( Object.create( Object3D.prototype ), {\\n\\n\\tconstructor: Scene,\\n\\n\\tisScene: true,\\n\\n\\tcopy: function ( source, recursive ) {\\n\\n\\t\\tObject3D.prototype.copy.call( this, source, recursive );\\n\\n\\t\\tif ( source.background !== null ) this.background = source.background.clone();\\n\\t\\tif ( source.fog !== null ) this.fog = source.fog.clone();\\n\\t\\tif ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();\\n\\n\\t\\tthis.autoUpdate = source.autoUpdate;\\n\\t\\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\ttoJSON: function ( meta ) {\\n\\n\\t\\tvar data = Object3D.prototype.toJSON.call( this, meta );\\n\\n\\t\\tif ( this.background !== null ) data.object.background = this.background.toJSON( meta );\\n\\t\\tif ( this.fog !== null ) data.object.fog = this.fog.toJSON();\\n\\n\\t\\treturn data;\\n\\n\\t},\\n\\n\\tdispose: function () {\\n\\n\\t\\tthis.dispatchEvent( { type: 'dispose' } );\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author benaadams / https://twitter.com/ben_a_adams\\n */\\n\\nfunction InterleavedBuffer( array, stride ) {\\n\\n\\tthis.array = array;\\n\\tthis.stride = stride;\\n\\tthis.count = array !== undefined ? array.length / stride : 0;\\n\\n\\tthis.dynamic = false;\\n\\tthis.updateRange = { offset: 0, count: - 1 };\\n\\n\\tthis.version = 0;\\n\\n}\\n\\nObject.defineProperty( InterleavedBuffer.prototype, 'needsUpdate', {\\n\\n\\tset: function ( value ) {\\n\\n\\t\\tif ( value === true ) this.version ++;\\n\\n\\t}\\n\\n} );\\n\\nObject.assign( InterleavedBuffer.prototype, {\\n\\n\\tisInterleavedBuffer: true,\\n\\n\\tonUploadCallback: function () {},\\n\\n\\tsetArray: function ( array ) {\\n\\n\\t\\tif ( Array.isArray( array ) ) {\\n\\n\\t\\t\\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\\n\\n\\t\\t}\\n\\n\\t\\tthis.count = array !== undefined ? array.length / this.stride : 0;\\n\\t\\tthis.array = array;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetDynamic: function ( value ) {\\n\\n\\t\\tthis.dynamic = value;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tcopy: function ( source ) {\\n\\n\\t\\tthis.array = new source.array.constructor( source.array );\\n\\t\\tthis.count = source.count;\\n\\t\\tthis.stride = source.stride;\\n\\t\\tthis.dynamic = source.dynamic;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tcopyAt: function ( index1, attribute, index2 ) {\\n\\n\\t\\tindex1 *= this.stride;\\n\\t\\tindex2 *= attribute.stride;\\n\\n\\t\\tfor ( var i = 0, l = this.stride; i < l; i ++ ) {\\n\\n\\t\\t\\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\\n\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tset: function ( value, offset ) {\\n\\n\\t\\tif ( offset === undefined ) offset = 0;\\n\\n\\t\\tthis.array.set( value, offset );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tclone: function () {\\n\\n\\t\\treturn new this.constructor().copy( this );\\n\\n\\t},\\n\\n\\tonUpload: function ( callback ) {\\n\\n\\t\\tthis.onUploadCallback = callback;\\n\\n\\t\\treturn this;\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author benaadams / https://twitter.com/ben_a_adams\\n */\\n\\nfunction InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, normalized ) {\\n\\n\\tthis.data = interleavedBuffer;\\n\\tthis.itemSize = itemSize;\\n\\tthis.offset = offset;\\n\\n\\tthis.normalized = normalized === true;\\n\\n}\\n\\nObject.defineProperties( InterleavedBufferAttribute.prototype, {\\n\\n\\tcount: {\\n\\n\\t\\tget: function () {\\n\\n\\t\\t\\treturn this.data.count;\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\tarray: {\\n\\n\\t\\tget: function () {\\n\\n\\t\\t\\treturn this.data.array;\\n\\n\\t\\t}\\n\\n\\t}\\n\\n} );\\n\\nObject.assign( InterleavedBufferAttribute.prototype, {\\n\\n\\tisInterleavedBufferAttribute: true,\\n\\n\\tsetX: function ( index, x ) {\\n\\n\\t\\tthis.data.array[ index * this.data.stride + this.offset ] = x;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetY: function ( index, y ) {\\n\\n\\t\\tthis.data.array[ index * this.data.stride + this.offset + 1 ] = y;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetZ: function ( index, z ) {\\n\\n\\t\\tthis.data.array[ index * this.data.stride + this.offset + 2 ] = z;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetW: function ( index, w ) {\\n\\n\\t\\tthis.data.array[ index * this.data.stride + this.offset + 3 ] = w;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tgetX: function ( index ) {\\n\\n\\t\\treturn this.data.array[ index * this.data.stride + this.offset ];\\n\\n\\t},\\n\\n\\tgetY: function ( index ) {\\n\\n\\t\\treturn this.data.array[ index * this.data.stride + this.offset + 1 ];\\n\\n\\t},\\n\\n\\tgetZ: function ( index ) {\\n\\n\\t\\treturn this.data.array[ index * this.data.stride + this.offset + 2 ];\\n\\n\\t},\\n\\n\\tgetW: function ( index ) {\\n\\n\\t\\treturn this.data.array[ index * this.data.stride + this.offset + 3 ];\\n\\n\\t},\\n\\n\\tsetXY: function ( index, x, y ) {\\n\\n\\t\\tindex = index * this.data.stride + this.offset;\\n\\n\\t\\tthis.data.array[ index + 0 ] = x;\\n\\t\\tthis.data.array[ index + 1 ] = y;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetXYZ: function ( index, x, y, z ) {\\n\\n\\t\\tindex = index * this.data.stride + this.offset;\\n\\n\\t\\tthis.data.array[ index + 0 ] = x;\\n\\t\\tthis.data.array[ index + 1 ] = y;\\n\\t\\tthis.data.array[ index + 2 ] = z;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetXYZW: function ( index, x, y, z, w ) {\\n\\n\\t\\tindex = index * this.data.stride + this.offset;\\n\\n\\t\\tthis.data.array[ index + 0 ] = x;\\n\\t\\tthis.data.array[ index + 1 ] = y;\\n\\t\\tthis.data.array[ index + 2 ] = z;\\n\\t\\tthis.data.array[ index + 3 ] = w;\\n\\n\\t\\treturn this;\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author alteredq / http://alteredqualia.com/\\n *\\n * parameters = {\\n *  color: <hex>,\\n *  map: new THREE.Texture( <Image> ),\\n *  rotation: <float>,\\n *  sizeAttenuation: <bool>\\n * }\\n */\\n\\nfunction SpriteMaterial( parameters ) {\\n\\n\\tMaterial.call( this );\\n\\n\\tthis.type = 'SpriteMaterial';\\n\\n\\tthis.color = new Color( 0xffffff );\\n\\tthis.map = null;\\n\\n\\tthis.rotation = 0;\\n\\n\\tthis.sizeAttenuation = true;\\n\\n\\tthis.lights = false;\\n\\tthis.transparent = true;\\n\\n\\tthis.setValues( parameters );\\n\\n}\\n\\nSpriteMaterial.prototype = Object.create( Material.prototype );\\nSpriteMaterial.prototype.constructor = SpriteMaterial;\\nSpriteMaterial.prototype.isSpriteMaterial = true;\\n\\nSpriteMaterial.prototype.copy = function ( source ) {\\n\\n\\tMaterial.prototype.copy.call( this, source );\\n\\n\\tthis.color.copy( source.color );\\n\\tthis.map = source.map;\\n\\n\\tthis.rotation = source.rotation;\\n\\n\\tthis.sizeAttenuation = source.sizeAttenuation;\\n\\n\\treturn this;\\n\\n};\\n\\n/**\\n * @author mikael emtinger / http://gomo.se/\\n * @author alteredq / http://alteredqualia.com/\\n */\\n\\nvar geometry;\\n\\nfunction Sprite( material ) {\\n\\n\\tObject3D.call( this );\\n\\n\\tthis.type = 'Sprite';\\n\\n\\tif ( geometry === undefined ) {\\n\\n\\t\\tgeometry = new BufferGeometry();\\n\\n\\t\\tvar float32Array = new Float32Array( [\\n\\t\\t\\t- 0.5, - 0.5, 0, 0, 0,\\n\\t\\t\\t0.5, - 0.5, 0, 1, 0,\\n\\t\\t\\t0.5, 0.5, 0, 1, 1,\\n\\t\\t\\t- 0.5, 0.5, 0, 0, 1\\n\\t\\t] );\\n\\n\\t\\tvar interleavedBuffer = new InterleavedBuffer( float32Array, 5 );\\n\\n\\t\\tgeometry.setIndex( [ 0, 1, 2,\\t0, 2, 3 ] );\\n\\t\\tgeometry.addAttribute( 'position', new InterleavedBufferAttribute( interleavedBuffer, 3, 0, false ) );\\n\\t\\tgeometry.addAttribute( 'uv', new InterleavedBufferAttribute( interleavedBuffer, 2, 3, false ) );\\n\\n\\t}\\n\\n\\tthis.geometry = geometry;\\n\\tthis.material = ( material !== undefined ) ? material : new SpriteMaterial();\\n\\n\\tthis.center = new Vector2( 0.5, 0.5 );\\n\\n}\\n\\nSprite.prototype = Object.assign( Object.create( Object3D.prototype ), {\\n\\n\\tconstructor: Sprite,\\n\\n\\tisSprite: true,\\n\\n\\traycast: ( function () {\\n\\n\\t\\tvar intersectPoint = new Vector3();\\n\\t\\tvar worldScale = new Vector3();\\n\\t\\tvar mvPosition = new Vector3();\\n\\n\\t\\tvar alignedPosition = new Vector2();\\n\\t\\tvar rotatedPosition = new Vector2();\\n\\t\\tvar viewWorldMatrix = new Matrix4();\\n\\n\\t\\tvar vA = new Vector3();\\n\\t\\tvar vB = new Vector3();\\n\\t\\tvar vC = new Vector3();\\n\\n\\t\\tvar uvA = new Vector2();\\n\\t\\tvar uvB = new Vector2();\\n\\t\\tvar uvC = new Vector2();\\n\\n\\t\\tfunction transformVertex( vertexPosition, mvPosition, center, scale, sin, cos ) {\\n\\n\\t\\t\\t// compute position in camera space\\n\\t\\t\\talignedPosition.subVectors( vertexPosition, center ).addScalar( 0.5 ).multiply( scale );\\n\\n\\t\\t\\t// to check if rotation is not zero\\n\\t\\t\\tif ( sin !== undefined ) {\\n\\n\\t\\t\\t\\trotatedPosition.x = ( cos * alignedPosition.x ) - ( sin * alignedPosition.y );\\n\\t\\t\\t\\trotatedPosition.y = ( sin * alignedPosition.x ) + ( cos * alignedPosition.y );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\trotatedPosition.copy( alignedPosition );\\n\\n\\t\\t\\t}\\n\\n\\n\\t\\t\\tvertexPosition.copy( mvPosition );\\n\\t\\t\\tvertexPosition.x += rotatedPosition.x;\\n\\t\\t\\tvertexPosition.y += rotatedPosition.y;\\n\\n\\t\\t\\t// transform to world space\\n\\t\\t\\tvertexPosition.applyMatrix4( viewWorldMatrix );\\n\\n\\t\\t}\\n\\n\\t\\treturn function raycast( raycaster, intersects ) {\\n\\n\\t\\t\\tworldScale.setFromMatrixScale( this.matrixWorld );\\n\\t\\t\\tviewWorldMatrix.getInverse( this.modelViewMatrix ).premultiply( this.matrixWorld );\\n\\t\\t\\tmvPosition.setFromMatrixPosition( this.modelViewMatrix );\\n\\n\\t\\t\\tvar rotation = this.material.rotation;\\n\\t\\t\\tvar sin, cos;\\n\\t\\t\\tif ( rotation !== 0 ) {\\n\\n\\t\\t\\t\\tcos = Math.cos( rotation );\\n\\t\\t\\t\\tsin = Math.sin( rotation );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tvar center = this.center;\\n\\n\\t\\t\\ttransformVertex( vA.set( - 0.5, - 0.5, 0 ), mvPosition, center, worldScale, sin, cos );\\n\\t\\t\\ttransformVertex( vB.set( 0.5, - 0.5, 0 ), mvPosition, center, worldScale, sin, cos );\\n\\t\\t\\ttransformVertex( vC.set( 0.5, 0.5, 0 ), mvPosition, center, worldScale, sin, cos );\\n\\n\\t\\t\\tuvA.set( 0, 0 );\\n\\t\\t\\tuvB.set( 1, 0 );\\n\\t\\t\\tuvC.set( 1, 1 );\\n\\n\\t\\t\\t// check first triangle\\n\\t\\t\\tvar intersect = raycaster.ray.intersectTriangle( vA, vB, vC, false, intersectPoint );\\n\\n\\t\\t\\tif ( intersect === null ) {\\n\\n\\t\\t\\t\\t// check second triangle\\n\\t\\t\\t\\ttransformVertex( vB.set( - 0.5, 0.5, 0 ), mvPosition, center, worldScale, sin, cos );\\n\\t\\t\\t\\tuvB.set( 0, 1 );\\n\\n\\t\\t\\t\\tintersect = raycaster.ray.intersectTriangle( vA, vC, vB, false, intersectPoint );\\n\\t\\t\\t\\tif ( intersect === null ) {\\n\\n\\t\\t\\t\\t\\treturn;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tvar distance = raycaster.ray.origin.distanceTo( intersectPoint );\\n\\n\\t\\t\\tif ( distance < raycaster.near || distance > raycaster.far ) return;\\n\\n\\t\\t\\tintersects.push( {\\n\\n\\t\\t\\t\\tdistance: distance,\\n\\t\\t\\t\\tpoint: intersectPoint.clone(),\\n\\t\\t\\t\\tuv: Triangle.getUV( intersectPoint, vA, vB, vC, uvA, uvB, uvC, new Vector2() ),\\n\\t\\t\\t\\tface: null,\\n\\t\\t\\t\\tobject: this\\n\\n\\t\\t\\t} );\\n\\n\\t\\t};\\n\\n\\t}() ),\\n\\n\\tclone: function () {\\n\\n\\t\\treturn new this.constructor( this.material ).copy( this );\\n\\n\\t},\\n\\n\\tcopy: function ( source ) {\\n\\n\\t\\tObject3D.prototype.copy.call( this, source );\\n\\n\\t\\tif ( source.center !== undefined ) this.center.copy( source.center );\\n\\n\\t\\treturn this;\\n\\n\\t}\\n\\n\\n} );\\n\\n/**\\n * @author mikael emtinger / http://gomo.se/\\n * @author alteredq / http://alteredqualia.com/\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\nfunction LOD() {\\n\\n\\tObject3D.call( this );\\n\\n\\tthis.type = 'LOD';\\n\\n\\tObject.defineProperties( this, {\\n\\t\\tlevels: {\\n\\t\\t\\tenumerable: true,\\n\\t\\t\\tvalue: []\\n\\t\\t}\\n\\t} );\\n\\n}\\n\\nLOD.prototype = Object.assign( Object.create( Object3D.prototype ), {\\n\\n\\tconstructor: LOD,\\n\\n\\tcopy: function ( source ) {\\n\\n\\t\\tObject3D.prototype.copy.call( this, source, false );\\n\\n\\t\\tvar levels = source.levels;\\n\\n\\t\\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\\n\\n\\t\\t\\tvar level = levels[ i ];\\n\\n\\t\\t\\tthis.addLevel( level.object.clone(), level.distance );\\n\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\taddLevel: function ( object, distance ) {\\n\\n\\t\\tif ( distance === undefined ) distance = 0;\\n\\n\\t\\tdistance = Math.abs( distance );\\n\\n\\t\\tvar levels = this.levels;\\n\\n\\t\\tfor ( var l = 0; l < levels.length; l ++ ) {\\n\\n\\t\\t\\tif ( distance < levels[ l ].distance ) {\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tlevels.splice( l, 0, { distance: distance, object: object } );\\n\\n\\t\\tthis.add( object );\\n\\n\\t},\\n\\n\\tgetObjectForDistance: function ( distance ) {\\n\\n\\t\\tvar levels = this.levels;\\n\\n\\t\\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\\n\\n\\t\\t\\tif ( distance < levels[ i ].distance ) {\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\treturn levels[ i - 1 ].object;\\n\\n\\t},\\n\\n\\traycast: ( function () {\\n\\n\\t\\tvar matrixPosition = new Vector3();\\n\\n\\t\\treturn function raycast( raycaster, intersects ) {\\n\\n\\t\\t\\tmatrixPosition.setFromMatrixPosition( this.matrixWorld );\\n\\n\\t\\t\\tvar distance = raycaster.ray.origin.distanceTo( matrixPosition );\\n\\n\\t\\t\\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\\n\\n\\t\\t};\\n\\n\\t}() ),\\n\\n\\tupdate: function () {\\n\\n\\t\\tvar v1 = new Vector3();\\n\\t\\tvar v2 = new Vector3();\\n\\n\\t\\treturn function update( camera ) {\\n\\n\\t\\t\\tvar levels = this.levels;\\n\\n\\t\\t\\tif ( levels.length > 1 ) {\\n\\n\\t\\t\\t\\tv1.setFromMatrixPosition( camera.matrixWorld );\\n\\t\\t\\t\\tv2.setFromMatrixPosition( this.matrixWorld );\\n\\n\\t\\t\\t\\tvar distance = v1.distanceTo( v2 );\\n\\n\\t\\t\\t\\tlevels[ 0 ].object.visible = true;\\n\\n\\t\\t\\t\\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\\n\\n\\t\\t\\t\\t\\tif ( distance >= levels[ i ].distance ) {\\n\\n\\t\\t\\t\\t\\t\\tlevels[ i - 1 ].object.visible = false;\\n\\t\\t\\t\\t\\t\\tlevels[ i ].object.visible = true;\\n\\n\\t\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tfor ( ; i < l; i ++ ) {\\n\\n\\t\\t\\t\\t\\tlevels[ i ].object.visible = false;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\ttoJSON: function ( meta ) {\\n\\n\\t\\tvar data = Object3D.prototype.toJSON.call( this, meta );\\n\\n\\t\\tdata.object.levels = [];\\n\\n\\t\\tvar levels = this.levels;\\n\\n\\t\\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\\n\\n\\t\\t\\tvar level = levels[ i ];\\n\\n\\t\\t\\tdata.object.levels.push( {\\n\\t\\t\\t\\tobject: level.object.uuid,\\n\\t\\t\\t\\tdistance: level.distance\\n\\t\\t\\t} );\\n\\n\\t\\t}\\n\\n\\t\\treturn data;\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author mikael emtinger / http://gomo.se/\\n * @author alteredq / http://alteredqualia.com/\\n * @author ikerr / http://verold.com\\n */\\n\\nfunction SkinnedMesh( geometry, material ) {\\n\\n\\tif ( geometry && geometry.isGeometry ) {\\n\\n\\t\\tconsole.error( 'THREE.SkinnedMesh no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );\\n\\n\\t}\\n\\n\\tMesh.call( this, geometry, material );\\n\\n\\tthis.type = 'SkinnedMesh';\\n\\n\\tthis.bindMode = 'attached';\\n\\tthis.bindMatrix = new Matrix4();\\n\\tthis.bindMatrixInverse = new Matrix4();\\n\\n}\\n\\nSkinnedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {\\n\\n\\tconstructor: SkinnedMesh,\\n\\n\\tisSkinnedMesh: true,\\n\\n\\tbind: function ( skeleton, bindMatrix ) {\\n\\n\\t\\tthis.skeleton = skeleton;\\n\\n\\t\\tif ( bindMatrix === undefined ) {\\n\\n\\t\\t\\tthis.updateMatrixWorld( true );\\n\\n\\t\\t\\tthis.skeleton.calculateInverses();\\n\\n\\t\\t\\tbindMatrix = this.matrixWorld;\\n\\n\\t\\t}\\n\\n\\t\\tthis.bindMatrix.copy( bindMatrix );\\n\\t\\tthis.bindMatrixInverse.getInverse( bindMatrix );\\n\\n\\t},\\n\\n\\tpose: function () {\\n\\n\\t\\tthis.skeleton.pose();\\n\\n\\t},\\n\\n\\tnormalizeSkinWeights: function () {\\n\\n\\t\\tvar vector = new Vector4();\\n\\n\\t\\tvar skinWeight = this.geometry.attributes.skinWeight;\\n\\n\\t\\tfor ( var i = 0, l = skinWeight.count; i < l; i ++ ) {\\n\\n\\t\\t\\tvector.x = skinWeight.getX( i );\\n\\t\\t\\tvector.y = skinWeight.getY( i );\\n\\t\\t\\tvector.z = skinWeight.getZ( i );\\n\\t\\t\\tvector.w = skinWeight.getW( i );\\n\\n\\t\\t\\tvar scale = 1.0 / vector.manhattanLength();\\n\\n\\t\\t\\tif ( scale !== Infinity ) {\\n\\n\\t\\t\\t\\tvector.multiplyScalar( scale );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tvector.set( 1, 0, 0, 0 ); // do something reasonable\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tskinWeight.setXYZW( i, vector.x, vector.y, vector.z, vector.w );\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\tupdateMatrixWorld: function ( force ) {\\n\\n\\t\\tMesh.prototype.updateMatrixWorld.call( this, force );\\n\\n\\t\\tif ( this.bindMode === 'attached' ) {\\n\\n\\t\\t\\tthis.bindMatrixInverse.getInverse( this.matrixWorld );\\n\\n\\t\\t} else if ( this.bindMode === 'detached' ) {\\n\\n\\t\\t\\tthis.bindMatrixInverse.getInverse( this.bindMatrix );\\n\\n\\t\\t} else {\\n\\n\\t\\t\\tconsole.warn( 'THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode );\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\tclone: function () {\\n\\n\\t\\treturn new this.constructor( this.geometry, this.material ).copy( this );\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author mikael emtinger / http://gomo.se/\\n * @author alteredq / http://alteredqualia.com/\\n * @author michael guerrero / http://realitymeltdown.com\\n * @author ikerr / http://verold.com\\n */\\n\\nfunction Skeleton( bones, boneInverses ) {\\n\\n\\t// copy the bone array\\n\\n\\tbones = bones || [];\\n\\n\\tthis.bones = bones.slice( 0 );\\n\\tthis.boneMatrices = new Float32Array( this.bones.length * 16 );\\n\\n\\t// use the supplied bone inverses or calculate the inverses\\n\\n\\tif ( boneInverses === undefined ) {\\n\\n\\t\\tthis.calculateInverses();\\n\\n\\t} else {\\n\\n\\t\\tif ( this.bones.length === boneInverses.length ) {\\n\\n\\t\\t\\tthis.boneInverses = boneInverses.slice( 0 );\\n\\n\\t\\t} else {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Skeleton boneInverses is the wrong length.' );\\n\\n\\t\\t\\tthis.boneInverses = [];\\n\\n\\t\\t\\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\\n\\n\\t\\t\\t\\tthis.boneInverses.push( new Matrix4() );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t}\\n\\n}\\n\\nObject.assign( Skeleton.prototype, {\\n\\n\\tcalculateInverses: function () {\\n\\n\\t\\tthis.boneInverses = [];\\n\\n\\t\\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\\n\\n\\t\\t\\tvar inverse = new Matrix4();\\n\\n\\t\\t\\tif ( this.bones[ i ] ) {\\n\\n\\t\\t\\t\\tinverse.getInverse( this.bones[ i ].matrixWorld );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tthis.boneInverses.push( inverse );\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\tpose: function () {\\n\\n\\t\\tvar bone, i, il;\\n\\n\\t\\t// recover the bind-time world matrices\\n\\n\\t\\tfor ( i = 0, il = this.bones.length; i < il; i ++ ) {\\n\\n\\t\\t\\tbone = this.bones[ i ];\\n\\n\\t\\t\\tif ( bone ) {\\n\\n\\t\\t\\t\\tbone.matrixWorld.getInverse( this.boneInverses[ i ] );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\t// compute the local matrices, positions, rotations and scales\\n\\n\\t\\tfor ( i = 0, il = this.bones.length; i < il; i ++ ) {\\n\\n\\t\\t\\tbone = this.bones[ i ];\\n\\n\\t\\t\\tif ( bone ) {\\n\\n\\t\\t\\t\\tif ( bone.parent && bone.parent.isBone ) {\\n\\n\\t\\t\\t\\t\\tbone.matrix.getInverse( bone.parent.matrixWorld );\\n\\t\\t\\t\\t\\tbone.matrix.multiply( bone.matrixWorld );\\n\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\tbone.matrix.copy( bone.matrixWorld );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tbone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\tupdate: ( function () {\\n\\n\\t\\tvar offsetMatrix = new Matrix4();\\n\\t\\tvar identityMatrix = new Matrix4();\\n\\n\\t\\treturn function update() {\\n\\n\\t\\t\\tvar bones = this.bones;\\n\\t\\t\\tvar boneInverses = this.boneInverses;\\n\\t\\t\\tvar boneMatrices = this.boneMatrices;\\n\\t\\t\\tvar boneTexture = this.boneTexture;\\n\\n\\t\\t\\t// flatten bone matrices to array\\n\\n\\t\\t\\tfor ( var i = 0, il = bones.length; i < il; i ++ ) {\\n\\n\\t\\t\\t\\t// compute the offset between the current and the original transform\\n\\n\\t\\t\\t\\tvar matrix = bones[ i ] ? bones[ i ].matrixWorld : identityMatrix;\\n\\n\\t\\t\\t\\toffsetMatrix.multiplyMatrices( matrix, boneInverses[ i ] );\\n\\t\\t\\t\\toffsetMatrix.toArray( boneMatrices, i * 16 );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( boneTexture !== undefined ) {\\n\\n\\t\\t\\t\\tboneTexture.needsUpdate = true;\\n\\n\\t\\t\\t}\\n\\n\\t\\t};\\n\\n\\t} )(),\\n\\n\\tclone: function () {\\n\\n\\t\\treturn new Skeleton( this.bones, this.boneInverses );\\n\\n\\t},\\n\\n\\tgetBoneByName: function ( name ) {\\n\\n\\t\\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\\n\\n\\t\\t\\tvar bone = this.bones[ i ];\\n\\n\\t\\t\\tif ( bone.name === name ) {\\n\\n\\t\\t\\t\\treturn bone;\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\treturn undefined;\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author mikael emtinger / http://gomo.se/\\n * @author alteredq / http://alteredqualia.com/\\n * @author ikerr / http://verold.com\\n */\\n\\nfunction Bone() {\\n\\n\\tObject3D.call( this );\\n\\n\\tthis.type = 'Bone';\\n\\n}\\n\\nBone.prototype = Object.assign( Object.create( Object3D.prototype ), {\\n\\n\\tconstructor: Bone,\\n\\n\\tisBone: true\\n\\n} );\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n * @author alteredq / http://alteredqualia.com/\\n *\\n * parameters = {\\n *  color: <hex>,\\n *  opacity: <float>,\\n *\\n *  linewidth: <float>,\\n *  linecap: \\\"round\\\",\\n *  linejoin: \\\"round\\\"\\n * }\\n */\\n\\nfunction LineBasicMaterial( parameters ) {\\n\\n\\tMaterial.call( this );\\n\\n\\tthis.type = 'LineBasicMaterial';\\n\\n\\tthis.color = new Color( 0xffffff );\\n\\n\\tthis.linewidth = 1;\\n\\tthis.linecap = 'round';\\n\\tthis.linejoin = 'round';\\n\\n\\tthis.lights = false;\\n\\n\\tthis.setValues( parameters );\\n\\n}\\n\\nLineBasicMaterial.prototype = Object.create( Material.prototype );\\nLineBasicMaterial.prototype.constructor = LineBasicMaterial;\\n\\nLineBasicMaterial.prototype.isLineBasicMaterial = true;\\n\\nLineBasicMaterial.prototype.copy = function ( source ) {\\n\\n\\tMaterial.prototype.copy.call( this, source );\\n\\n\\tthis.color.copy( source.color );\\n\\n\\tthis.linewidth = source.linewidth;\\n\\tthis.linecap = source.linecap;\\n\\tthis.linejoin = source.linejoin;\\n\\n\\treturn this;\\n\\n};\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\nfunction Line( geometry, material, mode ) {\\n\\n\\tif ( mode === 1 ) {\\n\\n\\t\\tconsole.error( 'THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead.' );\\n\\n\\t}\\n\\n\\tObject3D.call( this );\\n\\n\\tthis.type = 'Line';\\n\\n\\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\\n\\tthis.material = material !== undefined ? material : new LineBasicMaterial( { color: Math.random() * 0xffffff } );\\n\\n}\\n\\nLine.prototype = Object.assign( Object.create( Object3D.prototype ), {\\n\\n\\tconstructor: Line,\\n\\n\\tisLine: true,\\n\\n\\tcomputeLineDistances: ( function () {\\n\\n\\t\\tvar start = new Vector3();\\n\\t\\tvar end = new Vector3();\\n\\n\\t\\treturn function computeLineDistances() {\\n\\n\\t\\t\\tvar geometry = this.geometry;\\n\\n\\t\\t\\tif ( geometry.isBufferGeometry ) {\\n\\n\\t\\t\\t\\t// we assume non-indexed geometry\\n\\n\\t\\t\\t\\tif ( geometry.index === null ) {\\n\\n\\t\\t\\t\\t\\tvar positionAttribute = geometry.attributes.position;\\n\\t\\t\\t\\t\\tvar lineDistances = [ 0 ];\\n\\n\\t\\t\\t\\t\\tfor ( var i = 1, l = positionAttribute.count; i < l; i ++ ) {\\n\\n\\t\\t\\t\\t\\t\\tstart.fromBufferAttribute( positionAttribute, i - 1 );\\n\\t\\t\\t\\t\\t\\tend.fromBufferAttribute( positionAttribute, i );\\n\\n\\t\\t\\t\\t\\t\\tlineDistances[ i ] = lineDistances[ i - 1 ];\\n\\t\\t\\t\\t\\t\\tlineDistances[ i ] += start.distanceTo( end );\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tgeometry.addAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\\n\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\tconsole.warn( 'THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t} else if ( geometry.isGeometry ) {\\n\\n\\t\\t\\t\\tvar vertices = geometry.vertices;\\n\\t\\t\\t\\tvar lineDistances = geometry.lineDistances;\\n\\n\\t\\t\\t\\tlineDistances[ 0 ] = 0;\\n\\n\\t\\t\\t\\tfor ( var i = 1, l = vertices.length; i < l; i ++ ) {\\n\\n\\t\\t\\t\\t\\tlineDistances[ i ] = lineDistances[ i - 1 ];\\n\\t\\t\\t\\t\\tlineDistances[ i ] += vertices[ i - 1 ].distanceTo( vertices[ i ] );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn this;\\n\\n\\t\\t};\\n\\n\\t}() ),\\n\\n\\traycast: ( function () {\\n\\n\\t\\tvar inverseMatrix = new Matrix4();\\n\\t\\tvar ray = new Ray();\\n\\t\\tvar sphere = new Sphere();\\n\\n\\t\\treturn function raycast( raycaster, intersects ) {\\n\\n\\t\\t\\tvar precision = raycaster.linePrecision;\\n\\n\\t\\t\\tvar geometry = this.geometry;\\n\\t\\t\\tvar matrixWorld = this.matrixWorld;\\n\\n\\t\\t\\t// Checking boundingSphere distance to ray\\n\\n\\t\\t\\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\\n\\n\\t\\t\\tsphere.copy( geometry.boundingSphere );\\n\\t\\t\\tsphere.applyMatrix4( matrixWorld );\\n\\t\\t\\tsphere.radius += precision;\\n\\n\\t\\t\\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\\n\\n\\t\\t\\t//\\n\\n\\t\\t\\tinverseMatrix.getInverse( matrixWorld );\\n\\t\\t\\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\\n\\n\\t\\t\\tvar localPrecision = precision / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\\n\\t\\t\\tvar localPrecisionSq = localPrecision * localPrecision;\\n\\n\\t\\t\\tvar vStart = new Vector3();\\n\\t\\t\\tvar vEnd = new Vector3();\\n\\t\\t\\tvar interSegment = new Vector3();\\n\\t\\t\\tvar interRay = new Vector3();\\n\\t\\t\\tvar step = ( this && this.isLineSegments ) ? 2 : 1;\\n\\n\\t\\t\\tif ( geometry.isBufferGeometry ) {\\n\\n\\t\\t\\t\\tvar index = geometry.index;\\n\\t\\t\\t\\tvar attributes = geometry.attributes;\\n\\t\\t\\t\\tvar positions = attributes.position.array;\\n\\n\\t\\t\\t\\tif ( index !== null ) {\\n\\n\\t\\t\\t\\t\\tvar indices = index.array;\\n\\n\\t\\t\\t\\t\\tfor ( var i = 0, l = indices.length - 1; i < l; i += step ) {\\n\\n\\t\\t\\t\\t\\t\\tvar a = indices[ i ];\\n\\t\\t\\t\\t\\t\\tvar b = indices[ i + 1 ];\\n\\n\\t\\t\\t\\t\\t\\tvStart.fromArray( positions, a * 3 );\\n\\t\\t\\t\\t\\t\\tvEnd.fromArray( positions, b * 3 );\\n\\n\\t\\t\\t\\t\\t\\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\\n\\n\\t\\t\\t\\t\\t\\tif ( distSq > localPrecisionSq ) continue;\\n\\n\\t\\t\\t\\t\\t\\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\\n\\n\\t\\t\\t\\t\\t\\tvar distance = raycaster.ray.origin.distanceTo( interRay );\\n\\n\\t\\t\\t\\t\\t\\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\\n\\n\\t\\t\\t\\t\\t\\tintersects.push( {\\n\\n\\t\\t\\t\\t\\t\\t\\tdistance: distance,\\n\\t\\t\\t\\t\\t\\t\\t// What do we want? intersection point on the ray or on the segment??\\n\\t\\t\\t\\t\\t\\t\\t// point: raycaster.ray.at( distance ),\\n\\t\\t\\t\\t\\t\\t\\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\\n\\t\\t\\t\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\t\\t\\t\\tface: null,\\n\\t\\t\\t\\t\\t\\t\\tfaceIndex: null,\\n\\t\\t\\t\\t\\t\\t\\tobject: this\\n\\n\\t\\t\\t\\t\\t\\t} );\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\tfor ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {\\n\\n\\t\\t\\t\\t\\t\\tvStart.fromArray( positions, 3 * i );\\n\\t\\t\\t\\t\\t\\tvEnd.fromArray( positions, 3 * i + 3 );\\n\\n\\t\\t\\t\\t\\t\\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\\n\\n\\t\\t\\t\\t\\t\\tif ( distSq > localPrecisionSq ) continue;\\n\\n\\t\\t\\t\\t\\t\\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\\n\\n\\t\\t\\t\\t\\t\\tvar distance = raycaster.ray.origin.distanceTo( interRay );\\n\\n\\t\\t\\t\\t\\t\\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\\n\\n\\t\\t\\t\\t\\t\\tintersects.push( {\\n\\n\\t\\t\\t\\t\\t\\t\\tdistance: distance,\\n\\t\\t\\t\\t\\t\\t\\t// What do we want? intersection point on the ray or on the segment??\\n\\t\\t\\t\\t\\t\\t\\t// point: raycaster.ray.at( distance ),\\n\\t\\t\\t\\t\\t\\t\\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\\n\\t\\t\\t\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\t\\t\\t\\tface: null,\\n\\t\\t\\t\\t\\t\\t\\tfaceIndex: null,\\n\\t\\t\\t\\t\\t\\t\\tobject: this\\n\\n\\t\\t\\t\\t\\t\\t} );\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t} else if ( geometry.isGeometry ) {\\n\\n\\t\\t\\t\\tvar vertices = geometry.vertices;\\n\\t\\t\\t\\tvar nbVertices = vertices.length;\\n\\n\\t\\t\\t\\tfor ( var i = 0; i < nbVertices - 1; i += step ) {\\n\\n\\t\\t\\t\\t\\tvar distSq = ray.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );\\n\\n\\t\\t\\t\\t\\tif ( distSq > localPrecisionSq ) continue;\\n\\n\\t\\t\\t\\t\\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\\n\\n\\t\\t\\t\\t\\tvar distance = raycaster.ray.origin.distanceTo( interRay );\\n\\n\\t\\t\\t\\t\\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\\n\\n\\t\\t\\t\\t\\tintersects.push( {\\n\\n\\t\\t\\t\\t\\t\\tdistance: distance,\\n\\t\\t\\t\\t\\t\\t// What do we want? intersection point on the ray or on the segment??\\n\\t\\t\\t\\t\\t\\t// point: raycaster.ray.at( distance ),\\n\\t\\t\\t\\t\\t\\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\\n\\t\\t\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\t\\t\\tface: null,\\n\\t\\t\\t\\t\\t\\tfaceIndex: null,\\n\\t\\t\\t\\t\\t\\tobject: this\\n\\n\\t\\t\\t\\t\\t} );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t};\\n\\n\\t}() ),\\n\\n\\tcopy: function ( source ) {\\n\\n\\t\\tObject3D.prototype.copy.call( this, source );\\n\\n\\t\\tthis.geometry.copy( source.geometry );\\n\\t\\tthis.material.copy( source.material );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tclone: function () {\\n\\n\\t\\treturn new this.constructor().copy( this );\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\nfunction LineSegments( geometry, material ) {\\n\\n\\tLine.call( this, geometry, material );\\n\\n\\tthis.type = 'LineSegments';\\n\\n}\\n\\nLineSegments.prototype = Object.assign( Object.create( Line.prototype ), {\\n\\n\\tconstructor: LineSegments,\\n\\n\\tisLineSegments: true,\\n\\n\\tcomputeLineDistances: ( function () {\\n\\n\\t\\tvar start = new Vector3();\\n\\t\\tvar end = new Vector3();\\n\\n\\t\\treturn function computeLineDistances() {\\n\\n\\t\\t\\tvar geometry = this.geometry;\\n\\n\\t\\t\\tif ( geometry.isBufferGeometry ) {\\n\\n\\t\\t\\t\\t// we assume non-indexed geometry\\n\\n\\t\\t\\t\\tif ( geometry.index === null ) {\\n\\n\\t\\t\\t\\t\\tvar positionAttribute = geometry.attributes.position;\\n\\t\\t\\t\\t\\tvar lineDistances = [];\\n\\n\\t\\t\\t\\t\\tfor ( var i = 0, l = positionAttribute.count; i < l; i += 2 ) {\\n\\n\\t\\t\\t\\t\\t\\tstart.fromBufferAttribute( positionAttribute, i );\\n\\t\\t\\t\\t\\t\\tend.fromBufferAttribute( positionAttribute, i + 1 );\\n\\n\\t\\t\\t\\t\\t\\tlineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];\\n\\t\\t\\t\\t\\t\\tlineDistances[ i + 1 ] = lineDistances[ i ] + start.distanceTo( end );\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tgeometry.addAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\\n\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\tconsole.warn( 'THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t} else if ( geometry.isGeometry ) {\\n\\n\\t\\t\\t\\tvar vertices = geometry.vertices;\\n\\t\\t\\t\\tvar lineDistances = geometry.lineDistances;\\n\\n\\t\\t\\t\\tfor ( var i = 0, l = vertices.length; i < l; i += 2 ) {\\n\\n\\t\\t\\t\\t\\tstart.copy( vertices[ i ] );\\n\\t\\t\\t\\t\\tend.copy( vertices[ i + 1 ] );\\n\\n\\t\\t\\t\\t\\tlineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];\\n\\t\\t\\t\\t\\tlineDistances[ i + 1 ] = lineDistances[ i ] + start.distanceTo( end );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn this;\\n\\n\\t\\t};\\n\\n\\t}() )\\n\\n} );\\n\\n/**\\n * @author mgreter / http://github.com/mgreter\\n */\\n\\nfunction LineLoop( geometry, material ) {\\n\\n\\tLine.call( this, geometry, material );\\n\\n\\tthis.type = 'LineLoop';\\n\\n}\\n\\nLineLoop.prototype = Object.assign( Object.create( Line.prototype ), {\\n\\n\\tconstructor: LineLoop,\\n\\n\\tisLineLoop: true,\\n\\n} );\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n * @author alteredq / http://alteredqualia.com/\\n *\\n * parameters = {\\n *  color: <hex>,\\n *  opacity: <float>,\\n *  map: new THREE.Texture( <Image> ),\\n *\\n *  size: <float>,\\n *  sizeAttenuation: <bool>\\n *\\n *  morphTargets: <bool>\\n * }\\n */\\n\\nfunction PointsMaterial( parameters ) {\\n\\n\\tMaterial.call( this );\\n\\n\\tthis.type = 'PointsMaterial';\\n\\n\\tthis.color = new Color( 0xffffff );\\n\\n\\tthis.map = null;\\n\\n\\tthis.size = 1;\\n\\tthis.sizeAttenuation = true;\\n\\n\\tthis.morphTargets = false;\\n\\n\\tthis.lights = false;\\n\\n\\tthis.setValues( parameters );\\n\\n}\\n\\nPointsMaterial.prototype = Object.create( Material.prototype );\\nPointsMaterial.prototype.constructor = PointsMaterial;\\n\\nPointsMaterial.prototype.isPointsMaterial = true;\\n\\nPointsMaterial.prototype.copy = function ( source ) {\\n\\n\\tMaterial.prototype.copy.call( this, source );\\n\\n\\tthis.color.copy( source.color );\\n\\n\\tthis.map = source.map;\\n\\n\\tthis.size = source.size;\\n\\tthis.sizeAttenuation = source.sizeAttenuation;\\n\\n\\tthis.morphTargets = source.morphTargets;\\n\\n\\treturn this;\\n\\n};\\n\\n/**\\n * @author alteredq / http://alteredqualia.com/\\n */\\n\\nfunction Points( geometry, material ) {\\n\\n\\tObject3D.call( this );\\n\\n\\tthis.type = 'Points';\\n\\n\\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\\n\\tthis.material = material !== undefined ? material : new PointsMaterial( { color: Math.random() * 0xffffff } );\\n\\n}\\n\\nPoints.prototype = Object.assign( Object.create( Object3D.prototype ), {\\n\\n\\tconstructor: Points,\\n\\n\\tisPoints: true,\\n\\n\\traycast: ( function () {\\n\\n\\t\\tvar inverseMatrix = new Matrix4();\\n\\t\\tvar ray = new Ray();\\n\\t\\tvar sphere = new Sphere();\\n\\n\\t\\treturn function raycast( raycaster, intersects ) {\\n\\n\\t\\t\\tvar object = this;\\n\\t\\t\\tvar geometry = this.geometry;\\n\\t\\t\\tvar matrixWorld = this.matrixWorld;\\n\\t\\t\\tvar threshold = raycaster.params.Points.threshold;\\n\\n\\t\\t\\t// Checking boundingSphere distance to ray\\n\\n\\t\\t\\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\\n\\n\\t\\t\\tsphere.copy( geometry.boundingSphere );\\n\\t\\t\\tsphere.applyMatrix4( matrixWorld );\\n\\t\\t\\tsphere.radius += threshold;\\n\\n\\t\\t\\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\\n\\n\\t\\t\\t//\\n\\n\\t\\t\\tinverseMatrix.getInverse( matrixWorld );\\n\\t\\t\\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\\n\\n\\t\\t\\tvar localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\\n\\t\\t\\tvar localThresholdSq = localThreshold * localThreshold;\\n\\t\\t\\tvar position = new Vector3();\\n\\t\\t\\tvar intersectPoint = new Vector3();\\n\\n\\t\\t\\tfunction testPoint( point, index ) {\\n\\n\\t\\t\\t\\tvar rayPointDistanceSq = ray.distanceSqToPoint( point );\\n\\n\\t\\t\\t\\tif ( rayPointDistanceSq < localThresholdSq ) {\\n\\n\\t\\t\\t\\t\\tray.closestPointToPoint( point, intersectPoint );\\n\\t\\t\\t\\t\\tintersectPoint.applyMatrix4( matrixWorld );\\n\\n\\t\\t\\t\\t\\tvar distance = raycaster.ray.origin.distanceTo( intersectPoint );\\n\\n\\t\\t\\t\\t\\tif ( distance < raycaster.near || distance > raycaster.far ) return;\\n\\n\\t\\t\\t\\t\\tintersects.push( {\\n\\n\\t\\t\\t\\t\\t\\tdistance: distance,\\n\\t\\t\\t\\t\\t\\tdistanceToRay: Math.sqrt( rayPointDistanceSq ),\\n\\t\\t\\t\\t\\t\\tpoint: intersectPoint.clone(),\\n\\t\\t\\t\\t\\t\\tindex: index,\\n\\t\\t\\t\\t\\t\\tface: null,\\n\\t\\t\\t\\t\\t\\tobject: object\\n\\n\\t\\t\\t\\t\\t} );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( geometry.isBufferGeometry ) {\\n\\n\\t\\t\\t\\tvar index = geometry.index;\\n\\t\\t\\t\\tvar attributes = geometry.attributes;\\n\\t\\t\\t\\tvar positions = attributes.position.array;\\n\\n\\t\\t\\t\\tif ( index !== null ) {\\n\\n\\t\\t\\t\\t\\tvar indices = index.array;\\n\\n\\t\\t\\t\\t\\tfor ( var i = 0, il = indices.length; i < il; i ++ ) {\\n\\n\\t\\t\\t\\t\\t\\tvar a = indices[ i ];\\n\\n\\t\\t\\t\\t\\t\\tposition.fromArray( positions, a * 3 );\\n\\n\\t\\t\\t\\t\\t\\ttestPoint( position, a );\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\tfor ( var i = 0, l = positions.length / 3; i < l; i ++ ) {\\n\\n\\t\\t\\t\\t\\t\\tposition.fromArray( positions, i * 3 );\\n\\n\\t\\t\\t\\t\\t\\ttestPoint( position, i );\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tvar vertices = geometry.vertices;\\n\\n\\t\\t\\t\\tfor ( var i = 0, l = vertices.length; i < l; i ++ ) {\\n\\n\\t\\t\\t\\t\\ttestPoint( vertices[ i ], i );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t};\\n\\n\\t}() ),\\n\\n\\tclone: function () {\\n\\n\\t\\treturn new this.constructor( this.geometry, this.material ).copy( this );\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\nfunction VideoTexture( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\\n\\n\\tTexture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\\n\\n\\tthis.format = format !== undefined ? format : RGBFormat;\\n\\n\\tthis.minFilter = minFilter !== undefined ? minFilter : LinearFilter;\\n\\tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\\n\\n\\tthis.generateMipmaps = false;\\n\\n}\\n\\nVideoTexture.prototype = Object.assign( Object.create( Texture.prototype ), {\\n\\n\\tconstructor: VideoTexture,\\n\\n\\tisVideoTexture: true,\\n\\n\\tupdate: function () {\\n\\n\\t\\tvar video = this.image;\\n\\n\\t\\tif ( video.readyState >= video.HAVE_CURRENT_DATA ) {\\n\\n\\t\\t\\tthis.needsUpdate = true;\\n\\n\\t\\t}\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author alteredq / http://alteredqualia.com/\\n */\\n\\nfunction CompressedTexture( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\\n\\n\\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\\n\\n\\tthis.image = { width: width, height: height };\\n\\tthis.mipmaps = mipmaps;\\n\\n\\t// no flipping for cube textures\\n\\t// (also flipping doesn't work for compressed textures )\\n\\n\\tthis.flipY = false;\\n\\n\\t// can't generate mipmaps for compressed textures\\n\\t// mips must be embedded in DDS files\\n\\n\\tthis.generateMipmaps = false;\\n\\n}\\n\\nCompressedTexture.prototype = Object.create( Texture.prototype );\\nCompressedTexture.prototype.constructor = CompressedTexture;\\n\\nCompressedTexture.prototype.isCompressedTexture = true;\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\nfunction CanvasTexture( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\\n\\n\\tTexture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\\n\\n\\tthis.needsUpdate = true;\\n\\n}\\n\\nCanvasTexture.prototype = Object.create( Texture.prototype );\\nCanvasTexture.prototype.constructor = CanvasTexture;\\nCanvasTexture.prototype.isCanvasTexture = true;\\n\\n/**\\n * @author Matt DesLauriers / @mattdesl\\n * @author atix / arthursilber.de\\n */\\n\\nfunction DepthTexture( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {\\n\\n\\tformat = format !== undefined ? format : DepthFormat;\\n\\n\\tif ( format !== DepthFormat && format !== DepthStencilFormat ) {\\n\\n\\t\\tthrow new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' );\\n\\n\\t}\\n\\n\\tif ( type === undefined && format === DepthFormat ) type = UnsignedShortType;\\n\\tif ( type === undefined && format === DepthStencilFormat ) type = UnsignedInt248Type;\\n\\n\\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\\n\\n\\tthis.image = { width: width, height: height };\\n\\n\\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\\n\\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\\n\\n\\tthis.flipY = false;\\n\\tthis.generateMipmaps\\t= false;\\n\\n}\\n\\nDepthTexture.prototype = Object.create( Texture.prototype );\\nDepthTexture.prototype.constructor = DepthTexture;\\nDepthTexture.prototype.isDepthTexture = true;\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n * @author Mugen87 / https://github.com/Mugen87\\n */\\n\\nfunction WireframeGeometry( geometry ) {\\n\\n\\tBufferGeometry.call( this );\\n\\n\\tthis.type = 'WireframeGeometry';\\n\\n\\t// buffer\\n\\n\\tvar vertices = [];\\n\\n\\t// helper variables\\n\\n\\tvar i, j, l, o, ol;\\n\\tvar edge = [ 0, 0 ], edges = {}, e, edge1, edge2;\\n\\tvar key, keys = [ 'a', 'b', 'c' ];\\n\\tvar vertex;\\n\\n\\t// different logic for Geometry and BufferGeometry\\n\\n\\tif ( geometry && geometry.isGeometry ) {\\n\\n\\t\\t// create a data structure that contains all edges without duplicates\\n\\n\\t\\tvar faces = geometry.faces;\\n\\n\\t\\tfor ( i = 0, l = faces.length; i < l; i ++ ) {\\n\\n\\t\\t\\tvar face = faces[ i ];\\n\\n\\t\\t\\tfor ( j = 0; j < 3; j ++ ) {\\n\\n\\t\\t\\t\\tedge1 = face[ keys[ j ] ];\\n\\t\\t\\t\\tedge2 = face[ keys[ ( j + 1 ) % 3 ] ];\\n\\t\\t\\t\\tedge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates\\n\\t\\t\\t\\tedge[ 1 ] = Math.max( edge1, edge2 );\\n\\n\\t\\t\\t\\tkey = edge[ 0 ] + ',' + edge[ 1 ];\\n\\n\\t\\t\\t\\tif ( edges[ key ] === undefined ) {\\n\\n\\t\\t\\t\\t\\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\t// generate vertices\\n\\n\\t\\tfor ( key in edges ) {\\n\\n\\t\\t\\te = edges[ key ];\\n\\n\\t\\t\\tvertex = geometry.vertices[ e.index1 ];\\n\\t\\t\\tvertices.push( vertex.x, vertex.y, vertex.z );\\n\\n\\t\\t\\tvertex = geometry.vertices[ e.index2 ];\\n\\t\\t\\tvertices.push( vertex.x, vertex.y, vertex.z );\\n\\n\\t\\t}\\n\\n\\t} else if ( geometry && geometry.isBufferGeometry ) {\\n\\n\\t\\tvar position, indices, groups;\\n\\t\\tvar group, start, count;\\n\\t\\tvar index1, index2;\\n\\n\\t\\tvertex = new Vector3();\\n\\n\\t\\tif ( geometry.index !== null ) {\\n\\n\\t\\t\\t// indexed BufferGeometry\\n\\n\\t\\t\\tposition = geometry.attributes.position;\\n\\t\\t\\tindices = geometry.index;\\n\\t\\t\\tgroups = geometry.groups;\\n\\n\\t\\t\\tif ( groups.length === 0 ) {\\n\\n\\t\\t\\t\\tgroups = [ { start: 0, count: indices.count, materialIndex: 0 } ];\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\t// create a data structure that contains all eges without duplicates\\n\\n\\t\\t\\tfor ( o = 0, ol = groups.length; o < ol; ++ o ) {\\n\\n\\t\\t\\t\\tgroup = groups[ o ];\\n\\n\\t\\t\\t\\tstart = group.start;\\n\\t\\t\\t\\tcount = group.count;\\n\\n\\t\\t\\t\\tfor ( i = start, l = ( start + count ); i < l; i += 3 ) {\\n\\n\\t\\t\\t\\t\\tfor ( j = 0; j < 3; j ++ ) {\\n\\n\\t\\t\\t\\t\\t\\tedge1 = indices.getX( i + j );\\n\\t\\t\\t\\t\\t\\tedge2 = indices.getX( i + ( j + 1 ) % 3 );\\n\\t\\t\\t\\t\\t\\tedge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates\\n\\t\\t\\t\\t\\t\\tedge[ 1 ] = Math.max( edge1, edge2 );\\n\\n\\t\\t\\t\\t\\t\\tkey = edge[ 0 ] + ',' + edge[ 1 ];\\n\\n\\t\\t\\t\\t\\t\\tif ( edges[ key ] === undefined ) {\\n\\n\\t\\t\\t\\t\\t\\t\\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };\\n\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\t// generate vertices\\n\\n\\t\\t\\tfor ( key in edges ) {\\n\\n\\t\\t\\t\\te = edges[ key ];\\n\\n\\t\\t\\t\\tvertex.fromBufferAttribute( position, e.index1 );\\n\\t\\t\\t\\tvertices.push( vertex.x, vertex.y, vertex.z );\\n\\n\\t\\t\\t\\tvertex.fromBufferAttribute( position, e.index2 );\\n\\t\\t\\t\\tvertices.push( vertex.x, vertex.y, vertex.z );\\n\\n\\t\\t\\t}\\n\\n\\t\\t} else {\\n\\n\\t\\t\\t// non-indexed BufferGeometry\\n\\n\\t\\t\\tposition = geometry.attributes.position;\\n\\n\\t\\t\\tfor ( i = 0, l = ( position.count / 3 ); i < l; i ++ ) {\\n\\n\\t\\t\\t\\tfor ( j = 0; j < 3; j ++ ) {\\n\\n\\t\\t\\t\\t\\t// three edges per triangle, an edge is represented as (index1, index2)\\n\\t\\t\\t\\t\\t// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)\\n\\n\\t\\t\\t\\t\\tindex1 = 3 * i + j;\\n\\t\\t\\t\\t\\tvertex.fromBufferAttribute( position, index1 );\\n\\t\\t\\t\\t\\tvertices.push( vertex.x, vertex.y, vertex.z );\\n\\n\\t\\t\\t\\t\\tindex2 = 3 * i + ( ( j + 1 ) % 3 );\\n\\t\\t\\t\\t\\tvertex.fromBufferAttribute( position, index2 );\\n\\t\\t\\t\\t\\tvertices.push( vertex.x, vertex.y, vertex.z );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\t// build geometry\\n\\n\\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\\n\\n}\\n\\nWireframeGeometry.prototype = Object.create( BufferGeometry.prototype );\\nWireframeGeometry.prototype.constructor = WireframeGeometry;\\n\\n/**\\n * @author zz85 / https://github.com/zz85\\n * @author Mugen87 / https://github.com/Mugen87\\n *\\n * Parametric Surfaces Geometry\\n * based on the brilliant article by @prideout http://prideout.net/blog/?p=44\\n */\\n\\n// ParametricGeometry\\n\\nfunction ParametricGeometry( func, slices, stacks ) {\\n\\n\\tGeometry.call( this );\\n\\n\\tthis.type = 'ParametricGeometry';\\n\\n\\tthis.parameters = {\\n\\t\\tfunc: func,\\n\\t\\tslices: slices,\\n\\t\\tstacks: stacks\\n\\t};\\n\\n\\tthis.fromBufferGeometry( new ParametricBufferGeometry( func, slices, stacks ) );\\n\\tthis.mergeVertices();\\n\\n}\\n\\nParametricGeometry.prototype = Object.create( Geometry.prototype );\\nParametricGeometry.prototype.constructor = ParametricGeometry;\\n\\n// ParametricBufferGeometry\\n\\nfunction ParametricBufferGeometry( func, slices, stacks ) {\\n\\n\\tBufferGeometry.call( this );\\n\\n\\tthis.type = 'ParametricBufferGeometry';\\n\\n\\tthis.parameters = {\\n\\t\\tfunc: func,\\n\\t\\tslices: slices,\\n\\t\\tstacks: stacks\\n\\t};\\n\\n\\t// buffers\\n\\n\\tvar indices = [];\\n\\tvar vertices = [];\\n\\tvar normals = [];\\n\\tvar uvs = [];\\n\\n\\tvar EPS = 0.00001;\\n\\n\\tvar normal = new Vector3();\\n\\n\\tvar p0 = new Vector3(), p1 = new Vector3();\\n\\tvar pu = new Vector3(), pv = new Vector3();\\n\\n\\tvar i, j;\\n\\n\\tif ( func.length < 3 ) {\\n\\n\\t\\tconsole.error( 'THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.' );\\n\\n\\t}\\n\\n\\t// generate vertices, normals and uvs\\n\\n\\tvar sliceCount = slices + 1;\\n\\n\\tfor ( i = 0; i <= stacks; i ++ ) {\\n\\n\\t\\tvar v = i / stacks;\\n\\n\\t\\tfor ( j = 0; j <= slices; j ++ ) {\\n\\n\\t\\t\\tvar u = j / slices;\\n\\n\\t\\t\\t// vertex\\n\\n\\t\\t\\tfunc( u, v, p0 );\\n\\t\\t\\tvertices.push( p0.x, p0.y, p0.z );\\n\\n\\t\\t\\t// normal\\n\\n\\t\\t\\t// approximate tangent vectors via finite differences\\n\\n\\t\\t\\tif ( u - EPS >= 0 ) {\\n\\n\\t\\t\\t\\tfunc( u - EPS, v, p1 );\\n\\t\\t\\t\\tpu.subVectors( p0, p1 );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tfunc( u + EPS, v, p1 );\\n\\t\\t\\t\\tpu.subVectors( p1, p0 );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( v - EPS >= 0 ) {\\n\\n\\t\\t\\t\\tfunc( u, v - EPS, p1 );\\n\\t\\t\\t\\tpv.subVectors( p0, p1 );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tfunc( u, v + EPS, p1 );\\n\\t\\t\\t\\tpv.subVectors( p1, p0 );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\t// cross product of tangent vectors returns surface normal\\n\\n\\t\\t\\tnormal.crossVectors( pu, pv ).normalize();\\n\\t\\t\\tnormals.push( normal.x, normal.y, normal.z );\\n\\n\\t\\t\\t// uv\\n\\n\\t\\t\\tuvs.push( u, v );\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\t// generate indices\\n\\n\\tfor ( i = 0; i < stacks; i ++ ) {\\n\\n\\t\\tfor ( j = 0; j < slices; j ++ ) {\\n\\n\\t\\t\\tvar a = i * sliceCount + j;\\n\\t\\t\\tvar b = i * sliceCount + j + 1;\\n\\t\\t\\tvar c = ( i + 1 ) * sliceCount + j + 1;\\n\\t\\t\\tvar d = ( i + 1 ) * sliceCount + j;\\n\\n\\t\\t\\t// faces one and two\\n\\n\\t\\t\\tindices.push( a, b, d );\\n\\t\\t\\tindices.push( b, c, d );\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\t// build geometry\\n\\n\\tthis.setIndex( indices );\\n\\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\\n\\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\\n\\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\\n\\n}\\n\\nParametricBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\\nParametricBufferGeometry.prototype.constructor = ParametricBufferGeometry;\\n\\n/**\\n * @author clockworkgeek / https://github.com/clockworkgeek\\n * @author timothypratley / https://github.com/timothypratley\\n * @author WestLangley / http://github.com/WestLangley\\n * @author Mugen87 / https://github.com/Mugen87\\n */\\n\\n// PolyhedronGeometry\\n\\nfunction PolyhedronGeometry( vertices, indices, radius, detail ) {\\n\\n\\tGeometry.call( this );\\n\\n\\tthis.type = 'PolyhedronGeometry';\\n\\n\\tthis.parameters = {\\n\\t\\tvertices: vertices,\\n\\t\\tindices: indices,\\n\\t\\tradius: radius,\\n\\t\\tdetail: detail\\n\\t};\\n\\n\\tthis.fromBufferGeometry( new PolyhedronBufferGeometry( vertices, indices, radius, detail ) );\\n\\tthis.mergeVertices();\\n\\n}\\n\\nPolyhedronGeometry.prototype = Object.create( Geometry.prototype );\\nPolyhedronGeometry.prototype.constructor = PolyhedronGeometry;\\n\\n// PolyhedronBufferGeometry\\n\\nfunction PolyhedronBufferGeometry( vertices, indices, radius, detail ) {\\n\\n\\tBufferGeometry.call( this );\\n\\n\\tthis.type = 'PolyhedronBufferGeometry';\\n\\n\\tthis.parameters = {\\n\\t\\tvertices: vertices,\\n\\t\\tindices: indices,\\n\\t\\tradius: radius,\\n\\t\\tdetail: detail\\n\\t};\\n\\n\\tradius = radius || 1;\\n\\tdetail = detail || 0;\\n\\n\\t// default buffer data\\n\\n\\tvar vertexBuffer = [];\\n\\tvar uvBuffer = [];\\n\\n\\t// the subdivision creates the vertex buffer data\\n\\n\\tsubdivide( detail );\\n\\n\\t// all vertices should lie on a conceptual sphere with a given radius\\n\\n\\tappplyRadius( radius );\\n\\n\\t// finally, create the uv data\\n\\n\\tgenerateUVs();\\n\\n\\t// build non-indexed geometry\\n\\n\\tthis.addAttribute( 'position', new Float32BufferAttribute( vertexBuffer, 3 ) );\\n\\tthis.addAttribute( 'normal', new Float32BufferAttribute( vertexBuffer.slice(), 3 ) );\\n\\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvBuffer, 2 ) );\\n\\n\\tif ( detail === 0 ) {\\n\\n\\t\\tthis.computeVertexNormals(); // flat normals\\n\\n\\t} else {\\n\\n\\t\\tthis.normalizeNormals(); // smooth normals\\n\\n\\t}\\n\\n\\t// helper functions\\n\\n\\tfunction subdivide( detail ) {\\n\\n\\t\\tvar a = new Vector3();\\n\\t\\tvar b = new Vector3();\\n\\t\\tvar c = new Vector3();\\n\\n\\t\\t// iterate over all faces and apply a subdivison with the given detail value\\n\\n\\t\\tfor ( var i = 0; i < indices.length; i += 3 ) {\\n\\n\\t\\t\\t// get the vertices of the face\\n\\n\\t\\t\\tgetVertexByIndex( indices[ i + 0 ], a );\\n\\t\\t\\tgetVertexByIndex( indices[ i + 1 ], b );\\n\\t\\t\\tgetVertexByIndex( indices[ i + 2 ], c );\\n\\n\\t\\t\\t// perform subdivision\\n\\n\\t\\t\\tsubdivideFace( a, b, c, detail );\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tfunction subdivideFace( a, b, c, detail ) {\\n\\n\\t\\tvar cols = Math.pow( 2, detail );\\n\\n\\t\\t// we use this multidimensional array as a data structure for creating the subdivision\\n\\n\\t\\tvar v = [];\\n\\n\\t\\tvar i, j;\\n\\n\\t\\t// construct all of the vertices for this subdivision\\n\\n\\t\\tfor ( i = 0; i <= cols; i ++ ) {\\n\\n\\t\\t\\tv[ i ] = [];\\n\\n\\t\\t\\tvar aj = a.clone().lerp( c, i / cols );\\n\\t\\t\\tvar bj = b.clone().lerp( c, i / cols );\\n\\n\\t\\t\\tvar rows = cols - i;\\n\\n\\t\\t\\tfor ( j = 0; j <= rows; j ++ ) {\\n\\n\\t\\t\\t\\tif ( j === 0 && i === cols ) {\\n\\n\\t\\t\\t\\t\\tv[ i ][ j ] = aj;\\n\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\tv[ i ][ j ] = aj.clone().lerp( bj, j / rows );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\t// construct all of the faces\\n\\n\\t\\tfor ( i = 0; i < cols; i ++ ) {\\n\\n\\t\\t\\tfor ( j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {\\n\\n\\t\\t\\t\\tvar k = Math.floor( j / 2 );\\n\\n\\t\\t\\t\\tif ( j % 2 === 0 ) {\\n\\n\\t\\t\\t\\t\\tpushVertex( v[ i ][ k + 1 ] );\\n\\t\\t\\t\\t\\tpushVertex( v[ i + 1 ][ k ] );\\n\\t\\t\\t\\t\\tpushVertex( v[ i ][ k ] );\\n\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\tpushVertex( v[ i ][ k + 1 ] );\\n\\t\\t\\t\\t\\tpushVertex( v[ i + 1 ][ k + 1 ] );\\n\\t\\t\\t\\t\\tpushVertex( v[ i + 1 ][ k ] );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tfunction appplyRadius( radius ) {\\n\\n\\t\\tvar vertex = new Vector3();\\n\\n\\t\\t// iterate over the entire buffer and apply the radius to each vertex\\n\\n\\t\\tfor ( var i = 0; i < vertexBuffer.length; i += 3 ) {\\n\\n\\t\\t\\tvertex.x = vertexBuffer[ i + 0 ];\\n\\t\\t\\tvertex.y = vertexBuffer[ i + 1 ];\\n\\t\\t\\tvertex.z = vertexBuffer[ i + 2 ];\\n\\n\\t\\t\\tvertex.normalize().multiplyScalar( radius );\\n\\n\\t\\t\\tvertexBuffer[ i + 0 ] = vertex.x;\\n\\t\\t\\tvertexBuffer[ i + 1 ] = vertex.y;\\n\\t\\t\\tvertexBuffer[ i + 2 ] = vertex.z;\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tfunction generateUVs() {\\n\\n\\t\\tvar vertex = new Vector3();\\n\\n\\t\\tfor ( var i = 0; i < vertexBuffer.length; i += 3 ) {\\n\\n\\t\\t\\tvertex.x = vertexBuffer[ i + 0 ];\\n\\t\\t\\tvertex.y = vertexBuffer[ i + 1 ];\\n\\t\\t\\tvertex.z = vertexBuffer[ i + 2 ];\\n\\n\\t\\t\\tvar u = azimuth( vertex ) / 2 / Math.PI + 0.5;\\n\\t\\t\\tvar v = inclination( vertex ) / Math.PI + 0.5;\\n\\t\\t\\tuvBuffer.push( u, 1 - v );\\n\\n\\t\\t}\\n\\n\\t\\tcorrectUVs();\\n\\n\\t\\tcorrectSeam();\\n\\n\\t}\\n\\n\\tfunction correctSeam() {\\n\\n\\t\\t// handle case when face straddles the seam, see #3269\\n\\n\\t\\tfor ( var i = 0; i < uvBuffer.length; i += 6 ) {\\n\\n\\t\\t\\t// uv data of a single face\\n\\n\\t\\t\\tvar x0 = uvBuffer[ i + 0 ];\\n\\t\\t\\tvar x1 = uvBuffer[ i + 2 ];\\n\\t\\t\\tvar x2 = uvBuffer[ i + 4 ];\\n\\n\\t\\t\\tvar max = Math.max( x0, x1, x2 );\\n\\t\\t\\tvar min = Math.min( x0, x1, x2 );\\n\\n\\t\\t\\t// 0.9 is somewhat arbitrary\\n\\n\\t\\t\\tif ( max > 0.9 && min < 0.1 ) {\\n\\n\\t\\t\\t\\tif ( x0 < 0.2 ) uvBuffer[ i + 0 ] += 1;\\n\\t\\t\\t\\tif ( x1 < 0.2 ) uvBuffer[ i + 2 ] += 1;\\n\\t\\t\\t\\tif ( x2 < 0.2 ) uvBuffer[ i + 4 ] += 1;\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tfunction pushVertex( vertex ) {\\n\\n\\t\\tvertexBuffer.push( vertex.x, vertex.y, vertex.z );\\n\\n\\t}\\n\\n\\tfunction getVertexByIndex( index, vertex ) {\\n\\n\\t\\tvar stride = index * 3;\\n\\n\\t\\tvertex.x = vertices[ stride + 0 ];\\n\\t\\tvertex.y = vertices[ stride + 1 ];\\n\\t\\tvertex.z = vertices[ stride + 2 ];\\n\\n\\t}\\n\\n\\tfunction correctUVs() {\\n\\n\\t\\tvar a = new Vector3();\\n\\t\\tvar b = new Vector3();\\n\\t\\tvar c = new Vector3();\\n\\n\\t\\tvar centroid = new Vector3();\\n\\n\\t\\tvar uvA = new Vector2();\\n\\t\\tvar uvB = new Vector2();\\n\\t\\tvar uvC = new Vector2();\\n\\n\\t\\tfor ( var i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {\\n\\n\\t\\t\\ta.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );\\n\\t\\t\\tb.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );\\n\\t\\t\\tc.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );\\n\\n\\t\\t\\tuvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );\\n\\t\\t\\tuvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );\\n\\t\\t\\tuvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );\\n\\n\\t\\t\\tcentroid.copy( a ).add( b ).add( c ).divideScalar( 3 );\\n\\n\\t\\t\\tvar azi = azimuth( centroid );\\n\\n\\t\\t\\tcorrectUV( uvA, j + 0, a, azi );\\n\\t\\t\\tcorrectUV( uvB, j + 2, b, azi );\\n\\t\\t\\tcorrectUV( uvC, j + 4, c, azi );\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tfunction correctUV( uv, stride, vector, azimuth ) {\\n\\n\\t\\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {\\n\\n\\t\\t\\tuvBuffer[ stride ] = uv.x - 1;\\n\\n\\t\\t}\\n\\n\\t\\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {\\n\\n\\t\\t\\tuvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\t// Angle around the Y axis, counter-clockwise when looking from above.\\n\\n\\tfunction azimuth( vector ) {\\n\\n\\t\\treturn Math.atan2( vector.z, - vector.x );\\n\\n\\t}\\n\\n\\n\\t// Angle above the XZ plane.\\n\\n\\tfunction inclination( vector ) {\\n\\n\\t\\treturn Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\\n\\n\\t}\\n\\n}\\n\\nPolyhedronBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\\nPolyhedronBufferGeometry.prototype.constructor = PolyhedronBufferGeometry;\\n\\n/**\\n * @author timothypratley / https://github.com/timothypratley\\n * @author Mugen87 / https://github.com/Mugen87\\n */\\n\\n// TetrahedronGeometry\\n\\nfunction TetrahedronGeometry( radius, detail ) {\\n\\n\\tGeometry.call( this );\\n\\n\\tthis.type = 'TetrahedronGeometry';\\n\\n\\tthis.parameters = {\\n\\t\\tradius: radius,\\n\\t\\tdetail: detail\\n\\t};\\n\\n\\tthis.fromBufferGeometry( new TetrahedronBufferGeometry( radius, detail ) );\\n\\tthis.mergeVertices();\\n\\n}\\n\\nTetrahedronGeometry.prototype = Object.create( Geometry.prototype );\\nTetrahedronGeometry.prototype.constructor = TetrahedronGeometry;\\n\\n// TetrahedronBufferGeometry\\n\\nfunction TetrahedronBufferGeometry( radius, detail ) {\\n\\n\\tvar vertices = [\\n\\t\\t1, 1, 1, \\t- 1, - 1, 1, \\t- 1, 1, - 1, \\t1, - 1, - 1\\n\\t];\\n\\n\\tvar indices = [\\n\\t\\t2, 1, 0, \\t0, 3, 2,\\t1, 3, 0,\\t2, 3, 1\\n\\t];\\n\\n\\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\\n\\n\\tthis.type = 'TetrahedronBufferGeometry';\\n\\n\\tthis.parameters = {\\n\\t\\tradius: radius,\\n\\t\\tdetail: detail\\n\\t};\\n\\n}\\n\\nTetrahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\\nTetrahedronBufferGeometry.prototype.constructor = TetrahedronBufferGeometry;\\n\\n/**\\n * @author timothypratley / https://github.com/timothypratley\\n * @author Mugen87 / https://github.com/Mugen87\\n */\\n\\n// OctahedronGeometry\\n\\nfunction OctahedronGeometry( radius, detail ) {\\n\\n\\tGeometry.call( this );\\n\\n\\tthis.type = 'OctahedronGeometry';\\n\\n\\tthis.parameters = {\\n\\t\\tradius: radius,\\n\\t\\tdetail: detail\\n\\t};\\n\\n\\tthis.fromBufferGeometry( new OctahedronBufferGeometry( radius, detail ) );\\n\\tthis.mergeVertices();\\n\\n}\\n\\nOctahedronGeometry.prototype = Object.create( Geometry.prototype );\\nOctahedronGeometry.prototype.constructor = OctahedronGeometry;\\n\\n// OctahedronBufferGeometry\\n\\nfunction OctahedronBufferGeometry( radius, detail ) {\\n\\n\\tvar vertices = [\\n\\t\\t1, 0, 0, \\t- 1, 0, 0,\\t0, 1, 0,\\n\\t\\t0, - 1, 0, \\t0, 0, 1,\\t0, 0, - 1\\n\\t];\\n\\n\\tvar indices = [\\n\\t\\t0, 2, 4,\\t0, 4, 3,\\t0, 3, 5,\\n\\t\\t0, 5, 2,\\t1, 2, 5,\\t1, 5, 3,\\n\\t\\t1, 3, 4,\\t1, 4, 2\\n\\t];\\n\\n\\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\\n\\n\\tthis.type = 'OctahedronBufferGeometry';\\n\\n\\tthis.parameters = {\\n\\t\\tradius: radius,\\n\\t\\tdetail: detail\\n\\t};\\n\\n}\\n\\nOctahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\\nOctahedronBufferGeometry.prototype.constructor = OctahedronBufferGeometry;\\n\\n/**\\n * @author timothypratley / https://github.com/timothypratley\\n * @author Mugen87 / https://github.com/Mugen87\\n */\\n\\n// IcosahedronGeometry\\n\\nfunction IcosahedronGeometry( radius, detail ) {\\n\\n\\tGeometry.call( this );\\n\\n\\tthis.type = 'IcosahedronGeometry';\\n\\n\\tthis.parameters = {\\n\\t\\tradius: radius,\\n\\t\\tdetail: detail\\n\\t};\\n\\n\\tthis.fromBufferGeometry( new IcosahedronBufferGeometry( radius, detail ) );\\n\\tthis.mergeVertices();\\n\\n}\\n\\nIcosahedronGeometry.prototype = Object.create( Geometry.prototype );\\nIcosahedronGeometry.prototype.constructor = IcosahedronGeometry;\\n\\n// IcosahedronBufferGeometry\\n\\nfunction IcosahedronBufferGeometry( radius, detail ) {\\n\\n\\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\\n\\n\\tvar vertices = [\\n\\t\\t- 1, t, 0, \\t1, t, 0, \\t- 1, - t, 0, \\t1, - t, 0,\\n\\t\\t 0, - 1, t, \\t0, 1, t,\\t0, - 1, - t, \\t0, 1, - t,\\n\\t\\t t, 0, - 1, \\tt, 0, 1, \\t- t, 0, - 1, \\t- t, 0, 1\\n\\t];\\n\\n\\tvar indices = [\\n\\t\\t 0, 11, 5, \\t0, 5, 1, \\t0, 1, 7, \\t0, 7, 10, \\t0, 10, 11,\\n\\t\\t 1, 5, 9, \\t5, 11, 4,\\t11, 10, 2,\\t10, 7, 6,\\t7, 1, 8,\\n\\t\\t 3, 9, 4, \\t3, 4, 2,\\t3, 2, 6,\\t3, 6, 8,\\t3, 8, 9,\\n\\t\\t 4, 9, 5, \\t2, 4, 11,\\t6, 2, 10,\\t8, 6, 7,\\t9, 8, 1\\n\\t];\\n\\n\\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\\n\\n\\tthis.type = 'IcosahedronBufferGeometry';\\n\\n\\tthis.parameters = {\\n\\t\\tradius: radius,\\n\\t\\tdetail: detail\\n\\t};\\n\\n}\\n\\nIcosahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\\nIcosahedronBufferGeometry.prototype.constructor = IcosahedronBufferGeometry;\\n\\n/**\\n * @author Abe Pazos / https://hamoid.com\\n * @author Mugen87 / https://github.com/Mugen87\\n */\\n\\n// DodecahedronGeometry\\n\\nfunction DodecahedronGeometry( radius, detail ) {\\n\\n\\tGeometry.call( this );\\n\\n\\tthis.type = 'DodecahedronGeometry';\\n\\n\\tthis.parameters = {\\n\\t\\tradius: radius,\\n\\t\\tdetail: detail\\n\\t};\\n\\n\\tthis.fromBufferGeometry( new DodecahedronBufferGeometry( radius, detail ) );\\n\\tthis.mergeVertices();\\n\\n}\\n\\nDodecahedronGeometry.prototype = Object.create( Geometry.prototype );\\nDodecahedronGeometry.prototype.constructor = DodecahedronGeometry;\\n\\n// DodecahedronBufferGeometry\\n\\nfunction DodecahedronBufferGeometry( radius, detail ) {\\n\\n\\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\\n\\tvar r = 1 / t;\\n\\n\\tvar vertices = [\\n\\n\\t\\t// (±1, ±1, ±1)\\n\\t\\t- 1, - 1, - 1,\\t- 1, - 1, 1,\\n\\t\\t- 1, 1, - 1, - 1, 1, 1,\\n\\t\\t1, - 1, - 1, 1, - 1, 1,\\n\\t\\t1, 1, - 1, 1, 1, 1,\\n\\n\\t\\t// (0, ±1/φ, ±φ)\\n\\t\\t 0, - r, - t, 0, - r, t,\\n\\t\\t 0, r, - t, 0, r, t,\\n\\n\\t\\t// (±1/φ, ±φ, 0)\\n\\t\\t- r, - t, 0, - r, t, 0,\\n\\t\\t r, - t, 0, r, t, 0,\\n\\n\\t\\t// (±φ, 0, ±1/φ)\\n\\t\\t- t, 0, - r, t, 0, - r,\\n\\t\\t- t, 0, r, t, 0, r\\n\\t];\\n\\n\\tvar indices = [\\n\\t\\t3, 11, 7, \\t3, 7, 15, \\t3, 15, 13,\\n\\t\\t7, 19, 17, \\t7, 17, 6, \\t7, 6, 15,\\n\\t\\t17, 4, 8, \\t17, 8, 10, \\t17, 10, 6,\\n\\t\\t8, 0, 16, \\t8, 16, 2, \\t8, 2, 10,\\n\\t\\t0, 12, 1, \\t0, 1, 18, \\t0, 18, 16,\\n\\t\\t6, 10, 2, \\t6, 2, 13, \\t6, 13, 15,\\n\\t\\t2, 16, 18, \\t2, 18, 3, \\t2, 3, 13,\\n\\t\\t18, 1, 9, \\t18, 9, 11, \\t18, 11, 3,\\n\\t\\t4, 14, 12, \\t4, 12, 0, \\t4, 0, 8,\\n\\t\\t11, 9, 5, \\t11, 5, 19, \\t11, 19, 7,\\n\\t\\t19, 5, 14, \\t19, 14, 4, \\t19, 4, 17,\\n\\t\\t1, 12, 14, \\t1, 14, 5, \\t1, 5, 9\\n\\t];\\n\\n\\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\\n\\n\\tthis.type = 'DodecahedronBufferGeometry';\\n\\n\\tthis.parameters = {\\n\\t\\tradius: radius,\\n\\t\\tdetail: detail\\n\\t};\\n\\n}\\n\\nDodecahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\\nDodecahedronBufferGeometry.prototype.constructor = DodecahedronBufferGeometry;\\n\\n/**\\n * @author oosmoxiecode / https://github.com/oosmoxiecode\\n * @author WestLangley / https://github.com/WestLangley\\n * @author zz85 / https://github.com/zz85\\n * @author miningold / https://github.com/miningold\\n * @author jonobr1 / https://github.com/jonobr1\\n * @author Mugen87 / https://github.com/Mugen87\\n *\\n */\\n\\n// TubeGeometry\\n\\nfunction TubeGeometry( path, tubularSegments, radius, radialSegments, closed, taper ) {\\n\\n\\tGeometry.call( this );\\n\\n\\tthis.type = 'TubeGeometry';\\n\\n\\tthis.parameters = {\\n\\t\\tpath: path,\\n\\t\\ttubularSegments: tubularSegments,\\n\\t\\tradius: radius,\\n\\t\\tradialSegments: radialSegments,\\n\\t\\tclosed: closed\\n\\t};\\n\\n\\tif ( taper !== undefined ) console.warn( 'THREE.TubeGeometry: taper has been removed.' );\\n\\n\\tvar bufferGeometry = new TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed );\\n\\n\\t// expose internals\\n\\n\\tthis.tangents = bufferGeometry.tangents;\\n\\tthis.normals = bufferGeometry.normals;\\n\\tthis.binormals = bufferGeometry.binormals;\\n\\n\\t// create geometry\\n\\n\\tthis.fromBufferGeometry( bufferGeometry );\\n\\tthis.mergeVertices();\\n\\n}\\n\\nTubeGeometry.prototype = Object.create( Geometry.prototype );\\nTubeGeometry.prototype.constructor = TubeGeometry;\\n\\n// TubeBufferGeometry\\n\\nfunction TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed ) {\\n\\n\\tBufferGeometry.call( this );\\n\\n\\tthis.type = 'TubeBufferGeometry';\\n\\n\\tthis.parameters = {\\n\\t\\tpath: path,\\n\\t\\ttubularSegments: tubularSegments,\\n\\t\\tradius: radius,\\n\\t\\tradialSegments: radialSegments,\\n\\t\\tclosed: closed\\n\\t};\\n\\n\\ttubularSegments = tubularSegments || 64;\\n\\tradius = radius || 1;\\n\\tradialSegments = radialSegments || 8;\\n\\tclosed = closed || false;\\n\\n\\tvar frames = path.computeFrenetFrames( tubularSegments, closed );\\n\\n\\t// expose internals\\n\\n\\tthis.tangents = frames.tangents;\\n\\tthis.normals = frames.normals;\\n\\tthis.binormals = frames.binormals;\\n\\n\\t// helper variables\\n\\n\\tvar vertex = new Vector3();\\n\\tvar normal = new Vector3();\\n\\tvar uv = new Vector2();\\n\\tvar P = new Vector3();\\n\\n\\tvar i, j;\\n\\n\\t// buffer\\n\\n\\tvar vertices = [];\\n\\tvar normals = [];\\n\\tvar uvs = [];\\n\\tvar indices = [];\\n\\n\\t// create buffer data\\n\\n\\tgenerateBufferData();\\n\\n\\t// build geometry\\n\\n\\tthis.setIndex( indices );\\n\\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\\n\\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\\n\\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\\n\\n\\t// functions\\n\\n\\tfunction generateBufferData() {\\n\\n\\t\\tfor ( i = 0; i < tubularSegments; i ++ ) {\\n\\n\\t\\t\\tgenerateSegment( i );\\n\\n\\t\\t}\\n\\n\\t\\t// if the geometry is not closed, generate the last row of vertices and normals\\n\\t\\t// at the regular position on the given path\\n\\t\\t//\\n\\t\\t// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\\n\\n\\t\\tgenerateSegment( ( closed === false ) ? tubularSegments : 0 );\\n\\n\\t\\t// uvs are generated in a separate function.\\n\\t\\t// this makes it easy compute correct values for closed geometries\\n\\n\\t\\tgenerateUVs();\\n\\n\\t\\t// finally create faces\\n\\n\\t\\tgenerateIndices();\\n\\n\\t}\\n\\n\\tfunction generateSegment( i ) {\\n\\n\\t\\t// we use getPointAt to sample evenly distributed points from the given path\\n\\n\\t\\tP = path.getPointAt( i / tubularSegments, P );\\n\\n\\t\\t// retrieve corresponding normal and binormal\\n\\n\\t\\tvar N = frames.normals[ i ];\\n\\t\\tvar B = frames.binormals[ i ];\\n\\n\\t\\t// generate normals and vertices for the current segment\\n\\n\\t\\tfor ( j = 0; j <= radialSegments; j ++ ) {\\n\\n\\t\\t\\tvar v = j / radialSegments * Math.PI * 2;\\n\\n\\t\\t\\tvar sin = Math.sin( v );\\n\\t\\t\\tvar cos = - Math.cos( v );\\n\\n\\t\\t\\t// normal\\n\\n\\t\\t\\tnormal.x = ( cos * N.x + sin * B.x );\\n\\t\\t\\tnormal.y = ( cos * N.y + sin * B.y );\\n\\t\\t\\tnormal.z = ( cos * N.z + sin * B.z );\\n\\t\\t\\tnormal.normalize();\\n\\n\\t\\t\\tnormals.push( normal.x, normal.y, normal.z );\\n\\n\\t\\t\\t// vertex\\n\\n\\t\\t\\tvertex.x = P.x + radius * normal.x;\\n\\t\\t\\tvertex.y = P.y + radius * normal.y;\\n\\t\\t\\tvertex.z = P.z + radius * normal.z;\\n\\n\\t\\t\\tvertices.push( vertex.x, vertex.y, vertex.z );\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tfunction generateIndices() {\\n\\n\\t\\tfor ( j = 1; j <= tubularSegments; j ++ ) {\\n\\n\\t\\t\\tfor ( i = 1; i <= radialSegments; i ++ ) {\\n\\n\\t\\t\\t\\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\\n\\t\\t\\t\\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\\n\\t\\t\\t\\tvar c = ( radialSegments + 1 ) * j + i;\\n\\t\\t\\t\\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\\n\\n\\t\\t\\t\\t// faces\\n\\n\\t\\t\\t\\tindices.push( a, b, d );\\n\\t\\t\\t\\tindices.push( b, c, d );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tfunction generateUVs() {\\n\\n\\t\\tfor ( i = 0; i <= tubularSegments; i ++ ) {\\n\\n\\t\\t\\tfor ( j = 0; j <= radialSegments; j ++ ) {\\n\\n\\t\\t\\t\\tuv.x = i / tubularSegments;\\n\\t\\t\\t\\tuv.y = j / radialSegments;\\n\\n\\t\\t\\t\\tuvs.push( uv.x, uv.y );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t}\\n\\n}\\n\\nTubeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\\nTubeBufferGeometry.prototype.constructor = TubeBufferGeometry;\\n\\n/**\\n * @author oosmoxiecode\\n * @author Mugen87 / https://github.com/Mugen87\\n *\\n * based on http://www.blackpawn.com/texts/pqtorus/\\n */\\n\\n// TorusKnotGeometry\\n\\nfunction TorusKnotGeometry( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {\\n\\n\\tGeometry.call( this );\\n\\n\\tthis.type = 'TorusKnotGeometry';\\n\\n\\tthis.parameters = {\\n\\t\\tradius: radius,\\n\\t\\ttube: tube,\\n\\t\\ttubularSegments: tubularSegments,\\n\\t\\tradialSegments: radialSegments,\\n\\t\\tp: p,\\n\\t\\tq: q\\n\\t};\\n\\n\\tif ( heightScale !== undefined ) console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' );\\n\\n\\tthis.fromBufferGeometry( new TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );\\n\\tthis.mergeVertices();\\n\\n}\\n\\nTorusKnotGeometry.prototype = Object.create( Geometry.prototype );\\nTorusKnotGeometry.prototype.constructor = TorusKnotGeometry;\\n\\n// TorusKnotBufferGeometry\\n\\nfunction TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) {\\n\\n\\tBufferGeometry.call( this );\\n\\n\\tthis.type = 'TorusKnotBufferGeometry';\\n\\n\\tthis.parameters = {\\n\\t\\tradius: radius,\\n\\t\\ttube: tube,\\n\\t\\ttubularSegments: tubularSegments,\\n\\t\\tradialSegments: radialSegments,\\n\\t\\tp: p,\\n\\t\\tq: q\\n\\t};\\n\\n\\tradius = radius || 1;\\n\\ttube = tube || 0.4;\\n\\ttubularSegments = Math.floor( tubularSegments ) || 64;\\n\\tradialSegments = Math.floor( radialSegments ) || 8;\\n\\tp = p || 2;\\n\\tq = q || 3;\\n\\n\\t// buffers\\n\\n\\tvar indices = [];\\n\\tvar vertices = [];\\n\\tvar normals = [];\\n\\tvar uvs = [];\\n\\n\\t// helper variables\\n\\n\\tvar i, j;\\n\\n\\tvar vertex = new Vector3();\\n\\tvar normal = new Vector3();\\n\\n\\tvar P1 = new Vector3();\\n\\tvar P2 = new Vector3();\\n\\n\\tvar B = new Vector3();\\n\\tvar T = new Vector3();\\n\\tvar N = new Vector3();\\n\\n\\t// generate vertices, normals and uvs\\n\\n\\tfor ( i = 0; i <= tubularSegments; ++ i ) {\\n\\n\\t\\t// the radian \\\"u\\\" is used to calculate the position on the torus curve of the current tubular segement\\n\\n\\t\\tvar u = i / tubularSegments * p * Math.PI * 2;\\n\\n\\t\\t// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\\n\\t\\t// these points are used to create a special \\\"coordinate space\\\", which is necessary to calculate the correct vertex positions\\n\\n\\t\\tcalculatePositionOnCurve( u, p, q, radius, P1 );\\n\\t\\tcalculatePositionOnCurve( u + 0.01, p, q, radius, P2 );\\n\\n\\t\\t// calculate orthonormal basis\\n\\n\\t\\tT.subVectors( P2, P1 );\\n\\t\\tN.addVectors( P2, P1 );\\n\\t\\tB.crossVectors( T, N );\\n\\t\\tN.crossVectors( B, T );\\n\\n\\t\\t// normalize B, N. T can be ignored, we don't use it\\n\\n\\t\\tB.normalize();\\n\\t\\tN.normalize();\\n\\n\\t\\tfor ( j = 0; j <= radialSegments; ++ j ) {\\n\\n\\t\\t\\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\\n\\t\\t\\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\\n\\n\\t\\t\\tvar v = j / radialSegments * Math.PI * 2;\\n\\t\\t\\tvar cx = - tube * Math.cos( v );\\n\\t\\t\\tvar cy = tube * Math.sin( v );\\n\\n\\t\\t\\t// now calculate the final vertex position.\\n\\t\\t\\t// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\\n\\n\\t\\t\\tvertex.x = P1.x + ( cx * N.x + cy * B.x );\\n\\t\\t\\tvertex.y = P1.y + ( cx * N.y + cy * B.y );\\n\\t\\t\\tvertex.z = P1.z + ( cx * N.z + cy * B.z );\\n\\n\\t\\t\\tvertices.push( vertex.x, vertex.y, vertex.z );\\n\\n\\t\\t\\t// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\\n\\n\\t\\t\\tnormal.subVectors( vertex, P1 ).normalize();\\n\\n\\t\\t\\tnormals.push( normal.x, normal.y, normal.z );\\n\\n\\t\\t\\t// uv\\n\\n\\t\\t\\tuvs.push( i / tubularSegments );\\n\\t\\t\\tuvs.push( j / radialSegments );\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\t// generate indices\\n\\n\\tfor ( j = 1; j <= tubularSegments; j ++ ) {\\n\\n\\t\\tfor ( i = 1; i <= radialSegments; i ++ ) {\\n\\n\\t\\t\\t// indices\\n\\n\\t\\t\\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\\n\\t\\t\\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\\n\\t\\t\\tvar c = ( radialSegments + 1 ) * j + i;\\n\\t\\t\\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\\n\\n\\t\\t\\t// faces\\n\\n\\t\\t\\tindices.push( a, b, d );\\n\\t\\t\\tindices.push( b, c, d );\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\t// build geometry\\n\\n\\tthis.setIndex( indices );\\n\\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\\n\\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\\n\\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\\n\\n\\t// this function calculates the current position on the torus curve\\n\\n\\tfunction calculatePositionOnCurve( u, p, q, radius, position ) {\\n\\n\\t\\tvar cu = Math.cos( u );\\n\\t\\tvar su = Math.sin( u );\\n\\t\\tvar quOverP = q / p * u;\\n\\t\\tvar cs = Math.cos( quOverP );\\n\\n\\t\\tposition.x = radius * ( 2 + cs ) * 0.5 * cu;\\n\\t\\tposition.y = radius * ( 2 + cs ) * su * 0.5;\\n\\t\\tposition.z = radius * Math.sin( quOverP ) * 0.5;\\n\\n\\t}\\n\\n}\\n\\nTorusKnotBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\\nTorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;\\n\\n/**\\n * @author oosmoxiecode\\n * @author mrdoob / http://mrdoob.com/\\n * @author Mugen87 / https://github.com/Mugen87\\n */\\n\\n// TorusGeometry\\n\\nfunction TorusGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\\n\\n\\tGeometry.call( this );\\n\\n\\tthis.type = 'TorusGeometry';\\n\\n\\tthis.parameters = {\\n\\t\\tradius: radius,\\n\\t\\ttube: tube,\\n\\t\\tradialSegments: radialSegments,\\n\\t\\ttubularSegments: tubularSegments,\\n\\t\\tarc: arc\\n\\t};\\n\\n\\tthis.fromBufferGeometry( new TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );\\n\\tthis.mergeVertices();\\n\\n}\\n\\nTorusGeometry.prototype = Object.create( Geometry.prototype );\\nTorusGeometry.prototype.constructor = TorusGeometry;\\n\\n// TorusBufferGeometry\\n\\nfunction TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\\n\\n\\tBufferGeometry.call( this );\\n\\n\\tthis.type = 'TorusBufferGeometry';\\n\\n\\tthis.parameters = {\\n\\t\\tradius: radius,\\n\\t\\ttube: tube,\\n\\t\\tradialSegments: radialSegments,\\n\\t\\ttubularSegments: tubularSegments,\\n\\t\\tarc: arc\\n\\t};\\n\\n\\tradius = radius || 1;\\n\\ttube = tube || 0.4;\\n\\tradialSegments = Math.floor( radialSegments ) || 8;\\n\\ttubularSegments = Math.floor( tubularSegments ) || 6;\\n\\tarc = arc || Math.PI * 2;\\n\\n\\t// buffers\\n\\n\\tvar indices = [];\\n\\tvar vertices = [];\\n\\tvar normals = [];\\n\\tvar uvs = [];\\n\\n\\t// helper variables\\n\\n\\tvar center = new Vector3();\\n\\tvar vertex = new Vector3();\\n\\tvar normal = new Vector3();\\n\\n\\tvar j, i;\\n\\n\\t// generate vertices, normals and uvs\\n\\n\\tfor ( j = 0; j <= radialSegments; j ++ ) {\\n\\n\\t\\tfor ( i = 0; i <= tubularSegments; i ++ ) {\\n\\n\\t\\t\\tvar u = i / tubularSegments * arc;\\n\\t\\t\\tvar v = j / radialSegments * Math.PI * 2;\\n\\n\\t\\t\\t// vertex\\n\\n\\t\\t\\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\\n\\t\\t\\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\\n\\t\\t\\tvertex.z = tube * Math.sin( v );\\n\\n\\t\\t\\tvertices.push( vertex.x, vertex.y, vertex.z );\\n\\n\\t\\t\\t// normal\\n\\n\\t\\t\\tcenter.x = radius * Math.cos( u );\\n\\t\\t\\tcenter.y = radius * Math.sin( u );\\n\\t\\t\\tnormal.subVectors( vertex, center ).normalize();\\n\\n\\t\\t\\tnormals.push( normal.x, normal.y, normal.z );\\n\\n\\t\\t\\t// uv\\n\\n\\t\\t\\tuvs.push( i / tubularSegments );\\n\\t\\t\\tuvs.push( j / radialSegments );\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\t// generate indices\\n\\n\\tfor ( j = 1; j <= radialSegments; j ++ ) {\\n\\n\\t\\tfor ( i = 1; i <= tubularSegments; i ++ ) {\\n\\n\\t\\t\\t// indices\\n\\n\\t\\t\\tvar a = ( tubularSegments + 1 ) * j + i - 1;\\n\\t\\t\\tvar b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\\n\\t\\t\\tvar c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\\n\\t\\t\\tvar d = ( tubularSegments + 1 ) * j + i;\\n\\n\\t\\t\\t// faces\\n\\n\\t\\t\\tindices.push( a, b, d );\\n\\t\\t\\tindices.push( b, c, d );\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\t// build geometry\\n\\n\\tthis.setIndex( indices );\\n\\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\\n\\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\\n\\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\\n\\n}\\n\\nTorusBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\\nTorusBufferGeometry.prototype.constructor = TorusBufferGeometry;\\n\\n/**\\n * @author Mugen87 / https://github.com/Mugen87\\n * Port from https://github.com/mapbox/earcut (v2.1.2)\\n */\\n\\nvar Earcut = {\\n\\n\\ttriangulate: function ( data, holeIndices, dim ) {\\n\\n\\t\\tdim = dim || 2;\\n\\n\\t\\tvar hasHoles = holeIndices && holeIndices.length,\\n\\t\\t\\touterLen = hasHoles ? holeIndices[ 0 ] * dim : data.length,\\n\\t\\t\\touterNode = linkedList( data, 0, outerLen, dim, true ),\\n\\t\\t\\ttriangles = [];\\n\\n\\t\\tif ( ! outerNode ) return triangles;\\n\\n\\t\\tvar minX, minY, maxX, maxY, x, y, invSize;\\n\\n\\t\\tif ( hasHoles ) outerNode = eliminateHoles( data, holeIndices, outerNode, dim );\\n\\n\\t\\t// if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\\n\\n\\t\\tif ( data.length > 80 * dim ) {\\n\\n\\t\\t\\tminX = maxX = data[ 0 ];\\n\\t\\t\\tminY = maxY = data[ 1 ];\\n\\n\\t\\t\\tfor ( var i = dim; i < outerLen; i += dim ) {\\n\\n\\t\\t\\t\\tx = data[ i ];\\n\\t\\t\\t\\ty = data[ i + 1 ];\\n\\t\\t\\t\\tif ( x < minX ) minX = x;\\n\\t\\t\\t\\tif ( y < minY ) minY = y;\\n\\t\\t\\t\\tif ( x > maxX ) maxX = x;\\n\\t\\t\\t\\tif ( y > maxY ) maxY = y;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\t// minX, minY and invSize are later used to transform coords into integers for z-order calculation\\n\\n\\t\\t\\tinvSize = Math.max( maxX - minX, maxY - minY );\\n\\t\\t\\tinvSize = invSize !== 0 ? 1 / invSize : 0;\\n\\n\\t\\t}\\n\\n\\t\\tearcutLinked( outerNode, triangles, dim, minX, minY, invSize );\\n\\n\\t\\treturn triangles;\\n\\n\\t}\\n\\n};\\n\\n// create a circular doubly linked list from polygon points in the specified winding order\\n\\nfunction linkedList( data, start, end, dim, clockwise ) {\\n\\n\\tvar i, last;\\n\\n\\tif ( clockwise === ( signedArea( data, start, end, dim ) > 0 ) ) {\\n\\n\\t\\tfor ( i = start; i < end; i += dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );\\n\\n\\t} else {\\n\\n\\t\\tfor ( i = end - dim; i >= start; i -= dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );\\n\\n\\t}\\n\\n\\tif ( last && equals( last, last.next ) ) {\\n\\n\\t\\tremoveNode( last );\\n\\t\\tlast = last.next;\\n\\n\\t}\\n\\n\\treturn last;\\n\\n}\\n\\n// eliminate colinear or duplicate points\\n\\nfunction filterPoints( start, end ) {\\n\\n\\tif ( ! start ) return start;\\n\\tif ( ! end ) end = start;\\n\\n\\tvar p = start, again;\\n\\n\\tdo {\\n\\n\\t\\tagain = false;\\n\\n\\t\\tif ( ! p.steiner && ( equals( p, p.next ) || area( p.prev, p, p.next ) === 0 ) ) {\\n\\n\\t\\t\\tremoveNode( p );\\n\\t\\t\\tp = end = p.prev;\\n\\t\\t\\tif ( p === p.next ) break;\\n\\t\\t\\tagain = true;\\n\\n\\t\\t} else {\\n\\n\\t\\t\\tp = p.next;\\n\\n\\t\\t}\\n\\n\\t} while ( again || p !== end );\\n\\n\\treturn end;\\n\\n}\\n\\n// main ear slicing loop which triangulates a polygon (given as a linked list)\\n\\nfunction earcutLinked( ear, triangles, dim, minX, minY, invSize, pass ) {\\n\\n\\tif ( ! ear ) return;\\n\\n\\t// interlink polygon nodes in z-order\\n\\n\\tif ( ! pass && invSize ) indexCurve( ear, minX, minY, invSize );\\n\\n\\tvar stop = ear, prev, next;\\n\\n\\t// iterate through ears, slicing them one by one\\n\\n\\twhile ( ear.prev !== ear.next ) {\\n\\n\\t\\tprev = ear.prev;\\n\\t\\tnext = ear.next;\\n\\n\\t\\tif ( invSize ? isEarHashed( ear, minX, minY, invSize ) : isEar( ear ) ) {\\n\\n\\t\\t\\t// cut off the triangle\\n\\t\\t\\ttriangles.push( prev.i / dim );\\n\\t\\t\\ttriangles.push( ear.i / dim );\\n\\t\\t\\ttriangles.push( next.i / dim );\\n\\n\\t\\t\\tremoveNode( ear );\\n\\n\\t\\t\\t// skipping the next vertice leads to less sliver triangles\\n\\t\\t\\tear = next.next;\\n\\t\\t\\tstop = next.next;\\n\\n\\t\\t\\tcontinue;\\n\\n\\t\\t}\\n\\n\\t\\tear = next;\\n\\n\\t\\t// if we looped through the whole remaining polygon and can't find any more ears\\n\\n\\t\\tif ( ear === stop ) {\\n\\n\\t\\t\\t// try filtering points and slicing again\\n\\n\\t\\t\\tif ( ! pass ) {\\n\\n\\t\\t\\t\\tearcutLinked( filterPoints( ear ), triangles, dim, minX, minY, invSize, 1 );\\n\\n\\t\\t\\t\\t// if this didn't work, try curing all small self-intersections locally\\n\\n\\t\\t\\t} else if ( pass === 1 ) {\\n\\n\\t\\t\\t\\tear = cureLocalIntersections( ear, triangles, dim );\\n\\t\\t\\t\\tearcutLinked( ear, triangles, dim, minX, minY, invSize, 2 );\\n\\n\\t\\t\\t\\t// as a last resort, try splitting the remaining polygon into two\\n\\n\\t\\t\\t} else if ( pass === 2 ) {\\n\\n\\t\\t\\t\\tsplitEarcut( ear, triangles, dim, minX, minY, invSize );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tbreak;\\n\\n\\t\\t}\\n\\n\\t}\\n\\n}\\n\\n// check whether a polygon node forms a valid ear with adjacent nodes\\n\\nfunction isEar( ear ) {\\n\\n\\tvar a = ear.prev,\\n\\t\\tb = ear,\\n\\t\\tc = ear.next;\\n\\n\\tif ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear\\n\\n\\t// now make sure we don't have other points inside the potential ear\\n\\tvar p = ear.next.next;\\n\\n\\twhile ( p !== ear.prev ) {\\n\\n\\t\\tif ( pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) && area( p.prev, p, p.next ) >= 0 ) {\\n\\n\\t\\t\\treturn false;\\n\\n\\t\\t}\\n\\n\\t\\tp = p.next;\\n\\n\\t}\\n\\n\\treturn true;\\n\\n}\\n\\nfunction isEarHashed( ear, minX, minY, invSize ) {\\n\\n\\tvar a = ear.prev,\\n\\t\\tb = ear,\\n\\t\\tc = ear.next;\\n\\n\\tif ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear\\n\\n\\t// triangle bbox; min & max are calculated like this for speed\\n\\n\\tvar minTX = a.x < b.x ? ( a.x < c.x ? a.x : c.x ) : ( b.x < c.x ? b.x : c.x ),\\n\\t\\tminTY = a.y < b.y ? ( a.y < c.y ? a.y : c.y ) : ( b.y < c.y ? b.y : c.y ),\\n\\t\\tmaxTX = a.x > b.x ? ( a.x > c.x ? a.x : c.x ) : ( b.x > c.x ? b.x : c.x ),\\n\\t\\tmaxTY = a.y > b.y ? ( a.y > c.y ? a.y : c.y ) : ( b.y > c.y ? b.y : c.y );\\n\\n\\t// z-order range for the current triangle bbox;\\n\\n\\tvar minZ = zOrder( minTX, minTY, minX, minY, invSize ),\\n\\t\\tmaxZ = zOrder( maxTX, maxTY, minX, minY, invSize );\\n\\n\\t// first look for points inside the triangle in increasing z-order\\n\\n\\tvar p = ear.nextZ;\\n\\n\\twhile ( p && p.z <= maxZ ) {\\n\\n\\t\\tif ( p !== ear.prev && p !== ear.next &&\\n\\t\\t\\t\\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\\n\\t\\t\\t\\tarea( p.prev, p, p.next ) >= 0 ) return false;\\n\\t\\tp = p.nextZ;\\n\\n\\t}\\n\\n\\t// then look for points in decreasing z-order\\n\\n\\tp = ear.prevZ;\\n\\n\\twhile ( p && p.z >= minZ ) {\\n\\n\\t\\tif ( p !== ear.prev && p !== ear.next &&\\n\\t\\t\\t\\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\\n\\t\\t\\t\\tarea( p.prev, p, p.next ) >= 0 ) return false;\\n\\n\\t\\tp = p.prevZ;\\n\\n\\t}\\n\\n\\treturn true;\\n\\n}\\n\\n// go through all polygon nodes and cure small local self-intersections\\n\\nfunction cureLocalIntersections( start, triangles, dim ) {\\n\\n\\tvar p = start;\\n\\n\\tdo {\\n\\n\\t\\tvar a = p.prev, b = p.next.next;\\n\\n\\t\\tif ( ! equals( a, b ) && intersects( a, p, p.next, b ) && locallyInside( a, b ) && locallyInside( b, a ) ) {\\n\\n\\t\\t\\ttriangles.push( a.i / dim );\\n\\t\\t\\ttriangles.push( p.i / dim );\\n\\t\\t\\ttriangles.push( b.i / dim );\\n\\n\\t\\t\\t// remove two nodes involved\\n\\n\\t\\t\\tremoveNode( p );\\n\\t\\t\\tremoveNode( p.next );\\n\\n\\t\\t\\tp = start = b;\\n\\n\\t\\t}\\n\\n\\t\\tp = p.next;\\n\\n\\t} while ( p !== start );\\n\\n\\treturn p;\\n\\n}\\n\\n// try splitting polygon into two and triangulate them independently\\n\\nfunction splitEarcut( start, triangles, dim, minX, minY, invSize ) {\\n\\n\\t// look for a valid diagonal that divides the polygon into two\\n\\n\\tvar a = start;\\n\\n\\tdo {\\n\\n\\t\\tvar b = a.next.next;\\n\\n\\t\\twhile ( b !== a.prev ) {\\n\\n\\t\\t\\tif ( a.i !== b.i && isValidDiagonal( a, b ) ) {\\n\\n\\t\\t\\t\\t// split the polygon in two by the diagonal\\n\\n\\t\\t\\t\\tvar c = splitPolygon( a, b );\\n\\n\\t\\t\\t\\t// filter colinear points around the cuts\\n\\n\\t\\t\\t\\ta = filterPoints( a, a.next );\\n\\t\\t\\t\\tc = filterPoints( c, c.next );\\n\\n\\t\\t\\t\\t// run earcut on each half\\n\\n\\t\\t\\t\\tearcutLinked( a, triangles, dim, minX, minY, invSize );\\n\\t\\t\\t\\tearcutLinked( c, triangles, dim, minX, minY, invSize );\\n\\t\\t\\t\\treturn;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tb = b.next;\\n\\n\\t\\t}\\n\\n\\t\\ta = a.next;\\n\\n\\t} while ( a !== start );\\n\\n}\\n\\n// link every hole into the outer loop, producing a single-ring polygon without holes\\n\\nfunction eliminateHoles( data, holeIndices, outerNode, dim ) {\\n\\n\\tvar queue = [], i, len, start, end, list;\\n\\n\\tfor ( i = 0, len = holeIndices.length; i < len; i ++ ) {\\n\\n\\t\\tstart = holeIndices[ i ] * dim;\\n\\t\\tend = i < len - 1 ? holeIndices[ i + 1 ] * dim : data.length;\\n\\t\\tlist = linkedList( data, start, end, dim, false );\\n\\t\\tif ( list === list.next ) list.steiner = true;\\n\\t\\tqueue.push( getLeftmost( list ) );\\n\\n\\t}\\n\\n\\tqueue.sort( compareX );\\n\\n\\t// process holes from left to right\\n\\n\\tfor ( i = 0; i < queue.length; i ++ ) {\\n\\n\\t\\teliminateHole( queue[ i ], outerNode );\\n\\t\\touterNode = filterPoints( outerNode, outerNode.next );\\n\\n\\t}\\n\\n\\treturn outerNode;\\n\\n}\\n\\nfunction compareX( a, b ) {\\n\\n\\treturn a.x - b.x;\\n\\n}\\n\\n// find a bridge between vertices that connects hole with an outer ring and and link it\\n\\nfunction eliminateHole( hole, outerNode ) {\\n\\n\\touterNode = findHoleBridge( hole, outerNode );\\n\\n\\tif ( outerNode ) {\\n\\n\\t\\tvar b = splitPolygon( outerNode, hole );\\n\\n\\t\\tfilterPoints( b, b.next );\\n\\n\\t}\\n\\n}\\n\\n// David Eberly's algorithm for finding a bridge between hole and outer polygon\\n\\nfunction findHoleBridge( hole, outerNode ) {\\n\\n\\tvar p = outerNode,\\n\\t\\thx = hole.x,\\n\\t\\thy = hole.y,\\n\\t\\tqx = - Infinity,\\n\\t\\tm;\\n\\n\\t// find a segment intersected by a ray from the hole's leftmost point to the left;\\n\\t// segment's endpoint with lesser x will be potential connection point\\n\\n\\tdo {\\n\\n\\t\\tif ( hy <= p.y && hy >= p.next.y && p.next.y !== p.y ) {\\n\\n\\t\\t\\tvar x = p.x + ( hy - p.y ) * ( p.next.x - p.x ) / ( p.next.y - p.y );\\n\\n\\t\\t\\tif ( x <= hx && x > qx ) {\\n\\n\\t\\t\\t\\tqx = x;\\n\\n\\t\\t\\t\\tif ( x === hx ) {\\n\\n\\t\\t\\t\\t\\tif ( hy === p.y ) return p;\\n\\t\\t\\t\\t\\tif ( hy === p.next.y ) return p.next;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tm = p.x < p.next.x ? p : p.next;\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tp = p.next;\\n\\n\\t} while ( p !== outerNode );\\n\\n\\tif ( ! m ) return null;\\n\\n\\tif ( hx === qx ) return m.prev; // hole touches outer segment; pick lower endpoint\\n\\n\\t// look for points inside the triangle of hole point, segment intersection and endpoint;\\n\\t// if there are no points found, we have a valid connection;\\n\\t// otherwise choose the point of the minimum angle with the ray as connection point\\n\\n\\tvar stop = m,\\n\\t\\tmx = m.x,\\n\\t\\tmy = m.y,\\n\\t\\ttanMin = Infinity,\\n\\t\\ttan;\\n\\n\\tp = m.next;\\n\\n\\twhile ( p !== stop ) {\\n\\n\\t\\tif ( hx >= p.x && p.x >= mx && hx !== p.x &&\\n\\t\\t\\t\\t\\t\\tpointInTriangle( hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y ) ) {\\n\\n\\t\\t\\ttan = Math.abs( hy - p.y ) / ( hx - p.x ); // tangential\\n\\n\\t\\t\\tif ( ( tan < tanMin || ( tan === tanMin && p.x > m.x ) ) && locallyInside( p, hole ) ) {\\n\\n\\t\\t\\t\\tm = p;\\n\\t\\t\\t\\ttanMin = tan;\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tp = p.next;\\n\\n\\t}\\n\\n\\treturn m;\\n\\n}\\n\\n// interlink polygon nodes in z-order\\n\\nfunction indexCurve( start, minX, minY, invSize ) {\\n\\n\\tvar p = start;\\n\\n\\tdo {\\n\\n\\t\\tif ( p.z === null ) p.z = zOrder( p.x, p.y, minX, minY, invSize );\\n\\t\\tp.prevZ = p.prev;\\n\\t\\tp.nextZ = p.next;\\n\\t\\tp = p.next;\\n\\n\\t} while ( p !== start );\\n\\n\\tp.prevZ.nextZ = null;\\n\\tp.prevZ = null;\\n\\n\\tsortLinked( p );\\n\\n}\\n\\n// Simon Tatham's linked list merge sort algorithm\\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\\n\\nfunction sortLinked( list ) {\\n\\n\\tvar i, p, q, e, tail, numMerges, pSize, qSize, inSize = 1;\\n\\n\\tdo {\\n\\n\\t\\tp = list;\\n\\t\\tlist = null;\\n\\t\\ttail = null;\\n\\t\\tnumMerges = 0;\\n\\n\\t\\twhile ( p ) {\\n\\n\\t\\t\\tnumMerges ++;\\n\\t\\t\\tq = p;\\n\\t\\t\\tpSize = 0;\\n\\n\\t\\t\\tfor ( i = 0; i < inSize; i ++ ) {\\n\\n\\t\\t\\t\\tpSize ++;\\n\\t\\t\\t\\tq = q.nextZ;\\n\\t\\t\\t\\tif ( ! q ) break;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tqSize = inSize;\\n\\n\\t\\t\\twhile ( pSize > 0 || ( qSize > 0 && q ) ) {\\n\\n\\t\\t\\t\\tif ( pSize !== 0 && ( qSize === 0 || ! q || p.z <= q.z ) ) {\\n\\n\\t\\t\\t\\t\\te = p;\\n\\t\\t\\t\\t\\tp = p.nextZ;\\n\\t\\t\\t\\t\\tpSize --;\\n\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\te = q;\\n\\t\\t\\t\\t\\tq = q.nextZ;\\n\\t\\t\\t\\t\\tqSize --;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif ( tail ) tail.nextZ = e;\\n\\t\\t\\t\\telse list = e;\\n\\n\\t\\t\\t\\te.prevZ = tail;\\n\\t\\t\\t\\ttail = e;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tp = q;\\n\\n\\t\\t}\\n\\n\\t\\ttail.nextZ = null;\\n\\t\\tinSize *= 2;\\n\\n\\t} while ( numMerges > 1 );\\n\\n\\treturn list;\\n\\n}\\n\\n// z-order of a point given coords and inverse of the longer side of data bbox\\n\\nfunction zOrder( x, y, minX, minY, invSize ) {\\n\\n\\t// coords are transformed into non-negative 15-bit integer range\\n\\n\\tx = 32767 * ( x - minX ) * invSize;\\n\\ty = 32767 * ( y - minY ) * invSize;\\n\\n\\tx = ( x | ( x << 8 ) ) & 0x00FF00FF;\\n\\tx = ( x | ( x << 4 ) ) & 0x0F0F0F0F;\\n\\tx = ( x | ( x << 2 ) ) & 0x33333333;\\n\\tx = ( x | ( x << 1 ) ) & 0x55555555;\\n\\n\\ty = ( y | ( y << 8 ) ) & 0x00FF00FF;\\n\\ty = ( y | ( y << 4 ) ) & 0x0F0F0F0F;\\n\\ty = ( y | ( y << 2 ) ) & 0x33333333;\\n\\ty = ( y | ( y << 1 ) ) & 0x55555555;\\n\\n\\treturn x | ( y << 1 );\\n\\n}\\n\\n// find the leftmost node of a polygon ring\\n\\nfunction getLeftmost( start ) {\\n\\n\\tvar p = start, leftmost = start;\\n\\n\\tdo {\\n\\n\\t\\tif ( p.x < leftmost.x ) leftmost = p;\\n\\t\\tp = p.next;\\n\\n\\t} while ( p !== start );\\n\\n\\treturn leftmost;\\n\\n}\\n\\n// check if a point lies within a convex triangle\\n\\nfunction pointInTriangle( ax, ay, bx, by, cx, cy, px, py ) {\\n\\n\\treturn ( cx - px ) * ( ay - py ) - ( ax - px ) * ( cy - py ) >= 0 &&\\n\\t ( ax - px ) * ( by - py ) - ( bx - px ) * ( ay - py ) >= 0 &&\\n\\t ( bx - px ) * ( cy - py ) - ( cx - px ) * ( by - py ) >= 0;\\n\\n}\\n\\n// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\\n\\nfunction isValidDiagonal( a, b ) {\\n\\n\\treturn a.next.i !== b.i && a.prev.i !== b.i && ! intersectsPolygon( a, b ) &&\\n\\t\\tlocallyInside( a, b ) && locallyInside( b, a ) && middleInside( a, b );\\n\\n}\\n\\n// signed area of a triangle\\n\\nfunction area( p, q, r ) {\\n\\n\\treturn ( q.y - p.y ) * ( r.x - q.x ) - ( q.x - p.x ) * ( r.y - q.y );\\n\\n}\\n\\n// check if two points are equal\\n\\nfunction equals( p1, p2 ) {\\n\\n\\treturn p1.x === p2.x && p1.y === p2.y;\\n\\n}\\n\\n// check if two segments intersect\\n\\nfunction intersects( p1, q1, p2, q2 ) {\\n\\n\\tif ( ( equals( p1, q1 ) && equals( p2, q2 ) ) ||\\n\\t\\t\\t( equals( p1, q2 ) && equals( p2, q1 ) ) ) return true;\\n\\n\\treturn area( p1, q1, p2 ) > 0 !== area( p1, q1, q2 ) > 0 &&\\n\\t\\t\\t\\t area( p2, q2, p1 ) > 0 !== area( p2, q2, q1 ) > 0;\\n\\n}\\n\\n// check if a polygon diagonal intersects any polygon segments\\n\\nfunction intersectsPolygon( a, b ) {\\n\\n\\tvar p = a;\\n\\n\\tdo {\\n\\n\\t\\tif ( p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\\n\\t\\t\\t\\t\\t\\tintersects( p, p.next, a, b ) ) {\\n\\n\\t\\t\\treturn true;\\n\\n\\t\\t}\\n\\n\\t\\tp = p.next;\\n\\n\\t} while ( p !== a );\\n\\n\\treturn false;\\n\\n}\\n\\n// check if a polygon diagonal is locally inside the polygon\\n\\nfunction locallyInside( a, b ) {\\n\\n\\treturn area( a.prev, a, a.next ) < 0 ?\\n\\t\\tarea( a, b, a.next ) >= 0 && area( a, a.prev, b ) >= 0 :\\n\\t\\tarea( a, b, a.prev ) < 0 || area( a, a.next, b ) < 0;\\n\\n}\\n\\n// check if the middle point of a polygon diagonal is inside the polygon\\n\\nfunction middleInside( a, b ) {\\n\\n\\tvar p = a,\\n\\t\\tinside = false,\\n\\t\\tpx = ( a.x + b.x ) / 2,\\n\\t\\tpy = ( a.y + b.y ) / 2;\\n\\n\\tdo {\\n\\n\\t\\tif ( ( ( p.y > py ) !== ( p.next.y > py ) ) && p.next.y !== p.y &&\\n\\t\\t\\t\\t\\t\\t( px < ( p.next.x - p.x ) * ( py - p.y ) / ( p.next.y - p.y ) + p.x ) ) {\\n\\n\\t\\t\\tinside = ! inside;\\n\\n\\t\\t}\\n\\n\\t\\tp = p.next;\\n\\n\\t} while ( p !== a );\\n\\n\\treturn inside;\\n\\n}\\n\\n// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\\n\\nfunction splitPolygon( a, b ) {\\n\\n\\tvar a2 = new Node( a.i, a.x, a.y ),\\n\\t\\tb2 = new Node( b.i, b.x, b.y ),\\n\\t\\tan = a.next,\\n\\t\\tbp = b.prev;\\n\\n\\ta.next = b;\\n\\tb.prev = a;\\n\\n\\ta2.next = an;\\n\\tan.prev = a2;\\n\\n\\tb2.next = a2;\\n\\ta2.prev = b2;\\n\\n\\tbp.next = b2;\\n\\tb2.prev = bp;\\n\\n\\treturn b2;\\n\\n}\\n\\n// create a node and optionally link it with previous one (in a circular doubly linked list)\\n\\nfunction insertNode( i, x, y, last ) {\\n\\n\\tvar p = new Node( i, x, y );\\n\\n\\tif ( ! last ) {\\n\\n\\t\\tp.prev = p;\\n\\t\\tp.next = p;\\n\\n\\t} else {\\n\\n\\t\\tp.next = last.next;\\n\\t\\tp.prev = last;\\n\\t\\tlast.next.prev = p;\\n\\t\\tlast.next = p;\\n\\n\\t}\\n\\n\\treturn p;\\n\\n}\\n\\nfunction removeNode( p ) {\\n\\n\\tp.next.prev = p.prev;\\n\\tp.prev.next = p.next;\\n\\n\\tif ( p.prevZ ) p.prevZ.nextZ = p.nextZ;\\n\\tif ( p.nextZ ) p.nextZ.prevZ = p.prevZ;\\n\\n}\\n\\nfunction Node( i, x, y ) {\\n\\n\\t// vertice index in coordinates array\\n\\tthis.i = i;\\n\\n\\t// vertex coordinates\\n\\tthis.x = x;\\n\\tthis.y = y;\\n\\n\\t// previous and next vertice nodes in a polygon ring\\n\\tthis.prev = null;\\n\\tthis.next = null;\\n\\n\\t// z-order curve value\\n\\tthis.z = null;\\n\\n\\t// previous and next nodes in z-order\\n\\tthis.prevZ = null;\\n\\tthis.nextZ = null;\\n\\n\\t// indicates whether this is a steiner point\\n\\tthis.steiner = false;\\n\\n}\\n\\nfunction signedArea( data, start, end, dim ) {\\n\\n\\tvar sum = 0;\\n\\n\\tfor ( var i = start, j = end - dim; i < end; i += dim ) {\\n\\n\\t\\tsum += ( data[ j ] - data[ i ] ) * ( data[ i + 1 ] + data[ j + 1 ] );\\n\\t\\tj = i;\\n\\n\\t}\\n\\n\\treturn sum;\\n\\n}\\n\\n/**\\n * @author zz85 / http://www.lab4games.net/zz85/blog\\n */\\n\\nvar ShapeUtils = {\\n\\n\\t// calculate area of the contour polygon\\n\\n\\tarea: function ( contour ) {\\n\\n\\t\\tvar n = contour.length;\\n\\t\\tvar a = 0.0;\\n\\n\\t\\tfor ( var p = n - 1, q = 0; q < n; p = q ++ ) {\\n\\n\\t\\t\\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\\n\\n\\t\\t}\\n\\n\\t\\treturn a * 0.5;\\n\\n\\t},\\n\\n\\tisClockWise: function ( pts ) {\\n\\n\\t\\treturn ShapeUtils.area( pts ) < 0;\\n\\n\\t},\\n\\n\\ttriangulateShape: function ( contour, holes ) {\\n\\n\\t\\tvar vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]\\n\\t\\tvar holeIndices = []; // array of hole indices\\n\\t\\tvar faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]\\n\\n\\t\\tremoveDupEndPts( contour );\\n\\t\\taddContour( vertices, contour );\\n\\n\\t\\t//\\n\\n\\t\\tvar holeIndex = contour.length;\\n\\n\\t\\tholes.forEach( removeDupEndPts );\\n\\n\\t\\tfor ( var i = 0; i < holes.length; i ++ ) {\\n\\n\\t\\t\\tholeIndices.push( holeIndex );\\n\\t\\t\\tholeIndex += holes[ i ].length;\\n\\t\\t\\taddContour( vertices, holes[ i ] );\\n\\n\\t\\t}\\n\\n\\t\\t//\\n\\n\\t\\tvar triangles = Earcut.triangulate( vertices, holeIndices );\\n\\n\\t\\t//\\n\\n\\t\\tfor ( var i = 0; i < triangles.length; i += 3 ) {\\n\\n\\t\\t\\tfaces.push( triangles.slice( i, i + 3 ) );\\n\\n\\t\\t}\\n\\n\\t\\treturn faces;\\n\\n\\t}\\n\\n};\\n\\nfunction removeDupEndPts( points ) {\\n\\n\\tvar l = points.length;\\n\\n\\tif ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {\\n\\n\\t\\tpoints.pop();\\n\\n\\t}\\n\\n}\\n\\nfunction addContour( vertices, contour ) {\\n\\n\\tfor ( var i = 0; i < contour.length; i ++ ) {\\n\\n\\t\\tvertices.push( contour[ i ].x );\\n\\t\\tvertices.push( contour[ i ].y );\\n\\n\\t}\\n\\n}\\n\\n/**\\n * @author zz85 / http://www.lab4games.net/zz85/blog\\n *\\n * Creates extruded geometry from a path shape.\\n *\\n * parameters = {\\n *\\n *  curveSegments: <int>, // number of points on the curves\\n *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\\n *  depth: <float>, // Depth to extrude the shape\\n *\\n *  bevelEnabled: <bool>, // turn on bevel\\n *  bevelThickness: <float>, // how deep into the original shape bevel goes\\n *  bevelSize: <float>, // how far from shape outline is bevel\\n *  bevelSegments: <int>, // number of bevel layers\\n *\\n *  extrudePath: <THREE.Curve> // curve to extrude shape along\\n *\\n *  UVGenerator: <Object> // object that provides UV generator functions\\n *\\n * }\\n */\\n\\n// ExtrudeGeometry\\n\\nfunction ExtrudeGeometry( shapes, options ) {\\n\\n\\tGeometry.call( this );\\n\\n\\tthis.type = 'ExtrudeGeometry';\\n\\n\\tthis.parameters = {\\n\\t\\tshapes: shapes,\\n\\t\\toptions: options\\n\\t};\\n\\n\\tthis.fromBufferGeometry( new ExtrudeBufferGeometry( shapes, options ) );\\n\\tthis.mergeVertices();\\n\\n}\\n\\nExtrudeGeometry.prototype = Object.create( Geometry.prototype );\\nExtrudeGeometry.prototype.constructor = ExtrudeGeometry;\\n\\nExtrudeGeometry.prototype.toJSON = function () {\\n\\n\\tvar data = Geometry.prototype.toJSON.call( this );\\n\\n\\tvar shapes = this.parameters.shapes;\\n\\tvar options = this.parameters.options;\\n\\n\\treturn toJSON( shapes, options, data );\\n\\n};\\n\\n// ExtrudeBufferGeometry\\n\\nfunction ExtrudeBufferGeometry( shapes, options ) {\\n\\n\\tBufferGeometry.call( this );\\n\\n\\tthis.type = 'ExtrudeBufferGeometry';\\n\\n\\tthis.parameters = {\\n\\t\\tshapes: shapes,\\n\\t\\toptions: options\\n\\t};\\n\\n\\tshapes = Array.isArray( shapes ) ? shapes : [ shapes ];\\n\\n\\tvar scope = this;\\n\\n\\tvar verticesArray = [];\\n\\tvar uvArray = [];\\n\\n\\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\\n\\n\\t\\tvar shape = shapes[ i ];\\n\\t\\taddShape( shape );\\n\\n\\t}\\n\\n\\t// build geometry\\n\\n\\tthis.addAttribute( 'position', new Float32BufferAttribute( verticesArray, 3 ) );\\n\\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvArray, 2 ) );\\n\\n\\tthis.computeVertexNormals();\\n\\n\\t// functions\\n\\n\\tfunction addShape( shape ) {\\n\\n\\t\\tvar placeholder = [];\\n\\n\\t\\t// options\\n\\n\\t\\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\\n\\t\\tvar steps = options.steps !== undefined ? options.steps : 1;\\n\\t\\tvar depth = options.depth !== undefined ? options.depth : 100;\\n\\n\\t\\tvar bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;\\n\\t\\tvar bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6;\\n\\t\\tvar bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2;\\n\\t\\tvar bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\\n\\n\\t\\tvar extrudePath = options.extrudePath;\\n\\n\\t\\tvar uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator;\\n\\n\\t\\t// deprecated options\\n\\n\\t\\tif ( options.amount !== undefined ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.ExtrudeBufferGeometry: amount has been renamed to depth.' );\\n\\t\\t\\tdepth = options.amount;\\n\\n\\t\\t}\\n\\n\\t\\t//\\n\\n\\t\\tvar extrudePts, extrudeByPath = false;\\n\\t\\tvar splineTube, binormal, normal, position2;\\n\\n\\t\\tif ( extrudePath ) {\\n\\n\\t\\t\\textrudePts = extrudePath.getSpacedPoints( steps );\\n\\n\\t\\t\\textrudeByPath = true;\\n\\t\\t\\tbevelEnabled = false; // bevels not supported for path extrusion\\n\\n\\t\\t\\t// SETUP TNB variables\\n\\n\\t\\t\\t// TODO1 - have a .isClosed in spline?\\n\\n\\t\\t\\tsplineTube = extrudePath.computeFrenetFrames( steps, false );\\n\\n\\t\\t\\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\\n\\n\\t\\t\\tbinormal = new Vector3();\\n\\t\\t\\tnormal = new Vector3();\\n\\t\\t\\tposition2 = new Vector3();\\n\\n\\t\\t}\\n\\n\\t\\t// Safeguards if bevels are not enabled\\n\\n\\t\\tif ( ! bevelEnabled ) {\\n\\n\\t\\t\\tbevelSegments = 0;\\n\\t\\t\\tbevelThickness = 0;\\n\\t\\t\\tbevelSize = 0;\\n\\n\\t\\t}\\n\\n\\t\\t// Variables initialization\\n\\n\\t\\tvar ahole, h, hl; // looping of holes\\n\\n\\t\\tvar shapePoints = shape.extractPoints( curveSegments );\\n\\n\\t\\tvar vertices = shapePoints.shape;\\n\\t\\tvar holes = shapePoints.holes;\\n\\n\\t\\tvar reverse = ! ShapeUtils.isClockWise( vertices );\\n\\n\\t\\tif ( reverse ) {\\n\\n\\t\\t\\tvertices = vertices.reverse();\\n\\n\\t\\t\\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\\n\\n\\t\\t\\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\\n\\n\\t\\t\\t\\tahole = holes[ h ];\\n\\n\\t\\t\\t\\tif ( ShapeUtils.isClockWise( ahole ) ) {\\n\\n\\t\\t\\t\\t\\tholes[ h ] = ahole.reverse();\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\n\\t\\tvar faces = ShapeUtils.triangulateShape( vertices, holes );\\n\\n\\t\\t/* Vertices */\\n\\n\\t\\tvar contour = vertices; // vertices has all points but contour has only points of circumference\\n\\n\\t\\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\\n\\n\\t\\t\\tahole = holes[ h ];\\n\\n\\t\\t\\tvertices = vertices.concat( ahole );\\n\\n\\t\\t}\\n\\n\\n\\t\\tfunction scalePt2( pt, vec, size ) {\\n\\n\\t\\t\\tif ( ! vec ) console.error( \\\"THREE.ExtrudeGeometry: vec does not exist\\\" );\\n\\n\\t\\t\\treturn vec.clone().multiplyScalar( size ).add( pt );\\n\\n\\t\\t}\\n\\n\\t\\tvar b, bs, t, z,\\n\\t\\t\\tvert, vlen = vertices.length,\\n\\t\\t\\tface, flen = faces.length;\\n\\n\\n\\t\\t// Find directions for point movement\\n\\n\\n\\t\\tfunction getBevelVec( inPt, inPrev, inNext ) {\\n\\n\\t\\t\\t// computes for inPt the corresponding point inPt' on a new contour\\n\\t\\t\\t//   shifted by 1 unit (length of normalized vector) to the left\\n\\t\\t\\t// if we walk along contour clockwise, this new contour is outside the old one\\n\\t\\t\\t//\\n\\t\\t\\t// inPt' is the intersection of the two lines parallel to the two\\n\\t\\t\\t//  adjacent edges of inPt at a distance of 1 unit on the left side.\\n\\n\\t\\t\\tvar v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt\\n\\n\\t\\t\\t// good reading for geometry algorithms (here: line-line intersection)\\n\\t\\t\\t// http://geomalgorithms.com/a05-_intersect-1.html\\n\\n\\t\\t\\tvar v_prev_x = inPt.x - inPrev.x,\\n\\t\\t\\t\\tv_prev_y = inPt.y - inPrev.y;\\n\\t\\t\\tvar v_next_x = inNext.x - inPt.x,\\n\\t\\t\\t\\tv_next_y = inNext.y - inPt.y;\\n\\n\\t\\t\\tvar v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );\\n\\n\\t\\t\\t// check for collinear edges\\n\\t\\t\\tvar collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );\\n\\n\\t\\t\\tif ( Math.abs( collinear0 ) > Number.EPSILON ) {\\n\\n\\t\\t\\t\\t// not collinear\\n\\n\\t\\t\\t\\t// length of vectors for normalizing\\n\\n\\t\\t\\t\\tvar v_prev_len = Math.sqrt( v_prev_lensq );\\n\\t\\t\\t\\tvar v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );\\n\\n\\t\\t\\t\\t// shift adjacent points by unit vectors to the left\\n\\n\\t\\t\\t\\tvar ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );\\n\\t\\t\\t\\tvar ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );\\n\\n\\t\\t\\t\\tvar ptNextShift_x = ( inNext.x - v_next_y / v_next_len );\\n\\t\\t\\t\\tvar ptNextShift_y = ( inNext.y + v_next_x / v_next_len );\\n\\n\\t\\t\\t\\t// scaling factor for v_prev to intersection point\\n\\n\\t\\t\\t\\tvar sf = ( ( ptNextShift_x - ptPrevShift_x ) * v_next_y -\\n\\t\\t\\t\\t\\t\\t( ptNextShift_y - ptPrevShift_y ) * v_next_x ) /\\n\\t\\t\\t\\t\\t( v_prev_x * v_next_y - v_prev_y * v_next_x );\\n\\n\\t\\t\\t\\t// vector from inPt to intersection point\\n\\n\\t\\t\\t\\tv_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );\\n\\t\\t\\t\\tv_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );\\n\\n\\t\\t\\t\\t// Don't normalize!, otherwise sharp corners become ugly\\n\\t\\t\\t\\t//  but prevent crazy spikes\\n\\t\\t\\t\\tvar v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );\\n\\t\\t\\t\\tif ( v_trans_lensq <= 2 ) {\\n\\n\\t\\t\\t\\t\\treturn new Vector2( v_trans_x, v_trans_y );\\n\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\tshrink_by = Math.sqrt( v_trans_lensq / 2 );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t// handle special case of collinear edges\\n\\n\\t\\t\\t\\tvar direction_eq = false; // assumes: opposite\\n\\t\\t\\t\\tif ( v_prev_x > Number.EPSILON ) {\\n\\n\\t\\t\\t\\t\\tif ( v_next_x > Number.EPSILON ) {\\n\\n\\t\\t\\t\\t\\t\\tdirection_eq = true;\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\tif ( v_prev_x < - Number.EPSILON ) {\\n\\n\\t\\t\\t\\t\\t\\tif ( v_next_x < - Number.EPSILON ) {\\n\\n\\t\\t\\t\\t\\t\\t\\tdirection_eq = true;\\n\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\t\\tif ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {\\n\\n\\t\\t\\t\\t\\t\\t\\tdirection_eq = true;\\n\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif ( direction_eq ) {\\n\\n\\t\\t\\t\\t\\t// console.log(\\\"Warning: lines are a straight sequence\\\");\\n\\t\\t\\t\\t\\tv_trans_x = - v_prev_y;\\n\\t\\t\\t\\t\\tv_trans_y = v_prev_x;\\n\\t\\t\\t\\t\\tshrink_by = Math.sqrt( v_prev_lensq );\\n\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\t// console.log(\\\"Warning: lines are a straight spike\\\");\\n\\t\\t\\t\\t\\tv_trans_x = v_prev_x;\\n\\t\\t\\t\\t\\tv_trans_y = v_prev_y;\\n\\t\\t\\t\\t\\tshrink_by = Math.sqrt( v_prev_lensq / 2 );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );\\n\\n\\t\\t}\\n\\n\\n\\t\\tvar contourMovements = [];\\n\\n\\t\\tfor ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\\n\\n\\t\\t\\tif ( j === il ) j = 0;\\n\\t\\t\\tif ( k === il ) k = 0;\\n\\n\\t\\t\\t//  (j)---(i)---(k)\\n\\t\\t\\t// console.log('i,j,k', i, j , k)\\n\\n\\t\\t\\tcontourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\\n\\n\\t\\t}\\n\\n\\t\\tvar holesMovements = [],\\n\\t\\t\\toneHoleMovements, verticesMovements = contourMovements.concat();\\n\\n\\t\\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\\n\\n\\t\\t\\tahole = holes[ h ];\\n\\n\\t\\t\\toneHoleMovements = [];\\n\\n\\t\\t\\tfor ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\\n\\n\\t\\t\\t\\tif ( j === il ) j = 0;\\n\\t\\t\\t\\tif ( k === il ) k = 0;\\n\\n\\t\\t\\t\\t//  (j)---(i)---(k)\\n\\t\\t\\t\\toneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tholesMovements.push( oneHoleMovements );\\n\\t\\t\\tverticesMovements = verticesMovements.concat( oneHoleMovements );\\n\\n\\t\\t}\\n\\n\\n\\t\\t// Loop bevelSegments, 1 for the front, 1 for the back\\n\\n\\t\\tfor ( b = 0; b < bevelSegments; b ++ ) {\\n\\n\\t\\t\\t//for ( b = bevelSegments; b > 0; b -- ) {\\n\\n\\t\\t\\tt = b / bevelSegments;\\n\\t\\t\\tz = bevelThickness * Math.cos( t * Math.PI / 2 );\\n\\t\\t\\tbs = bevelSize * Math.sin( t * Math.PI / 2 );\\n\\n\\t\\t\\t// contract shape\\n\\n\\t\\t\\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\\n\\n\\t\\t\\t\\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\\n\\n\\t\\t\\t\\tv( vert.x, vert.y, - z );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\t// expand holes\\n\\n\\t\\t\\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\\n\\n\\t\\t\\t\\tahole = holes[ h ];\\n\\t\\t\\t\\toneHoleMovements = holesMovements[ h ];\\n\\n\\t\\t\\t\\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\\n\\n\\t\\t\\t\\t\\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\\n\\n\\t\\t\\t\\t\\tv( vert.x, vert.y, - z );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tbs = bevelSize;\\n\\n\\t\\t// Back facing vertices\\n\\n\\t\\tfor ( i = 0; i < vlen; i ++ ) {\\n\\n\\t\\t\\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\\n\\n\\t\\t\\tif ( ! extrudeByPath ) {\\n\\n\\t\\t\\t\\tv( vert.x, vert.y, 0 );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\\n\\n\\t\\t\\t\\tnormal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );\\n\\t\\t\\t\\tbinormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );\\n\\n\\t\\t\\t\\tposition2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );\\n\\n\\t\\t\\t\\tv( position2.x, position2.y, position2.z );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\t// Add stepped vertices...\\n\\t\\t// Including front facing vertices\\n\\n\\t\\tvar s;\\n\\n\\t\\tfor ( s = 1; s <= steps; s ++ ) {\\n\\n\\t\\t\\tfor ( i = 0; i < vlen; i ++ ) {\\n\\n\\t\\t\\t\\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\\n\\n\\t\\t\\t\\tif ( ! extrudeByPath ) {\\n\\n\\t\\t\\t\\t\\tv( vert.x, vert.y, depth / steps * s );\\n\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\\n\\n\\t\\t\\t\\t\\tnormal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );\\n\\t\\t\\t\\t\\tbinormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );\\n\\n\\t\\t\\t\\t\\tposition2.copy( extrudePts[ s ] ).add( normal ).add( binormal );\\n\\n\\t\\t\\t\\t\\tv( position2.x, position2.y, position2.z );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\n\\t\\t// Add bevel segments planes\\n\\n\\t\\t//for ( b = 1; b <= bevelSegments; b ++ ) {\\n\\t\\tfor ( b = bevelSegments - 1; b >= 0; b -- ) {\\n\\n\\t\\t\\tt = b / bevelSegments;\\n\\t\\t\\tz = bevelThickness * Math.cos( t * Math.PI / 2 );\\n\\t\\t\\tbs = bevelSize * Math.sin( t * Math.PI / 2 );\\n\\n\\t\\t\\t// contract shape\\n\\n\\t\\t\\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\\n\\n\\t\\t\\t\\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\\n\\t\\t\\t\\tv( vert.x, vert.y, depth + z );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\t// expand holes\\n\\n\\t\\t\\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\\n\\n\\t\\t\\t\\tahole = holes[ h ];\\n\\t\\t\\t\\toneHoleMovements = holesMovements[ h ];\\n\\n\\t\\t\\t\\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\\n\\n\\t\\t\\t\\t\\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\\n\\n\\t\\t\\t\\t\\tif ( ! extrudeByPath ) {\\n\\n\\t\\t\\t\\t\\t\\tv( vert.x, vert.y, depth + z );\\n\\n\\t\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\t\\tv( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\t/* Faces */\\n\\n\\t\\t// Top and bottom faces\\n\\n\\t\\tbuildLidFaces();\\n\\n\\t\\t// Sides faces\\n\\n\\t\\tbuildSideFaces();\\n\\n\\n\\t\\t/////  Internal functions\\n\\n\\t\\tfunction buildLidFaces() {\\n\\n\\t\\t\\tvar start = verticesArray.length / 3;\\n\\n\\t\\t\\tif ( bevelEnabled ) {\\n\\n\\t\\t\\t\\tvar layer = 0; // steps + 1\\n\\t\\t\\t\\tvar offset = vlen * layer;\\n\\n\\t\\t\\t\\t// Bottom faces\\n\\n\\t\\t\\t\\tfor ( i = 0; i < flen; i ++ ) {\\n\\n\\t\\t\\t\\t\\tface = faces[ i ];\\n\\t\\t\\t\\t\\tf3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tlayer = steps + bevelSegments * 2;\\n\\t\\t\\t\\toffset = vlen * layer;\\n\\n\\t\\t\\t\\t// Top faces\\n\\n\\t\\t\\t\\tfor ( i = 0; i < flen; i ++ ) {\\n\\n\\t\\t\\t\\t\\tface = faces[ i ];\\n\\t\\t\\t\\t\\tf3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t// Bottom faces\\n\\n\\t\\t\\t\\tfor ( i = 0; i < flen; i ++ ) {\\n\\n\\t\\t\\t\\t\\tface = faces[ i ];\\n\\t\\t\\t\\t\\tf3( face[ 2 ], face[ 1 ], face[ 0 ] );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Top faces\\n\\n\\t\\t\\t\\tfor ( i = 0; i < flen; i ++ ) {\\n\\n\\t\\t\\t\\t\\tface = faces[ i ];\\n\\t\\t\\t\\t\\tf3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tscope.addGroup( start, verticesArray.length / 3 - start, 0 );\\n\\n\\t\\t}\\n\\n\\t\\t// Create faces for the z-sides of the shape\\n\\n\\t\\tfunction buildSideFaces() {\\n\\n\\t\\t\\tvar start = verticesArray.length / 3;\\n\\t\\t\\tvar layeroffset = 0;\\n\\t\\t\\tsidewalls( contour, layeroffset );\\n\\t\\t\\tlayeroffset += contour.length;\\n\\n\\t\\t\\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\\n\\n\\t\\t\\t\\tahole = holes[ h ];\\n\\t\\t\\t\\tsidewalls( ahole, layeroffset );\\n\\n\\t\\t\\t\\t//, true\\n\\t\\t\\t\\tlayeroffset += ahole.length;\\n\\n\\t\\t\\t}\\n\\n\\n\\t\\t\\tscope.addGroup( start, verticesArray.length / 3 - start, 1 );\\n\\n\\n\\t\\t}\\n\\n\\t\\tfunction sidewalls( contour, layeroffset ) {\\n\\n\\t\\t\\tvar j, k;\\n\\t\\t\\ti = contour.length;\\n\\n\\t\\t\\twhile ( -- i >= 0 ) {\\n\\n\\t\\t\\t\\tj = i;\\n\\t\\t\\t\\tk = i - 1;\\n\\t\\t\\t\\tif ( k < 0 ) k = contour.length - 1;\\n\\n\\t\\t\\t\\t//console.log('b', i,j, i-1, k,vertices.length);\\n\\n\\t\\t\\t\\tvar s = 0,\\n\\t\\t\\t\\t\\tsl = steps + bevelSegments * 2;\\n\\n\\t\\t\\t\\tfor ( s = 0; s < sl; s ++ ) {\\n\\n\\t\\t\\t\\t\\tvar slen1 = vlen * s;\\n\\t\\t\\t\\t\\tvar slen2 = vlen * ( s + 1 );\\n\\n\\t\\t\\t\\t\\tvar a = layeroffset + j + slen1,\\n\\t\\t\\t\\t\\t\\tb = layeroffset + k + slen1,\\n\\t\\t\\t\\t\\t\\tc = layeroffset + k + slen2,\\n\\t\\t\\t\\t\\t\\td = layeroffset + j + slen2;\\n\\n\\t\\t\\t\\t\\tf4( a, b, c, d );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tfunction v( x, y, z ) {\\n\\n\\t\\t\\tplaceholder.push( x );\\n\\t\\t\\tplaceholder.push( y );\\n\\t\\t\\tplaceholder.push( z );\\n\\n\\t\\t}\\n\\n\\n\\t\\tfunction f3( a, b, c ) {\\n\\n\\t\\t\\taddVertex( a );\\n\\t\\t\\taddVertex( b );\\n\\t\\t\\taddVertex( c );\\n\\n\\t\\t\\tvar nextIndex = verticesArray.length / 3;\\n\\t\\t\\tvar uvs = uvgen.generateTopUV( scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\\n\\n\\t\\t\\taddUV( uvs[ 0 ] );\\n\\t\\t\\taddUV( uvs[ 1 ] );\\n\\t\\t\\taddUV( uvs[ 2 ] );\\n\\n\\t\\t}\\n\\n\\t\\tfunction f4( a, b, c, d ) {\\n\\n\\t\\t\\taddVertex( a );\\n\\t\\t\\taddVertex( b );\\n\\t\\t\\taddVertex( d );\\n\\n\\t\\t\\taddVertex( b );\\n\\t\\t\\taddVertex( c );\\n\\t\\t\\taddVertex( d );\\n\\n\\n\\t\\t\\tvar nextIndex = verticesArray.length / 3;\\n\\t\\t\\tvar uvs = uvgen.generateSideWallUV( scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\\n\\n\\t\\t\\taddUV( uvs[ 0 ] );\\n\\t\\t\\taddUV( uvs[ 1 ] );\\n\\t\\t\\taddUV( uvs[ 3 ] );\\n\\n\\t\\t\\taddUV( uvs[ 1 ] );\\n\\t\\t\\taddUV( uvs[ 2 ] );\\n\\t\\t\\taddUV( uvs[ 3 ] );\\n\\n\\t\\t}\\n\\n\\t\\tfunction addVertex( index ) {\\n\\n\\t\\t\\tverticesArray.push( placeholder[ index * 3 + 0 ] );\\n\\t\\t\\tverticesArray.push( placeholder[ index * 3 + 1 ] );\\n\\t\\t\\tverticesArray.push( placeholder[ index * 3 + 2 ] );\\n\\n\\t\\t}\\n\\n\\n\\t\\tfunction addUV( vector2 ) {\\n\\n\\t\\t\\tuvArray.push( vector2.x );\\n\\t\\t\\tuvArray.push( vector2.y );\\n\\n\\t\\t}\\n\\n\\t}\\n\\n}\\n\\nExtrudeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\\nExtrudeBufferGeometry.prototype.constructor = ExtrudeBufferGeometry;\\n\\nExtrudeBufferGeometry.prototype.toJSON = function () {\\n\\n\\tvar data = BufferGeometry.prototype.toJSON.call( this );\\n\\n\\tvar shapes = this.parameters.shapes;\\n\\tvar options = this.parameters.options;\\n\\n\\treturn toJSON( shapes, options, data );\\n\\n};\\n\\n//\\n\\nvar WorldUVGenerator = {\\n\\n\\tgenerateTopUV: function ( geometry, vertices, indexA, indexB, indexC ) {\\n\\n\\t\\tvar a_x = vertices[ indexA * 3 ];\\n\\t\\tvar a_y = vertices[ indexA * 3 + 1 ];\\n\\t\\tvar b_x = vertices[ indexB * 3 ];\\n\\t\\tvar b_y = vertices[ indexB * 3 + 1 ];\\n\\t\\tvar c_x = vertices[ indexC * 3 ];\\n\\t\\tvar c_y = vertices[ indexC * 3 + 1 ];\\n\\n\\t\\treturn [\\n\\t\\t\\tnew Vector2( a_x, a_y ),\\n\\t\\t\\tnew Vector2( b_x, b_y ),\\n\\t\\t\\tnew Vector2( c_x, c_y )\\n\\t\\t];\\n\\n\\t},\\n\\n\\tgenerateSideWallUV: function ( geometry, vertices, indexA, indexB, indexC, indexD ) {\\n\\n\\t\\tvar a_x = vertices[ indexA * 3 ];\\n\\t\\tvar a_y = vertices[ indexA * 3 + 1 ];\\n\\t\\tvar a_z = vertices[ indexA * 3 + 2 ];\\n\\t\\tvar b_x = vertices[ indexB * 3 ];\\n\\t\\tvar b_y = vertices[ indexB * 3 + 1 ];\\n\\t\\tvar b_z = vertices[ indexB * 3 + 2 ];\\n\\t\\tvar c_x = vertices[ indexC * 3 ];\\n\\t\\tvar c_y = vertices[ indexC * 3 + 1 ];\\n\\t\\tvar c_z = vertices[ indexC * 3 + 2 ];\\n\\t\\tvar d_x = vertices[ indexD * 3 ];\\n\\t\\tvar d_y = vertices[ indexD * 3 + 1 ];\\n\\t\\tvar d_z = vertices[ indexD * 3 + 2 ];\\n\\n\\t\\tif ( Math.abs( a_y - b_y ) < 0.01 ) {\\n\\n\\t\\t\\treturn [\\n\\t\\t\\t\\tnew Vector2( a_x, 1 - a_z ),\\n\\t\\t\\t\\tnew Vector2( b_x, 1 - b_z ),\\n\\t\\t\\t\\tnew Vector2( c_x, 1 - c_z ),\\n\\t\\t\\t\\tnew Vector2( d_x, 1 - d_z )\\n\\t\\t\\t];\\n\\n\\t\\t} else {\\n\\n\\t\\t\\treturn [\\n\\t\\t\\t\\tnew Vector2( a_y, 1 - a_z ),\\n\\t\\t\\t\\tnew Vector2( b_y, 1 - b_z ),\\n\\t\\t\\t\\tnew Vector2( c_y, 1 - c_z ),\\n\\t\\t\\t\\tnew Vector2( d_y, 1 - d_z )\\n\\t\\t\\t];\\n\\n\\t\\t}\\n\\n\\t}\\n};\\n\\nfunction toJSON( shapes, options, data ) {\\n\\n\\t//\\n\\n\\tdata.shapes = [];\\n\\n\\tif ( Array.isArray( shapes ) ) {\\n\\n\\t\\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\\n\\n\\t\\t\\tvar shape = shapes[ i ];\\n\\n\\t\\t\\tdata.shapes.push( shape.uuid );\\n\\n\\t\\t}\\n\\n\\t} else {\\n\\n\\t\\tdata.shapes.push( shapes.uuid );\\n\\n\\t}\\n\\n\\t//\\n\\n\\tif ( options.extrudePath !== undefined ) data.options.extrudePath = options.extrudePath.toJSON();\\n\\n\\treturn data;\\n\\n}\\n\\n/**\\n * @author zz85 / http://www.lab4games.net/zz85/blog\\n * @author alteredq / http://alteredqualia.com/\\n *\\n * Text = 3D Text\\n *\\n * parameters = {\\n *  font: <THREE.Font>, // font\\n *\\n *  size: <float>, // size of the text\\n *  height: <float>, // thickness to extrude text\\n *  curveSegments: <int>, // number of points on the curves\\n *\\n *  bevelEnabled: <bool>, // turn on bevel\\n *  bevelThickness: <float>, // how deep into text bevel goes\\n *  bevelSize: <float> // how far from text outline is bevel\\n * }\\n */\\n\\n// TextGeometry\\n\\nfunction TextGeometry( text, parameters ) {\\n\\n\\tGeometry.call( this );\\n\\n\\tthis.type = 'TextGeometry';\\n\\n\\tthis.parameters = {\\n\\t\\ttext: text,\\n\\t\\tparameters: parameters\\n\\t};\\n\\n\\tthis.fromBufferGeometry( new TextBufferGeometry( text, parameters ) );\\n\\tthis.mergeVertices();\\n\\n}\\n\\nTextGeometry.prototype = Object.create( Geometry.prototype );\\nTextGeometry.prototype.constructor = TextGeometry;\\n\\n// TextBufferGeometry\\n\\nfunction TextBufferGeometry( text, parameters ) {\\n\\n\\tparameters = parameters || {};\\n\\n\\tvar font = parameters.font;\\n\\n\\tif ( ! ( font && font.isFont ) ) {\\n\\n\\t\\tconsole.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );\\n\\t\\treturn new Geometry();\\n\\n\\t}\\n\\n\\tvar shapes = font.generateShapes( text, parameters.size );\\n\\n\\t// translate parameters to ExtrudeGeometry API\\n\\n\\tparameters.depth = parameters.height !== undefined ? parameters.height : 50;\\n\\n\\t// defaults\\n\\n\\tif ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;\\n\\tif ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;\\n\\tif ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;\\n\\n\\tExtrudeBufferGeometry.call( this, shapes, parameters );\\n\\n\\tthis.type = 'TextBufferGeometry';\\n\\n}\\n\\nTextBufferGeometry.prototype = Object.create( ExtrudeBufferGeometry.prototype );\\nTextBufferGeometry.prototype.constructor = TextBufferGeometry;\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n * @author benaadams / https://twitter.com/ben_a_adams\\n * @author Mugen87 / https://github.com/Mugen87\\n */\\n\\n// SphereGeometry\\n\\nfunction SphereGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\\n\\n\\tGeometry.call( this );\\n\\n\\tthis.type = 'SphereGeometry';\\n\\n\\tthis.parameters = {\\n\\t\\tradius: radius,\\n\\t\\twidthSegments: widthSegments,\\n\\t\\theightSegments: heightSegments,\\n\\t\\tphiStart: phiStart,\\n\\t\\tphiLength: phiLength,\\n\\t\\tthetaStart: thetaStart,\\n\\t\\tthetaLength: thetaLength\\n\\t};\\n\\n\\tthis.fromBufferGeometry( new SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );\\n\\tthis.mergeVertices();\\n\\n}\\n\\nSphereGeometry.prototype = Object.create( Geometry.prototype );\\nSphereGeometry.prototype.constructor = SphereGeometry;\\n\\n// SphereBufferGeometry\\n\\nfunction SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\\n\\n\\tBufferGeometry.call( this );\\n\\n\\tthis.type = 'SphereBufferGeometry';\\n\\n\\tthis.parameters = {\\n\\t\\tradius: radius,\\n\\t\\twidthSegments: widthSegments,\\n\\t\\theightSegments: heightSegments,\\n\\t\\tphiStart: phiStart,\\n\\t\\tphiLength: phiLength,\\n\\t\\tthetaStart: thetaStart,\\n\\t\\tthetaLength: thetaLength\\n\\t};\\n\\n\\tradius = radius || 1;\\n\\n\\twidthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );\\n\\theightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );\\n\\n\\tphiStart = phiStart !== undefined ? phiStart : 0;\\n\\tphiLength = phiLength !== undefined ? phiLength : Math.PI * 2;\\n\\n\\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\\n\\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI;\\n\\n\\tvar thetaEnd = thetaStart + thetaLength;\\n\\n\\tvar ix, iy;\\n\\n\\tvar index = 0;\\n\\tvar grid = [];\\n\\n\\tvar vertex = new Vector3();\\n\\tvar normal = new Vector3();\\n\\n\\t// buffers\\n\\n\\tvar indices = [];\\n\\tvar vertices = [];\\n\\tvar normals = [];\\n\\tvar uvs = [];\\n\\n\\t// generate vertices, normals and uvs\\n\\n\\tfor ( iy = 0; iy <= heightSegments; iy ++ ) {\\n\\n\\t\\tvar verticesRow = [];\\n\\n\\t\\tvar v = iy / heightSegments;\\n\\n\\t\\tfor ( ix = 0; ix <= widthSegments; ix ++ ) {\\n\\n\\t\\t\\tvar u = ix / widthSegments;\\n\\n\\t\\t\\t// vertex\\n\\n\\t\\t\\tvertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\\n\\t\\t\\tvertex.y = radius * Math.cos( thetaStart + v * thetaLength );\\n\\t\\t\\tvertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\\n\\n\\t\\t\\tvertices.push( vertex.x, vertex.y, vertex.z );\\n\\n\\t\\t\\t// normal\\n\\n\\t\\t\\tnormal.set( vertex.x, vertex.y, vertex.z ).normalize();\\n\\t\\t\\tnormals.push( normal.x, normal.y, normal.z );\\n\\n\\t\\t\\t// uv\\n\\n\\t\\t\\tuvs.push( u, 1 - v );\\n\\n\\t\\t\\tverticesRow.push( index ++ );\\n\\n\\t\\t}\\n\\n\\t\\tgrid.push( verticesRow );\\n\\n\\t}\\n\\n\\t// indices\\n\\n\\tfor ( iy = 0; iy < heightSegments; iy ++ ) {\\n\\n\\t\\tfor ( ix = 0; ix < widthSegments; ix ++ ) {\\n\\n\\t\\t\\tvar a = grid[ iy ][ ix + 1 ];\\n\\t\\t\\tvar b = grid[ iy ][ ix ];\\n\\t\\t\\tvar c = grid[ iy + 1 ][ ix ];\\n\\t\\t\\tvar d = grid[ iy + 1 ][ ix + 1 ];\\n\\n\\t\\t\\tif ( iy !== 0 || thetaStart > 0 ) indices.push( a, b, d );\\n\\t\\t\\tif ( iy !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( b, c, d );\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\t// build geometry\\n\\n\\tthis.setIndex( indices );\\n\\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\\n\\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\\n\\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\\n\\n}\\n\\nSphereBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\\nSphereBufferGeometry.prototype.constructor = SphereBufferGeometry;\\n\\n/**\\n * @author Kaleb Murphy\\n * @author Mugen87 / https://github.com/Mugen87\\n */\\n\\n// RingGeometry\\n\\nfunction RingGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\\n\\n\\tGeometry.call( this );\\n\\n\\tthis.type = 'RingGeometry';\\n\\n\\tthis.parameters = {\\n\\t\\tinnerRadius: innerRadius,\\n\\t\\touterRadius: outerRadius,\\n\\t\\tthetaSegments: thetaSegments,\\n\\t\\tphiSegments: phiSegments,\\n\\t\\tthetaStart: thetaStart,\\n\\t\\tthetaLength: thetaLength\\n\\t};\\n\\n\\tthis.fromBufferGeometry( new RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );\\n\\tthis.mergeVertices();\\n\\n}\\n\\nRingGeometry.prototype = Object.create( Geometry.prototype );\\nRingGeometry.prototype.constructor = RingGeometry;\\n\\n// RingBufferGeometry\\n\\nfunction RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\\n\\n\\tBufferGeometry.call( this );\\n\\n\\tthis.type = 'RingBufferGeometry';\\n\\n\\tthis.parameters = {\\n\\t\\tinnerRadius: innerRadius,\\n\\t\\touterRadius: outerRadius,\\n\\t\\tthetaSegments: thetaSegments,\\n\\t\\tphiSegments: phiSegments,\\n\\t\\tthetaStart: thetaStart,\\n\\t\\tthetaLength: thetaLength\\n\\t};\\n\\n\\tinnerRadius = innerRadius || 0.5;\\n\\touterRadius = outerRadius || 1;\\n\\n\\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\\n\\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\\n\\n\\tthetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;\\n\\tphiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;\\n\\n\\t// buffers\\n\\n\\tvar indices = [];\\n\\tvar vertices = [];\\n\\tvar normals = [];\\n\\tvar uvs = [];\\n\\n\\t// some helper variables\\n\\n\\tvar segment;\\n\\tvar radius = innerRadius;\\n\\tvar radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\\n\\tvar vertex = new Vector3();\\n\\tvar uv = new Vector2();\\n\\tvar j, i;\\n\\n\\t// generate vertices, normals and uvs\\n\\n\\tfor ( j = 0; j <= phiSegments; j ++ ) {\\n\\n\\t\\tfor ( i = 0; i <= thetaSegments; i ++ ) {\\n\\n\\t\\t\\t// values are generate from the inside of the ring to the outside\\n\\n\\t\\t\\tsegment = thetaStart + i / thetaSegments * thetaLength;\\n\\n\\t\\t\\t// vertex\\n\\n\\t\\t\\tvertex.x = radius * Math.cos( segment );\\n\\t\\t\\tvertex.y = radius * Math.sin( segment );\\n\\n\\t\\t\\tvertices.push( vertex.x, vertex.y, vertex.z );\\n\\n\\t\\t\\t// normal\\n\\n\\t\\t\\tnormals.push( 0, 0, 1 );\\n\\n\\t\\t\\t// uv\\n\\n\\t\\t\\tuv.x = ( vertex.x / outerRadius + 1 ) / 2;\\n\\t\\t\\tuv.y = ( vertex.y / outerRadius + 1 ) / 2;\\n\\n\\t\\t\\tuvs.push( uv.x, uv.y );\\n\\n\\t\\t}\\n\\n\\t\\t// increase the radius for next row of vertices\\n\\n\\t\\tradius += radiusStep;\\n\\n\\t}\\n\\n\\t// indices\\n\\n\\tfor ( j = 0; j < phiSegments; j ++ ) {\\n\\n\\t\\tvar thetaSegmentLevel = j * ( thetaSegments + 1 );\\n\\n\\t\\tfor ( i = 0; i < thetaSegments; i ++ ) {\\n\\n\\t\\t\\tsegment = i + thetaSegmentLevel;\\n\\n\\t\\t\\tvar a = segment;\\n\\t\\t\\tvar b = segment + thetaSegments + 1;\\n\\t\\t\\tvar c = segment + thetaSegments + 2;\\n\\t\\t\\tvar d = segment + 1;\\n\\n\\t\\t\\t// faces\\n\\n\\t\\t\\tindices.push( a, b, d );\\n\\t\\t\\tindices.push( b, c, d );\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\t// build geometry\\n\\n\\tthis.setIndex( indices );\\n\\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\\n\\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\\n\\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\\n\\n}\\n\\nRingBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\\nRingBufferGeometry.prototype.constructor = RingBufferGeometry;\\n\\n/**\\n * @author zz85 / https://github.com/zz85\\n * @author bhouston / http://clara.io\\n * @author Mugen87 / https://github.com/Mugen87\\n */\\n\\n// LatheGeometry\\n\\nfunction LatheGeometry( points, segments, phiStart, phiLength ) {\\n\\n\\tGeometry.call( this );\\n\\n\\tthis.type = 'LatheGeometry';\\n\\n\\tthis.parameters = {\\n\\t\\tpoints: points,\\n\\t\\tsegments: segments,\\n\\t\\tphiStart: phiStart,\\n\\t\\tphiLength: phiLength\\n\\t};\\n\\n\\tthis.fromBufferGeometry( new LatheBufferGeometry( points, segments, phiStart, phiLength ) );\\n\\tthis.mergeVertices();\\n\\n}\\n\\nLatheGeometry.prototype = Object.create( Geometry.prototype );\\nLatheGeometry.prototype.constructor = LatheGeometry;\\n\\n// LatheBufferGeometry\\n\\nfunction LatheBufferGeometry( points, segments, phiStart, phiLength ) {\\n\\n\\tBufferGeometry.call( this );\\n\\n\\tthis.type = 'LatheBufferGeometry';\\n\\n\\tthis.parameters = {\\n\\t\\tpoints: points,\\n\\t\\tsegments: segments,\\n\\t\\tphiStart: phiStart,\\n\\t\\tphiLength: phiLength\\n\\t};\\n\\n\\tsegments = Math.floor( segments ) || 12;\\n\\tphiStart = phiStart || 0;\\n\\tphiLength = phiLength || Math.PI * 2;\\n\\n\\t// clamp phiLength so it's in range of [ 0, 2PI ]\\n\\n\\tphiLength = _Math.clamp( phiLength, 0, Math.PI * 2 );\\n\\n\\n\\t// buffers\\n\\n\\tvar indices = [];\\n\\tvar vertices = [];\\n\\tvar uvs = [];\\n\\n\\t// helper variables\\n\\n\\tvar base;\\n\\tvar inverseSegments = 1.0 / segments;\\n\\tvar vertex = new Vector3();\\n\\tvar uv = new Vector2();\\n\\tvar i, j;\\n\\n\\t// generate vertices and uvs\\n\\n\\tfor ( i = 0; i <= segments; i ++ ) {\\n\\n\\t\\tvar phi = phiStart + i * inverseSegments * phiLength;\\n\\n\\t\\tvar sin = Math.sin( phi );\\n\\t\\tvar cos = Math.cos( phi );\\n\\n\\t\\tfor ( j = 0; j <= ( points.length - 1 ); j ++ ) {\\n\\n\\t\\t\\t// vertex\\n\\n\\t\\t\\tvertex.x = points[ j ].x * sin;\\n\\t\\t\\tvertex.y = points[ j ].y;\\n\\t\\t\\tvertex.z = points[ j ].x * cos;\\n\\n\\t\\t\\tvertices.push( vertex.x, vertex.y, vertex.z );\\n\\n\\t\\t\\t// uv\\n\\n\\t\\t\\tuv.x = i / segments;\\n\\t\\t\\tuv.y = j / ( points.length - 1 );\\n\\n\\t\\t\\tuvs.push( uv.x, uv.y );\\n\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\t// indices\\n\\n\\tfor ( i = 0; i < segments; i ++ ) {\\n\\n\\t\\tfor ( j = 0; j < ( points.length - 1 ); j ++ ) {\\n\\n\\t\\t\\tbase = j + i * points.length;\\n\\n\\t\\t\\tvar a = base;\\n\\t\\t\\tvar b = base + points.length;\\n\\t\\t\\tvar c = base + points.length + 1;\\n\\t\\t\\tvar d = base + 1;\\n\\n\\t\\t\\t// faces\\n\\n\\t\\t\\tindices.push( a, b, d );\\n\\t\\t\\tindices.push( b, c, d );\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\t// build geometry\\n\\n\\tthis.setIndex( indices );\\n\\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\\n\\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\\n\\n\\t// generate normals\\n\\n\\tthis.computeVertexNormals();\\n\\n\\t// if the geometry is closed, we need to average the normals along the seam.\\n\\t// because the corresponding vertices are identical (but still have different UVs).\\n\\n\\tif ( phiLength === Math.PI * 2 ) {\\n\\n\\t\\tvar normals = this.attributes.normal.array;\\n\\t\\tvar n1 = new Vector3();\\n\\t\\tvar n2 = new Vector3();\\n\\t\\tvar n = new Vector3();\\n\\n\\t\\t// this is the buffer offset for the last line of vertices\\n\\n\\t\\tbase = segments * points.length * 3;\\n\\n\\t\\tfor ( i = 0, j = 0; i < points.length; i ++, j += 3 ) {\\n\\n\\t\\t\\t// select the normal of the vertex in the first line\\n\\n\\t\\t\\tn1.x = normals[ j + 0 ];\\n\\t\\t\\tn1.y = normals[ j + 1 ];\\n\\t\\t\\tn1.z = normals[ j + 2 ];\\n\\n\\t\\t\\t// select the normal of the vertex in the last line\\n\\n\\t\\t\\tn2.x = normals[ base + j + 0 ];\\n\\t\\t\\tn2.y = normals[ base + j + 1 ];\\n\\t\\t\\tn2.z = normals[ base + j + 2 ];\\n\\n\\t\\t\\t// average normals\\n\\n\\t\\t\\tn.addVectors( n1, n2 ).normalize();\\n\\n\\t\\t\\t// assign the new values to both normals\\n\\n\\t\\t\\tnormals[ j + 0 ] = normals[ base + j + 0 ] = n.x;\\n\\t\\t\\tnormals[ j + 1 ] = normals[ base + j + 1 ] = n.y;\\n\\t\\t\\tnormals[ j + 2 ] = normals[ base + j + 2 ] = n.z;\\n\\n\\t\\t}\\n\\n\\t}\\n\\n}\\n\\nLatheBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\\nLatheBufferGeometry.prototype.constructor = LatheBufferGeometry;\\n\\n/**\\n * @author jonobr1 / http://jonobr1.com\\n * @author Mugen87 / https://github.com/Mugen87\\n */\\n\\n// ShapeGeometry\\n\\nfunction ShapeGeometry( shapes, curveSegments ) {\\n\\n\\tGeometry.call( this );\\n\\n\\tthis.type = 'ShapeGeometry';\\n\\n\\tif ( typeof curveSegments === 'object' ) {\\n\\n\\t\\tconsole.warn( 'THREE.ShapeGeometry: Options parameter has been removed.' );\\n\\n\\t\\tcurveSegments = curveSegments.curveSegments;\\n\\n\\t}\\n\\n\\tthis.parameters = {\\n\\t\\tshapes: shapes,\\n\\t\\tcurveSegments: curveSegments\\n\\t};\\n\\n\\tthis.fromBufferGeometry( new ShapeBufferGeometry( shapes, curveSegments ) );\\n\\tthis.mergeVertices();\\n\\n}\\n\\nShapeGeometry.prototype = Object.create( Geometry.prototype );\\nShapeGeometry.prototype.constructor = ShapeGeometry;\\n\\nShapeGeometry.prototype.toJSON = function () {\\n\\n\\tvar data = Geometry.prototype.toJSON.call( this );\\n\\n\\tvar shapes = this.parameters.shapes;\\n\\n\\treturn toJSON$1( shapes, data );\\n\\n};\\n\\n// ShapeBufferGeometry\\n\\nfunction ShapeBufferGeometry( shapes, curveSegments ) {\\n\\n\\tBufferGeometry.call( this );\\n\\n\\tthis.type = 'ShapeBufferGeometry';\\n\\n\\tthis.parameters = {\\n\\t\\tshapes: shapes,\\n\\t\\tcurveSegments: curveSegments\\n\\t};\\n\\n\\tcurveSegments = curveSegments || 12;\\n\\n\\t// buffers\\n\\n\\tvar indices = [];\\n\\tvar vertices = [];\\n\\tvar normals = [];\\n\\tvar uvs = [];\\n\\n\\t// helper variables\\n\\n\\tvar groupStart = 0;\\n\\tvar groupCount = 0;\\n\\n\\t// allow single and array values for \\\"shapes\\\" parameter\\n\\n\\tif ( Array.isArray( shapes ) === false ) {\\n\\n\\t\\taddShape( shapes );\\n\\n\\t} else {\\n\\n\\t\\tfor ( var i = 0; i < shapes.length; i ++ ) {\\n\\n\\t\\t\\taddShape( shapes[ i ] );\\n\\n\\t\\t\\tthis.addGroup( groupStart, groupCount, i ); // enables MultiMaterial support\\n\\n\\t\\t\\tgroupStart += groupCount;\\n\\t\\t\\tgroupCount = 0;\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\t// build geometry\\n\\n\\tthis.setIndex( indices );\\n\\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\\n\\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\\n\\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\\n\\n\\n\\t// helper functions\\n\\n\\tfunction addShape( shape ) {\\n\\n\\t\\tvar i, l, shapeHole;\\n\\n\\t\\tvar indexOffset = vertices.length / 3;\\n\\t\\tvar points = shape.extractPoints( curveSegments );\\n\\n\\t\\tvar shapeVertices = points.shape;\\n\\t\\tvar shapeHoles = points.holes;\\n\\n\\t\\t// check direction of vertices\\n\\n\\t\\tif ( ShapeUtils.isClockWise( shapeVertices ) === false ) {\\n\\n\\t\\t\\tshapeVertices = shapeVertices.reverse();\\n\\n\\t\\t}\\n\\n\\t\\tfor ( i = 0, l = shapeHoles.length; i < l; i ++ ) {\\n\\n\\t\\t\\tshapeHole = shapeHoles[ i ];\\n\\n\\t\\t\\tif ( ShapeUtils.isClockWise( shapeHole ) === true ) {\\n\\n\\t\\t\\t\\tshapeHoles[ i ] = shapeHole.reverse();\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tvar faces = ShapeUtils.triangulateShape( shapeVertices, shapeHoles );\\n\\n\\t\\t// join vertices of inner and outer paths to a single array\\n\\n\\t\\tfor ( i = 0, l = shapeHoles.length; i < l; i ++ ) {\\n\\n\\t\\t\\tshapeHole = shapeHoles[ i ];\\n\\t\\t\\tshapeVertices = shapeVertices.concat( shapeHole );\\n\\n\\t\\t}\\n\\n\\t\\t// vertices, normals, uvs\\n\\n\\t\\tfor ( i = 0, l = shapeVertices.length; i < l; i ++ ) {\\n\\n\\t\\t\\tvar vertex = shapeVertices[ i ];\\n\\n\\t\\t\\tvertices.push( vertex.x, vertex.y, 0 );\\n\\t\\t\\tnormals.push( 0, 0, 1 );\\n\\t\\t\\tuvs.push( vertex.x, vertex.y ); // world uvs\\n\\n\\t\\t}\\n\\n\\t\\t// incides\\n\\n\\t\\tfor ( i = 0, l = faces.length; i < l; i ++ ) {\\n\\n\\t\\t\\tvar face = faces[ i ];\\n\\n\\t\\t\\tvar a = face[ 0 ] + indexOffset;\\n\\t\\t\\tvar b = face[ 1 ] + indexOffset;\\n\\t\\t\\tvar c = face[ 2 ] + indexOffset;\\n\\n\\t\\t\\tindices.push( a, b, c );\\n\\t\\t\\tgroupCount += 3;\\n\\n\\t\\t}\\n\\n\\t}\\n\\n}\\n\\nShapeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\\nShapeBufferGeometry.prototype.constructor = ShapeBufferGeometry;\\n\\nShapeBufferGeometry.prototype.toJSON = function () {\\n\\n\\tvar data = BufferGeometry.prototype.toJSON.call( this );\\n\\n\\tvar shapes = this.parameters.shapes;\\n\\n\\treturn toJSON$1( shapes, data );\\n\\n};\\n\\n//\\n\\nfunction toJSON$1( shapes, data ) {\\n\\n\\tdata.shapes = [];\\n\\n\\tif ( Array.isArray( shapes ) ) {\\n\\n\\t\\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\\n\\n\\t\\t\\tvar shape = shapes[ i ];\\n\\n\\t\\t\\tdata.shapes.push( shape.uuid );\\n\\n\\t\\t}\\n\\n\\t} else {\\n\\n\\t\\tdata.shapes.push( shapes.uuid );\\n\\n\\t}\\n\\n\\treturn data;\\n\\n}\\n\\n/**\\n * @author WestLangley / http://github.com/WestLangley\\n * @author Mugen87 / https://github.com/Mugen87\\n */\\n\\nfunction EdgesGeometry( geometry, thresholdAngle ) {\\n\\n\\tBufferGeometry.call( this );\\n\\n\\tthis.type = 'EdgesGeometry';\\n\\n\\tthis.parameters = {\\n\\t\\tthresholdAngle: thresholdAngle\\n\\t};\\n\\n\\tthresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;\\n\\n\\t// buffer\\n\\n\\tvar vertices = [];\\n\\n\\t// helper variables\\n\\n\\tvar thresholdDot = Math.cos( _Math.DEG2RAD * thresholdAngle );\\n\\tvar edge = [ 0, 0 ], edges = {}, edge1, edge2;\\n\\tvar key, keys = [ 'a', 'b', 'c' ];\\n\\n\\t// prepare source geometry\\n\\n\\tvar geometry2;\\n\\n\\tif ( geometry.isBufferGeometry ) {\\n\\n\\t\\tgeometry2 = new Geometry();\\n\\t\\tgeometry2.fromBufferGeometry( geometry );\\n\\n\\t} else {\\n\\n\\t\\tgeometry2 = geometry.clone();\\n\\n\\t}\\n\\n\\tgeometry2.mergeVertices();\\n\\tgeometry2.computeFaceNormals();\\n\\n\\tvar sourceVertices = geometry2.vertices;\\n\\tvar faces = geometry2.faces;\\n\\n\\t// now create a data structure where each entry represents an edge with its adjoining faces\\n\\n\\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\\n\\n\\t\\tvar face = faces[ i ];\\n\\n\\t\\tfor ( var j = 0; j < 3; j ++ ) {\\n\\n\\t\\t\\tedge1 = face[ keys[ j ] ];\\n\\t\\t\\tedge2 = face[ keys[ ( j + 1 ) % 3 ] ];\\n\\t\\t\\tedge[ 0 ] = Math.min( edge1, edge2 );\\n\\t\\t\\tedge[ 1 ] = Math.max( edge1, edge2 );\\n\\n\\t\\t\\tkey = edge[ 0 ] + ',' + edge[ 1 ];\\n\\n\\t\\t\\tif ( edges[ key ] === undefined ) {\\n\\n\\t\\t\\t\\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ], face1: i, face2: undefined };\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tedges[ key ].face2 = i;\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\t// generate vertices\\n\\n\\tfor ( key in edges ) {\\n\\n\\t\\tvar e = edges[ key ];\\n\\n\\t\\t// an edge is only rendered if the angle (in degrees) between the face normals of the adjoining faces exceeds this value. default = 1 degree.\\n\\n\\t\\tif ( e.face2 === undefined || faces[ e.face1 ].normal.dot( faces[ e.face2 ].normal ) <= thresholdDot ) {\\n\\n\\t\\t\\tvar vertex = sourceVertices[ e.index1 ];\\n\\t\\t\\tvertices.push( vertex.x, vertex.y, vertex.z );\\n\\n\\t\\t\\tvertex = sourceVertices[ e.index2 ];\\n\\t\\t\\tvertices.push( vertex.x, vertex.y, vertex.z );\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\t// build geometry\\n\\n\\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\\n\\n}\\n\\nEdgesGeometry.prototype = Object.create( BufferGeometry.prototype );\\nEdgesGeometry.prototype.constructor = EdgesGeometry;\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n * @author Mugen87 / https://github.com/Mugen87\\n */\\n\\n// CylinderGeometry\\n\\nfunction CylinderGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\\n\\n\\tGeometry.call( this );\\n\\n\\tthis.type = 'CylinderGeometry';\\n\\n\\tthis.parameters = {\\n\\t\\tradiusTop: radiusTop,\\n\\t\\tradiusBottom: radiusBottom,\\n\\t\\theight: height,\\n\\t\\tradialSegments: radialSegments,\\n\\t\\theightSegments: heightSegments,\\n\\t\\topenEnded: openEnded,\\n\\t\\tthetaStart: thetaStart,\\n\\t\\tthetaLength: thetaLength\\n\\t};\\n\\n\\tthis.fromBufferGeometry( new CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );\\n\\tthis.mergeVertices();\\n\\n}\\n\\nCylinderGeometry.prototype = Object.create( Geometry.prototype );\\nCylinderGeometry.prototype.constructor = CylinderGeometry;\\n\\n// CylinderBufferGeometry\\n\\nfunction CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\\n\\n\\tBufferGeometry.call( this );\\n\\n\\tthis.type = 'CylinderBufferGeometry';\\n\\n\\tthis.parameters = {\\n\\t\\tradiusTop: radiusTop,\\n\\t\\tradiusBottom: radiusBottom,\\n\\t\\theight: height,\\n\\t\\tradialSegments: radialSegments,\\n\\t\\theightSegments: heightSegments,\\n\\t\\topenEnded: openEnded,\\n\\t\\tthetaStart: thetaStart,\\n\\t\\tthetaLength: thetaLength\\n\\t};\\n\\n\\tvar scope = this;\\n\\n\\tradiusTop = radiusTop !== undefined ? radiusTop : 1;\\n\\tradiusBottom = radiusBottom !== undefined ? radiusBottom : 1;\\n\\theight = height || 1;\\n\\n\\tradialSegments = Math.floor( radialSegments ) || 8;\\n\\theightSegments = Math.floor( heightSegments ) || 1;\\n\\n\\topenEnded = openEnded !== undefined ? openEnded : false;\\n\\tthetaStart = thetaStart !== undefined ? thetaStart : 0.0;\\n\\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\\n\\n\\t// buffers\\n\\n\\tvar indices = [];\\n\\tvar vertices = [];\\n\\tvar normals = [];\\n\\tvar uvs = [];\\n\\n\\t// helper variables\\n\\n\\tvar index = 0;\\n\\tvar indexArray = [];\\n\\tvar halfHeight = height / 2;\\n\\tvar groupStart = 0;\\n\\n\\t// generate geometry\\n\\n\\tgenerateTorso();\\n\\n\\tif ( openEnded === false ) {\\n\\n\\t\\tif ( radiusTop > 0 ) generateCap( true );\\n\\t\\tif ( radiusBottom > 0 ) generateCap( false );\\n\\n\\t}\\n\\n\\t// build geometry\\n\\n\\tthis.setIndex( indices );\\n\\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\\n\\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\\n\\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\\n\\n\\tfunction generateTorso() {\\n\\n\\t\\tvar x, y;\\n\\t\\tvar normal = new Vector3();\\n\\t\\tvar vertex = new Vector3();\\n\\n\\t\\tvar groupCount = 0;\\n\\n\\t\\t// this will be used to calculate the normal\\n\\t\\tvar slope = ( radiusBottom - radiusTop ) / height;\\n\\n\\t\\t// generate vertices, normals and uvs\\n\\n\\t\\tfor ( y = 0; y <= heightSegments; y ++ ) {\\n\\n\\t\\t\\tvar indexRow = [];\\n\\n\\t\\t\\tvar v = y / heightSegments;\\n\\n\\t\\t\\t// calculate the radius of the current row\\n\\n\\t\\t\\tvar radius = v * ( radiusBottom - radiusTop ) + radiusTop;\\n\\n\\t\\t\\tfor ( x = 0; x <= radialSegments; x ++ ) {\\n\\n\\t\\t\\t\\tvar u = x / radialSegments;\\n\\n\\t\\t\\t\\tvar theta = u * thetaLength + thetaStart;\\n\\n\\t\\t\\t\\tvar sinTheta = Math.sin( theta );\\n\\t\\t\\t\\tvar cosTheta = Math.cos( theta );\\n\\n\\t\\t\\t\\t// vertex\\n\\n\\t\\t\\t\\tvertex.x = radius * sinTheta;\\n\\t\\t\\t\\tvertex.y = - v * height + halfHeight;\\n\\t\\t\\t\\tvertex.z = radius * cosTheta;\\n\\t\\t\\t\\tvertices.push( vertex.x, vertex.y, vertex.z );\\n\\n\\t\\t\\t\\t// normal\\n\\n\\t\\t\\t\\tnormal.set( sinTheta, slope, cosTheta ).normalize();\\n\\t\\t\\t\\tnormals.push( normal.x, normal.y, normal.z );\\n\\n\\t\\t\\t\\t// uv\\n\\n\\t\\t\\t\\tuvs.push( u, 1 - v );\\n\\n\\t\\t\\t\\t// save index of vertex in respective row\\n\\n\\t\\t\\t\\tindexRow.push( index ++ );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\t// now save vertices of the row in our index array\\n\\n\\t\\t\\tindexArray.push( indexRow );\\n\\n\\t\\t}\\n\\n\\t\\t// generate indices\\n\\n\\t\\tfor ( x = 0; x < radialSegments; x ++ ) {\\n\\n\\t\\t\\tfor ( y = 0; y < heightSegments; y ++ ) {\\n\\n\\t\\t\\t\\t// we use the index array to access the correct indices\\n\\n\\t\\t\\t\\tvar a = indexArray[ y ][ x ];\\n\\t\\t\\t\\tvar b = indexArray[ y + 1 ][ x ];\\n\\t\\t\\t\\tvar c = indexArray[ y + 1 ][ x + 1 ];\\n\\t\\t\\t\\tvar d = indexArray[ y ][ x + 1 ];\\n\\n\\t\\t\\t\\t// faces\\n\\n\\t\\t\\t\\tindices.push( a, b, d );\\n\\t\\t\\t\\tindices.push( b, c, d );\\n\\n\\t\\t\\t\\t// update group counter\\n\\n\\t\\t\\t\\tgroupCount += 6;\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\t// add a group to the geometry. this will ensure multi material support\\n\\n\\t\\tscope.addGroup( groupStart, groupCount, 0 );\\n\\n\\t\\t// calculate new start value for groups\\n\\n\\t\\tgroupStart += groupCount;\\n\\n\\t}\\n\\n\\tfunction generateCap( top ) {\\n\\n\\t\\tvar x, centerIndexStart, centerIndexEnd;\\n\\n\\t\\tvar uv = new Vector2();\\n\\t\\tvar vertex = new Vector3();\\n\\n\\t\\tvar groupCount = 0;\\n\\n\\t\\tvar radius = ( top === true ) ? radiusTop : radiusBottom;\\n\\t\\tvar sign = ( top === true ) ? 1 : - 1;\\n\\n\\t\\t// save the index of the first center vertex\\n\\t\\tcenterIndexStart = index;\\n\\n\\t\\t// first we generate the center vertex data of the cap.\\n\\t\\t// because the geometry needs one set of uvs per face,\\n\\t\\t// we must generate a center vertex per face/segment\\n\\n\\t\\tfor ( x = 1; x <= radialSegments; x ++ ) {\\n\\n\\t\\t\\t// vertex\\n\\n\\t\\t\\tvertices.push( 0, halfHeight * sign, 0 );\\n\\n\\t\\t\\t// normal\\n\\n\\t\\t\\tnormals.push( 0, sign, 0 );\\n\\n\\t\\t\\t// uv\\n\\n\\t\\t\\tuvs.push( 0.5, 0.5 );\\n\\n\\t\\t\\t// increase index\\n\\n\\t\\t\\tindex ++;\\n\\n\\t\\t}\\n\\n\\t\\t// save the index of the last center vertex\\n\\n\\t\\tcenterIndexEnd = index;\\n\\n\\t\\t// now we generate the surrounding vertices, normals and uvs\\n\\n\\t\\tfor ( x = 0; x <= radialSegments; x ++ ) {\\n\\n\\t\\t\\tvar u = x / radialSegments;\\n\\t\\t\\tvar theta = u * thetaLength + thetaStart;\\n\\n\\t\\t\\tvar cosTheta = Math.cos( theta );\\n\\t\\t\\tvar sinTheta = Math.sin( theta );\\n\\n\\t\\t\\t// vertex\\n\\n\\t\\t\\tvertex.x = radius * sinTheta;\\n\\t\\t\\tvertex.y = halfHeight * sign;\\n\\t\\t\\tvertex.z = radius * cosTheta;\\n\\t\\t\\tvertices.push( vertex.x, vertex.y, vertex.z );\\n\\n\\t\\t\\t// normal\\n\\n\\t\\t\\tnormals.push( 0, sign, 0 );\\n\\n\\t\\t\\t// uv\\n\\n\\t\\t\\tuv.x = ( cosTheta * 0.5 ) + 0.5;\\n\\t\\t\\tuv.y = ( sinTheta * 0.5 * sign ) + 0.5;\\n\\t\\t\\tuvs.push( uv.x, uv.y );\\n\\n\\t\\t\\t// increase index\\n\\n\\t\\t\\tindex ++;\\n\\n\\t\\t}\\n\\n\\t\\t// generate indices\\n\\n\\t\\tfor ( x = 0; x < radialSegments; x ++ ) {\\n\\n\\t\\t\\tvar c = centerIndexStart + x;\\n\\t\\t\\tvar i = centerIndexEnd + x;\\n\\n\\t\\t\\tif ( top === true ) {\\n\\n\\t\\t\\t\\t// face top\\n\\n\\t\\t\\t\\tindices.push( i, i + 1, c );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t// face bottom\\n\\n\\t\\t\\t\\tindices.push( i + 1, i, c );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tgroupCount += 3;\\n\\n\\t\\t}\\n\\n\\t\\t// add a group to the geometry. this will ensure multi material support\\n\\n\\t\\tscope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );\\n\\n\\t\\t// calculate new start value for groups\\n\\n\\t\\tgroupStart += groupCount;\\n\\n\\t}\\n\\n}\\n\\nCylinderBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\\nCylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;\\n\\n/**\\n * @author abelnation / http://github.com/abelnation\\n */\\n\\n// ConeGeometry\\n\\nfunction ConeGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\\n\\n\\tCylinderGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\\n\\n\\tthis.type = 'ConeGeometry';\\n\\n\\tthis.parameters = {\\n\\t\\tradius: radius,\\n\\t\\theight: height,\\n\\t\\tradialSegments: radialSegments,\\n\\t\\theightSegments: heightSegments,\\n\\t\\topenEnded: openEnded,\\n\\t\\tthetaStart: thetaStart,\\n\\t\\tthetaLength: thetaLength\\n\\t};\\n\\n}\\n\\nConeGeometry.prototype = Object.create( CylinderGeometry.prototype );\\nConeGeometry.prototype.constructor = ConeGeometry;\\n\\n// ConeBufferGeometry\\n\\nfunction ConeBufferGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\\n\\n\\tCylinderBufferGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\\n\\n\\tthis.type = 'ConeBufferGeometry';\\n\\n\\tthis.parameters = {\\n\\t\\tradius: radius,\\n\\t\\theight: height,\\n\\t\\tradialSegments: radialSegments,\\n\\t\\theightSegments: heightSegments,\\n\\t\\topenEnded: openEnded,\\n\\t\\tthetaStart: thetaStart,\\n\\t\\tthetaLength: thetaLength\\n\\t};\\n\\n}\\n\\nConeBufferGeometry.prototype = Object.create( CylinderBufferGeometry.prototype );\\nConeBufferGeometry.prototype.constructor = ConeBufferGeometry;\\n\\n/**\\n * @author benaadams / https://twitter.com/ben_a_adams\\n * @author Mugen87 / https://github.com/Mugen87\\n * @author hughes\\n */\\n\\n// CircleGeometry\\n\\nfunction CircleGeometry( radius, segments, thetaStart, thetaLength ) {\\n\\n\\tGeometry.call( this );\\n\\n\\tthis.type = 'CircleGeometry';\\n\\n\\tthis.parameters = {\\n\\t\\tradius: radius,\\n\\t\\tsegments: segments,\\n\\t\\tthetaStart: thetaStart,\\n\\t\\tthetaLength: thetaLength\\n\\t};\\n\\n\\tthis.fromBufferGeometry( new CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );\\n\\tthis.mergeVertices();\\n\\n}\\n\\nCircleGeometry.prototype = Object.create( Geometry.prototype );\\nCircleGeometry.prototype.constructor = CircleGeometry;\\n\\n// CircleBufferGeometry\\n\\nfunction CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) {\\n\\n\\tBufferGeometry.call( this );\\n\\n\\tthis.type = 'CircleBufferGeometry';\\n\\n\\tthis.parameters = {\\n\\t\\tradius: radius,\\n\\t\\tsegments: segments,\\n\\t\\tthetaStart: thetaStart,\\n\\t\\tthetaLength: thetaLength\\n\\t};\\n\\n\\tradius = radius || 1;\\n\\tsegments = segments !== undefined ? Math.max( 3, segments ) : 8;\\n\\n\\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\\n\\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\\n\\n\\t// buffers\\n\\n\\tvar indices = [];\\n\\tvar vertices = [];\\n\\tvar normals = [];\\n\\tvar uvs = [];\\n\\n\\t// helper variables\\n\\n\\tvar i, s;\\n\\tvar vertex = new Vector3();\\n\\tvar uv = new Vector2();\\n\\n\\t// center point\\n\\n\\tvertices.push( 0, 0, 0 );\\n\\tnormals.push( 0, 0, 1 );\\n\\tuvs.push( 0.5, 0.5 );\\n\\n\\tfor ( s = 0, i = 3; s <= segments; s ++, i += 3 ) {\\n\\n\\t\\tvar segment = thetaStart + s / segments * thetaLength;\\n\\n\\t\\t// vertex\\n\\n\\t\\tvertex.x = radius * Math.cos( segment );\\n\\t\\tvertex.y = radius * Math.sin( segment );\\n\\n\\t\\tvertices.push( vertex.x, vertex.y, vertex.z );\\n\\n\\t\\t// normal\\n\\n\\t\\tnormals.push( 0, 0, 1 );\\n\\n\\t\\t// uvs\\n\\n\\t\\tuv.x = ( vertices[ i ] / radius + 1 ) / 2;\\n\\t\\tuv.y = ( vertices[ i + 1 ] / radius + 1 ) / 2;\\n\\n\\t\\tuvs.push( uv.x, uv.y );\\n\\n\\t}\\n\\n\\t// indices\\n\\n\\tfor ( i = 1; i <= segments; i ++ ) {\\n\\n\\t\\tindices.push( i, i + 1, 0 );\\n\\n\\t}\\n\\n\\t// build geometry\\n\\n\\tthis.setIndex( indices );\\n\\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\\n\\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\\n\\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\\n\\n}\\n\\nCircleBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\\nCircleBufferGeometry.prototype.constructor = CircleBufferGeometry;\\n\\n\\n\\nvar Geometries = /*#__PURE__*/Object.freeze({\\n\\tWireframeGeometry: WireframeGeometry,\\n\\tParametricGeometry: ParametricGeometry,\\n\\tParametricBufferGeometry: ParametricBufferGeometry,\\n\\tTetrahedronGeometry: TetrahedronGeometry,\\n\\tTetrahedronBufferGeometry: TetrahedronBufferGeometry,\\n\\tOctahedronGeometry: OctahedronGeometry,\\n\\tOctahedronBufferGeometry: OctahedronBufferGeometry,\\n\\tIcosahedronGeometry: IcosahedronGeometry,\\n\\tIcosahedronBufferGeometry: IcosahedronBufferGeometry,\\n\\tDodecahedronGeometry: DodecahedronGeometry,\\n\\tDodecahedronBufferGeometry: DodecahedronBufferGeometry,\\n\\tPolyhedronGeometry: PolyhedronGeometry,\\n\\tPolyhedronBufferGeometry: PolyhedronBufferGeometry,\\n\\tTubeGeometry: TubeGeometry,\\n\\tTubeBufferGeometry: TubeBufferGeometry,\\n\\tTorusKnotGeometry: TorusKnotGeometry,\\n\\tTorusKnotBufferGeometry: TorusKnotBufferGeometry,\\n\\tTorusGeometry: TorusGeometry,\\n\\tTorusBufferGeometry: TorusBufferGeometry,\\n\\tTextGeometry: TextGeometry,\\n\\tTextBufferGeometry: TextBufferGeometry,\\n\\tSphereGeometry: SphereGeometry,\\n\\tSphereBufferGeometry: SphereBufferGeometry,\\n\\tRingGeometry: RingGeometry,\\n\\tRingBufferGeometry: RingBufferGeometry,\\n\\tPlaneGeometry: PlaneGeometry,\\n\\tPlaneBufferGeometry: PlaneBufferGeometry,\\n\\tLatheGeometry: LatheGeometry,\\n\\tLatheBufferGeometry: LatheBufferGeometry,\\n\\tShapeGeometry: ShapeGeometry,\\n\\tShapeBufferGeometry: ShapeBufferGeometry,\\n\\tExtrudeGeometry: ExtrudeGeometry,\\n\\tExtrudeBufferGeometry: ExtrudeBufferGeometry,\\n\\tEdgesGeometry: EdgesGeometry,\\n\\tConeGeometry: ConeGeometry,\\n\\tConeBufferGeometry: ConeBufferGeometry,\\n\\tCylinderGeometry: CylinderGeometry,\\n\\tCylinderBufferGeometry: CylinderBufferGeometry,\\n\\tCircleGeometry: CircleGeometry,\\n\\tCircleBufferGeometry: CircleBufferGeometry,\\n\\tBoxGeometry: BoxGeometry,\\n\\tBoxBufferGeometry: BoxBufferGeometry\\n});\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n *\\n * parameters = {\\n *  color: <THREE.Color>\\n * }\\n */\\n\\nfunction ShadowMaterial( parameters ) {\\n\\n\\tMaterial.call( this );\\n\\n\\tthis.type = 'ShadowMaterial';\\n\\n\\tthis.color = new Color( 0x000000 );\\n\\tthis.transparent = true;\\n\\n\\tthis.setValues( parameters );\\n\\n}\\n\\nShadowMaterial.prototype = Object.create( Material.prototype );\\nShadowMaterial.prototype.constructor = ShadowMaterial;\\n\\nShadowMaterial.prototype.isShadowMaterial = true;\\n\\nShadowMaterial.prototype.copy = function ( source ) {\\n\\n\\tMaterial.prototype.copy.call( this, source );\\n\\n\\tthis.color.copy( source.color );\\n\\n\\treturn this;\\n\\n};\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\nfunction RawShaderMaterial( parameters ) {\\n\\n\\tShaderMaterial.call( this, parameters );\\n\\n\\tthis.type = 'RawShaderMaterial';\\n\\n}\\n\\nRawShaderMaterial.prototype = Object.create( ShaderMaterial.prototype );\\nRawShaderMaterial.prototype.constructor = RawShaderMaterial;\\n\\nRawShaderMaterial.prototype.isRawShaderMaterial = true;\\n\\n/**\\n * @author WestLangley / http://github.com/WestLangley\\n *\\n * parameters = {\\n *  color: <hex>,\\n *  roughness: <float>,\\n *  metalness: <float>,\\n *  opacity: <float>,\\n *\\n *  map: new THREE.Texture( <Image> ),\\n *\\n *  lightMap: new THREE.Texture( <Image> ),\\n *  lightMapIntensity: <float>\\n *\\n *  aoMap: new THREE.Texture( <Image> ),\\n *  aoMapIntensity: <float>\\n *\\n *  emissive: <hex>,\\n *  emissiveIntensity: <float>\\n *  emissiveMap: new THREE.Texture( <Image> ),\\n *\\n *  bumpMap: new THREE.Texture( <Image> ),\\n *  bumpScale: <float>,\\n *\\n *  normalMap: new THREE.Texture( <Image> ),\\n *  normalMapType: THREE.TangentSpaceNormalMap,\\n *  normalScale: <Vector2>,\\n *\\n *  displacementMap: new THREE.Texture( <Image> ),\\n *  displacementScale: <float>,\\n *  displacementBias: <float>,\\n *\\n *  roughnessMap: new THREE.Texture( <Image> ),\\n *\\n *  metalnessMap: new THREE.Texture( <Image> ),\\n *\\n *  alphaMap: new THREE.Texture( <Image> ),\\n *\\n *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\\n *  envMapIntensity: <float>\\n *\\n *  refractionRatio: <float>,\\n *\\n *  wireframe: <boolean>,\\n *  wireframeLinewidth: <float>,\\n *\\n *  skinning: <bool>,\\n *  morphTargets: <bool>,\\n *  morphNormals: <bool>\\n * }\\n */\\n\\nfunction MeshStandardMaterial( parameters ) {\\n\\n\\tMaterial.call( this );\\n\\n\\tthis.defines = { 'STANDARD': '' };\\n\\n\\tthis.type = 'MeshStandardMaterial';\\n\\n\\tthis.color = new Color( 0xffffff ); // diffuse\\n\\tthis.roughness = 0.5;\\n\\tthis.metalness = 0.5;\\n\\n\\tthis.map = null;\\n\\n\\tthis.lightMap = null;\\n\\tthis.lightMapIntensity = 1.0;\\n\\n\\tthis.aoMap = null;\\n\\tthis.aoMapIntensity = 1.0;\\n\\n\\tthis.emissive = new Color( 0x000000 );\\n\\tthis.emissiveIntensity = 1.0;\\n\\tthis.emissiveMap = null;\\n\\n\\tthis.bumpMap = null;\\n\\tthis.bumpScale = 1;\\n\\n\\tthis.normalMap = null;\\n\\tthis.normalMapType = TangentSpaceNormalMap;\\n\\tthis.normalScale = new Vector2( 1, 1 );\\n\\n\\tthis.displacementMap = null;\\n\\tthis.displacementScale = 1;\\n\\tthis.displacementBias = 0;\\n\\n\\tthis.roughnessMap = null;\\n\\n\\tthis.metalnessMap = null;\\n\\n\\tthis.alphaMap = null;\\n\\n\\tthis.envMap = null;\\n\\tthis.envMapIntensity = 1.0;\\n\\n\\tthis.refractionRatio = 0.98;\\n\\n\\tthis.wireframe = false;\\n\\tthis.wireframeLinewidth = 1;\\n\\tthis.wireframeLinecap = 'round';\\n\\tthis.wireframeLinejoin = 'round';\\n\\n\\tthis.skinning = false;\\n\\tthis.morphTargets = false;\\n\\tthis.morphNormals = false;\\n\\n\\tthis.setValues( parameters );\\n\\n}\\n\\nMeshStandardMaterial.prototype = Object.create( Material.prototype );\\nMeshStandardMaterial.prototype.constructor = MeshStandardMaterial;\\n\\nMeshStandardMaterial.prototype.isMeshStandardMaterial = true;\\n\\nMeshStandardMaterial.prototype.copy = function ( source ) {\\n\\n\\tMaterial.prototype.copy.call( this, source );\\n\\n\\tthis.defines = { 'STANDARD': '' };\\n\\n\\tthis.color.copy( source.color );\\n\\tthis.roughness = source.roughness;\\n\\tthis.metalness = source.metalness;\\n\\n\\tthis.map = source.map;\\n\\n\\tthis.lightMap = source.lightMap;\\n\\tthis.lightMapIntensity = source.lightMapIntensity;\\n\\n\\tthis.aoMap = source.aoMap;\\n\\tthis.aoMapIntensity = source.aoMapIntensity;\\n\\n\\tthis.emissive.copy( source.emissive );\\n\\tthis.emissiveMap = source.emissiveMap;\\n\\tthis.emissiveIntensity = source.emissiveIntensity;\\n\\n\\tthis.bumpMap = source.bumpMap;\\n\\tthis.bumpScale = source.bumpScale;\\n\\n\\tthis.normalMap = source.normalMap;\\n\\tthis.normalMapType = source.normalMapType;\\n\\tthis.normalScale.copy( source.normalScale );\\n\\n\\tthis.displacementMap = source.displacementMap;\\n\\tthis.displacementScale = source.displacementScale;\\n\\tthis.displacementBias = source.displacementBias;\\n\\n\\tthis.roughnessMap = source.roughnessMap;\\n\\n\\tthis.metalnessMap = source.metalnessMap;\\n\\n\\tthis.alphaMap = source.alphaMap;\\n\\n\\tthis.envMap = source.envMap;\\n\\tthis.envMapIntensity = source.envMapIntensity;\\n\\n\\tthis.refractionRatio = source.refractionRatio;\\n\\n\\tthis.wireframe = source.wireframe;\\n\\tthis.wireframeLinewidth = source.wireframeLinewidth;\\n\\tthis.wireframeLinecap = source.wireframeLinecap;\\n\\tthis.wireframeLinejoin = source.wireframeLinejoin;\\n\\n\\tthis.skinning = source.skinning;\\n\\tthis.morphTargets = source.morphTargets;\\n\\tthis.morphNormals = source.morphNormals;\\n\\n\\treturn this;\\n\\n};\\n\\n/**\\n * @author WestLangley / http://github.com/WestLangley\\n *\\n * parameters = {\\n *  reflectivity: <float>\\n *  clearCoat: <float>\\n *  clearCoatRoughness: <float>\\n * }\\n */\\n\\nfunction MeshPhysicalMaterial( parameters ) {\\n\\n\\tMeshStandardMaterial.call( this );\\n\\n\\tthis.defines = { 'PHYSICAL': '' };\\n\\n\\tthis.type = 'MeshPhysicalMaterial';\\n\\n\\tthis.reflectivity = 0.5; // maps to F0 = 0.04\\n\\n\\tthis.clearCoat = 0.0;\\n\\tthis.clearCoatRoughness = 0.0;\\n\\n\\tthis.setValues( parameters );\\n\\n}\\n\\nMeshPhysicalMaterial.prototype = Object.create( MeshStandardMaterial.prototype );\\nMeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;\\n\\nMeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\\n\\nMeshPhysicalMaterial.prototype.copy = function ( source ) {\\n\\n\\tMeshStandardMaterial.prototype.copy.call( this, source );\\n\\n\\tthis.defines = { 'PHYSICAL': '' };\\n\\n\\tthis.reflectivity = source.reflectivity;\\n\\n\\tthis.clearCoat = source.clearCoat;\\n\\tthis.clearCoatRoughness = source.clearCoatRoughness;\\n\\n\\treturn this;\\n\\n};\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n * @author alteredq / http://alteredqualia.com/\\n *\\n * parameters = {\\n *  color: <hex>,\\n *  specular: <hex>,\\n *  shininess: <float>,\\n *  opacity: <float>,\\n *\\n *  map: new THREE.Texture( <Image> ),\\n *\\n *  lightMap: new THREE.Texture( <Image> ),\\n *  lightMapIntensity: <float>\\n *\\n *  aoMap: new THREE.Texture( <Image> ),\\n *  aoMapIntensity: <float>\\n *\\n *  emissive: <hex>,\\n *  emissiveIntensity: <float>\\n *  emissiveMap: new THREE.Texture( <Image> ),\\n *\\n *  bumpMap: new THREE.Texture( <Image> ),\\n *  bumpScale: <float>,\\n *\\n *  normalMap: new THREE.Texture( <Image> ),\\n *  normalMapType: THREE.TangentSpaceNormalMap,\\n *  normalScale: <Vector2>,\\n *\\n *  displacementMap: new THREE.Texture( <Image> ),\\n *  displacementScale: <float>,\\n *  displacementBias: <float>,\\n *\\n *  specularMap: new THREE.Texture( <Image> ),\\n *\\n *  alphaMap: new THREE.Texture( <Image> ),\\n *\\n *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\\n *  combine: THREE.Multiply,\\n *  reflectivity: <float>,\\n *  refractionRatio: <float>,\\n *\\n *  wireframe: <boolean>,\\n *  wireframeLinewidth: <float>,\\n *\\n *  skinning: <bool>,\\n *  morphTargets: <bool>,\\n *  morphNormals: <bool>\\n * }\\n */\\n\\nfunction MeshPhongMaterial( parameters ) {\\n\\n\\tMaterial.call( this );\\n\\n\\tthis.type = 'MeshPhongMaterial';\\n\\n\\tthis.color = new Color( 0xffffff ); // diffuse\\n\\tthis.specular = new Color( 0x111111 );\\n\\tthis.shininess = 30;\\n\\n\\tthis.map = null;\\n\\n\\tthis.lightMap = null;\\n\\tthis.lightMapIntensity = 1.0;\\n\\n\\tthis.aoMap = null;\\n\\tthis.aoMapIntensity = 1.0;\\n\\n\\tthis.emissive = new Color( 0x000000 );\\n\\tthis.emissiveIntensity = 1.0;\\n\\tthis.emissiveMap = null;\\n\\n\\tthis.bumpMap = null;\\n\\tthis.bumpScale = 1;\\n\\n\\tthis.normalMap = null;\\n\\tthis.normalMapType = TangentSpaceNormalMap;\\n\\tthis.normalScale = new Vector2( 1, 1 );\\n\\n\\tthis.displacementMap = null;\\n\\tthis.displacementScale = 1;\\n\\tthis.displacementBias = 0;\\n\\n\\tthis.specularMap = null;\\n\\n\\tthis.alphaMap = null;\\n\\n\\tthis.envMap = null;\\n\\tthis.combine = MultiplyOperation;\\n\\tthis.reflectivity = 1;\\n\\tthis.refractionRatio = 0.98;\\n\\n\\tthis.wireframe = false;\\n\\tthis.wireframeLinewidth = 1;\\n\\tthis.wireframeLinecap = 'round';\\n\\tthis.wireframeLinejoin = 'round';\\n\\n\\tthis.skinning = false;\\n\\tthis.morphTargets = false;\\n\\tthis.morphNormals = false;\\n\\n\\tthis.setValues( parameters );\\n\\n}\\n\\nMeshPhongMaterial.prototype = Object.create( Material.prototype );\\nMeshPhongMaterial.prototype.constructor = MeshPhongMaterial;\\n\\nMeshPhongMaterial.prototype.isMeshPhongMaterial = true;\\n\\nMeshPhongMaterial.prototype.copy = function ( source ) {\\n\\n\\tMaterial.prototype.copy.call( this, source );\\n\\n\\tthis.color.copy( source.color );\\n\\tthis.specular.copy( source.specular );\\n\\tthis.shininess = source.shininess;\\n\\n\\tthis.map = source.map;\\n\\n\\tthis.lightMap = source.lightMap;\\n\\tthis.lightMapIntensity = source.lightMapIntensity;\\n\\n\\tthis.aoMap = source.aoMap;\\n\\tthis.aoMapIntensity = source.aoMapIntensity;\\n\\n\\tthis.emissive.copy( source.emissive );\\n\\tthis.emissiveMap = source.emissiveMap;\\n\\tthis.emissiveIntensity = source.emissiveIntensity;\\n\\n\\tthis.bumpMap = source.bumpMap;\\n\\tthis.bumpScale = source.bumpScale;\\n\\n\\tthis.normalMap = source.normalMap;\\n\\tthis.normalMapType = source.normalMapType;\\n\\tthis.normalScale.copy( source.normalScale );\\n\\n\\tthis.displacementMap = source.displacementMap;\\n\\tthis.displacementScale = source.displacementScale;\\n\\tthis.displacementBias = source.displacementBias;\\n\\n\\tthis.specularMap = source.specularMap;\\n\\n\\tthis.alphaMap = source.alphaMap;\\n\\n\\tthis.envMap = source.envMap;\\n\\tthis.combine = source.combine;\\n\\tthis.reflectivity = source.reflectivity;\\n\\tthis.refractionRatio = source.refractionRatio;\\n\\n\\tthis.wireframe = source.wireframe;\\n\\tthis.wireframeLinewidth = source.wireframeLinewidth;\\n\\tthis.wireframeLinecap = source.wireframeLinecap;\\n\\tthis.wireframeLinejoin = source.wireframeLinejoin;\\n\\n\\tthis.skinning = source.skinning;\\n\\tthis.morphTargets = source.morphTargets;\\n\\tthis.morphNormals = source.morphNormals;\\n\\n\\treturn this;\\n\\n};\\n\\n/**\\n * @author takahirox / http://github.com/takahirox\\n *\\n * parameters = {\\n *  gradientMap: new THREE.Texture( <Image> )\\n * }\\n */\\n\\nfunction MeshToonMaterial( parameters ) {\\n\\n\\tMeshPhongMaterial.call( this );\\n\\n\\tthis.defines = { 'TOON': '' };\\n\\n\\tthis.type = 'MeshToonMaterial';\\n\\n\\tthis.gradientMap = null;\\n\\n\\tthis.setValues( parameters );\\n\\n}\\n\\nMeshToonMaterial.prototype = Object.create( MeshPhongMaterial.prototype );\\nMeshToonMaterial.prototype.constructor = MeshToonMaterial;\\n\\nMeshToonMaterial.prototype.isMeshToonMaterial = true;\\n\\nMeshToonMaterial.prototype.copy = function ( source ) {\\n\\n\\tMeshPhongMaterial.prototype.copy.call( this, source );\\n\\n\\tthis.gradientMap = source.gradientMap;\\n\\n\\treturn this;\\n\\n};\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n * @author WestLangley / http://github.com/WestLangley\\n *\\n * parameters = {\\n *  opacity: <float>,\\n *\\n *  bumpMap: new THREE.Texture( <Image> ),\\n *  bumpScale: <float>,\\n *\\n *  normalMap: new THREE.Texture( <Image> ),\\n *  normalMapType: THREE.TangentSpaceNormalMap,\\n *  normalScale: <Vector2>,\\n *\\n *  displacementMap: new THREE.Texture( <Image> ),\\n *  displacementScale: <float>,\\n *  displacementBias: <float>,\\n *\\n *  wireframe: <boolean>,\\n *  wireframeLinewidth: <float>\\n *\\n *  skinning: <bool>,\\n *  morphTargets: <bool>,\\n *  morphNormals: <bool>\\n * }\\n */\\n\\nfunction MeshNormalMaterial( parameters ) {\\n\\n\\tMaterial.call( this );\\n\\n\\tthis.type = 'MeshNormalMaterial';\\n\\n\\tthis.bumpMap = null;\\n\\tthis.bumpScale = 1;\\n\\n\\tthis.normalMap = null;\\n\\tthis.normalMapType = TangentSpaceNormalMap;\\n\\tthis.normalScale = new Vector2( 1, 1 );\\n\\n\\tthis.displacementMap = null;\\n\\tthis.displacementScale = 1;\\n\\tthis.displacementBias = 0;\\n\\n\\tthis.wireframe = false;\\n\\tthis.wireframeLinewidth = 1;\\n\\n\\tthis.fog = false;\\n\\tthis.lights = false;\\n\\n\\tthis.skinning = false;\\n\\tthis.morphTargets = false;\\n\\tthis.morphNormals = false;\\n\\n\\tthis.setValues( parameters );\\n\\n}\\n\\nMeshNormalMaterial.prototype = Object.create( Material.prototype );\\nMeshNormalMaterial.prototype.constructor = MeshNormalMaterial;\\n\\nMeshNormalMaterial.prototype.isMeshNormalMaterial = true;\\n\\nMeshNormalMaterial.prototype.copy = function ( source ) {\\n\\n\\tMaterial.prototype.copy.call( this, source );\\n\\n\\tthis.bumpMap = source.bumpMap;\\n\\tthis.bumpScale = source.bumpScale;\\n\\n\\tthis.normalMap = source.normalMap;\\n\\tthis.normalMapType = source.normalMapType;\\n\\tthis.normalScale.copy( source.normalScale );\\n\\n\\tthis.displacementMap = source.displacementMap;\\n\\tthis.displacementScale = source.displacementScale;\\n\\tthis.displacementBias = source.displacementBias;\\n\\n\\tthis.wireframe = source.wireframe;\\n\\tthis.wireframeLinewidth = source.wireframeLinewidth;\\n\\n\\tthis.skinning = source.skinning;\\n\\tthis.morphTargets = source.morphTargets;\\n\\tthis.morphNormals = source.morphNormals;\\n\\n\\treturn this;\\n\\n};\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n * @author alteredq / http://alteredqualia.com/\\n *\\n * parameters = {\\n *  color: <hex>,\\n *  opacity: <float>,\\n *\\n *  map: new THREE.Texture( <Image> ),\\n *\\n *  lightMap: new THREE.Texture( <Image> ),\\n *  lightMapIntensity: <float>\\n *\\n *  aoMap: new THREE.Texture( <Image> ),\\n *  aoMapIntensity: <float>\\n *\\n *  emissive: <hex>,\\n *  emissiveIntensity: <float>\\n *  emissiveMap: new THREE.Texture( <Image> ),\\n *\\n *  specularMap: new THREE.Texture( <Image> ),\\n *\\n *  alphaMap: new THREE.Texture( <Image> ),\\n *\\n *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\\n *  combine: THREE.Multiply,\\n *  reflectivity: <float>,\\n *  refractionRatio: <float>,\\n *\\n *  wireframe: <boolean>,\\n *  wireframeLinewidth: <float>,\\n *\\n *  skinning: <bool>,\\n *  morphTargets: <bool>,\\n *  morphNormals: <bool>\\n * }\\n */\\n\\nfunction MeshLambertMaterial( parameters ) {\\n\\n\\tMaterial.call( this );\\n\\n\\tthis.type = 'MeshLambertMaterial';\\n\\n\\tthis.color = new Color( 0xffffff ); // diffuse\\n\\n\\tthis.map = null;\\n\\n\\tthis.lightMap = null;\\n\\tthis.lightMapIntensity = 1.0;\\n\\n\\tthis.aoMap = null;\\n\\tthis.aoMapIntensity = 1.0;\\n\\n\\tthis.emissive = new Color( 0x000000 );\\n\\tthis.emissiveIntensity = 1.0;\\n\\tthis.emissiveMap = null;\\n\\n\\tthis.specularMap = null;\\n\\n\\tthis.alphaMap = null;\\n\\n\\tthis.envMap = null;\\n\\tthis.combine = MultiplyOperation;\\n\\tthis.reflectivity = 1;\\n\\tthis.refractionRatio = 0.98;\\n\\n\\tthis.wireframe = false;\\n\\tthis.wireframeLinewidth = 1;\\n\\tthis.wireframeLinecap = 'round';\\n\\tthis.wireframeLinejoin = 'round';\\n\\n\\tthis.skinning = false;\\n\\tthis.morphTargets = false;\\n\\tthis.morphNormals = false;\\n\\n\\tthis.setValues( parameters );\\n\\n}\\n\\nMeshLambertMaterial.prototype = Object.create( Material.prototype );\\nMeshLambertMaterial.prototype.constructor = MeshLambertMaterial;\\n\\nMeshLambertMaterial.prototype.isMeshLambertMaterial = true;\\n\\nMeshLambertMaterial.prototype.copy = function ( source ) {\\n\\n\\tMaterial.prototype.copy.call( this, source );\\n\\n\\tthis.color.copy( source.color );\\n\\n\\tthis.map = source.map;\\n\\n\\tthis.lightMap = source.lightMap;\\n\\tthis.lightMapIntensity = source.lightMapIntensity;\\n\\n\\tthis.aoMap = source.aoMap;\\n\\tthis.aoMapIntensity = source.aoMapIntensity;\\n\\n\\tthis.emissive.copy( source.emissive );\\n\\tthis.emissiveMap = source.emissiveMap;\\n\\tthis.emissiveIntensity = source.emissiveIntensity;\\n\\n\\tthis.specularMap = source.specularMap;\\n\\n\\tthis.alphaMap = source.alphaMap;\\n\\n\\tthis.envMap = source.envMap;\\n\\tthis.combine = source.combine;\\n\\tthis.reflectivity = source.reflectivity;\\n\\tthis.refractionRatio = source.refractionRatio;\\n\\n\\tthis.wireframe = source.wireframe;\\n\\tthis.wireframeLinewidth = source.wireframeLinewidth;\\n\\tthis.wireframeLinecap = source.wireframeLinecap;\\n\\tthis.wireframeLinejoin = source.wireframeLinejoin;\\n\\n\\tthis.skinning = source.skinning;\\n\\tthis.morphTargets = source.morphTargets;\\n\\tthis.morphNormals = source.morphNormals;\\n\\n\\treturn this;\\n\\n};\\n\\n/**\\n * @author WestLangley / http://github.com/WestLangley\\n *\\n * parameters = {\\n *  color: <hex>,\\n *  opacity: <float>,\\n *\\n *  matcap: new THREE.Texture( <Image> ),\\n *\\n *  map: new THREE.Texture( <Image> ),\\n *\\n *  bumpMap: new THREE.Texture( <Image> ),\\n *  bumpScale: <float>,\\n *\\n *  normalMap: new THREE.Texture( <Image> ),\\n *  normalMapType: THREE.TangentSpaceNormalMap,\\n *  normalScale: <Vector2>,\\n *\\n *  displacementMap: new THREE.Texture( <Image> ),\\n *  displacementScale: <float>,\\n *  displacementBias: <float>,\\n *\\n *  alphaMap: new THREE.Texture( <Image> ),\\n *\\n *  skinning: <bool>,\\n *  morphTargets: <bool>,\\n *  morphNormals: <bool>\\n * }\\n */\\n\\nfunction MeshMatcapMaterial( parameters ) {\\n\\n\\tMaterial.call( this );\\n\\n\\tthis.defines = { 'MATCAP': '' };\\n\\n\\tthis.type = 'MeshMatcapMaterial';\\n\\n\\tthis.color = new Color( 0xffffff ); // diffuse\\n\\n\\tthis.matcap = null;\\n\\n\\tthis.map = null;\\n\\n\\tthis.bumpMap = null;\\n\\tthis.bumpScale = 1;\\n\\n\\tthis.normalMap = null;\\n\\tthis.normalMapType = TangentSpaceNormalMap;\\n\\tthis.normalScale = new Vector2( 1, 1 );\\n\\n\\tthis.displacementMap = null;\\n\\tthis.displacementScale = 1;\\n\\tthis.displacementBias = 0;\\n\\n\\tthis.alphaMap = null;\\n\\n\\tthis.skinning = false;\\n\\tthis.morphTargets = false;\\n\\tthis.morphNormals = false;\\n\\n\\tthis.lights = false;\\n\\n\\tthis.setValues( parameters );\\n\\n}\\n\\nMeshMatcapMaterial.prototype = Object.create( Material.prototype );\\nMeshMatcapMaterial.prototype.constructor = MeshMatcapMaterial;\\n\\nMeshMatcapMaterial.prototype.isMeshMatcapMaterial = true;\\n\\nMeshMatcapMaterial.prototype.copy = function ( source ) {\\n\\n\\tMaterial.prototype.copy.call( this, source );\\n\\n\\tthis.defines = { 'MATCAP': '' };\\n\\n\\tthis.color.copy( source.color );\\n\\n\\tthis.matcap = source.matcap;\\n\\n\\tthis.map = source.map;\\n\\n\\tthis.bumpMap = source.bumpMap;\\n\\tthis.bumpScale = source.bumpScale;\\n\\n\\tthis.normalMap = source.normalMap;\\n\\tthis.normalMapType = source.normalMapType;\\n\\tthis.normalScale.copy( source.normalScale );\\n\\n\\tthis.displacementMap = source.displacementMap;\\n\\tthis.displacementScale = source.displacementScale;\\n\\tthis.displacementBias = source.displacementBias;\\n\\n\\tthis.alphaMap = source.alphaMap;\\n\\n\\tthis.skinning = source.skinning;\\n\\tthis.morphTargets = source.morphTargets;\\n\\tthis.morphNormals = source.morphNormals;\\n\\n\\treturn this;\\n\\n};\\n\\n/**\\n * @author alteredq / http://alteredqualia.com/\\n *\\n * parameters = {\\n *  color: <hex>,\\n *  opacity: <float>,\\n *\\n *  linewidth: <float>,\\n *\\n *  scale: <float>,\\n *  dashSize: <float>,\\n *  gapSize: <float>\\n * }\\n */\\n\\nfunction LineDashedMaterial( parameters ) {\\n\\n\\tLineBasicMaterial.call( this );\\n\\n\\tthis.type = 'LineDashedMaterial';\\n\\n\\tthis.scale = 1;\\n\\tthis.dashSize = 3;\\n\\tthis.gapSize = 1;\\n\\n\\tthis.setValues( parameters );\\n\\n}\\n\\nLineDashedMaterial.prototype = Object.create( LineBasicMaterial.prototype );\\nLineDashedMaterial.prototype.constructor = LineDashedMaterial;\\n\\nLineDashedMaterial.prototype.isLineDashedMaterial = true;\\n\\nLineDashedMaterial.prototype.copy = function ( source ) {\\n\\n\\tLineBasicMaterial.prototype.copy.call( this, source );\\n\\n\\tthis.scale = source.scale;\\n\\tthis.dashSize = source.dashSize;\\n\\tthis.gapSize = source.gapSize;\\n\\n\\treturn this;\\n\\n};\\n\\n\\n\\nvar Materials = /*#__PURE__*/Object.freeze({\\n\\tShadowMaterial: ShadowMaterial,\\n\\tSpriteMaterial: SpriteMaterial,\\n\\tRawShaderMaterial: RawShaderMaterial,\\n\\tShaderMaterial: ShaderMaterial,\\n\\tPointsMaterial: PointsMaterial,\\n\\tMeshPhysicalMaterial: MeshPhysicalMaterial,\\n\\tMeshStandardMaterial: MeshStandardMaterial,\\n\\tMeshPhongMaterial: MeshPhongMaterial,\\n\\tMeshToonMaterial: MeshToonMaterial,\\n\\tMeshNormalMaterial: MeshNormalMaterial,\\n\\tMeshLambertMaterial: MeshLambertMaterial,\\n\\tMeshDepthMaterial: MeshDepthMaterial,\\n\\tMeshDistanceMaterial: MeshDistanceMaterial,\\n\\tMeshBasicMaterial: MeshBasicMaterial,\\n\\tMeshMatcapMaterial: MeshMatcapMaterial,\\n\\tLineDashedMaterial: LineDashedMaterial,\\n\\tLineBasicMaterial: LineBasicMaterial,\\n\\tMaterial: Material\\n});\\n\\n/**\\n * @author tschw\\n * @author Ben Houston / http://clara.io/\\n * @author David Sarno / http://lighthaus.us/\\n */\\n\\nvar AnimationUtils = {\\n\\n\\t// same as Array.prototype.slice, but also works on typed arrays\\n\\tarraySlice: function ( array, from, to ) {\\n\\n\\t\\tif ( AnimationUtils.isTypedArray( array ) ) {\\n\\n\\t\\t\\t// in ios9 array.subarray(from, undefined) will return empty array\\n\\t\\t\\t// but array.subarray(from) or array.subarray(from, len) is correct\\n\\t\\t\\treturn new array.constructor( array.subarray( from, to !== undefined ? to : array.length ) );\\n\\n\\t\\t}\\n\\n\\t\\treturn array.slice( from, to );\\n\\n\\t},\\n\\n\\t// converts an array to a specific type\\n\\tconvertArray: function ( array, type, forceClone ) {\\n\\n\\t\\tif ( ! array || // let 'undefined' and 'null' pass\\n\\t\\t\\t! forceClone && array.constructor === type ) return array;\\n\\n\\t\\tif ( typeof type.BYTES_PER_ELEMENT === 'number' ) {\\n\\n\\t\\t\\treturn new type( array ); // create typed array\\n\\n\\t\\t}\\n\\n\\t\\treturn Array.prototype.slice.call( array ); // create Array\\n\\n\\t},\\n\\n\\tisTypedArray: function ( object ) {\\n\\n\\t\\treturn ArrayBuffer.isView( object ) &&\\n\\t\\t\\t! ( object instanceof DataView );\\n\\n\\t},\\n\\n\\t// returns an array by which times and values can be sorted\\n\\tgetKeyframeOrder: function ( times ) {\\n\\n\\t\\tfunction compareTime( i, j ) {\\n\\n\\t\\t\\treturn times[ i ] - times[ j ];\\n\\n\\t\\t}\\n\\n\\t\\tvar n = times.length;\\n\\t\\tvar result = new Array( n );\\n\\t\\tfor ( var i = 0; i !== n; ++ i ) result[ i ] = i;\\n\\n\\t\\tresult.sort( compareTime );\\n\\n\\t\\treturn result;\\n\\n\\t},\\n\\n\\t// uses the array previously returned by 'getKeyframeOrder' to sort data\\n\\tsortedArray: function ( values, stride, order ) {\\n\\n\\t\\tvar nValues = values.length;\\n\\t\\tvar result = new values.constructor( nValues );\\n\\n\\t\\tfor ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {\\n\\n\\t\\t\\tvar srcOffset = order[ i ] * stride;\\n\\n\\t\\t\\tfor ( var j = 0; j !== stride; ++ j ) {\\n\\n\\t\\t\\t\\tresult[ dstOffset ++ ] = values[ srcOffset + j ];\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\treturn result;\\n\\n\\t},\\n\\n\\t// function for parsing AOS keyframe formats\\n\\tflattenJSON: function ( jsonKeys, times, values, valuePropertyName ) {\\n\\n\\t\\tvar i = 1, key = jsonKeys[ 0 ];\\n\\n\\t\\twhile ( key !== undefined && key[ valuePropertyName ] === undefined ) {\\n\\n\\t\\t\\tkey = jsonKeys[ i ++ ];\\n\\n\\t\\t}\\n\\n\\t\\tif ( key === undefined ) return; // no data\\n\\n\\t\\tvar value = key[ valuePropertyName ];\\n\\t\\tif ( value === undefined ) return; // no data\\n\\n\\t\\tif ( Array.isArray( value ) ) {\\n\\n\\t\\t\\tdo {\\n\\n\\t\\t\\t\\tvalue = key[ valuePropertyName ];\\n\\n\\t\\t\\t\\tif ( value !== undefined ) {\\n\\n\\t\\t\\t\\t\\ttimes.push( key.time );\\n\\t\\t\\t\\t\\tvalues.push.apply( values, value ); // push all elements\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tkey = jsonKeys[ i ++ ];\\n\\n\\t\\t\\t} while ( key !== undefined );\\n\\n\\t\\t} else if ( value.toArray !== undefined ) {\\n\\n\\t\\t\\t// ...assume THREE.Math-ish\\n\\n\\t\\t\\tdo {\\n\\n\\t\\t\\t\\tvalue = key[ valuePropertyName ];\\n\\n\\t\\t\\t\\tif ( value !== undefined ) {\\n\\n\\t\\t\\t\\t\\ttimes.push( key.time );\\n\\t\\t\\t\\t\\tvalue.toArray( values, values.length );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tkey = jsonKeys[ i ++ ];\\n\\n\\t\\t\\t} while ( key !== undefined );\\n\\n\\t\\t} else {\\n\\n\\t\\t\\t// otherwise push as-is\\n\\n\\t\\t\\tdo {\\n\\n\\t\\t\\t\\tvalue = key[ valuePropertyName ];\\n\\n\\t\\t\\t\\tif ( value !== undefined ) {\\n\\n\\t\\t\\t\\t\\ttimes.push( key.time );\\n\\t\\t\\t\\t\\tvalues.push( value );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tkey = jsonKeys[ i ++ ];\\n\\n\\t\\t\\t} while ( key !== undefined );\\n\\n\\t\\t}\\n\\n\\t}\\n\\n};\\n\\n/**\\n * Abstract base class of interpolants over parametric samples.\\n *\\n * The parameter domain is one dimensional, typically the time or a path\\n * along a curve defined by the data.\\n *\\n * The sample values can have any dimensionality and derived classes may\\n * apply special interpretations to the data.\\n *\\n * This class provides the interval seek in a Template Method, deferring\\n * the actual interpolation to derived classes.\\n *\\n * Time complexity is O(1) for linear access crossing at most two points\\n * and O(log N) for random access, where N is the number of positions.\\n *\\n * References:\\n *\\n * \\t\\thttp://www.oodesign.com/template-method-pattern.html\\n *\\n * @author tschw\\n */\\n\\nfunction Interpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\\n\\n\\tthis.parameterPositions = parameterPositions;\\n\\tthis._cachedIndex = 0;\\n\\n\\tthis.resultBuffer = resultBuffer !== undefined ?\\n\\t\\tresultBuffer : new sampleValues.constructor( sampleSize );\\n\\tthis.sampleValues = sampleValues;\\n\\tthis.valueSize = sampleSize;\\n\\n}\\n\\nObject.assign( Interpolant.prototype, {\\n\\n\\tevaluate: function ( t ) {\\n\\n\\t\\tvar pp = this.parameterPositions,\\n\\t\\t\\ti1 = this._cachedIndex,\\n\\n\\t\\t\\tt1 = pp[ i1 ],\\n\\t\\t\\tt0 = pp[ i1 - 1 ];\\n\\n\\t\\tvalidate_interval: {\\n\\n\\t\\t\\tseek: {\\n\\n\\t\\t\\t\\tvar right;\\n\\n\\t\\t\\t\\tlinear_scan: {\\n\\n\\t\\t\\t\\t\\t//- See http://jsperf.com/comparison-to-undefined/3\\n\\t\\t\\t\\t\\t//- slower code:\\n\\t\\t\\t\\t\\t//-\\n\\t\\t\\t\\t\\t//- \\t\\t\\t\\tif ( t >= t1 || t1 === undefined ) {\\n\\t\\t\\t\\t\\tforward_scan: if ( ! ( t < t1 ) ) {\\n\\n\\t\\t\\t\\t\\t\\tfor ( var giveUpAt = i1 + 2; ; ) {\\n\\n\\t\\t\\t\\t\\t\\t\\tif ( t1 === undefined ) {\\n\\n\\t\\t\\t\\t\\t\\t\\t\\tif ( t < t0 ) break forward_scan;\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t// after end\\n\\n\\t\\t\\t\\t\\t\\t\\t\\ti1 = pp.length;\\n\\t\\t\\t\\t\\t\\t\\t\\tthis._cachedIndex = i1;\\n\\t\\t\\t\\t\\t\\t\\t\\treturn this.afterEnd_( i1 - 1, t, t0 );\\n\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t\\tif ( i1 === giveUpAt ) break; // this loop\\n\\n\\t\\t\\t\\t\\t\\t\\tt0 = t1;\\n\\t\\t\\t\\t\\t\\t\\tt1 = pp[ ++ i1 ];\\n\\n\\t\\t\\t\\t\\t\\t\\tif ( t < t1 ) {\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t// we have arrived at the sought interval\\n\\t\\t\\t\\t\\t\\t\\t\\tbreak seek;\\n\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t// prepare binary search on the right side of the index\\n\\t\\t\\t\\t\\t\\tright = pp.length;\\n\\t\\t\\t\\t\\t\\tbreak linear_scan;\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t//- slower code:\\n\\t\\t\\t\\t\\t//-\\t\\t\\t\\t\\tif ( t < t0 || t0 === undefined ) {\\n\\t\\t\\t\\t\\tif ( ! ( t >= t0 ) ) {\\n\\n\\t\\t\\t\\t\\t\\t// looping?\\n\\n\\t\\t\\t\\t\\t\\tvar t1global = pp[ 1 ];\\n\\n\\t\\t\\t\\t\\t\\tif ( t < t1global ) {\\n\\n\\t\\t\\t\\t\\t\\t\\ti1 = 2; // + 1, using the scan for the details\\n\\t\\t\\t\\t\\t\\t\\tt0 = t1global;\\n\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t// linear reverse scan\\n\\n\\t\\t\\t\\t\\t\\tfor ( var giveUpAt = i1 - 2; ; ) {\\n\\n\\t\\t\\t\\t\\t\\t\\tif ( t0 === undefined ) {\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t// before start\\n\\n\\t\\t\\t\\t\\t\\t\\t\\tthis._cachedIndex = 0;\\n\\t\\t\\t\\t\\t\\t\\t\\treturn this.beforeStart_( 0, t, t1 );\\n\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t\\tif ( i1 === giveUpAt ) break; // this loop\\n\\n\\t\\t\\t\\t\\t\\t\\tt1 = t0;\\n\\t\\t\\t\\t\\t\\t\\tt0 = pp[ -- i1 - 1 ];\\n\\n\\t\\t\\t\\t\\t\\t\\tif ( t >= t0 ) {\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t// we have arrived at the sought interval\\n\\t\\t\\t\\t\\t\\t\\t\\tbreak seek;\\n\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t// prepare binary search on the left side of the index\\n\\t\\t\\t\\t\\t\\tright = i1;\\n\\t\\t\\t\\t\\t\\ti1 = 0;\\n\\t\\t\\t\\t\\t\\tbreak linear_scan;\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// the interval is valid\\n\\n\\t\\t\\t\\t\\tbreak validate_interval;\\n\\n\\t\\t\\t\\t} // linear scan\\n\\n\\t\\t\\t\\t// binary search\\n\\n\\t\\t\\t\\twhile ( i1 < right ) {\\n\\n\\t\\t\\t\\t\\tvar mid = ( i1 + right ) >>> 1;\\n\\n\\t\\t\\t\\t\\tif ( t < pp[ mid ] ) {\\n\\n\\t\\t\\t\\t\\t\\tright = mid;\\n\\n\\t\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\t\\ti1 = mid + 1;\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tt1 = pp[ i1 ];\\n\\t\\t\\t\\tt0 = pp[ i1 - 1 ];\\n\\n\\t\\t\\t\\t// check boundary cases, again\\n\\n\\t\\t\\t\\tif ( t0 === undefined ) {\\n\\n\\t\\t\\t\\t\\tthis._cachedIndex = 0;\\n\\t\\t\\t\\t\\treturn this.beforeStart_( 0, t, t1 );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif ( t1 === undefined ) {\\n\\n\\t\\t\\t\\t\\ti1 = pp.length;\\n\\t\\t\\t\\t\\tthis._cachedIndex = i1;\\n\\t\\t\\t\\t\\treturn this.afterEnd_( i1 - 1, t0, t );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t} // seek\\n\\n\\t\\t\\tthis._cachedIndex = i1;\\n\\n\\t\\t\\tthis.intervalChanged_( i1, t0, t1 );\\n\\n\\t\\t} // validate_interval\\n\\n\\t\\treturn this.interpolate_( i1, t0, t, t1 );\\n\\n\\t},\\n\\n\\tsettings: null, // optional, subclass-specific settings structure\\n\\t// Note: The indirection allows central control of many interpolants.\\n\\n\\t// --- Protected interface\\n\\n\\tDefaultSettings_: {},\\n\\n\\tgetSettings_: function () {\\n\\n\\t\\treturn this.settings || this.DefaultSettings_;\\n\\n\\t},\\n\\n\\tcopySampleValue_: function ( index ) {\\n\\n\\t\\t// copies a sample value to the result buffer\\n\\n\\t\\tvar result = this.resultBuffer,\\n\\t\\t\\tvalues = this.sampleValues,\\n\\t\\t\\tstride = this.valueSize,\\n\\t\\t\\toffset = index * stride;\\n\\n\\t\\tfor ( var i = 0; i !== stride; ++ i ) {\\n\\n\\t\\t\\tresult[ i ] = values[ offset + i ];\\n\\n\\t\\t}\\n\\n\\t\\treturn result;\\n\\n\\t},\\n\\n\\t// Template methods for derived classes:\\n\\n\\tinterpolate_: function ( /* i1, t0, t, t1 */ ) {\\n\\n\\t\\tthrow new Error( 'call to abstract method' );\\n\\t\\t// implementations shall return this.resultBuffer\\n\\n\\t},\\n\\n\\tintervalChanged_: function ( /* i1, t0, t1 */ ) {\\n\\n\\t\\t// empty\\n\\n\\t}\\n\\n} );\\n\\n//!\\\\ DECLARE ALIAS AFTER assign prototype !\\nObject.assign( Interpolant.prototype, {\\n\\n\\t//( 0, t, t0 ), returns this.resultBuffer\\n\\tbeforeStart_: Interpolant.prototype.copySampleValue_,\\n\\n\\t//( N-1, tN-1, t ), returns this.resultBuffer\\n\\tafterEnd_: Interpolant.prototype.copySampleValue_,\\n\\n} );\\n\\n/**\\n * Fast and simple cubic spline interpolant.\\n *\\n * It was derived from a Hermitian construction setting the first derivative\\n * at each sample position to the linear slope between neighboring positions\\n * over their parameter interval.\\n *\\n * @author tschw\\n */\\n\\nfunction CubicInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\\n\\n\\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\\n\\n\\tthis._weightPrev = - 0;\\n\\tthis._offsetPrev = - 0;\\n\\tthis._weightNext = - 0;\\n\\tthis._offsetNext = - 0;\\n\\n}\\n\\nCubicInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\\n\\n\\tconstructor: CubicInterpolant,\\n\\n\\tDefaultSettings_: {\\n\\n\\t\\tendingStart: ZeroCurvatureEnding,\\n\\t\\tendingEnd: ZeroCurvatureEnding\\n\\n\\t},\\n\\n\\tintervalChanged_: function ( i1, t0, t1 ) {\\n\\n\\t\\tvar pp = this.parameterPositions,\\n\\t\\t\\tiPrev = i1 - 2,\\n\\t\\t\\tiNext = i1 + 1,\\n\\n\\t\\t\\ttPrev = pp[ iPrev ],\\n\\t\\t\\ttNext = pp[ iNext ];\\n\\n\\t\\tif ( tPrev === undefined ) {\\n\\n\\t\\t\\tswitch ( this.getSettings_().endingStart ) {\\n\\n\\t\\t\\t\\tcase ZeroSlopeEnding:\\n\\n\\t\\t\\t\\t\\t// f'(t0) = 0\\n\\t\\t\\t\\t\\tiPrev = i1;\\n\\t\\t\\t\\t\\ttPrev = 2 * t0 - t1;\\n\\n\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\tcase WrapAroundEnding:\\n\\n\\t\\t\\t\\t\\t// use the other end of the curve\\n\\t\\t\\t\\t\\tiPrev = pp.length - 2;\\n\\t\\t\\t\\t\\ttPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];\\n\\n\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\tdefault: // ZeroCurvatureEnding\\n\\n\\t\\t\\t\\t\\t// f''(t0) = 0 a.k.a. Natural Spline\\n\\t\\t\\t\\t\\tiPrev = i1;\\n\\t\\t\\t\\t\\ttPrev = t1;\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tif ( tNext === undefined ) {\\n\\n\\t\\t\\tswitch ( this.getSettings_().endingEnd ) {\\n\\n\\t\\t\\t\\tcase ZeroSlopeEnding:\\n\\n\\t\\t\\t\\t\\t// f'(tN) = 0\\n\\t\\t\\t\\t\\tiNext = i1;\\n\\t\\t\\t\\t\\ttNext = 2 * t1 - t0;\\n\\n\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\tcase WrapAroundEnding:\\n\\n\\t\\t\\t\\t\\t// use the other end of the curve\\n\\t\\t\\t\\t\\tiNext = 1;\\n\\t\\t\\t\\t\\ttNext = t1 + pp[ 1 ] - pp[ 0 ];\\n\\n\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\tdefault: // ZeroCurvatureEnding\\n\\n\\t\\t\\t\\t\\t// f''(tN) = 0, a.k.a. Natural Spline\\n\\t\\t\\t\\t\\tiNext = i1 - 1;\\n\\t\\t\\t\\t\\ttNext = t0;\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tvar halfDt = ( t1 - t0 ) * 0.5,\\n\\t\\t\\tstride = this.valueSize;\\n\\n\\t\\tthis._weightPrev = halfDt / ( t0 - tPrev );\\n\\t\\tthis._weightNext = halfDt / ( tNext - t1 );\\n\\t\\tthis._offsetPrev = iPrev * stride;\\n\\t\\tthis._offsetNext = iNext * stride;\\n\\n\\t},\\n\\n\\tinterpolate_: function ( i1, t0, t, t1 ) {\\n\\n\\t\\tvar result = this.resultBuffer,\\n\\t\\t\\tvalues = this.sampleValues,\\n\\t\\t\\tstride = this.valueSize,\\n\\n\\t\\t\\to1 = i1 * stride,\\t\\to0 = o1 - stride,\\n\\t\\t\\toP = this._offsetPrev, \\toN = this._offsetNext,\\n\\t\\t\\twP = this._weightPrev,\\twN = this._weightNext,\\n\\n\\t\\t\\tp = ( t - t0 ) / ( t1 - t0 ),\\n\\t\\t\\tpp = p * p,\\n\\t\\t\\tppp = pp * p;\\n\\n\\t\\t// evaluate polynomials\\n\\n\\t\\tvar sP = - wP * ppp + 2 * wP * pp - wP * p;\\n\\t\\tvar s0 = ( 1 + wP ) * ppp + ( - 1.5 - 2 * wP ) * pp + ( - 0.5 + wP ) * p + 1;\\n\\t\\tvar s1 = ( - 1 - wN ) * ppp + ( 1.5 + wN ) * pp + 0.5 * p;\\n\\t\\tvar sN = wN * ppp - wN * pp;\\n\\n\\t\\t// combine data linearly\\n\\n\\t\\tfor ( var i = 0; i !== stride; ++ i ) {\\n\\n\\t\\t\\tresult[ i ] =\\n\\t\\t\\t\\t\\tsP * values[ oP + i ] +\\n\\t\\t\\t\\t\\ts0 * values[ o0 + i ] +\\n\\t\\t\\t\\t\\ts1 * values[ o1 + i ] +\\n\\t\\t\\t\\t\\tsN * values[ oN + i ];\\n\\n\\t\\t}\\n\\n\\t\\treturn result;\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author tschw\\n */\\n\\nfunction LinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\\n\\n\\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\\n\\n}\\n\\nLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\\n\\n\\tconstructor: LinearInterpolant,\\n\\n\\tinterpolate_: function ( i1, t0, t, t1 ) {\\n\\n\\t\\tvar result = this.resultBuffer,\\n\\t\\t\\tvalues = this.sampleValues,\\n\\t\\t\\tstride = this.valueSize,\\n\\n\\t\\t\\toffset1 = i1 * stride,\\n\\t\\t\\toffset0 = offset1 - stride,\\n\\n\\t\\t\\tweight1 = ( t - t0 ) / ( t1 - t0 ),\\n\\t\\t\\tweight0 = 1 - weight1;\\n\\n\\t\\tfor ( var i = 0; i !== stride; ++ i ) {\\n\\n\\t\\t\\tresult[ i ] =\\n\\t\\t\\t\\t\\tvalues[ offset0 + i ] * weight0 +\\n\\t\\t\\t\\t\\tvalues[ offset1 + i ] * weight1;\\n\\n\\t\\t}\\n\\n\\t\\treturn result;\\n\\n\\t}\\n\\n} );\\n\\n/**\\n *\\n * Interpolant that evaluates to the sample value at the position preceeding\\n * the parameter.\\n *\\n * @author tschw\\n */\\n\\nfunction DiscreteInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\\n\\n\\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\\n\\n}\\n\\nDiscreteInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\\n\\n\\tconstructor: DiscreteInterpolant,\\n\\n\\tinterpolate_: function ( i1 /*, t0, t, t1 */ ) {\\n\\n\\t\\treturn this.copySampleValue_( i1 - 1 );\\n\\n\\t}\\n\\n} );\\n\\n/**\\n *\\n * A timed sequence of keyframes for a specific property.\\n *\\n *\\n * @author Ben Houston / http://clara.io/\\n * @author David Sarno / http://lighthaus.us/\\n * @author tschw\\n */\\n\\nfunction KeyframeTrack( name, times, values, interpolation ) {\\n\\n\\tif ( name === undefined ) throw new Error( 'THREE.KeyframeTrack: track name is undefined' );\\n\\tif ( times === undefined || times.length === 0 ) throw new Error( 'THREE.KeyframeTrack: no keyframes in track named ' + name );\\n\\n\\tthis.name = name;\\n\\n\\tthis.times = AnimationUtils.convertArray( times, this.TimeBufferType );\\n\\tthis.values = AnimationUtils.convertArray( values, this.ValueBufferType );\\n\\n\\tthis.setInterpolation( interpolation || this.DefaultInterpolation );\\n\\n}\\n\\n// Static methods\\n\\nObject.assign( KeyframeTrack, {\\n\\n\\t// Serialization (in static context, because of constructor invocation\\n\\t// and automatic invocation of .toJSON):\\n\\n\\ttoJSON: function ( track ) {\\n\\n\\t\\tvar trackType = track.constructor;\\n\\n\\t\\tvar json;\\n\\n\\t\\t// derived classes can define a static toJSON method\\n\\t\\tif ( trackType.toJSON !== undefined ) {\\n\\n\\t\\t\\tjson = trackType.toJSON( track );\\n\\n\\t\\t} else {\\n\\n\\t\\t\\t// by default, we assume the data can be serialized as-is\\n\\t\\t\\tjson = {\\n\\n\\t\\t\\t\\t'name': track.name,\\n\\t\\t\\t\\t'times': AnimationUtils.convertArray( track.times, Array ),\\n\\t\\t\\t\\t'values': AnimationUtils.convertArray( track.values, Array )\\n\\n\\t\\t\\t};\\n\\n\\t\\t\\tvar interpolation = track.getInterpolation();\\n\\n\\t\\t\\tif ( interpolation !== track.DefaultInterpolation ) {\\n\\n\\t\\t\\t\\tjson.interpolation = interpolation;\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tjson.type = track.ValueTypeName; // mandatory\\n\\n\\t\\treturn json;\\n\\n\\t}\\n\\n} );\\n\\nObject.assign( KeyframeTrack.prototype, {\\n\\n\\tconstructor: KeyframeTrack,\\n\\n\\tTimeBufferType: Float32Array,\\n\\n\\tValueBufferType: Float32Array,\\n\\n\\tDefaultInterpolation: InterpolateLinear,\\n\\n\\tInterpolantFactoryMethodDiscrete: function ( result ) {\\n\\n\\t\\treturn new DiscreteInterpolant( this.times, this.values, this.getValueSize(), result );\\n\\n\\t},\\n\\n\\tInterpolantFactoryMethodLinear: function ( result ) {\\n\\n\\t\\treturn new LinearInterpolant( this.times, this.values, this.getValueSize(), result );\\n\\n\\t},\\n\\n\\tInterpolantFactoryMethodSmooth: function ( result ) {\\n\\n\\t\\treturn new CubicInterpolant( this.times, this.values, this.getValueSize(), result );\\n\\n\\t},\\n\\n\\tsetInterpolation: function ( interpolation ) {\\n\\n\\t\\tvar factoryMethod;\\n\\n\\t\\tswitch ( interpolation ) {\\n\\n\\t\\t\\tcase InterpolateDiscrete:\\n\\n\\t\\t\\t\\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase InterpolateLinear:\\n\\n\\t\\t\\t\\tfactoryMethod = this.InterpolantFactoryMethodLinear;\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase InterpolateSmooth:\\n\\n\\t\\t\\t\\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t}\\n\\n\\t\\tif ( factoryMethod === undefined ) {\\n\\n\\t\\t\\tvar message = \\\"unsupported interpolation for \\\" +\\n\\t\\t\\t\\tthis.ValueTypeName + \\\" keyframe track named \\\" + this.name;\\n\\n\\t\\t\\tif ( this.createInterpolant === undefined ) {\\n\\n\\t\\t\\t\\t// fall back to default, unless the default itself is messed up\\n\\t\\t\\t\\tif ( interpolation !== this.DefaultInterpolation ) {\\n\\n\\t\\t\\t\\t\\tthis.setInterpolation( this.DefaultInterpolation );\\n\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\tthrow new Error( message ); // fatal, in this case\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tconsole.warn( 'THREE.KeyframeTrack:', message );\\n\\t\\t\\treturn this;\\n\\n\\t\\t}\\n\\n\\t\\tthis.createInterpolant = factoryMethod;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tgetInterpolation: function () {\\n\\n\\t\\tswitch ( this.createInterpolant ) {\\n\\n\\t\\t\\tcase this.InterpolantFactoryMethodDiscrete:\\n\\n\\t\\t\\t\\treturn InterpolateDiscrete;\\n\\n\\t\\t\\tcase this.InterpolantFactoryMethodLinear:\\n\\n\\t\\t\\t\\treturn InterpolateLinear;\\n\\n\\t\\t\\tcase this.InterpolantFactoryMethodSmooth:\\n\\n\\t\\t\\t\\treturn InterpolateSmooth;\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\tgetValueSize: function () {\\n\\n\\t\\treturn this.values.length / this.times.length;\\n\\n\\t},\\n\\n\\t// move all keyframes either forwards or backwards in time\\n\\tshift: function ( timeOffset ) {\\n\\n\\t\\tif ( timeOffset !== 0.0 ) {\\n\\n\\t\\t\\tvar times = this.times;\\n\\n\\t\\t\\tfor ( var i = 0, n = times.length; i !== n; ++ i ) {\\n\\n\\t\\t\\t\\ttimes[ i ] += timeOffset;\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\t// scale all keyframe times by a factor (useful for frame <-> seconds conversions)\\n\\tscale: function ( timeScale ) {\\n\\n\\t\\tif ( timeScale !== 1.0 ) {\\n\\n\\t\\t\\tvar times = this.times;\\n\\n\\t\\t\\tfor ( var i = 0, n = times.length; i !== n; ++ i ) {\\n\\n\\t\\t\\t\\ttimes[ i ] *= timeScale;\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\t// removes keyframes before and after animation without changing any values within the range [startTime, endTime].\\n\\t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\\n\\ttrim: function ( startTime, endTime ) {\\n\\n\\t\\tvar times = this.times,\\n\\t\\t\\tnKeys = times.length,\\n\\t\\t\\tfrom = 0,\\n\\t\\t\\tto = nKeys - 1;\\n\\n\\t\\twhile ( from !== nKeys && times[ from ] < startTime ) {\\n\\n\\t\\t\\t++ from;\\n\\n\\t\\t}\\n\\n\\t\\twhile ( to !== - 1 && times[ to ] > endTime ) {\\n\\n\\t\\t\\t-- to;\\n\\n\\t\\t}\\n\\n\\t\\t++ to; // inclusive -> exclusive bound\\n\\n\\t\\tif ( from !== 0 || to !== nKeys ) {\\n\\n\\t\\t\\t// empty tracks are forbidden, so keep at least one keyframe\\n\\t\\t\\tif ( from >= to ) to = Math.max( to, 1 ), from = to - 1;\\n\\n\\t\\t\\tvar stride = this.getValueSize();\\n\\t\\t\\tthis.times = AnimationUtils.arraySlice( times, from, to );\\n\\t\\t\\tthis.values = AnimationUtils.arraySlice( this.values, from * stride, to * stride );\\n\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\t// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\\n\\tvalidate: function () {\\n\\n\\t\\tvar valid = true;\\n\\n\\t\\tvar valueSize = this.getValueSize();\\n\\t\\tif ( valueSize - Math.floor( valueSize ) !== 0 ) {\\n\\n\\t\\t\\tconsole.error( 'THREE.KeyframeTrack: Invalid value size in track.', this );\\n\\t\\t\\tvalid = false;\\n\\n\\t\\t}\\n\\n\\t\\tvar times = this.times,\\n\\t\\t\\tvalues = this.values,\\n\\n\\t\\t\\tnKeys = times.length;\\n\\n\\t\\tif ( nKeys === 0 ) {\\n\\n\\t\\t\\tconsole.error( 'THREE.KeyframeTrack: Track is empty.', this );\\n\\t\\t\\tvalid = false;\\n\\n\\t\\t}\\n\\n\\t\\tvar prevTime = null;\\n\\n\\t\\tfor ( var i = 0; i !== nKeys; i ++ ) {\\n\\n\\t\\t\\tvar currTime = times[ i ];\\n\\n\\t\\t\\tif ( typeof currTime === 'number' && isNaN( currTime ) ) {\\n\\n\\t\\t\\t\\tconsole.error( 'THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime );\\n\\t\\t\\t\\tvalid = false;\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( prevTime !== null && prevTime > currTime ) {\\n\\n\\t\\t\\t\\tconsole.error( 'THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime );\\n\\t\\t\\t\\tvalid = false;\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tprevTime = currTime;\\n\\n\\t\\t}\\n\\n\\t\\tif ( values !== undefined ) {\\n\\n\\t\\t\\tif ( AnimationUtils.isTypedArray( values ) ) {\\n\\n\\t\\t\\t\\tfor ( var i = 0, n = values.length; i !== n; ++ i ) {\\n\\n\\t\\t\\t\\t\\tvar value = values[ i ];\\n\\n\\t\\t\\t\\t\\tif ( isNaN( value ) ) {\\n\\n\\t\\t\\t\\t\\t\\tconsole.error( 'THREE.KeyframeTrack: Value is not a valid number.', this, i, value );\\n\\t\\t\\t\\t\\t\\tvalid = false;\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\treturn valid;\\n\\n\\t},\\n\\n\\t// removes equivalent sequential keys as common in morph target sequences\\n\\t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\\n\\toptimize: function () {\\n\\n\\t\\tvar times = this.times,\\n\\t\\t\\tvalues = this.values,\\n\\t\\t\\tstride = this.getValueSize(),\\n\\n\\t\\t\\tsmoothInterpolation = this.getInterpolation() === InterpolateSmooth,\\n\\n\\t\\t\\twriteIndex = 1,\\n\\t\\t\\tlastIndex = times.length - 1;\\n\\n\\t\\tfor ( var i = 1; i < lastIndex; ++ i ) {\\n\\n\\t\\t\\tvar keep = false;\\n\\n\\t\\t\\tvar time = times[ i ];\\n\\t\\t\\tvar timeNext = times[ i + 1 ];\\n\\n\\t\\t\\t// remove adjacent keyframes scheduled at the same time\\n\\n\\t\\t\\tif ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {\\n\\n\\t\\t\\t\\tif ( ! smoothInterpolation ) {\\n\\n\\t\\t\\t\\t\\t// remove unnecessary keyframes same as their neighbors\\n\\n\\t\\t\\t\\t\\tvar offset = i * stride,\\n\\t\\t\\t\\t\\t\\toffsetP = offset - stride,\\n\\t\\t\\t\\t\\t\\toffsetN = offset + stride;\\n\\n\\t\\t\\t\\t\\tfor ( var j = 0; j !== stride; ++ j ) {\\n\\n\\t\\t\\t\\t\\t\\tvar value = values[ offset + j ];\\n\\n\\t\\t\\t\\t\\t\\tif ( value !== values[ offsetP + j ] ||\\n\\t\\t\\t\\t\\t\\t\\tvalue !== values[ offsetN + j ] ) {\\n\\n\\t\\t\\t\\t\\t\\t\\tkeep = true;\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\tkeep = true;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\t// in-place compaction\\n\\n\\t\\t\\tif ( keep ) {\\n\\n\\t\\t\\t\\tif ( i !== writeIndex ) {\\n\\n\\t\\t\\t\\t\\ttimes[ writeIndex ] = times[ i ];\\n\\n\\t\\t\\t\\t\\tvar readOffset = i * stride,\\n\\t\\t\\t\\t\\t\\twriteOffset = writeIndex * stride;\\n\\n\\t\\t\\t\\t\\tfor ( var j = 0; j !== stride; ++ j ) {\\n\\n\\t\\t\\t\\t\\t\\tvalues[ writeOffset + j ] = values[ readOffset + j ];\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t++ writeIndex;\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\t// flush last keyframe (compaction looks ahead)\\n\\n\\t\\tif ( lastIndex > 0 ) {\\n\\n\\t\\t\\ttimes[ writeIndex ] = times[ lastIndex ];\\n\\n\\t\\t\\tfor ( var readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j ) {\\n\\n\\t\\t\\t\\tvalues[ writeOffset + j ] = values[ readOffset + j ];\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\t++ writeIndex;\\n\\n\\t\\t}\\n\\n\\t\\tif ( writeIndex !== times.length ) {\\n\\n\\t\\t\\tthis.times = AnimationUtils.arraySlice( times, 0, writeIndex );\\n\\t\\t\\tthis.values = AnimationUtils.arraySlice( values, 0, writeIndex * stride );\\n\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tclone: function () {\\n\\n\\t\\tvar times = AnimationUtils.arraySlice( this.times, 0 );\\n\\t\\tvar values = AnimationUtils.arraySlice( this.values, 0 );\\n\\n\\t\\tvar TypedKeyframeTrack = this.constructor;\\n\\t\\tvar track = new TypedKeyframeTrack( this.name, times, values );\\n\\n\\t\\t// Interpolant argument to constructor is not saved, so copy the factory method directly.\\n\\t\\ttrack.createInterpolant = this.createInterpolant;\\n\\n\\t\\treturn track;\\n\\n\\t}\\n\\n} );\\n\\n/**\\n *\\n * A Track of Boolean keyframe values.\\n *\\n *\\n * @author Ben Houston / http://clara.io/\\n * @author David Sarno / http://lighthaus.us/\\n * @author tschw\\n */\\n\\nfunction BooleanKeyframeTrack( name, times, values ) {\\n\\n\\tKeyframeTrack.call( this, name, times, values );\\n\\n}\\n\\nBooleanKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\\n\\n\\tconstructor: BooleanKeyframeTrack,\\n\\n\\tValueTypeName: 'bool',\\n\\tValueBufferType: Array,\\n\\n\\tDefaultInterpolation: InterpolateDiscrete,\\n\\n\\tInterpolantFactoryMethodLinear: undefined,\\n\\tInterpolantFactoryMethodSmooth: undefined\\n\\n\\t// Note: Actually this track could have a optimized / compressed\\n\\t// representation of a single value and a custom interpolant that\\n\\t// computes \\\"firstValue ^ isOdd( index )\\\".\\n\\n} );\\n\\n/**\\n *\\n * A Track of keyframe values that represent color.\\n *\\n *\\n * @author Ben Houston / http://clara.io/\\n * @author David Sarno / http://lighthaus.us/\\n * @author tschw\\n */\\n\\nfunction ColorKeyframeTrack( name, times, values, interpolation ) {\\n\\n\\tKeyframeTrack.call( this, name, times, values, interpolation );\\n\\n}\\n\\nColorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\\n\\n\\tconstructor: ColorKeyframeTrack,\\n\\n\\tValueTypeName: 'color'\\n\\n\\t// ValueBufferType is inherited\\n\\n\\t// DefaultInterpolation is inherited\\n\\n\\t// Note: Very basic implementation and nothing special yet.\\n\\t// However, this is the place for color space parameterization.\\n\\n} );\\n\\n/**\\n *\\n * A Track of numeric keyframe values.\\n *\\n * @author Ben Houston / http://clara.io/\\n * @author David Sarno / http://lighthaus.us/\\n * @author tschw\\n */\\n\\nfunction NumberKeyframeTrack( name, times, values, interpolation ) {\\n\\n\\tKeyframeTrack.call( this, name, times, values, interpolation );\\n\\n}\\n\\nNumberKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\\n\\n\\tconstructor: NumberKeyframeTrack,\\n\\n\\tValueTypeName: 'number'\\n\\n\\t// ValueBufferType is inherited\\n\\n\\t// DefaultInterpolation is inherited\\n\\n} );\\n\\n/**\\n * Spherical linear unit quaternion interpolant.\\n *\\n * @author tschw\\n */\\n\\nfunction QuaternionLinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\\n\\n\\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\\n\\n}\\n\\nQuaternionLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\\n\\n\\tconstructor: QuaternionLinearInterpolant,\\n\\n\\tinterpolate_: function ( i1, t0, t, t1 ) {\\n\\n\\t\\tvar result = this.resultBuffer,\\n\\t\\t\\tvalues = this.sampleValues,\\n\\t\\t\\tstride = this.valueSize,\\n\\n\\t\\t\\toffset = i1 * stride,\\n\\n\\t\\t\\talpha = ( t - t0 ) / ( t1 - t0 );\\n\\n\\t\\tfor ( var end = offset + stride; offset !== end; offset += 4 ) {\\n\\n\\t\\t\\tQuaternion.slerpFlat( result, 0, values, offset - stride, values, offset, alpha );\\n\\n\\t\\t}\\n\\n\\t\\treturn result;\\n\\n\\t}\\n\\n} );\\n\\n/**\\n *\\n * A Track of quaternion keyframe values.\\n *\\n * @author Ben Houston / http://clara.io/\\n * @author David Sarno / http://lighthaus.us/\\n * @author tschw\\n */\\n\\nfunction QuaternionKeyframeTrack( name, times, values, interpolation ) {\\n\\n\\tKeyframeTrack.call( this, name, times, values, interpolation );\\n\\n}\\n\\nQuaternionKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\\n\\n\\tconstructor: QuaternionKeyframeTrack,\\n\\n\\tValueTypeName: 'quaternion',\\n\\n\\t// ValueBufferType is inherited\\n\\n\\tDefaultInterpolation: InterpolateLinear,\\n\\n\\tInterpolantFactoryMethodLinear: function ( result ) {\\n\\n\\t\\treturn new QuaternionLinearInterpolant( this.times, this.values, this.getValueSize(), result );\\n\\n\\t},\\n\\n\\tInterpolantFactoryMethodSmooth: undefined // not yet implemented\\n\\n} );\\n\\n/**\\n *\\n * A Track that interpolates Strings\\n *\\n *\\n * @author Ben Houston / http://clara.io/\\n * @author David Sarno / http://lighthaus.us/\\n * @author tschw\\n */\\n\\nfunction StringKeyframeTrack( name, times, values, interpolation ) {\\n\\n\\tKeyframeTrack.call( this, name, times, values, interpolation );\\n\\n}\\n\\nStringKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\\n\\n\\tconstructor: StringKeyframeTrack,\\n\\n\\tValueTypeName: 'string',\\n\\tValueBufferType: Array,\\n\\n\\tDefaultInterpolation: InterpolateDiscrete,\\n\\n\\tInterpolantFactoryMethodLinear: undefined,\\n\\n\\tInterpolantFactoryMethodSmooth: undefined\\n\\n} );\\n\\n/**\\n *\\n * A Track of vectored keyframe values.\\n *\\n *\\n * @author Ben Houston / http://clara.io/\\n * @author David Sarno / http://lighthaus.us/\\n * @author tschw\\n */\\n\\nfunction VectorKeyframeTrack( name, times, values, interpolation ) {\\n\\n\\tKeyframeTrack.call( this, name, times, values, interpolation );\\n\\n}\\n\\nVectorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\\n\\n\\tconstructor: VectorKeyframeTrack,\\n\\n\\tValueTypeName: 'vector'\\n\\n\\t// ValueBufferType is inherited\\n\\n\\t// DefaultInterpolation is inherited\\n\\n} );\\n\\n/**\\n *\\n * Reusable set of Tracks that represent an animation.\\n *\\n * @author Ben Houston / http://clara.io/\\n * @author David Sarno / http://lighthaus.us/\\n */\\n\\nfunction AnimationClip( name, duration, tracks ) {\\n\\n\\tthis.name = name;\\n\\tthis.tracks = tracks;\\n\\tthis.duration = ( duration !== undefined ) ? duration : - 1;\\n\\n\\tthis.uuid = _Math.generateUUID();\\n\\n\\t// this means it should figure out its duration by scanning the tracks\\n\\tif ( this.duration < 0 ) {\\n\\n\\t\\tthis.resetDuration();\\n\\n\\t}\\n\\n}\\n\\nfunction getTrackTypeForValueTypeName( typeName ) {\\n\\n\\tswitch ( typeName.toLowerCase() ) {\\n\\n\\t\\tcase 'scalar':\\n\\t\\tcase 'double':\\n\\t\\tcase 'float':\\n\\t\\tcase 'number':\\n\\t\\tcase 'integer':\\n\\n\\t\\t\\treturn NumberKeyframeTrack;\\n\\n\\t\\tcase 'vector':\\n\\t\\tcase 'vector2':\\n\\t\\tcase 'vector3':\\n\\t\\tcase 'vector4':\\n\\n\\t\\t\\treturn VectorKeyframeTrack;\\n\\n\\t\\tcase 'color':\\n\\n\\t\\t\\treturn ColorKeyframeTrack;\\n\\n\\t\\tcase 'quaternion':\\n\\n\\t\\t\\treturn QuaternionKeyframeTrack;\\n\\n\\t\\tcase 'bool':\\n\\t\\tcase 'boolean':\\n\\n\\t\\t\\treturn BooleanKeyframeTrack;\\n\\n\\t\\tcase 'string':\\n\\n\\t\\t\\treturn StringKeyframeTrack;\\n\\n\\t}\\n\\n\\tthrow new Error( 'THREE.KeyframeTrack: Unsupported typeName: ' + typeName );\\n\\n}\\n\\nfunction parseKeyframeTrack( json ) {\\n\\n\\tif ( json.type === undefined ) {\\n\\n\\t\\tthrow new Error( 'THREE.KeyframeTrack: track type undefined, can not parse' );\\n\\n\\t}\\n\\n\\tvar trackType = getTrackTypeForValueTypeName( json.type );\\n\\n\\tif ( json.times === undefined ) {\\n\\n\\t\\tvar times = [], values = [];\\n\\n\\t\\tAnimationUtils.flattenJSON( json.keys, times, values, 'value' );\\n\\n\\t\\tjson.times = times;\\n\\t\\tjson.values = values;\\n\\n\\t}\\n\\n\\t// derived classes can define a static parse method\\n\\tif ( trackType.parse !== undefined ) {\\n\\n\\t\\treturn trackType.parse( json );\\n\\n\\t} else {\\n\\n\\t\\t// by default, we assume a constructor compatible with the base\\n\\t\\treturn new trackType( json.name, json.times, json.values, json.interpolation );\\n\\n\\t}\\n\\n}\\n\\nObject.assign( AnimationClip, {\\n\\n\\tparse: function ( json ) {\\n\\n\\t\\tvar tracks = [],\\n\\t\\t\\tjsonTracks = json.tracks,\\n\\t\\t\\tframeTime = 1.0 / ( json.fps || 1.0 );\\n\\n\\t\\tfor ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {\\n\\n\\t\\t\\ttracks.push( parseKeyframeTrack( jsonTracks[ i ] ).scale( frameTime ) );\\n\\n\\t\\t}\\n\\n\\t\\treturn new AnimationClip( json.name, json.duration, tracks );\\n\\n\\t},\\n\\n\\ttoJSON: function ( clip ) {\\n\\n\\t\\tvar tracks = [],\\n\\t\\t\\tclipTracks = clip.tracks;\\n\\n\\t\\tvar json = {\\n\\n\\t\\t\\t'name': clip.name,\\n\\t\\t\\t'duration': clip.duration,\\n\\t\\t\\t'tracks': tracks,\\n\\t\\t\\t'uuid': clip.uuid\\n\\n\\t\\t};\\n\\n\\t\\tfor ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {\\n\\n\\t\\t\\ttracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );\\n\\n\\t\\t}\\n\\n\\t\\treturn json;\\n\\n\\t},\\n\\n\\tCreateFromMorphTargetSequence: function ( name, morphTargetSequence, fps, noLoop ) {\\n\\n\\t\\tvar numMorphTargets = morphTargetSequence.length;\\n\\t\\tvar tracks = [];\\n\\n\\t\\tfor ( var i = 0; i < numMorphTargets; i ++ ) {\\n\\n\\t\\t\\tvar times = [];\\n\\t\\t\\tvar values = [];\\n\\n\\t\\t\\ttimes.push(\\n\\t\\t\\t\\t( i + numMorphTargets - 1 ) % numMorphTargets,\\n\\t\\t\\t\\ti,\\n\\t\\t\\t\\t( i + 1 ) % numMorphTargets );\\n\\n\\t\\t\\tvalues.push( 0, 1, 0 );\\n\\n\\t\\t\\tvar order = AnimationUtils.getKeyframeOrder( times );\\n\\t\\t\\ttimes = AnimationUtils.sortedArray( times, 1, order );\\n\\t\\t\\tvalues = AnimationUtils.sortedArray( values, 1, order );\\n\\n\\t\\t\\t// if there is a key at the first frame, duplicate it as the\\n\\t\\t\\t// last frame as well for perfect loop.\\n\\t\\t\\tif ( ! noLoop && times[ 0 ] === 0 ) {\\n\\n\\t\\t\\t\\ttimes.push( numMorphTargets );\\n\\t\\t\\t\\tvalues.push( values[ 0 ] );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\ttracks.push(\\n\\t\\t\\t\\tnew NumberKeyframeTrack(\\n\\t\\t\\t\\t\\t'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',\\n\\t\\t\\t\\t\\ttimes, values\\n\\t\\t\\t\\t).scale( 1.0 / fps ) );\\n\\n\\t\\t}\\n\\n\\t\\treturn new AnimationClip( name, - 1, tracks );\\n\\n\\t},\\n\\n\\tfindByName: function ( objectOrClipArray, name ) {\\n\\n\\t\\tvar clipArray = objectOrClipArray;\\n\\n\\t\\tif ( ! Array.isArray( objectOrClipArray ) ) {\\n\\n\\t\\t\\tvar o = objectOrClipArray;\\n\\t\\t\\tclipArray = o.geometry && o.geometry.animations || o.animations;\\n\\n\\t\\t}\\n\\n\\t\\tfor ( var i = 0; i < clipArray.length; i ++ ) {\\n\\n\\t\\t\\tif ( clipArray[ i ].name === name ) {\\n\\n\\t\\t\\t\\treturn clipArray[ i ];\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\treturn null;\\n\\n\\t},\\n\\n\\tCreateClipsFromMorphTargetSequences: function ( morphTargets, fps, noLoop ) {\\n\\n\\t\\tvar animationToMorphTargets = {};\\n\\n\\t\\t// tested with https://regex101.com/ on trick sequences\\n\\t\\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\\n\\t\\tvar pattern = /^([\\\\w-]*?)([\\\\d]+)$/;\\n\\n\\t\\t// sort morph target names into animation groups based\\n\\t\\t// patterns like Walk_001, Walk_002, Run_001, Run_002\\n\\t\\tfor ( var i = 0, il = morphTargets.length; i < il; i ++ ) {\\n\\n\\t\\t\\tvar morphTarget = morphTargets[ i ];\\n\\t\\t\\tvar parts = morphTarget.name.match( pattern );\\n\\n\\t\\t\\tif ( parts && parts.length > 1 ) {\\n\\n\\t\\t\\t\\tvar name = parts[ 1 ];\\n\\n\\t\\t\\t\\tvar animationMorphTargets = animationToMorphTargets[ name ];\\n\\t\\t\\t\\tif ( ! animationMorphTargets ) {\\n\\n\\t\\t\\t\\t\\tanimationToMorphTargets[ name ] = animationMorphTargets = [];\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tanimationMorphTargets.push( morphTarget );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tvar clips = [];\\n\\n\\t\\tfor ( var name in animationToMorphTargets ) {\\n\\n\\t\\t\\tclips.push( AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );\\n\\n\\t\\t}\\n\\n\\t\\treturn clips;\\n\\n\\t},\\n\\n\\t// parse the animation.hierarchy format\\n\\tparseAnimation: function ( animation, bones ) {\\n\\n\\t\\tif ( ! animation ) {\\n\\n\\t\\t\\tconsole.error( 'THREE.AnimationClip: No animation in JSONLoader data.' );\\n\\t\\t\\treturn null;\\n\\n\\t\\t}\\n\\n\\t\\tvar addNonemptyTrack = function ( trackType, trackName, animationKeys, propertyName, destTracks ) {\\n\\n\\t\\t\\t// only return track if there are actually keys.\\n\\t\\t\\tif ( animationKeys.length !== 0 ) {\\n\\n\\t\\t\\t\\tvar times = [];\\n\\t\\t\\t\\tvar values = [];\\n\\n\\t\\t\\t\\tAnimationUtils.flattenJSON( animationKeys, times, values, propertyName );\\n\\n\\t\\t\\t\\t// empty keys are filtered out, so check again\\n\\t\\t\\t\\tif ( times.length !== 0 ) {\\n\\n\\t\\t\\t\\t\\tdestTracks.push( new trackType( trackName, times, values ) );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t};\\n\\n\\t\\tvar tracks = [];\\n\\n\\t\\tvar clipName = animation.name || 'default';\\n\\t\\t// automatic length determination in AnimationClip.\\n\\t\\tvar duration = animation.length || - 1;\\n\\t\\tvar fps = animation.fps || 30;\\n\\n\\t\\tvar hierarchyTracks = animation.hierarchy || [];\\n\\n\\t\\tfor ( var h = 0; h < hierarchyTracks.length; h ++ ) {\\n\\n\\t\\t\\tvar animationKeys = hierarchyTracks[ h ].keys;\\n\\n\\t\\t\\t// skip empty tracks\\n\\t\\t\\tif ( ! animationKeys || animationKeys.length === 0 ) continue;\\n\\n\\t\\t\\t// process morph targets\\n\\t\\t\\tif ( animationKeys[ 0 ].morphTargets ) {\\n\\n\\t\\t\\t\\t// figure out all morph targets used in this track\\n\\t\\t\\t\\tvar morphTargetNames = {};\\n\\n\\t\\t\\t\\tfor ( var k = 0; k < animationKeys.length; k ++ ) {\\n\\n\\t\\t\\t\\t\\tif ( animationKeys[ k ].morphTargets ) {\\n\\n\\t\\t\\t\\t\\t\\tfor ( var m = 0; m < animationKeys[ k ].morphTargets.length; m ++ ) {\\n\\n\\t\\t\\t\\t\\t\\t\\tmorphTargetNames[ animationKeys[ k ].morphTargets[ m ] ] = - 1;\\n\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// create a track for each morph target with all zero\\n\\t\\t\\t\\t// morphTargetInfluences except for the keys in which\\n\\t\\t\\t\\t// the morphTarget is named.\\n\\t\\t\\t\\tfor ( var morphTargetName in morphTargetNames ) {\\n\\n\\t\\t\\t\\t\\tvar times = [];\\n\\t\\t\\t\\t\\tvar values = [];\\n\\n\\t\\t\\t\\t\\tfor ( var m = 0; m !== animationKeys[ k ].morphTargets.length; ++ m ) {\\n\\n\\t\\t\\t\\t\\t\\tvar animationKey = animationKeys[ k ];\\n\\n\\t\\t\\t\\t\\t\\ttimes.push( animationKey.time );\\n\\t\\t\\t\\t\\t\\tvalues.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\ttracks.push( new NumberKeyframeTrack( '.morphTargetInfluence[' + morphTargetName + ']', times, values ) );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tduration = morphTargetNames.length * ( fps || 1.0 );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t// ...assume skeletal animation\\n\\n\\t\\t\\t\\tvar boneName = '.bones[' + bones[ h ].name + ']';\\n\\n\\t\\t\\t\\taddNonemptyTrack(\\n\\t\\t\\t\\t\\tVectorKeyframeTrack, boneName + '.position',\\n\\t\\t\\t\\t\\tanimationKeys, 'pos', tracks );\\n\\n\\t\\t\\t\\taddNonemptyTrack(\\n\\t\\t\\t\\t\\tQuaternionKeyframeTrack, boneName + '.quaternion',\\n\\t\\t\\t\\t\\tanimationKeys, 'rot', tracks );\\n\\n\\t\\t\\t\\taddNonemptyTrack(\\n\\t\\t\\t\\t\\tVectorKeyframeTrack, boneName + '.scale',\\n\\t\\t\\t\\t\\tanimationKeys, 'scl', tracks );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tif ( tracks.length === 0 ) {\\n\\n\\t\\t\\treturn null;\\n\\n\\t\\t}\\n\\n\\t\\tvar clip = new AnimationClip( clipName, duration, tracks );\\n\\n\\t\\treturn clip;\\n\\n\\t}\\n\\n} );\\n\\nObject.assign( AnimationClip.prototype, {\\n\\n\\tresetDuration: function () {\\n\\n\\t\\tvar tracks = this.tracks, duration = 0;\\n\\n\\t\\tfor ( var i = 0, n = tracks.length; i !== n; ++ i ) {\\n\\n\\t\\t\\tvar track = this.tracks[ i ];\\n\\n\\t\\t\\tduration = Math.max( duration, track.times[ track.times.length - 1 ] );\\n\\n\\t\\t}\\n\\n\\t\\tthis.duration = duration;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\ttrim: function () {\\n\\n\\t\\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\\n\\n\\t\\t\\tthis.tracks[ i ].trim( 0, this.duration );\\n\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tvalidate: function () {\\n\\n\\t\\tvar valid = true;\\n\\n\\t\\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\\n\\n\\t\\t\\tvalid = valid && this.tracks[ i ].validate();\\n\\n\\t\\t}\\n\\n\\t\\treturn valid;\\n\\n\\t},\\n\\n\\toptimize: function () {\\n\\n\\t\\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\\n\\n\\t\\t\\tthis.tracks[ i ].optimize();\\n\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\n\\tclone: function () {\\n\\n\\t\\tvar tracks = [];\\n\\n\\t\\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\\n\\n\\t\\t\\ttracks.push( this.tracks[ i ].clone() );\\n\\n\\t\\t}\\n\\n\\t\\treturn new AnimationClip( this.name, this.duration, tracks );\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\nvar Cache = {\\n\\n\\tenabled: false,\\n\\n\\tfiles: {},\\n\\n\\tadd: function ( key, file ) {\\n\\n\\t\\tif ( this.enabled === false ) return;\\n\\n\\t\\t// console.log( 'THREE.Cache', 'Adding key:', key );\\n\\n\\t\\tthis.files[ key ] = file;\\n\\n\\t},\\n\\n\\tget: function ( key ) {\\n\\n\\t\\tif ( this.enabled === false ) return;\\n\\n\\t\\t// console.log( 'THREE.Cache', 'Checking key:', key );\\n\\n\\t\\treturn this.files[ key ];\\n\\n\\t},\\n\\n\\tremove: function ( key ) {\\n\\n\\t\\tdelete this.files[ key ];\\n\\n\\t},\\n\\n\\tclear: function () {\\n\\n\\t\\tthis.files = {};\\n\\n\\t}\\n\\n};\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\nfunction LoadingManager( onLoad, onProgress, onError ) {\\n\\n\\tvar scope = this;\\n\\n\\tvar isLoading = false;\\n\\tvar itemsLoaded = 0;\\n\\tvar itemsTotal = 0;\\n\\tvar urlModifier = undefined;\\n\\n\\t// Refer to #5689 for the reason why we don't set .onStart\\n\\t// in the constructor\\n\\n\\tthis.onStart = undefined;\\n\\tthis.onLoad = onLoad;\\n\\tthis.onProgress = onProgress;\\n\\tthis.onError = onError;\\n\\n\\tthis.itemStart = function ( url ) {\\n\\n\\t\\titemsTotal ++;\\n\\n\\t\\tif ( isLoading === false ) {\\n\\n\\t\\t\\tif ( scope.onStart !== undefined ) {\\n\\n\\t\\t\\t\\tscope.onStart( url, itemsLoaded, itemsTotal );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tisLoading = true;\\n\\n\\t};\\n\\n\\tthis.itemEnd = function ( url ) {\\n\\n\\t\\titemsLoaded ++;\\n\\n\\t\\tif ( scope.onProgress !== undefined ) {\\n\\n\\t\\t\\tscope.onProgress( url, itemsLoaded, itemsTotal );\\n\\n\\t\\t}\\n\\n\\t\\tif ( itemsLoaded === itemsTotal ) {\\n\\n\\t\\t\\tisLoading = false;\\n\\n\\t\\t\\tif ( scope.onLoad !== undefined ) {\\n\\n\\t\\t\\t\\tscope.onLoad();\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t};\\n\\n\\tthis.itemError = function ( url ) {\\n\\n\\t\\tif ( scope.onError !== undefined ) {\\n\\n\\t\\t\\tscope.onError( url );\\n\\n\\t\\t}\\n\\n\\t};\\n\\n\\tthis.resolveURL = function ( url ) {\\n\\n\\t\\tif ( urlModifier ) {\\n\\n\\t\\t\\treturn urlModifier( url );\\n\\n\\t\\t}\\n\\n\\t\\treturn url;\\n\\n\\t};\\n\\n\\tthis.setURLModifier = function ( transform ) {\\n\\n\\t\\turlModifier = transform;\\n\\t\\treturn this;\\n\\n\\t};\\n\\n}\\n\\nvar DefaultLoadingManager = new LoadingManager();\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\nvar loading = {};\\n\\nfunction FileLoader( manager ) {\\n\\n\\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\\n\\n}\\n\\nObject.assign( FileLoader.prototype, {\\n\\n\\tload: function ( url, onLoad, onProgress, onError ) {\\n\\n\\t\\tif ( url === undefined ) url = '';\\n\\n\\t\\tif ( this.path !== undefined ) url = this.path + url;\\n\\n\\t\\turl = this.manager.resolveURL( url );\\n\\n\\t\\tvar scope = this;\\n\\n\\t\\tvar cached = Cache.get( url );\\n\\n\\t\\tif ( cached !== undefined ) {\\n\\n\\t\\t\\tscope.manager.itemStart( url );\\n\\n\\t\\t\\tsetTimeout( function () {\\n\\n\\t\\t\\t\\tif ( onLoad ) onLoad( cached );\\n\\n\\t\\t\\t\\tscope.manager.itemEnd( url );\\n\\n\\t\\t\\t}, 0 );\\n\\n\\t\\t\\treturn cached;\\n\\n\\t\\t}\\n\\n\\t\\t// Check if request is duplicate\\n\\n\\t\\tif ( loading[ url ] !== undefined ) {\\n\\n\\t\\t\\tloading[ url ].push( {\\n\\n\\t\\t\\t\\tonLoad: onLoad,\\n\\t\\t\\t\\tonProgress: onProgress,\\n\\t\\t\\t\\tonError: onError\\n\\n\\t\\t\\t} );\\n\\n\\t\\t\\treturn;\\n\\n\\t\\t}\\n\\n\\t\\t// Check for data: URI\\n\\t\\tvar dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;\\n\\t\\tvar dataUriRegexResult = url.match( dataUriRegex );\\n\\n\\t\\t// Safari can not handle Data URIs through XMLHttpRequest so process manually\\n\\t\\tif ( dataUriRegexResult ) {\\n\\n\\t\\t\\tvar mimeType = dataUriRegexResult[ 1 ];\\n\\t\\t\\tvar isBase64 = !! dataUriRegexResult[ 2 ];\\n\\t\\t\\tvar data = dataUriRegexResult[ 3 ];\\n\\n\\t\\t\\tdata = decodeURIComponent( data );\\n\\n\\t\\t\\tif ( isBase64 ) data = atob( data );\\n\\n\\t\\t\\ttry {\\n\\n\\t\\t\\t\\tvar response;\\n\\t\\t\\t\\tvar responseType = ( this.responseType || '' ).toLowerCase();\\n\\n\\t\\t\\t\\tswitch ( responseType ) {\\n\\n\\t\\t\\t\\t\\tcase 'arraybuffer':\\n\\t\\t\\t\\t\\tcase 'blob':\\n\\n\\t\\t\\t\\t\\t\\tvar view = new Uint8Array( data.length );\\n\\n\\t\\t\\t\\t\\t\\tfor ( var i = 0; i < data.length; i ++ ) {\\n\\n\\t\\t\\t\\t\\t\\t\\tview[ i ] = data.charCodeAt( i );\\n\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\tif ( responseType === 'blob' ) {\\n\\n\\t\\t\\t\\t\\t\\t\\tresponse = new Blob( [ view.buffer ], { type: mimeType } );\\n\\n\\t\\t\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\t\\t\\tresponse = view.buffer;\\n\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\tcase 'document':\\n\\n\\t\\t\\t\\t\\t\\tvar parser = new DOMParser();\\n\\t\\t\\t\\t\\t\\tresponse = parser.parseFromString( data, mimeType );\\n\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\tcase 'json':\\n\\n\\t\\t\\t\\t\\t\\tresponse = JSON.parse( data );\\n\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\tdefault: // 'text' or other\\n\\n\\t\\t\\t\\t\\t\\tresponse = data;\\n\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Wait for next browser tick like standard XMLHttpRequest event dispatching does\\n\\t\\t\\t\\tsetTimeout( function () {\\n\\n\\t\\t\\t\\t\\tif ( onLoad ) onLoad( response );\\n\\n\\t\\t\\t\\t\\tscope.manager.itemEnd( url );\\n\\n\\t\\t\\t\\t}, 0 );\\n\\n\\t\\t\\t} catch ( error ) {\\n\\n\\t\\t\\t\\t// Wait for next browser tick like standard XMLHttpRequest event dispatching does\\n\\t\\t\\t\\tsetTimeout( function () {\\n\\n\\t\\t\\t\\t\\tif ( onError ) onError( error );\\n\\n\\t\\t\\t\\t\\tscope.manager.itemError( url );\\n\\t\\t\\t\\t\\tscope.manager.itemEnd( url );\\n\\n\\t\\t\\t\\t}, 0 );\\n\\n\\t\\t\\t}\\n\\n\\t\\t} else {\\n\\n\\t\\t\\t// Initialise array for duplicate requests\\n\\n\\t\\t\\tloading[ url ] = [];\\n\\n\\t\\t\\tloading[ url ].push( {\\n\\n\\t\\t\\t\\tonLoad: onLoad,\\n\\t\\t\\t\\tonProgress: onProgress,\\n\\t\\t\\t\\tonError: onError\\n\\n\\t\\t\\t} );\\n\\n\\t\\t\\tvar request = new XMLHttpRequest();\\n\\n\\t\\t\\trequest.open( 'GET', url, true );\\n\\n\\t\\t\\trequest.addEventListener( 'load', function ( event ) {\\n\\n\\t\\t\\t\\tvar response = this.response;\\n\\n\\t\\t\\t\\tCache.add( url, response );\\n\\n\\t\\t\\t\\tvar callbacks = loading[ url ];\\n\\n\\t\\t\\t\\tdelete loading[ url ];\\n\\n\\t\\t\\t\\tif ( this.status === 200 || this.status === 0 ) {\\n\\n\\t\\t\\t\\t\\t// Some browsers return HTTP Status 0 when using non-http protocol\\n\\t\\t\\t\\t\\t// e.g. 'file://' or 'data://'. Handle as success.\\n\\n\\t\\t\\t\\t\\tif ( this.status === 0 ) console.warn( 'THREE.FileLoader: HTTP Status 0 received.' );\\n\\n\\t\\t\\t\\t\\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\\n\\n\\t\\t\\t\\t\\t\\tvar callback = callbacks[ i ];\\n\\t\\t\\t\\t\\t\\tif ( callback.onLoad ) callback.onLoad( response );\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tscope.manager.itemEnd( url );\\n\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\\n\\n\\t\\t\\t\\t\\t\\tvar callback = callbacks[ i ];\\n\\t\\t\\t\\t\\t\\tif ( callback.onError ) callback.onError( event );\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tscope.manager.itemError( url );\\n\\t\\t\\t\\t\\tscope.manager.itemEnd( url );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}, false );\\n\\n\\t\\t\\trequest.addEventListener( 'progress', function ( event ) {\\n\\n\\t\\t\\t\\tvar callbacks = loading[ url ];\\n\\n\\t\\t\\t\\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\\n\\n\\t\\t\\t\\t\\tvar callback = callbacks[ i ];\\n\\t\\t\\t\\t\\tif ( callback.onProgress ) callback.onProgress( event );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}, false );\\n\\n\\t\\t\\trequest.addEventListener( 'error', function ( event ) {\\n\\n\\t\\t\\t\\tvar callbacks = loading[ url ];\\n\\n\\t\\t\\t\\tdelete loading[ url ];\\n\\n\\t\\t\\t\\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\\n\\n\\t\\t\\t\\t\\tvar callback = callbacks[ i ];\\n\\t\\t\\t\\t\\tif ( callback.onError ) callback.onError( event );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tscope.manager.itemError( url );\\n\\t\\t\\t\\tscope.manager.itemEnd( url );\\n\\n\\t\\t\\t}, false );\\n\\n\\t\\t\\trequest.addEventListener( 'abort', function ( event ) {\\n\\n\\t\\t\\t\\tvar callbacks = loading[ url ];\\n\\n\\t\\t\\t\\tdelete loading[ url ];\\n\\n\\t\\t\\t\\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\\n\\n\\t\\t\\t\\t\\tvar callback = callbacks[ i ];\\n\\t\\t\\t\\t\\tif ( callback.onError ) callback.onError( event );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tscope.manager.itemError( url );\\n\\t\\t\\t\\tscope.manager.itemEnd( url );\\n\\n\\t\\t\\t}, false );\\n\\n\\t\\t\\tif ( this.responseType !== undefined ) request.responseType = this.responseType;\\n\\t\\t\\tif ( this.withCredentials !== undefined ) request.withCredentials = this.withCredentials;\\n\\n\\t\\t\\tif ( request.overrideMimeType ) request.overrideMimeType( this.mimeType !== undefined ? this.mimeType : 'text/plain' );\\n\\n\\t\\t\\tfor ( var header in this.requestHeader ) {\\n\\n\\t\\t\\t\\trequest.setRequestHeader( header, this.requestHeader[ header ] );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\trequest.send( null );\\n\\n\\t\\t}\\n\\n\\t\\tscope.manager.itemStart( url );\\n\\n\\t\\treturn request;\\n\\n\\t},\\n\\n\\tsetPath: function ( value ) {\\n\\n\\t\\tthis.path = value;\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetResponseType: function ( value ) {\\n\\n\\t\\tthis.responseType = value;\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetWithCredentials: function ( value ) {\\n\\n\\t\\tthis.withCredentials = value;\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetMimeType: function ( value ) {\\n\\n\\t\\tthis.mimeType = value;\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetRequestHeader: function ( value ) {\\n\\n\\t\\tthis.requestHeader = value;\\n\\t\\treturn this;\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author bhouston / http://clara.io/\\n */\\n\\nfunction AnimationLoader( manager ) {\\n\\n\\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\\n\\n}\\n\\nObject.assign( AnimationLoader.prototype, {\\n\\n\\tload: function ( url, onLoad, onProgress, onError ) {\\n\\n\\t\\tvar scope = this;\\n\\n\\t\\tvar loader = new FileLoader( scope.manager );\\n\\t\\tloader.setPath( scope.path );\\n\\t\\tloader.load( url, function ( text ) {\\n\\n\\t\\t\\tonLoad( scope.parse( JSON.parse( text ) ) );\\n\\n\\t\\t}, onProgress, onError );\\n\\n\\t},\\n\\n\\tparse: function ( json, onLoad ) {\\n\\n\\t\\tvar animations = [];\\n\\n\\t\\tfor ( var i = 0; i < json.length; i ++ ) {\\n\\n\\t\\t\\tvar clip = AnimationClip.parse( json[ i ] );\\n\\n\\t\\t\\tanimations.push( clip );\\n\\n\\t\\t}\\n\\n\\t\\tonLoad( animations );\\n\\n\\t},\\n\\n\\tsetPath: function ( value ) {\\n\\n\\t\\tthis.path = value;\\n\\t\\treturn this;\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n *\\n * Abstract Base class to block based textures loader (dds, pvr, ...)\\n */\\n\\nfunction CompressedTextureLoader( manager ) {\\n\\n\\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\\n\\n\\t// override in sub classes\\n\\tthis._parser = null;\\n\\n}\\n\\nObject.assign( CompressedTextureLoader.prototype, {\\n\\n\\tload: function ( url, onLoad, onProgress, onError ) {\\n\\n\\t\\tvar scope = this;\\n\\n\\t\\tvar images = [];\\n\\n\\t\\tvar texture = new CompressedTexture();\\n\\t\\ttexture.image = images;\\n\\n\\t\\tvar loader = new FileLoader( this.manager );\\n\\t\\tloader.setPath( this.path );\\n\\t\\tloader.setResponseType( 'arraybuffer' );\\n\\n\\t\\tfunction loadTexture( i ) {\\n\\n\\t\\t\\tloader.load( url[ i ], function ( buffer ) {\\n\\n\\t\\t\\t\\tvar texDatas = scope._parser( buffer, true );\\n\\n\\t\\t\\t\\timages[ i ] = {\\n\\t\\t\\t\\t\\twidth: texDatas.width,\\n\\t\\t\\t\\t\\theight: texDatas.height,\\n\\t\\t\\t\\t\\tformat: texDatas.format,\\n\\t\\t\\t\\t\\tmipmaps: texDatas.mipmaps\\n\\t\\t\\t\\t};\\n\\n\\t\\t\\t\\tloaded += 1;\\n\\n\\t\\t\\t\\tif ( loaded === 6 ) {\\n\\n\\t\\t\\t\\t\\tif ( texDatas.mipmapCount === 1 )\\n\\t\\t\\t\\t\\t\\ttexture.minFilter = LinearFilter;\\n\\n\\t\\t\\t\\t\\ttexture.format = texDatas.format;\\n\\t\\t\\t\\t\\ttexture.needsUpdate = true;\\n\\n\\t\\t\\t\\t\\tif ( onLoad ) onLoad( texture );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}, onProgress, onError );\\n\\n\\t\\t}\\n\\n\\t\\tif ( Array.isArray( url ) ) {\\n\\n\\t\\t\\tvar loaded = 0;\\n\\n\\t\\t\\tfor ( var i = 0, il = url.length; i < il; ++ i ) {\\n\\n\\t\\t\\t\\tloadTexture( i );\\n\\n\\t\\t\\t}\\n\\n\\t\\t} else {\\n\\n\\t\\t\\t// compressed cubemap texture stored in a single DDS file\\n\\n\\t\\t\\tloader.load( url, function ( buffer ) {\\n\\n\\t\\t\\t\\tvar texDatas = scope._parser( buffer, true );\\n\\n\\t\\t\\t\\tif ( texDatas.isCubemap ) {\\n\\n\\t\\t\\t\\t\\tvar faces = texDatas.mipmaps.length / texDatas.mipmapCount;\\n\\n\\t\\t\\t\\t\\tfor ( var f = 0; f < faces; f ++ ) {\\n\\n\\t\\t\\t\\t\\t\\timages[ f ] = { mipmaps: [] };\\n\\n\\t\\t\\t\\t\\t\\tfor ( var i = 0; i < texDatas.mipmapCount; i ++ ) {\\n\\n\\t\\t\\t\\t\\t\\t\\timages[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );\\n\\t\\t\\t\\t\\t\\t\\timages[ f ].format = texDatas.format;\\n\\t\\t\\t\\t\\t\\t\\timages[ f ].width = texDatas.width;\\n\\t\\t\\t\\t\\t\\t\\timages[ f ].height = texDatas.height;\\n\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\ttexture.image.width = texDatas.width;\\n\\t\\t\\t\\t\\ttexture.image.height = texDatas.height;\\n\\t\\t\\t\\t\\ttexture.mipmaps = texDatas.mipmaps;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif ( texDatas.mipmapCount === 1 ) {\\n\\n\\t\\t\\t\\t\\ttexture.minFilter = LinearFilter;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\ttexture.format = texDatas.format;\\n\\t\\t\\t\\ttexture.needsUpdate = true;\\n\\n\\t\\t\\t\\tif ( onLoad ) onLoad( texture );\\n\\n\\t\\t\\t}, onProgress, onError );\\n\\n\\t\\t}\\n\\n\\t\\treturn texture;\\n\\n\\t},\\n\\n\\tsetPath: function ( value ) {\\n\\n\\t\\tthis.path = value;\\n\\t\\treturn this;\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author Nikos M. / https://github.com/foo123/\\n *\\n * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\\n */\\n\\nfunction DataTextureLoader( manager ) {\\n\\n\\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\\n\\n\\t// override in sub classes\\n\\tthis._parser = null;\\n\\n}\\n\\nObject.assign( DataTextureLoader.prototype, {\\n\\n\\tload: function ( url, onLoad, onProgress, onError ) {\\n\\n\\t\\tvar scope = this;\\n\\n\\t\\tvar texture = new DataTexture();\\n\\n\\t\\tvar loader = new FileLoader( this.manager );\\n\\t\\tloader.setResponseType( 'arraybuffer' );\\n\\t\\tloader.setPath( this.path );\\n\\t\\tloader.load( url, function ( buffer ) {\\n\\n\\t\\t\\tvar texData = scope._parser( buffer );\\n\\n\\t\\t\\tif ( ! texData ) return;\\n\\n\\t\\t\\tif ( texData.image !== undefined ) {\\n\\n\\t\\t\\t\\ttexture.image = texData.image;\\n\\n\\t\\t\\t} else if ( texData.data !== undefined ) {\\n\\n\\t\\t\\t\\ttexture.image.width = texData.width;\\n\\t\\t\\t\\ttexture.image.height = texData.height;\\n\\t\\t\\t\\ttexture.image.data = texData.data;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\ttexture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;\\n\\t\\t\\ttexture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;\\n\\n\\t\\t\\ttexture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;\\n\\t\\t\\ttexture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearMipMapLinearFilter;\\n\\n\\t\\t\\ttexture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;\\n\\n\\t\\t\\tif ( texData.format !== undefined ) {\\n\\n\\t\\t\\t\\ttexture.format = texData.format;\\n\\n\\t\\t\\t}\\n\\t\\t\\tif ( texData.type !== undefined ) {\\n\\n\\t\\t\\t\\ttexture.type = texData.type;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( texData.mipmaps !== undefined ) {\\n\\n\\t\\t\\t\\ttexture.mipmaps = texData.mipmaps;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( texData.mipmapCount === 1 ) {\\n\\n\\t\\t\\t\\ttexture.minFilter = LinearFilter;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\ttexture.needsUpdate = true;\\n\\n\\t\\t\\tif ( onLoad ) onLoad( texture, texData );\\n\\n\\t\\t}, onProgress, onError );\\n\\n\\n\\t\\treturn texture;\\n\\n\\t},\\n\\n\\tsetPath: function ( value ) {\\n\\n\\t\\tthis.path = value;\\n\\t\\treturn this;\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\n\\nfunction ImageLoader( manager ) {\\n\\n\\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\\n\\n}\\n\\nObject.assign( ImageLoader.prototype, {\\n\\n\\tcrossOrigin: 'anonymous',\\n\\n\\tload: function ( url, onLoad, onProgress, onError ) {\\n\\n\\t\\tif ( url === undefined ) url = '';\\n\\n\\t\\tif ( this.path !== undefined ) url = this.path + url;\\n\\n\\t\\turl = this.manager.resolveURL( url );\\n\\n\\t\\tvar scope = this;\\n\\n\\t\\tvar cached = Cache.get( url );\\n\\n\\t\\tif ( cached !== undefined ) {\\n\\n\\t\\t\\tscope.manager.itemStart( url );\\n\\n\\t\\t\\tsetTimeout( function () {\\n\\n\\t\\t\\t\\tif ( onLoad ) onLoad( cached );\\n\\n\\t\\t\\t\\tscope.manager.itemEnd( url );\\n\\n\\t\\t\\t}, 0 );\\n\\n\\t\\t\\treturn cached;\\n\\n\\t\\t}\\n\\n\\t\\tvar image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );\\n\\n\\t\\tfunction onImageLoad() {\\n\\n\\t\\t\\timage.removeEventListener( 'load', onImageLoad, false );\\n\\t\\t\\timage.removeEventListener( 'error', onImageError, false );\\n\\n\\t\\t\\tCache.add( url, this );\\n\\n\\t\\t\\tif ( onLoad ) onLoad( this );\\n\\n\\t\\t\\tscope.manager.itemEnd( url );\\n\\n\\t\\t}\\n\\n\\t\\tfunction onImageError( event ) {\\n\\n\\t\\t\\timage.removeEventListener( 'load', onImageLoad, false );\\n\\t\\t\\timage.removeEventListener( 'error', onImageError, false );\\n\\n\\t\\t\\tif ( onError ) onError( event );\\n\\n\\t\\t\\tscope.manager.itemError( url );\\n\\t\\t\\tscope.manager.itemEnd( url );\\n\\n\\t\\t}\\n\\n\\t\\timage.addEventListener( 'load', onImageLoad, false );\\n\\t\\timage.addEventListener( 'error', onImageError, false );\\n\\n\\t\\tif ( url.substr( 0, 5 ) !== 'data:' ) {\\n\\n\\t\\t\\tif ( this.crossOrigin !== undefined ) image.crossOrigin = this.crossOrigin;\\n\\n\\t\\t}\\n\\n\\t\\tscope.manager.itemStart( url );\\n\\n\\t\\timage.src = url;\\n\\n\\t\\treturn image;\\n\\n\\t},\\n\\n\\tsetCrossOrigin: function ( value ) {\\n\\n\\t\\tthis.crossOrigin = value;\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetPath: function ( value ) {\\n\\n\\t\\tthis.path = value;\\n\\t\\treturn this;\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\n\\nfunction CubeTextureLoader( manager ) {\\n\\n\\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\\n\\n}\\n\\nObject.assign( CubeTextureLoader.prototype, {\\n\\n\\tcrossOrigin: 'anonymous',\\n\\n\\tload: function ( urls, onLoad, onProgress, onError ) {\\n\\n\\t\\tvar texture = new CubeTexture();\\n\\n\\t\\tvar loader = new ImageLoader( this.manager );\\n\\t\\tloader.setCrossOrigin( this.crossOrigin );\\n\\t\\tloader.setPath( this.path );\\n\\n\\t\\tvar loaded = 0;\\n\\n\\t\\tfunction loadTexture( i ) {\\n\\n\\t\\t\\tloader.load( urls[ i ], function ( image ) {\\n\\n\\t\\t\\t\\ttexture.images[ i ] = image;\\n\\n\\t\\t\\t\\tloaded ++;\\n\\n\\t\\t\\t\\tif ( loaded === 6 ) {\\n\\n\\t\\t\\t\\t\\ttexture.needsUpdate = true;\\n\\n\\t\\t\\t\\t\\tif ( onLoad ) onLoad( texture );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}, undefined, onError );\\n\\n\\t\\t}\\n\\n\\t\\tfor ( var i = 0; i < urls.length; ++ i ) {\\n\\n\\t\\t\\tloadTexture( i );\\n\\n\\t\\t}\\n\\n\\t\\treturn texture;\\n\\n\\t},\\n\\n\\tsetCrossOrigin: function ( value ) {\\n\\n\\t\\tthis.crossOrigin = value;\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetPath: function ( value ) {\\n\\n\\t\\tthis.path = value;\\n\\t\\treturn this;\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\n\\nfunction TextureLoader( manager ) {\\n\\n\\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\\n\\n}\\n\\nObject.assign( TextureLoader.prototype, {\\n\\n\\tcrossOrigin: 'anonymous',\\n\\n\\tload: function ( url, onLoad, onProgress, onError ) {\\n\\n\\t\\tvar texture = new Texture();\\n\\n\\t\\tvar loader = new ImageLoader( this.manager );\\n\\t\\tloader.setCrossOrigin( this.crossOrigin );\\n\\t\\tloader.setPath( this.path );\\n\\n\\t\\tloader.load( url, function ( image ) {\\n\\n\\t\\t\\ttexture.image = image;\\n\\n\\t\\t\\t// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.\\n\\t\\t\\tvar isJPEG = url.search( /\\\\.jpe?g($|\\\\?)/i ) > 0 || url.search( /^data\\\\:image\\\\/jpeg/ ) === 0;\\n\\n\\t\\t\\ttexture.format = isJPEG ? RGBFormat : RGBAFormat;\\n\\t\\t\\ttexture.needsUpdate = true;\\n\\n\\t\\t\\tif ( onLoad !== undefined ) {\\n\\n\\t\\t\\t\\tonLoad( texture );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}, onProgress, onError );\\n\\n\\t\\treturn texture;\\n\\n\\t},\\n\\n\\tsetCrossOrigin: function ( value ) {\\n\\n\\t\\tthis.crossOrigin = value;\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetPath: function ( value ) {\\n\\n\\t\\tthis.path = value;\\n\\t\\treturn this;\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author zz85 / http://www.lab4games.net/zz85/blog\\n * Extensible curve object\\n *\\n * Some common of curve methods:\\n * .getPoint( t, optionalTarget ), .getTangent( t )\\n * .getPointAt( u, optionalTarget ), .getTangentAt( u )\\n * .getPoints(), .getSpacedPoints()\\n * .getLength()\\n * .updateArcLengths()\\n *\\n * This following curves inherit from THREE.Curve:\\n *\\n * -- 2D curves --\\n * THREE.ArcCurve\\n * THREE.CubicBezierCurve\\n * THREE.EllipseCurve\\n * THREE.LineCurve\\n * THREE.QuadraticBezierCurve\\n * THREE.SplineCurve\\n *\\n * -- 3D curves --\\n * THREE.CatmullRomCurve3\\n * THREE.CubicBezierCurve3\\n * THREE.LineCurve3\\n * THREE.QuadraticBezierCurve3\\n *\\n * A series of curves can be represented as a THREE.CurvePath.\\n *\\n **/\\n\\n/**************************************************************\\n *\\tAbstract Curve base class\\n **************************************************************/\\n\\nfunction Curve() {\\n\\n\\tthis.type = 'Curve';\\n\\n\\tthis.arcLengthDivisions = 200;\\n\\n}\\n\\nObject.assign( Curve.prototype, {\\n\\n\\t// Virtual base class method to overwrite and implement in subclasses\\n\\t//\\t- t [0 .. 1]\\n\\n\\tgetPoint: function ( /* t, optionalTarget */ ) {\\n\\n\\t\\tconsole.warn( 'THREE.Curve: .getPoint() not implemented.' );\\n\\t\\treturn null;\\n\\n\\t},\\n\\n\\t// Get point at relative position in curve according to arc length\\n\\t// - u [0 .. 1]\\n\\n\\tgetPointAt: function ( u, optionalTarget ) {\\n\\n\\t\\tvar t = this.getUtoTmapping( u );\\n\\t\\treturn this.getPoint( t, optionalTarget );\\n\\n\\t},\\n\\n\\t// Get sequence of points using getPoint( t )\\n\\n\\tgetPoints: function ( divisions ) {\\n\\n\\t\\tif ( divisions === undefined ) divisions = 5;\\n\\n\\t\\tvar points = [];\\n\\n\\t\\tfor ( var d = 0; d <= divisions; d ++ ) {\\n\\n\\t\\t\\tpoints.push( this.getPoint( d / divisions ) );\\n\\n\\t\\t}\\n\\n\\t\\treturn points;\\n\\n\\t},\\n\\n\\t// Get sequence of points using getPointAt( u )\\n\\n\\tgetSpacedPoints: function ( divisions ) {\\n\\n\\t\\tif ( divisions === undefined ) divisions = 5;\\n\\n\\t\\tvar points = [];\\n\\n\\t\\tfor ( var d = 0; d <= divisions; d ++ ) {\\n\\n\\t\\t\\tpoints.push( this.getPointAt( d / divisions ) );\\n\\n\\t\\t}\\n\\n\\t\\treturn points;\\n\\n\\t},\\n\\n\\t// Get total curve arc length\\n\\n\\tgetLength: function () {\\n\\n\\t\\tvar lengths = this.getLengths();\\n\\t\\treturn lengths[ lengths.length - 1 ];\\n\\n\\t},\\n\\n\\t// Get list of cumulative segment lengths\\n\\n\\tgetLengths: function ( divisions ) {\\n\\n\\t\\tif ( divisions === undefined ) divisions = this.arcLengthDivisions;\\n\\n\\t\\tif ( this.cacheArcLengths &&\\n\\t\\t\\t( this.cacheArcLengths.length === divisions + 1 ) &&\\n\\t\\t\\t! this.needsUpdate ) {\\n\\n\\t\\t\\treturn this.cacheArcLengths;\\n\\n\\t\\t}\\n\\n\\t\\tthis.needsUpdate = false;\\n\\n\\t\\tvar cache = [];\\n\\t\\tvar current, last = this.getPoint( 0 );\\n\\t\\tvar p, sum = 0;\\n\\n\\t\\tcache.push( 0 );\\n\\n\\t\\tfor ( p = 1; p <= divisions; p ++ ) {\\n\\n\\t\\t\\tcurrent = this.getPoint( p / divisions );\\n\\t\\t\\tsum += current.distanceTo( last );\\n\\t\\t\\tcache.push( sum );\\n\\t\\t\\tlast = current;\\n\\n\\t\\t}\\n\\n\\t\\tthis.cacheArcLengths = cache;\\n\\n\\t\\treturn cache; // { sums: cache, sum: sum }; Sum is in the last element.\\n\\n\\t},\\n\\n\\tupdateArcLengths: function () {\\n\\n\\t\\tthis.needsUpdate = true;\\n\\t\\tthis.getLengths();\\n\\n\\t},\\n\\n\\t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\\n\\n\\tgetUtoTmapping: function ( u, distance ) {\\n\\n\\t\\tvar arcLengths = this.getLengths();\\n\\n\\t\\tvar i = 0, il = arcLengths.length;\\n\\n\\t\\tvar targetArcLength; // The targeted u distance value to get\\n\\n\\t\\tif ( distance ) {\\n\\n\\t\\t\\ttargetArcLength = distance;\\n\\n\\t\\t} else {\\n\\n\\t\\t\\ttargetArcLength = u * arcLengths[ il - 1 ];\\n\\n\\t\\t}\\n\\n\\t\\t// binary search for the index with largest value smaller than target u distance\\n\\n\\t\\tvar low = 0, high = il - 1, comparison;\\n\\n\\t\\twhile ( low <= high ) {\\n\\n\\t\\t\\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\\n\\n\\t\\t\\tcomparison = arcLengths[ i ] - targetArcLength;\\n\\n\\t\\t\\tif ( comparison < 0 ) {\\n\\n\\t\\t\\t\\tlow = i + 1;\\n\\n\\t\\t\\t} else if ( comparison > 0 ) {\\n\\n\\t\\t\\t\\thigh = i - 1;\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\thigh = i;\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t// DONE\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\ti = high;\\n\\n\\t\\tif ( arcLengths[ i ] === targetArcLength ) {\\n\\n\\t\\t\\treturn i / ( il - 1 );\\n\\n\\t\\t}\\n\\n\\t\\t// we could get finer grain at lengths, or use simple interpolation between two points\\n\\n\\t\\tvar lengthBefore = arcLengths[ i ];\\n\\t\\tvar lengthAfter = arcLengths[ i + 1 ];\\n\\n\\t\\tvar segmentLength = lengthAfter - lengthBefore;\\n\\n\\t\\t// determine where we are between the 'before' and 'after' points\\n\\n\\t\\tvar segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\\n\\n\\t\\t// add that fractional amount to t\\n\\n\\t\\tvar t = ( i + segmentFraction ) / ( il - 1 );\\n\\n\\t\\treturn t;\\n\\n\\t},\\n\\n\\t// Returns a unit vector tangent at t\\n\\t// In case any sub curve does not implement its tangent derivation,\\n\\t// 2 points a small delta apart will be used to find its gradient\\n\\t// which seems to give a reasonable approximation\\n\\n\\tgetTangent: function ( t ) {\\n\\n\\t\\tvar delta = 0.0001;\\n\\t\\tvar t1 = t - delta;\\n\\t\\tvar t2 = t + delta;\\n\\n\\t\\t// Capping in case of danger\\n\\n\\t\\tif ( t1 < 0 ) t1 = 0;\\n\\t\\tif ( t2 > 1 ) t2 = 1;\\n\\n\\t\\tvar pt1 = this.getPoint( t1 );\\n\\t\\tvar pt2 = this.getPoint( t2 );\\n\\n\\t\\tvar vec = pt2.clone().sub( pt1 );\\n\\t\\treturn vec.normalize();\\n\\n\\t},\\n\\n\\tgetTangentAt: function ( u ) {\\n\\n\\t\\tvar t = this.getUtoTmapping( u );\\n\\t\\treturn this.getTangent( t );\\n\\n\\t},\\n\\n\\tcomputeFrenetFrames: function ( segments, closed ) {\\n\\n\\t\\t// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\\n\\n\\t\\tvar normal = new Vector3();\\n\\n\\t\\tvar tangents = [];\\n\\t\\tvar normals = [];\\n\\t\\tvar binormals = [];\\n\\n\\t\\tvar vec = new Vector3();\\n\\t\\tvar mat = new Matrix4();\\n\\n\\t\\tvar i, u, theta;\\n\\n\\t\\t// compute the tangent vectors for each segment on the curve\\n\\n\\t\\tfor ( i = 0; i <= segments; i ++ ) {\\n\\n\\t\\t\\tu = i / segments;\\n\\n\\t\\t\\ttangents[ i ] = this.getTangentAt( u );\\n\\t\\t\\ttangents[ i ].normalize();\\n\\n\\t\\t}\\n\\n\\t\\t// select an initial normal vector perpendicular to the first tangent vector,\\n\\t\\t// and in the direction of the minimum tangent xyz component\\n\\n\\t\\tnormals[ 0 ] = new Vector3();\\n\\t\\tbinormals[ 0 ] = new Vector3();\\n\\t\\tvar min = Number.MAX_VALUE;\\n\\t\\tvar tx = Math.abs( tangents[ 0 ].x );\\n\\t\\tvar ty = Math.abs( tangents[ 0 ].y );\\n\\t\\tvar tz = Math.abs( tangents[ 0 ].z );\\n\\n\\t\\tif ( tx <= min ) {\\n\\n\\t\\t\\tmin = tx;\\n\\t\\t\\tnormal.set( 1, 0, 0 );\\n\\n\\t\\t}\\n\\n\\t\\tif ( ty <= min ) {\\n\\n\\t\\t\\tmin = ty;\\n\\t\\t\\tnormal.set( 0, 1, 0 );\\n\\n\\t\\t}\\n\\n\\t\\tif ( tz <= min ) {\\n\\n\\t\\t\\tnormal.set( 0, 0, 1 );\\n\\n\\t\\t}\\n\\n\\t\\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\\n\\n\\t\\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\\n\\t\\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\\n\\n\\n\\t\\t// compute the slowly-varying normal and binormal vectors for each segment on the curve\\n\\n\\t\\tfor ( i = 1; i <= segments; i ++ ) {\\n\\n\\t\\t\\tnormals[ i ] = normals[ i - 1 ].clone();\\n\\n\\t\\t\\tbinormals[ i ] = binormals[ i - 1 ].clone();\\n\\n\\t\\t\\tvec.crossVectors( tangents[ i - 1 ], tangents[ i ] );\\n\\n\\t\\t\\tif ( vec.length() > Number.EPSILON ) {\\n\\n\\t\\t\\t\\tvec.normalize();\\n\\n\\t\\t\\t\\ttheta = Math.acos( _Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors\\n\\n\\t\\t\\t\\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\\n\\n\\t\\t}\\n\\n\\t\\t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\\n\\n\\t\\tif ( closed === true ) {\\n\\n\\t\\t\\ttheta = Math.acos( _Math.clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );\\n\\t\\t\\ttheta /= segments;\\n\\n\\t\\t\\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {\\n\\n\\t\\t\\t\\ttheta = - theta;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tfor ( i = 1; i <= segments; i ++ ) {\\n\\n\\t\\t\\t\\t// twist a little...\\n\\t\\t\\t\\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\\n\\t\\t\\t\\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\treturn {\\n\\t\\t\\ttangents: tangents,\\n\\t\\t\\tnormals: normals,\\n\\t\\t\\tbinormals: binormals\\n\\t\\t};\\n\\n\\t},\\n\\n\\tclone: function () {\\n\\n\\t\\treturn new this.constructor().copy( this );\\n\\n\\t},\\n\\n\\tcopy: function ( source ) {\\n\\n\\t\\tthis.arcLengthDivisions = source.arcLengthDivisions;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\ttoJSON: function () {\\n\\n\\t\\tvar data = {\\n\\t\\t\\tmetadata: {\\n\\t\\t\\t\\tversion: 4.5,\\n\\t\\t\\t\\ttype: 'Curve',\\n\\t\\t\\t\\tgenerator: 'Curve.toJSON'\\n\\t\\t\\t}\\n\\t\\t};\\n\\n\\t\\tdata.arcLengthDivisions = this.arcLengthDivisions;\\n\\t\\tdata.type = this.type;\\n\\n\\t\\treturn data;\\n\\n\\t},\\n\\n\\tfromJSON: function ( json ) {\\n\\n\\t\\tthis.arcLengthDivisions = json.arcLengthDivisions;\\n\\n\\t\\treturn this;\\n\\n\\t}\\n\\n} );\\n\\nfunction EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\\n\\n\\tCurve.call( this );\\n\\n\\tthis.type = 'EllipseCurve';\\n\\n\\tthis.aX = aX || 0;\\n\\tthis.aY = aY || 0;\\n\\n\\tthis.xRadius = xRadius || 1;\\n\\tthis.yRadius = yRadius || 1;\\n\\n\\tthis.aStartAngle = aStartAngle || 0;\\n\\tthis.aEndAngle = aEndAngle || 2 * Math.PI;\\n\\n\\tthis.aClockwise = aClockwise || false;\\n\\n\\tthis.aRotation = aRotation || 0;\\n\\n}\\n\\nEllipseCurve.prototype = Object.create( Curve.prototype );\\nEllipseCurve.prototype.constructor = EllipseCurve;\\n\\nEllipseCurve.prototype.isEllipseCurve = true;\\n\\nEllipseCurve.prototype.getPoint = function ( t, optionalTarget ) {\\n\\n\\tvar point = optionalTarget || new Vector2();\\n\\n\\tvar twoPi = Math.PI * 2;\\n\\tvar deltaAngle = this.aEndAngle - this.aStartAngle;\\n\\tvar samePoints = Math.abs( deltaAngle ) < Number.EPSILON;\\n\\n\\t// ensures that deltaAngle is 0 .. 2 PI\\n\\twhile ( deltaAngle < 0 ) deltaAngle += twoPi;\\n\\twhile ( deltaAngle > twoPi ) deltaAngle -= twoPi;\\n\\n\\tif ( deltaAngle < Number.EPSILON ) {\\n\\n\\t\\tif ( samePoints ) {\\n\\n\\t\\t\\tdeltaAngle = 0;\\n\\n\\t\\t} else {\\n\\n\\t\\t\\tdeltaAngle = twoPi;\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tif ( this.aClockwise === true && ! samePoints ) {\\n\\n\\t\\tif ( deltaAngle === twoPi ) {\\n\\n\\t\\t\\tdeltaAngle = - twoPi;\\n\\n\\t\\t} else {\\n\\n\\t\\t\\tdeltaAngle = deltaAngle - twoPi;\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tvar angle = this.aStartAngle + t * deltaAngle;\\n\\tvar x = this.aX + this.xRadius * Math.cos( angle );\\n\\tvar y = this.aY + this.yRadius * Math.sin( angle );\\n\\n\\tif ( this.aRotation !== 0 ) {\\n\\n\\t\\tvar cos = Math.cos( this.aRotation );\\n\\t\\tvar sin = Math.sin( this.aRotation );\\n\\n\\t\\tvar tx = x - this.aX;\\n\\t\\tvar ty = y - this.aY;\\n\\n\\t\\t// Rotate the point about the center of the ellipse.\\n\\t\\tx = tx * cos - ty * sin + this.aX;\\n\\t\\ty = tx * sin + ty * cos + this.aY;\\n\\n\\t}\\n\\n\\treturn point.set( x, y );\\n\\n};\\n\\nEllipseCurve.prototype.copy = function ( source ) {\\n\\n\\tCurve.prototype.copy.call( this, source );\\n\\n\\tthis.aX = source.aX;\\n\\tthis.aY = source.aY;\\n\\n\\tthis.xRadius = source.xRadius;\\n\\tthis.yRadius = source.yRadius;\\n\\n\\tthis.aStartAngle = source.aStartAngle;\\n\\tthis.aEndAngle = source.aEndAngle;\\n\\n\\tthis.aClockwise = source.aClockwise;\\n\\n\\tthis.aRotation = source.aRotation;\\n\\n\\treturn this;\\n\\n};\\n\\n\\nEllipseCurve.prototype.toJSON = function () {\\n\\n\\tvar data = Curve.prototype.toJSON.call( this );\\n\\n\\tdata.aX = this.aX;\\n\\tdata.aY = this.aY;\\n\\n\\tdata.xRadius = this.xRadius;\\n\\tdata.yRadius = this.yRadius;\\n\\n\\tdata.aStartAngle = this.aStartAngle;\\n\\tdata.aEndAngle = this.aEndAngle;\\n\\n\\tdata.aClockwise = this.aClockwise;\\n\\n\\tdata.aRotation = this.aRotation;\\n\\n\\treturn data;\\n\\n};\\n\\nEllipseCurve.prototype.fromJSON = function ( json ) {\\n\\n\\tCurve.prototype.fromJSON.call( this, json );\\n\\n\\tthis.aX = json.aX;\\n\\tthis.aY = json.aY;\\n\\n\\tthis.xRadius = json.xRadius;\\n\\tthis.yRadius = json.yRadius;\\n\\n\\tthis.aStartAngle = json.aStartAngle;\\n\\tthis.aEndAngle = json.aEndAngle;\\n\\n\\tthis.aClockwise = json.aClockwise;\\n\\n\\tthis.aRotation = json.aRotation;\\n\\n\\treturn this;\\n\\n};\\n\\nfunction ArcCurve( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\\n\\n\\tEllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\\n\\n\\tthis.type = 'ArcCurve';\\n\\n}\\n\\nArcCurve.prototype = Object.create( EllipseCurve.prototype );\\nArcCurve.prototype.constructor = ArcCurve;\\n\\nArcCurve.prototype.isArcCurve = true;\\n\\n/**\\n * @author zz85 https://github.com/zz85\\n *\\n * Centripetal CatmullRom Curve - which is useful for avoiding\\n * cusps and self-intersections in non-uniform catmull rom curves.\\n * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\\n *\\n * curve.type accepts centripetal(default), chordal and catmullrom\\n * curve.tension is used for catmullrom which defaults to 0.5\\n */\\n\\n\\n/*\\nBased on an optimized c++ solution in\\n - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\\n - http://ideone.com/NoEbVM\\n\\nThis CubicPoly class could be used for reusing some variables and calculations,\\nbut for three.js curve use, it could be possible inlined and flatten into a single function call\\nwhich can be placed in CurveUtils.\\n*/\\n\\nfunction CubicPoly() {\\n\\n\\tvar c0 = 0, c1 = 0, c2 = 0, c3 = 0;\\n\\n\\t/*\\n\\t * Compute coefficients for a cubic polynomial\\n\\t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\\n\\t * such that\\n\\t *   p(0) = x0, p(1) = x1\\n\\t *  and\\n\\t *   p'(0) = t0, p'(1) = t1.\\n\\t */\\n\\tfunction init( x0, x1, t0, t1 ) {\\n\\n\\t\\tc0 = x0;\\n\\t\\tc1 = t0;\\n\\t\\tc2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\\n\\t\\tc3 = 2 * x0 - 2 * x1 + t0 + t1;\\n\\n\\t}\\n\\n\\treturn {\\n\\n\\t\\tinitCatmullRom: function ( x0, x1, x2, x3, tension ) {\\n\\n\\t\\t\\tinit( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\\n\\n\\t\\t},\\n\\n\\t\\tinitNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {\\n\\n\\t\\t\\t// compute tangents when parameterized in [t1,t2]\\n\\t\\t\\tvar t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\\n\\t\\t\\tvar t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\\n\\n\\t\\t\\t// rescale tangents for parametrization in [0,1]\\n\\t\\t\\tt1 *= dt1;\\n\\t\\t\\tt2 *= dt1;\\n\\n\\t\\t\\tinit( x1, x2, t1, t2 );\\n\\n\\t\\t},\\n\\n\\t\\tcalc: function ( t ) {\\n\\n\\t\\t\\tvar t2 = t * t;\\n\\t\\t\\tvar t3 = t2 * t;\\n\\t\\t\\treturn c0 + c1 * t + c2 * t2 + c3 * t3;\\n\\n\\t\\t}\\n\\n\\t};\\n\\n}\\n\\n//\\n\\nvar tmp = new Vector3();\\nvar px = new CubicPoly(), py = new CubicPoly(), pz = new CubicPoly();\\n\\nfunction CatmullRomCurve3( points, closed, curveType, tension ) {\\n\\n\\tCurve.call( this );\\n\\n\\tthis.type = 'CatmullRomCurve3';\\n\\n\\tthis.points = points || [];\\n\\tthis.closed = closed || false;\\n\\tthis.curveType = curveType || 'centripetal';\\n\\tthis.tension = tension || 0.5;\\n\\n}\\n\\nCatmullRomCurve3.prototype = Object.create( Curve.prototype );\\nCatmullRomCurve3.prototype.constructor = CatmullRomCurve3;\\n\\nCatmullRomCurve3.prototype.isCatmullRomCurve3 = true;\\n\\nCatmullRomCurve3.prototype.getPoint = function ( t, optionalTarget ) {\\n\\n\\tvar point = optionalTarget || new Vector3();\\n\\n\\tvar points = this.points;\\n\\tvar l = points.length;\\n\\n\\tvar p = ( l - ( this.closed ? 0 : 1 ) ) * t;\\n\\tvar intPoint = Math.floor( p );\\n\\tvar weight = p - intPoint;\\n\\n\\tif ( this.closed ) {\\n\\n\\t\\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / l ) + 1 ) * l;\\n\\n\\t} else if ( weight === 0 && intPoint === l - 1 ) {\\n\\n\\t\\tintPoint = l - 2;\\n\\t\\tweight = 1;\\n\\n\\t}\\n\\n\\tvar p0, p1, p2, p3; // 4 points\\n\\n\\tif ( this.closed || intPoint > 0 ) {\\n\\n\\t\\tp0 = points[ ( intPoint - 1 ) % l ];\\n\\n\\t} else {\\n\\n\\t\\t// extrapolate first point\\n\\t\\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\\n\\t\\tp0 = tmp;\\n\\n\\t}\\n\\n\\tp1 = points[ intPoint % l ];\\n\\tp2 = points[ ( intPoint + 1 ) % l ];\\n\\n\\tif ( this.closed || intPoint + 2 < l ) {\\n\\n\\t\\tp3 = points[ ( intPoint + 2 ) % l ];\\n\\n\\t} else {\\n\\n\\t\\t// extrapolate last point\\n\\t\\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\\n\\t\\tp3 = tmp;\\n\\n\\t}\\n\\n\\tif ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {\\n\\n\\t\\t// init Centripetal / Chordal Catmull-Rom\\n\\t\\tvar pow = this.curveType === 'chordal' ? 0.5 : 0.25;\\n\\t\\tvar dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\\n\\t\\tvar dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\\n\\t\\tvar dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\\n\\n\\t\\t// safety check for repeated points\\n\\t\\tif ( dt1 < 1e-4 ) dt1 = 1.0;\\n\\t\\tif ( dt0 < 1e-4 ) dt0 = dt1;\\n\\t\\tif ( dt2 < 1e-4 ) dt2 = dt1;\\n\\n\\t\\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\\n\\t\\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\\n\\t\\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\\n\\n\\t} else if ( this.curveType === 'catmullrom' ) {\\n\\n\\t\\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );\\n\\t\\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );\\n\\t\\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );\\n\\n\\t}\\n\\n\\tpoint.set(\\n\\t\\tpx.calc( weight ),\\n\\t\\tpy.calc( weight ),\\n\\t\\tpz.calc( weight )\\n\\t);\\n\\n\\treturn point;\\n\\n};\\n\\nCatmullRomCurve3.prototype.copy = function ( source ) {\\n\\n\\tCurve.prototype.copy.call( this, source );\\n\\n\\tthis.points = [];\\n\\n\\tfor ( var i = 0, l = source.points.length; i < l; i ++ ) {\\n\\n\\t\\tvar point = source.points[ i ];\\n\\n\\t\\tthis.points.push( point.clone() );\\n\\n\\t}\\n\\n\\tthis.closed = source.closed;\\n\\tthis.curveType = source.curveType;\\n\\tthis.tension = source.tension;\\n\\n\\treturn this;\\n\\n};\\n\\nCatmullRomCurve3.prototype.toJSON = function () {\\n\\n\\tvar data = Curve.prototype.toJSON.call( this );\\n\\n\\tdata.points = [];\\n\\n\\tfor ( var i = 0, l = this.points.length; i < l; i ++ ) {\\n\\n\\t\\tvar point = this.points[ i ];\\n\\t\\tdata.points.push( point.toArray() );\\n\\n\\t}\\n\\n\\tdata.closed = this.closed;\\n\\tdata.curveType = this.curveType;\\n\\tdata.tension = this.tension;\\n\\n\\treturn data;\\n\\n};\\n\\nCatmullRomCurve3.prototype.fromJSON = function ( json ) {\\n\\n\\tCurve.prototype.fromJSON.call( this, json );\\n\\n\\tthis.points = [];\\n\\n\\tfor ( var i = 0, l = json.points.length; i < l; i ++ ) {\\n\\n\\t\\tvar point = json.points[ i ];\\n\\t\\tthis.points.push( new Vector3().fromArray( point ) );\\n\\n\\t}\\n\\n\\tthis.closed = json.closed;\\n\\tthis.curveType = json.curveType;\\n\\tthis.tension = json.tension;\\n\\n\\treturn this;\\n\\n};\\n\\n/**\\n * @author zz85 / http://www.lab4games.net/zz85/blog\\n *\\n * Bezier Curves formulas obtained from\\n * http://en.wikipedia.org/wiki/Bézier_curve\\n */\\n\\nfunction CatmullRom( t, p0, p1, p2, p3 ) {\\n\\n\\tvar v0 = ( p2 - p0 ) * 0.5;\\n\\tvar v1 = ( p3 - p1 ) * 0.5;\\n\\tvar t2 = t * t;\\n\\tvar t3 = t * t2;\\n\\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\\n\\n}\\n\\n//\\n\\nfunction QuadraticBezierP0( t, p ) {\\n\\n\\tvar k = 1 - t;\\n\\treturn k * k * p;\\n\\n}\\n\\nfunction QuadraticBezierP1( t, p ) {\\n\\n\\treturn 2 * ( 1 - t ) * t * p;\\n\\n}\\n\\nfunction QuadraticBezierP2( t, p ) {\\n\\n\\treturn t * t * p;\\n\\n}\\n\\nfunction QuadraticBezier( t, p0, p1, p2 ) {\\n\\n\\treturn QuadraticBezierP0( t, p0 ) + QuadraticBezierP1( t, p1 ) +\\n\\t\\tQuadraticBezierP2( t, p2 );\\n\\n}\\n\\n//\\n\\nfunction CubicBezierP0( t, p ) {\\n\\n\\tvar k = 1 - t;\\n\\treturn k * k * k * p;\\n\\n}\\n\\nfunction CubicBezierP1( t, p ) {\\n\\n\\tvar k = 1 - t;\\n\\treturn 3 * k * k * t * p;\\n\\n}\\n\\nfunction CubicBezierP2( t, p ) {\\n\\n\\treturn 3 * ( 1 - t ) * t * t * p;\\n\\n}\\n\\nfunction CubicBezierP3( t, p ) {\\n\\n\\treturn t * t * t * p;\\n\\n}\\n\\nfunction CubicBezier( t, p0, p1, p2, p3 ) {\\n\\n\\treturn CubicBezierP0( t, p0 ) + CubicBezierP1( t, p1 ) + CubicBezierP2( t, p2 ) +\\n\\t\\tCubicBezierP3( t, p3 );\\n\\n}\\n\\nfunction CubicBezierCurve( v0, v1, v2, v3 ) {\\n\\n\\tCurve.call( this );\\n\\n\\tthis.type = 'CubicBezierCurve';\\n\\n\\tthis.v0 = v0 || new Vector2();\\n\\tthis.v1 = v1 || new Vector2();\\n\\tthis.v2 = v2 || new Vector2();\\n\\tthis.v3 = v3 || new Vector2();\\n\\n}\\n\\nCubicBezierCurve.prototype = Object.create( Curve.prototype );\\nCubicBezierCurve.prototype.constructor = CubicBezierCurve;\\n\\nCubicBezierCurve.prototype.isCubicBezierCurve = true;\\n\\nCubicBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {\\n\\n\\tvar point = optionalTarget || new Vector2();\\n\\n\\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\\n\\n\\tpoint.set(\\n\\t\\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\\n\\t\\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y )\\n\\t);\\n\\n\\treturn point;\\n\\n};\\n\\nCubicBezierCurve.prototype.copy = function ( source ) {\\n\\n\\tCurve.prototype.copy.call( this, source );\\n\\n\\tthis.v0.copy( source.v0 );\\n\\tthis.v1.copy( source.v1 );\\n\\tthis.v2.copy( source.v2 );\\n\\tthis.v3.copy( source.v3 );\\n\\n\\treturn this;\\n\\n};\\n\\nCubicBezierCurve.prototype.toJSON = function () {\\n\\n\\tvar data = Curve.prototype.toJSON.call( this );\\n\\n\\tdata.v0 = this.v0.toArray();\\n\\tdata.v1 = this.v1.toArray();\\n\\tdata.v2 = this.v2.toArray();\\n\\tdata.v3 = this.v3.toArray();\\n\\n\\treturn data;\\n\\n};\\n\\nCubicBezierCurve.prototype.fromJSON = function ( json ) {\\n\\n\\tCurve.prototype.fromJSON.call( this, json );\\n\\n\\tthis.v0.fromArray( json.v0 );\\n\\tthis.v1.fromArray( json.v1 );\\n\\tthis.v2.fromArray( json.v2 );\\n\\tthis.v3.fromArray( json.v3 );\\n\\n\\treturn this;\\n\\n};\\n\\nfunction CubicBezierCurve3( v0, v1, v2, v3 ) {\\n\\n\\tCurve.call( this );\\n\\n\\tthis.type = 'CubicBezierCurve3';\\n\\n\\tthis.v0 = v0 || new Vector3();\\n\\tthis.v1 = v1 || new Vector3();\\n\\tthis.v2 = v2 || new Vector3();\\n\\tthis.v3 = v3 || new Vector3();\\n\\n}\\n\\nCubicBezierCurve3.prototype = Object.create( Curve.prototype );\\nCubicBezierCurve3.prototype.constructor = CubicBezierCurve3;\\n\\nCubicBezierCurve3.prototype.isCubicBezierCurve3 = true;\\n\\nCubicBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {\\n\\n\\tvar point = optionalTarget || new Vector3();\\n\\n\\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\\n\\n\\tpoint.set(\\n\\t\\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\\n\\t\\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y ),\\n\\t\\tCubicBezier( t, v0.z, v1.z, v2.z, v3.z )\\n\\t);\\n\\n\\treturn point;\\n\\n};\\n\\nCubicBezierCurve3.prototype.copy = function ( source ) {\\n\\n\\tCurve.prototype.copy.call( this, source );\\n\\n\\tthis.v0.copy( source.v0 );\\n\\tthis.v1.copy( source.v1 );\\n\\tthis.v2.copy( source.v2 );\\n\\tthis.v3.copy( source.v3 );\\n\\n\\treturn this;\\n\\n};\\n\\nCubicBezierCurve3.prototype.toJSON = function () {\\n\\n\\tvar data = Curve.prototype.toJSON.call( this );\\n\\n\\tdata.v0 = this.v0.toArray();\\n\\tdata.v1 = this.v1.toArray();\\n\\tdata.v2 = this.v2.toArray();\\n\\tdata.v3 = this.v3.toArray();\\n\\n\\treturn data;\\n\\n};\\n\\nCubicBezierCurve3.prototype.fromJSON = function ( json ) {\\n\\n\\tCurve.prototype.fromJSON.call( this, json );\\n\\n\\tthis.v0.fromArray( json.v0 );\\n\\tthis.v1.fromArray( json.v1 );\\n\\tthis.v2.fromArray( json.v2 );\\n\\tthis.v3.fromArray( json.v3 );\\n\\n\\treturn this;\\n\\n};\\n\\nfunction LineCurve( v1, v2 ) {\\n\\n\\tCurve.call( this );\\n\\n\\tthis.type = 'LineCurve';\\n\\n\\tthis.v1 = v1 || new Vector2();\\n\\tthis.v2 = v2 || new Vector2();\\n\\n}\\n\\nLineCurve.prototype = Object.create( Curve.prototype );\\nLineCurve.prototype.constructor = LineCurve;\\n\\nLineCurve.prototype.isLineCurve = true;\\n\\nLineCurve.prototype.getPoint = function ( t, optionalTarget ) {\\n\\n\\tvar point = optionalTarget || new Vector2();\\n\\n\\tif ( t === 1 ) {\\n\\n\\t\\tpoint.copy( this.v2 );\\n\\n\\t} else {\\n\\n\\t\\tpoint.copy( this.v2 ).sub( this.v1 );\\n\\t\\tpoint.multiplyScalar( t ).add( this.v1 );\\n\\n\\t}\\n\\n\\treturn point;\\n\\n};\\n\\n// Line curve is linear, so we can overwrite default getPointAt\\n\\nLineCurve.prototype.getPointAt = function ( u, optionalTarget ) {\\n\\n\\treturn this.getPoint( u, optionalTarget );\\n\\n};\\n\\nLineCurve.prototype.getTangent = function ( /* t */ ) {\\n\\n\\tvar tangent = this.v2.clone().sub( this.v1 );\\n\\n\\treturn tangent.normalize();\\n\\n};\\n\\nLineCurve.prototype.copy = function ( source ) {\\n\\n\\tCurve.prototype.copy.call( this, source );\\n\\n\\tthis.v1.copy( source.v1 );\\n\\tthis.v2.copy( source.v2 );\\n\\n\\treturn this;\\n\\n};\\n\\nLineCurve.prototype.toJSON = function () {\\n\\n\\tvar data = Curve.prototype.toJSON.call( this );\\n\\n\\tdata.v1 = this.v1.toArray();\\n\\tdata.v2 = this.v2.toArray();\\n\\n\\treturn data;\\n\\n};\\n\\nLineCurve.prototype.fromJSON = function ( json ) {\\n\\n\\tCurve.prototype.fromJSON.call( this, json );\\n\\n\\tthis.v1.fromArray( json.v1 );\\n\\tthis.v2.fromArray( json.v2 );\\n\\n\\treturn this;\\n\\n};\\n\\nfunction LineCurve3( v1, v2 ) {\\n\\n\\tCurve.call( this );\\n\\n\\tthis.type = 'LineCurve3';\\n\\n\\tthis.v1 = v1 || new Vector3();\\n\\tthis.v2 = v2 || new Vector3();\\n\\n}\\n\\nLineCurve3.prototype = Object.create( Curve.prototype );\\nLineCurve3.prototype.constructor = LineCurve3;\\n\\nLineCurve3.prototype.isLineCurve3 = true;\\n\\nLineCurve3.prototype.getPoint = function ( t, optionalTarget ) {\\n\\n\\tvar point = optionalTarget || new Vector3();\\n\\n\\tif ( t === 1 ) {\\n\\n\\t\\tpoint.copy( this.v2 );\\n\\n\\t} else {\\n\\n\\t\\tpoint.copy( this.v2 ).sub( this.v1 );\\n\\t\\tpoint.multiplyScalar( t ).add( this.v1 );\\n\\n\\t}\\n\\n\\treturn point;\\n\\n};\\n\\n// Line curve is linear, so we can overwrite default getPointAt\\n\\nLineCurve3.prototype.getPointAt = function ( u, optionalTarget ) {\\n\\n\\treturn this.getPoint( u, optionalTarget );\\n\\n};\\n\\nLineCurve3.prototype.copy = function ( source ) {\\n\\n\\tCurve.prototype.copy.call( this, source );\\n\\n\\tthis.v1.copy( source.v1 );\\n\\tthis.v2.copy( source.v2 );\\n\\n\\treturn this;\\n\\n};\\n\\nLineCurve3.prototype.toJSON = function () {\\n\\n\\tvar data = Curve.prototype.toJSON.call( this );\\n\\n\\tdata.v1 = this.v1.toArray();\\n\\tdata.v2 = this.v2.toArray();\\n\\n\\treturn data;\\n\\n};\\n\\nLineCurve3.prototype.fromJSON = function ( json ) {\\n\\n\\tCurve.prototype.fromJSON.call( this, json );\\n\\n\\tthis.v1.fromArray( json.v1 );\\n\\tthis.v2.fromArray( json.v2 );\\n\\n\\treturn this;\\n\\n};\\n\\nfunction QuadraticBezierCurve( v0, v1, v2 ) {\\n\\n\\tCurve.call( this );\\n\\n\\tthis.type = 'QuadraticBezierCurve';\\n\\n\\tthis.v0 = v0 || new Vector2();\\n\\tthis.v1 = v1 || new Vector2();\\n\\tthis.v2 = v2 || new Vector2();\\n\\n}\\n\\nQuadraticBezierCurve.prototype = Object.create( Curve.prototype );\\nQuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;\\n\\nQuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;\\n\\nQuadraticBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {\\n\\n\\tvar point = optionalTarget || new Vector2();\\n\\n\\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2;\\n\\n\\tpoint.set(\\n\\t\\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\\n\\t\\tQuadraticBezier( t, v0.y, v1.y, v2.y )\\n\\t);\\n\\n\\treturn point;\\n\\n};\\n\\nQuadraticBezierCurve.prototype.copy = function ( source ) {\\n\\n\\tCurve.prototype.copy.call( this, source );\\n\\n\\tthis.v0.copy( source.v0 );\\n\\tthis.v1.copy( source.v1 );\\n\\tthis.v2.copy( source.v2 );\\n\\n\\treturn this;\\n\\n};\\n\\nQuadraticBezierCurve.prototype.toJSON = function () {\\n\\n\\tvar data = Curve.prototype.toJSON.call( this );\\n\\n\\tdata.v0 = this.v0.toArray();\\n\\tdata.v1 = this.v1.toArray();\\n\\tdata.v2 = this.v2.toArray();\\n\\n\\treturn data;\\n\\n};\\n\\nQuadraticBezierCurve.prototype.fromJSON = function ( json ) {\\n\\n\\tCurve.prototype.fromJSON.call( this, json );\\n\\n\\tthis.v0.fromArray( json.v0 );\\n\\tthis.v1.fromArray( json.v1 );\\n\\tthis.v2.fromArray( json.v2 );\\n\\n\\treturn this;\\n\\n};\\n\\nfunction QuadraticBezierCurve3( v0, v1, v2 ) {\\n\\n\\tCurve.call( this );\\n\\n\\tthis.type = 'QuadraticBezierCurve3';\\n\\n\\tthis.v0 = v0 || new Vector3();\\n\\tthis.v1 = v1 || new Vector3();\\n\\tthis.v2 = v2 || new Vector3();\\n\\n}\\n\\nQuadraticBezierCurve3.prototype = Object.create( Curve.prototype );\\nQuadraticBezierCurve3.prototype.constructor = QuadraticBezierCurve3;\\n\\nQuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;\\n\\nQuadraticBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {\\n\\n\\tvar point = optionalTarget || new Vector3();\\n\\n\\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2;\\n\\n\\tpoint.set(\\n\\t\\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\\n\\t\\tQuadraticBezier( t, v0.y, v1.y, v2.y ),\\n\\t\\tQuadraticBezier( t, v0.z, v1.z, v2.z )\\n\\t);\\n\\n\\treturn point;\\n\\n};\\n\\nQuadraticBezierCurve3.prototype.copy = function ( source ) {\\n\\n\\tCurve.prototype.copy.call( this, source );\\n\\n\\tthis.v0.copy( source.v0 );\\n\\tthis.v1.copy( source.v1 );\\n\\tthis.v2.copy( source.v2 );\\n\\n\\treturn this;\\n\\n};\\n\\nQuadraticBezierCurve3.prototype.toJSON = function () {\\n\\n\\tvar data = Curve.prototype.toJSON.call( this );\\n\\n\\tdata.v0 = this.v0.toArray();\\n\\tdata.v1 = this.v1.toArray();\\n\\tdata.v2 = this.v2.toArray();\\n\\n\\treturn data;\\n\\n};\\n\\nQuadraticBezierCurve3.prototype.fromJSON = function ( json ) {\\n\\n\\tCurve.prototype.fromJSON.call( this, json );\\n\\n\\tthis.v0.fromArray( json.v0 );\\n\\tthis.v1.fromArray( json.v1 );\\n\\tthis.v2.fromArray( json.v2 );\\n\\n\\treturn this;\\n\\n};\\n\\nfunction SplineCurve( points /* array of Vector2 */ ) {\\n\\n\\tCurve.call( this );\\n\\n\\tthis.type = 'SplineCurve';\\n\\n\\tthis.points = points || [];\\n\\n}\\n\\nSplineCurve.prototype = Object.create( Curve.prototype );\\nSplineCurve.prototype.constructor = SplineCurve;\\n\\nSplineCurve.prototype.isSplineCurve = true;\\n\\nSplineCurve.prototype.getPoint = function ( t, optionalTarget ) {\\n\\n\\tvar point = optionalTarget || new Vector2();\\n\\n\\tvar points = this.points;\\n\\tvar p = ( points.length - 1 ) * t;\\n\\n\\tvar intPoint = Math.floor( p );\\n\\tvar weight = p - intPoint;\\n\\n\\tvar p0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\\n\\tvar p1 = points[ intPoint ];\\n\\tvar p2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\\n\\tvar p3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\\n\\n\\tpoint.set(\\n\\t\\tCatmullRom( weight, p0.x, p1.x, p2.x, p3.x ),\\n\\t\\tCatmullRom( weight, p0.y, p1.y, p2.y, p3.y )\\n\\t);\\n\\n\\treturn point;\\n\\n};\\n\\nSplineCurve.prototype.copy = function ( source ) {\\n\\n\\tCurve.prototype.copy.call( this, source );\\n\\n\\tthis.points = [];\\n\\n\\tfor ( var i = 0, l = source.points.length; i < l; i ++ ) {\\n\\n\\t\\tvar point = source.points[ i ];\\n\\n\\t\\tthis.points.push( point.clone() );\\n\\n\\t}\\n\\n\\treturn this;\\n\\n};\\n\\nSplineCurve.prototype.toJSON = function () {\\n\\n\\tvar data = Curve.prototype.toJSON.call( this );\\n\\n\\tdata.points = [];\\n\\n\\tfor ( var i = 0, l = this.points.length; i < l; i ++ ) {\\n\\n\\t\\tvar point = this.points[ i ];\\n\\t\\tdata.points.push( point.toArray() );\\n\\n\\t}\\n\\n\\treturn data;\\n\\n};\\n\\nSplineCurve.prototype.fromJSON = function ( json ) {\\n\\n\\tCurve.prototype.fromJSON.call( this, json );\\n\\n\\tthis.points = [];\\n\\n\\tfor ( var i = 0, l = json.points.length; i < l; i ++ ) {\\n\\n\\t\\tvar point = json.points[ i ];\\n\\t\\tthis.points.push( new Vector2().fromArray( point ) );\\n\\n\\t}\\n\\n\\treturn this;\\n\\n};\\n\\n\\n\\nvar Curves = /*#__PURE__*/Object.freeze({\\n\\tArcCurve: ArcCurve,\\n\\tCatmullRomCurve3: CatmullRomCurve3,\\n\\tCubicBezierCurve: CubicBezierCurve,\\n\\tCubicBezierCurve3: CubicBezierCurve3,\\n\\tEllipseCurve: EllipseCurve,\\n\\tLineCurve: LineCurve,\\n\\tLineCurve3: LineCurve3,\\n\\tQuadraticBezierCurve: QuadraticBezierCurve,\\n\\tQuadraticBezierCurve3: QuadraticBezierCurve3,\\n\\tSplineCurve: SplineCurve\\n});\\n\\n/**\\n * @author zz85 / http://www.lab4games.net/zz85/blog\\n *\\n **/\\n\\n/**************************************************************\\n *\\tCurved Path - a curve path is simply a array of connected\\n *  curves, but retains the api of a curve\\n **************************************************************/\\n\\nfunction CurvePath() {\\n\\n\\tCurve.call( this );\\n\\n\\tthis.type = 'CurvePath';\\n\\n\\tthis.curves = [];\\n\\tthis.autoClose = false; // Automatically closes the path\\n\\n}\\n\\nCurvePath.prototype = Object.assign( Object.create( Curve.prototype ), {\\n\\n\\tconstructor: CurvePath,\\n\\n\\tadd: function ( curve ) {\\n\\n\\t\\tthis.curves.push( curve );\\n\\n\\t},\\n\\n\\tclosePath: function () {\\n\\n\\t\\t// Add a line curve if start and end of lines are not connected\\n\\t\\tvar startPoint = this.curves[ 0 ].getPoint( 0 );\\n\\t\\tvar endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );\\n\\n\\t\\tif ( ! startPoint.equals( endPoint ) ) {\\n\\n\\t\\t\\tthis.curves.push( new LineCurve( endPoint, startPoint ) );\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\t// To get accurate point with reference to\\n\\t// entire path distance at time t,\\n\\t// following has to be done:\\n\\n\\t// 1. Length of each sub path have to be known\\n\\t// 2. Locate and identify type of curve\\n\\t// 3. Get t for the curve\\n\\t// 4. Return curve.getPointAt(t')\\n\\n\\tgetPoint: function ( t ) {\\n\\n\\t\\tvar d = t * this.getLength();\\n\\t\\tvar curveLengths = this.getCurveLengths();\\n\\t\\tvar i = 0;\\n\\n\\t\\t// To think about boundaries points.\\n\\n\\t\\twhile ( i < curveLengths.length ) {\\n\\n\\t\\t\\tif ( curveLengths[ i ] >= d ) {\\n\\n\\t\\t\\t\\tvar diff = curveLengths[ i ] - d;\\n\\t\\t\\t\\tvar curve = this.curves[ i ];\\n\\n\\t\\t\\t\\tvar segmentLength = curve.getLength();\\n\\t\\t\\t\\tvar u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\\n\\n\\t\\t\\t\\treturn curve.getPointAt( u );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\ti ++;\\n\\n\\t\\t}\\n\\n\\t\\treturn null;\\n\\n\\t\\t// loop where sum != 0, sum > d , sum+1 <d\\n\\n\\t},\\n\\n\\t// We cannot use the default THREE.Curve getPoint() with getLength() because in\\n\\t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\\n\\t// getPoint() depends on getLength\\n\\n\\tgetLength: function () {\\n\\n\\t\\tvar lens = this.getCurveLengths();\\n\\t\\treturn lens[ lens.length - 1 ];\\n\\n\\t},\\n\\n\\t// cacheLengths must be recalculated.\\n\\tupdateArcLengths: function () {\\n\\n\\t\\tthis.needsUpdate = true;\\n\\t\\tthis.cacheLengths = null;\\n\\t\\tthis.getCurveLengths();\\n\\n\\t},\\n\\n\\t// Compute lengths and cache them\\n\\t// We cannot overwrite getLengths() because UtoT mapping uses it.\\n\\n\\tgetCurveLengths: function () {\\n\\n\\t\\t// We use cache values if curves and cache array are same length\\n\\n\\t\\tif ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {\\n\\n\\t\\t\\treturn this.cacheLengths;\\n\\n\\t\\t}\\n\\n\\t\\t// Get length of sub-curve\\n\\t\\t// Push sums into cached array\\n\\n\\t\\tvar lengths = [], sums = 0;\\n\\n\\t\\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\\n\\n\\t\\t\\tsums += this.curves[ i ].getLength();\\n\\t\\t\\tlengths.push( sums );\\n\\n\\t\\t}\\n\\n\\t\\tthis.cacheLengths = lengths;\\n\\n\\t\\treturn lengths;\\n\\n\\t},\\n\\n\\tgetSpacedPoints: function ( divisions ) {\\n\\n\\t\\tif ( divisions === undefined ) divisions = 40;\\n\\n\\t\\tvar points = [];\\n\\n\\t\\tfor ( var i = 0; i <= divisions; i ++ ) {\\n\\n\\t\\t\\tpoints.push( this.getPoint( i / divisions ) );\\n\\n\\t\\t}\\n\\n\\t\\tif ( this.autoClose ) {\\n\\n\\t\\t\\tpoints.push( points[ 0 ] );\\n\\n\\t\\t}\\n\\n\\t\\treturn points;\\n\\n\\t},\\n\\n\\tgetPoints: function ( divisions ) {\\n\\n\\t\\tdivisions = divisions || 12;\\n\\n\\t\\tvar points = [], last;\\n\\n\\t\\tfor ( var i = 0, curves = this.curves; i < curves.length; i ++ ) {\\n\\n\\t\\t\\tvar curve = curves[ i ];\\n\\t\\t\\tvar resolution = ( curve && curve.isEllipseCurve ) ? divisions * 2\\n\\t\\t\\t\\t: ( curve && ( curve.isLineCurve || curve.isLineCurve3 ) ) ? 1\\n\\t\\t\\t\\t\\t: ( curve && curve.isSplineCurve ) ? divisions * curve.points.length\\n\\t\\t\\t\\t\\t\\t: divisions;\\n\\n\\t\\t\\tvar pts = curve.getPoints( resolution );\\n\\n\\t\\t\\tfor ( var j = 0; j < pts.length; j ++ ) {\\n\\n\\t\\t\\t\\tvar point = pts[ j ];\\n\\n\\t\\t\\t\\tif ( last && last.equals( point ) ) continue; // ensures no consecutive points are duplicates\\n\\n\\t\\t\\t\\tpoints.push( point );\\n\\t\\t\\t\\tlast = point;\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tif ( this.autoClose && points.length > 1 && ! points[ points.length - 1 ].equals( points[ 0 ] ) ) {\\n\\n\\t\\t\\tpoints.push( points[ 0 ] );\\n\\n\\t\\t}\\n\\n\\t\\treturn points;\\n\\n\\t},\\n\\n\\tcopy: function ( source ) {\\n\\n\\t\\tCurve.prototype.copy.call( this, source );\\n\\n\\t\\tthis.curves = [];\\n\\n\\t\\tfor ( var i = 0, l = source.curves.length; i < l; i ++ ) {\\n\\n\\t\\t\\tvar curve = source.curves[ i ];\\n\\n\\t\\t\\tthis.curves.push( curve.clone() );\\n\\n\\t\\t}\\n\\n\\t\\tthis.autoClose = source.autoClose;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\ttoJSON: function () {\\n\\n\\t\\tvar data = Curve.prototype.toJSON.call( this );\\n\\n\\t\\tdata.autoClose = this.autoClose;\\n\\t\\tdata.curves = [];\\n\\n\\t\\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\\n\\n\\t\\t\\tvar curve = this.curves[ i ];\\n\\t\\t\\tdata.curves.push( curve.toJSON() );\\n\\n\\t\\t}\\n\\n\\t\\treturn data;\\n\\n\\t},\\n\\n\\tfromJSON: function ( json ) {\\n\\n\\t\\tCurve.prototype.fromJSON.call( this, json );\\n\\n\\t\\tthis.autoClose = json.autoClose;\\n\\t\\tthis.curves = [];\\n\\n\\t\\tfor ( var i = 0, l = json.curves.length; i < l; i ++ ) {\\n\\n\\t\\t\\tvar curve = json.curves[ i ];\\n\\t\\t\\tthis.curves.push( new Curves[ curve.type ]().fromJSON( curve ) );\\n\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author zz85 / http://www.lab4games.net/zz85/blog\\n * Creates free form 2d path using series of points, lines or curves.\\n **/\\n\\nfunction Path( points ) {\\n\\n\\tCurvePath.call( this );\\n\\n\\tthis.type = 'Path';\\n\\n\\tthis.currentPoint = new Vector2();\\n\\n\\tif ( points ) {\\n\\n\\t\\tthis.setFromPoints( points );\\n\\n\\t}\\n\\n}\\n\\nPath.prototype = Object.assign( Object.create( CurvePath.prototype ), {\\n\\n\\tconstructor: Path,\\n\\n\\tsetFromPoints: function ( points ) {\\n\\n\\t\\tthis.moveTo( points[ 0 ].x, points[ 0 ].y );\\n\\n\\t\\tfor ( var i = 1, l = points.length; i < l; i ++ ) {\\n\\n\\t\\t\\tthis.lineTo( points[ i ].x, points[ i ].y );\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\tmoveTo: function ( x, y ) {\\n\\n\\t\\tthis.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?\\n\\n\\t},\\n\\n\\tlineTo: function ( x, y ) {\\n\\n\\t\\tvar curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );\\n\\t\\tthis.curves.push( curve );\\n\\n\\t\\tthis.currentPoint.set( x, y );\\n\\n\\t},\\n\\n\\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\\n\\n\\t\\tvar curve = new QuadraticBezierCurve(\\n\\t\\t\\tthis.currentPoint.clone(),\\n\\t\\t\\tnew Vector2( aCPx, aCPy ),\\n\\t\\t\\tnew Vector2( aX, aY )\\n\\t\\t);\\n\\n\\t\\tthis.curves.push( curve );\\n\\n\\t\\tthis.currentPoint.set( aX, aY );\\n\\n\\t},\\n\\n\\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\\n\\n\\t\\tvar curve = new CubicBezierCurve(\\n\\t\\t\\tthis.currentPoint.clone(),\\n\\t\\t\\tnew Vector2( aCP1x, aCP1y ),\\n\\t\\t\\tnew Vector2( aCP2x, aCP2y ),\\n\\t\\t\\tnew Vector2( aX, aY )\\n\\t\\t);\\n\\n\\t\\tthis.curves.push( curve );\\n\\n\\t\\tthis.currentPoint.set( aX, aY );\\n\\n\\t},\\n\\n\\tsplineThru: function ( pts /*Array of Vector*/ ) {\\n\\n\\t\\tvar npts = [ this.currentPoint.clone() ].concat( pts );\\n\\n\\t\\tvar curve = new SplineCurve( npts );\\n\\t\\tthis.curves.push( curve );\\n\\n\\t\\tthis.currentPoint.copy( pts[ pts.length - 1 ] );\\n\\n\\t},\\n\\n\\tarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\\n\\n\\t\\tvar x0 = this.currentPoint.x;\\n\\t\\tvar y0 = this.currentPoint.y;\\n\\n\\t\\tthis.absarc( aX + x0, aY + y0, aRadius,\\n\\t\\t\\taStartAngle, aEndAngle, aClockwise );\\n\\n\\t},\\n\\n\\tabsarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\\n\\n\\t\\tthis.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\\n\\n\\t},\\n\\n\\tellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\\n\\n\\t\\tvar x0 = this.currentPoint.x;\\n\\t\\tvar y0 = this.currentPoint.y;\\n\\n\\t\\tthis.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\\n\\n\\t},\\n\\n\\tabsellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\\n\\n\\t\\tvar curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\\n\\n\\t\\tif ( this.curves.length > 0 ) {\\n\\n\\t\\t\\t// if a previous curve is present, attempt to join\\n\\t\\t\\tvar firstPoint = curve.getPoint( 0 );\\n\\n\\t\\t\\tif ( ! firstPoint.equals( this.currentPoint ) ) {\\n\\n\\t\\t\\t\\tthis.lineTo( firstPoint.x, firstPoint.y );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tthis.curves.push( curve );\\n\\n\\t\\tvar lastPoint = curve.getPoint( 1 );\\n\\t\\tthis.currentPoint.copy( lastPoint );\\n\\n\\t},\\n\\n\\tcopy: function ( source ) {\\n\\n\\t\\tCurvePath.prototype.copy.call( this, source );\\n\\n\\t\\tthis.currentPoint.copy( source.currentPoint );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\ttoJSON: function () {\\n\\n\\t\\tvar data = CurvePath.prototype.toJSON.call( this );\\n\\n\\t\\tdata.currentPoint = this.currentPoint.toArray();\\n\\n\\t\\treturn data;\\n\\n\\t},\\n\\n\\tfromJSON: function ( json ) {\\n\\n\\t\\tCurvePath.prototype.fromJSON.call( this, json );\\n\\n\\t\\tthis.currentPoint.fromArray( json.currentPoint );\\n\\n\\t\\treturn this;\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author zz85 / http://www.lab4games.net/zz85/blog\\n * Defines a 2d shape plane using paths.\\n **/\\n\\n// STEP 1 Create a path.\\n// STEP 2 Turn path into shape.\\n// STEP 3 ExtrudeGeometry takes in Shape/Shapes\\n// STEP 3a - Extract points from each shape, turn to vertices\\n// STEP 3b - Triangulate each shape, add faces.\\n\\nfunction Shape( points ) {\\n\\n\\tPath.call( this, points );\\n\\n\\tthis.uuid = _Math.generateUUID();\\n\\n\\tthis.type = 'Shape';\\n\\n\\tthis.holes = [];\\n\\n}\\n\\nShape.prototype = Object.assign( Object.create( Path.prototype ), {\\n\\n\\tconstructor: Shape,\\n\\n\\tgetPointsHoles: function ( divisions ) {\\n\\n\\t\\tvar holesPts = [];\\n\\n\\t\\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\\n\\n\\t\\t\\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\\n\\n\\t\\t}\\n\\n\\t\\treturn holesPts;\\n\\n\\t},\\n\\n\\t// get points of shape and holes (keypoints based on segments parameter)\\n\\n\\textractPoints: function ( divisions ) {\\n\\n\\t\\treturn {\\n\\n\\t\\t\\tshape: this.getPoints( divisions ),\\n\\t\\t\\tholes: this.getPointsHoles( divisions )\\n\\n\\t\\t};\\n\\n\\t},\\n\\n\\tcopy: function ( source ) {\\n\\n\\t\\tPath.prototype.copy.call( this, source );\\n\\n\\t\\tthis.holes = [];\\n\\n\\t\\tfor ( var i = 0, l = source.holes.length; i < l; i ++ ) {\\n\\n\\t\\t\\tvar hole = source.holes[ i ];\\n\\n\\t\\t\\tthis.holes.push( hole.clone() );\\n\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\ttoJSON: function () {\\n\\n\\t\\tvar data = Path.prototype.toJSON.call( this );\\n\\n\\t\\tdata.uuid = this.uuid;\\n\\t\\tdata.holes = [];\\n\\n\\t\\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\\n\\n\\t\\t\\tvar hole = this.holes[ i ];\\n\\t\\t\\tdata.holes.push( hole.toJSON() );\\n\\n\\t\\t}\\n\\n\\t\\treturn data;\\n\\n\\t},\\n\\n\\tfromJSON: function ( json ) {\\n\\n\\t\\tPath.prototype.fromJSON.call( this, json );\\n\\n\\t\\tthis.uuid = json.uuid;\\n\\t\\tthis.holes = [];\\n\\n\\t\\tfor ( var i = 0, l = json.holes.length; i < l; i ++ ) {\\n\\n\\t\\t\\tvar hole = json.holes[ i ];\\n\\t\\t\\tthis.holes.push( new Path().fromJSON( hole ) );\\n\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n * @author alteredq / http://alteredqualia.com/\\n */\\n\\nfunction Light( color, intensity ) {\\n\\n\\tObject3D.call( this );\\n\\n\\tthis.type = 'Light';\\n\\n\\tthis.color = new Color( color );\\n\\tthis.intensity = intensity !== undefined ? intensity : 1;\\n\\n\\tthis.receiveShadow = undefined;\\n\\n}\\n\\nLight.prototype = Object.assign( Object.create( Object3D.prototype ), {\\n\\n\\tconstructor: Light,\\n\\n\\tisLight: true,\\n\\n\\tcopy: function ( source ) {\\n\\n\\t\\tObject3D.prototype.copy.call( this, source );\\n\\n\\t\\tthis.color.copy( source.color );\\n\\t\\tthis.intensity = source.intensity;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\ttoJSON: function ( meta ) {\\n\\n\\t\\tvar data = Object3D.prototype.toJSON.call( this, meta );\\n\\n\\t\\tdata.object.color = this.color.getHex();\\n\\t\\tdata.object.intensity = this.intensity;\\n\\n\\t\\tif ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();\\n\\n\\t\\tif ( this.distance !== undefined ) data.object.distance = this.distance;\\n\\t\\tif ( this.angle !== undefined ) data.object.angle = this.angle;\\n\\t\\tif ( this.decay !== undefined ) data.object.decay = this.decay;\\n\\t\\tif ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;\\n\\n\\t\\tif ( this.shadow !== undefined ) data.object.shadow = this.shadow.toJSON();\\n\\n\\t\\treturn data;\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author alteredq / http://alteredqualia.com/\\n */\\n\\nfunction HemisphereLight( skyColor, groundColor, intensity ) {\\n\\n\\tLight.call( this, skyColor, intensity );\\n\\n\\tthis.type = 'HemisphereLight';\\n\\n\\tthis.castShadow = undefined;\\n\\n\\tthis.position.copy( Object3D.DefaultUp );\\n\\tthis.updateMatrix();\\n\\n\\tthis.groundColor = new Color( groundColor );\\n\\n}\\n\\nHemisphereLight.prototype = Object.assign( Object.create( Light.prototype ), {\\n\\n\\tconstructor: HemisphereLight,\\n\\n\\tisHemisphereLight: true,\\n\\n\\tcopy: function ( source ) {\\n\\n\\t\\tLight.prototype.copy.call( this, source );\\n\\n\\t\\tthis.groundColor.copy( source.groundColor );\\n\\n\\t\\treturn this;\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\nfunction LightShadow( camera ) {\\n\\n\\tthis.camera = camera;\\n\\n\\tthis.bias = 0;\\n\\tthis.radius = 1;\\n\\n\\tthis.mapSize = new Vector2( 512, 512 );\\n\\n\\tthis.map = null;\\n\\tthis.matrix = new Matrix4();\\n\\n}\\n\\nObject.assign( LightShadow.prototype, {\\n\\n\\tcopy: function ( source ) {\\n\\n\\t\\tthis.camera = source.camera.clone();\\n\\n\\t\\tthis.bias = source.bias;\\n\\t\\tthis.radius = source.radius;\\n\\n\\t\\tthis.mapSize.copy( source.mapSize );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tclone: function () {\\n\\n\\t\\treturn new this.constructor().copy( this );\\n\\n\\t},\\n\\n\\ttoJSON: function () {\\n\\n\\t\\tvar object = {};\\n\\n\\t\\tif ( this.bias !== 0 ) object.bias = this.bias;\\n\\t\\tif ( this.radius !== 1 ) object.radius = this.radius;\\n\\t\\tif ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) object.mapSize = this.mapSize.toArray();\\n\\n\\t\\tobject.camera = this.camera.toJSON( false ).object;\\n\\t\\tdelete object.camera.matrix;\\n\\n\\t\\treturn object;\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\nfunction SpotLightShadow() {\\n\\n\\tLightShadow.call( this, new PerspectiveCamera( 50, 1, 0.5, 500 ) );\\n\\n}\\n\\nSpotLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\\n\\n\\tconstructor: SpotLightShadow,\\n\\n\\tisSpotLightShadow: true,\\n\\n\\tupdate: function ( light ) {\\n\\n\\t\\tvar camera = this.camera;\\n\\n\\t\\tvar fov = _Math.RAD2DEG * 2 * light.angle;\\n\\t\\tvar aspect = this.mapSize.width / this.mapSize.height;\\n\\t\\tvar far = light.distance || camera.far;\\n\\n\\t\\tif ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {\\n\\n\\t\\t\\tcamera.fov = fov;\\n\\t\\t\\tcamera.aspect = aspect;\\n\\t\\t\\tcamera.far = far;\\n\\t\\t\\tcamera.updateProjectionMatrix();\\n\\n\\t\\t}\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author alteredq / http://alteredqualia.com/\\n */\\n\\nfunction SpotLight( color, intensity, distance, angle, penumbra, decay ) {\\n\\n\\tLight.call( this, color, intensity );\\n\\n\\tthis.type = 'SpotLight';\\n\\n\\tthis.position.copy( Object3D.DefaultUp );\\n\\tthis.updateMatrix();\\n\\n\\tthis.target = new Object3D();\\n\\n\\tObject.defineProperty( this, 'power', {\\n\\t\\tget: function () {\\n\\n\\t\\t\\t// intensity = power per solid angle.\\n\\t\\t\\t// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\\n\\t\\t\\treturn this.intensity * Math.PI;\\n\\n\\t\\t},\\n\\t\\tset: function ( power ) {\\n\\n\\t\\t\\t// intensity = power per solid angle.\\n\\t\\t\\t// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\\n\\t\\t\\tthis.intensity = power / Math.PI;\\n\\n\\t\\t}\\n\\t} );\\n\\n\\tthis.distance = ( distance !== undefined ) ? distance : 0;\\n\\tthis.angle = ( angle !== undefined ) ? angle : Math.PI / 3;\\n\\tthis.penumbra = ( penumbra !== undefined ) ? penumbra : 0;\\n\\tthis.decay = ( decay !== undefined ) ? decay : 1;\\t// for physically correct lights, should be 2.\\n\\n\\tthis.shadow = new SpotLightShadow();\\n\\n}\\n\\nSpotLight.prototype = Object.assign( Object.create( Light.prototype ), {\\n\\n\\tconstructor: SpotLight,\\n\\n\\tisSpotLight: true,\\n\\n\\tcopy: function ( source ) {\\n\\n\\t\\tLight.prototype.copy.call( this, source );\\n\\n\\t\\tthis.distance = source.distance;\\n\\t\\tthis.angle = source.angle;\\n\\t\\tthis.penumbra = source.penumbra;\\n\\t\\tthis.decay = source.decay;\\n\\n\\t\\tthis.target = source.target.clone();\\n\\n\\t\\tthis.shadow = source.shadow.clone();\\n\\n\\t\\treturn this;\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\n\\nfunction PointLight( color, intensity, distance, decay ) {\\n\\n\\tLight.call( this, color, intensity );\\n\\n\\tthis.type = 'PointLight';\\n\\n\\tObject.defineProperty( this, 'power', {\\n\\t\\tget: function () {\\n\\n\\t\\t\\t// intensity = power per solid angle.\\n\\t\\t\\t// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\\n\\t\\t\\treturn this.intensity * 4 * Math.PI;\\n\\n\\t\\t},\\n\\t\\tset: function ( power ) {\\n\\n\\t\\t\\t// intensity = power per solid angle.\\n\\t\\t\\t// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\\n\\t\\t\\tthis.intensity = power / ( 4 * Math.PI );\\n\\n\\t\\t}\\n\\t} );\\n\\n\\tthis.distance = ( distance !== undefined ) ? distance : 0;\\n\\tthis.decay = ( decay !== undefined ) ? decay : 1;\\t// for physically correct lights, should be 2.\\n\\n\\tthis.shadow = new LightShadow( new PerspectiveCamera( 90, 1, 0.5, 500 ) );\\n\\n}\\n\\nPointLight.prototype = Object.assign( Object.create( Light.prototype ), {\\n\\n\\tconstructor: PointLight,\\n\\n\\tisPointLight: true,\\n\\n\\tcopy: function ( source ) {\\n\\n\\t\\tLight.prototype.copy.call( this, source );\\n\\n\\t\\tthis.distance = source.distance;\\n\\t\\tthis.decay = source.decay;\\n\\n\\t\\tthis.shadow = source.shadow.clone();\\n\\n\\t\\treturn this;\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author alteredq / http://alteredqualia.com/\\n * @author arose / http://github.com/arose\\n */\\n\\nfunction OrthographicCamera( left, right, top, bottom, near, far ) {\\n\\n\\tCamera.call( this );\\n\\n\\tthis.type = 'OrthographicCamera';\\n\\n\\tthis.zoom = 1;\\n\\tthis.view = null;\\n\\n\\tthis.left = ( left !== undefined ) ? left : - 1;\\n\\tthis.right = ( right !== undefined ) ? right : 1;\\n\\tthis.top = ( top !== undefined ) ? top : 1;\\n\\tthis.bottom = ( bottom !== undefined ) ? bottom : - 1;\\n\\n\\tthis.near = ( near !== undefined ) ? near : 0.1;\\n\\tthis.far = ( far !== undefined ) ? far : 2000;\\n\\n\\tthis.updateProjectionMatrix();\\n\\n}\\n\\nOrthographicCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\\n\\n\\tconstructor: OrthographicCamera,\\n\\n\\tisOrthographicCamera: true,\\n\\n\\tcopy: function ( source, recursive ) {\\n\\n\\t\\tCamera.prototype.copy.call( this, source, recursive );\\n\\n\\t\\tthis.left = source.left;\\n\\t\\tthis.right = source.right;\\n\\t\\tthis.top = source.top;\\n\\t\\tthis.bottom = source.bottom;\\n\\t\\tthis.near = source.near;\\n\\t\\tthis.far = source.far;\\n\\n\\t\\tthis.zoom = source.zoom;\\n\\t\\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\\n\\n\\t\\tif ( this.view === null ) {\\n\\n\\t\\t\\tthis.view = {\\n\\t\\t\\t\\tenabled: true,\\n\\t\\t\\t\\tfullWidth: 1,\\n\\t\\t\\t\\tfullHeight: 1,\\n\\t\\t\\t\\toffsetX: 0,\\n\\t\\t\\t\\toffsetY: 0,\\n\\t\\t\\t\\twidth: 1,\\n\\t\\t\\t\\theight: 1\\n\\t\\t\\t};\\n\\n\\t\\t}\\n\\n\\t\\tthis.view.enabled = true;\\n\\t\\tthis.view.fullWidth = fullWidth;\\n\\t\\tthis.view.fullHeight = fullHeight;\\n\\t\\tthis.view.offsetX = x;\\n\\t\\tthis.view.offsetY = y;\\n\\t\\tthis.view.width = width;\\n\\t\\tthis.view.height = height;\\n\\n\\t\\tthis.updateProjectionMatrix();\\n\\n\\t},\\n\\n\\tclearViewOffset: function () {\\n\\n\\t\\tif ( this.view !== null ) {\\n\\n\\t\\t\\tthis.view.enabled = false;\\n\\n\\t\\t}\\n\\n\\t\\tthis.updateProjectionMatrix();\\n\\n\\t},\\n\\n\\tupdateProjectionMatrix: function () {\\n\\n\\t\\tvar dx = ( this.right - this.left ) / ( 2 * this.zoom );\\n\\t\\tvar dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\\n\\t\\tvar cx = ( this.right + this.left ) / 2;\\n\\t\\tvar cy = ( this.top + this.bottom ) / 2;\\n\\n\\t\\tvar left = cx - dx;\\n\\t\\tvar right = cx + dx;\\n\\t\\tvar top = cy + dy;\\n\\t\\tvar bottom = cy - dy;\\n\\n\\t\\tif ( this.view !== null && this.view.enabled ) {\\n\\n\\t\\t\\tvar zoomW = this.zoom / ( this.view.width / this.view.fullWidth );\\n\\t\\t\\tvar zoomH = this.zoom / ( this.view.height / this.view.fullHeight );\\n\\t\\t\\tvar scaleW = ( this.right - this.left ) / this.view.width;\\n\\t\\t\\tvar scaleH = ( this.top - this.bottom ) / this.view.height;\\n\\n\\t\\t\\tleft += scaleW * ( this.view.offsetX / zoomW );\\n\\t\\t\\tright = left + scaleW * ( this.view.width / zoomW );\\n\\t\\t\\ttop -= scaleH * ( this.view.offsetY / zoomH );\\n\\t\\t\\tbottom = top - scaleH * ( this.view.height / zoomH );\\n\\n\\t\\t}\\n\\n\\t\\tthis.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );\\n\\n\\t\\tthis.projectionMatrixInverse.getInverse( this.projectionMatrix );\\n\\n\\t},\\n\\n\\ttoJSON: function ( meta ) {\\n\\n\\t\\tvar data = Object3D.prototype.toJSON.call( this, meta );\\n\\n\\t\\tdata.object.zoom = this.zoom;\\n\\t\\tdata.object.left = this.left;\\n\\t\\tdata.object.right = this.right;\\n\\t\\tdata.object.top = this.top;\\n\\t\\tdata.object.bottom = this.bottom;\\n\\t\\tdata.object.near = this.near;\\n\\t\\tdata.object.far = this.far;\\n\\n\\t\\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\\n\\n\\t\\treturn data;\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\nfunction DirectionalLightShadow( ) {\\n\\n\\tLightShadow.call( this, new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );\\n\\n}\\n\\nDirectionalLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\\n\\n\\tconstructor: DirectionalLightShadow\\n\\n} );\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n * @author alteredq / http://alteredqualia.com/\\n */\\n\\nfunction DirectionalLight( color, intensity ) {\\n\\n\\tLight.call( this, color, intensity );\\n\\n\\tthis.type = 'DirectionalLight';\\n\\n\\tthis.position.copy( Object3D.DefaultUp );\\n\\tthis.updateMatrix();\\n\\n\\tthis.target = new Object3D();\\n\\n\\tthis.shadow = new DirectionalLightShadow();\\n\\n}\\n\\nDirectionalLight.prototype = Object.assign( Object.create( Light.prototype ), {\\n\\n\\tconstructor: DirectionalLight,\\n\\n\\tisDirectionalLight: true,\\n\\n\\tcopy: function ( source ) {\\n\\n\\t\\tLight.prototype.copy.call( this, source );\\n\\n\\t\\tthis.target = source.target.clone();\\n\\n\\t\\tthis.shadow = source.shadow.clone();\\n\\n\\t\\treturn this;\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\nfunction AmbientLight( color, intensity ) {\\n\\n\\tLight.call( this, color, intensity );\\n\\n\\tthis.type = 'AmbientLight';\\n\\n\\tthis.castShadow = undefined;\\n\\n}\\n\\nAmbientLight.prototype = Object.assign( Object.create( Light.prototype ), {\\n\\n\\tconstructor: AmbientLight,\\n\\n\\tisAmbientLight: true\\n\\n} );\\n\\n/**\\n * @author abelnation / http://github.com/abelnation\\n */\\n\\nfunction RectAreaLight( color, intensity, width, height ) {\\n\\n\\tLight.call( this, color, intensity );\\n\\n\\tthis.type = 'RectAreaLight';\\n\\n\\tthis.width = ( width !== undefined ) ? width : 10;\\n\\tthis.height = ( height !== undefined ) ? height : 10;\\n\\n}\\n\\nRectAreaLight.prototype = Object.assign( Object.create( Light.prototype ), {\\n\\n\\tconstructor: RectAreaLight,\\n\\n\\tisRectAreaLight: true,\\n\\n\\tcopy: function ( source ) {\\n\\n\\t\\tLight.prototype.copy.call( this, source );\\n\\n\\t\\tthis.width = source.width;\\n\\t\\tthis.height = source.height;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\ttoJSON: function ( meta ) {\\n\\n\\t\\tvar data = Light.prototype.toJSON.call( this, meta );\\n\\n\\t\\tdata.object.width = this.width;\\n\\t\\tdata.object.height = this.height;\\n\\n\\t\\treturn data;\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\nfunction MaterialLoader( manager ) {\\n\\n\\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\\n\\tthis.textures = {};\\n\\n}\\n\\nObject.assign( MaterialLoader.prototype, {\\n\\n\\tload: function ( url, onLoad, onProgress, onError ) {\\n\\n\\t\\tvar scope = this;\\n\\n\\t\\tvar loader = new FileLoader( scope.manager );\\n\\t\\tloader.setPath( scope.path );\\n\\t\\tloader.load( url, function ( text ) {\\n\\n\\t\\t\\tonLoad( scope.parse( JSON.parse( text ) ) );\\n\\n\\t\\t}, onProgress, onError );\\n\\n\\t},\\n\\n\\tparse: function ( json ) {\\n\\n\\t\\tvar textures = this.textures;\\n\\n\\t\\tfunction getTexture( name ) {\\n\\n\\t\\t\\tif ( textures[ name ] === undefined ) {\\n\\n\\t\\t\\t\\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn textures[ name ];\\n\\n\\t\\t}\\n\\n\\t\\tvar material = new Materials[ json.type ]();\\n\\n\\t\\tif ( json.uuid !== undefined ) material.uuid = json.uuid;\\n\\t\\tif ( json.name !== undefined ) material.name = json.name;\\n\\t\\tif ( json.color !== undefined ) material.color.setHex( json.color );\\n\\t\\tif ( json.roughness !== undefined ) material.roughness = json.roughness;\\n\\t\\tif ( json.metalness !== undefined ) material.metalness = json.metalness;\\n\\t\\tif ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );\\n\\t\\tif ( json.specular !== undefined ) material.specular.setHex( json.specular );\\n\\t\\tif ( json.shininess !== undefined ) material.shininess = json.shininess;\\n\\t\\tif ( json.clearCoat !== undefined ) material.clearCoat = json.clearCoat;\\n\\t\\tif ( json.clearCoatRoughness !== undefined ) material.clearCoatRoughness = json.clearCoatRoughness;\\n\\t\\tif ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;\\n\\t\\tif ( json.fog !== undefined ) material.fog = json.fog;\\n\\t\\tif ( json.flatShading !== undefined ) material.flatShading = json.flatShading;\\n\\t\\tif ( json.blending !== undefined ) material.blending = json.blending;\\n\\t\\tif ( json.combine !== undefined ) material.combine = json.combine;\\n\\t\\tif ( json.side !== undefined ) material.side = json.side;\\n\\t\\tif ( json.opacity !== undefined ) material.opacity = json.opacity;\\n\\t\\tif ( json.transparent !== undefined ) material.transparent = json.transparent;\\n\\t\\tif ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;\\n\\t\\tif ( json.depthTest !== undefined ) material.depthTest = json.depthTest;\\n\\t\\tif ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;\\n\\t\\tif ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;\\n\\t\\tif ( json.wireframe !== undefined ) material.wireframe = json.wireframe;\\n\\t\\tif ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;\\n\\t\\tif ( json.wireframeLinecap !== undefined ) material.wireframeLinecap = json.wireframeLinecap;\\n\\t\\tif ( json.wireframeLinejoin !== undefined ) material.wireframeLinejoin = json.wireframeLinejoin;\\n\\n\\t\\tif ( json.rotation !== undefined ) material.rotation = json.rotation;\\n\\n\\t\\tif ( json.linewidth !== 1 ) material.linewidth = json.linewidth;\\n\\t\\tif ( json.dashSize !== undefined ) material.dashSize = json.dashSize;\\n\\t\\tif ( json.gapSize !== undefined ) material.gapSize = json.gapSize;\\n\\t\\tif ( json.scale !== undefined ) material.scale = json.scale;\\n\\n\\t\\tif ( json.polygonOffset !== undefined ) material.polygonOffset = json.polygonOffset;\\n\\t\\tif ( json.polygonOffsetFactor !== undefined ) material.polygonOffsetFactor = json.polygonOffsetFactor;\\n\\t\\tif ( json.polygonOffsetUnits !== undefined ) material.polygonOffsetUnits = json.polygonOffsetUnits;\\n\\n\\t\\tif ( json.skinning !== undefined ) material.skinning = json.skinning;\\n\\t\\tif ( json.morphTargets !== undefined ) material.morphTargets = json.morphTargets;\\n\\t\\tif ( json.dithering !== undefined ) material.dithering = json.dithering;\\n\\n\\t\\tif ( json.visible !== undefined ) material.visible = json.visible;\\n\\t\\tif ( json.userData !== undefined ) material.userData = json.userData;\\n\\n\\t\\t// Shader Material\\n\\n\\t\\tif ( json.uniforms !== undefined ) {\\n\\n\\t\\t\\tfor ( var name in json.uniforms ) {\\n\\n\\t\\t\\t\\tvar uniform = json.uniforms[ name ];\\n\\n\\t\\t\\t\\tmaterial.uniforms[ name ] = {};\\n\\n\\t\\t\\t\\tswitch ( uniform.type ) {\\n\\n\\t\\t\\t\\t\\tcase 't':\\n\\t\\t\\t\\t\\t\\tmaterial.uniforms[ name ].value = getTexture( uniform.value );\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\tcase 'c':\\n\\t\\t\\t\\t\\t\\tmaterial.uniforms[ name ].value = new Color().setHex( uniform.value );\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\tcase 'v2':\\n\\t\\t\\t\\t\\t\\tmaterial.uniforms[ name ].value = new Vector2().fromArray( uniform.value );\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\tcase 'v3':\\n\\t\\t\\t\\t\\t\\tmaterial.uniforms[ name ].value = new Vector3().fromArray( uniform.value );\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\tcase 'v4':\\n\\t\\t\\t\\t\\t\\tmaterial.uniforms[ name ].value = new Vector4().fromArray( uniform.value );\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\tcase 'm3':\\n\\t\\t\\t\\t\\t\\tmaterial.uniforms[ name ].value = new Matrix3().fromArray( uniform.value );\\n\\n\\t\\t\\t\\t\\tcase 'm4':\\n\\t\\t\\t\\t\\t\\tmaterial.uniforms[ name ].value = new Matrix4().fromArray( uniform.value );\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\t\\tmaterial.uniforms[ name ].value = uniform.value;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tif ( json.defines !== undefined ) material.defines = json.defines;\\n\\t\\tif ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;\\n\\t\\tif ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;\\n\\n\\t\\tif ( json.extensions !== undefined ) {\\n\\n\\t\\t\\tfor ( var key in json.extensions ) {\\n\\n\\t\\t\\t\\tmaterial.extensions[ key ] = json.extensions[ key ];\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\t// Deprecated\\n\\n\\t\\tif ( json.shading !== undefined ) material.flatShading = json.shading === 1; // THREE.FlatShading\\n\\n\\t\\t// for PointsMaterial\\n\\n\\t\\tif ( json.size !== undefined ) material.size = json.size;\\n\\t\\tif ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;\\n\\n\\t\\t// maps\\n\\n\\t\\tif ( json.map !== undefined ) material.map = getTexture( json.map );\\n\\n\\t\\tif ( json.alphaMap !== undefined ) {\\n\\n\\t\\t\\tmaterial.alphaMap = getTexture( json.alphaMap );\\n\\t\\t\\tmaterial.transparent = true;\\n\\n\\t\\t}\\n\\n\\t\\tif ( json.bumpMap !== undefined ) material.bumpMap = getTexture( json.bumpMap );\\n\\t\\tif ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;\\n\\n\\t\\tif ( json.normalMap !== undefined ) material.normalMap = getTexture( json.normalMap );\\n\\t\\tif ( json.normalMapType !== undefined ) material.normalMapType = json.normalMapType;\\n\\t\\tif ( json.normalScale !== undefined ) {\\n\\n\\t\\t\\tvar normalScale = json.normalScale;\\n\\n\\t\\t\\tif ( Array.isArray( normalScale ) === false ) {\\n\\n\\t\\t\\t\\t// Blender exporter used to export a scalar. See #7459\\n\\n\\t\\t\\t\\tnormalScale = [ normalScale, normalScale ];\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tmaterial.normalScale = new Vector2().fromArray( normalScale );\\n\\n\\t\\t}\\n\\n\\t\\tif ( json.displacementMap !== undefined ) material.displacementMap = getTexture( json.displacementMap );\\n\\t\\tif ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;\\n\\t\\tif ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;\\n\\n\\t\\tif ( json.roughnessMap !== undefined ) material.roughnessMap = getTexture( json.roughnessMap );\\n\\t\\tif ( json.metalnessMap !== undefined ) material.metalnessMap = getTexture( json.metalnessMap );\\n\\n\\t\\tif ( json.emissiveMap !== undefined ) material.emissiveMap = getTexture( json.emissiveMap );\\n\\t\\tif ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;\\n\\n\\t\\tif ( json.specularMap !== undefined ) material.specularMap = getTexture( json.specularMap );\\n\\n\\t\\tif ( json.envMap !== undefined ) material.envMap = getTexture( json.envMap );\\n\\t\\tif ( json.envMapIntensity !== undefined ) material.envMapIntensity = json.envMapIntensity;\\n\\n\\t\\tif ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;\\n\\n\\t\\tif ( json.lightMap !== undefined ) material.lightMap = getTexture( json.lightMap );\\n\\t\\tif ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;\\n\\n\\t\\tif ( json.aoMap !== undefined ) material.aoMap = getTexture( json.aoMap );\\n\\t\\tif ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;\\n\\n\\t\\tif ( json.gradientMap !== undefined ) material.gradientMap = getTexture( json.gradientMap );\\n\\n\\t\\treturn material;\\n\\n\\t},\\n\\n\\tsetPath: function ( value ) {\\n\\n\\t\\tthis.path = value;\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetTextures: function ( value ) {\\n\\n\\t\\tthis.textures = value;\\n\\t\\treturn this;\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author Don McCurdy / https://www.donmccurdy.com\\n */\\n\\nvar LoaderUtils = {\\n\\n\\tdecodeText: function ( array ) {\\n\\n\\t\\tif ( typeof TextDecoder !== 'undefined' ) {\\n\\n\\t\\t\\treturn new TextDecoder().decode( array );\\n\\n\\t\\t}\\n\\n\\t\\t// Avoid the String.fromCharCode.apply(null, array) shortcut, which\\n\\t\\t// throws a \\\"maximum call stack size exceeded\\\" error for large arrays.\\n\\n\\t\\tvar s = '';\\n\\n\\t\\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\\n\\n\\t\\t\\t// Implicitly assumes little-endian.\\n\\t\\t\\ts += String.fromCharCode( array[ i ] );\\n\\n\\t\\t}\\n\\n\\t\\t// Merges multi-byte utf-8 characters.\\n\\t\\treturn decodeURIComponent( escape( s ) );\\n\\n\\t},\\n\\n\\textractUrlBase: function ( url ) {\\n\\n\\t\\tvar index = url.lastIndexOf( '/' );\\n\\n\\t\\tif ( index === - 1 ) return './';\\n\\n\\t\\treturn url.substr( 0, index + 1 );\\n\\n\\t}\\n\\n};\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\nfunction BufferGeometryLoader( manager ) {\\n\\n\\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\\n\\n}\\n\\nObject.assign( BufferGeometryLoader.prototype, {\\n\\n\\tload: function ( url, onLoad, onProgress, onError ) {\\n\\n\\t\\tvar scope = this;\\n\\n\\t\\tvar loader = new FileLoader( scope.manager );\\n\\t\\tloader.setPath( scope.path );\\n\\t\\tloader.load( url, function ( text ) {\\n\\n\\t\\t\\tonLoad( scope.parse( JSON.parse( text ) ) );\\n\\n\\t\\t}, onProgress, onError );\\n\\n\\t},\\n\\n\\tparse: function ( json ) {\\n\\n\\t\\tvar geometry = new BufferGeometry();\\n\\n\\t\\tvar index = json.data.index;\\n\\n\\t\\tif ( index !== undefined ) {\\n\\n\\t\\t\\tvar typedArray = new TYPED_ARRAYS[ index.type ]( index.array );\\n\\t\\t\\tgeometry.setIndex( new BufferAttribute( typedArray, 1 ) );\\n\\n\\t\\t}\\n\\n\\t\\tvar attributes = json.data.attributes;\\n\\n\\t\\tfor ( var key in attributes ) {\\n\\n\\t\\t\\tvar attribute = attributes[ key ];\\n\\t\\t\\tvar typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );\\n\\n\\t\\t\\tgeometry.addAttribute( key, new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized ) );\\n\\n\\t\\t}\\n\\n\\t\\tvar groups = json.data.groups || json.data.drawcalls || json.data.offsets;\\n\\n\\t\\tif ( groups !== undefined ) {\\n\\n\\t\\t\\tfor ( var i = 0, n = groups.length; i !== n; ++ i ) {\\n\\n\\t\\t\\t\\tvar group = groups[ i ];\\n\\n\\t\\t\\t\\tgeometry.addGroup( group.start, group.count, group.materialIndex );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tvar boundingSphere = json.data.boundingSphere;\\n\\n\\t\\tif ( boundingSphere !== undefined ) {\\n\\n\\t\\t\\tvar center = new Vector3();\\n\\n\\t\\t\\tif ( boundingSphere.center !== undefined ) {\\n\\n\\t\\t\\t\\tcenter.fromArray( boundingSphere.center );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tgeometry.boundingSphere = new Sphere( center, boundingSphere.radius );\\n\\n\\t\\t}\\n\\n\\t\\tif ( json.name ) geometry.name = json.name;\\n\\t\\tif ( json.userData ) geometry.userData = json.userData;\\n\\n\\t\\treturn geometry;\\n\\n\\t},\\n\\n\\tsetPath: function ( value ) {\\n\\n\\t\\tthis.path = value;\\n\\t\\treturn this;\\n\\n\\t}\\n\\n} );\\n\\nvar TYPED_ARRAYS = {\\n\\tInt8Array: Int8Array,\\n\\tUint8Array: Uint8Array,\\n\\t// Workaround for IE11 pre KB2929437. See #11440\\n\\tUint8ClampedArray: typeof Uint8ClampedArray !== 'undefined' ? Uint8ClampedArray : Uint8Array,\\n\\tInt16Array: Int16Array,\\n\\tUint16Array: Uint16Array,\\n\\tInt32Array: Int32Array,\\n\\tUint32Array: Uint32Array,\\n\\tFloat32Array: Float32Array,\\n\\tFloat64Array: Float64Array\\n};\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\nfunction ObjectLoader( manager ) {\\n\\n\\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\\n\\tthis.resourcePath = '';\\n\\n}\\n\\nObject.assign( ObjectLoader.prototype, {\\n\\n\\tcrossOrigin: 'anonymous',\\n\\n\\tload: function ( url, onLoad, onProgress, onError ) {\\n\\n\\t\\tvar scope = this;\\n\\n\\t\\tvar path = ( this.path === undefined ) ? LoaderUtils.extractUrlBase( url ) : this.path;\\n\\t\\tthis.resourcePath = this.resourcePath || path;\\n\\n\\t\\tvar loader = new FileLoader( scope.manager );\\n\\t\\tloader.setPath( this.path );\\n\\t\\tloader.load( url, function ( text ) {\\n\\n\\t\\t\\tvar json = null;\\n\\n\\t\\t\\ttry {\\n\\n\\t\\t\\t\\tjson = JSON.parse( text );\\n\\n\\t\\t\\t} catch ( error ) {\\n\\n\\t\\t\\t\\tif ( onError !== undefined ) onError( error );\\n\\n\\t\\t\\t\\tconsole.error( 'THREE:ObjectLoader: Can\\\\'t parse ' + url + '.', error.message );\\n\\n\\t\\t\\t\\treturn;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tvar metadata = json.metadata;\\n\\n\\t\\t\\tif ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {\\n\\n\\t\\t\\t\\tconsole.error( 'THREE.ObjectLoader: Can\\\\'t load ' + url );\\n\\t\\t\\t\\treturn;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tscope.parse( json, onLoad );\\n\\n\\t\\t}, onProgress, onError );\\n\\n\\t},\\n\\n\\tsetPath: function ( value ) {\\n\\n\\t\\tthis.path = value;\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetResourcePath: function ( value ) {\\n\\n\\t\\tthis.resourcePath = value;\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetCrossOrigin: function ( value ) {\\n\\n\\t\\tthis.crossOrigin = value;\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tparse: function ( json, onLoad ) {\\n\\n\\t\\tvar shapes = this.parseShape( json.shapes );\\n\\t\\tvar geometries = this.parseGeometries( json.geometries, shapes );\\n\\n\\t\\tvar images = this.parseImages( json.images, function () {\\n\\n\\t\\t\\tif ( onLoad !== undefined ) onLoad( object );\\n\\n\\t\\t} );\\n\\n\\t\\tvar textures = this.parseTextures( json.textures, images );\\n\\t\\tvar materials = this.parseMaterials( json.materials, textures );\\n\\n\\t\\tvar object = this.parseObject( json.object, geometries, materials );\\n\\n\\t\\tif ( json.animations ) {\\n\\n\\t\\t\\tobject.animations = this.parseAnimations( json.animations );\\n\\n\\t\\t}\\n\\n\\t\\tif ( json.images === undefined || json.images.length === 0 ) {\\n\\n\\t\\t\\tif ( onLoad !== undefined ) onLoad( object );\\n\\n\\t\\t}\\n\\n\\t\\treturn object;\\n\\n\\t},\\n\\n\\tparseShape: function ( json ) {\\n\\n\\t\\tvar shapes = {};\\n\\n\\t\\tif ( json !== undefined ) {\\n\\n\\t\\t\\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\\n\\n\\t\\t\\t\\tvar shape = new Shape().fromJSON( json[ i ] );\\n\\n\\t\\t\\t\\tshapes[ shape.uuid ] = shape;\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\treturn shapes;\\n\\n\\t},\\n\\n\\tparseGeometries: function ( json, shapes ) {\\n\\n\\t\\tvar geometries = {};\\n\\n\\t\\tif ( json !== undefined ) {\\n\\n\\t\\t\\tvar bufferGeometryLoader = new BufferGeometryLoader();\\n\\n\\t\\t\\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\\n\\n\\t\\t\\t\\tvar geometry;\\n\\t\\t\\t\\tvar data = json[ i ];\\n\\n\\t\\t\\t\\tswitch ( data.type ) {\\n\\n\\t\\t\\t\\t\\tcase 'PlaneGeometry':\\n\\t\\t\\t\\t\\tcase 'PlaneBufferGeometry':\\n\\n\\t\\t\\t\\t\\t\\tgeometry = new Geometries[ data.type ](\\n\\t\\t\\t\\t\\t\\t\\tdata.width,\\n\\t\\t\\t\\t\\t\\t\\tdata.height,\\n\\t\\t\\t\\t\\t\\t\\tdata.widthSegments,\\n\\t\\t\\t\\t\\t\\t\\tdata.heightSegments\\n\\t\\t\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\tcase 'BoxGeometry':\\n\\t\\t\\t\\t\\tcase 'BoxBufferGeometry':\\n\\t\\t\\t\\t\\tcase 'CubeGeometry': // backwards compatible\\n\\n\\t\\t\\t\\t\\t\\tgeometry = new Geometries[ data.type ](\\n\\t\\t\\t\\t\\t\\t\\tdata.width,\\n\\t\\t\\t\\t\\t\\t\\tdata.height,\\n\\t\\t\\t\\t\\t\\t\\tdata.depth,\\n\\t\\t\\t\\t\\t\\t\\tdata.widthSegments,\\n\\t\\t\\t\\t\\t\\t\\tdata.heightSegments,\\n\\t\\t\\t\\t\\t\\t\\tdata.depthSegments\\n\\t\\t\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\tcase 'CircleGeometry':\\n\\t\\t\\t\\t\\tcase 'CircleBufferGeometry':\\n\\n\\t\\t\\t\\t\\t\\tgeometry = new Geometries[ data.type ](\\n\\t\\t\\t\\t\\t\\t\\tdata.radius,\\n\\t\\t\\t\\t\\t\\t\\tdata.segments,\\n\\t\\t\\t\\t\\t\\t\\tdata.thetaStart,\\n\\t\\t\\t\\t\\t\\t\\tdata.thetaLength\\n\\t\\t\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\tcase 'CylinderGeometry':\\n\\t\\t\\t\\t\\tcase 'CylinderBufferGeometry':\\n\\n\\t\\t\\t\\t\\t\\tgeometry = new Geometries[ data.type ](\\n\\t\\t\\t\\t\\t\\t\\tdata.radiusTop,\\n\\t\\t\\t\\t\\t\\t\\tdata.radiusBottom,\\n\\t\\t\\t\\t\\t\\t\\tdata.height,\\n\\t\\t\\t\\t\\t\\t\\tdata.radialSegments,\\n\\t\\t\\t\\t\\t\\t\\tdata.heightSegments,\\n\\t\\t\\t\\t\\t\\t\\tdata.openEnded,\\n\\t\\t\\t\\t\\t\\t\\tdata.thetaStart,\\n\\t\\t\\t\\t\\t\\t\\tdata.thetaLength\\n\\t\\t\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\tcase 'ConeGeometry':\\n\\t\\t\\t\\t\\tcase 'ConeBufferGeometry':\\n\\n\\t\\t\\t\\t\\t\\tgeometry = new Geometries[ data.type ](\\n\\t\\t\\t\\t\\t\\t\\tdata.radius,\\n\\t\\t\\t\\t\\t\\t\\tdata.height,\\n\\t\\t\\t\\t\\t\\t\\tdata.radialSegments,\\n\\t\\t\\t\\t\\t\\t\\tdata.heightSegments,\\n\\t\\t\\t\\t\\t\\t\\tdata.openEnded,\\n\\t\\t\\t\\t\\t\\t\\tdata.thetaStart,\\n\\t\\t\\t\\t\\t\\t\\tdata.thetaLength\\n\\t\\t\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\tcase 'SphereGeometry':\\n\\t\\t\\t\\t\\tcase 'SphereBufferGeometry':\\n\\n\\t\\t\\t\\t\\t\\tgeometry = new Geometries[ data.type ](\\n\\t\\t\\t\\t\\t\\t\\tdata.radius,\\n\\t\\t\\t\\t\\t\\t\\tdata.widthSegments,\\n\\t\\t\\t\\t\\t\\t\\tdata.heightSegments,\\n\\t\\t\\t\\t\\t\\t\\tdata.phiStart,\\n\\t\\t\\t\\t\\t\\t\\tdata.phiLength,\\n\\t\\t\\t\\t\\t\\t\\tdata.thetaStart,\\n\\t\\t\\t\\t\\t\\t\\tdata.thetaLength\\n\\t\\t\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\tcase 'DodecahedronGeometry':\\n\\t\\t\\t\\t\\tcase 'DodecahedronBufferGeometry':\\n\\t\\t\\t\\t\\tcase 'IcosahedronGeometry':\\n\\t\\t\\t\\t\\tcase 'IcosahedronBufferGeometry':\\n\\t\\t\\t\\t\\tcase 'OctahedronGeometry':\\n\\t\\t\\t\\t\\tcase 'OctahedronBufferGeometry':\\n\\t\\t\\t\\t\\tcase 'TetrahedronGeometry':\\n\\t\\t\\t\\t\\tcase 'TetrahedronBufferGeometry':\\n\\n\\t\\t\\t\\t\\t\\tgeometry = new Geometries[ data.type ](\\n\\t\\t\\t\\t\\t\\t\\tdata.radius,\\n\\t\\t\\t\\t\\t\\t\\tdata.detail\\n\\t\\t\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\tcase 'RingGeometry':\\n\\t\\t\\t\\t\\tcase 'RingBufferGeometry':\\n\\n\\t\\t\\t\\t\\t\\tgeometry = new Geometries[ data.type ](\\n\\t\\t\\t\\t\\t\\t\\tdata.innerRadius,\\n\\t\\t\\t\\t\\t\\t\\tdata.outerRadius,\\n\\t\\t\\t\\t\\t\\t\\tdata.thetaSegments,\\n\\t\\t\\t\\t\\t\\t\\tdata.phiSegments,\\n\\t\\t\\t\\t\\t\\t\\tdata.thetaStart,\\n\\t\\t\\t\\t\\t\\t\\tdata.thetaLength\\n\\t\\t\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\tcase 'TorusGeometry':\\n\\t\\t\\t\\t\\tcase 'TorusBufferGeometry':\\n\\n\\t\\t\\t\\t\\t\\tgeometry = new Geometries[ data.type ](\\n\\t\\t\\t\\t\\t\\t\\tdata.radius,\\n\\t\\t\\t\\t\\t\\t\\tdata.tube,\\n\\t\\t\\t\\t\\t\\t\\tdata.radialSegments,\\n\\t\\t\\t\\t\\t\\t\\tdata.tubularSegments,\\n\\t\\t\\t\\t\\t\\t\\tdata.arc\\n\\t\\t\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\tcase 'TorusKnotGeometry':\\n\\t\\t\\t\\t\\tcase 'TorusKnotBufferGeometry':\\n\\n\\t\\t\\t\\t\\t\\tgeometry = new Geometries[ data.type ](\\n\\t\\t\\t\\t\\t\\t\\tdata.radius,\\n\\t\\t\\t\\t\\t\\t\\tdata.tube,\\n\\t\\t\\t\\t\\t\\t\\tdata.tubularSegments,\\n\\t\\t\\t\\t\\t\\t\\tdata.radialSegments,\\n\\t\\t\\t\\t\\t\\t\\tdata.p,\\n\\t\\t\\t\\t\\t\\t\\tdata.q\\n\\t\\t\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\tcase 'LatheGeometry':\\n\\t\\t\\t\\t\\tcase 'LatheBufferGeometry':\\n\\n\\t\\t\\t\\t\\t\\tgeometry = new Geometries[ data.type ](\\n\\t\\t\\t\\t\\t\\t\\tdata.points,\\n\\t\\t\\t\\t\\t\\t\\tdata.segments,\\n\\t\\t\\t\\t\\t\\t\\tdata.phiStart,\\n\\t\\t\\t\\t\\t\\t\\tdata.phiLength\\n\\t\\t\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\tcase 'PolyhedronGeometry':\\n\\t\\t\\t\\t\\tcase 'PolyhedronBufferGeometry':\\n\\n\\t\\t\\t\\t\\t\\tgeometry = new Geometries[ data.type ](\\n\\t\\t\\t\\t\\t\\t\\tdata.vertices,\\n\\t\\t\\t\\t\\t\\t\\tdata.indices,\\n\\t\\t\\t\\t\\t\\t\\tdata.radius,\\n\\t\\t\\t\\t\\t\\t\\tdata.details\\n\\t\\t\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\tcase 'ShapeGeometry':\\n\\t\\t\\t\\t\\tcase 'ShapeBufferGeometry':\\n\\n\\t\\t\\t\\t\\t\\tvar geometryShapes = [];\\n\\n\\t\\t\\t\\t\\t\\tfor ( var j = 0, jl = data.shapes.length; j < jl; j ++ ) {\\n\\n\\t\\t\\t\\t\\t\\t\\tvar shape = shapes[ data.shapes[ j ] ];\\n\\n\\t\\t\\t\\t\\t\\t\\tgeometryShapes.push( shape );\\n\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\tgeometry = new Geometries[ data.type ](\\n\\t\\t\\t\\t\\t\\t\\tgeometryShapes,\\n\\t\\t\\t\\t\\t\\t\\tdata.curveSegments\\n\\t\\t\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\n\\t\\t\\t\\t\\tcase 'ExtrudeGeometry':\\n\\t\\t\\t\\t\\tcase 'ExtrudeBufferGeometry':\\n\\n\\t\\t\\t\\t\\t\\tvar geometryShapes = [];\\n\\n\\t\\t\\t\\t\\t\\tfor ( var j = 0, jl = data.shapes.length; j < jl; j ++ ) {\\n\\n\\t\\t\\t\\t\\t\\t\\tvar shape = shapes[ data.shapes[ j ] ];\\n\\n\\t\\t\\t\\t\\t\\t\\tgeometryShapes.push( shape );\\n\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\tvar extrudePath = data.options.extrudePath;\\n\\n\\t\\t\\t\\t\\t\\tif ( extrudePath !== undefined ) {\\n\\n\\t\\t\\t\\t\\t\\t\\tdata.options.extrudePath = new Curves[ extrudePath.type ]().fromJSON( extrudePath );\\n\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\tgeometry = new Geometries[ data.type ](\\n\\t\\t\\t\\t\\t\\t\\tgeometryShapes,\\n\\t\\t\\t\\t\\t\\t\\tdata.options\\n\\t\\t\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\tcase 'BufferGeometry':\\n\\n\\t\\t\\t\\t\\t\\tgeometry = bufferGeometryLoader.parse( data );\\n\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\tcase 'Geometry':\\n\\n\\t\\t\\t\\t\\t\\tif ( 'THREE' in window && 'LegacyJSONLoader' in THREE ) {\\n\\n\\t\\t\\t\\t\\t\\t\\tvar geometryLoader = new THREE.LegacyJSONLoader();\\n\\t\\t\\t\\t\\t\\t\\tgeometry = geometryLoader.parse( data, this.resourcePath ).geometry;\\n\\n\\n\\t\\t\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\t\\t\\tconsole.error( 'THREE.ObjectLoader: You have to import LegacyJSONLoader in order load geometry data of type \\\"Geometry\\\".' );\\n\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\tdefault:\\n\\n\\t\\t\\t\\t\\t\\tconsole.warn( 'THREE.ObjectLoader: Unsupported geometry type \\\"' + data.type + '\\\"' );\\n\\n\\t\\t\\t\\t\\t\\tcontinue;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tgeometry.uuid = data.uuid;\\n\\n\\t\\t\\t\\tif ( data.name !== undefined ) geometry.name = data.name;\\n\\t\\t\\t\\tif ( geometry.isBufferGeometry === true && data.userData !== undefined ) geometry.userData = data.userData;\\n\\n\\t\\t\\t\\tgeometries[ data.uuid ] = geometry;\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\treturn geometries;\\n\\n\\t},\\n\\n\\tparseMaterials: function ( json, textures ) {\\n\\n\\t\\tvar cache = {}; // MultiMaterial\\n\\t\\tvar materials = {};\\n\\n\\t\\tif ( json !== undefined ) {\\n\\n\\t\\t\\tvar loader = new MaterialLoader();\\n\\t\\t\\tloader.setTextures( textures );\\n\\n\\t\\t\\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\\n\\n\\t\\t\\t\\tvar data = json[ i ];\\n\\n\\t\\t\\t\\tif ( data.type === 'MultiMaterial' ) {\\n\\n\\t\\t\\t\\t\\t// Deprecated\\n\\n\\t\\t\\t\\t\\tvar array = [];\\n\\n\\t\\t\\t\\t\\tfor ( var j = 0; j < data.materials.length; j ++ ) {\\n\\n\\t\\t\\t\\t\\t\\tvar material = data.materials[ j ];\\n\\n\\t\\t\\t\\t\\t\\tif ( cache[ material.uuid ] === undefined ) {\\n\\n\\t\\t\\t\\t\\t\\t\\tcache[ material.uuid ] = loader.parse( material );\\n\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\tarray.push( cache[ material.uuid ] );\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tmaterials[ data.uuid ] = array;\\n\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\tif ( cache[ data.uuid ] === undefined ) {\\n\\n\\t\\t\\t\\t\\t\\tcache[ data.uuid ] = loader.parse( data );\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tmaterials[ data.uuid ] = cache[ data.uuid ];\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\treturn materials;\\n\\n\\t},\\n\\n\\tparseAnimations: function ( json ) {\\n\\n\\t\\tvar animations = [];\\n\\n\\t\\tfor ( var i = 0; i < json.length; i ++ ) {\\n\\n\\t\\t\\tvar data = json[ i ];\\n\\n\\t\\t\\tvar clip = AnimationClip.parse( data );\\n\\n\\t\\t\\tif ( data.uuid !== undefined ) clip.uuid = data.uuid;\\n\\n\\t\\t\\tanimations.push( clip );\\n\\n\\t\\t}\\n\\n\\t\\treturn animations;\\n\\n\\t},\\n\\n\\tparseImages: function ( json, onLoad ) {\\n\\n\\t\\tvar scope = this;\\n\\t\\tvar images = {};\\n\\n\\t\\tfunction loadImage( url ) {\\n\\n\\t\\t\\tscope.manager.itemStart( url );\\n\\n\\t\\t\\treturn loader.load( url, function () {\\n\\n\\t\\t\\t\\tscope.manager.itemEnd( url );\\n\\n\\t\\t\\t}, undefined, function () {\\n\\n\\t\\t\\t\\tscope.manager.itemError( url );\\n\\t\\t\\t\\tscope.manager.itemEnd( url );\\n\\n\\t\\t\\t} );\\n\\n\\t\\t}\\n\\n\\t\\tif ( json !== undefined && json.length > 0 ) {\\n\\n\\t\\t\\tvar manager = new LoadingManager( onLoad );\\n\\n\\t\\t\\tvar loader = new ImageLoader( manager );\\n\\t\\t\\tloader.setCrossOrigin( this.crossOrigin );\\n\\n\\t\\t\\tfor ( var i = 0, il = json.length; i < il; i ++ ) {\\n\\n\\t\\t\\t\\tvar image = json[ i ];\\n\\t\\t\\t\\tvar url = image.url;\\n\\n\\t\\t\\t\\tif ( Array.isArray( url ) ) {\\n\\n\\t\\t\\t\\t\\t// load array of images e.g CubeTexture\\n\\n\\t\\t\\t\\t\\timages[ image.uuid ] = [];\\n\\n\\t\\t\\t\\t\\tfor ( var j = 0, jl = url.length; j < jl; j ++ ) {\\n\\n\\t\\t\\t\\t\\t\\tvar currentUrl = url[ j ];\\n\\n\\t\\t\\t\\t\\t\\tvar path = /^(\\\\/\\\\/)|([a-z]+:(\\\\/\\\\/)?)/i.test( currentUrl ) ? currentUrl : scope.resourcePath + currentUrl;\\n\\n\\t\\t\\t\\t\\t\\timages[ image.uuid ].push( loadImage( path ) );\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\t// load single image\\n\\n\\t\\t\\t\\t\\tvar path = /^(\\\\/\\\\/)|([a-z]+:(\\\\/\\\\/)?)/i.test( image.url ) ? image.url : scope.resourcePath + image.url;\\n\\n\\t\\t\\t\\t\\timages[ image.uuid ] = loadImage( path );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\treturn images;\\n\\n\\t},\\n\\n\\tparseTextures: function ( json, images ) {\\n\\n\\t\\tfunction parseConstant( value, type ) {\\n\\n\\t\\t\\tif ( typeof value === 'number' ) return value;\\n\\n\\t\\t\\tconsole.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );\\n\\n\\t\\t\\treturn type[ value ];\\n\\n\\t\\t}\\n\\n\\t\\tvar textures = {};\\n\\n\\t\\tif ( json !== undefined ) {\\n\\n\\t\\t\\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\\n\\n\\t\\t\\t\\tvar data = json[ i ];\\n\\n\\t\\t\\t\\tif ( data.image === undefined ) {\\n\\n\\t\\t\\t\\t\\tconsole.warn( 'THREE.ObjectLoader: No \\\"image\\\" specified for', data.uuid );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif ( images[ data.image ] === undefined ) {\\n\\n\\t\\t\\t\\t\\tconsole.warn( 'THREE.ObjectLoader: Undefined image', data.image );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tvar texture;\\n\\n\\t\\t\\t\\tif ( Array.isArray( images[ data.image ] ) ) {\\n\\n\\t\\t\\t\\t\\ttexture = new CubeTexture( images[ data.image ] );\\n\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\ttexture = new Texture( images[ data.image ] );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\ttexture.needsUpdate = true;\\n\\n\\t\\t\\t\\ttexture.uuid = data.uuid;\\n\\n\\t\\t\\t\\tif ( data.name !== undefined ) texture.name = data.name;\\n\\n\\t\\t\\t\\tif ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping, TEXTURE_MAPPING );\\n\\n\\t\\t\\t\\tif ( data.offset !== undefined ) texture.offset.fromArray( data.offset );\\n\\t\\t\\t\\tif ( data.repeat !== undefined ) texture.repeat.fromArray( data.repeat );\\n\\t\\t\\t\\tif ( data.center !== undefined ) texture.center.fromArray( data.center );\\n\\t\\t\\t\\tif ( data.rotation !== undefined ) texture.rotation = data.rotation;\\n\\n\\t\\t\\t\\tif ( data.wrap !== undefined ) {\\n\\n\\t\\t\\t\\t\\ttexture.wrapS = parseConstant( data.wrap[ 0 ], TEXTURE_WRAPPING );\\n\\t\\t\\t\\t\\ttexture.wrapT = parseConstant( data.wrap[ 1 ], TEXTURE_WRAPPING );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif ( data.format !== undefined ) texture.format = data.format;\\n\\t\\t\\t\\tif ( data.type !== undefined ) texture.type = data.type;\\n\\t\\t\\t\\tif ( data.encoding !== undefined ) texture.encoding = data.encoding;\\n\\n\\t\\t\\t\\tif ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter, TEXTURE_FILTER );\\n\\t\\t\\t\\tif ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter, TEXTURE_FILTER );\\n\\t\\t\\t\\tif ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;\\n\\n\\t\\t\\t\\tif ( data.flipY !== undefined ) texture.flipY = data.flipY;\\n\\n\\t\\t\\t\\tif ( data.premultiplyAlpha !== undefined ) texture.premultiplyAlpha = data.premultiplyAlpha;\\n\\t\\t\\t\\tif ( data.unpackAlignment !== undefined ) texture.unpackAlignment = data.unpackAlignment;\\n\\n\\t\\t\\t\\ttextures[ data.uuid ] = texture;\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\treturn textures;\\n\\n\\t},\\n\\n\\tparseObject: function ( data, geometries, materials ) {\\n\\n\\t\\tvar object;\\n\\n\\t\\tfunction getGeometry( name ) {\\n\\n\\t\\t\\tif ( geometries[ name ] === undefined ) {\\n\\n\\t\\t\\t\\tconsole.warn( 'THREE.ObjectLoader: Undefined geometry', name );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn geometries[ name ];\\n\\n\\t\\t}\\n\\n\\t\\tfunction getMaterial( name ) {\\n\\n\\t\\t\\tif ( name === undefined ) return undefined;\\n\\n\\t\\t\\tif ( Array.isArray( name ) ) {\\n\\n\\t\\t\\t\\tvar array = [];\\n\\n\\t\\t\\t\\tfor ( var i = 0, l = name.length; i < l; i ++ ) {\\n\\n\\t\\t\\t\\t\\tvar uuid = name[ i ];\\n\\n\\t\\t\\t\\t\\tif ( materials[ uuid ] === undefined ) {\\n\\n\\t\\t\\t\\t\\t\\tconsole.warn( 'THREE.ObjectLoader: Undefined material', uuid );\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tarray.push( materials[ uuid ] );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\treturn array;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( materials[ name ] === undefined ) {\\n\\n\\t\\t\\t\\tconsole.warn( 'THREE.ObjectLoader: Undefined material', name );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn materials[ name ];\\n\\n\\t\\t}\\n\\n\\t\\tswitch ( data.type ) {\\n\\n\\t\\t\\tcase 'Scene':\\n\\n\\t\\t\\t\\tobject = new Scene();\\n\\n\\t\\t\\t\\tif ( data.background !== undefined ) {\\n\\n\\t\\t\\t\\t\\tif ( Number.isInteger( data.background ) ) {\\n\\n\\t\\t\\t\\t\\t\\tobject.background = new Color( data.background );\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif ( data.fog !== undefined ) {\\n\\n\\t\\t\\t\\t\\tif ( data.fog.type === 'Fog' ) {\\n\\n\\t\\t\\t\\t\\t\\tobject.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );\\n\\n\\t\\t\\t\\t\\t} else if ( data.fog.type === 'FogExp2' ) {\\n\\n\\t\\t\\t\\t\\t\\tobject.fog = new FogExp2( data.fog.color, data.fog.density );\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 'PerspectiveCamera':\\n\\n\\t\\t\\t\\tobject = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );\\n\\n\\t\\t\\t\\tif ( data.focus !== undefined ) object.focus = data.focus;\\n\\t\\t\\t\\tif ( data.zoom !== undefined ) object.zoom = data.zoom;\\n\\t\\t\\t\\tif ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;\\n\\t\\t\\t\\tif ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;\\n\\t\\t\\t\\tif ( data.view !== undefined ) object.view = Object.assign( {}, data.view );\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 'OrthographicCamera':\\n\\n\\t\\t\\t\\tobject = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\\n\\n\\t\\t\\t\\tif ( data.zoom !== undefined ) object.zoom = data.zoom;\\n\\t\\t\\t\\tif ( data.view !== undefined ) object.view = Object.assign( {}, data.view );\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 'AmbientLight':\\n\\n\\t\\t\\t\\tobject = new AmbientLight( data.color, data.intensity );\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 'DirectionalLight':\\n\\n\\t\\t\\t\\tobject = new DirectionalLight( data.color, data.intensity );\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 'PointLight':\\n\\n\\t\\t\\t\\tobject = new PointLight( data.color, data.intensity, data.distance, data.decay );\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 'RectAreaLight':\\n\\n\\t\\t\\t\\tobject = new RectAreaLight( data.color, data.intensity, data.width, data.height );\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 'SpotLight':\\n\\n\\t\\t\\t\\tobject = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 'HemisphereLight':\\n\\n\\t\\t\\t\\tobject = new HemisphereLight( data.color, data.groundColor, data.intensity );\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 'SkinnedMesh':\\n\\n\\t\\t\\t\\tconsole.warn( 'THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.' );\\n\\n\\t\\t\\tcase 'Mesh':\\n\\n\\t\\t\\t\\tvar geometry = getGeometry( data.geometry );\\n\\t\\t\\t\\tvar material = getMaterial( data.material );\\n\\n\\t\\t\\t\\tif ( geometry.bones && geometry.bones.length > 0 ) {\\n\\n\\t\\t\\t\\t\\tobject = new SkinnedMesh( geometry, material );\\n\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\tobject = new Mesh( geometry, material );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif ( data.drawMode !== undefined ) object.setDrawMode( data.drawMode );\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 'LOD':\\n\\n\\t\\t\\t\\tobject = new LOD();\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 'Line':\\n\\n\\t\\t\\t\\tobject = new Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 'LineLoop':\\n\\n\\t\\t\\t\\tobject = new LineLoop( getGeometry( data.geometry ), getMaterial( data.material ) );\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 'LineSegments':\\n\\n\\t\\t\\t\\tobject = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 'PointCloud':\\n\\t\\t\\tcase 'Points':\\n\\n\\t\\t\\t\\tobject = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 'Sprite':\\n\\n\\t\\t\\t\\tobject = new Sprite( getMaterial( data.material ) );\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 'Group':\\n\\n\\t\\t\\t\\tobject = new Group();\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\n\\t\\t\\t\\tobject = new Object3D();\\n\\n\\t\\t}\\n\\n\\t\\tobject.uuid = data.uuid;\\n\\n\\t\\tif ( data.name !== undefined ) object.name = data.name;\\n\\n\\t\\tif ( data.matrix !== undefined ) {\\n\\n\\t\\t\\tobject.matrix.fromArray( data.matrix );\\n\\n\\t\\t\\tif ( data.matrixAutoUpdate !== undefined ) object.matrixAutoUpdate = data.matrixAutoUpdate;\\n\\t\\t\\tif ( object.matrixAutoUpdate ) object.matrix.decompose( object.position, object.quaternion, object.scale );\\n\\n\\t\\t} else {\\n\\n\\t\\t\\tif ( data.position !== undefined ) object.position.fromArray( data.position );\\n\\t\\t\\tif ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );\\n\\t\\t\\tif ( data.quaternion !== undefined ) object.quaternion.fromArray( data.quaternion );\\n\\t\\t\\tif ( data.scale !== undefined ) object.scale.fromArray( data.scale );\\n\\n\\t\\t}\\n\\n\\t\\tif ( data.castShadow !== undefined ) object.castShadow = data.castShadow;\\n\\t\\tif ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;\\n\\n\\t\\tif ( data.shadow ) {\\n\\n\\t\\t\\tif ( data.shadow.bias !== undefined ) object.shadow.bias = data.shadow.bias;\\n\\t\\t\\tif ( data.shadow.radius !== undefined ) object.shadow.radius = data.shadow.radius;\\n\\t\\t\\tif ( data.shadow.mapSize !== undefined ) object.shadow.mapSize.fromArray( data.shadow.mapSize );\\n\\t\\t\\tif ( data.shadow.camera !== undefined ) object.shadow.camera = this.parseObject( data.shadow.camera );\\n\\n\\t\\t}\\n\\n\\t\\tif ( data.visible !== undefined ) object.visible = data.visible;\\n\\t\\tif ( data.frustumCulled !== undefined ) object.frustumCulled = data.frustumCulled;\\n\\t\\tif ( data.renderOrder !== undefined ) object.renderOrder = data.renderOrder;\\n\\t\\tif ( data.userData !== undefined ) object.userData = data.userData;\\n\\t\\tif ( data.layers !== undefined ) object.layers.mask = data.layers;\\n\\n\\t\\tif ( data.children !== undefined ) {\\n\\n\\t\\t\\tvar children = data.children;\\n\\n\\t\\t\\tfor ( var i = 0; i < children.length; i ++ ) {\\n\\n\\t\\t\\t\\tobject.add( this.parseObject( children[ i ], geometries, materials ) );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tif ( data.type === 'LOD' ) {\\n\\n\\t\\t\\tvar levels = data.levels;\\n\\n\\t\\t\\tfor ( var l = 0; l < levels.length; l ++ ) {\\n\\n\\t\\t\\t\\tvar level = levels[ l ];\\n\\t\\t\\t\\tvar child = object.getObjectByProperty( 'uuid', level.object );\\n\\n\\t\\t\\t\\tif ( child !== undefined ) {\\n\\n\\t\\t\\t\\t\\tobject.addLevel( child, level.distance );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\treturn object;\\n\\n\\t}\\n\\n} );\\n\\nvar TEXTURE_MAPPING = {\\n\\tUVMapping: UVMapping,\\n\\tCubeReflectionMapping: CubeReflectionMapping,\\n\\tCubeRefractionMapping: CubeRefractionMapping,\\n\\tEquirectangularReflectionMapping: EquirectangularReflectionMapping,\\n\\tEquirectangularRefractionMapping: EquirectangularRefractionMapping,\\n\\tSphericalReflectionMapping: SphericalReflectionMapping,\\n\\tCubeUVReflectionMapping: CubeUVReflectionMapping,\\n\\tCubeUVRefractionMapping: CubeUVRefractionMapping\\n};\\n\\nvar TEXTURE_WRAPPING = {\\n\\tRepeatWrapping: RepeatWrapping,\\n\\tClampToEdgeWrapping: ClampToEdgeWrapping,\\n\\tMirroredRepeatWrapping: MirroredRepeatWrapping\\n};\\n\\nvar TEXTURE_FILTER = {\\n\\tNearestFilter: NearestFilter,\\n\\tNearestMipMapNearestFilter: NearestMipMapNearestFilter,\\n\\tNearestMipMapLinearFilter: NearestMipMapLinearFilter,\\n\\tLinearFilter: LinearFilter,\\n\\tLinearMipMapNearestFilter: LinearMipMapNearestFilter,\\n\\tLinearMipMapLinearFilter: LinearMipMapLinearFilter\\n};\\n\\n/**\\n * @author thespite / http://clicktorelease.com/\\n */\\n\\n\\nfunction ImageBitmapLoader( manager ) {\\n\\n\\tif ( typeof createImageBitmap === 'undefined' ) {\\n\\n\\t\\tconsole.warn( 'THREE.ImageBitmapLoader: createImageBitmap() not supported.' );\\n\\n\\t}\\n\\n\\tif ( typeof fetch === 'undefined' ) {\\n\\n\\t\\tconsole.warn( 'THREE.ImageBitmapLoader: fetch() not supported.' );\\n\\n\\t}\\n\\n\\tthis.manager = manager !== undefined ? manager : DefaultLoadingManager;\\n\\tthis.options = undefined;\\n\\n}\\n\\nImageBitmapLoader.prototype = {\\n\\n\\tconstructor: ImageBitmapLoader,\\n\\n\\tsetOptions: function setOptions( options ) {\\n\\n\\t\\tthis.options = options;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tload: function ( url, onLoad, onProgress, onError ) {\\n\\n\\t\\tif ( url === undefined ) url = '';\\n\\n\\t\\tif ( this.path !== undefined ) url = this.path + url;\\n\\n\\t\\turl = this.manager.resolveURL( url );\\n\\n\\t\\tvar scope = this;\\n\\n\\t\\tvar cached = Cache.get( url );\\n\\n\\t\\tif ( cached !== undefined ) {\\n\\n\\t\\t\\tscope.manager.itemStart( url );\\n\\n\\t\\t\\tsetTimeout( function () {\\n\\n\\t\\t\\t\\tif ( onLoad ) onLoad( cached );\\n\\n\\t\\t\\t\\tscope.manager.itemEnd( url );\\n\\n\\t\\t\\t}, 0 );\\n\\n\\t\\t\\treturn cached;\\n\\n\\t\\t}\\n\\n\\t\\tfetch( url ).then( function ( res ) {\\n\\n\\t\\t\\treturn res.blob();\\n\\n\\t\\t} ).then( function ( blob ) {\\n\\n\\t\\t\\treturn createImageBitmap( blob, scope.options );\\n\\n\\t\\t} ).then( function ( imageBitmap ) {\\n\\n\\t\\t\\tCache.add( url, imageBitmap );\\n\\n\\t\\t\\tif ( onLoad ) onLoad( imageBitmap );\\n\\n\\t\\t\\tscope.manager.itemEnd( url );\\n\\n\\t\\t} ).catch( function ( e ) {\\n\\n\\t\\t\\tif ( onError ) onError( e );\\n\\n\\t\\t\\tscope.manager.itemError( url );\\n\\t\\t\\tscope.manager.itemEnd( url );\\n\\n\\t\\t} );\\n\\n\\t},\\n\\n\\tsetCrossOrigin: function ( /* value */ ) {\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetPath: function ( value ) {\\n\\n\\t\\tthis.path = value;\\n\\t\\treturn this;\\n\\n\\t}\\n\\n};\\n\\n/**\\n * @author zz85 / http://www.lab4games.net/zz85/blog\\n * minimal class for proxing functions to Path. Replaces old \\\"extractSubpaths()\\\"\\n **/\\n\\nfunction ShapePath() {\\n\\n\\tthis.type = 'ShapePath';\\n\\n\\tthis.color = new Color();\\n\\n\\tthis.subPaths = [];\\n\\tthis.currentPath = null;\\n\\n}\\n\\nObject.assign( ShapePath.prototype, {\\n\\n\\tmoveTo: function ( x, y ) {\\n\\n\\t\\tthis.currentPath = new Path();\\n\\t\\tthis.subPaths.push( this.currentPath );\\n\\t\\tthis.currentPath.moveTo( x, y );\\n\\n\\t},\\n\\n\\tlineTo: function ( x, y ) {\\n\\n\\t\\tthis.currentPath.lineTo( x, y );\\n\\n\\t},\\n\\n\\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\\n\\n\\t\\tthis.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );\\n\\n\\t},\\n\\n\\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\\n\\n\\t\\tthis.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );\\n\\n\\t},\\n\\n\\tsplineThru: function ( pts ) {\\n\\n\\t\\tthis.currentPath.splineThru( pts );\\n\\n\\t},\\n\\n\\ttoShapes: function ( isCCW, noHoles ) {\\n\\n\\t\\tfunction toShapesNoHoles( inSubpaths ) {\\n\\n\\t\\t\\tvar shapes = [];\\n\\n\\t\\t\\tfor ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {\\n\\n\\t\\t\\t\\tvar tmpPath = inSubpaths[ i ];\\n\\n\\t\\t\\t\\tvar tmpShape = new Shape();\\n\\t\\t\\t\\ttmpShape.curves = tmpPath.curves;\\n\\n\\t\\t\\t\\tshapes.push( tmpShape );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn shapes;\\n\\n\\t\\t}\\n\\n\\t\\tfunction isPointInsidePolygon( inPt, inPolygon ) {\\n\\n\\t\\t\\tvar polyLen = inPolygon.length;\\n\\n\\t\\t\\t// inPt on polygon contour => immediate success    or\\n\\t\\t\\t// toggling of inside/outside at every single! intersection point of an edge\\n\\t\\t\\t//  with the horizontal line through inPt, left of inPt\\n\\t\\t\\t//  not counting lowerY endpoints of edges and whole edges on that line\\n\\t\\t\\tvar inside = false;\\n\\t\\t\\tfor ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {\\n\\n\\t\\t\\t\\tvar edgeLowPt = inPolygon[ p ];\\n\\t\\t\\t\\tvar edgeHighPt = inPolygon[ q ];\\n\\n\\t\\t\\t\\tvar edgeDx = edgeHighPt.x - edgeLowPt.x;\\n\\t\\t\\t\\tvar edgeDy = edgeHighPt.y - edgeLowPt.y;\\n\\n\\t\\t\\t\\tif ( Math.abs( edgeDy ) > Number.EPSILON ) {\\n\\n\\t\\t\\t\\t\\t// not parallel\\n\\t\\t\\t\\t\\tif ( edgeDy < 0 ) {\\n\\n\\t\\t\\t\\t\\t\\tedgeLowPt = inPolygon[ q ]; edgeDx = - edgeDx;\\n\\t\\t\\t\\t\\t\\tedgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;\\n\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tif ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) \\t\\tcontinue;\\n\\n\\t\\t\\t\\t\\tif ( inPt.y === edgeLowPt.y ) {\\n\\n\\t\\t\\t\\t\\t\\tif ( inPt.x === edgeLowPt.x )\\t\\treturn\\ttrue;\\t\\t// inPt is on contour ?\\n\\t\\t\\t\\t\\t\\t// continue;\\t\\t\\t\\t// no intersection or edgeLowPt => doesn't count !!!\\n\\n\\t\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\t\\tvar perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );\\n\\t\\t\\t\\t\\t\\tif ( perpEdge === 0 )\\t\\t\\t\\treturn\\ttrue;\\t\\t// inPt is on contour ?\\n\\t\\t\\t\\t\\t\\tif ( perpEdge < 0 ) \\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\t\\t\\tinside = ! inside;\\t\\t// true intersection left of inPt\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\t// parallel or collinear\\n\\t\\t\\t\\t\\tif ( inPt.y !== edgeLowPt.y ) \\t\\tcontinue;\\t\\t\\t// parallel\\n\\t\\t\\t\\t\\t// edge lies on the same horizontal line as inPt\\n\\t\\t\\t\\t\\tif ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||\\n\\t\\t\\t\\t\\t\\t ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )\\t\\treturn\\ttrue;\\t// inPt: Point on contour !\\n\\t\\t\\t\\t\\t// continue;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn\\tinside;\\n\\n\\t\\t}\\n\\n\\t\\tvar isClockWise = ShapeUtils.isClockWise;\\n\\n\\t\\tvar subPaths = this.subPaths;\\n\\t\\tif ( subPaths.length === 0 ) return [];\\n\\n\\t\\tif ( noHoles === true )\\treturn\\ttoShapesNoHoles( subPaths );\\n\\n\\n\\t\\tvar solid, tmpPath, tmpShape, shapes = [];\\n\\n\\t\\tif ( subPaths.length === 1 ) {\\n\\n\\t\\t\\ttmpPath = subPaths[ 0 ];\\n\\t\\t\\ttmpShape = new Shape();\\n\\t\\t\\ttmpShape.curves = tmpPath.curves;\\n\\t\\t\\tshapes.push( tmpShape );\\n\\t\\t\\treturn shapes;\\n\\n\\t\\t}\\n\\n\\t\\tvar holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );\\n\\t\\tholesFirst = isCCW ? ! holesFirst : holesFirst;\\n\\n\\t\\t// console.log(\\\"Holes first\\\", holesFirst);\\n\\n\\t\\tvar betterShapeHoles = [];\\n\\t\\tvar newShapes = [];\\n\\t\\tvar newShapeHoles = [];\\n\\t\\tvar mainIdx = 0;\\n\\t\\tvar tmpPoints;\\n\\n\\t\\tnewShapes[ mainIdx ] = undefined;\\n\\t\\tnewShapeHoles[ mainIdx ] = [];\\n\\n\\t\\tfor ( var i = 0, l = subPaths.length; i < l; i ++ ) {\\n\\n\\t\\t\\ttmpPath = subPaths[ i ];\\n\\t\\t\\ttmpPoints = tmpPath.getPoints();\\n\\t\\t\\tsolid = isClockWise( tmpPoints );\\n\\t\\t\\tsolid = isCCW ? ! solid : solid;\\n\\n\\t\\t\\tif ( solid ) {\\n\\n\\t\\t\\t\\tif ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )\\tmainIdx ++;\\n\\n\\t\\t\\t\\tnewShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };\\n\\t\\t\\t\\tnewShapes[ mainIdx ].s.curves = tmpPath.curves;\\n\\n\\t\\t\\t\\tif ( holesFirst )\\tmainIdx ++;\\n\\t\\t\\t\\tnewShapeHoles[ mainIdx ] = [];\\n\\n\\t\\t\\t\\t//console.log('cw', i);\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tnewShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );\\n\\n\\t\\t\\t\\t//console.log('ccw', i);\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\t// only Holes? -> probably all Shapes with wrong orientation\\n\\t\\tif ( ! newShapes[ 0 ] )\\treturn\\ttoShapesNoHoles( subPaths );\\n\\n\\n\\t\\tif ( newShapes.length > 1 ) {\\n\\n\\t\\t\\tvar ambiguous = false;\\n\\t\\t\\tvar toChange = [];\\n\\n\\t\\t\\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\\n\\n\\t\\t\\t\\tbetterShapeHoles[ sIdx ] = [];\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\\n\\n\\t\\t\\t\\tvar sho = newShapeHoles[ sIdx ];\\n\\n\\t\\t\\t\\tfor ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {\\n\\n\\t\\t\\t\\t\\tvar ho = sho[ hIdx ];\\n\\t\\t\\t\\t\\tvar hole_unassigned = true;\\n\\n\\t\\t\\t\\t\\tfor ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {\\n\\n\\t\\t\\t\\t\\t\\tif ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {\\n\\n\\t\\t\\t\\t\\t\\t\\tif ( sIdx !== s2Idx )\\ttoChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );\\n\\t\\t\\t\\t\\t\\t\\tif ( hole_unassigned ) {\\n\\n\\t\\t\\t\\t\\t\\t\\t\\thole_unassigned = false;\\n\\t\\t\\t\\t\\t\\t\\t\\tbetterShapeHoles[ s2Idx ].push( ho );\\n\\n\\t\\t\\t\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\t\\t\\t\\tambiguous = true;\\n\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tif ( hole_unassigned ) {\\n\\n\\t\\t\\t\\t\\t\\tbetterShapeHoles[ sIdx ].push( ho );\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\t// console.log(\\\"ambiguous: \\\", ambiguous);\\n\\t\\t\\tif ( toChange.length > 0 ) {\\n\\n\\t\\t\\t\\t// console.log(\\\"to change: \\\", toChange);\\n\\t\\t\\t\\tif ( ! ambiguous )\\tnewShapeHoles = betterShapeHoles;\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tvar tmpHoles;\\n\\n\\t\\tfor ( var i = 0, il = newShapes.length; i < il; i ++ ) {\\n\\n\\t\\t\\ttmpShape = newShapes[ i ].s;\\n\\t\\t\\tshapes.push( tmpShape );\\n\\t\\t\\ttmpHoles = newShapeHoles[ i ];\\n\\n\\t\\t\\tfor ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {\\n\\n\\t\\t\\t\\ttmpShape.holes.push( tmpHoles[ j ].h );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\t//console.log(\\\"shape\\\", shapes);\\n\\n\\t\\treturn shapes;\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author zz85 / http://www.lab4games.net/zz85/blog\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\n\\nfunction Font( data ) {\\n\\n\\tthis.type = 'Font';\\n\\n\\tthis.data = data;\\n\\n}\\n\\nObject.assign( Font.prototype, {\\n\\n\\tisFont: true,\\n\\n\\tgenerateShapes: function ( text, size ) {\\n\\n\\t\\tif ( size === undefined ) size = 100;\\n\\n\\t\\tvar shapes = [];\\n\\t\\tvar paths = createPaths( text, size, this.data );\\n\\n\\t\\tfor ( var p = 0, pl = paths.length; p < pl; p ++ ) {\\n\\n\\t\\t\\tArray.prototype.push.apply( shapes, paths[ p ].toShapes() );\\n\\n\\t\\t}\\n\\n\\t\\treturn shapes;\\n\\n\\t}\\n\\n} );\\n\\nfunction createPaths( text, size, data ) {\\n\\n\\tvar chars = Array.from ? Array.from( text ) : String( text ).split( '' ); // see #13988\\n\\tvar scale = size / data.resolution;\\n\\tvar line_height = ( data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness ) * scale;\\n\\n\\tvar paths = [];\\n\\n\\tvar offsetX = 0, offsetY = 0;\\n\\n\\tfor ( var i = 0; i < chars.length; i ++ ) {\\n\\n\\t\\tvar char = chars[ i ];\\n\\n\\t\\tif ( char === '\\\\n' ) {\\n\\n\\t\\t\\toffsetX = 0;\\n\\t\\t\\toffsetY -= line_height;\\n\\n\\t\\t} else {\\n\\n\\t\\t\\tvar ret = createPath( char, scale, offsetX, offsetY, data );\\n\\t\\t\\toffsetX += ret.offsetX;\\n\\t\\t\\tpaths.push( ret.path );\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\treturn paths;\\n\\n}\\n\\nfunction createPath( char, scale, offsetX, offsetY, data ) {\\n\\n\\tvar glyph = data.glyphs[ char ] || data.glyphs[ '?' ];\\n\\n\\tif ( ! glyph ) return;\\n\\n\\tvar path = new ShapePath();\\n\\n\\tvar x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\\n\\n\\tif ( glyph.o ) {\\n\\n\\t\\tvar outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\\n\\n\\t\\tfor ( var i = 0, l = outline.length; i < l; ) {\\n\\n\\t\\t\\tvar action = outline[ i ++ ];\\n\\n\\t\\t\\tswitch ( action ) {\\n\\n\\t\\t\\t\\tcase 'm': // moveTo\\n\\n\\t\\t\\t\\t\\tx = outline[ i ++ ] * scale + offsetX;\\n\\t\\t\\t\\t\\ty = outline[ i ++ ] * scale + offsetY;\\n\\n\\t\\t\\t\\t\\tpath.moveTo( x, y );\\n\\n\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\tcase 'l': // lineTo\\n\\n\\t\\t\\t\\t\\tx = outline[ i ++ ] * scale + offsetX;\\n\\t\\t\\t\\t\\ty = outline[ i ++ ] * scale + offsetY;\\n\\n\\t\\t\\t\\t\\tpath.lineTo( x, y );\\n\\n\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\tcase 'q': // quadraticCurveTo\\n\\n\\t\\t\\t\\t\\tcpx = outline[ i ++ ] * scale + offsetX;\\n\\t\\t\\t\\t\\tcpy = outline[ i ++ ] * scale + offsetY;\\n\\t\\t\\t\\t\\tcpx1 = outline[ i ++ ] * scale + offsetX;\\n\\t\\t\\t\\t\\tcpy1 = outline[ i ++ ] * scale + offsetY;\\n\\n\\t\\t\\t\\t\\tpath.quadraticCurveTo( cpx1, cpy1, cpx, cpy );\\n\\n\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\tcase 'b': // bezierCurveTo\\n\\n\\t\\t\\t\\t\\tcpx = outline[ i ++ ] * scale + offsetX;\\n\\t\\t\\t\\t\\tcpy = outline[ i ++ ] * scale + offsetY;\\n\\t\\t\\t\\t\\tcpx1 = outline[ i ++ ] * scale + offsetX;\\n\\t\\t\\t\\t\\tcpy1 = outline[ i ++ ] * scale + offsetY;\\n\\t\\t\\t\\t\\tcpx2 = outline[ i ++ ] * scale + offsetX;\\n\\t\\t\\t\\t\\tcpy2 = outline[ i ++ ] * scale + offsetY;\\n\\n\\t\\t\\t\\t\\tpath.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );\\n\\n\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\treturn { offsetX: glyph.ha * scale, path: path };\\n\\n}\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\nfunction FontLoader( manager ) {\\n\\n\\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\\n\\n}\\n\\nObject.assign( FontLoader.prototype, {\\n\\n\\tload: function ( url, onLoad, onProgress, onError ) {\\n\\n\\t\\tvar scope = this;\\n\\n\\t\\tvar loader = new FileLoader( this.manager );\\n\\t\\tloader.setPath( this.path );\\n\\t\\tloader.load( url, function ( text ) {\\n\\n\\t\\t\\tvar json;\\n\\n\\t\\t\\ttry {\\n\\n\\t\\t\\t\\tjson = JSON.parse( text );\\n\\n\\t\\t\\t} catch ( e ) {\\n\\n\\t\\t\\t\\tconsole.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );\\n\\t\\t\\t\\tjson = JSON.parse( text.substring( 65, text.length - 2 ) );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tvar font = scope.parse( json );\\n\\n\\t\\t\\tif ( onLoad ) onLoad( font );\\n\\n\\t\\t}, onProgress, onError );\\n\\n\\t},\\n\\n\\tparse: function ( json ) {\\n\\n\\t\\treturn new Font( json );\\n\\n\\t},\\n\\n\\tsetPath: function ( value ) {\\n\\n\\t\\tthis.path = value;\\n\\t\\treturn this;\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author alteredq / http://alteredqualia.com/\\n */\\n\\nfunction Loader() {}\\n\\nLoader.Handlers = {\\n\\n\\thandlers: [],\\n\\n\\tadd: function ( regex, loader ) {\\n\\n\\t\\tthis.handlers.push( regex, loader );\\n\\n\\t},\\n\\n\\tget: function ( file ) {\\n\\n\\t\\tvar handlers = this.handlers;\\n\\n\\t\\tfor ( var i = 0, l = handlers.length; i < l; i += 2 ) {\\n\\n\\t\\t\\tvar regex = handlers[ i ];\\n\\t\\t\\tvar loader = handlers[ i + 1 ];\\n\\n\\t\\t\\tif ( regex.test( file ) ) {\\n\\n\\t\\t\\t\\treturn loader;\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\treturn null;\\n\\n\\t}\\n\\n};\\n\\nObject.assign( Loader.prototype, {\\n\\n\\tcrossOrigin: 'anonymous',\\n\\n\\tonLoadStart: function () {},\\n\\n\\tonLoadProgress: function () {},\\n\\n\\tonLoadComplete: function () {},\\n\\n\\tinitMaterials: function ( materials, texturePath, crossOrigin ) {\\n\\n\\t\\tvar array = [];\\n\\n\\t\\tfor ( var i = 0; i < materials.length; ++ i ) {\\n\\n\\t\\t\\tarray[ i ] = this.createMaterial( materials[ i ], texturePath, crossOrigin );\\n\\n\\t\\t}\\n\\n\\t\\treturn array;\\n\\n\\t},\\n\\n\\tcreateMaterial: ( function () {\\n\\n\\t\\tvar BlendingMode = {\\n\\t\\t\\tNoBlending: NoBlending,\\n\\t\\t\\tNormalBlending: NormalBlending,\\n\\t\\t\\tAdditiveBlending: AdditiveBlending,\\n\\t\\t\\tSubtractiveBlending: SubtractiveBlending,\\n\\t\\t\\tMultiplyBlending: MultiplyBlending,\\n\\t\\t\\tCustomBlending: CustomBlending\\n\\t\\t};\\n\\n\\t\\tvar color = new Color();\\n\\t\\tvar textureLoader = new TextureLoader();\\n\\t\\tvar materialLoader = new MaterialLoader();\\n\\n\\t\\treturn function createMaterial( m, texturePath, crossOrigin ) {\\n\\n\\t\\t\\t// convert from old material format\\n\\n\\t\\t\\tvar textures = {};\\n\\n\\t\\t\\tfunction loadTexture( path, repeat, offset, wrap, anisotropy ) {\\n\\n\\t\\t\\t\\tvar fullPath = texturePath + path;\\n\\t\\t\\t\\tvar loader = Loader.Handlers.get( fullPath );\\n\\n\\t\\t\\t\\tvar texture;\\n\\n\\t\\t\\t\\tif ( loader !== null ) {\\n\\n\\t\\t\\t\\t\\ttexture = loader.load( fullPath );\\n\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\ttextureLoader.setCrossOrigin( crossOrigin );\\n\\t\\t\\t\\t\\ttexture = textureLoader.load( fullPath );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif ( repeat !== undefined ) {\\n\\n\\t\\t\\t\\t\\ttexture.repeat.fromArray( repeat );\\n\\n\\t\\t\\t\\t\\tif ( repeat[ 0 ] !== 1 ) texture.wrapS = RepeatWrapping;\\n\\t\\t\\t\\t\\tif ( repeat[ 1 ] !== 1 ) texture.wrapT = RepeatWrapping;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif ( offset !== undefined ) {\\n\\n\\t\\t\\t\\t\\ttexture.offset.fromArray( offset );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif ( wrap !== undefined ) {\\n\\n\\t\\t\\t\\t\\tif ( wrap[ 0 ] === 'repeat' ) texture.wrapS = RepeatWrapping;\\n\\t\\t\\t\\t\\tif ( wrap[ 0 ] === 'mirror' ) texture.wrapS = MirroredRepeatWrapping;\\n\\n\\t\\t\\t\\t\\tif ( wrap[ 1 ] === 'repeat' ) texture.wrapT = RepeatWrapping;\\n\\t\\t\\t\\t\\tif ( wrap[ 1 ] === 'mirror' ) texture.wrapT = MirroredRepeatWrapping;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif ( anisotropy !== undefined ) {\\n\\n\\t\\t\\t\\t\\ttexture.anisotropy = anisotropy;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tvar uuid = _Math.generateUUID();\\n\\n\\t\\t\\t\\ttextures[ uuid ] = texture;\\n\\n\\t\\t\\t\\treturn uuid;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\t//\\n\\n\\t\\t\\tvar json = {\\n\\t\\t\\t\\tuuid: _Math.generateUUID(),\\n\\t\\t\\t\\ttype: 'MeshLambertMaterial'\\n\\t\\t\\t};\\n\\n\\t\\t\\tfor ( var name in m ) {\\n\\n\\t\\t\\t\\tvar value = m[ name ];\\n\\n\\t\\t\\t\\tswitch ( name ) {\\n\\n\\t\\t\\t\\t\\tcase 'DbgColor':\\n\\t\\t\\t\\t\\tcase 'DbgIndex':\\n\\t\\t\\t\\t\\tcase 'opticalDensity':\\n\\t\\t\\t\\t\\tcase 'illumination':\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\tcase 'DbgName':\\n\\t\\t\\t\\t\\t\\tjson.name = value;\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\tcase 'blending':\\n\\t\\t\\t\\t\\t\\tjson.blending = BlendingMode[ value ];\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\tcase 'colorAmbient':\\n\\t\\t\\t\\t\\tcase 'mapAmbient':\\n\\t\\t\\t\\t\\t\\tconsole.warn( 'THREE.Loader.createMaterial:', name, 'is no longer supported.' );\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\tcase 'colorDiffuse':\\n\\t\\t\\t\\t\\t\\tjson.color = color.fromArray( value ).getHex();\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\tcase 'colorSpecular':\\n\\t\\t\\t\\t\\t\\tjson.specular = color.fromArray( value ).getHex();\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\tcase 'colorEmissive':\\n\\t\\t\\t\\t\\t\\tjson.emissive = color.fromArray( value ).getHex();\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\tcase 'specularCoef':\\n\\t\\t\\t\\t\\t\\tjson.shininess = value;\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\tcase 'shading':\\n\\t\\t\\t\\t\\t\\tif ( value.toLowerCase() === 'basic' ) json.type = 'MeshBasicMaterial';\\n\\t\\t\\t\\t\\t\\tif ( value.toLowerCase() === 'phong' ) json.type = 'MeshPhongMaterial';\\n\\t\\t\\t\\t\\t\\tif ( value.toLowerCase() === 'standard' ) json.type = 'MeshStandardMaterial';\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\tcase 'mapDiffuse':\\n\\t\\t\\t\\t\\t\\tjson.map = loadTexture( value, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\tcase 'mapDiffuseRepeat':\\n\\t\\t\\t\\t\\tcase 'mapDiffuseOffset':\\n\\t\\t\\t\\t\\tcase 'mapDiffuseWrap':\\n\\t\\t\\t\\t\\tcase 'mapDiffuseAnisotropy':\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\tcase 'mapEmissive':\\n\\t\\t\\t\\t\\t\\tjson.emissiveMap = loadTexture( value, m.mapEmissiveRepeat, m.mapEmissiveOffset, m.mapEmissiveWrap, m.mapEmissiveAnisotropy );\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\tcase 'mapEmissiveRepeat':\\n\\t\\t\\t\\t\\tcase 'mapEmissiveOffset':\\n\\t\\t\\t\\t\\tcase 'mapEmissiveWrap':\\n\\t\\t\\t\\t\\tcase 'mapEmissiveAnisotropy':\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\tcase 'mapLight':\\n\\t\\t\\t\\t\\t\\tjson.lightMap = loadTexture( value, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\tcase 'mapLightRepeat':\\n\\t\\t\\t\\t\\tcase 'mapLightOffset':\\n\\t\\t\\t\\t\\tcase 'mapLightWrap':\\n\\t\\t\\t\\t\\tcase 'mapLightAnisotropy':\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\tcase 'mapAO':\\n\\t\\t\\t\\t\\t\\tjson.aoMap = loadTexture( value, m.mapAORepeat, m.mapAOOffset, m.mapAOWrap, m.mapAOAnisotropy );\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\tcase 'mapAORepeat':\\n\\t\\t\\t\\t\\tcase 'mapAOOffset':\\n\\t\\t\\t\\t\\tcase 'mapAOWrap':\\n\\t\\t\\t\\t\\tcase 'mapAOAnisotropy':\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\tcase 'mapBump':\\n\\t\\t\\t\\t\\t\\tjson.bumpMap = loadTexture( value, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\tcase 'mapBumpScale':\\n\\t\\t\\t\\t\\t\\tjson.bumpScale = value;\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\tcase 'mapBumpRepeat':\\n\\t\\t\\t\\t\\tcase 'mapBumpOffset':\\n\\t\\t\\t\\t\\tcase 'mapBumpWrap':\\n\\t\\t\\t\\t\\tcase 'mapBumpAnisotropy':\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\tcase 'mapNormal':\\n\\t\\t\\t\\t\\t\\tjson.normalMap = loadTexture( value, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\tcase 'mapNormalFactor':\\n\\t\\t\\t\\t\\t\\tjson.normalScale = value;\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\tcase 'mapNormalRepeat':\\n\\t\\t\\t\\t\\tcase 'mapNormalOffset':\\n\\t\\t\\t\\t\\tcase 'mapNormalWrap':\\n\\t\\t\\t\\t\\tcase 'mapNormalAnisotropy':\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\tcase 'mapSpecular':\\n\\t\\t\\t\\t\\t\\tjson.specularMap = loadTexture( value, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\tcase 'mapSpecularRepeat':\\n\\t\\t\\t\\t\\tcase 'mapSpecularOffset':\\n\\t\\t\\t\\t\\tcase 'mapSpecularWrap':\\n\\t\\t\\t\\t\\tcase 'mapSpecularAnisotropy':\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\tcase 'mapMetalness':\\n\\t\\t\\t\\t\\t\\tjson.metalnessMap = loadTexture( value, m.mapMetalnessRepeat, m.mapMetalnessOffset, m.mapMetalnessWrap, m.mapMetalnessAnisotropy );\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\tcase 'mapMetalnessRepeat':\\n\\t\\t\\t\\t\\tcase 'mapMetalnessOffset':\\n\\t\\t\\t\\t\\tcase 'mapMetalnessWrap':\\n\\t\\t\\t\\t\\tcase 'mapMetalnessAnisotropy':\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\tcase 'mapRoughness':\\n\\t\\t\\t\\t\\t\\tjson.roughnessMap = loadTexture( value, m.mapRoughnessRepeat, m.mapRoughnessOffset, m.mapRoughnessWrap, m.mapRoughnessAnisotropy );\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\tcase 'mapRoughnessRepeat':\\n\\t\\t\\t\\t\\tcase 'mapRoughnessOffset':\\n\\t\\t\\t\\t\\tcase 'mapRoughnessWrap':\\n\\t\\t\\t\\t\\tcase 'mapRoughnessAnisotropy':\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\tcase 'mapAlpha':\\n\\t\\t\\t\\t\\t\\tjson.alphaMap = loadTexture( value, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy );\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\tcase 'mapAlphaRepeat':\\n\\t\\t\\t\\t\\tcase 'mapAlphaOffset':\\n\\t\\t\\t\\t\\tcase 'mapAlphaWrap':\\n\\t\\t\\t\\t\\tcase 'mapAlphaAnisotropy':\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\tcase 'flipSided':\\n\\t\\t\\t\\t\\t\\tjson.side = BackSide;\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\tcase 'doubleSided':\\n\\t\\t\\t\\t\\t\\tjson.side = DoubleSide;\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\tcase 'transparency':\\n\\t\\t\\t\\t\\t\\tconsole.warn( 'THREE.Loader.createMaterial: transparency has been renamed to opacity' );\\n\\t\\t\\t\\t\\t\\tjson.opacity = value;\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\tcase 'depthTest':\\n\\t\\t\\t\\t\\tcase 'depthWrite':\\n\\t\\t\\t\\t\\tcase 'colorWrite':\\n\\t\\t\\t\\t\\tcase 'opacity':\\n\\t\\t\\t\\t\\tcase 'reflectivity':\\n\\t\\t\\t\\t\\tcase 'transparent':\\n\\t\\t\\t\\t\\tcase 'visible':\\n\\t\\t\\t\\t\\tcase 'wireframe':\\n\\t\\t\\t\\t\\t\\tjson[ name ] = value;\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\tcase 'vertexColors':\\n\\t\\t\\t\\t\\t\\tif ( value === true ) json.vertexColors = VertexColors;\\n\\t\\t\\t\\t\\t\\tif ( value === 'face' ) json.vertexColors = FaceColors;\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\t\\tconsole.error( 'THREE.Loader.createMaterial: Unsupported', name, value );\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( json.type === 'MeshBasicMaterial' ) delete json.emissive;\\n\\t\\t\\tif ( json.type !== 'MeshPhongMaterial' ) delete json.specular;\\n\\n\\t\\t\\tif ( json.opacity < 1 ) json.transparent = true;\\n\\n\\t\\t\\tmaterialLoader.setTextures( textures );\\n\\n\\t\\t\\treturn materialLoader.parse( json );\\n\\n\\t\\t};\\n\\n\\t} )()\\n\\n} );\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\nvar context;\\n\\nvar AudioContext = {\\n\\n\\tgetContext: function () {\\n\\n\\t\\tif ( context === undefined ) {\\n\\n\\t\\t\\tcontext = new ( window.AudioContext || window.webkitAudioContext )();\\n\\n\\t\\t}\\n\\n\\t\\treturn context;\\n\\n\\t},\\n\\n\\tsetContext: function ( value ) {\\n\\n\\t\\tcontext = value;\\n\\n\\t}\\n\\n};\\n\\n/**\\n * @author Reece Aaron Lecrivain / http://reecenotes.com/\\n */\\n\\nfunction AudioLoader( manager ) {\\n\\n\\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\\n\\n}\\n\\nObject.assign( AudioLoader.prototype, {\\n\\n\\tload: function ( url, onLoad, onProgress, onError ) {\\n\\n\\t\\tvar loader = new FileLoader( this.manager );\\n\\t\\tloader.setResponseType( 'arraybuffer' );\\n\\t\\tloader.setPath( this.path );\\n\\t\\tloader.load( url, function ( buffer ) {\\n\\n\\t\\t\\t// Create a copy of the buffer. The `decodeAudioData` method\\n\\t\\t\\t// detaches the buffer when complete, preventing reuse.\\n\\t\\t\\tvar bufferCopy = buffer.slice( 0 );\\n\\n\\t\\t\\tvar context = AudioContext.getContext();\\n\\t\\t\\tcontext.decodeAudioData( bufferCopy, function ( audioBuffer ) {\\n\\n\\t\\t\\t\\tonLoad( audioBuffer );\\n\\n\\t\\t\\t} );\\n\\n\\t\\t}, onProgress, onError );\\n\\n\\t},\\n\\n\\tsetPath: function ( value ) {\\n\\n\\t\\tthis.path = value;\\n\\t\\treturn this;\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\nfunction StereoCamera() {\\n\\n\\tthis.type = 'StereoCamera';\\n\\n\\tthis.aspect = 1;\\n\\n\\tthis.eyeSep = 0.064;\\n\\n\\tthis.cameraL = new PerspectiveCamera();\\n\\tthis.cameraL.layers.enable( 1 );\\n\\tthis.cameraL.matrixAutoUpdate = false;\\n\\n\\tthis.cameraR = new PerspectiveCamera();\\n\\tthis.cameraR.layers.enable( 2 );\\n\\tthis.cameraR.matrixAutoUpdate = false;\\n\\n}\\n\\nObject.assign( StereoCamera.prototype, {\\n\\n\\tupdate: ( function () {\\n\\n\\t\\tvar instance, focus, fov, aspect, near, far, zoom, eyeSep;\\n\\n\\t\\tvar eyeRight = new Matrix4();\\n\\t\\tvar eyeLeft = new Matrix4();\\n\\n\\t\\treturn function update( camera ) {\\n\\n\\t\\t\\tvar needsUpdate = instance !== this || focus !== camera.focus || fov !== camera.fov ||\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\taspect !== camera.aspect * this.aspect || near !== camera.near ||\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfar !== camera.far || zoom !== camera.zoom || eyeSep !== this.eyeSep;\\n\\n\\t\\t\\tif ( needsUpdate ) {\\n\\n\\t\\t\\t\\tinstance = this;\\n\\t\\t\\t\\tfocus = camera.focus;\\n\\t\\t\\t\\tfov = camera.fov;\\n\\t\\t\\t\\taspect = camera.aspect * this.aspect;\\n\\t\\t\\t\\tnear = camera.near;\\n\\t\\t\\t\\tfar = camera.far;\\n\\t\\t\\t\\tzoom = camera.zoom;\\n\\n\\t\\t\\t\\t// Off-axis stereoscopic effect based on\\n\\t\\t\\t\\t// http://paulbourke.net/stereographics/stereorender/\\n\\n\\t\\t\\t\\tvar projectionMatrix = camera.projectionMatrix.clone();\\n\\t\\t\\t\\teyeSep = this.eyeSep / 2;\\n\\t\\t\\t\\tvar eyeSepOnProjection = eyeSep * near / focus;\\n\\t\\t\\t\\tvar ymax = ( near * Math.tan( _Math.DEG2RAD * fov * 0.5 ) ) / zoom;\\n\\t\\t\\t\\tvar xmin, xmax;\\n\\n\\t\\t\\t\\t// translate xOffset\\n\\n\\t\\t\\t\\teyeLeft.elements[ 12 ] = - eyeSep;\\n\\t\\t\\t\\teyeRight.elements[ 12 ] = eyeSep;\\n\\n\\t\\t\\t\\t// for left eye\\n\\n\\t\\t\\t\\txmin = - ymax * aspect + eyeSepOnProjection;\\n\\t\\t\\t\\txmax = ymax * aspect + eyeSepOnProjection;\\n\\n\\t\\t\\t\\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\\n\\t\\t\\t\\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\\n\\n\\t\\t\\t\\tthis.cameraL.projectionMatrix.copy( projectionMatrix );\\n\\n\\t\\t\\t\\t// for right eye\\n\\n\\t\\t\\t\\txmin = - ymax * aspect - eyeSepOnProjection;\\n\\t\\t\\t\\txmax = ymax * aspect - eyeSepOnProjection;\\n\\n\\t\\t\\t\\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\\n\\t\\t\\t\\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\\n\\n\\t\\t\\t\\tthis.cameraR.projectionMatrix.copy( projectionMatrix );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tthis.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( eyeLeft );\\n\\t\\t\\tthis.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( eyeRight );\\n\\n\\t\\t};\\n\\n\\t} )()\\n\\n} );\\n\\n/**\\n * Camera for rendering cube maps\\n *\\t- renders scene into axis-aligned cube\\n *\\n * @author alteredq / http://alteredqualia.com/\\n */\\n\\nfunction CubeCamera( near, far, cubeResolution, options ) {\\n\\n\\tObject3D.call( this );\\n\\n\\tthis.type = 'CubeCamera';\\n\\n\\tvar fov = 90, aspect = 1;\\n\\n\\tvar cameraPX = new PerspectiveCamera( fov, aspect, near, far );\\n\\tcameraPX.up.set( 0, - 1, 0 );\\n\\tcameraPX.lookAt( new Vector3( 1, 0, 0 ) );\\n\\tthis.add( cameraPX );\\n\\n\\tvar cameraNX = new PerspectiveCamera( fov, aspect, near, far );\\n\\tcameraNX.up.set( 0, - 1, 0 );\\n\\tcameraNX.lookAt( new Vector3( - 1, 0, 0 ) );\\n\\tthis.add( cameraNX );\\n\\n\\tvar cameraPY = new PerspectiveCamera( fov, aspect, near, far );\\n\\tcameraPY.up.set( 0, 0, 1 );\\n\\tcameraPY.lookAt( new Vector3( 0, 1, 0 ) );\\n\\tthis.add( cameraPY );\\n\\n\\tvar cameraNY = new PerspectiveCamera( fov, aspect, near, far );\\n\\tcameraNY.up.set( 0, 0, - 1 );\\n\\tcameraNY.lookAt( new Vector3( 0, - 1, 0 ) );\\n\\tthis.add( cameraNY );\\n\\n\\tvar cameraPZ = new PerspectiveCamera( fov, aspect, near, far );\\n\\tcameraPZ.up.set( 0, - 1, 0 );\\n\\tcameraPZ.lookAt( new Vector3( 0, 0, 1 ) );\\n\\tthis.add( cameraPZ );\\n\\n\\tvar cameraNZ = new PerspectiveCamera( fov, aspect, near, far );\\n\\tcameraNZ.up.set( 0, - 1, 0 );\\n\\tcameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );\\n\\tthis.add( cameraNZ );\\n\\n\\toptions = options || { format: RGBFormat, magFilter: LinearFilter, minFilter: LinearFilter };\\n\\n\\tthis.renderTarget = new WebGLRenderTargetCube( cubeResolution, cubeResolution, options );\\n\\tthis.renderTarget.texture.name = \\\"CubeCamera\\\";\\n\\n\\tthis.update = function ( renderer, scene ) {\\n\\n\\t\\tif ( this.parent === null ) this.updateMatrixWorld();\\n\\n\\t\\tvar currentRenderTarget = renderer.getRenderTarget();\\n\\n\\t\\tvar renderTarget = this.renderTarget;\\n\\t\\tvar generateMipmaps = renderTarget.texture.generateMipmaps;\\n\\n\\t\\trenderTarget.texture.generateMipmaps = false;\\n\\n\\t\\trenderTarget.activeCubeFace = 0;\\n\\t\\trenderer.render( scene, cameraPX, renderTarget );\\n\\n\\t\\trenderTarget.activeCubeFace = 1;\\n\\t\\trenderer.render( scene, cameraNX, renderTarget );\\n\\n\\t\\trenderTarget.activeCubeFace = 2;\\n\\t\\trenderer.render( scene, cameraPY, renderTarget );\\n\\n\\t\\trenderTarget.activeCubeFace = 3;\\n\\t\\trenderer.render( scene, cameraNY, renderTarget );\\n\\n\\t\\trenderTarget.activeCubeFace = 4;\\n\\t\\trenderer.render( scene, cameraPZ, renderTarget );\\n\\n\\t\\trenderTarget.texture.generateMipmaps = generateMipmaps;\\n\\n\\t\\trenderTarget.activeCubeFace = 5;\\n\\t\\trenderer.render( scene, cameraNZ, renderTarget );\\n\\n\\t\\trenderer.setRenderTarget( currentRenderTarget );\\n\\n\\t};\\n\\n\\tthis.clear = function ( renderer, color, depth, stencil ) {\\n\\n\\t\\tvar currentRenderTarget = renderer.getRenderTarget();\\n\\n\\t\\tvar renderTarget = this.renderTarget;\\n\\n\\t\\tfor ( var i = 0; i < 6; i ++ ) {\\n\\n\\t\\t\\trenderTarget.activeCubeFace = i;\\n\\t\\t\\trenderer.setRenderTarget( renderTarget );\\n\\n\\t\\t\\trenderer.clear( color, depth, stencil );\\n\\n\\t\\t}\\n\\n\\t\\trenderer.setRenderTarget( currentRenderTarget );\\n\\n\\t};\\n\\n}\\n\\nCubeCamera.prototype = Object.create( Object3D.prototype );\\nCubeCamera.prototype.constructor = CubeCamera;\\n\\n/**\\n * @author alteredq / http://alteredqualia.com/\\n */\\n\\nfunction Clock( autoStart ) {\\n\\n\\tthis.autoStart = ( autoStart !== undefined ) ? autoStart : true;\\n\\n\\tthis.startTime = 0;\\n\\tthis.oldTime = 0;\\n\\tthis.elapsedTime = 0;\\n\\n\\tthis.running = false;\\n\\n}\\n\\nObject.assign( Clock.prototype, {\\n\\n\\tstart: function () {\\n\\n\\t\\tthis.startTime = ( typeof performance === 'undefined' ? Date : performance ).now(); // see #10732\\n\\n\\t\\tthis.oldTime = this.startTime;\\n\\t\\tthis.elapsedTime = 0;\\n\\t\\tthis.running = true;\\n\\n\\t},\\n\\n\\tstop: function () {\\n\\n\\t\\tthis.getElapsedTime();\\n\\t\\tthis.running = false;\\n\\t\\tthis.autoStart = false;\\n\\n\\t},\\n\\n\\tgetElapsedTime: function () {\\n\\n\\t\\tthis.getDelta();\\n\\t\\treturn this.elapsedTime;\\n\\n\\t},\\n\\n\\tgetDelta: function () {\\n\\n\\t\\tvar diff = 0;\\n\\n\\t\\tif ( this.autoStart && ! this.running ) {\\n\\n\\t\\t\\tthis.start();\\n\\t\\t\\treturn 0;\\n\\n\\t\\t}\\n\\n\\t\\tif ( this.running ) {\\n\\n\\t\\t\\tvar newTime = ( typeof performance === 'undefined' ? Date : performance ).now();\\n\\n\\t\\t\\tdiff = ( newTime - this.oldTime ) / 1000;\\n\\t\\t\\tthis.oldTime = newTime;\\n\\n\\t\\t\\tthis.elapsedTime += diff;\\n\\n\\t\\t}\\n\\n\\t\\treturn diff;\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\nfunction AudioListener() {\\n\\n\\tObject3D.call( this );\\n\\n\\tthis.type = 'AudioListener';\\n\\n\\tthis.context = AudioContext.getContext();\\n\\n\\tthis.gain = this.context.createGain();\\n\\tthis.gain.connect( this.context.destination );\\n\\n\\tthis.filter = null;\\n\\n\\tthis.timeDelta = 0;\\n\\n}\\n\\nAudioListener.prototype = Object.assign( Object.create( Object3D.prototype ), {\\n\\n\\tconstructor: AudioListener,\\n\\n\\tgetInput: function () {\\n\\n\\t\\treturn this.gain;\\n\\n\\t},\\n\\n\\tremoveFilter: function ( ) {\\n\\n\\t\\tif ( this.filter !== null ) {\\n\\n\\t\\t\\tthis.gain.disconnect( this.filter );\\n\\t\\t\\tthis.filter.disconnect( this.context.destination );\\n\\t\\t\\tthis.gain.connect( this.context.destination );\\n\\t\\t\\tthis.filter = null;\\n\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tgetFilter: function () {\\n\\n\\t\\treturn this.filter;\\n\\n\\t},\\n\\n\\tsetFilter: function ( value ) {\\n\\n\\t\\tif ( this.filter !== null ) {\\n\\n\\t\\t\\tthis.gain.disconnect( this.filter );\\n\\t\\t\\tthis.filter.disconnect( this.context.destination );\\n\\n\\t\\t} else {\\n\\n\\t\\t\\tthis.gain.disconnect( this.context.destination );\\n\\n\\t\\t}\\n\\n\\t\\tthis.filter = value;\\n\\t\\tthis.gain.connect( this.filter );\\n\\t\\tthis.filter.connect( this.context.destination );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tgetMasterVolume: function () {\\n\\n\\t\\treturn this.gain.gain.value;\\n\\n\\t},\\n\\n\\tsetMasterVolume: function ( value ) {\\n\\n\\t\\tthis.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tupdateMatrixWorld: ( function () {\\n\\n\\t\\tvar position = new Vector3();\\n\\t\\tvar quaternion = new Quaternion();\\n\\t\\tvar scale = new Vector3();\\n\\n\\t\\tvar orientation = new Vector3();\\n\\t\\tvar clock = new Clock();\\n\\n\\t\\treturn function updateMatrixWorld( force ) {\\n\\n\\t\\t\\tObject3D.prototype.updateMatrixWorld.call( this, force );\\n\\n\\t\\t\\tvar listener = this.context.listener;\\n\\t\\t\\tvar up = this.up;\\n\\n\\t\\t\\tthis.timeDelta = clock.getDelta();\\n\\n\\t\\t\\tthis.matrixWorld.decompose( position, quaternion, scale );\\n\\n\\t\\t\\torientation.set( 0, 0, - 1 ).applyQuaternion( quaternion );\\n\\n\\t\\t\\tif ( listener.positionX ) {\\n\\n\\t\\t\\t\\t// code path for Chrome (see #14393)\\n\\n\\t\\t\\t\\tvar endTime = this.context.currentTime + this.timeDelta;\\n\\n\\t\\t\\t\\tlistener.positionX.linearRampToValueAtTime( position.x, endTime );\\n\\t\\t\\t\\tlistener.positionY.linearRampToValueAtTime( position.y, endTime );\\n\\t\\t\\t\\tlistener.positionZ.linearRampToValueAtTime( position.z, endTime );\\n\\t\\t\\t\\tlistener.forwardX.linearRampToValueAtTime( orientation.x, endTime );\\n\\t\\t\\t\\tlistener.forwardY.linearRampToValueAtTime( orientation.y, endTime );\\n\\t\\t\\t\\tlistener.forwardZ.linearRampToValueAtTime( orientation.z, endTime );\\n\\t\\t\\t\\tlistener.upX.linearRampToValueAtTime( up.x, endTime );\\n\\t\\t\\t\\tlistener.upY.linearRampToValueAtTime( up.y, endTime );\\n\\t\\t\\t\\tlistener.upZ.linearRampToValueAtTime( up.z, endTime );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tlistener.setPosition( position.x, position.y, position.z );\\n\\t\\t\\t\\tlistener.setOrientation( orientation.x, orientation.y, orientation.z, up.x, up.y, up.z );\\n\\n\\t\\t\\t}\\n\\n\\t\\t};\\n\\n\\t} )()\\n\\n} );\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n * @author Reece Aaron Lecrivain / http://reecenotes.com/\\n */\\n\\nfunction Audio( listener ) {\\n\\n\\tObject3D.call( this );\\n\\n\\tthis.type = 'Audio';\\n\\n\\tthis.listener = listener;\\n\\tthis.context = listener.context;\\n\\n\\tthis.gain = this.context.createGain();\\n\\tthis.gain.connect( listener.getInput() );\\n\\n\\tthis.autoplay = false;\\n\\n\\tthis.buffer = null;\\n\\tthis.detune = 0;\\n\\tthis.loop = false;\\n\\tthis.startTime = 0;\\n\\tthis.offset = 0;\\n\\tthis.playbackRate = 1;\\n\\tthis.isPlaying = false;\\n\\tthis.hasPlaybackControl = true;\\n\\tthis.sourceType = 'empty';\\n\\n\\tthis.filters = [];\\n\\n}\\n\\nAudio.prototype = Object.assign( Object.create( Object3D.prototype ), {\\n\\n\\tconstructor: Audio,\\n\\n\\tgetOutput: function () {\\n\\n\\t\\treturn this.gain;\\n\\n\\t},\\n\\n\\tsetNodeSource: function ( audioNode ) {\\n\\n\\t\\tthis.hasPlaybackControl = false;\\n\\t\\tthis.sourceType = 'audioNode';\\n\\t\\tthis.source = audioNode;\\n\\t\\tthis.connect();\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetMediaElementSource: function ( mediaElement ) {\\n\\n\\t\\tthis.hasPlaybackControl = false;\\n\\t\\tthis.sourceType = 'mediaNode';\\n\\t\\tthis.source = this.context.createMediaElementSource( mediaElement );\\n\\t\\tthis.connect();\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetBuffer: function ( audioBuffer ) {\\n\\n\\t\\tthis.buffer = audioBuffer;\\n\\t\\tthis.sourceType = 'buffer';\\n\\n\\t\\tif ( this.autoplay ) this.play();\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tplay: function () {\\n\\n\\t\\tif ( this.isPlaying === true ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Audio: Audio is already playing.' );\\n\\t\\t\\treturn;\\n\\n\\t\\t}\\n\\n\\t\\tif ( this.hasPlaybackControl === false ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\\n\\t\\t\\treturn;\\n\\n\\t\\t}\\n\\n\\t\\tvar source = this.context.createBufferSource();\\n\\n\\t\\tsource.buffer = this.buffer;\\n\\t\\tsource.loop = this.loop;\\n\\t\\tsource.onended = this.onEnded.bind( this );\\n\\t\\tthis.startTime = this.context.currentTime;\\n\\t\\tsource.start( this.startTime, this.offset );\\n\\n\\t\\tthis.isPlaying = true;\\n\\n\\t\\tthis.source = source;\\n\\n\\t\\tthis.setDetune( this.detune );\\n\\t\\tthis.setPlaybackRate( this.playbackRate );\\n\\n\\t\\treturn this.connect();\\n\\n\\t},\\n\\n\\tpause: function () {\\n\\n\\t\\tif ( this.hasPlaybackControl === false ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\\n\\t\\t\\treturn;\\n\\n\\t\\t}\\n\\n\\t\\tif ( this.isPlaying === true ) {\\n\\n\\t\\t\\tthis.source.stop();\\n\\t\\t\\tthis.source.onended = null;\\n\\t\\t\\tthis.offset += ( this.context.currentTime - this.startTime ) * this.playbackRate;\\n\\t\\t\\tthis.isPlaying = false;\\n\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tstop: function () {\\n\\n\\t\\tif ( this.hasPlaybackControl === false ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\\n\\t\\t\\treturn;\\n\\n\\t\\t}\\n\\n\\t\\tthis.source.stop();\\n\\t\\tthis.source.onended = null;\\n\\t\\tthis.offset = 0;\\n\\t\\tthis.isPlaying = false;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tconnect: function () {\\n\\n\\t\\tif ( this.filters.length > 0 ) {\\n\\n\\t\\t\\tthis.source.connect( this.filters[ 0 ] );\\n\\n\\t\\t\\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\\n\\n\\t\\t\\t\\tthis.filters[ i - 1 ].connect( this.filters[ i ] );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tthis.filters[ this.filters.length - 1 ].connect( this.getOutput() );\\n\\n\\t\\t} else {\\n\\n\\t\\t\\tthis.source.connect( this.getOutput() );\\n\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tdisconnect: function () {\\n\\n\\t\\tif ( this.filters.length > 0 ) {\\n\\n\\t\\t\\tthis.source.disconnect( this.filters[ 0 ] );\\n\\n\\t\\t\\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\\n\\n\\t\\t\\t\\tthis.filters[ i - 1 ].disconnect( this.filters[ i ] );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tthis.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );\\n\\n\\t\\t} else {\\n\\n\\t\\t\\tthis.source.disconnect( this.getOutput() );\\n\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tgetFilters: function () {\\n\\n\\t\\treturn this.filters;\\n\\n\\t},\\n\\n\\tsetFilters: function ( value ) {\\n\\n\\t\\tif ( ! value ) value = [];\\n\\n\\t\\tif ( this.isPlaying === true ) {\\n\\n\\t\\t\\tthis.disconnect();\\n\\t\\t\\tthis.filters = value;\\n\\t\\t\\tthis.connect();\\n\\n\\t\\t} else {\\n\\n\\t\\t\\tthis.filters = value;\\n\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetDetune: function ( value ) {\\n\\n\\t\\tthis.detune = value;\\n\\n\\t\\tif ( this.source.detune === undefined ) return; // only set detune when available\\n\\n\\t\\tif ( this.isPlaying === true ) {\\n\\n\\t\\t\\tthis.source.detune.setTargetAtTime( this.detune, this.context.currentTime, 0.01 );\\n\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tgetDetune: function () {\\n\\n\\t\\treturn this.detune;\\n\\n\\t},\\n\\n\\tgetFilter: function () {\\n\\n\\t\\treturn this.getFilters()[ 0 ];\\n\\n\\t},\\n\\n\\tsetFilter: function ( filter ) {\\n\\n\\t\\treturn this.setFilters( filter ? [ filter ] : [] );\\n\\n\\t},\\n\\n\\tsetPlaybackRate: function ( value ) {\\n\\n\\t\\tif ( this.hasPlaybackControl === false ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\\n\\t\\t\\treturn;\\n\\n\\t\\t}\\n\\n\\t\\tthis.playbackRate = value;\\n\\n\\t\\tif ( this.isPlaying === true ) {\\n\\n\\t\\t\\tthis.source.playbackRate.setTargetAtTime( this.playbackRate, this.context.currentTime, 0.01 );\\n\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tgetPlaybackRate: function () {\\n\\n\\t\\treturn this.playbackRate;\\n\\n\\t},\\n\\n\\tonEnded: function () {\\n\\n\\t\\tthis.isPlaying = false;\\n\\n\\t},\\n\\n\\tgetLoop: function () {\\n\\n\\t\\tif ( this.hasPlaybackControl === false ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\\n\\t\\t\\treturn false;\\n\\n\\t\\t}\\n\\n\\t\\treturn this.loop;\\n\\n\\t},\\n\\n\\tsetLoop: function ( value ) {\\n\\n\\t\\tif ( this.hasPlaybackControl === false ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\\n\\t\\t\\treturn;\\n\\n\\t\\t}\\n\\n\\t\\tthis.loop = value;\\n\\n\\t\\tif ( this.isPlaying === true ) {\\n\\n\\t\\t\\tthis.source.loop = this.loop;\\n\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tgetVolume: function () {\\n\\n\\t\\treturn this.gain.gain.value;\\n\\n\\t},\\n\\n\\tsetVolume: function ( value ) {\\n\\n\\t\\tthis.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\\n\\n\\t\\treturn this;\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\nfunction PositionalAudio( listener ) {\\n\\n\\tAudio.call( this, listener );\\n\\n\\tthis.panner = this.context.createPanner();\\n\\tthis.panner.connect( this.gain );\\n\\n}\\n\\nPositionalAudio.prototype = Object.assign( Object.create( Audio.prototype ), {\\n\\n\\tconstructor: PositionalAudio,\\n\\n\\tgetOutput: function () {\\n\\n\\t\\treturn this.panner;\\n\\n\\t},\\n\\n\\tgetRefDistance: function () {\\n\\n\\t\\treturn this.panner.refDistance;\\n\\n\\t},\\n\\n\\tsetRefDistance: function ( value ) {\\n\\n\\t\\tthis.panner.refDistance = value;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tgetRolloffFactor: function () {\\n\\n\\t\\treturn this.panner.rolloffFactor;\\n\\n\\t},\\n\\n\\tsetRolloffFactor: function ( value ) {\\n\\n\\t\\tthis.panner.rolloffFactor = value;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tgetDistanceModel: function () {\\n\\n\\t\\treturn this.panner.distanceModel;\\n\\n\\t},\\n\\n\\tsetDistanceModel: function ( value ) {\\n\\n\\t\\tthis.panner.distanceModel = value;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tgetMaxDistance: function () {\\n\\n\\t\\treturn this.panner.maxDistance;\\n\\n\\t},\\n\\n\\tsetMaxDistance: function ( value ) {\\n\\n\\t\\tthis.panner.maxDistance = value;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetDirectionalCone: function ( coneInnerAngle, coneOuterAngle, coneOuterGain ) {\\n\\n\\t\\tthis.panner.coneInnerAngle = coneInnerAngle;\\n\\t\\tthis.panner.coneOuterAngle = coneOuterAngle;\\n\\t\\tthis.panner.coneOuterGain = coneOuterGain;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tupdateMatrixWorld: ( function () {\\n\\n\\t\\tvar position = new Vector3();\\n\\t\\tvar quaternion = new Quaternion();\\n\\t\\tvar scale = new Vector3();\\n\\n\\t\\tvar orientation = new Vector3();\\n\\n\\t\\treturn function updateMatrixWorld( force ) {\\n\\n\\t\\t\\tObject3D.prototype.updateMatrixWorld.call( this, force );\\n\\n\\t\\t\\tif ( this.isPlaying === false ) return;\\n\\n\\t\\t\\tthis.matrixWorld.decompose( position, quaternion, scale );\\n\\n\\t\\t\\torientation.set( 0, 0, 1 ).applyQuaternion( quaternion );\\n\\n\\t\\t\\tvar panner = this.panner;\\n\\n\\t\\t\\tif ( panner.positionX ) {\\n\\n\\t\\t\\t\\t// code path for Chrome and Firefox (see #14393)\\n\\n\\t\\t\\t\\tvar endTime = this.context.currentTime + this.listener.timeDelta;\\n\\n\\t\\t\\t\\tpanner.positionX.linearRampToValueAtTime( position.x, endTime );\\n\\t\\t\\t\\tpanner.positionY.linearRampToValueAtTime( position.y, endTime );\\n\\t\\t\\t\\tpanner.positionZ.linearRampToValueAtTime( position.z, endTime );\\n\\t\\t\\t\\tpanner.orientationX.linearRampToValueAtTime( orientation.x, endTime );\\n\\t\\t\\t\\tpanner.orientationY.linearRampToValueAtTime( orientation.y, endTime );\\n\\t\\t\\t\\tpanner.orientationZ.linearRampToValueAtTime( orientation.z, endTime );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tpanner.setPosition( position.x, position.y, position.z );\\n\\t\\t\\t\\tpanner.setOrientation( orientation.x, orientation.y, orientation.z );\\n\\n\\t\\t\\t}\\n\\n\\t\\t};\\n\\n\\t} )()\\n\\n\\n} );\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\nfunction AudioAnalyser( audio, fftSize ) {\\n\\n\\tthis.analyser = audio.context.createAnalyser();\\n\\tthis.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;\\n\\n\\tthis.data = new Uint8Array( this.analyser.frequencyBinCount );\\n\\n\\taudio.getOutput().connect( this.analyser );\\n\\n}\\n\\nObject.assign( AudioAnalyser.prototype, {\\n\\n\\tgetFrequencyData: function () {\\n\\n\\t\\tthis.analyser.getByteFrequencyData( this.data );\\n\\n\\t\\treturn this.data;\\n\\n\\t},\\n\\n\\tgetAverageFrequency: function () {\\n\\n\\t\\tvar value = 0, data = this.getFrequencyData();\\n\\n\\t\\tfor ( var i = 0; i < data.length; i ++ ) {\\n\\n\\t\\t\\tvalue += data[ i ];\\n\\n\\t\\t}\\n\\n\\t\\treturn value / data.length;\\n\\n\\t}\\n\\n} );\\n\\n/**\\n *\\n * Buffered scene graph property that allows weighted accumulation.\\n *\\n *\\n * @author Ben Houston / http://clara.io/\\n * @author David Sarno / http://lighthaus.us/\\n * @author tschw\\n */\\n\\nfunction PropertyMixer( binding, typeName, valueSize ) {\\n\\n\\tthis.binding = binding;\\n\\tthis.valueSize = valueSize;\\n\\n\\tvar bufferType = Float64Array,\\n\\t\\tmixFunction;\\n\\n\\tswitch ( typeName ) {\\n\\n\\t\\tcase 'quaternion':\\n\\t\\t\\tmixFunction = this._slerp;\\n\\t\\t\\tbreak;\\n\\n\\t\\tcase 'string':\\n\\t\\tcase 'bool':\\n\\t\\t\\tbufferType = Array;\\n\\t\\t\\tmixFunction = this._select;\\n\\t\\t\\tbreak;\\n\\n\\t\\tdefault:\\n\\t\\t\\tmixFunction = this._lerp;\\n\\n\\t}\\n\\n\\tthis.buffer = new bufferType( valueSize * 4 );\\n\\t// layout: [ incoming | accu0 | accu1 | orig ]\\n\\t//\\n\\t// interpolators can use .buffer as their .result\\n\\t// the data then goes to 'incoming'\\n\\t//\\n\\t// 'accu0' and 'accu1' are used frame-interleaved for\\n\\t// the cumulative result and are compared to detect\\n\\t// changes\\n\\t//\\n\\t// 'orig' stores the original state of the property\\n\\n\\tthis._mixBufferRegion = mixFunction;\\n\\n\\tthis.cumulativeWeight = 0;\\n\\n\\tthis.useCount = 0;\\n\\tthis.referenceCount = 0;\\n\\n}\\n\\nObject.assign( PropertyMixer.prototype, {\\n\\n\\t// accumulate data in the 'incoming' region into 'accu<i>'\\n\\taccumulate: function ( accuIndex, weight ) {\\n\\n\\t\\t// note: happily accumulating nothing when weight = 0, the caller knows\\n\\t\\t// the weight and shouldn't have made the call in the first place\\n\\n\\t\\tvar buffer = this.buffer,\\n\\t\\t\\tstride = this.valueSize,\\n\\t\\t\\toffset = accuIndex * stride + stride,\\n\\n\\t\\t\\tcurrentWeight = this.cumulativeWeight;\\n\\n\\t\\tif ( currentWeight === 0 ) {\\n\\n\\t\\t\\t// accuN := incoming * weight\\n\\n\\t\\t\\tfor ( var i = 0; i !== stride; ++ i ) {\\n\\n\\t\\t\\t\\tbuffer[ offset + i ] = buffer[ i ];\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tcurrentWeight = weight;\\n\\n\\t\\t} else {\\n\\n\\t\\t\\t// accuN := accuN + incoming * weight\\n\\n\\t\\t\\tcurrentWeight += weight;\\n\\t\\t\\tvar mix = weight / currentWeight;\\n\\t\\t\\tthis._mixBufferRegion( buffer, offset, 0, mix, stride );\\n\\n\\t\\t}\\n\\n\\t\\tthis.cumulativeWeight = currentWeight;\\n\\n\\t},\\n\\n\\t// apply the state of 'accu<i>' to the binding when accus differ\\n\\tapply: function ( accuIndex ) {\\n\\n\\t\\tvar stride = this.valueSize,\\n\\t\\t\\tbuffer = this.buffer,\\n\\t\\t\\toffset = accuIndex * stride + stride,\\n\\n\\t\\t\\tweight = this.cumulativeWeight,\\n\\n\\t\\t\\tbinding = this.binding;\\n\\n\\t\\tthis.cumulativeWeight = 0;\\n\\n\\t\\tif ( weight < 1 ) {\\n\\n\\t\\t\\t// accuN := accuN + original * ( 1 - cumulativeWeight )\\n\\n\\t\\t\\tvar originalValueOffset = stride * 3;\\n\\n\\t\\t\\tthis._mixBufferRegion(\\n\\t\\t\\t\\tbuffer, offset, originalValueOffset, 1 - weight, stride );\\n\\n\\t\\t}\\n\\n\\t\\tfor ( var i = stride, e = stride + stride; i !== e; ++ i ) {\\n\\n\\t\\t\\tif ( buffer[ i ] !== buffer[ i + stride ] ) {\\n\\n\\t\\t\\t\\t// value has changed -> update scene graph\\n\\n\\t\\t\\t\\tbinding.setValue( buffer, offset );\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\t// remember the state of the bound property and copy it to both accus\\n\\tsaveOriginalState: function () {\\n\\n\\t\\tvar binding = this.binding;\\n\\n\\t\\tvar buffer = this.buffer,\\n\\t\\t\\tstride = this.valueSize,\\n\\n\\t\\t\\toriginalValueOffset = stride * 3;\\n\\n\\t\\tbinding.getValue( buffer, originalValueOffset );\\n\\n\\t\\t// accu[0..1] := orig -- initially detect changes against the original\\n\\t\\tfor ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {\\n\\n\\t\\t\\tbuffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];\\n\\n\\t\\t}\\n\\n\\t\\tthis.cumulativeWeight = 0;\\n\\n\\t},\\n\\n\\t// apply the state previously taken via 'saveOriginalState' to the binding\\n\\trestoreOriginalState: function () {\\n\\n\\t\\tvar originalValueOffset = this.valueSize * 3;\\n\\t\\tthis.binding.setValue( this.buffer, originalValueOffset );\\n\\n\\t},\\n\\n\\n\\t// mix functions\\n\\n\\t_select: function ( buffer, dstOffset, srcOffset, t, stride ) {\\n\\n\\t\\tif ( t >= 0.5 ) {\\n\\n\\t\\t\\tfor ( var i = 0; i !== stride; ++ i ) {\\n\\n\\t\\t\\t\\tbuffer[ dstOffset + i ] = buffer[ srcOffset + i ];\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\t_slerp: function ( buffer, dstOffset, srcOffset, t ) {\\n\\n\\t\\tQuaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t );\\n\\n\\t},\\n\\n\\t_lerp: function ( buffer, dstOffset, srcOffset, t, stride ) {\\n\\n\\t\\tvar s = 1 - t;\\n\\n\\t\\tfor ( var i = 0; i !== stride; ++ i ) {\\n\\n\\t\\t\\tvar j = dstOffset + i;\\n\\n\\t\\t\\tbuffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;\\n\\n\\t\\t}\\n\\n\\t}\\n\\n} );\\n\\n/**\\n *\\n * A reference to a real property in the scene graph.\\n *\\n *\\n * @author Ben Houston / http://clara.io/\\n * @author David Sarno / http://lighthaus.us/\\n * @author tschw\\n */\\n\\n// Characters [].:/ are reserved for track binding syntax.\\nvar RESERVED_CHARS_RE = '\\\\\\\\[\\\\\\\\]\\\\\\\\.:\\\\\\\\/';\\n\\nfunction Composite( targetGroup, path, optionalParsedPath ) {\\n\\n\\tvar parsedPath = optionalParsedPath || PropertyBinding.parseTrackName( path );\\n\\n\\tthis._targetGroup = targetGroup;\\n\\tthis._bindings = targetGroup.subscribe_( path, parsedPath );\\n\\n}\\n\\nObject.assign( Composite.prototype, {\\n\\n\\tgetValue: function ( array, offset ) {\\n\\n\\t\\tthis.bind(); // bind all binding\\n\\n\\t\\tvar firstValidIndex = this._targetGroup.nCachedObjects_,\\n\\t\\t\\tbinding = this._bindings[ firstValidIndex ];\\n\\n\\t\\t// and only call .getValue on the first\\n\\t\\tif ( binding !== undefined ) binding.getValue( array, offset );\\n\\n\\t},\\n\\n\\tsetValue: function ( array, offset ) {\\n\\n\\t\\tvar bindings = this._bindings;\\n\\n\\t\\tfor ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\\n\\n\\t\\t\\tbindings[ i ].setValue( array, offset );\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\tbind: function () {\\n\\n\\t\\tvar bindings = this._bindings;\\n\\n\\t\\tfor ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\\n\\n\\t\\t\\tbindings[ i ].bind();\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\tunbind: function () {\\n\\n\\t\\tvar bindings = this._bindings;\\n\\n\\t\\tfor ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\\n\\n\\t\\t\\tbindings[ i ].unbind();\\n\\n\\t\\t}\\n\\n\\t}\\n\\n} );\\n\\n\\nfunction PropertyBinding( rootNode, path, parsedPath ) {\\n\\n\\tthis.path = path;\\n\\tthis.parsedPath = parsedPath || PropertyBinding.parseTrackName( path );\\n\\n\\tthis.node = PropertyBinding.findNode( rootNode, this.parsedPath.nodeName ) || rootNode;\\n\\n\\tthis.rootNode = rootNode;\\n\\n}\\n\\nObject.assign( PropertyBinding, {\\n\\n\\tComposite: Composite,\\n\\n\\tcreate: function ( root, path, parsedPath ) {\\n\\n\\t\\tif ( ! ( root && root.isAnimationObjectGroup ) ) {\\n\\n\\t\\t\\treturn new PropertyBinding( root, path, parsedPath );\\n\\n\\t\\t} else {\\n\\n\\t\\t\\treturn new PropertyBinding.Composite( root, path, parsedPath );\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\t/**\\n\\t * Replaces spaces with underscores and removes unsupported characters from\\n\\t * node names, to ensure compatibility with parseTrackName().\\n\\t *\\n\\t * @param  {string} name Node name to be sanitized.\\n\\t * @return {string}\\n\\t */\\n\\tsanitizeNodeName: ( function () {\\n\\n\\t\\tvar reservedRe = new RegExp( '[' + RESERVED_CHARS_RE + ']', 'g' );\\n\\n\\t\\treturn function sanitizeNodeName( name ) {\\n\\n\\t\\t\\treturn name.replace( /\\\\s/g, '_' ).replace( reservedRe, '' );\\n\\n\\t\\t};\\n\\n\\t}() ),\\n\\n\\tparseTrackName: function () {\\n\\n\\t\\t// Attempts to allow node names from any language. ES5's `\\\\w` regexp matches\\n\\t\\t// only latin characters, and the unicode \\\\p{L} is not yet supported. So\\n\\t\\t// instead, we exclude reserved characters and match everything else.\\n\\t\\tvar wordChar = '[^' + RESERVED_CHARS_RE + ']';\\n\\t\\tvar wordCharOrDot = '[^' + RESERVED_CHARS_RE.replace( '\\\\\\\\.', '' ) + ']';\\n\\n\\t\\t// Parent directories, delimited by '/' or ':'. Currently unused, but must\\n\\t\\t// be matched to parse the rest of the track name.\\n\\t\\tvar directoryRe = /((?:WC+[\\\\/:])*)/.source.replace( 'WC', wordChar );\\n\\n\\t\\t// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.\\n\\t\\tvar nodeRe = /(WCOD+)?/.source.replace( 'WCOD', wordCharOrDot );\\n\\n\\t\\t// Object on target node, and accessor. May not contain reserved\\n\\t\\t// characters. Accessor may contain any character except closing bracket.\\n\\t\\tvar objectRe = /(?:\\\\.(WC+)(?:\\\\[(.+)\\\\])?)?/.source.replace( 'WC', wordChar );\\n\\n\\t\\t// Property and accessor. May not contain reserved characters. Accessor may\\n\\t\\t// contain any non-bracket characters.\\n\\t\\tvar propertyRe = /\\\\.(WC+)(?:\\\\[(.+)\\\\])?/.source.replace( 'WC', wordChar );\\n\\n\\t\\tvar trackRe = new RegExp( ''\\n\\t\\t\\t+ '^'\\n\\t\\t\\t+ directoryRe\\n\\t\\t\\t+ nodeRe\\n\\t\\t\\t+ objectRe\\n\\t\\t\\t+ propertyRe\\n\\t\\t\\t+ '$'\\n\\t\\t);\\n\\n\\t\\tvar supportedObjectNames = [ 'material', 'materials', 'bones' ];\\n\\n\\t\\treturn function parseTrackName( trackName ) {\\n\\n\\t\\t\\tvar matches = trackRe.exec( trackName );\\n\\n\\t\\t\\tif ( ! matches ) {\\n\\n\\t\\t\\t\\tthrow new Error( 'PropertyBinding: Cannot parse trackName: ' + trackName );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tvar results = {\\n\\t\\t\\t\\t// directoryName: matches[ 1 ], // (tschw) currently unused\\n\\t\\t\\t\\tnodeName: matches[ 2 ],\\n\\t\\t\\t\\tobjectName: matches[ 3 ],\\n\\t\\t\\t\\tobjectIndex: matches[ 4 ],\\n\\t\\t\\t\\tpropertyName: matches[ 5 ], // required\\n\\t\\t\\t\\tpropertyIndex: matches[ 6 ]\\n\\t\\t\\t};\\n\\n\\t\\t\\tvar lastDot = results.nodeName && results.nodeName.lastIndexOf( '.' );\\n\\n\\t\\t\\tif ( lastDot !== undefined && lastDot !== - 1 ) {\\n\\n\\t\\t\\t\\tvar objectName = results.nodeName.substring( lastDot + 1 );\\n\\n\\t\\t\\t\\t// Object names must be checked against a whitelist. Otherwise, there\\n\\t\\t\\t\\t// is no way to parse 'foo.bar.baz': 'baz' must be a property, but\\n\\t\\t\\t\\t// 'bar' could be the objectName, or part of a nodeName (which can\\n\\t\\t\\t\\t// include '.' characters).\\n\\t\\t\\t\\tif ( supportedObjectNames.indexOf( objectName ) !== - 1 ) {\\n\\n\\t\\t\\t\\t\\tresults.nodeName = results.nodeName.substring( 0, lastDot );\\n\\t\\t\\t\\t\\tresults.objectName = objectName;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( results.propertyName === null || results.propertyName.length === 0 ) {\\n\\n\\t\\t\\t\\tthrow new Error( 'PropertyBinding: can not parse propertyName from trackName: ' + trackName );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn results;\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\tfindNode: function ( root, nodeName ) {\\n\\n\\t\\tif ( ! nodeName || nodeName === \\\"\\\" || nodeName === \\\"root\\\" || nodeName === \\\".\\\" || nodeName === - 1 || nodeName === root.name || nodeName === root.uuid ) {\\n\\n\\t\\t\\treturn root;\\n\\n\\t\\t}\\n\\n\\t\\t// search into skeleton bones.\\n\\t\\tif ( root.skeleton ) {\\n\\n\\t\\t\\tvar bone = root.skeleton.getBoneByName( nodeName );\\n\\n\\t\\t\\tif ( bone !== undefined ) {\\n\\n\\t\\t\\t\\treturn bone;\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\t// search into node subtree.\\n\\t\\tif ( root.children ) {\\n\\n\\t\\t\\tvar searchNodeSubtree = function ( children ) {\\n\\n\\t\\t\\t\\tfor ( var i = 0; i < children.length; i ++ ) {\\n\\n\\t\\t\\t\\t\\tvar childNode = children[ i ];\\n\\n\\t\\t\\t\\t\\tif ( childNode.name === nodeName || childNode.uuid === nodeName ) {\\n\\n\\t\\t\\t\\t\\t\\treturn childNode;\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tvar result = searchNodeSubtree( childNode.children );\\n\\n\\t\\t\\t\\t\\tif ( result ) return result;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\treturn null;\\n\\n\\t\\t\\t};\\n\\n\\t\\t\\tvar subTreeNode = searchNodeSubtree( root.children );\\n\\n\\t\\t\\tif ( subTreeNode ) {\\n\\n\\t\\t\\t\\treturn subTreeNode;\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\treturn null;\\n\\n\\t}\\n\\n} );\\n\\nObject.assign( PropertyBinding.prototype, { // prototype, continued\\n\\n\\t// these are used to \\\"bind\\\" a nonexistent property\\n\\t_getValue_unavailable: function () {},\\n\\t_setValue_unavailable: function () {},\\n\\n\\tBindingType: {\\n\\t\\tDirect: 0,\\n\\t\\tEntireArray: 1,\\n\\t\\tArrayElement: 2,\\n\\t\\tHasFromToArray: 3\\n\\t},\\n\\n\\tVersioning: {\\n\\t\\tNone: 0,\\n\\t\\tNeedsUpdate: 1,\\n\\t\\tMatrixWorldNeedsUpdate: 2\\n\\t},\\n\\n\\tGetterByBindingType: [\\n\\n\\t\\tfunction getValue_direct( buffer, offset ) {\\n\\n\\t\\t\\tbuffer[ offset ] = this.node[ this.propertyName ];\\n\\n\\t\\t},\\n\\n\\t\\tfunction getValue_array( buffer, offset ) {\\n\\n\\t\\t\\tvar source = this.resolvedProperty;\\n\\n\\t\\t\\tfor ( var i = 0, n = source.length; i !== n; ++ i ) {\\n\\n\\t\\t\\t\\tbuffer[ offset ++ ] = source[ i ];\\n\\n\\t\\t\\t}\\n\\n\\t\\t},\\n\\n\\t\\tfunction getValue_arrayElement( buffer, offset ) {\\n\\n\\t\\t\\tbuffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];\\n\\n\\t\\t},\\n\\n\\t\\tfunction getValue_toArray( buffer, offset ) {\\n\\n\\t\\t\\tthis.resolvedProperty.toArray( buffer, offset );\\n\\n\\t\\t}\\n\\n\\t],\\n\\n\\tSetterByBindingTypeAndVersioning: [\\n\\n\\t\\t[\\n\\t\\t\\t// Direct\\n\\n\\t\\t\\tfunction setValue_direct( buffer, offset ) {\\n\\n\\t\\t\\t\\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\\n\\n\\t\\t\\t},\\n\\n\\t\\t\\tfunction setValue_direct_setNeedsUpdate( buffer, offset ) {\\n\\n\\t\\t\\t\\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\\n\\t\\t\\t\\tthis.targetObject.needsUpdate = true;\\n\\n\\t\\t\\t},\\n\\n\\t\\t\\tfunction setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {\\n\\n\\t\\t\\t\\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\\n\\t\\t\\t\\tthis.targetObject.matrixWorldNeedsUpdate = true;\\n\\n\\t\\t\\t}\\n\\n\\t\\t], [\\n\\n\\t\\t\\t// EntireArray\\n\\n\\t\\t\\tfunction setValue_array( buffer, offset ) {\\n\\n\\t\\t\\t\\tvar dest = this.resolvedProperty;\\n\\n\\t\\t\\t\\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\\n\\n\\t\\t\\t\\t\\tdest[ i ] = buffer[ offset ++ ];\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t},\\n\\n\\t\\t\\tfunction setValue_array_setNeedsUpdate( buffer, offset ) {\\n\\n\\t\\t\\t\\tvar dest = this.resolvedProperty;\\n\\n\\t\\t\\t\\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\\n\\n\\t\\t\\t\\t\\tdest[ i ] = buffer[ offset ++ ];\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tthis.targetObject.needsUpdate = true;\\n\\n\\t\\t\\t},\\n\\n\\t\\t\\tfunction setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {\\n\\n\\t\\t\\t\\tvar dest = this.resolvedProperty;\\n\\n\\t\\t\\t\\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\\n\\n\\t\\t\\t\\t\\tdest[ i ] = buffer[ offset ++ ];\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tthis.targetObject.matrixWorldNeedsUpdate = true;\\n\\n\\t\\t\\t}\\n\\n\\t\\t], [\\n\\n\\t\\t\\t// ArrayElement\\n\\n\\t\\t\\tfunction setValue_arrayElement( buffer, offset ) {\\n\\n\\t\\t\\t\\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\\n\\n\\t\\t\\t},\\n\\n\\t\\t\\tfunction setValue_arrayElement_setNeedsUpdate( buffer, offset ) {\\n\\n\\t\\t\\t\\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\\n\\t\\t\\t\\tthis.targetObject.needsUpdate = true;\\n\\n\\t\\t\\t},\\n\\n\\t\\t\\tfunction setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {\\n\\n\\t\\t\\t\\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\\n\\t\\t\\t\\tthis.targetObject.matrixWorldNeedsUpdate = true;\\n\\n\\t\\t\\t}\\n\\n\\t\\t], [\\n\\n\\t\\t\\t// HasToFromArray\\n\\n\\t\\t\\tfunction setValue_fromArray( buffer, offset ) {\\n\\n\\t\\t\\t\\tthis.resolvedProperty.fromArray( buffer, offset );\\n\\n\\t\\t\\t},\\n\\n\\t\\t\\tfunction setValue_fromArray_setNeedsUpdate( buffer, offset ) {\\n\\n\\t\\t\\t\\tthis.resolvedProperty.fromArray( buffer, offset );\\n\\t\\t\\t\\tthis.targetObject.needsUpdate = true;\\n\\n\\t\\t\\t},\\n\\n\\t\\t\\tfunction setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {\\n\\n\\t\\t\\t\\tthis.resolvedProperty.fromArray( buffer, offset );\\n\\t\\t\\t\\tthis.targetObject.matrixWorldNeedsUpdate = true;\\n\\n\\t\\t\\t}\\n\\n\\t\\t]\\n\\n\\t],\\n\\n\\tgetValue: function getValue_unbound( targetArray, offset ) {\\n\\n\\t\\tthis.bind();\\n\\t\\tthis.getValue( targetArray, offset );\\n\\n\\t\\t// Note: This class uses a State pattern on a per-method basis:\\n\\t\\t// 'bind' sets 'this.getValue' / 'setValue' and shadows the\\n\\t\\t// prototype version of these methods with one that represents\\n\\t\\t// the bound state. When the property is not found, the methods\\n\\t\\t// become no-ops.\\n\\n\\t},\\n\\n\\tsetValue: function getValue_unbound( sourceArray, offset ) {\\n\\n\\t\\tthis.bind();\\n\\t\\tthis.setValue( sourceArray, offset );\\n\\n\\t},\\n\\n\\t// create getter / setter pair for a property in the scene graph\\n\\tbind: function () {\\n\\n\\t\\tvar targetObject = this.node,\\n\\t\\t\\tparsedPath = this.parsedPath,\\n\\n\\t\\t\\tobjectName = parsedPath.objectName,\\n\\t\\t\\tpropertyName = parsedPath.propertyName,\\n\\t\\t\\tpropertyIndex = parsedPath.propertyIndex;\\n\\n\\t\\tif ( ! targetObject ) {\\n\\n\\t\\t\\ttargetObject = PropertyBinding.findNode( this.rootNode, parsedPath.nodeName ) || this.rootNode;\\n\\n\\t\\t\\tthis.node = targetObject;\\n\\n\\t\\t}\\n\\n\\t\\t// set fail state so we can just 'return' on error\\n\\t\\tthis.getValue = this._getValue_unavailable;\\n\\t\\tthis.setValue = this._setValue_unavailable;\\n\\n\\t\\t// ensure there is a value node\\n\\t\\tif ( ! targetObject ) {\\n\\n\\t\\t\\tconsole.error( 'THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\\\\'t found.' );\\n\\t\\t\\treturn;\\n\\n\\t\\t}\\n\\n\\t\\tif ( objectName ) {\\n\\n\\t\\t\\tvar objectIndex = parsedPath.objectIndex;\\n\\n\\t\\t\\t// special cases were we need to reach deeper into the hierarchy to get the face materials....\\n\\t\\t\\tswitch ( objectName ) {\\n\\n\\t\\t\\t\\tcase 'materials':\\n\\n\\t\\t\\t\\t\\tif ( ! targetObject.material ) {\\n\\n\\t\\t\\t\\t\\t\\tconsole.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );\\n\\t\\t\\t\\t\\t\\treturn;\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tif ( ! targetObject.material.materials ) {\\n\\n\\t\\t\\t\\t\\t\\tconsole.error( 'THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this );\\n\\t\\t\\t\\t\\t\\treturn;\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\ttargetObject = targetObject.material.materials;\\n\\n\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\tcase 'bones':\\n\\n\\t\\t\\t\\t\\tif ( ! targetObject.skeleton ) {\\n\\n\\t\\t\\t\\t\\t\\tconsole.error( 'THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this );\\n\\t\\t\\t\\t\\t\\treturn;\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// potential future optimization: skip this if propertyIndex is already an integer\\n\\t\\t\\t\\t\\t// and convert the integer string to a true integer.\\n\\n\\t\\t\\t\\t\\ttargetObject = targetObject.skeleton.bones;\\n\\n\\t\\t\\t\\t\\t// support resolving morphTarget names into indices.\\n\\t\\t\\t\\t\\tfor ( var i = 0; i < targetObject.length; i ++ ) {\\n\\n\\t\\t\\t\\t\\t\\tif ( targetObject[ i ].name === objectIndex ) {\\n\\n\\t\\t\\t\\t\\t\\t\\tobjectIndex = i;\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\tdefault:\\n\\n\\t\\t\\t\\t\\tif ( targetObject[ objectName ] === undefined ) {\\n\\n\\t\\t\\t\\t\\t\\tconsole.error( 'THREE.PropertyBinding: Can not bind to objectName of node undefined.', this );\\n\\t\\t\\t\\t\\t\\treturn;\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\ttargetObject = targetObject[ objectName ];\\n\\n\\t\\t\\t}\\n\\n\\n\\t\\t\\tif ( objectIndex !== undefined ) {\\n\\n\\t\\t\\t\\tif ( targetObject[ objectIndex ] === undefined ) {\\n\\n\\t\\t\\t\\t\\tconsole.error( 'THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject );\\n\\t\\t\\t\\t\\treturn;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\ttargetObject = targetObject[ objectIndex ];\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\t// resolve property\\n\\t\\tvar nodeProperty = targetObject[ propertyName ];\\n\\n\\t\\tif ( nodeProperty === undefined ) {\\n\\n\\t\\t\\tvar nodeName = parsedPath.nodeName;\\n\\n\\t\\t\\tconsole.error( 'THREE.PropertyBinding: Trying to update property for track: ' + nodeName +\\n\\t\\t\\t\\t'.' + propertyName + ' but it wasn\\\\'t found.', targetObject );\\n\\t\\t\\treturn;\\n\\n\\t\\t}\\n\\n\\t\\t// determine versioning scheme\\n\\t\\tvar versioning = this.Versioning.None;\\n\\n\\t\\tthis.targetObject = targetObject;\\n\\n\\t\\tif ( targetObject.needsUpdate !== undefined ) { // material\\n\\n\\t\\t\\tversioning = this.Versioning.NeedsUpdate;\\n\\n\\t\\t} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform\\n\\n\\t\\t\\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\\n\\n\\t\\t}\\n\\n\\t\\t// determine how the property gets bound\\n\\t\\tvar bindingType = this.BindingType.Direct;\\n\\n\\t\\tif ( propertyIndex !== undefined ) {\\n\\n\\t\\t\\t// access a sub element of the property array (only primitives are supported right now)\\n\\n\\t\\t\\tif ( propertyName === \\\"morphTargetInfluences\\\" ) {\\n\\n\\t\\t\\t\\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\\n\\n\\t\\t\\t\\t// support resolving morphTarget names into indices.\\n\\t\\t\\t\\tif ( ! targetObject.geometry ) {\\n\\n\\t\\t\\t\\t\\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this );\\n\\t\\t\\t\\t\\treturn;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif ( targetObject.geometry.isBufferGeometry ) {\\n\\n\\t\\t\\t\\t\\tif ( ! targetObject.geometry.morphAttributes ) {\\n\\n\\t\\t\\t\\t\\t\\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this );\\n\\t\\t\\t\\t\\t\\treturn;\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tfor ( var i = 0; i < this.node.geometry.morphAttributes.position.length; i ++ ) {\\n\\n\\t\\t\\t\\t\\t\\tif ( targetObject.geometry.morphAttributes.position[ i ].name === propertyIndex ) {\\n\\n\\t\\t\\t\\t\\t\\t\\tpropertyIndex = i;\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\tif ( ! targetObject.geometry.morphTargets ) {\\n\\n\\t\\t\\t\\t\\t\\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.', this );\\n\\t\\t\\t\\t\\t\\treturn;\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tfor ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {\\n\\n\\t\\t\\t\\t\\t\\tif ( targetObject.geometry.morphTargets[ i ].name === propertyIndex ) {\\n\\n\\t\\t\\t\\t\\t\\t\\tpropertyIndex = i;\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tbindingType = this.BindingType.ArrayElement;\\n\\n\\t\\t\\tthis.resolvedProperty = nodeProperty;\\n\\t\\t\\tthis.propertyIndex = propertyIndex;\\n\\n\\t\\t} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {\\n\\n\\t\\t\\t// must use copy for Object3D.Euler/Quaternion\\n\\n\\t\\t\\tbindingType = this.BindingType.HasFromToArray;\\n\\n\\t\\t\\tthis.resolvedProperty = nodeProperty;\\n\\n\\t\\t} else if ( Array.isArray( nodeProperty ) ) {\\n\\n\\t\\t\\tbindingType = this.BindingType.EntireArray;\\n\\n\\t\\t\\tthis.resolvedProperty = nodeProperty;\\n\\n\\t\\t} else {\\n\\n\\t\\t\\tthis.propertyName = propertyName;\\n\\n\\t\\t}\\n\\n\\t\\t// select getter / setter\\n\\t\\tthis.getValue = this.GetterByBindingType[ bindingType ];\\n\\t\\tthis.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];\\n\\n\\t},\\n\\n\\tunbind: function () {\\n\\n\\t\\tthis.node = null;\\n\\n\\t\\t// back to the prototype version of getValue / setValue\\n\\t\\t// note: avoiding to mutate the shape of 'this' via 'delete'\\n\\t\\tthis.getValue = this._getValue_unbound;\\n\\t\\tthis.setValue = this._setValue_unbound;\\n\\n\\t}\\n\\n} );\\n\\n//!\\\\ DECLARE ALIAS AFTER assign prototype !\\nObject.assign( PropertyBinding.prototype, {\\n\\n\\t// initial state of these methods that calls 'bind'\\n\\t_getValue_unbound: PropertyBinding.prototype.getValue,\\n\\t_setValue_unbound: PropertyBinding.prototype.setValue,\\n\\n} );\\n\\n/**\\n *\\n * A group of objects that receives a shared animation state.\\n *\\n * Usage:\\n *\\n *  - Add objects you would otherwise pass as 'root' to the\\n *    constructor or the .clipAction method of AnimationMixer.\\n *\\n *  - Instead pass this object as 'root'.\\n *\\n *  - You can also add and remove objects later when the mixer\\n *    is running.\\n *\\n * Note:\\n *\\n *    Objects of this class appear as one object to the mixer,\\n *    so cache control of the individual objects must be done\\n *    on the group.\\n *\\n * Limitation:\\n *\\n *  - The animated properties must be compatible among the\\n *    all objects in the group.\\n *\\n *  - A single property can either be controlled through a\\n *    target group or directly, but not both.\\n *\\n * @author tschw\\n */\\n\\nfunction AnimationObjectGroup() {\\n\\n\\tthis.uuid = _Math.generateUUID();\\n\\n\\t// cached objects followed by the active ones\\n\\tthis._objects = Array.prototype.slice.call( arguments );\\n\\n\\tthis.nCachedObjects_ = 0; // threshold\\n\\t// note: read by PropertyBinding.Composite\\n\\n\\tvar indices = {};\\n\\tthis._indicesByUUID = indices; // for bookkeeping\\n\\n\\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\\n\\n\\t\\tindices[ arguments[ i ].uuid ] = i;\\n\\n\\t}\\n\\n\\tthis._paths = []; // inside: string\\n\\tthis._parsedPaths = []; // inside: { we don't care, here }\\n\\tthis._bindings = []; // inside: Array< PropertyBinding >\\n\\tthis._bindingsIndicesByPath = {}; // inside: indices in these arrays\\n\\n\\tvar scope = this;\\n\\n\\tthis.stats = {\\n\\n\\t\\tobjects: {\\n\\t\\t\\tget total() {\\n\\n\\t\\t\\t\\treturn scope._objects.length;\\n\\n\\t\\t\\t},\\n\\t\\t\\tget inUse() {\\n\\n\\t\\t\\t\\treturn this.total - scope.nCachedObjects_;\\n\\n\\t\\t\\t}\\n\\t\\t},\\n\\t\\tget bindingsPerObject() {\\n\\n\\t\\t\\treturn scope._bindings.length;\\n\\n\\t\\t}\\n\\n\\t};\\n\\n}\\n\\nObject.assign( AnimationObjectGroup.prototype, {\\n\\n\\tisAnimationObjectGroup: true,\\n\\n\\tadd: function () {\\n\\n\\t\\tvar objects = this._objects,\\n\\t\\t\\tnObjects = objects.length,\\n\\t\\t\\tnCachedObjects = this.nCachedObjects_,\\n\\t\\t\\tindicesByUUID = this._indicesByUUID,\\n\\t\\t\\tpaths = this._paths,\\n\\t\\t\\tparsedPaths = this._parsedPaths,\\n\\t\\t\\tbindings = this._bindings,\\n\\t\\t\\tnBindings = bindings.length,\\n\\t\\t\\tknownObject = undefined;\\n\\n\\t\\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\\n\\n\\t\\t\\tvar object = arguments[ i ],\\n\\t\\t\\t\\tuuid = object.uuid,\\n\\t\\t\\t\\tindex = indicesByUUID[ uuid ];\\n\\n\\t\\t\\tif ( index === undefined ) {\\n\\n\\t\\t\\t\\t// unknown object -> add it to the ACTIVE region\\n\\n\\t\\t\\t\\tindex = nObjects ++;\\n\\t\\t\\t\\tindicesByUUID[ uuid ] = index;\\n\\t\\t\\t\\tobjects.push( object );\\n\\n\\t\\t\\t\\t// accounting is done, now do the same for all bindings\\n\\n\\t\\t\\t\\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\\n\\n\\t\\t\\t\\t\\tbindings[ j ].push( new PropertyBinding( object, paths[ j ], parsedPaths[ j ] ) );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t} else if ( index < nCachedObjects ) {\\n\\n\\t\\t\\t\\tknownObject = objects[ index ];\\n\\n\\t\\t\\t\\t// move existing object to the ACTIVE region\\n\\n\\t\\t\\t\\tvar firstActiveIndex = -- nCachedObjects,\\n\\t\\t\\t\\t\\tlastCachedObject = objects[ firstActiveIndex ];\\n\\n\\t\\t\\t\\tindicesByUUID[ lastCachedObject.uuid ] = index;\\n\\t\\t\\t\\tobjects[ index ] = lastCachedObject;\\n\\n\\t\\t\\t\\tindicesByUUID[ uuid ] = firstActiveIndex;\\n\\t\\t\\t\\tobjects[ firstActiveIndex ] = object;\\n\\n\\t\\t\\t\\t// accounting is done, now do the same for all bindings\\n\\n\\t\\t\\t\\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\\n\\n\\t\\t\\t\\t\\tvar bindingsForPath = bindings[ j ],\\n\\t\\t\\t\\t\\t\\tlastCached = bindingsForPath[ firstActiveIndex ],\\n\\t\\t\\t\\t\\t\\tbinding = bindingsForPath[ index ];\\n\\n\\t\\t\\t\\t\\tbindingsForPath[ index ] = lastCached;\\n\\n\\t\\t\\t\\t\\tif ( binding === undefined ) {\\n\\n\\t\\t\\t\\t\\t\\t// since we do not bother to create new bindings\\n\\t\\t\\t\\t\\t\\t// for objects that are cached, the binding may\\n\\t\\t\\t\\t\\t\\t// or may not exist\\n\\n\\t\\t\\t\\t\\t\\tbinding = new PropertyBinding( object, paths[ j ], parsedPaths[ j ] );\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tbindingsForPath[ firstActiveIndex ] = binding;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t} else if ( objects[ index ] !== knownObject ) {\\n\\n\\t\\t\\t\\tconsole.error( 'THREE.AnimationObjectGroup: Different objects with the same UUID ' +\\n\\t\\t\\t\\t\\t'detected. Clean the caches or recreate your infrastructure when reloading scenes.' );\\n\\n\\t\\t\\t} // else the object is already where we want it to be\\n\\n\\t\\t} // for arguments\\n\\n\\t\\tthis.nCachedObjects_ = nCachedObjects;\\n\\n\\t},\\n\\n\\tremove: function () {\\n\\n\\t\\tvar objects = this._objects,\\n\\t\\t\\tnCachedObjects = this.nCachedObjects_,\\n\\t\\t\\tindicesByUUID = this._indicesByUUID,\\n\\t\\t\\tbindings = this._bindings,\\n\\t\\t\\tnBindings = bindings.length;\\n\\n\\t\\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\\n\\n\\t\\t\\tvar object = arguments[ i ],\\n\\t\\t\\t\\tuuid = object.uuid,\\n\\t\\t\\t\\tindex = indicesByUUID[ uuid ];\\n\\n\\t\\t\\tif ( index !== undefined && index >= nCachedObjects ) {\\n\\n\\t\\t\\t\\t// move existing object into the CACHED region\\n\\n\\t\\t\\t\\tvar lastCachedIndex = nCachedObjects ++,\\n\\t\\t\\t\\t\\tfirstActiveObject = objects[ lastCachedIndex ];\\n\\n\\t\\t\\t\\tindicesByUUID[ firstActiveObject.uuid ] = index;\\n\\t\\t\\t\\tobjects[ index ] = firstActiveObject;\\n\\n\\t\\t\\t\\tindicesByUUID[ uuid ] = lastCachedIndex;\\n\\t\\t\\t\\tobjects[ lastCachedIndex ] = object;\\n\\n\\t\\t\\t\\t// accounting is done, now do the same for all bindings\\n\\n\\t\\t\\t\\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\\n\\n\\t\\t\\t\\t\\tvar bindingsForPath = bindings[ j ],\\n\\t\\t\\t\\t\\t\\tfirstActive = bindingsForPath[ lastCachedIndex ],\\n\\t\\t\\t\\t\\t\\tbinding = bindingsForPath[ index ];\\n\\n\\t\\t\\t\\t\\tbindingsForPath[ index ] = firstActive;\\n\\t\\t\\t\\t\\tbindingsForPath[ lastCachedIndex ] = binding;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t} // for arguments\\n\\n\\t\\tthis.nCachedObjects_ = nCachedObjects;\\n\\n\\t},\\n\\n\\t// remove & forget\\n\\tuncache: function () {\\n\\n\\t\\tvar objects = this._objects,\\n\\t\\t\\tnObjects = objects.length,\\n\\t\\t\\tnCachedObjects = this.nCachedObjects_,\\n\\t\\t\\tindicesByUUID = this._indicesByUUID,\\n\\t\\t\\tbindings = this._bindings,\\n\\t\\t\\tnBindings = bindings.length;\\n\\n\\t\\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\\n\\n\\t\\t\\tvar object = arguments[ i ],\\n\\t\\t\\t\\tuuid = object.uuid,\\n\\t\\t\\t\\tindex = indicesByUUID[ uuid ];\\n\\n\\t\\t\\tif ( index !== undefined ) {\\n\\n\\t\\t\\t\\tdelete indicesByUUID[ uuid ];\\n\\n\\t\\t\\t\\tif ( index < nCachedObjects ) {\\n\\n\\t\\t\\t\\t\\t// object is cached, shrink the CACHED region\\n\\n\\t\\t\\t\\t\\tvar firstActiveIndex = -- nCachedObjects,\\n\\t\\t\\t\\t\\t\\tlastCachedObject = objects[ firstActiveIndex ],\\n\\t\\t\\t\\t\\t\\tlastIndex = -- nObjects,\\n\\t\\t\\t\\t\\t\\tlastObject = objects[ lastIndex ];\\n\\n\\t\\t\\t\\t\\t// last cached object takes this object's place\\n\\t\\t\\t\\t\\tindicesByUUID[ lastCachedObject.uuid ] = index;\\n\\t\\t\\t\\t\\tobjects[ index ] = lastCachedObject;\\n\\n\\t\\t\\t\\t\\t// last object goes to the activated slot and pop\\n\\t\\t\\t\\t\\tindicesByUUID[ lastObject.uuid ] = firstActiveIndex;\\n\\t\\t\\t\\t\\tobjects[ firstActiveIndex ] = lastObject;\\n\\t\\t\\t\\t\\tobjects.pop();\\n\\n\\t\\t\\t\\t\\t// accounting is done, now do the same for all bindings\\n\\n\\t\\t\\t\\t\\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\\n\\n\\t\\t\\t\\t\\t\\tvar bindingsForPath = bindings[ j ],\\n\\t\\t\\t\\t\\t\\t\\tlastCached = bindingsForPath[ firstActiveIndex ],\\n\\t\\t\\t\\t\\t\\t\\tlast = bindingsForPath[ lastIndex ];\\n\\n\\t\\t\\t\\t\\t\\tbindingsForPath[ index ] = lastCached;\\n\\t\\t\\t\\t\\t\\tbindingsForPath[ firstActiveIndex ] = last;\\n\\t\\t\\t\\t\\t\\tbindingsForPath.pop();\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\t// object is active, just swap with the last and pop\\n\\n\\t\\t\\t\\t\\tvar lastIndex = -- nObjects,\\n\\t\\t\\t\\t\\t\\tlastObject = objects[ lastIndex ];\\n\\n\\t\\t\\t\\t\\tindicesByUUID[ lastObject.uuid ] = index;\\n\\t\\t\\t\\t\\tobjects[ index ] = lastObject;\\n\\t\\t\\t\\t\\tobjects.pop();\\n\\n\\t\\t\\t\\t\\t// accounting is done, now do the same for all bindings\\n\\n\\t\\t\\t\\t\\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\\n\\n\\t\\t\\t\\t\\t\\tvar bindingsForPath = bindings[ j ];\\n\\n\\t\\t\\t\\t\\t\\tbindingsForPath[ index ] = bindingsForPath[ lastIndex ];\\n\\t\\t\\t\\t\\t\\tbindingsForPath.pop();\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t} // cached or active\\n\\n\\t\\t\\t} // if object is known\\n\\n\\t\\t} // for arguments\\n\\n\\t\\tthis.nCachedObjects_ = nCachedObjects;\\n\\n\\t},\\n\\n\\t// Internal interface used by befriended PropertyBinding.Composite:\\n\\n\\tsubscribe_: function ( path, parsedPath ) {\\n\\n\\t\\t// returns an array of bindings for the given path that is changed\\n\\t\\t// according to the contained objects in the group\\n\\n\\t\\tvar indicesByPath = this._bindingsIndicesByPath,\\n\\t\\t\\tindex = indicesByPath[ path ],\\n\\t\\t\\tbindings = this._bindings;\\n\\n\\t\\tif ( index !== undefined ) return bindings[ index ];\\n\\n\\t\\tvar paths = this._paths,\\n\\t\\t\\tparsedPaths = this._parsedPaths,\\n\\t\\t\\tobjects = this._objects,\\n\\t\\t\\tnObjects = objects.length,\\n\\t\\t\\tnCachedObjects = this.nCachedObjects_,\\n\\t\\t\\tbindingsForPath = new Array( nObjects );\\n\\n\\t\\tindex = bindings.length;\\n\\n\\t\\tindicesByPath[ path ] = index;\\n\\n\\t\\tpaths.push( path );\\n\\t\\tparsedPaths.push( parsedPath );\\n\\t\\tbindings.push( bindingsForPath );\\n\\n\\t\\tfor ( var i = nCachedObjects, n = objects.length; i !== n; ++ i ) {\\n\\n\\t\\t\\tvar object = objects[ i ];\\n\\t\\t\\tbindingsForPath[ i ] = new PropertyBinding( object, path, parsedPath );\\n\\n\\t\\t}\\n\\n\\t\\treturn bindingsForPath;\\n\\n\\t},\\n\\n\\tunsubscribe_: function ( path ) {\\n\\n\\t\\t// tells the group to forget about a property path and no longer\\n\\t\\t// update the array previously obtained with 'subscribe_'\\n\\n\\t\\tvar indicesByPath = this._bindingsIndicesByPath,\\n\\t\\t\\tindex = indicesByPath[ path ];\\n\\n\\t\\tif ( index !== undefined ) {\\n\\n\\t\\t\\tvar paths = this._paths,\\n\\t\\t\\t\\tparsedPaths = this._parsedPaths,\\n\\t\\t\\t\\tbindings = this._bindings,\\n\\t\\t\\t\\tlastBindingsIndex = bindings.length - 1,\\n\\t\\t\\t\\tlastBindings = bindings[ lastBindingsIndex ],\\n\\t\\t\\t\\tlastBindingsPath = path[ lastBindingsIndex ];\\n\\n\\t\\t\\tindicesByPath[ lastBindingsPath ] = index;\\n\\n\\t\\t\\tbindings[ index ] = lastBindings;\\n\\t\\t\\tbindings.pop();\\n\\n\\t\\t\\tparsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];\\n\\t\\t\\tparsedPaths.pop();\\n\\n\\t\\t\\tpaths[ index ] = paths[ lastBindingsIndex ];\\n\\t\\t\\tpaths.pop();\\n\\n\\t\\t}\\n\\n\\t}\\n\\n} );\\n\\n/**\\n *\\n * Action provided by AnimationMixer for scheduling clip playback on specific\\n * objects.\\n *\\n * @author Ben Houston / http://clara.io/\\n * @author David Sarno / http://lighthaus.us/\\n * @author tschw\\n *\\n */\\n\\nfunction AnimationAction( mixer, clip, localRoot ) {\\n\\n\\tthis._mixer = mixer;\\n\\tthis._clip = clip;\\n\\tthis._localRoot = localRoot || null;\\n\\n\\tvar tracks = clip.tracks,\\n\\t\\tnTracks = tracks.length,\\n\\t\\tinterpolants = new Array( nTracks );\\n\\n\\tvar interpolantSettings = {\\n\\t\\tendingStart: ZeroCurvatureEnding,\\n\\t\\tendingEnd: ZeroCurvatureEnding\\n\\t};\\n\\n\\tfor ( var i = 0; i !== nTracks; ++ i ) {\\n\\n\\t\\tvar interpolant = tracks[ i ].createInterpolant( null );\\n\\t\\tinterpolants[ i ] = interpolant;\\n\\t\\tinterpolant.settings = interpolantSettings;\\n\\n\\t}\\n\\n\\tthis._interpolantSettings = interpolantSettings;\\n\\n\\tthis._interpolants = interpolants; // bound by the mixer\\n\\n\\t// inside: PropertyMixer (managed by the mixer)\\n\\tthis._propertyBindings = new Array( nTracks );\\n\\n\\tthis._cacheIndex = null; // for the memory manager\\n\\tthis._byClipCacheIndex = null; // for the memory manager\\n\\n\\tthis._timeScaleInterpolant = null;\\n\\tthis._weightInterpolant = null;\\n\\n\\tthis.loop = LoopRepeat;\\n\\tthis._loopCount = - 1;\\n\\n\\t// global mixer time when the action is to be started\\n\\t// it's set back to 'null' upon start of the action\\n\\tthis._startTime = null;\\n\\n\\t// scaled local time of the action\\n\\t// gets clamped or wrapped to 0..clip.duration according to loop\\n\\tthis.time = 0;\\n\\n\\tthis.timeScale = 1;\\n\\tthis._effectiveTimeScale = 1;\\n\\n\\tthis.weight = 1;\\n\\tthis._effectiveWeight = 1;\\n\\n\\tthis.repetitions = Infinity; // no. of repetitions when looping\\n\\n\\tthis.paused = false; // true -> zero effective time scale\\n\\tthis.enabled = true; // false -> zero effective weight\\n\\n\\tthis.clampWhenFinished = false;// keep feeding the last frame?\\n\\n\\tthis.zeroSlopeAtStart = true;// for smooth interpolation w/o separate\\n\\tthis.zeroSlopeAtEnd = true;// clips for start, loop and end\\n\\n}\\n\\nObject.assign( AnimationAction.prototype, {\\n\\n\\t// State & Scheduling\\n\\n\\tplay: function () {\\n\\n\\t\\tthis._mixer._activateAction( this );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tstop: function () {\\n\\n\\t\\tthis._mixer._deactivateAction( this );\\n\\n\\t\\treturn this.reset();\\n\\n\\t},\\n\\n\\treset: function () {\\n\\n\\t\\tthis.paused = false;\\n\\t\\tthis.enabled = true;\\n\\n\\t\\tthis.time = 0; // restart clip\\n\\t\\tthis._loopCount = - 1;// forget previous loops\\n\\t\\tthis._startTime = null;// forget scheduling\\n\\n\\t\\treturn this.stopFading().stopWarping();\\n\\n\\t},\\n\\n\\tisRunning: function () {\\n\\n\\t\\treturn this.enabled && ! this.paused && this.timeScale !== 0 &&\\n\\t\\t\\tthis._startTime === null && this._mixer._isActiveAction( this );\\n\\n\\t},\\n\\n\\t// return true when play has been called\\n\\tisScheduled: function () {\\n\\n\\t\\treturn this._mixer._isActiveAction( this );\\n\\n\\t},\\n\\n\\tstartAt: function ( time ) {\\n\\n\\t\\tthis._startTime = time;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetLoop: function ( mode, repetitions ) {\\n\\n\\t\\tthis.loop = mode;\\n\\t\\tthis.repetitions = repetitions;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\t// Weight\\n\\n\\t// set the weight stopping any scheduled fading\\n\\t// although .enabled = false yields an effective weight of zero, this\\n\\t// method does *not* change .enabled, because it would be confusing\\n\\tsetEffectiveWeight: function ( weight ) {\\n\\n\\t\\tthis.weight = weight;\\n\\n\\t\\t// note: same logic as when updated at runtime\\n\\t\\tthis._effectiveWeight = this.enabled ? weight : 0;\\n\\n\\t\\treturn this.stopFading();\\n\\n\\t},\\n\\n\\t// return the weight considering fading and .enabled\\n\\tgetEffectiveWeight: function () {\\n\\n\\t\\treturn this._effectiveWeight;\\n\\n\\t},\\n\\n\\tfadeIn: function ( duration ) {\\n\\n\\t\\treturn this._scheduleFading( duration, 0, 1 );\\n\\n\\t},\\n\\n\\tfadeOut: function ( duration ) {\\n\\n\\t\\treturn this._scheduleFading( duration, 1, 0 );\\n\\n\\t},\\n\\n\\tcrossFadeFrom: function ( fadeOutAction, duration, warp ) {\\n\\n\\t\\tfadeOutAction.fadeOut( duration );\\n\\t\\tthis.fadeIn( duration );\\n\\n\\t\\tif ( warp ) {\\n\\n\\t\\t\\tvar fadeInDuration = this._clip.duration,\\n\\t\\t\\t\\tfadeOutDuration = fadeOutAction._clip.duration,\\n\\n\\t\\t\\t\\tstartEndRatio = fadeOutDuration / fadeInDuration,\\n\\t\\t\\t\\tendStartRatio = fadeInDuration / fadeOutDuration;\\n\\n\\t\\t\\tfadeOutAction.warp( 1.0, startEndRatio, duration );\\n\\t\\t\\tthis.warp( endStartRatio, 1.0, duration );\\n\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tcrossFadeTo: function ( fadeInAction, duration, warp ) {\\n\\n\\t\\treturn fadeInAction.crossFadeFrom( this, duration, warp );\\n\\n\\t},\\n\\n\\tstopFading: function () {\\n\\n\\t\\tvar weightInterpolant = this._weightInterpolant;\\n\\n\\t\\tif ( weightInterpolant !== null ) {\\n\\n\\t\\t\\tthis._weightInterpolant = null;\\n\\t\\t\\tthis._mixer._takeBackControlInterpolant( weightInterpolant );\\n\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\t// Time Scale Control\\n\\n\\t// set the time scale stopping any scheduled warping\\n\\t// although .paused = true yields an effective time scale of zero, this\\n\\t// method does *not* change .paused, because it would be confusing\\n\\tsetEffectiveTimeScale: function ( timeScale ) {\\n\\n\\t\\tthis.timeScale = timeScale;\\n\\t\\tthis._effectiveTimeScale = this.paused ? 0 : timeScale;\\n\\n\\t\\treturn this.stopWarping();\\n\\n\\t},\\n\\n\\t// return the time scale considering warping and .paused\\n\\tgetEffectiveTimeScale: function () {\\n\\n\\t\\treturn this._effectiveTimeScale;\\n\\n\\t},\\n\\n\\tsetDuration: function ( duration ) {\\n\\n\\t\\tthis.timeScale = this._clip.duration / duration;\\n\\n\\t\\treturn this.stopWarping();\\n\\n\\t},\\n\\n\\tsyncWith: function ( action ) {\\n\\n\\t\\tthis.time = action.time;\\n\\t\\tthis.timeScale = action.timeScale;\\n\\n\\t\\treturn this.stopWarping();\\n\\n\\t},\\n\\n\\thalt: function ( duration ) {\\n\\n\\t\\treturn this.warp( this._effectiveTimeScale, 0, duration );\\n\\n\\t},\\n\\n\\twarp: function ( startTimeScale, endTimeScale, duration ) {\\n\\n\\t\\tvar mixer = this._mixer, now = mixer.time,\\n\\t\\t\\tinterpolant = this._timeScaleInterpolant,\\n\\n\\t\\t\\ttimeScale = this.timeScale;\\n\\n\\t\\tif ( interpolant === null ) {\\n\\n\\t\\t\\tinterpolant = mixer._lendControlInterpolant();\\n\\t\\t\\tthis._timeScaleInterpolant = interpolant;\\n\\n\\t\\t}\\n\\n\\t\\tvar times = interpolant.parameterPositions,\\n\\t\\t\\tvalues = interpolant.sampleValues;\\n\\n\\t\\ttimes[ 0 ] = now;\\n\\t\\ttimes[ 1 ] = now + duration;\\n\\n\\t\\tvalues[ 0 ] = startTimeScale / timeScale;\\n\\t\\tvalues[ 1 ] = endTimeScale / timeScale;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tstopWarping: function () {\\n\\n\\t\\tvar timeScaleInterpolant = this._timeScaleInterpolant;\\n\\n\\t\\tif ( timeScaleInterpolant !== null ) {\\n\\n\\t\\t\\tthis._timeScaleInterpolant = null;\\n\\t\\t\\tthis._mixer._takeBackControlInterpolant( timeScaleInterpolant );\\n\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\t// Object Accessors\\n\\n\\tgetMixer: function () {\\n\\n\\t\\treturn this._mixer;\\n\\n\\t},\\n\\n\\tgetClip: function () {\\n\\n\\t\\treturn this._clip;\\n\\n\\t},\\n\\n\\tgetRoot: function () {\\n\\n\\t\\treturn this._localRoot || this._mixer._root;\\n\\n\\t},\\n\\n\\t// Interna\\n\\n\\t_update: function ( time, deltaTime, timeDirection, accuIndex ) {\\n\\n\\t\\t// called by the mixer\\n\\n\\t\\tif ( ! this.enabled ) {\\n\\n\\t\\t\\t// call ._updateWeight() to update ._effectiveWeight\\n\\n\\t\\t\\tthis._updateWeight( time );\\n\\t\\t\\treturn;\\n\\n\\t\\t}\\n\\n\\t\\tvar startTime = this._startTime;\\n\\n\\t\\tif ( startTime !== null ) {\\n\\n\\t\\t\\t// check for scheduled start of action\\n\\n\\t\\t\\tvar timeRunning = ( time - startTime ) * timeDirection;\\n\\t\\t\\tif ( timeRunning < 0 || timeDirection === 0 ) {\\n\\n\\t\\t\\t\\treturn; // yet to come / don't decide when delta = 0\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\t// start\\n\\n\\t\\t\\tthis._startTime = null; // unschedule\\n\\t\\t\\tdeltaTime = timeDirection * timeRunning;\\n\\n\\t\\t}\\n\\n\\t\\t// apply time scale and advance time\\n\\n\\t\\tdeltaTime *= this._updateTimeScale( time );\\n\\t\\tvar clipTime = this._updateTime( deltaTime );\\n\\n\\t\\t// note: _updateTime may disable the action resulting in\\n\\t\\t// an effective weight of 0\\n\\n\\t\\tvar weight = this._updateWeight( time );\\n\\n\\t\\tif ( weight > 0 ) {\\n\\n\\t\\t\\tvar interpolants = this._interpolants;\\n\\t\\t\\tvar propertyMixers = this._propertyBindings;\\n\\n\\t\\t\\tfor ( var j = 0, m = interpolants.length; j !== m; ++ j ) {\\n\\n\\t\\t\\t\\tinterpolants[ j ].evaluate( clipTime );\\n\\t\\t\\t\\tpropertyMixers[ j ].accumulate( accuIndex, weight );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\t_updateWeight: function ( time ) {\\n\\n\\t\\tvar weight = 0;\\n\\n\\t\\tif ( this.enabled ) {\\n\\n\\t\\t\\tweight = this.weight;\\n\\t\\t\\tvar interpolant = this._weightInterpolant;\\n\\n\\t\\t\\tif ( interpolant !== null ) {\\n\\n\\t\\t\\t\\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\\n\\n\\t\\t\\t\\tweight *= interpolantValue;\\n\\n\\t\\t\\t\\tif ( time > interpolant.parameterPositions[ 1 ] ) {\\n\\n\\t\\t\\t\\t\\tthis.stopFading();\\n\\n\\t\\t\\t\\t\\tif ( interpolantValue === 0 ) {\\n\\n\\t\\t\\t\\t\\t\\t// faded out, disable\\n\\t\\t\\t\\t\\t\\tthis.enabled = false;\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tthis._effectiveWeight = weight;\\n\\t\\treturn weight;\\n\\n\\t},\\n\\n\\t_updateTimeScale: function ( time ) {\\n\\n\\t\\tvar timeScale = 0;\\n\\n\\t\\tif ( ! this.paused ) {\\n\\n\\t\\t\\ttimeScale = this.timeScale;\\n\\n\\t\\t\\tvar interpolant = this._timeScaleInterpolant;\\n\\n\\t\\t\\tif ( interpolant !== null ) {\\n\\n\\t\\t\\t\\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\\n\\n\\t\\t\\t\\ttimeScale *= interpolantValue;\\n\\n\\t\\t\\t\\tif ( time > interpolant.parameterPositions[ 1 ] ) {\\n\\n\\t\\t\\t\\t\\tthis.stopWarping();\\n\\n\\t\\t\\t\\t\\tif ( timeScale === 0 ) {\\n\\n\\t\\t\\t\\t\\t\\t// motion has halted, pause\\n\\t\\t\\t\\t\\t\\tthis.paused = true;\\n\\n\\t\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\t\\t// warp done - apply final time scale\\n\\t\\t\\t\\t\\t\\tthis.timeScale = timeScale;\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tthis._effectiveTimeScale = timeScale;\\n\\t\\treturn timeScale;\\n\\n\\t},\\n\\n\\t_updateTime: function ( deltaTime ) {\\n\\n\\t\\tvar time = this.time + deltaTime;\\n\\t\\tvar duration = this._clip.duration;\\n\\t\\tvar loop = this.loop;\\n\\t\\tvar loopCount = this._loopCount;\\n\\n\\t\\tvar pingPong = ( loop === LoopPingPong );\\n\\n\\t\\tif ( deltaTime === 0 ) {\\n\\n\\t\\t\\tif ( loopCount === - 1 ) return time;\\n\\n\\t\\t\\treturn ( pingPong && ( loopCount & 1 ) === 1 ) ? duration - time : time;\\n\\n\\t\\t}\\n\\n\\t\\tif ( loop === LoopOnce ) {\\n\\n\\t\\t\\tif ( loopCount === - 1 ) {\\n\\n\\t\\t\\t\\t// just started\\n\\n\\t\\t\\t\\tthis._loopCount = 0;\\n\\t\\t\\t\\tthis._setEndings( true, true, false );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\thandle_stop: {\\n\\n\\t\\t\\t\\tif ( time >= duration ) {\\n\\n\\t\\t\\t\\t\\ttime = duration;\\n\\n\\t\\t\\t\\t} else if ( time < 0 ) {\\n\\n\\t\\t\\t\\t\\ttime = 0;\\n\\n\\t\\t\\t\\t} else break handle_stop;\\n\\n\\t\\t\\t\\tif ( this.clampWhenFinished ) this.paused = true;\\n\\t\\t\\t\\telse this.enabled = false;\\n\\n\\t\\t\\t\\tthis._mixer.dispatchEvent( {\\n\\t\\t\\t\\t\\ttype: 'finished', action: this,\\n\\t\\t\\t\\t\\tdirection: deltaTime < 0 ? - 1 : 1\\n\\t\\t\\t\\t} );\\n\\n\\t\\t\\t}\\n\\n\\t\\t} else { // repetitive Repeat or PingPong\\n\\n\\t\\t\\tif ( loopCount === - 1 ) {\\n\\n\\t\\t\\t\\t// just started\\n\\n\\t\\t\\t\\tif ( deltaTime >= 0 ) {\\n\\n\\t\\t\\t\\t\\tloopCount = 0;\\n\\n\\t\\t\\t\\t\\tthis._setEndings( true, this.repetitions === 0, pingPong );\\n\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\t// when looping in reverse direction, the initial\\n\\t\\t\\t\\t\\t// transition through zero counts as a repetition,\\n\\t\\t\\t\\t\\t// so leave loopCount at -1\\n\\n\\t\\t\\t\\t\\tthis._setEndings( this.repetitions === 0, true, pingPong );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( time >= duration || time < 0 ) {\\n\\n\\t\\t\\t\\t// wrap around\\n\\n\\t\\t\\t\\tvar loopDelta = Math.floor( time / duration ); // signed\\n\\t\\t\\t\\ttime -= duration * loopDelta;\\n\\n\\t\\t\\t\\tloopCount += Math.abs( loopDelta );\\n\\n\\t\\t\\t\\tvar pending = this.repetitions - loopCount;\\n\\n\\t\\t\\t\\tif ( pending <= 0 ) {\\n\\n\\t\\t\\t\\t\\t// have to stop (switch state, clamp time, fire event)\\n\\n\\t\\t\\t\\t\\tif ( this.clampWhenFinished ) this.paused = true;\\n\\t\\t\\t\\t\\telse this.enabled = false;\\n\\n\\t\\t\\t\\t\\ttime = deltaTime > 0 ? duration : 0;\\n\\n\\t\\t\\t\\t\\tthis._mixer.dispatchEvent( {\\n\\t\\t\\t\\t\\t\\ttype: 'finished', action: this,\\n\\t\\t\\t\\t\\t\\tdirection: deltaTime > 0 ? 1 : - 1\\n\\t\\t\\t\\t\\t} );\\n\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\t// keep running\\n\\n\\t\\t\\t\\t\\tif ( pending === 1 ) {\\n\\n\\t\\t\\t\\t\\t\\t// entering the last round\\n\\n\\t\\t\\t\\t\\t\\tvar atStart = deltaTime < 0;\\n\\t\\t\\t\\t\\t\\tthis._setEndings( atStart, ! atStart, pingPong );\\n\\n\\t\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\t\\tthis._setEndings( false, false, pingPong );\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tthis._loopCount = loopCount;\\n\\n\\t\\t\\t\\t\\tthis._mixer.dispatchEvent( {\\n\\t\\t\\t\\t\\t\\ttype: 'loop', action: this, loopDelta: loopDelta\\n\\t\\t\\t\\t\\t} );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( pingPong && ( loopCount & 1 ) === 1 ) {\\n\\n\\t\\t\\t\\t// invert time for the \\\"pong round\\\"\\n\\n\\t\\t\\t\\tthis.time = time;\\n\\t\\t\\t\\treturn duration - time;\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tthis.time = time;\\n\\t\\treturn time;\\n\\n\\t},\\n\\n\\t_setEndings: function ( atStart, atEnd, pingPong ) {\\n\\n\\t\\tvar settings = this._interpolantSettings;\\n\\n\\t\\tif ( pingPong ) {\\n\\n\\t\\t\\tsettings.endingStart = ZeroSlopeEnding;\\n\\t\\t\\tsettings.endingEnd = ZeroSlopeEnding;\\n\\n\\t\\t} else {\\n\\n\\t\\t\\t// assuming for LoopOnce atStart == atEnd == true\\n\\n\\t\\t\\tif ( atStart ) {\\n\\n\\t\\t\\t\\tsettings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tsettings.endingStart = WrapAroundEnding;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( atEnd ) {\\n\\n\\t\\t\\t\\tsettings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tsettings.endingEnd \\t = WrapAroundEnding;\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\t_scheduleFading: function ( duration, weightNow, weightThen ) {\\n\\n\\t\\tvar mixer = this._mixer, now = mixer.time,\\n\\t\\t\\tinterpolant = this._weightInterpolant;\\n\\n\\t\\tif ( interpolant === null ) {\\n\\n\\t\\t\\tinterpolant = mixer._lendControlInterpolant();\\n\\t\\t\\tthis._weightInterpolant = interpolant;\\n\\n\\t\\t}\\n\\n\\t\\tvar times = interpolant.parameterPositions,\\n\\t\\t\\tvalues = interpolant.sampleValues;\\n\\n\\t\\ttimes[ 0 ] = now;\\n\\t\\tvalues[ 0 ] = weightNow;\\n\\t\\ttimes[ 1 ] = now + duration;\\n\\t\\tvalues[ 1 ] = weightThen;\\n\\n\\t\\treturn this;\\n\\n\\t}\\n\\n} );\\n\\n/**\\n *\\n * Player for AnimationClips.\\n *\\n *\\n * @author Ben Houston / http://clara.io/\\n * @author David Sarno / http://lighthaus.us/\\n * @author tschw\\n */\\n\\nfunction AnimationMixer( root ) {\\n\\n\\tthis._root = root;\\n\\tthis._initMemoryManager();\\n\\tthis._accuIndex = 0;\\n\\n\\tthis.time = 0;\\n\\n\\tthis.timeScale = 1.0;\\n\\n}\\n\\nAnimationMixer.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\\n\\n\\tconstructor: AnimationMixer,\\n\\n\\t_bindAction: function ( action, prototypeAction ) {\\n\\n\\t\\tvar root = action._localRoot || this._root,\\n\\t\\t\\ttracks = action._clip.tracks,\\n\\t\\t\\tnTracks = tracks.length,\\n\\t\\t\\tbindings = action._propertyBindings,\\n\\t\\t\\tinterpolants = action._interpolants,\\n\\t\\t\\trootUuid = root.uuid,\\n\\t\\t\\tbindingsByRoot = this._bindingsByRootAndName,\\n\\t\\t\\tbindingsByName = bindingsByRoot[ rootUuid ];\\n\\n\\t\\tif ( bindingsByName === undefined ) {\\n\\n\\t\\t\\tbindingsByName = {};\\n\\t\\t\\tbindingsByRoot[ rootUuid ] = bindingsByName;\\n\\n\\t\\t}\\n\\n\\t\\tfor ( var i = 0; i !== nTracks; ++ i ) {\\n\\n\\t\\t\\tvar track = tracks[ i ],\\n\\t\\t\\t\\ttrackName = track.name,\\n\\t\\t\\t\\tbinding = bindingsByName[ trackName ];\\n\\n\\t\\t\\tif ( binding !== undefined ) {\\n\\n\\t\\t\\t\\tbindings[ i ] = binding;\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tbinding = bindings[ i ];\\n\\n\\t\\t\\t\\tif ( binding !== undefined ) {\\n\\n\\t\\t\\t\\t\\t// existing binding, make sure the cache knows\\n\\n\\t\\t\\t\\t\\tif ( binding._cacheIndex === null ) {\\n\\n\\t\\t\\t\\t\\t\\t++ binding.referenceCount;\\n\\t\\t\\t\\t\\t\\tthis._addInactiveBinding( binding, rootUuid, trackName );\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tcontinue;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tvar path = prototypeAction && prototypeAction.\\n\\t\\t\\t\\t\\t_propertyBindings[ i ].binding.parsedPath;\\n\\n\\t\\t\\t\\tbinding = new PropertyMixer(\\n\\t\\t\\t\\t\\tPropertyBinding.create( root, trackName, path ),\\n\\t\\t\\t\\t\\ttrack.ValueTypeName, track.getValueSize() );\\n\\n\\t\\t\\t\\t++ binding.referenceCount;\\n\\t\\t\\t\\tthis._addInactiveBinding( binding, rootUuid, trackName );\\n\\n\\t\\t\\t\\tbindings[ i ] = binding;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tinterpolants[ i ].resultBuffer = binding.buffer;\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\t_activateAction: function ( action ) {\\n\\n\\t\\tif ( ! this._isActiveAction( action ) ) {\\n\\n\\t\\t\\tif ( action._cacheIndex === null ) {\\n\\n\\t\\t\\t\\t// this action has been forgotten by the cache, but the user\\n\\t\\t\\t\\t// appears to be still using it -> rebind\\n\\n\\t\\t\\t\\tvar rootUuid = ( action._localRoot || this._root ).uuid,\\n\\t\\t\\t\\t\\tclipUuid = action._clip.uuid,\\n\\t\\t\\t\\t\\tactionsForClip = this._actionsByClip[ clipUuid ];\\n\\n\\t\\t\\t\\tthis._bindAction( action,\\n\\t\\t\\t\\t\\tactionsForClip && actionsForClip.knownActions[ 0 ] );\\n\\n\\t\\t\\t\\tthis._addInactiveAction( action, clipUuid, rootUuid );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tvar bindings = action._propertyBindings;\\n\\n\\t\\t\\t// increment reference counts / sort out state\\n\\t\\t\\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\\n\\n\\t\\t\\t\\tvar binding = bindings[ i ];\\n\\n\\t\\t\\t\\tif ( binding.useCount ++ === 0 ) {\\n\\n\\t\\t\\t\\t\\tthis._lendBinding( binding );\\n\\t\\t\\t\\t\\tbinding.saveOriginalState();\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tthis._lendAction( action );\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\t_deactivateAction: function ( action ) {\\n\\n\\t\\tif ( this._isActiveAction( action ) ) {\\n\\n\\t\\t\\tvar bindings = action._propertyBindings;\\n\\n\\t\\t\\t// decrement reference counts / sort out state\\n\\t\\t\\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\\n\\n\\t\\t\\t\\tvar binding = bindings[ i ];\\n\\n\\t\\t\\t\\tif ( -- binding.useCount === 0 ) {\\n\\n\\t\\t\\t\\t\\tbinding.restoreOriginalState();\\n\\t\\t\\t\\t\\tthis._takeBackBinding( binding );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tthis._takeBackAction( action );\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\t// Memory manager\\n\\n\\t_initMemoryManager: function () {\\n\\n\\t\\tthis._actions = []; // 'nActiveActions' followed by inactive ones\\n\\t\\tthis._nActiveActions = 0;\\n\\n\\t\\tthis._actionsByClip = {};\\n\\t\\t// inside:\\n\\t\\t// {\\n\\t\\t// \\tknownActions: Array< AnimationAction > - used as prototypes\\n\\t\\t// \\tactionByRoot: AnimationAction - lookup\\n\\t\\t// }\\n\\n\\n\\t\\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\\n\\t\\tthis._nActiveBindings = 0;\\n\\n\\t\\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\\n\\n\\n\\t\\tthis._controlInterpolants = []; // same game as above\\n\\t\\tthis._nActiveControlInterpolants = 0;\\n\\n\\t\\tvar scope = this;\\n\\n\\t\\tthis.stats = {\\n\\n\\t\\t\\tactions: {\\n\\t\\t\\t\\tget total() {\\n\\n\\t\\t\\t\\t\\treturn scope._actions.length;\\n\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\tget inUse() {\\n\\n\\t\\t\\t\\t\\treturn scope._nActiveActions;\\n\\n\\t\\t\\t\\t}\\n\\t\\t\\t},\\n\\t\\t\\tbindings: {\\n\\t\\t\\t\\tget total() {\\n\\n\\t\\t\\t\\t\\treturn scope._bindings.length;\\n\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\tget inUse() {\\n\\n\\t\\t\\t\\t\\treturn scope._nActiveBindings;\\n\\n\\t\\t\\t\\t}\\n\\t\\t\\t},\\n\\t\\t\\tcontrolInterpolants: {\\n\\t\\t\\t\\tget total() {\\n\\n\\t\\t\\t\\t\\treturn scope._controlInterpolants.length;\\n\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\tget inUse() {\\n\\n\\t\\t\\t\\t\\treturn scope._nActiveControlInterpolants;\\n\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t};\\n\\n\\t},\\n\\n\\t// Memory management for AnimationAction objects\\n\\n\\t_isActiveAction: function ( action ) {\\n\\n\\t\\tvar index = action._cacheIndex;\\n\\t\\treturn index !== null && index < this._nActiveActions;\\n\\n\\t},\\n\\n\\t_addInactiveAction: function ( action, clipUuid, rootUuid ) {\\n\\n\\t\\tvar actions = this._actions,\\n\\t\\t\\tactionsByClip = this._actionsByClip,\\n\\t\\t\\tactionsForClip = actionsByClip[ clipUuid ];\\n\\n\\t\\tif ( actionsForClip === undefined ) {\\n\\n\\t\\t\\tactionsForClip = {\\n\\n\\t\\t\\t\\tknownActions: [ action ],\\n\\t\\t\\t\\tactionByRoot: {}\\n\\n\\t\\t\\t};\\n\\n\\t\\t\\taction._byClipCacheIndex = 0;\\n\\n\\t\\t\\tactionsByClip[ clipUuid ] = actionsForClip;\\n\\n\\t\\t} else {\\n\\n\\t\\t\\tvar knownActions = actionsForClip.knownActions;\\n\\n\\t\\t\\taction._byClipCacheIndex = knownActions.length;\\n\\t\\t\\tknownActions.push( action );\\n\\n\\t\\t}\\n\\n\\t\\taction._cacheIndex = actions.length;\\n\\t\\tactions.push( action );\\n\\n\\t\\tactionsForClip.actionByRoot[ rootUuid ] = action;\\n\\n\\t},\\n\\n\\t_removeInactiveAction: function ( action ) {\\n\\n\\t\\tvar actions = this._actions,\\n\\t\\t\\tlastInactiveAction = actions[ actions.length - 1 ],\\n\\t\\t\\tcacheIndex = action._cacheIndex;\\n\\n\\t\\tlastInactiveAction._cacheIndex = cacheIndex;\\n\\t\\tactions[ cacheIndex ] = lastInactiveAction;\\n\\t\\tactions.pop();\\n\\n\\t\\taction._cacheIndex = null;\\n\\n\\n\\t\\tvar clipUuid = action._clip.uuid,\\n\\t\\t\\tactionsByClip = this._actionsByClip,\\n\\t\\t\\tactionsForClip = actionsByClip[ clipUuid ],\\n\\t\\t\\tknownActionsForClip = actionsForClip.knownActions,\\n\\n\\t\\t\\tlastKnownAction =\\n\\t\\t\\t\\tknownActionsForClip[ knownActionsForClip.length - 1 ],\\n\\n\\t\\t\\tbyClipCacheIndex = action._byClipCacheIndex;\\n\\n\\t\\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\\n\\t\\tknownActionsForClip[ byClipCacheIndex ] = lastKnownAction;\\n\\t\\tknownActionsForClip.pop();\\n\\n\\t\\taction._byClipCacheIndex = null;\\n\\n\\n\\t\\tvar actionByRoot = actionsForClip.actionByRoot,\\n\\t\\t\\trootUuid = ( action._localRoot || this._root ).uuid;\\n\\n\\t\\tdelete actionByRoot[ rootUuid ];\\n\\n\\t\\tif ( knownActionsForClip.length === 0 ) {\\n\\n\\t\\t\\tdelete actionsByClip[ clipUuid ];\\n\\n\\t\\t}\\n\\n\\t\\tthis._removeInactiveBindingsForAction( action );\\n\\n\\t},\\n\\n\\t_removeInactiveBindingsForAction: function ( action ) {\\n\\n\\t\\tvar bindings = action._propertyBindings;\\n\\t\\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\\n\\n\\t\\t\\tvar binding = bindings[ i ];\\n\\n\\t\\t\\tif ( -- binding.referenceCount === 0 ) {\\n\\n\\t\\t\\t\\tthis._removeInactiveBinding( binding );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\t_lendAction: function ( action ) {\\n\\n\\t\\t// [ active actions |  inactive actions  ]\\n\\t\\t// [  active actions >| inactive actions ]\\n\\t\\t//                 s        a\\n\\t\\t//                  <-swap->\\n\\t\\t//                 a        s\\n\\n\\t\\tvar actions = this._actions,\\n\\t\\t\\tprevIndex = action._cacheIndex,\\n\\n\\t\\t\\tlastActiveIndex = this._nActiveActions ++,\\n\\n\\t\\t\\tfirstInactiveAction = actions[ lastActiveIndex ];\\n\\n\\t\\taction._cacheIndex = lastActiveIndex;\\n\\t\\tactions[ lastActiveIndex ] = action;\\n\\n\\t\\tfirstInactiveAction._cacheIndex = prevIndex;\\n\\t\\tactions[ prevIndex ] = firstInactiveAction;\\n\\n\\t},\\n\\n\\t_takeBackAction: function ( action ) {\\n\\n\\t\\t// [  active actions  | inactive actions ]\\n\\t\\t// [ active actions |< inactive actions  ]\\n\\t\\t//        a        s\\n\\t\\t//         <-swap->\\n\\t\\t//        s        a\\n\\n\\t\\tvar actions = this._actions,\\n\\t\\t\\tprevIndex = action._cacheIndex,\\n\\n\\t\\t\\tfirstInactiveIndex = -- this._nActiveActions,\\n\\n\\t\\t\\tlastActiveAction = actions[ firstInactiveIndex ];\\n\\n\\t\\taction._cacheIndex = firstInactiveIndex;\\n\\t\\tactions[ firstInactiveIndex ] = action;\\n\\n\\t\\tlastActiveAction._cacheIndex = prevIndex;\\n\\t\\tactions[ prevIndex ] = lastActiveAction;\\n\\n\\t},\\n\\n\\t// Memory management for PropertyMixer objects\\n\\n\\t_addInactiveBinding: function ( binding, rootUuid, trackName ) {\\n\\n\\t\\tvar bindingsByRoot = this._bindingsByRootAndName,\\n\\t\\t\\tbindingByName = bindingsByRoot[ rootUuid ],\\n\\n\\t\\t\\tbindings = this._bindings;\\n\\n\\t\\tif ( bindingByName === undefined ) {\\n\\n\\t\\t\\tbindingByName = {};\\n\\t\\t\\tbindingsByRoot[ rootUuid ] = bindingByName;\\n\\n\\t\\t}\\n\\n\\t\\tbindingByName[ trackName ] = binding;\\n\\n\\t\\tbinding._cacheIndex = bindings.length;\\n\\t\\tbindings.push( binding );\\n\\n\\t},\\n\\n\\t_removeInactiveBinding: function ( binding ) {\\n\\n\\t\\tvar bindings = this._bindings,\\n\\t\\t\\tpropBinding = binding.binding,\\n\\t\\t\\trootUuid = propBinding.rootNode.uuid,\\n\\t\\t\\ttrackName = propBinding.path,\\n\\t\\t\\tbindingsByRoot = this._bindingsByRootAndName,\\n\\t\\t\\tbindingByName = bindingsByRoot[ rootUuid ],\\n\\n\\t\\t\\tlastInactiveBinding = bindings[ bindings.length - 1 ],\\n\\t\\t\\tcacheIndex = binding._cacheIndex;\\n\\n\\t\\tlastInactiveBinding._cacheIndex = cacheIndex;\\n\\t\\tbindings[ cacheIndex ] = lastInactiveBinding;\\n\\t\\tbindings.pop();\\n\\n\\t\\tdelete bindingByName[ trackName ];\\n\\n\\t\\tremove_empty_map: {\\n\\n\\t\\t\\tfor ( var _ in bindingByName ) break remove_empty_map; // eslint-disable-line no-unused-vars\\n\\n\\t\\t\\tdelete bindingsByRoot[ rootUuid ];\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\t_lendBinding: function ( binding ) {\\n\\n\\t\\tvar bindings = this._bindings,\\n\\t\\t\\tprevIndex = binding._cacheIndex,\\n\\n\\t\\t\\tlastActiveIndex = this._nActiveBindings ++,\\n\\n\\t\\t\\tfirstInactiveBinding = bindings[ lastActiveIndex ];\\n\\n\\t\\tbinding._cacheIndex = lastActiveIndex;\\n\\t\\tbindings[ lastActiveIndex ] = binding;\\n\\n\\t\\tfirstInactiveBinding._cacheIndex = prevIndex;\\n\\t\\tbindings[ prevIndex ] = firstInactiveBinding;\\n\\n\\t},\\n\\n\\t_takeBackBinding: function ( binding ) {\\n\\n\\t\\tvar bindings = this._bindings,\\n\\t\\t\\tprevIndex = binding._cacheIndex,\\n\\n\\t\\t\\tfirstInactiveIndex = -- this._nActiveBindings,\\n\\n\\t\\t\\tlastActiveBinding = bindings[ firstInactiveIndex ];\\n\\n\\t\\tbinding._cacheIndex = firstInactiveIndex;\\n\\t\\tbindings[ firstInactiveIndex ] = binding;\\n\\n\\t\\tlastActiveBinding._cacheIndex = prevIndex;\\n\\t\\tbindings[ prevIndex ] = lastActiveBinding;\\n\\n\\t},\\n\\n\\n\\t// Memory management of Interpolants for weight and time scale\\n\\n\\t_lendControlInterpolant: function () {\\n\\n\\t\\tvar interpolants = this._controlInterpolants,\\n\\t\\t\\tlastActiveIndex = this._nActiveControlInterpolants ++,\\n\\t\\t\\tinterpolant = interpolants[ lastActiveIndex ];\\n\\n\\t\\tif ( interpolant === undefined ) {\\n\\n\\t\\t\\tinterpolant = new LinearInterpolant(\\n\\t\\t\\t\\tnew Float32Array( 2 ), new Float32Array( 2 ),\\n\\t\\t\\t\\t1, this._controlInterpolantsResultBuffer );\\n\\n\\t\\t\\tinterpolant.__cacheIndex = lastActiveIndex;\\n\\t\\t\\tinterpolants[ lastActiveIndex ] = interpolant;\\n\\n\\t\\t}\\n\\n\\t\\treturn interpolant;\\n\\n\\t},\\n\\n\\t_takeBackControlInterpolant: function ( interpolant ) {\\n\\n\\t\\tvar interpolants = this._controlInterpolants,\\n\\t\\t\\tprevIndex = interpolant.__cacheIndex,\\n\\n\\t\\t\\tfirstInactiveIndex = -- this._nActiveControlInterpolants,\\n\\n\\t\\t\\tlastActiveInterpolant = interpolants[ firstInactiveIndex ];\\n\\n\\t\\tinterpolant.__cacheIndex = firstInactiveIndex;\\n\\t\\tinterpolants[ firstInactiveIndex ] = interpolant;\\n\\n\\t\\tlastActiveInterpolant.__cacheIndex = prevIndex;\\n\\t\\tinterpolants[ prevIndex ] = lastActiveInterpolant;\\n\\n\\t},\\n\\n\\t_controlInterpolantsResultBuffer: new Float32Array( 1 ),\\n\\n\\t// return an action for a clip optionally using a custom root target\\n\\t// object (this method allocates a lot of dynamic memory in case a\\n\\t// previously unknown clip/root combination is specified)\\n\\tclipAction: function ( clip, optionalRoot ) {\\n\\n\\t\\tvar root = optionalRoot || this._root,\\n\\t\\t\\trootUuid = root.uuid,\\n\\n\\t\\t\\tclipObject = typeof clip === 'string' ?\\n\\t\\t\\t\\tAnimationClip.findByName( root, clip ) : clip,\\n\\n\\t\\t\\tclipUuid = clipObject !== null ? clipObject.uuid : clip,\\n\\n\\t\\t\\tactionsForClip = this._actionsByClip[ clipUuid ],\\n\\t\\t\\tprototypeAction = null;\\n\\n\\t\\tif ( actionsForClip !== undefined ) {\\n\\n\\t\\t\\tvar existingAction =\\n\\t\\t\\t\\t\\tactionsForClip.actionByRoot[ rootUuid ];\\n\\n\\t\\t\\tif ( existingAction !== undefined ) {\\n\\n\\t\\t\\t\\treturn existingAction;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\t// we know the clip, so we don't have to parse all\\n\\t\\t\\t// the bindings again but can just copy\\n\\t\\t\\tprototypeAction = actionsForClip.knownActions[ 0 ];\\n\\n\\t\\t\\t// also, take the clip from the prototype action\\n\\t\\t\\tif ( clipObject === null )\\n\\t\\t\\t\\tclipObject = prototypeAction._clip;\\n\\n\\t\\t}\\n\\n\\t\\t// clip must be known when specified via string\\n\\t\\tif ( clipObject === null ) return null;\\n\\n\\t\\t// allocate all resources required to run it\\n\\t\\tvar newAction = new AnimationAction( this, clipObject, optionalRoot );\\n\\n\\t\\tthis._bindAction( newAction, prototypeAction );\\n\\n\\t\\t// and make the action known to the memory manager\\n\\t\\tthis._addInactiveAction( newAction, clipUuid, rootUuid );\\n\\n\\t\\treturn newAction;\\n\\n\\t},\\n\\n\\t// get an existing action\\n\\texistingAction: function ( clip, optionalRoot ) {\\n\\n\\t\\tvar root = optionalRoot || this._root,\\n\\t\\t\\trootUuid = root.uuid,\\n\\n\\t\\t\\tclipObject = typeof clip === 'string' ?\\n\\t\\t\\t\\tAnimationClip.findByName( root, clip ) : clip,\\n\\n\\t\\t\\tclipUuid = clipObject ? clipObject.uuid : clip,\\n\\n\\t\\t\\tactionsForClip = this._actionsByClip[ clipUuid ];\\n\\n\\t\\tif ( actionsForClip !== undefined ) {\\n\\n\\t\\t\\treturn actionsForClip.actionByRoot[ rootUuid ] || null;\\n\\n\\t\\t}\\n\\n\\t\\treturn null;\\n\\n\\t},\\n\\n\\t// deactivates all previously scheduled actions\\n\\tstopAllAction: function () {\\n\\n\\t\\tvar actions = this._actions,\\n\\t\\t\\tnActions = this._nActiveActions,\\n\\t\\t\\tbindings = this._bindings,\\n\\t\\t\\tnBindings = this._nActiveBindings;\\n\\n\\t\\tthis._nActiveActions = 0;\\n\\t\\tthis._nActiveBindings = 0;\\n\\n\\t\\tfor ( var i = 0; i !== nActions; ++ i ) {\\n\\n\\t\\t\\tactions[ i ].reset();\\n\\n\\t\\t}\\n\\n\\t\\tfor ( var i = 0; i !== nBindings; ++ i ) {\\n\\n\\t\\t\\tbindings[ i ].useCount = 0;\\n\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\t// advance the time and update apply the animation\\n\\tupdate: function ( deltaTime ) {\\n\\n\\t\\tdeltaTime *= this.timeScale;\\n\\n\\t\\tvar actions = this._actions,\\n\\t\\t\\tnActions = this._nActiveActions,\\n\\n\\t\\t\\ttime = this.time += deltaTime,\\n\\t\\t\\ttimeDirection = Math.sign( deltaTime ),\\n\\n\\t\\t\\taccuIndex = this._accuIndex ^= 1;\\n\\n\\t\\t// run active actions\\n\\n\\t\\tfor ( var i = 0; i !== nActions; ++ i ) {\\n\\n\\t\\t\\tvar action = actions[ i ];\\n\\n\\t\\t\\taction._update( time, deltaTime, timeDirection, accuIndex );\\n\\n\\t\\t}\\n\\n\\t\\t// update scene graph\\n\\n\\t\\tvar bindings = this._bindings,\\n\\t\\t\\tnBindings = this._nActiveBindings;\\n\\n\\t\\tfor ( var i = 0; i !== nBindings; ++ i ) {\\n\\n\\t\\t\\tbindings[ i ].apply( accuIndex );\\n\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\t// return this mixer's root target object\\n\\tgetRoot: function () {\\n\\n\\t\\treturn this._root;\\n\\n\\t},\\n\\n\\t// free all resources specific to a particular clip\\n\\tuncacheClip: function ( clip ) {\\n\\n\\t\\tvar actions = this._actions,\\n\\t\\t\\tclipUuid = clip.uuid,\\n\\t\\t\\tactionsByClip = this._actionsByClip,\\n\\t\\t\\tactionsForClip = actionsByClip[ clipUuid ];\\n\\n\\t\\tif ( actionsForClip !== undefined ) {\\n\\n\\t\\t\\t// note: just calling _removeInactiveAction would mess up the\\n\\t\\t\\t// iteration state and also require updating the state we can\\n\\t\\t\\t// just throw away\\n\\n\\t\\t\\tvar actionsToRemove = actionsForClip.knownActions;\\n\\n\\t\\t\\tfor ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {\\n\\n\\t\\t\\t\\tvar action = actionsToRemove[ i ];\\n\\n\\t\\t\\t\\tthis._deactivateAction( action );\\n\\n\\t\\t\\t\\tvar cacheIndex = action._cacheIndex,\\n\\t\\t\\t\\t\\tlastInactiveAction = actions[ actions.length - 1 ];\\n\\n\\t\\t\\t\\taction._cacheIndex = null;\\n\\t\\t\\t\\taction._byClipCacheIndex = null;\\n\\n\\t\\t\\t\\tlastInactiveAction._cacheIndex = cacheIndex;\\n\\t\\t\\t\\tactions[ cacheIndex ] = lastInactiveAction;\\n\\t\\t\\t\\tactions.pop();\\n\\n\\t\\t\\t\\tthis._removeInactiveBindingsForAction( action );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tdelete actionsByClip[ clipUuid ];\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\t// free all resources specific to a particular root target object\\n\\tuncacheRoot: function ( root ) {\\n\\n\\t\\tvar rootUuid = root.uuid,\\n\\t\\t\\tactionsByClip = this._actionsByClip;\\n\\n\\t\\tfor ( var clipUuid in actionsByClip ) {\\n\\n\\t\\t\\tvar actionByRoot = actionsByClip[ clipUuid ].actionByRoot,\\n\\t\\t\\t\\taction = actionByRoot[ rootUuid ];\\n\\n\\t\\t\\tif ( action !== undefined ) {\\n\\n\\t\\t\\t\\tthis._deactivateAction( action );\\n\\t\\t\\t\\tthis._removeInactiveAction( action );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tvar bindingsByRoot = this._bindingsByRootAndName,\\n\\t\\t\\tbindingByName = bindingsByRoot[ rootUuid ];\\n\\n\\t\\tif ( bindingByName !== undefined ) {\\n\\n\\t\\t\\tfor ( var trackName in bindingByName ) {\\n\\n\\t\\t\\t\\tvar binding = bindingByName[ trackName ];\\n\\t\\t\\t\\tbinding.restoreOriginalState();\\n\\t\\t\\t\\tthis._removeInactiveBinding( binding );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\t// remove a targeted clip from the cache\\n\\tuncacheAction: function ( clip, optionalRoot ) {\\n\\n\\t\\tvar action = this.existingAction( clip, optionalRoot );\\n\\n\\t\\tif ( action !== null ) {\\n\\n\\t\\t\\tthis._deactivateAction( action );\\n\\t\\t\\tthis._removeInactiveAction( action );\\n\\n\\t\\t}\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\nfunction Uniform( value ) {\\n\\n\\tif ( typeof value === 'string' ) {\\n\\n\\t\\tconsole.warn( 'THREE.Uniform: Type parameter is no longer needed.' );\\n\\t\\tvalue = arguments[ 1 ];\\n\\n\\t}\\n\\n\\tthis.value = value;\\n\\n}\\n\\nUniform.prototype.clone = function () {\\n\\n\\treturn new Uniform( this.value.clone === undefined ? this.value : this.value.clone() );\\n\\n};\\n\\n/**\\n * @author benaadams / https://twitter.com/ben_a_adams\\n */\\n\\nfunction InstancedBufferGeometry() {\\n\\n\\tBufferGeometry.call( this );\\n\\n\\tthis.type = 'InstancedBufferGeometry';\\n\\tthis.maxInstancedCount = undefined;\\n\\n}\\n\\nInstancedBufferGeometry.prototype = Object.assign( Object.create( BufferGeometry.prototype ), {\\n\\n\\tconstructor: InstancedBufferGeometry,\\n\\n\\tisInstancedBufferGeometry: true,\\n\\n\\tcopy: function ( source ) {\\n\\n\\t\\tBufferGeometry.prototype.copy.call( this, source );\\n\\n\\t\\tthis.maxInstancedCount = source.maxInstancedCount;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tclone: function () {\\n\\n\\t\\treturn new this.constructor().copy( this );\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author benaadams / https://twitter.com/ben_a_adams\\n */\\n\\nfunction InstancedInterleavedBuffer( array, stride, meshPerAttribute ) {\\n\\n\\tInterleavedBuffer.call( this, array, stride );\\n\\n\\tthis.meshPerAttribute = meshPerAttribute || 1;\\n\\n}\\n\\nInstancedInterleavedBuffer.prototype = Object.assign( Object.create( InterleavedBuffer.prototype ), {\\n\\n\\tconstructor: InstancedInterleavedBuffer,\\n\\n\\tisInstancedInterleavedBuffer: true,\\n\\n\\tcopy: function ( source ) {\\n\\n\\t\\tInterleavedBuffer.prototype.copy.call( this, source );\\n\\n\\t\\tthis.meshPerAttribute = source.meshPerAttribute;\\n\\n\\t\\treturn this;\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author benaadams / https://twitter.com/ben_a_adams\\n */\\n\\nfunction InstancedBufferAttribute( array, itemSize, normalized, meshPerAttribute ) {\\n\\n\\tif ( typeof ( normalized ) === 'number' ) {\\n\\n\\t\\tmeshPerAttribute = normalized;\\n\\n\\t\\tnormalized = false;\\n\\n\\t\\tconsole.error( 'THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.' );\\n\\n\\t}\\n\\n\\tBufferAttribute.call( this, array, itemSize, normalized );\\n\\n\\tthis.meshPerAttribute = meshPerAttribute || 1;\\n\\n}\\n\\nInstancedBufferAttribute.prototype = Object.assign( Object.create( BufferAttribute.prototype ), {\\n\\n\\tconstructor: InstancedBufferAttribute,\\n\\n\\tisInstancedBufferAttribute: true,\\n\\n\\tcopy: function ( source ) {\\n\\n\\t\\tBufferAttribute.prototype.copy.call( this, source );\\n\\n\\t\\tthis.meshPerAttribute = source.meshPerAttribute;\\n\\n\\t\\treturn this;\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n * @author bhouston / http://clara.io/\\n * @author stephomi / http://stephaneginier.com/\\n */\\n\\nfunction Raycaster( origin, direction, near, far ) {\\n\\n\\tthis.ray = new Ray( origin, direction );\\n\\t// direction is assumed to be normalized (for accurate distance calculations)\\n\\n\\tthis.near = near || 0;\\n\\tthis.far = far || Infinity;\\n\\n\\tthis.params = {\\n\\t\\tMesh: {},\\n\\t\\tLine: {},\\n\\t\\tLOD: {},\\n\\t\\tPoints: { threshold: 1 },\\n\\t\\tSprite: {}\\n\\t};\\n\\n\\tObject.defineProperties( this.params, {\\n\\t\\tPointCloud: {\\n\\t\\t\\tget: function () {\\n\\n\\t\\t\\t\\tconsole.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );\\n\\t\\t\\t\\treturn this.Points;\\n\\n\\t\\t\\t}\\n\\t\\t}\\n\\t} );\\n\\n}\\n\\nfunction ascSort( a, b ) {\\n\\n\\treturn a.distance - b.distance;\\n\\n}\\n\\nfunction intersectObject( object, raycaster, intersects, recursive ) {\\n\\n\\tif ( object.visible === false ) return;\\n\\n\\tobject.raycast( raycaster, intersects );\\n\\n\\tif ( recursive === true ) {\\n\\n\\t\\tvar children = object.children;\\n\\n\\t\\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\\n\\n\\t\\t\\tintersectObject( children[ i ], raycaster, intersects, true );\\n\\n\\t\\t}\\n\\n\\t}\\n\\n}\\n\\nObject.assign( Raycaster.prototype, {\\n\\n\\tlinePrecision: 1,\\n\\n\\tset: function ( origin, direction ) {\\n\\n\\t\\t// direction is assumed to be normalized (for accurate distance calculations)\\n\\n\\t\\tthis.ray.set( origin, direction );\\n\\n\\t},\\n\\n\\tsetFromCamera: function ( coords, camera ) {\\n\\n\\t\\tif ( ( camera && camera.isPerspectiveCamera ) ) {\\n\\n\\t\\t\\tthis.ray.origin.setFromMatrixPosition( camera.matrixWorld );\\n\\t\\t\\tthis.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\\n\\n\\t\\t} else if ( ( camera && camera.isOrthographicCamera ) ) {\\n\\n\\t\\t\\tthis.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera\\n\\t\\t\\tthis.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );\\n\\n\\t\\t} else {\\n\\n\\t\\t\\tconsole.error( 'THREE.Raycaster: Unsupported camera type.' );\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\tintersectObject: function ( object, recursive, optionalTarget ) {\\n\\n\\t\\tvar intersects = optionalTarget || [];\\n\\n\\t\\tintersectObject( object, this, intersects, recursive );\\n\\n\\t\\tintersects.sort( ascSort );\\n\\n\\t\\treturn intersects;\\n\\n\\t},\\n\\n\\tintersectObjects: function ( objects, recursive, optionalTarget ) {\\n\\n\\t\\tvar intersects = optionalTarget || [];\\n\\n\\t\\tif ( Array.isArray( objects ) === false ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );\\n\\t\\t\\treturn intersects;\\n\\n\\t\\t}\\n\\n\\t\\tfor ( var i = 0, l = objects.length; i < l; i ++ ) {\\n\\n\\t\\t\\tintersectObject( objects[ i ], this, intersects, recursive );\\n\\n\\t\\t}\\n\\n\\t\\tintersects.sort( ascSort );\\n\\n\\t\\treturn intersects;\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author bhouston / http://clara.io\\n * @author WestLangley / http://github.com/WestLangley\\n *\\n * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\\n *\\n * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.\\n * The azimuthal angle (theta) is measured from the positive z-axiz.\\n */\\n\\nfunction Spherical( radius, phi, theta ) {\\n\\n\\tthis.radius = ( radius !== undefined ) ? radius : 1.0;\\n\\tthis.phi = ( phi !== undefined ) ? phi : 0; // polar angle\\n\\tthis.theta = ( theta !== undefined ) ? theta : 0; // azimuthal angle\\n\\n\\treturn this;\\n\\n}\\n\\nObject.assign( Spherical.prototype, {\\n\\n\\tset: function ( radius, phi, theta ) {\\n\\n\\t\\tthis.radius = radius;\\n\\t\\tthis.phi = phi;\\n\\t\\tthis.theta = theta;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tclone: function () {\\n\\n\\t\\treturn new this.constructor().copy( this );\\n\\n\\t},\\n\\n\\tcopy: function ( other ) {\\n\\n\\t\\tthis.radius = other.radius;\\n\\t\\tthis.phi = other.phi;\\n\\t\\tthis.theta = other.theta;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\t// restrict phi to be betwee EPS and PI-EPS\\n\\tmakeSafe: function () {\\n\\n\\t\\tvar EPS = 0.000001;\\n\\t\\tthis.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetFromVector3: function ( v ) {\\n\\n\\t\\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\\n\\n\\t},\\n\\n\\tsetFromCartesianCoords: function ( x, y, z ) {\\n\\n\\t\\tthis.radius = Math.sqrt( x * x + y * y + z * z );\\n\\n\\t\\tif ( this.radius === 0 ) {\\n\\n\\t\\t\\tthis.theta = 0;\\n\\t\\t\\tthis.phi = 0;\\n\\n\\t\\t} else {\\n\\n\\t\\t\\tthis.theta = Math.atan2( x, z );\\n\\t\\t\\tthis.phi = Math.acos( _Math.clamp( y / this.radius, - 1, 1 ) );\\n\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author Mugen87 / https://github.com/Mugen87\\n *\\n * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system\\n *\\n */\\n\\nfunction Cylindrical( radius, theta, y ) {\\n\\n\\tthis.radius = ( radius !== undefined ) ? radius : 1.0; // distance from the origin to a point in the x-z plane\\n\\tthis.theta = ( theta !== undefined ) ? theta : 0; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis\\n\\tthis.y = ( y !== undefined ) ? y : 0; // height above the x-z plane\\n\\n\\treturn this;\\n\\n}\\n\\nObject.assign( Cylindrical.prototype, {\\n\\n\\tset: function ( radius, theta, y ) {\\n\\n\\t\\tthis.radius = radius;\\n\\t\\tthis.theta = theta;\\n\\t\\tthis.y = y;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tclone: function () {\\n\\n\\t\\treturn new this.constructor().copy( this );\\n\\n\\t},\\n\\n\\tcopy: function ( other ) {\\n\\n\\t\\tthis.radius = other.radius;\\n\\t\\tthis.theta = other.theta;\\n\\t\\tthis.y = other.y;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetFromVector3: function ( v ) {\\n\\n\\t\\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\\n\\n\\t},\\n\\n\\tsetFromCartesianCoords: function ( x, y, z ) {\\n\\n\\t\\tthis.radius = Math.sqrt( x * x + z * z );\\n\\t\\tthis.theta = Math.atan2( x, z );\\n\\t\\tthis.y = y;\\n\\n\\t\\treturn this;\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author bhouston / http://clara.io\\n */\\n\\nfunction Box2( min, max ) {\\n\\n\\tthis.min = ( min !== undefined ) ? min : new Vector2( + Infinity, + Infinity );\\n\\tthis.max = ( max !== undefined ) ? max : new Vector2( - Infinity, - Infinity );\\n\\n}\\n\\nObject.assign( Box2.prototype, {\\n\\n\\tset: function ( min, max ) {\\n\\n\\t\\tthis.min.copy( min );\\n\\t\\tthis.max.copy( max );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetFromPoints: function ( points ) {\\n\\n\\t\\tthis.makeEmpty();\\n\\n\\t\\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\\n\\n\\t\\t\\tthis.expandByPoint( points[ i ] );\\n\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tsetFromCenterAndSize: function () {\\n\\n\\t\\tvar v1 = new Vector2();\\n\\n\\t\\treturn function setFromCenterAndSize( center, size ) {\\n\\n\\t\\t\\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\\n\\t\\t\\tthis.min.copy( center ).sub( halfSize );\\n\\t\\t\\tthis.max.copy( center ).add( halfSize );\\n\\n\\t\\t\\treturn this;\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\tclone: function () {\\n\\n\\t\\treturn new this.constructor().copy( this );\\n\\n\\t},\\n\\n\\tcopy: function ( box ) {\\n\\n\\t\\tthis.min.copy( box.min );\\n\\t\\tthis.max.copy( box.max );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tmakeEmpty: function () {\\n\\n\\t\\tthis.min.x = this.min.y = + Infinity;\\n\\t\\tthis.max.x = this.max.y = - Infinity;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tisEmpty: function () {\\n\\n\\t\\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\\n\\n\\t\\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\\n\\n\\t},\\n\\n\\tgetCenter: function ( target ) {\\n\\n\\t\\tif ( target === undefined ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Box2: .getCenter() target is now required' );\\n\\t\\t\\ttarget = new Vector2();\\n\\n\\t\\t}\\n\\n\\t\\treturn this.isEmpty() ? target.set( 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\\n\\n\\t},\\n\\n\\tgetSize: function ( target ) {\\n\\n\\t\\tif ( target === undefined ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Box2: .getSize() target is now required' );\\n\\t\\t\\ttarget = new Vector2();\\n\\n\\t\\t}\\n\\n\\t\\treturn this.isEmpty() ? target.set( 0, 0 ) : target.subVectors( this.max, this.min );\\n\\n\\t},\\n\\n\\texpandByPoint: function ( point ) {\\n\\n\\t\\tthis.min.min( point );\\n\\t\\tthis.max.max( point );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\texpandByVector: function ( vector ) {\\n\\n\\t\\tthis.min.sub( vector );\\n\\t\\tthis.max.add( vector );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\texpandByScalar: function ( scalar ) {\\n\\n\\t\\tthis.min.addScalar( - scalar );\\n\\t\\tthis.max.addScalar( scalar );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tcontainsPoint: function ( point ) {\\n\\n\\t\\treturn point.x < this.min.x || point.x > this.max.x ||\\n\\t\\t\\tpoint.y < this.min.y || point.y > this.max.y ? false : true;\\n\\n\\t},\\n\\n\\tcontainsBox: function ( box ) {\\n\\n\\t\\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\\n\\t\\t\\tthis.min.y <= box.min.y && box.max.y <= this.max.y;\\n\\n\\t},\\n\\n\\tgetParameter: function ( point, target ) {\\n\\n\\t\\t// This can potentially have a divide by zero if the box\\n\\t\\t// has a size dimension of 0.\\n\\n\\t\\tif ( target === undefined ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Box2: .getParameter() target is now required' );\\n\\t\\t\\ttarget = new Vector2();\\n\\n\\t\\t}\\n\\n\\t\\treturn target.set(\\n\\t\\t\\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\\n\\t\\t\\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\\n\\t\\t);\\n\\n\\t},\\n\\n\\tintersectsBox: function ( box ) {\\n\\n\\t\\t// using 4 splitting planes to rule out intersections\\n\\n\\t\\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\\n\\t\\t\\tbox.max.y < this.min.y || box.min.y > this.max.y ? false : true;\\n\\n\\t},\\n\\n\\tclampPoint: function ( point, target ) {\\n\\n\\t\\tif ( target === undefined ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Box2: .clampPoint() target is now required' );\\n\\t\\t\\ttarget = new Vector2();\\n\\n\\t\\t}\\n\\n\\t\\treturn target.copy( point ).clamp( this.min, this.max );\\n\\n\\t},\\n\\n\\tdistanceToPoint: function () {\\n\\n\\t\\tvar v1 = new Vector2();\\n\\n\\t\\treturn function distanceToPoint( point ) {\\n\\n\\t\\t\\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\\n\\t\\t\\treturn clampedPoint.sub( point ).length();\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\tintersect: function ( box ) {\\n\\n\\t\\tthis.min.max( box.min );\\n\\t\\tthis.max.min( box.max );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tunion: function ( box ) {\\n\\n\\t\\tthis.min.min( box.min );\\n\\t\\tthis.max.max( box.max );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\ttranslate: function ( offset ) {\\n\\n\\t\\tthis.min.add( offset );\\n\\t\\tthis.max.add( offset );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tequals: function ( box ) {\\n\\n\\t\\treturn box.min.equals( this.min ) && box.max.equals( this.max );\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author bhouston / http://clara.io\\n */\\n\\nfunction Line3( start, end ) {\\n\\n\\tthis.start = ( start !== undefined ) ? start : new Vector3();\\n\\tthis.end = ( end !== undefined ) ? end : new Vector3();\\n\\n}\\n\\nObject.assign( Line3.prototype, {\\n\\n\\tset: function ( start, end ) {\\n\\n\\t\\tthis.start.copy( start );\\n\\t\\tthis.end.copy( end );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tclone: function () {\\n\\n\\t\\treturn new this.constructor().copy( this );\\n\\n\\t},\\n\\n\\tcopy: function ( line ) {\\n\\n\\t\\tthis.start.copy( line.start );\\n\\t\\tthis.end.copy( line.end );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tgetCenter: function ( target ) {\\n\\n\\t\\tif ( target === undefined ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Line3: .getCenter() target is now required' );\\n\\t\\t\\ttarget = new Vector3();\\n\\n\\t\\t}\\n\\n\\t\\treturn target.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\\n\\n\\t},\\n\\n\\tdelta: function ( target ) {\\n\\n\\t\\tif ( target === undefined ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Line3: .delta() target is now required' );\\n\\t\\t\\ttarget = new Vector3();\\n\\n\\t\\t}\\n\\n\\t\\treturn target.subVectors( this.end, this.start );\\n\\n\\t},\\n\\n\\tdistanceSq: function () {\\n\\n\\t\\treturn this.start.distanceToSquared( this.end );\\n\\n\\t},\\n\\n\\tdistance: function () {\\n\\n\\t\\treturn this.start.distanceTo( this.end );\\n\\n\\t},\\n\\n\\tat: function ( t, target ) {\\n\\n\\t\\tif ( target === undefined ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Line3: .at() target is now required' );\\n\\t\\t\\ttarget = new Vector3();\\n\\n\\t\\t}\\n\\n\\t\\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\\n\\n\\t},\\n\\n\\tclosestPointToPointParameter: function () {\\n\\n\\t\\tvar startP = new Vector3();\\n\\t\\tvar startEnd = new Vector3();\\n\\n\\t\\treturn function closestPointToPointParameter( point, clampToLine ) {\\n\\n\\t\\t\\tstartP.subVectors( point, this.start );\\n\\t\\t\\tstartEnd.subVectors( this.end, this.start );\\n\\n\\t\\t\\tvar startEnd2 = startEnd.dot( startEnd );\\n\\t\\t\\tvar startEnd_startP = startEnd.dot( startP );\\n\\n\\t\\t\\tvar t = startEnd_startP / startEnd2;\\n\\n\\t\\t\\tif ( clampToLine ) {\\n\\n\\t\\t\\t\\tt = _Math.clamp( t, 0, 1 );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn t;\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\n\\tclosestPointToPoint: function ( point, clampToLine, target ) {\\n\\n\\t\\tvar t = this.closestPointToPointParameter( point, clampToLine );\\n\\n\\t\\tif ( target === undefined ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Line3: .closestPointToPoint() target is now required' );\\n\\t\\t\\ttarget = new Vector3();\\n\\n\\t\\t}\\n\\n\\t\\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\\n\\n\\t},\\n\\n\\tapplyMatrix4: function ( matrix ) {\\n\\n\\t\\tthis.start.applyMatrix4( matrix );\\n\\t\\tthis.end.applyMatrix4( matrix );\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\tequals: function ( line ) {\\n\\n\\t\\treturn line.start.equals( this.start ) && line.end.equals( this.end );\\n\\n\\t}\\n\\n} );\\n\\n/**\\n * @author alteredq / http://alteredqualia.com/\\n */\\n\\nfunction ImmediateRenderObject( material ) {\\n\\n\\tObject3D.call( this );\\n\\n\\tthis.material = material;\\n\\tthis.render = function ( /* renderCallback */ ) {};\\n\\n}\\n\\nImmediateRenderObject.prototype = Object.create( Object3D.prototype );\\nImmediateRenderObject.prototype.constructor = ImmediateRenderObject;\\n\\nImmediateRenderObject.prototype.isImmediateRenderObject = true;\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n * @author WestLangley / http://github.com/WestLangley\\n */\\n\\nfunction VertexNormalsHelper( object, size, hex, linewidth ) {\\n\\n\\tthis.object = object;\\n\\n\\tthis.size = ( size !== undefined ) ? size : 1;\\n\\n\\tvar color = ( hex !== undefined ) ? hex : 0xff0000;\\n\\n\\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\\n\\n\\t//\\n\\n\\tvar nNormals = 0;\\n\\n\\tvar objGeometry = this.object.geometry;\\n\\n\\tif ( objGeometry && objGeometry.isGeometry ) {\\n\\n\\t\\tnNormals = objGeometry.faces.length * 3;\\n\\n\\t} else if ( objGeometry && objGeometry.isBufferGeometry ) {\\n\\n\\t\\tnNormals = objGeometry.attributes.normal.count;\\n\\n\\t}\\n\\n\\t//\\n\\n\\tvar geometry = new BufferGeometry();\\n\\n\\tvar positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );\\n\\n\\tgeometry.addAttribute( 'position', positions );\\n\\n\\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );\\n\\n\\t//\\n\\n\\tthis.matrixAutoUpdate = false;\\n\\n\\tthis.update();\\n\\n}\\n\\nVertexNormalsHelper.prototype = Object.create( LineSegments.prototype );\\nVertexNormalsHelper.prototype.constructor = VertexNormalsHelper;\\n\\nVertexNormalsHelper.prototype.update = ( function () {\\n\\n\\tvar v1 = new Vector3();\\n\\tvar v2 = new Vector3();\\n\\tvar normalMatrix = new Matrix3();\\n\\n\\treturn function update() {\\n\\n\\t\\tvar keys = [ 'a', 'b', 'c' ];\\n\\n\\t\\tthis.object.updateMatrixWorld( true );\\n\\n\\t\\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\\n\\n\\t\\tvar matrixWorld = this.object.matrixWorld;\\n\\n\\t\\tvar position = this.geometry.attributes.position;\\n\\n\\t\\t//\\n\\n\\t\\tvar objGeometry = this.object.geometry;\\n\\n\\t\\tif ( objGeometry && objGeometry.isGeometry ) {\\n\\n\\t\\t\\tvar vertices = objGeometry.vertices;\\n\\n\\t\\t\\tvar faces = objGeometry.faces;\\n\\n\\t\\t\\tvar idx = 0;\\n\\n\\t\\t\\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\\n\\n\\t\\t\\t\\tvar face = faces[ i ];\\n\\n\\t\\t\\t\\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\\n\\n\\t\\t\\t\\t\\tvar vertex = vertices[ face[ keys[ j ] ] ];\\n\\n\\t\\t\\t\\t\\tvar normal = face.vertexNormals[ j ];\\n\\n\\t\\t\\t\\t\\tv1.copy( vertex ).applyMatrix4( matrixWorld );\\n\\n\\t\\t\\t\\t\\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\\n\\n\\t\\t\\t\\t\\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\\n\\n\\t\\t\\t\\t\\tidx = idx + 1;\\n\\n\\t\\t\\t\\t\\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\\n\\n\\t\\t\\t\\t\\tidx = idx + 1;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t} else if ( objGeometry && objGeometry.isBufferGeometry ) {\\n\\n\\t\\t\\tvar objPos = objGeometry.attributes.position;\\n\\n\\t\\t\\tvar objNorm = objGeometry.attributes.normal;\\n\\n\\t\\t\\tvar idx = 0;\\n\\n\\t\\t\\t// for simplicity, ignore index and drawcalls, and render every normal\\n\\n\\t\\t\\tfor ( var j = 0, jl = objPos.count; j < jl; j ++ ) {\\n\\n\\t\\t\\t\\tv1.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );\\n\\n\\t\\t\\t\\tv2.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );\\n\\n\\t\\t\\t\\tv2.applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\\n\\n\\t\\t\\t\\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\\n\\n\\t\\t\\t\\tidx = idx + 1;\\n\\n\\t\\t\\t\\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\\n\\n\\t\\t\\t\\tidx = idx + 1;\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tposition.needsUpdate = true;\\n\\n\\t};\\n\\n}() );\\n\\n/**\\n * @author alteredq / http://alteredqualia.com/\\n * @author mrdoob / http://mrdoob.com/\\n * @author WestLangley / http://github.com/WestLangley\\n */\\n\\nfunction SpotLightHelper( light, color ) {\\n\\n\\tObject3D.call( this );\\n\\n\\tthis.light = light;\\n\\tthis.light.updateMatrixWorld();\\n\\n\\tthis.matrix = light.matrixWorld;\\n\\tthis.matrixAutoUpdate = false;\\n\\n\\tthis.color = color;\\n\\n\\tvar geometry = new BufferGeometry();\\n\\n\\tvar positions = [\\n\\t\\t0, 0, 0, \\t0, 0, 1,\\n\\t\\t0, 0, 0, \\t1, 0, 1,\\n\\t\\t0, 0, 0,\\t- 1, 0, 1,\\n\\t\\t0, 0, 0, \\t0, 1, 1,\\n\\t\\t0, 0, 0, \\t0, - 1, 1\\n\\t];\\n\\n\\tfor ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {\\n\\n\\t\\tvar p1 = ( i / l ) * Math.PI * 2;\\n\\t\\tvar p2 = ( j / l ) * Math.PI * 2;\\n\\n\\t\\tpositions.push(\\n\\t\\t\\tMath.cos( p1 ), Math.sin( p1 ), 1,\\n\\t\\t\\tMath.cos( p2 ), Math.sin( p2 ), 1\\n\\t\\t);\\n\\n\\t}\\n\\n\\tgeometry.addAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\\n\\n\\tvar material = new LineBasicMaterial( { fog: false } );\\n\\n\\tthis.cone = new LineSegments( geometry, material );\\n\\tthis.add( this.cone );\\n\\n\\tthis.update();\\n\\n}\\n\\nSpotLightHelper.prototype = Object.create( Object3D.prototype );\\nSpotLightHelper.prototype.constructor = SpotLightHelper;\\n\\nSpotLightHelper.prototype.dispose = function () {\\n\\n\\tthis.cone.geometry.dispose();\\n\\tthis.cone.material.dispose();\\n\\n};\\n\\nSpotLightHelper.prototype.update = function () {\\n\\n\\tvar vector = new Vector3();\\n\\n\\treturn function update() {\\n\\n\\t\\tthis.light.updateMatrixWorld();\\n\\n\\t\\tvar coneLength = this.light.distance ? this.light.distance : 1000;\\n\\t\\tvar coneWidth = coneLength * Math.tan( this.light.angle );\\n\\n\\t\\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\\n\\n\\t\\tvector.setFromMatrixPosition( this.light.target.matrixWorld );\\n\\n\\t\\tthis.cone.lookAt( vector );\\n\\n\\t\\tif ( this.color !== undefined ) {\\n\\n\\t\\t\\tthis.cone.material.color.set( this.color );\\n\\n\\t\\t} else {\\n\\n\\t\\t\\tthis.cone.material.color.copy( this.light.color );\\n\\n\\t\\t}\\n\\n\\t};\\n\\n}();\\n\\n/**\\n * @author Sean Griffin / http://twitter.com/sgrif\\n * @author Michael Guerrero / http://realitymeltdown.com\\n * @author mrdoob / http://mrdoob.com/\\n * @author ikerr / http://verold.com\\n * @author Mugen87 / https://github.com/Mugen87\\n */\\n\\nfunction getBoneList( object ) {\\n\\n\\tvar boneList = [];\\n\\n\\tif ( object && object.isBone ) {\\n\\n\\t\\tboneList.push( object );\\n\\n\\t}\\n\\n\\tfor ( var i = 0; i < object.children.length; i ++ ) {\\n\\n\\t\\tboneList.push.apply( boneList, getBoneList( object.children[ i ] ) );\\n\\n\\t}\\n\\n\\treturn boneList;\\n\\n}\\n\\nfunction SkeletonHelper( object ) {\\n\\n\\tvar bones = getBoneList( object );\\n\\n\\tvar geometry = new BufferGeometry();\\n\\n\\tvar vertices = [];\\n\\tvar colors = [];\\n\\n\\tvar color1 = new Color( 0, 0, 1 );\\n\\tvar color2 = new Color( 0, 1, 0 );\\n\\n\\tfor ( var i = 0; i < bones.length; i ++ ) {\\n\\n\\t\\tvar bone = bones[ i ];\\n\\n\\t\\tif ( bone.parent && bone.parent.isBone ) {\\n\\n\\t\\t\\tvertices.push( 0, 0, 0 );\\n\\t\\t\\tvertices.push( 0, 0, 0 );\\n\\t\\t\\tcolors.push( color1.r, color1.g, color1.b );\\n\\t\\t\\tcolors.push( color2.r, color2.g, color2.b );\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tgeometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\\n\\tgeometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\\n\\n\\tvar material = new LineBasicMaterial( { vertexColors: VertexColors, depthTest: false, depthWrite: false, transparent: true } );\\n\\n\\tLineSegments.call( this, geometry, material );\\n\\n\\tthis.root = object;\\n\\tthis.bones = bones;\\n\\n\\tthis.matrix = object.matrixWorld;\\n\\tthis.matrixAutoUpdate = false;\\n\\n}\\n\\nSkeletonHelper.prototype = Object.create( LineSegments.prototype );\\nSkeletonHelper.prototype.constructor = SkeletonHelper;\\n\\nSkeletonHelper.prototype.updateMatrixWorld = function () {\\n\\n\\tvar vector = new Vector3();\\n\\n\\tvar boneMatrix = new Matrix4();\\n\\tvar matrixWorldInv = new Matrix4();\\n\\n\\treturn function updateMatrixWorld( force ) {\\n\\n\\t\\tvar bones = this.bones;\\n\\n\\t\\tvar geometry = this.geometry;\\n\\t\\tvar position = geometry.getAttribute( 'position' );\\n\\n\\t\\tmatrixWorldInv.getInverse( this.root.matrixWorld );\\n\\n\\t\\tfor ( var i = 0, j = 0; i < bones.length; i ++ ) {\\n\\n\\t\\t\\tvar bone = bones[ i ];\\n\\n\\t\\t\\tif ( bone.parent && bone.parent.isBone ) {\\n\\n\\t\\t\\t\\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.matrixWorld );\\n\\t\\t\\t\\tvector.setFromMatrixPosition( boneMatrix );\\n\\t\\t\\t\\tposition.setXYZ( j, vector.x, vector.y, vector.z );\\n\\n\\t\\t\\t\\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.parent.matrixWorld );\\n\\t\\t\\t\\tvector.setFromMatrixPosition( boneMatrix );\\n\\t\\t\\t\\tposition.setXYZ( j + 1, vector.x, vector.y, vector.z );\\n\\n\\t\\t\\t\\tj += 2;\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tgeometry.getAttribute( 'position' ).needsUpdate = true;\\n\\n\\t\\tObject3D.prototype.updateMatrixWorld.call( this, force );\\n\\n\\t};\\n\\n}();\\n\\n/**\\n * @author alteredq / http://alteredqualia.com/\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\nfunction PointLightHelper( light, sphereSize, color ) {\\n\\n\\tthis.light = light;\\n\\tthis.light.updateMatrixWorld();\\n\\n\\tthis.color = color;\\n\\n\\tvar geometry = new SphereBufferGeometry( sphereSize, 4, 2 );\\n\\tvar material = new MeshBasicMaterial( { wireframe: true, fog: false } );\\n\\n\\tMesh.call( this, geometry, material );\\n\\n\\tthis.matrix = this.light.matrixWorld;\\n\\tthis.matrixAutoUpdate = false;\\n\\n\\tthis.update();\\n\\n\\n\\t/*\\n\\tvar distanceGeometry = new THREE.IcosahedronBufferGeometry( 1, 2 );\\n\\tvar distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\\n\\n\\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\\n\\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\\n\\n\\tvar d = light.distance;\\n\\n\\tif ( d === 0.0 ) {\\n\\n\\t\\tthis.lightDistance.visible = false;\\n\\n\\t} else {\\n\\n\\t\\tthis.lightDistance.scale.set( d, d, d );\\n\\n\\t}\\n\\n\\tthis.add( this.lightDistance );\\n\\t*/\\n\\n}\\n\\nPointLightHelper.prototype = Object.create( Mesh.prototype );\\nPointLightHelper.prototype.constructor = PointLightHelper;\\n\\nPointLightHelper.prototype.dispose = function () {\\n\\n\\tthis.geometry.dispose();\\n\\tthis.material.dispose();\\n\\n};\\n\\nPointLightHelper.prototype.update = function () {\\n\\n\\tif ( this.color !== undefined ) {\\n\\n\\t\\tthis.material.color.set( this.color );\\n\\n\\t} else {\\n\\n\\t\\tthis.material.color.copy( this.light.color );\\n\\n\\t}\\n\\n\\t/*\\n\\tvar d = this.light.distance;\\n\\n\\tif ( d === 0.0 ) {\\n\\n\\t\\tthis.lightDistance.visible = false;\\n\\n\\t} else {\\n\\n\\t\\tthis.lightDistance.visible = true;\\n\\t\\tthis.lightDistance.scale.set( d, d, d );\\n\\n\\t}\\n\\t*/\\n\\n};\\n\\n/**\\n * @author abelnation / http://github.com/abelnation\\n * @author Mugen87 / http://github.com/Mugen87\\n * @author WestLangley / http://github.com/WestLangley\\n *\\n *  This helper must be added as a child of the light\\n */\\n\\nfunction RectAreaLightHelper( light, color ) {\\n\\n\\tthis.type = 'RectAreaLightHelper';\\n\\n\\tthis.light = light;\\n\\n\\tthis.color = color; // optional hardwired color for the helper\\n\\n\\tvar positions = [ 1, 1, 0, - 1, 1, 0, - 1, - 1, 0, 1, - 1, 0, 1, 1, 0 ];\\n\\n\\tvar geometry = new BufferGeometry();\\n\\tgeometry.addAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\\n\\tgeometry.computeBoundingSphere();\\n\\n\\tvar material = new LineBasicMaterial( { fog: false } );\\n\\n\\tLine.call( this, geometry, material );\\n\\n\\t//\\n\\n\\tvar positions2 = [ 1, 1, 0, - 1, 1, 0, - 1, - 1, 0, 1, 1, 0, - 1, - 1, 0, 1, - 1, 0 ];\\n\\n\\tvar geometry2 = new BufferGeometry();\\n\\tgeometry2.addAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );\\n\\tgeometry2.computeBoundingSphere();\\n\\n\\tthis.add( new Mesh( geometry2, new MeshBasicMaterial( { side: BackSide, fog: false } ) ) );\\n\\n\\tthis.update();\\n\\n}\\n\\nRectAreaLightHelper.prototype = Object.create( Line.prototype );\\nRectAreaLightHelper.prototype.constructor = RectAreaLightHelper;\\n\\nRectAreaLightHelper.prototype.update = function () {\\n\\n\\tthis.scale.set( 0.5 * this.light.width, 0.5 * this.light.height, 1 );\\n\\n\\tif ( this.color !== undefined ) {\\n\\n\\t\\tthis.material.color.set( this.color );\\n\\t\\tthis.children[ 0 ].material.color.set( this.color );\\n\\n\\t} else {\\n\\n\\t\\tthis.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\\n\\n\\t\\t// prevent hue shift\\n\\t\\tvar c = this.material.color;\\n\\t\\tvar max = Math.max( c.r, c.g, c.b );\\n\\t\\tif ( max > 1 ) c.multiplyScalar( 1 / max );\\n\\n\\t\\tthis.children[ 0 ].material.color.copy( this.material.color );\\n\\n\\t}\\n\\n};\\n\\nRectAreaLightHelper.prototype.dispose = function () {\\n\\n\\tthis.geometry.dispose();\\n\\tthis.material.dispose();\\n\\tthis.children[ 0 ].geometry.dispose();\\n\\tthis.children[ 0 ].material.dispose();\\n\\n};\\n\\n/**\\n * @author alteredq / http://alteredqualia.com/\\n * @author mrdoob / http://mrdoob.com/\\n * @author Mugen87 / https://github.com/Mugen87\\n */\\n\\nfunction HemisphereLightHelper( light, size, color ) {\\n\\n\\tObject3D.call( this );\\n\\n\\tthis.light = light;\\n\\tthis.light.updateMatrixWorld();\\n\\n\\tthis.matrix = light.matrixWorld;\\n\\tthis.matrixAutoUpdate = false;\\n\\n\\tthis.color = color;\\n\\n\\tvar geometry = new OctahedronBufferGeometry( size );\\n\\tgeometry.rotateY( Math.PI * 0.5 );\\n\\n\\tthis.material = new MeshBasicMaterial( { wireframe: true, fog: false } );\\n\\tif ( this.color === undefined ) this.material.vertexColors = VertexColors;\\n\\n\\tvar position = geometry.getAttribute( 'position' );\\n\\tvar colors = new Float32Array( position.count * 3 );\\n\\n\\tgeometry.addAttribute( 'color', new BufferAttribute( colors, 3 ) );\\n\\n\\tthis.add( new Mesh( geometry, this.material ) );\\n\\n\\tthis.update();\\n\\n}\\n\\nHemisphereLightHelper.prototype = Object.create( Object3D.prototype );\\nHemisphereLightHelper.prototype.constructor = HemisphereLightHelper;\\n\\nHemisphereLightHelper.prototype.dispose = function () {\\n\\n\\tthis.children[ 0 ].geometry.dispose();\\n\\tthis.children[ 0 ].material.dispose();\\n\\n};\\n\\nHemisphereLightHelper.prototype.update = function () {\\n\\n\\tvar vector = new Vector3();\\n\\n\\tvar color1 = new Color();\\n\\tvar color2 = new Color();\\n\\n\\treturn function update() {\\n\\n\\t\\tvar mesh = this.children[ 0 ];\\n\\n\\t\\tif ( this.color !== undefined ) {\\n\\n\\t\\t\\tthis.material.color.set( this.color );\\n\\n\\t\\t} else {\\n\\n\\t\\t\\tvar colors = mesh.geometry.getAttribute( 'color' );\\n\\n\\t\\t\\tcolor1.copy( this.light.color );\\n\\t\\t\\tcolor2.copy( this.light.groundColor );\\n\\n\\t\\t\\tfor ( var i = 0, l = colors.count; i < l; i ++ ) {\\n\\n\\t\\t\\t\\tvar color = ( i < ( l / 2 ) ) ? color1 : color2;\\n\\n\\t\\t\\t\\tcolors.setXYZ( i, color.r, color.g, color.b );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tcolors.needsUpdate = true;\\n\\n\\t\\t}\\n\\n\\t\\tmesh.lookAt( vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );\\n\\n\\t};\\n\\n}();\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\nfunction GridHelper( size, divisions, color1, color2 ) {\\n\\n\\tsize = size || 10;\\n\\tdivisions = divisions || 10;\\n\\tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\\n\\tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\\n\\n\\tvar center = divisions / 2;\\n\\tvar step = size / divisions;\\n\\tvar halfSize = size / 2;\\n\\n\\tvar vertices = [], colors = [];\\n\\n\\tfor ( var i = 0, j = 0, k = - halfSize; i <= divisions; i ++, k += step ) {\\n\\n\\t\\tvertices.push( - halfSize, 0, k, halfSize, 0, k );\\n\\t\\tvertices.push( k, 0, - halfSize, k, 0, halfSize );\\n\\n\\t\\tvar color = i === center ? color1 : color2;\\n\\n\\t\\tcolor.toArray( colors, j ); j += 3;\\n\\t\\tcolor.toArray( colors, j ); j += 3;\\n\\t\\tcolor.toArray( colors, j ); j += 3;\\n\\t\\tcolor.toArray( colors, j ); j += 3;\\n\\n\\t}\\n\\n\\tvar geometry = new BufferGeometry();\\n\\tgeometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\\n\\tgeometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\\n\\n\\tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\\n\\n\\tLineSegments.call( this, geometry, material );\\n\\n}\\n\\nGridHelper.prototype = Object.create( LineSegments.prototype );\\nGridHelper.prototype.constructor = GridHelper;\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n * @author Mugen87 / http://github.com/Mugen87\\n * @author Hectate / http://www.github.com/Hectate\\n */\\n\\nfunction PolarGridHelper( radius, radials, circles, divisions, color1, color2 ) {\\n\\n\\tradius = radius || 10;\\n\\tradials = radials || 16;\\n\\tcircles = circles || 8;\\n\\tdivisions = divisions || 64;\\n\\tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\\n\\tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\\n\\n\\tvar vertices = [];\\n\\tvar colors = [];\\n\\n\\tvar x, z;\\n\\tvar v, i, j, r, color;\\n\\n\\t// create the radials\\n\\n\\tfor ( i = 0; i <= radials; i ++ ) {\\n\\n\\t\\tv = ( i / radials ) * ( Math.PI * 2 );\\n\\n\\t\\tx = Math.sin( v ) * radius;\\n\\t\\tz = Math.cos( v ) * radius;\\n\\n\\t\\tvertices.push( 0, 0, 0 );\\n\\t\\tvertices.push( x, 0, z );\\n\\n\\t\\tcolor = ( i & 1 ) ? color1 : color2;\\n\\n\\t\\tcolors.push( color.r, color.g, color.b );\\n\\t\\tcolors.push( color.r, color.g, color.b );\\n\\n\\t}\\n\\n\\t// create the circles\\n\\n\\tfor ( i = 0; i <= circles; i ++ ) {\\n\\n\\t\\tcolor = ( i & 1 ) ? color1 : color2;\\n\\n\\t\\tr = radius - ( radius / circles * i );\\n\\n\\t\\tfor ( j = 0; j < divisions; j ++ ) {\\n\\n\\t\\t\\t// first vertex\\n\\n\\t\\t\\tv = ( j / divisions ) * ( Math.PI * 2 );\\n\\n\\t\\t\\tx = Math.sin( v ) * r;\\n\\t\\t\\tz = Math.cos( v ) * r;\\n\\n\\t\\t\\tvertices.push( x, 0, z );\\n\\t\\t\\tcolors.push( color.r, color.g, color.b );\\n\\n\\t\\t\\t// second vertex\\n\\n\\t\\t\\tv = ( ( j + 1 ) / divisions ) * ( Math.PI * 2 );\\n\\n\\t\\t\\tx = Math.sin( v ) * r;\\n\\t\\t\\tz = Math.cos( v ) * r;\\n\\n\\t\\t\\tvertices.push( x, 0, z );\\n\\t\\t\\tcolors.push( color.r, color.g, color.b );\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tvar geometry = new BufferGeometry();\\n\\tgeometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\\n\\tgeometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\\n\\n\\tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\\n\\n\\tLineSegments.call( this, geometry, material );\\n\\n}\\n\\nPolarGridHelper.prototype = Object.create( LineSegments.prototype );\\nPolarGridHelper.prototype.constructor = PolarGridHelper;\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n * @author WestLangley / http://github.com/WestLangley\\n */\\n\\nfunction FaceNormalsHelper( object, size, hex, linewidth ) {\\n\\n\\t// FaceNormalsHelper only supports THREE.Geometry\\n\\n\\tthis.object = object;\\n\\n\\tthis.size = ( size !== undefined ) ? size : 1;\\n\\n\\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\\n\\n\\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\\n\\n\\t//\\n\\n\\tvar nNormals = 0;\\n\\n\\tvar objGeometry = this.object.geometry;\\n\\n\\tif ( objGeometry && objGeometry.isGeometry ) {\\n\\n\\t\\tnNormals = objGeometry.faces.length;\\n\\n\\t} else {\\n\\n\\t\\tconsole.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );\\n\\n\\t}\\n\\n\\t//\\n\\n\\tvar geometry = new BufferGeometry();\\n\\n\\tvar positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );\\n\\n\\tgeometry.addAttribute( 'position', positions );\\n\\n\\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );\\n\\n\\t//\\n\\n\\tthis.matrixAutoUpdate = false;\\n\\tthis.update();\\n\\n}\\n\\nFaceNormalsHelper.prototype = Object.create( LineSegments.prototype );\\nFaceNormalsHelper.prototype.constructor = FaceNormalsHelper;\\n\\nFaceNormalsHelper.prototype.update = ( function () {\\n\\n\\tvar v1 = new Vector3();\\n\\tvar v2 = new Vector3();\\n\\tvar normalMatrix = new Matrix3();\\n\\n\\treturn function update() {\\n\\n\\t\\tthis.object.updateMatrixWorld( true );\\n\\n\\t\\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\\n\\n\\t\\tvar matrixWorld = this.object.matrixWorld;\\n\\n\\t\\tvar position = this.geometry.attributes.position;\\n\\n\\t\\t//\\n\\n\\t\\tvar objGeometry = this.object.geometry;\\n\\n\\t\\tvar vertices = objGeometry.vertices;\\n\\n\\t\\tvar faces = objGeometry.faces;\\n\\n\\t\\tvar idx = 0;\\n\\n\\t\\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\\n\\n\\t\\t\\tvar face = faces[ i ];\\n\\n\\t\\t\\tvar normal = face.normal;\\n\\n\\t\\t\\tv1.copy( vertices[ face.a ] )\\n\\t\\t\\t\\t.add( vertices[ face.b ] )\\n\\t\\t\\t\\t.add( vertices[ face.c ] )\\n\\t\\t\\t\\t.divideScalar( 3 )\\n\\t\\t\\t\\t.applyMatrix4( matrixWorld );\\n\\n\\t\\t\\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\\n\\n\\t\\t\\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\\n\\n\\t\\t\\tidx = idx + 1;\\n\\n\\t\\t\\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\\n\\n\\t\\t\\tidx = idx + 1;\\n\\n\\t\\t}\\n\\n\\t\\tposition.needsUpdate = true;\\n\\n\\t};\\n\\n}() );\\n\\n/**\\n * @author alteredq / http://alteredqualia.com/\\n * @author mrdoob / http://mrdoob.com/\\n * @author WestLangley / http://github.com/WestLangley\\n */\\n\\nfunction DirectionalLightHelper( light, size, color ) {\\n\\n\\tObject3D.call( this );\\n\\n\\tthis.light = light;\\n\\tthis.light.updateMatrixWorld();\\n\\n\\tthis.matrix = light.matrixWorld;\\n\\tthis.matrixAutoUpdate = false;\\n\\n\\tthis.color = color;\\n\\n\\tif ( size === undefined ) size = 1;\\n\\n\\tvar geometry = new BufferGeometry();\\n\\tgeometry.addAttribute( 'position', new Float32BufferAttribute( [\\n\\t\\t- size, size, 0,\\n\\t\\tsize, size, 0,\\n\\t\\tsize, - size, 0,\\n\\t\\t- size, - size, 0,\\n\\t\\t- size, size, 0\\n\\t], 3 ) );\\n\\n\\tvar material = new LineBasicMaterial( { fog: false } );\\n\\n\\tthis.lightPlane = new Line( geometry, material );\\n\\tthis.add( this.lightPlane );\\n\\n\\tgeometry = new BufferGeometry();\\n\\tgeometry.addAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );\\n\\n\\tthis.targetLine = new Line( geometry, material );\\n\\tthis.add( this.targetLine );\\n\\n\\tthis.update();\\n\\n}\\n\\nDirectionalLightHelper.prototype = Object.create( Object3D.prototype );\\nDirectionalLightHelper.prototype.constructor = DirectionalLightHelper;\\n\\nDirectionalLightHelper.prototype.dispose = function () {\\n\\n\\tthis.lightPlane.geometry.dispose();\\n\\tthis.lightPlane.material.dispose();\\n\\tthis.targetLine.geometry.dispose();\\n\\tthis.targetLine.material.dispose();\\n\\n};\\n\\nDirectionalLightHelper.prototype.update = function () {\\n\\n\\tvar v1 = new Vector3();\\n\\tvar v2 = new Vector3();\\n\\tvar v3 = new Vector3();\\n\\n\\treturn function update() {\\n\\n\\t\\tv1.setFromMatrixPosition( this.light.matrixWorld );\\n\\t\\tv2.setFromMatrixPosition( this.light.target.matrixWorld );\\n\\t\\tv3.subVectors( v2, v1 );\\n\\n\\t\\tthis.lightPlane.lookAt( v2 );\\n\\n\\t\\tif ( this.color !== undefined ) {\\n\\n\\t\\t\\tthis.lightPlane.material.color.set( this.color );\\n\\t\\t\\tthis.targetLine.material.color.set( this.color );\\n\\n\\t\\t} else {\\n\\n\\t\\t\\tthis.lightPlane.material.color.copy( this.light.color );\\n\\t\\t\\tthis.targetLine.material.color.copy( this.light.color );\\n\\n\\t\\t}\\n\\n\\t\\tthis.targetLine.lookAt( v2 );\\n\\t\\tthis.targetLine.scale.z = v3.length();\\n\\n\\t};\\n\\n}();\\n\\n/**\\n * @author alteredq / http://alteredqualia.com/\\n * @author Mugen87 / https://github.com/Mugen87\\n *\\n *\\t- shows frustum, line of sight and up of the camera\\n *\\t- suitable for fast updates\\n * \\t- based on frustum visualization in lightgl.js shadowmap example\\n *\\t\\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\\n */\\n\\nfunction CameraHelper( camera ) {\\n\\n\\tvar geometry = new BufferGeometry();\\n\\tvar material = new LineBasicMaterial( { color: 0xffffff, vertexColors: FaceColors } );\\n\\n\\tvar vertices = [];\\n\\tvar colors = [];\\n\\n\\tvar pointMap = {};\\n\\n\\t// colors\\n\\n\\tvar colorFrustum = new Color( 0xffaa00 );\\n\\tvar colorCone = new Color( 0xff0000 );\\n\\tvar colorUp = new Color( 0x00aaff );\\n\\tvar colorTarget = new Color( 0xffffff );\\n\\tvar colorCross = new Color( 0x333333 );\\n\\n\\t// near\\n\\n\\taddLine( 'n1', 'n2', colorFrustum );\\n\\taddLine( 'n2', 'n4', colorFrustum );\\n\\taddLine( 'n4', 'n3', colorFrustum );\\n\\taddLine( 'n3', 'n1', colorFrustum );\\n\\n\\t// far\\n\\n\\taddLine( 'f1', 'f2', colorFrustum );\\n\\taddLine( 'f2', 'f4', colorFrustum );\\n\\taddLine( 'f4', 'f3', colorFrustum );\\n\\taddLine( 'f3', 'f1', colorFrustum );\\n\\n\\t// sides\\n\\n\\taddLine( 'n1', 'f1', colorFrustum );\\n\\taddLine( 'n2', 'f2', colorFrustum );\\n\\taddLine( 'n3', 'f3', colorFrustum );\\n\\taddLine( 'n4', 'f4', colorFrustum );\\n\\n\\t// cone\\n\\n\\taddLine( 'p', 'n1', colorCone );\\n\\taddLine( 'p', 'n2', colorCone );\\n\\taddLine( 'p', 'n3', colorCone );\\n\\taddLine( 'p', 'n4', colorCone );\\n\\n\\t// up\\n\\n\\taddLine( 'u1', 'u2', colorUp );\\n\\taddLine( 'u2', 'u3', colorUp );\\n\\taddLine( 'u3', 'u1', colorUp );\\n\\n\\t// target\\n\\n\\taddLine( 'c', 't', colorTarget );\\n\\taddLine( 'p', 'c', colorCross );\\n\\n\\t// cross\\n\\n\\taddLine( 'cn1', 'cn2', colorCross );\\n\\taddLine( 'cn3', 'cn4', colorCross );\\n\\n\\taddLine( 'cf1', 'cf2', colorCross );\\n\\taddLine( 'cf3', 'cf4', colorCross );\\n\\n\\tfunction addLine( a, b, color ) {\\n\\n\\t\\taddPoint( a, color );\\n\\t\\taddPoint( b, color );\\n\\n\\t}\\n\\n\\tfunction addPoint( id, color ) {\\n\\n\\t\\tvertices.push( 0, 0, 0 );\\n\\t\\tcolors.push( color.r, color.g, color.b );\\n\\n\\t\\tif ( pointMap[ id ] === undefined ) {\\n\\n\\t\\t\\tpointMap[ id ] = [];\\n\\n\\t\\t}\\n\\n\\t\\tpointMap[ id ].push( ( vertices.length / 3 ) - 1 );\\n\\n\\t}\\n\\n\\tgeometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\\n\\tgeometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\\n\\n\\tLineSegments.call( this, geometry, material );\\n\\n\\tthis.camera = camera;\\n\\tif ( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();\\n\\n\\tthis.matrix = camera.matrixWorld;\\n\\tthis.matrixAutoUpdate = false;\\n\\n\\tthis.pointMap = pointMap;\\n\\n\\tthis.update();\\n\\n}\\n\\nCameraHelper.prototype = Object.create( LineSegments.prototype );\\nCameraHelper.prototype.constructor = CameraHelper;\\n\\nCameraHelper.prototype.update = function () {\\n\\n\\tvar geometry, pointMap;\\n\\n\\tvar vector = new Vector3();\\n\\tvar camera = new Camera();\\n\\n\\tfunction setPoint( point, x, y, z ) {\\n\\n\\t\\tvector.set( x, y, z ).unproject( camera );\\n\\n\\t\\tvar points = pointMap[ point ];\\n\\n\\t\\tif ( points !== undefined ) {\\n\\n\\t\\t\\tvar position = geometry.getAttribute( 'position' );\\n\\n\\t\\t\\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\\n\\n\\t\\t\\t\\tposition.setXYZ( points[ i ], vector.x, vector.y, vector.z );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\treturn function update() {\\n\\n\\t\\tgeometry = this.geometry;\\n\\t\\tpointMap = this.pointMap;\\n\\n\\t\\tvar w = 1, h = 1;\\n\\n\\t\\t// we need just camera projection matrix\\n\\t\\t// world matrix must be identity\\n\\n\\t\\tcamera.projectionMatrix.copy( this.camera.projectionMatrix );\\n\\n\\t\\t// center / target\\n\\n\\t\\tsetPoint( 'c', 0, 0, - 1 );\\n\\t\\tsetPoint( 't', 0, 0, 1 );\\n\\n\\t\\t// near\\n\\n\\t\\tsetPoint( 'n1', - w, - h, - 1 );\\n\\t\\tsetPoint( 'n2', w, - h, - 1 );\\n\\t\\tsetPoint( 'n3', - w, h, - 1 );\\n\\t\\tsetPoint( 'n4', w, h, - 1 );\\n\\n\\t\\t// far\\n\\n\\t\\tsetPoint( 'f1', - w, - h, 1 );\\n\\t\\tsetPoint( 'f2', w, - h, 1 );\\n\\t\\tsetPoint( 'f3', - w, h, 1 );\\n\\t\\tsetPoint( 'f4', w, h, 1 );\\n\\n\\t\\t// up\\n\\n\\t\\tsetPoint( 'u1', w * 0.7, h * 1.1, - 1 );\\n\\t\\tsetPoint( 'u2', - w * 0.7, h * 1.1, - 1 );\\n\\t\\tsetPoint( 'u3', 0, h * 2, - 1 );\\n\\n\\t\\t// cross\\n\\n\\t\\tsetPoint( 'cf1', - w, 0, 1 );\\n\\t\\tsetPoint( 'cf2', w, 0, 1 );\\n\\t\\tsetPoint( 'cf3', 0, - h, 1 );\\n\\t\\tsetPoint( 'cf4', 0, h, 1 );\\n\\n\\t\\tsetPoint( 'cn1', - w, 0, - 1 );\\n\\t\\tsetPoint( 'cn2', w, 0, - 1 );\\n\\t\\tsetPoint( 'cn3', 0, - h, - 1 );\\n\\t\\tsetPoint( 'cn4', 0, h, - 1 );\\n\\n\\t\\tgeometry.getAttribute( 'position' ).needsUpdate = true;\\n\\n\\t};\\n\\n}();\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n * @author Mugen87 / http://github.com/Mugen87\\n */\\n\\nfunction BoxHelper( object, color ) {\\n\\n\\tthis.object = object;\\n\\n\\tif ( color === undefined ) color = 0xffff00;\\n\\n\\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\\n\\tvar positions = new Float32Array( 8 * 3 );\\n\\n\\tvar geometry = new BufferGeometry();\\n\\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\\n\\tgeometry.addAttribute( 'position', new BufferAttribute( positions, 3 ) );\\n\\n\\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );\\n\\n\\tthis.matrixAutoUpdate = false;\\n\\n\\tthis.update();\\n\\n}\\n\\nBoxHelper.prototype = Object.create( LineSegments.prototype );\\nBoxHelper.prototype.constructor = BoxHelper;\\n\\nBoxHelper.prototype.update = ( function () {\\n\\n\\tvar box = new Box3();\\n\\n\\treturn function update( object ) {\\n\\n\\t\\tif ( object !== undefined ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.BoxHelper: .update() has no longer arguments.' );\\n\\n\\t\\t}\\n\\n\\t\\tif ( this.object !== undefined ) {\\n\\n\\t\\t\\tbox.setFromObject( this.object );\\n\\n\\t\\t}\\n\\n\\t\\tif ( box.isEmpty() ) return;\\n\\n\\t\\tvar min = box.min;\\n\\t\\tvar max = box.max;\\n\\n\\t\\t/*\\n\\t\\t  5____4\\n\\t\\t1/___0/|\\n\\t\\t| 6__|_7\\n\\t\\t2/___3/\\n\\n\\t\\t0: max.x, max.y, max.z\\n\\t\\t1: min.x, max.y, max.z\\n\\t\\t2: min.x, min.y, max.z\\n\\t\\t3: max.x, min.y, max.z\\n\\t\\t4: max.x, max.y, min.z\\n\\t\\t5: min.x, max.y, min.z\\n\\t\\t6: min.x, min.y, min.z\\n\\t\\t7: max.x, min.y, min.z\\n\\t\\t*/\\n\\n\\t\\tvar position = this.geometry.attributes.position;\\n\\t\\tvar array = position.array;\\n\\n\\t\\tarray[ 0 ] = max.x; array[ 1 ] = max.y; array[ 2 ] = max.z;\\n\\t\\tarray[ 3 ] = min.x; array[ 4 ] = max.y; array[ 5 ] = max.z;\\n\\t\\tarray[ 6 ] = min.x; array[ 7 ] = min.y; array[ 8 ] = max.z;\\n\\t\\tarray[ 9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;\\n\\t\\tarray[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;\\n\\t\\tarray[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;\\n\\t\\tarray[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;\\n\\t\\tarray[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;\\n\\n\\t\\tposition.needsUpdate = true;\\n\\n\\t\\tthis.geometry.computeBoundingSphere();\\n\\n\\t};\\n\\n} )();\\n\\nBoxHelper.prototype.setFromObject = function ( object ) {\\n\\n\\tthis.object = object;\\n\\tthis.update();\\n\\n\\treturn this;\\n\\n};\\n\\nBoxHelper.prototype.copy = function ( source ) {\\n\\n\\tLineSegments.prototype.copy.call( this, source );\\n\\n\\tthis.object = source.object;\\n\\n\\treturn this;\\n\\n};\\n\\nBoxHelper.prototype.clone = function () {\\n\\n\\treturn new this.constructor().copy( this );\\n\\n};\\n\\n/**\\n * @author WestLangley / http://github.com/WestLangley\\n */\\n\\nfunction Box3Helper( box, hex ) {\\n\\n\\tthis.type = 'Box3Helper';\\n\\n\\tthis.box = box;\\n\\n\\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\\n\\n\\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\\n\\n\\tvar positions = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, - 1, - 1, 1, - 1, - 1, - 1, - 1, 1, - 1, - 1 ];\\n\\n\\tvar geometry = new BufferGeometry();\\n\\n\\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\\n\\n\\tgeometry.addAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\\n\\n\\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );\\n\\n\\tthis.geometry.computeBoundingSphere();\\n\\n}\\n\\nBox3Helper.prototype = Object.create( LineSegments.prototype );\\nBox3Helper.prototype.constructor = Box3Helper;\\n\\nBox3Helper.prototype.updateMatrixWorld = function ( force ) {\\n\\n\\tvar box = this.box;\\n\\n\\tif ( box.isEmpty() ) return;\\n\\n\\tbox.getCenter( this.position );\\n\\n\\tbox.getSize( this.scale );\\n\\n\\tthis.scale.multiplyScalar( 0.5 );\\n\\n\\tObject3D.prototype.updateMatrixWorld.call( this, force );\\n\\n};\\n\\n/**\\n * @author WestLangley / http://github.com/WestLangley\\n */\\n\\nfunction PlaneHelper( plane, size, hex ) {\\n\\n\\tthis.type = 'PlaneHelper';\\n\\n\\tthis.plane = plane;\\n\\n\\tthis.size = ( size === undefined ) ? 1 : size;\\n\\n\\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\\n\\n\\tvar positions = [ 1, - 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0 ];\\n\\n\\tvar geometry = new BufferGeometry();\\n\\tgeometry.addAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\\n\\tgeometry.computeBoundingSphere();\\n\\n\\tLine.call( this, geometry, new LineBasicMaterial( { color: color } ) );\\n\\n\\t//\\n\\n\\tvar positions2 = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, - 1, 1, 1, - 1, 1 ];\\n\\n\\tvar geometry2 = new BufferGeometry();\\n\\tgeometry2.addAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );\\n\\tgeometry2.computeBoundingSphere();\\n\\n\\tthis.add( new Mesh( geometry2, new MeshBasicMaterial( { color: color, opacity: 0.2, transparent: true, depthWrite: false } ) ) );\\n\\n}\\n\\nPlaneHelper.prototype = Object.create( Line.prototype );\\nPlaneHelper.prototype.constructor = PlaneHelper;\\n\\nPlaneHelper.prototype.updateMatrixWorld = function ( force ) {\\n\\n\\tvar scale = - this.plane.constant;\\n\\n\\tif ( Math.abs( scale ) < 1e-8 ) scale = 1e-8; // sign does not matter\\n\\n\\tthis.scale.set( 0.5 * this.size, 0.5 * this.size, scale );\\n\\n\\tthis.children[ 0 ].material.side = ( scale < 0 ) ? BackSide : FrontSide; // renderer flips side when determinant < 0; flipping not wanted here\\n\\n\\tthis.lookAt( this.plane.normal );\\n\\n\\tObject3D.prototype.updateMatrixWorld.call( this, force );\\n\\n};\\n\\n/**\\n * @author WestLangley / http://github.com/WestLangley\\n * @author zz85 / http://github.com/zz85\\n * @author bhouston / http://clara.io\\n *\\n * Creates an arrow for visualizing directions\\n *\\n * Parameters:\\n *  dir - Vector3\\n *  origin - Vector3\\n *  length - Number\\n *  color - color in hex value\\n *  headLength - Number\\n *  headWidth - Number\\n */\\n\\nvar lineGeometry, coneGeometry;\\n\\nfunction ArrowHelper( dir, origin, length, color, headLength, headWidth ) {\\n\\n\\t// dir is assumed to be normalized\\n\\n\\tObject3D.call( this );\\n\\n\\tif ( dir === undefined ) dir = new Vector3( 0, 0, 1 );\\n\\tif ( origin === undefined ) origin = new Vector3( 0, 0, 0 );\\n\\tif ( length === undefined ) length = 1;\\n\\tif ( color === undefined ) color = 0xffff00;\\n\\tif ( headLength === undefined ) headLength = 0.2 * length;\\n\\tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\\n\\n\\tif ( lineGeometry === undefined ) {\\n\\n\\t\\tlineGeometry = new BufferGeometry();\\n\\t\\tlineGeometry.addAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );\\n\\n\\t\\tconeGeometry = new CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );\\n\\t\\tconeGeometry.translate( 0, - 0.5, 0 );\\n\\n\\t}\\n\\n\\tthis.position.copy( origin );\\n\\n\\tthis.line = new Line( lineGeometry, new LineBasicMaterial( { color: color } ) );\\n\\tthis.line.matrixAutoUpdate = false;\\n\\tthis.add( this.line );\\n\\n\\tthis.cone = new Mesh( coneGeometry, new MeshBasicMaterial( { color: color } ) );\\n\\tthis.cone.matrixAutoUpdate = false;\\n\\tthis.add( this.cone );\\n\\n\\tthis.setDirection( dir );\\n\\tthis.setLength( length, headLength, headWidth );\\n\\n}\\n\\nArrowHelper.prototype = Object.create( Object3D.prototype );\\nArrowHelper.prototype.constructor = ArrowHelper;\\n\\nArrowHelper.prototype.setDirection = ( function () {\\n\\n\\tvar axis = new Vector3();\\n\\tvar radians;\\n\\n\\treturn function setDirection( dir ) {\\n\\n\\t\\t// dir is assumed to be normalized\\n\\n\\t\\tif ( dir.y > 0.99999 ) {\\n\\n\\t\\t\\tthis.quaternion.set( 0, 0, 0, 1 );\\n\\n\\t\\t} else if ( dir.y < - 0.99999 ) {\\n\\n\\t\\t\\tthis.quaternion.set( 1, 0, 0, 0 );\\n\\n\\t\\t} else {\\n\\n\\t\\t\\taxis.set( dir.z, 0, - dir.x ).normalize();\\n\\n\\t\\t\\tradians = Math.acos( dir.y );\\n\\n\\t\\t\\tthis.quaternion.setFromAxisAngle( axis, radians );\\n\\n\\t\\t}\\n\\n\\t};\\n\\n}() );\\n\\nArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {\\n\\n\\tif ( headLength === undefined ) headLength = 0.2 * length;\\n\\tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\\n\\n\\tthis.line.scale.set( 1, Math.max( 0, length - headLength ), 1 );\\n\\tthis.line.updateMatrix();\\n\\n\\tthis.cone.scale.set( headWidth, headLength, headWidth );\\n\\tthis.cone.position.y = length;\\n\\tthis.cone.updateMatrix();\\n\\n};\\n\\nArrowHelper.prototype.setColor = function ( color ) {\\n\\n\\tthis.line.material.color.copy( color );\\n\\tthis.cone.material.color.copy( color );\\n\\n};\\n\\nArrowHelper.prototype.copy = function ( source ) {\\n\\n\\tObject3D.prototype.copy.call( this, source, false );\\n\\n\\tthis.line.copy( source.line );\\n\\tthis.cone.copy( source.cone );\\n\\n\\treturn this;\\n\\n};\\n\\nArrowHelper.prototype.clone = function () {\\n\\n\\treturn new this.constructor().copy( this );\\n\\n};\\n\\n/**\\n * @author sroucheray / http://sroucheray.org/\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\nfunction AxesHelper( size ) {\\n\\n\\tsize = size || 1;\\n\\n\\tvar vertices = [\\n\\t\\t0, 0, 0,\\tsize, 0, 0,\\n\\t\\t0, 0, 0,\\t0, size, 0,\\n\\t\\t0, 0, 0,\\t0, 0, size\\n\\t];\\n\\n\\tvar colors = [\\n\\t\\t1, 0, 0,\\t1, 0.6, 0,\\n\\t\\t0, 1, 0,\\t0.6, 1, 0,\\n\\t\\t0, 0, 1,\\t0, 0.6, 1\\n\\t];\\n\\n\\tvar geometry = new BufferGeometry();\\n\\tgeometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\\n\\tgeometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\\n\\n\\tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\\n\\n\\tLineSegments.call( this, geometry, material );\\n\\n}\\n\\nAxesHelper.prototype = Object.create( LineSegments.prototype );\\nAxesHelper.prototype.constructor = AxesHelper;\\n\\n/**\\n * @author mrdoob / http://mrdoob.com/\\n */\\n\\nfunction Face4( a, b, c, d, normal, color, materialIndex ) {\\n\\n\\tconsole.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );\\n\\treturn new Face3( a, b, c, normal, color, materialIndex );\\n\\n}\\n\\nvar LineStrip = 0;\\n\\nvar LinePieces = 1;\\n\\nfunction MeshFaceMaterial( materials ) {\\n\\n\\tconsole.warn( 'THREE.MeshFaceMaterial has been removed. Use an Array instead.' );\\n\\treturn materials;\\n\\n}\\n\\nfunction MultiMaterial( materials ) {\\n\\n\\tif ( materials === undefined ) materials = [];\\n\\n\\tconsole.warn( 'THREE.MultiMaterial has been removed. Use an Array instead.' );\\n\\tmaterials.isMultiMaterial = true;\\n\\tmaterials.materials = materials;\\n\\tmaterials.clone = function () {\\n\\n\\t\\treturn materials.slice();\\n\\n\\t};\\n\\treturn materials;\\n\\n}\\n\\nfunction PointCloud( geometry, material ) {\\n\\n\\tconsole.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );\\n\\treturn new Points( geometry, material );\\n\\n}\\n\\nfunction Particle( material ) {\\n\\n\\tconsole.warn( 'THREE.Particle has been renamed to THREE.Sprite.' );\\n\\treturn new Sprite( material );\\n\\n}\\n\\nfunction ParticleSystem( geometry, material ) {\\n\\n\\tconsole.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );\\n\\treturn new Points( geometry, material );\\n\\n}\\n\\nfunction PointCloudMaterial( parameters ) {\\n\\n\\tconsole.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );\\n\\treturn new PointsMaterial( parameters );\\n\\n}\\n\\nfunction ParticleBasicMaterial( parameters ) {\\n\\n\\tconsole.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );\\n\\treturn new PointsMaterial( parameters );\\n\\n}\\n\\nfunction ParticleSystemMaterial( parameters ) {\\n\\n\\tconsole.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );\\n\\treturn new PointsMaterial( parameters );\\n\\n}\\n\\nfunction Vertex( x, y, z ) {\\n\\n\\tconsole.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );\\n\\treturn new Vector3( x, y, z );\\n\\n}\\n\\n//\\n\\nfunction DynamicBufferAttribute( array, itemSize ) {\\n\\n\\tconsole.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.' );\\n\\treturn new BufferAttribute( array, itemSize ).setDynamic( true );\\n\\n}\\n\\nfunction Int8Attribute( array, itemSize ) {\\n\\n\\tconsole.warn( 'THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.' );\\n\\treturn new Int8BufferAttribute( array, itemSize );\\n\\n}\\n\\nfunction Uint8Attribute( array, itemSize ) {\\n\\n\\tconsole.warn( 'THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.' );\\n\\treturn new Uint8BufferAttribute( array, itemSize );\\n\\n}\\n\\nfunction Uint8ClampedAttribute( array, itemSize ) {\\n\\n\\tconsole.warn( 'THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.' );\\n\\treturn new Uint8ClampedBufferAttribute( array, itemSize );\\n\\n}\\n\\nfunction Int16Attribute( array, itemSize ) {\\n\\n\\tconsole.warn( 'THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.' );\\n\\treturn new Int16BufferAttribute( array, itemSize );\\n\\n}\\n\\nfunction Uint16Attribute( array, itemSize ) {\\n\\n\\tconsole.warn( 'THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.' );\\n\\treturn new Uint16BufferAttribute( array, itemSize );\\n\\n}\\n\\nfunction Int32Attribute( array, itemSize ) {\\n\\n\\tconsole.warn( 'THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.' );\\n\\treturn new Int32BufferAttribute( array, itemSize );\\n\\n}\\n\\nfunction Uint32Attribute( array, itemSize ) {\\n\\n\\tconsole.warn( 'THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.' );\\n\\treturn new Uint32BufferAttribute( array, itemSize );\\n\\n}\\n\\nfunction Float32Attribute( array, itemSize ) {\\n\\n\\tconsole.warn( 'THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.' );\\n\\treturn new Float32BufferAttribute( array, itemSize );\\n\\n}\\n\\nfunction Float64Attribute( array, itemSize ) {\\n\\n\\tconsole.warn( 'THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.' );\\n\\treturn new Float64BufferAttribute( array, itemSize );\\n\\n}\\n\\n//\\n\\nCurve.create = function ( construct, getPoint ) {\\n\\n\\tconsole.log( 'THREE.Curve.create() has been deprecated' );\\n\\n\\tconstruct.prototype = Object.create( Curve.prototype );\\n\\tconstruct.prototype.constructor = construct;\\n\\tconstruct.prototype.getPoint = getPoint;\\n\\n\\treturn construct;\\n\\n};\\n\\n//\\n\\nObject.assign( CurvePath.prototype, {\\n\\n\\tcreatePointsGeometry: function ( divisions ) {\\n\\n\\t\\tconsole.warn( 'THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\\n\\n\\t\\t// generate geometry from path points (for Line or Points objects)\\n\\n\\t\\tvar pts = this.getPoints( divisions );\\n\\t\\treturn this.createGeometry( pts );\\n\\n\\t},\\n\\n\\tcreateSpacedPointsGeometry: function ( divisions ) {\\n\\n\\t\\tconsole.warn( 'THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\\n\\n\\t\\t// generate geometry from equidistant sampling along the path\\n\\n\\t\\tvar pts = this.getSpacedPoints( divisions );\\n\\t\\treturn this.createGeometry( pts );\\n\\n\\t},\\n\\n\\tcreateGeometry: function ( points ) {\\n\\n\\t\\tconsole.warn( 'THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\\n\\n\\t\\tvar geometry = new Geometry();\\n\\n\\t\\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\\n\\n\\t\\t\\tvar point = points[ i ];\\n\\t\\t\\tgeometry.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );\\n\\n\\t\\t}\\n\\n\\t\\treturn geometry;\\n\\n\\t}\\n\\n} );\\n\\n//\\n\\nObject.assign( Path.prototype, {\\n\\n\\tfromPoints: function ( points ) {\\n\\n\\t\\tconsole.warn( 'THREE.Path: .fromPoints() has been renamed to .setFromPoints().' );\\n\\t\\tthis.setFromPoints( points );\\n\\n\\t}\\n\\n} );\\n\\n//\\n\\nfunction ClosedSplineCurve3( points ) {\\n\\n\\tconsole.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );\\n\\n\\tCatmullRomCurve3.call( this, points );\\n\\tthis.type = 'catmullrom';\\n\\tthis.closed = true;\\n\\n}\\n\\nClosedSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );\\n\\n//\\n\\nfunction SplineCurve3( points ) {\\n\\n\\tconsole.warn( 'THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );\\n\\n\\tCatmullRomCurve3.call( this, points );\\n\\tthis.type = 'catmullrom';\\n\\n}\\n\\nSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );\\n\\n//\\n\\nfunction Spline( points ) {\\n\\n\\tconsole.warn( 'THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.' );\\n\\n\\tCatmullRomCurve3.call( this, points );\\n\\tthis.type = 'catmullrom';\\n\\n}\\n\\nSpline.prototype = Object.create( CatmullRomCurve3.prototype );\\n\\nObject.assign( Spline.prototype, {\\n\\n\\tinitFromArray: function ( /* a */ ) {\\n\\n\\t\\tconsole.error( 'THREE.Spline: .initFromArray() has been removed.' );\\n\\n\\t},\\n\\tgetControlPointsArray: function ( /* optionalTarget */ ) {\\n\\n\\t\\tconsole.error( 'THREE.Spline: .getControlPointsArray() has been removed.' );\\n\\n\\t},\\n\\treparametrizeByArcLength: function ( /* samplingCoef */ ) {\\n\\n\\t\\tconsole.error( 'THREE.Spline: .reparametrizeByArcLength() has been removed.' );\\n\\n\\t}\\n\\n} );\\n\\n//\\n\\nfunction AxisHelper( size ) {\\n\\n\\tconsole.warn( 'THREE.AxisHelper has been renamed to THREE.AxesHelper.' );\\n\\treturn new AxesHelper( size );\\n\\n}\\n\\nfunction BoundingBoxHelper( object, color ) {\\n\\n\\tconsole.warn( 'THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.' );\\n\\treturn new BoxHelper( object, color );\\n\\n}\\n\\nfunction EdgesHelper( object, hex ) {\\n\\n\\tconsole.warn( 'THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.' );\\n\\treturn new LineSegments( new EdgesGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\\n\\n}\\n\\nGridHelper.prototype.setColors = function () {\\n\\n\\tconsole.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );\\n\\n};\\n\\nSkeletonHelper.prototype.update = function () {\\n\\n\\tconsole.error( 'THREE.SkeletonHelper: update() no longer needs to be called.' );\\n\\n};\\n\\nfunction WireframeHelper( object, hex ) {\\n\\n\\tconsole.warn( 'THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.' );\\n\\treturn new LineSegments( new WireframeGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\\n\\n}\\n\\n//\\n\\nObject.assign( Loader.prototype, {\\n\\n\\textractUrlBase: function ( url ) {\\n\\n\\t\\tconsole.warn( 'THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.' );\\n\\t\\treturn LoaderUtils.extractUrlBase( url );\\n\\n\\t}\\n\\n} );\\n\\nfunction XHRLoader( manager ) {\\n\\n\\tconsole.warn( 'THREE.XHRLoader has been renamed to THREE.FileLoader.' );\\n\\treturn new FileLoader( manager );\\n\\n}\\n\\nfunction BinaryTextureLoader( manager ) {\\n\\n\\tconsole.warn( 'THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.' );\\n\\treturn new DataTextureLoader( manager );\\n\\n}\\n\\nObject.assign( ObjectLoader.prototype, {\\n\\n\\tsetTexturePath: function ( value ) {\\n\\n\\t\\tconsole.warn( 'THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().' );\\n\\t\\treturn this.setResourcePath( value );\\n\\n\\t}\\n\\n} );\\n\\n//\\n\\nObject.assign( Box2.prototype, {\\n\\n\\tcenter: function ( optionalTarget ) {\\n\\n\\t\\tconsole.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );\\n\\t\\treturn this.getCenter( optionalTarget );\\n\\n\\t},\\n\\tempty: function () {\\n\\n\\t\\tconsole.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );\\n\\t\\treturn this.isEmpty();\\n\\n\\t},\\n\\tisIntersectionBox: function ( box ) {\\n\\n\\t\\tconsole.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );\\n\\t\\treturn this.intersectsBox( box );\\n\\n\\t},\\n\\tsize: function ( optionalTarget ) {\\n\\n\\t\\tconsole.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );\\n\\t\\treturn this.getSize( optionalTarget );\\n\\n\\t}\\n} );\\n\\nObject.assign( Box3.prototype, {\\n\\n\\tcenter: function ( optionalTarget ) {\\n\\n\\t\\tconsole.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );\\n\\t\\treturn this.getCenter( optionalTarget );\\n\\n\\t},\\n\\tempty: function () {\\n\\n\\t\\tconsole.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );\\n\\t\\treturn this.isEmpty();\\n\\n\\t},\\n\\tisIntersectionBox: function ( box ) {\\n\\n\\t\\tconsole.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );\\n\\t\\treturn this.intersectsBox( box );\\n\\n\\t},\\n\\tisIntersectionSphere: function ( sphere ) {\\n\\n\\t\\tconsole.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\\n\\t\\treturn this.intersectsSphere( sphere );\\n\\n\\t},\\n\\tsize: function ( optionalTarget ) {\\n\\n\\t\\tconsole.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );\\n\\t\\treturn this.getSize( optionalTarget );\\n\\n\\t}\\n} );\\n\\nLine3.prototype.center = function ( optionalTarget ) {\\n\\n\\tconsole.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );\\n\\treturn this.getCenter( optionalTarget );\\n\\n};\\n\\nObject.assign( _Math, {\\n\\n\\trandom16: function () {\\n\\n\\t\\tconsole.warn( 'THREE.Math: .random16() has been deprecated. Use Math.random() instead.' );\\n\\t\\treturn Math.random();\\n\\n\\t},\\n\\n\\tnearestPowerOfTwo: function ( value ) {\\n\\n\\t\\tconsole.warn( 'THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().' );\\n\\t\\treturn _Math.floorPowerOfTwo( value );\\n\\n\\t},\\n\\n\\tnextPowerOfTwo: function ( value ) {\\n\\n\\t\\tconsole.warn( 'THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().' );\\n\\t\\treturn _Math.ceilPowerOfTwo( value );\\n\\n\\t}\\n\\n} );\\n\\nObject.assign( Matrix3.prototype, {\\n\\n\\tflattenToArrayOffset: function ( array, offset ) {\\n\\n\\t\\tconsole.warn( \\\"THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\\\" );\\n\\t\\treturn this.toArray( array, offset );\\n\\n\\t},\\n\\tmultiplyVector3: function ( vector ) {\\n\\n\\t\\tconsole.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );\\n\\t\\treturn vector.applyMatrix3( this );\\n\\n\\t},\\n\\tmultiplyVector3Array: function ( /* a */ ) {\\n\\n\\t\\tconsole.error( 'THREE.Matrix3: .multiplyVector3Array() has been removed.' );\\n\\n\\t},\\n\\tapplyToBuffer: function ( buffer /*, offset, length */ ) {\\n\\n\\t\\tconsole.warn( 'THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.' );\\n\\t\\treturn this.applyToBufferAttribute( buffer );\\n\\n\\t},\\n\\tapplyToVector3Array: function ( /* array, offset, length */ ) {\\n\\n\\t\\tconsole.error( 'THREE.Matrix3: .applyToVector3Array() has been removed.' );\\n\\n\\t}\\n\\n} );\\n\\nObject.assign( Matrix4.prototype, {\\n\\n\\textractPosition: function ( m ) {\\n\\n\\t\\tconsole.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );\\n\\t\\treturn this.copyPosition( m );\\n\\n\\t},\\n\\tflattenToArrayOffset: function ( array, offset ) {\\n\\n\\t\\tconsole.warn( \\\"THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\\\" );\\n\\t\\treturn this.toArray( array, offset );\\n\\n\\t},\\n\\tgetPosition: function () {\\n\\n\\t\\tvar v1;\\n\\n\\t\\treturn function getPosition() {\\n\\n\\t\\t\\tif ( v1 === undefined ) v1 = new Vector3();\\n\\t\\t\\tconsole.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );\\n\\t\\t\\treturn v1.setFromMatrixColumn( this, 3 );\\n\\n\\t\\t};\\n\\n\\t}(),\\n\\tsetRotationFromQuaternion: function ( q ) {\\n\\n\\t\\tconsole.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );\\n\\t\\treturn this.makeRotationFromQuaternion( q );\\n\\n\\t},\\n\\tmultiplyToArray: function () {\\n\\n\\t\\tconsole.warn( 'THREE.Matrix4: .multiplyToArray() has been removed.' );\\n\\n\\t},\\n\\tmultiplyVector3: function ( vector ) {\\n\\n\\t\\tconsole.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\\n\\t\\treturn vector.applyMatrix4( this );\\n\\n\\t},\\n\\tmultiplyVector4: function ( vector ) {\\n\\n\\t\\tconsole.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\\n\\t\\treturn vector.applyMatrix4( this );\\n\\n\\t},\\n\\tmultiplyVector3Array: function ( /* a */ ) {\\n\\n\\t\\tconsole.error( 'THREE.Matrix4: .multiplyVector3Array() has been removed.' );\\n\\n\\t},\\n\\trotateAxis: function ( v ) {\\n\\n\\t\\tconsole.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );\\n\\t\\tv.transformDirection( this );\\n\\n\\t},\\n\\tcrossVector: function ( vector ) {\\n\\n\\t\\tconsole.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\\n\\t\\treturn vector.applyMatrix4( this );\\n\\n\\t},\\n\\ttranslate: function () {\\n\\n\\t\\tconsole.error( 'THREE.Matrix4: .translate() has been removed.' );\\n\\n\\t},\\n\\trotateX: function () {\\n\\n\\t\\tconsole.error( 'THREE.Matrix4: .rotateX() has been removed.' );\\n\\n\\t},\\n\\trotateY: function () {\\n\\n\\t\\tconsole.error( 'THREE.Matrix4: .rotateY() has been removed.' );\\n\\n\\t},\\n\\trotateZ: function () {\\n\\n\\t\\tconsole.error( 'THREE.Matrix4: .rotateZ() has been removed.' );\\n\\n\\t},\\n\\trotateByAxis: function () {\\n\\n\\t\\tconsole.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );\\n\\n\\t},\\n\\tapplyToBuffer: function ( buffer /*, offset, length */ ) {\\n\\n\\t\\tconsole.warn( 'THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.' );\\n\\t\\treturn this.applyToBufferAttribute( buffer );\\n\\n\\t},\\n\\tapplyToVector3Array: function ( /* array, offset, length */ ) {\\n\\n\\t\\tconsole.error( 'THREE.Matrix4: .applyToVector3Array() has been removed.' );\\n\\n\\t},\\n\\tmakeFrustum: function ( left, right, bottom, top, near, far ) {\\n\\n\\t\\tconsole.warn( 'THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.' );\\n\\t\\treturn this.makePerspective( left, right, top, bottom, near, far );\\n\\n\\t}\\n\\n} );\\n\\nPlane.prototype.isIntersectionLine = function ( line ) {\\n\\n\\tconsole.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );\\n\\treturn this.intersectsLine( line );\\n\\n};\\n\\nQuaternion.prototype.multiplyVector3 = function ( vector ) {\\n\\n\\tconsole.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );\\n\\treturn vector.applyQuaternion( this );\\n\\n};\\n\\nObject.assign( Ray.prototype, {\\n\\n\\tisIntersectionBox: function ( box ) {\\n\\n\\t\\tconsole.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );\\n\\t\\treturn this.intersectsBox( box );\\n\\n\\t},\\n\\tisIntersectionPlane: function ( plane ) {\\n\\n\\t\\tconsole.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );\\n\\t\\treturn this.intersectsPlane( plane );\\n\\n\\t},\\n\\tisIntersectionSphere: function ( sphere ) {\\n\\n\\t\\tconsole.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\\n\\t\\treturn this.intersectsSphere( sphere );\\n\\n\\t}\\n\\n} );\\n\\nObject.assign( Triangle.prototype, {\\n\\n\\tarea: function () {\\n\\n\\t\\tconsole.warn( 'THREE.Triangle: .area() has been renamed to .getArea().' );\\n\\t\\treturn this.getArea();\\n\\n\\t},\\n\\tbarycoordFromPoint: function ( point, target ) {\\n\\n\\t\\tconsole.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );\\n\\t\\treturn this.getBarycoord( point, target );\\n\\n\\t},\\n\\tmidpoint: function ( target ) {\\n\\n\\t\\tconsole.warn( 'THREE.Triangle: .midpoint() has been renamed to .getMidpoint().' );\\n\\t\\treturn this.getMidpoint( target );\\n\\n\\t},\\n\\tnormal: function ( target ) {\\n\\n\\t\\tconsole.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );\\n\\t\\treturn this.getNormal( target );\\n\\n\\t},\\n\\tplane: function ( target ) {\\n\\n\\t\\tconsole.warn( 'THREE.Triangle: .plane() has been renamed to .getPlane().' );\\n\\t\\treturn this.getPlane( target );\\n\\n\\t}\\n\\n} );\\n\\nObject.assign( Triangle, {\\n\\n\\tbarycoordFromPoint: function ( point, a, b, c, target ) {\\n\\n\\t\\tconsole.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );\\n\\t\\treturn Triangle.getBarycoord( point, a, b, c, target );\\n\\n\\t},\\n\\tnormal: function ( a, b, c, target ) {\\n\\n\\t\\tconsole.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );\\n\\t\\treturn Triangle.getNormal( a, b, c, target );\\n\\n\\t}\\n\\n} );\\n\\nObject.assign( Shape.prototype, {\\n\\n\\textractAllPoints: function ( divisions ) {\\n\\n\\t\\tconsole.warn( 'THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.' );\\n\\t\\treturn this.extractPoints( divisions );\\n\\n\\t},\\n\\textrude: function ( options ) {\\n\\n\\t\\tconsole.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );\\n\\t\\treturn new ExtrudeGeometry( this, options );\\n\\n\\t},\\n\\tmakeGeometry: function ( options ) {\\n\\n\\t\\tconsole.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );\\n\\t\\treturn new ShapeGeometry( this, options );\\n\\n\\t}\\n\\n} );\\n\\nObject.assign( Vector2.prototype, {\\n\\n\\tfromAttribute: function ( attribute, index, offset ) {\\n\\n\\t\\tconsole.warn( 'THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().' );\\n\\t\\treturn this.fromBufferAttribute( attribute, index, offset );\\n\\n\\t},\\n\\tdistanceToManhattan: function ( v ) {\\n\\n\\t\\tconsole.warn( 'THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );\\n\\t\\treturn this.manhattanDistanceTo( v );\\n\\n\\t},\\n\\tlengthManhattan: function () {\\n\\n\\t\\tconsole.warn( 'THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().' );\\n\\t\\treturn this.manhattanLength();\\n\\n\\t}\\n\\n} );\\n\\nObject.assign( Vector3.prototype, {\\n\\n\\tsetEulerFromRotationMatrix: function () {\\n\\n\\t\\tconsole.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );\\n\\n\\t},\\n\\tsetEulerFromQuaternion: function () {\\n\\n\\t\\tconsole.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );\\n\\n\\t},\\n\\tgetPositionFromMatrix: function ( m ) {\\n\\n\\t\\tconsole.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );\\n\\t\\treturn this.setFromMatrixPosition( m );\\n\\n\\t},\\n\\tgetScaleFromMatrix: function ( m ) {\\n\\n\\t\\tconsole.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );\\n\\t\\treturn this.setFromMatrixScale( m );\\n\\n\\t},\\n\\tgetColumnFromMatrix: function ( index, matrix ) {\\n\\n\\t\\tconsole.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );\\n\\t\\treturn this.setFromMatrixColumn( matrix, index );\\n\\n\\t},\\n\\tapplyProjection: function ( m ) {\\n\\n\\t\\tconsole.warn( 'THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.' );\\n\\t\\treturn this.applyMatrix4( m );\\n\\n\\t},\\n\\tfromAttribute: function ( attribute, index, offset ) {\\n\\n\\t\\tconsole.warn( 'THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().' );\\n\\t\\treturn this.fromBufferAttribute( attribute, index, offset );\\n\\n\\t},\\n\\tdistanceToManhattan: function ( v ) {\\n\\n\\t\\tconsole.warn( 'THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );\\n\\t\\treturn this.manhattanDistanceTo( v );\\n\\n\\t},\\n\\tlengthManhattan: function () {\\n\\n\\t\\tconsole.warn( 'THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().' );\\n\\t\\treturn this.manhattanLength();\\n\\n\\t}\\n\\n} );\\n\\nObject.assign( Vector4.prototype, {\\n\\n\\tfromAttribute: function ( attribute, index, offset ) {\\n\\n\\t\\tconsole.warn( 'THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().' );\\n\\t\\treturn this.fromBufferAttribute( attribute, index, offset );\\n\\n\\t},\\n\\tlengthManhattan: function () {\\n\\n\\t\\tconsole.warn( 'THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().' );\\n\\t\\treturn this.manhattanLength();\\n\\n\\t}\\n\\n} );\\n\\n//\\n\\nObject.assign( Geometry.prototype, {\\n\\n\\tcomputeTangents: function () {\\n\\n\\t\\tconsole.error( 'THREE.Geometry: .computeTangents() has been removed.' );\\n\\n\\t},\\n\\tcomputeLineDistances: function () {\\n\\n\\t\\tconsole.error( 'THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.' );\\n\\n\\t}\\n\\n} );\\n\\nObject.assign( Object3D.prototype, {\\n\\n\\tgetChildByName: function ( name ) {\\n\\n\\t\\tconsole.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );\\n\\t\\treturn this.getObjectByName( name );\\n\\n\\t},\\n\\trenderDepth: function () {\\n\\n\\t\\tconsole.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );\\n\\n\\t},\\n\\ttranslate: function ( distance, axis ) {\\n\\n\\t\\tconsole.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );\\n\\t\\treturn this.translateOnAxis( axis, distance );\\n\\n\\t},\\n\\tgetWorldRotation: function () {\\n\\n\\t\\tconsole.error( 'THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.' );\\n\\n\\t}\\n\\n} );\\n\\nObject.defineProperties( Object3D.prototype, {\\n\\n\\teulerOrder: {\\n\\t\\tget: function () {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\\n\\t\\t\\treturn this.rotation.order;\\n\\n\\t\\t},\\n\\t\\tset: function ( value ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\\n\\t\\t\\tthis.rotation.order = value;\\n\\n\\t\\t}\\n\\t},\\n\\tuseQuaternion: {\\n\\t\\tget: function () {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\\n\\n\\t\\t},\\n\\t\\tset: function () {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\\n\\n\\t\\t}\\n\\t}\\n\\n} );\\n\\nObject.defineProperties( LOD.prototype, {\\n\\n\\tobjects: {\\n\\t\\tget: function () {\\n\\n\\t\\t\\tconsole.warn( 'THREE.LOD: .objects has been renamed to .levels.' );\\n\\t\\t\\treturn this.levels;\\n\\n\\t\\t}\\n\\t}\\n\\n} );\\n\\nObject.defineProperty( Skeleton.prototype, 'useVertexTexture', {\\n\\n\\tget: function () {\\n\\n\\t\\tconsole.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );\\n\\n\\t},\\n\\tset: function () {\\n\\n\\t\\tconsole.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );\\n\\n\\t}\\n\\n} );\\n\\nSkinnedMesh.prototype.initBones = function () {\\n\\n\\tconsole.error( 'THREE.SkinnedMesh: initBones() has been removed.' );\\n\\n};\\n\\nObject.defineProperty( Curve.prototype, '__arcLengthDivisions', {\\n\\n\\tget: function () {\\n\\n\\t\\tconsole.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );\\n\\t\\treturn this.arcLengthDivisions;\\n\\n\\t},\\n\\tset: function ( value ) {\\n\\n\\t\\tconsole.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );\\n\\t\\tthis.arcLengthDivisions = value;\\n\\n\\t}\\n\\n} );\\n\\n//\\n\\nPerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {\\n\\n\\tconsole.warn( \\\"THREE.PerspectiveCamera.setLens is deprecated. \\\" +\\n\\t\\t\\t\\\"Use .setFocalLength and .filmGauge for a photographic setup.\\\" );\\n\\n\\tif ( filmGauge !== undefined ) this.filmGauge = filmGauge;\\n\\tthis.setFocalLength( focalLength );\\n\\n};\\n\\n//\\n\\nObject.defineProperties( Light.prototype, {\\n\\tonlyShadow: {\\n\\t\\tset: function () {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Light: .onlyShadow has been removed.' );\\n\\n\\t\\t}\\n\\t},\\n\\tshadowCameraFov: {\\n\\t\\tset: function ( value ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );\\n\\t\\t\\tthis.shadow.camera.fov = value;\\n\\n\\t\\t}\\n\\t},\\n\\tshadowCameraLeft: {\\n\\t\\tset: function ( value ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );\\n\\t\\t\\tthis.shadow.camera.left = value;\\n\\n\\t\\t}\\n\\t},\\n\\tshadowCameraRight: {\\n\\t\\tset: function ( value ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );\\n\\t\\t\\tthis.shadow.camera.right = value;\\n\\n\\t\\t}\\n\\t},\\n\\tshadowCameraTop: {\\n\\t\\tset: function ( value ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );\\n\\t\\t\\tthis.shadow.camera.top = value;\\n\\n\\t\\t}\\n\\t},\\n\\tshadowCameraBottom: {\\n\\t\\tset: function ( value ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );\\n\\t\\t\\tthis.shadow.camera.bottom = value;\\n\\n\\t\\t}\\n\\t},\\n\\tshadowCameraNear: {\\n\\t\\tset: function ( value ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );\\n\\t\\t\\tthis.shadow.camera.near = value;\\n\\n\\t\\t}\\n\\t},\\n\\tshadowCameraFar: {\\n\\t\\tset: function ( value ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );\\n\\t\\t\\tthis.shadow.camera.far = value;\\n\\n\\t\\t}\\n\\t},\\n\\tshadowCameraVisible: {\\n\\t\\tset: function () {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );\\n\\n\\t\\t}\\n\\t},\\n\\tshadowBias: {\\n\\t\\tset: function ( value ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );\\n\\t\\t\\tthis.shadow.bias = value;\\n\\n\\t\\t}\\n\\t},\\n\\tshadowDarkness: {\\n\\t\\tset: function () {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Light: .shadowDarkness has been removed.' );\\n\\n\\t\\t}\\n\\t},\\n\\tshadowMapWidth: {\\n\\t\\tset: function ( value ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );\\n\\t\\t\\tthis.shadow.mapSize.width = value;\\n\\n\\t\\t}\\n\\t},\\n\\tshadowMapHeight: {\\n\\t\\tset: function ( value ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );\\n\\t\\t\\tthis.shadow.mapSize.height = value;\\n\\n\\t\\t}\\n\\t}\\n} );\\n\\n//\\n\\nObject.defineProperties( BufferAttribute.prototype, {\\n\\n\\tlength: {\\n\\t\\tget: function () {\\n\\n\\t\\t\\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Use .count instead.' );\\n\\t\\t\\treturn this.array.length;\\n\\n\\t\\t}\\n\\t},\\n\\tcopyIndicesArray: function ( /* indices */ ) {\\n\\n\\t\\tconsole.error( 'THREE.BufferAttribute: .copyIndicesArray() has been removed.' );\\n\\n\\t}\\n\\n} );\\n\\nObject.assign( BufferGeometry.prototype, {\\n\\n\\taddIndex: function ( index ) {\\n\\n\\t\\tconsole.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );\\n\\t\\tthis.setIndex( index );\\n\\n\\t},\\n\\taddDrawCall: function ( start, count, indexOffset ) {\\n\\n\\t\\tif ( indexOffset !== undefined ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );\\n\\n\\t\\t}\\n\\t\\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );\\n\\t\\tthis.addGroup( start, count );\\n\\n\\t},\\n\\tclearDrawCalls: function () {\\n\\n\\t\\tconsole.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );\\n\\t\\tthis.clearGroups();\\n\\n\\t},\\n\\tcomputeTangents: function () {\\n\\n\\t\\tconsole.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );\\n\\n\\t},\\n\\tcomputeOffsets: function () {\\n\\n\\t\\tconsole.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );\\n\\n\\t}\\n\\n} );\\n\\nObject.defineProperties( BufferGeometry.prototype, {\\n\\n\\tdrawcalls: {\\n\\t\\tget: function () {\\n\\n\\t\\t\\tconsole.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );\\n\\t\\t\\treturn this.groups;\\n\\n\\t\\t}\\n\\t},\\n\\toffsets: {\\n\\t\\tget: function () {\\n\\n\\t\\t\\tconsole.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );\\n\\t\\t\\treturn this.groups;\\n\\n\\t\\t}\\n\\t}\\n\\n} );\\n\\n//\\n\\nObject.assign( ExtrudeBufferGeometry.prototype, {\\n\\n\\tgetArrays: function () {\\n\\n\\t\\tconsole.error( 'THREE.ExtrudeBufferGeometry: .getArrays() has been removed.' );\\n\\n\\t},\\n\\n\\taddShapeList: function () {\\n\\n\\t\\tconsole.error( 'THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.' );\\n\\n\\t},\\n\\n\\taddShape: function () {\\n\\n\\t\\tconsole.error( 'THREE.ExtrudeBufferGeometry: .addShape() has been removed.' );\\n\\n\\t}\\n\\n} );\\n\\n//\\n\\nObject.defineProperties( Uniform.prototype, {\\n\\n\\tdynamic: {\\n\\t\\tset: function () {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.' );\\n\\n\\t\\t}\\n\\t},\\n\\tonUpdate: {\\n\\t\\tvalue: function () {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.' );\\n\\t\\t\\treturn this;\\n\\n\\t\\t}\\n\\t}\\n\\n} );\\n\\n//\\n\\nObject.defineProperties( Material.prototype, {\\n\\n\\twrapAround: {\\n\\t\\tget: function () {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Material: .wrapAround has been removed.' );\\n\\n\\t\\t},\\n\\t\\tset: function () {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Material: .wrapAround has been removed.' );\\n\\n\\t\\t}\\n\\t},\\n\\n\\toverdraw: {\\n\\t\\tget: function () {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Material: .overdraw has been removed.' );\\n\\n\\t\\t},\\n\\t\\tset: function () {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Material: .overdraw has been removed.' );\\n\\n\\t\\t}\\n\\t},\\n\\n\\twrapRGB: {\\n\\t\\tget: function () {\\n\\n\\t\\t\\tconsole.warn( 'THREE.Material: .wrapRGB has been removed.' );\\n\\t\\t\\treturn new Color();\\n\\n\\t\\t}\\n\\t},\\n\\n\\tshading: {\\n\\t\\tget: function () {\\n\\n\\t\\t\\tconsole.error( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\\n\\n\\t\\t},\\n\\t\\tset: function ( value ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\\n\\t\\t\\tthis.flatShading = ( value === FlatShading );\\n\\n\\t\\t}\\n\\t}\\n\\n} );\\n\\nObject.defineProperties( MeshPhongMaterial.prototype, {\\n\\n\\tmetal: {\\n\\t\\tget: function () {\\n\\n\\t\\t\\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );\\n\\t\\t\\treturn false;\\n\\n\\t\\t},\\n\\t\\tset: function () {\\n\\n\\t\\t\\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );\\n\\n\\t\\t}\\n\\t}\\n\\n} );\\n\\nObject.defineProperties( ShaderMaterial.prototype, {\\n\\n\\tderivatives: {\\n\\t\\tget: function () {\\n\\n\\t\\t\\tconsole.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\\n\\t\\t\\treturn this.extensions.derivatives;\\n\\n\\t\\t},\\n\\t\\tset: function ( value ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\\n\\t\\t\\tthis.extensions.derivatives = value;\\n\\n\\t\\t}\\n\\t}\\n\\n} );\\n\\n//\\n\\nObject.assign( WebGLRenderer.prototype, {\\n\\n\\tclearTarget: function ( renderTarget, color, depth, stencil ) {\\n\\n\\t\\tconsole.warn( 'THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.' );\\n\\t\\tthis.setRenderTarget( renderTarget );\\n\\t\\tthis.clear( color, depth, stencil );\\n\\n\\t},\\n\\n\\tanimate: function ( callback ) {\\n\\n\\t\\tconsole.warn( 'THREE.WebGLRenderer: .animate() is now .setAnimationLoop().' );\\n\\t\\tthis.setAnimationLoop( callback );\\n\\n\\t},\\n\\n\\tgetCurrentRenderTarget: function () {\\n\\n\\t\\tconsole.warn( 'THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().' );\\n\\t\\treturn this.getRenderTarget();\\n\\n\\t},\\n\\n\\tgetMaxAnisotropy: function () {\\n\\n\\t\\tconsole.warn( 'THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().' );\\n\\t\\treturn this.capabilities.getMaxAnisotropy();\\n\\n\\t},\\n\\n\\tgetPrecision: function () {\\n\\n\\t\\tconsole.warn( 'THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.' );\\n\\t\\treturn this.capabilities.precision;\\n\\n\\t},\\n\\n\\tresetGLState: function () {\\n\\n\\t\\tconsole.warn( 'THREE.WebGLRenderer: .resetGLState() is now .state.reset().' );\\n\\t\\treturn this.state.reset();\\n\\n\\t},\\n\\n\\tsupportsFloatTextures: function () {\\n\\n\\t\\tconsole.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\\\'OES_texture_float\\\\' ).' );\\n\\t\\treturn this.extensions.get( 'OES_texture_float' );\\n\\n\\t},\\n\\tsupportsHalfFloatTextures: function () {\\n\\n\\t\\tconsole.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\\\'OES_texture_half_float\\\\' ).' );\\n\\t\\treturn this.extensions.get( 'OES_texture_half_float' );\\n\\n\\t},\\n\\tsupportsStandardDerivatives: function () {\\n\\n\\t\\tconsole.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\\\'OES_standard_derivatives\\\\' ).' );\\n\\t\\treturn this.extensions.get( 'OES_standard_derivatives' );\\n\\n\\t},\\n\\tsupportsCompressedTextureS3TC: function () {\\n\\n\\t\\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\\\'WEBGL_compressed_texture_s3tc\\\\' ).' );\\n\\t\\treturn this.extensions.get( 'WEBGL_compressed_texture_s3tc' );\\n\\n\\t},\\n\\tsupportsCompressedTexturePVRTC: function () {\\n\\n\\t\\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\\\'WEBGL_compressed_texture_pvrtc\\\\' ).' );\\n\\t\\treturn this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );\\n\\n\\t},\\n\\tsupportsBlendMinMax: function () {\\n\\n\\t\\tconsole.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\\\'EXT_blend_minmax\\\\' ).' );\\n\\t\\treturn this.extensions.get( 'EXT_blend_minmax' );\\n\\n\\t},\\n\\tsupportsVertexTextures: function () {\\n\\n\\t\\tconsole.warn( 'THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.' );\\n\\t\\treturn this.capabilities.vertexTextures;\\n\\n\\t},\\n\\tsupportsInstancedArrays: function () {\\n\\n\\t\\tconsole.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\\\'ANGLE_instanced_arrays\\\\' ).' );\\n\\t\\treturn this.extensions.get( 'ANGLE_instanced_arrays' );\\n\\n\\t},\\n\\tenableScissorTest: function ( boolean ) {\\n\\n\\t\\tconsole.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );\\n\\t\\tthis.setScissorTest( boolean );\\n\\n\\t},\\n\\tinitMaterial: function () {\\n\\n\\t\\tconsole.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );\\n\\n\\t},\\n\\taddPrePlugin: function () {\\n\\n\\t\\tconsole.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );\\n\\n\\t},\\n\\taddPostPlugin: function () {\\n\\n\\t\\tconsole.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );\\n\\n\\t},\\n\\tupdateShadowMap: function () {\\n\\n\\t\\tconsole.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );\\n\\n\\t},\\n\\tsetFaceCulling: function () {\\n\\n\\t\\tconsole.warn( 'THREE.WebGLRenderer: .setFaceCulling() has been removed.' );\\n\\n\\t}\\n\\n} );\\n\\nObject.defineProperties( WebGLRenderer.prototype, {\\n\\n\\tshadowMapEnabled: {\\n\\t\\tget: function () {\\n\\n\\t\\t\\treturn this.shadowMap.enabled;\\n\\n\\t\\t},\\n\\t\\tset: function ( value ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );\\n\\t\\t\\tthis.shadowMap.enabled = value;\\n\\n\\t\\t}\\n\\t},\\n\\tshadowMapType: {\\n\\t\\tget: function () {\\n\\n\\t\\t\\treturn this.shadowMap.type;\\n\\n\\t\\t},\\n\\t\\tset: function ( value ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );\\n\\t\\t\\tthis.shadowMap.type = value;\\n\\n\\t\\t}\\n\\t},\\n\\tshadowMapCullFace: {\\n\\t\\tget: function () {\\n\\n\\t\\t\\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );\\n\\t\\t\\treturn undefined;\\n\\n\\t\\t},\\n\\t\\tset: function ( /* value */ ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );\\n\\n\\t\\t}\\n\\t}\\n} );\\n\\nObject.defineProperties( WebGLShadowMap.prototype, {\\n\\n\\tcullFace: {\\n\\t\\tget: function () {\\n\\n\\t\\t\\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );\\n\\t\\t\\treturn undefined;\\n\\n\\t\\t},\\n\\t\\tset: function ( /* cullFace */ ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );\\n\\n\\t\\t}\\n\\t},\\n\\trenderReverseSided: {\\n\\t\\tget: function () {\\n\\n\\t\\t\\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );\\n\\t\\t\\treturn undefined;\\n\\n\\t\\t},\\n\\t\\tset: function () {\\n\\n\\t\\t\\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );\\n\\n\\t\\t}\\n\\t},\\n\\trenderSingleSided: {\\n\\t\\tget: function () {\\n\\n\\t\\t\\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );\\n\\t\\t\\treturn undefined;\\n\\n\\t\\t},\\n\\t\\tset: function () {\\n\\n\\t\\t\\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );\\n\\n\\t\\t}\\n\\t}\\n\\n} );\\n\\n//\\n\\nObject.defineProperties( WebGLRenderTarget.prototype, {\\n\\n\\twrapS: {\\n\\t\\tget: function () {\\n\\n\\t\\t\\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\\n\\t\\t\\treturn this.texture.wrapS;\\n\\n\\t\\t},\\n\\t\\tset: function ( value ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\\n\\t\\t\\tthis.texture.wrapS = value;\\n\\n\\t\\t}\\n\\t},\\n\\twrapT: {\\n\\t\\tget: function () {\\n\\n\\t\\t\\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\\n\\t\\t\\treturn this.texture.wrapT;\\n\\n\\t\\t},\\n\\t\\tset: function ( value ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\\n\\t\\t\\tthis.texture.wrapT = value;\\n\\n\\t\\t}\\n\\t},\\n\\tmagFilter: {\\n\\t\\tget: function () {\\n\\n\\t\\t\\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\\n\\t\\t\\treturn this.texture.magFilter;\\n\\n\\t\\t},\\n\\t\\tset: function ( value ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\\n\\t\\t\\tthis.texture.magFilter = value;\\n\\n\\t\\t}\\n\\t},\\n\\tminFilter: {\\n\\t\\tget: function () {\\n\\n\\t\\t\\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\\n\\t\\t\\treturn this.texture.minFilter;\\n\\n\\t\\t},\\n\\t\\tset: function ( value ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\\n\\t\\t\\tthis.texture.minFilter = value;\\n\\n\\t\\t}\\n\\t},\\n\\tanisotropy: {\\n\\t\\tget: function () {\\n\\n\\t\\t\\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\\n\\t\\t\\treturn this.texture.anisotropy;\\n\\n\\t\\t},\\n\\t\\tset: function ( value ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\\n\\t\\t\\tthis.texture.anisotropy = value;\\n\\n\\t\\t}\\n\\t},\\n\\toffset: {\\n\\t\\tget: function () {\\n\\n\\t\\t\\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\\n\\t\\t\\treturn this.texture.offset;\\n\\n\\t\\t},\\n\\t\\tset: function ( value ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\\n\\t\\t\\tthis.texture.offset = value;\\n\\n\\t\\t}\\n\\t},\\n\\trepeat: {\\n\\t\\tget: function () {\\n\\n\\t\\t\\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\\n\\t\\t\\treturn this.texture.repeat;\\n\\n\\t\\t},\\n\\t\\tset: function ( value ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\\n\\t\\t\\tthis.texture.repeat = value;\\n\\n\\t\\t}\\n\\t},\\n\\tformat: {\\n\\t\\tget: function () {\\n\\n\\t\\t\\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\\n\\t\\t\\treturn this.texture.format;\\n\\n\\t\\t},\\n\\t\\tset: function ( value ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\\n\\t\\t\\tthis.texture.format = value;\\n\\n\\t\\t}\\n\\t},\\n\\ttype: {\\n\\t\\tget: function () {\\n\\n\\t\\t\\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\\n\\t\\t\\treturn this.texture.type;\\n\\n\\t\\t},\\n\\t\\tset: function ( value ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\\n\\t\\t\\tthis.texture.type = value;\\n\\n\\t\\t}\\n\\t},\\n\\tgenerateMipmaps: {\\n\\t\\tget: function () {\\n\\n\\t\\t\\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\\n\\t\\t\\treturn this.texture.generateMipmaps;\\n\\n\\t\\t},\\n\\t\\tset: function ( value ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\\n\\t\\t\\tthis.texture.generateMipmaps = value;\\n\\n\\t\\t}\\n\\t}\\n\\n} );\\n\\n//\\n\\nObject.defineProperties( WebVRManager.prototype, {\\n\\n\\tstanding: {\\n\\t\\tset: function ( /* value */ ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.WebVRManager: .standing has been removed.' );\\n\\n\\t\\t}\\n\\t},\\n\\tuserHeight: {\\n\\t\\tset: function ( /* value */ ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.WebVRManager: .userHeight has been removed.' );\\n\\n\\t\\t}\\n\\t}\\n\\n} );\\n\\n//\\n\\nAudio.prototype.load = function ( file ) {\\n\\n\\tconsole.warn( 'THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.' );\\n\\tvar scope = this;\\n\\tvar audioLoader = new AudioLoader();\\n\\taudioLoader.load( file, function ( buffer ) {\\n\\n\\t\\tscope.setBuffer( buffer );\\n\\n\\t} );\\n\\treturn this;\\n\\n};\\n\\nAudioAnalyser.prototype.getData = function () {\\n\\n\\tconsole.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );\\n\\treturn this.getFrequencyData();\\n\\n};\\n\\n//\\n\\nCubeCamera.prototype.updateCubeMap = function ( renderer, scene ) {\\n\\n\\tconsole.warn( 'THREE.CubeCamera: .updateCubeMap() is now .update().' );\\n\\treturn this.update( renderer, scene );\\n\\n};\\n\\n//\\n\\nvar GeometryUtils = {\\n\\n\\tmerge: function ( geometry1, geometry2, materialIndexOffset ) {\\n\\n\\t\\tconsole.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );\\n\\t\\tvar matrix;\\n\\n\\t\\tif ( geometry2.isMesh ) {\\n\\n\\t\\t\\tgeometry2.matrixAutoUpdate && geometry2.updateMatrix();\\n\\n\\t\\t\\tmatrix = geometry2.matrix;\\n\\t\\t\\tgeometry2 = geometry2.geometry;\\n\\n\\t\\t}\\n\\n\\t\\tgeometry1.merge( geometry2, matrix, materialIndexOffset );\\n\\n\\t},\\n\\n\\tcenter: function ( geometry ) {\\n\\n\\t\\tconsole.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );\\n\\t\\treturn geometry.center();\\n\\n\\t}\\n\\n};\\n\\nImageUtils.crossOrigin = undefined;\\n\\nImageUtils.loadTexture = function ( url, mapping, onLoad, onError ) {\\n\\n\\tconsole.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );\\n\\n\\tvar loader = new TextureLoader();\\n\\tloader.setCrossOrigin( this.crossOrigin );\\n\\n\\tvar texture = loader.load( url, onLoad, undefined, onError );\\n\\n\\tif ( mapping ) texture.mapping = mapping;\\n\\n\\treturn texture;\\n\\n};\\n\\nImageUtils.loadTextureCube = function ( urls, mapping, onLoad, onError ) {\\n\\n\\tconsole.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );\\n\\n\\tvar loader = new CubeTextureLoader();\\n\\tloader.setCrossOrigin( this.crossOrigin );\\n\\n\\tvar texture = loader.load( urls, onLoad, undefined, onError );\\n\\n\\tif ( mapping ) texture.mapping = mapping;\\n\\n\\treturn texture;\\n\\n};\\n\\nImageUtils.loadCompressedTexture = function () {\\n\\n\\tconsole.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );\\n\\n};\\n\\nImageUtils.loadCompressedTextureCube = function () {\\n\\n\\tconsole.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );\\n\\n};\\n\\n//\\n\\nfunction Projector() {\\n\\n\\tconsole.error( 'THREE.Projector has been moved to /examples/js/renderers/Projector.js.' );\\n\\n\\tthis.projectVector = function ( vector, camera ) {\\n\\n\\t\\tconsole.warn( 'THREE.Projector: .projectVector() is now vector.project().' );\\n\\t\\tvector.project( camera );\\n\\n\\t};\\n\\n\\tthis.unprojectVector = function ( vector, camera ) {\\n\\n\\t\\tconsole.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );\\n\\t\\tvector.unproject( camera );\\n\\n\\t};\\n\\n\\tthis.pickingRay = function () {\\n\\n\\t\\tconsole.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );\\n\\n\\t};\\n\\n}\\n\\n//\\n\\nfunction CanvasRenderer() {\\n\\n\\tconsole.error( 'THREE.CanvasRenderer has been removed' );\\n\\n}\\n\\n//\\n\\nfunction JSONLoader() {\\n\\n\\tconsole.error( 'THREE.JSONLoader has been removed.' );\\n\\n}\\n\\n//\\n\\nvar SceneUtils = {\\n\\n\\tcreateMultiMaterialObject: function ( /* geometry, materials */ ) {\\n\\n\\t\\tconsole.error( 'THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js' );\\n\\n\\t},\\n\\n\\tdetach: function ( /* child, parent, scene */ ) {\\n\\n\\t\\tconsole.error( 'THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js' );\\n\\n\\t},\\n\\n\\tattach: function ( /* child, scene, parent */ ) {\\n\\n\\t\\tconsole.error( 'THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js' );\\n\\n\\t}\\n\\n};\\n\\n//\\n\\nfunction LensFlare() {\\n\\n\\tconsole.error( 'THREE.LensFlare has been moved to /examples/js/objects/Lensflare.js' );\\n\\n}\\n\\nexport { WebGLMultisampleRenderTarget, WebGLRenderTargetCube, WebGLRenderTarget, WebGLRenderer, ShaderLib, UniformsLib, UniformsUtils, ShaderChunk, FogExp2, Fog, Scene, Sprite, LOD, SkinnedMesh, Skeleton, Bone, Mesh, LineSegments, LineLoop, Line, Points, Group, VideoTexture, DataTexture, DataTexture3D, CompressedTexture, CubeTexture, CanvasTexture, DepthTexture, Texture, AnimationLoader, CompressedTextureLoader, DataTextureLoader, CubeTextureLoader, TextureLoader, ObjectLoader, MaterialLoader, BufferGeometryLoader, DefaultLoadingManager, LoadingManager, ImageLoader, ImageBitmapLoader, FontLoader, FileLoader, Loader, LoaderUtils, Cache, AudioLoader, SpotLightShadow, SpotLight, PointLight, RectAreaLight, HemisphereLight, DirectionalLightShadow, DirectionalLight, AmbientLight, LightShadow, Light, StereoCamera, PerspectiveCamera, OrthographicCamera, CubeCamera, ArrayCamera, Camera, AudioListener, PositionalAudio, AudioContext, AudioAnalyser, Audio, VectorKeyframeTrack, StringKeyframeTrack, QuaternionKeyframeTrack, NumberKeyframeTrack, ColorKeyframeTrack, BooleanKeyframeTrack, PropertyMixer, PropertyBinding, KeyframeTrack, AnimationUtils, AnimationObjectGroup, AnimationMixer, AnimationClip, Uniform, InstancedBufferGeometry, BufferGeometry, Geometry, InterleavedBufferAttribute, InstancedInterleavedBuffer, InterleavedBuffer, InstancedBufferAttribute, Face3, Object3D, Raycaster, Layers, EventDispatcher, Clock, QuaternionLinearInterpolant, LinearInterpolant, DiscreteInterpolant, CubicInterpolant, Interpolant, Triangle, _Math as Math, Spherical, Cylindrical, Plane, Frustum, Sphere, Ray, Matrix4, Matrix3, Box3, Box2, Line3, Euler, Vector4, Vector3, Vector2, Quaternion, Color, ImmediateRenderObject, VertexNormalsHelper, SpotLightHelper, SkeletonHelper, PointLightHelper, RectAreaLightHelper, HemisphereLightHelper, GridHelper, PolarGridHelper, FaceNormalsHelper, DirectionalLightHelper, CameraHelper, BoxHelper, Box3Helper, PlaneHelper, ArrowHelper, AxesHelper, Shape, Path, ShapePath, Font, CurvePath, Curve, ImageUtils, ShapeUtils, WebGLUtils, WireframeGeometry, ParametricGeometry, ParametricBufferGeometry, TetrahedronGeometry, TetrahedronBufferGeometry, OctahedronGeometry, OctahedronBufferGeometry, IcosahedronGeometry, IcosahedronBufferGeometry, DodecahedronGeometry, DodecahedronBufferGeometry, PolyhedronGeometry, PolyhedronBufferGeometry, TubeGeometry, TubeBufferGeometry, TorusKnotGeometry, TorusKnotBufferGeometry, TorusGeometry, TorusBufferGeometry, TextGeometry, TextBufferGeometry, SphereGeometry, SphereBufferGeometry, RingGeometry, RingBufferGeometry, PlaneGeometry, PlaneBufferGeometry, LatheGeometry, LatheBufferGeometry, ShapeGeometry, ShapeBufferGeometry, ExtrudeGeometry, ExtrudeBufferGeometry, EdgesGeometry, ConeGeometry, ConeBufferGeometry, CylinderGeometry, CylinderBufferGeometry, CircleGeometry, CircleBufferGeometry, BoxGeometry, BoxGeometry as CubeGeometry, BoxBufferGeometry, ShadowMaterial, SpriteMaterial, RawShaderMaterial, ShaderMaterial, PointsMaterial, MeshPhysicalMaterial, MeshStandardMaterial, MeshPhongMaterial, MeshToonMaterial, MeshNormalMaterial, MeshLambertMaterial, MeshDepthMaterial, MeshDistanceMaterial, MeshBasicMaterial, MeshMatcapMaterial, LineDashedMaterial, LineBasicMaterial, Material, Float64BufferAttribute, Float32BufferAttribute, Uint32BufferAttribute, Int32BufferAttribute, Uint16BufferAttribute, Int16BufferAttribute, Uint8ClampedBufferAttribute, Uint8BufferAttribute, Int8BufferAttribute, BufferAttribute, ArcCurve, CatmullRomCurve3, CubicBezierCurve, CubicBezierCurve3, EllipseCurve, LineCurve, LineCurve3, QuadraticBezierCurve, QuadraticBezierCurve3, SplineCurve, REVISION, MOUSE, CullFaceNone, CullFaceBack, CullFaceFront, CullFaceFrontBack, FrontFaceDirectionCW, FrontFaceDirectionCCW, BasicShadowMap, PCFShadowMap, PCFSoftShadowMap, FrontSide, BackSide, DoubleSide, FlatShading, SmoothShading, NoColors, FaceColors, VertexColors, NoBlending, NormalBlending, AdditiveBlending, SubtractiveBlending, MultiplyBlending, CustomBlending, AddEquation, SubtractEquation, ReverseSubtractEquation, MinEquation, MaxEquation, ZeroFactor, OneFactor, SrcColorFactor, OneMinusSrcColorFactor, SrcAlphaFactor, OneMinusSrcAlphaFactor, DstAlphaFactor, OneMinusDstAlphaFactor, DstColorFactor, OneMinusDstColorFactor, SrcAlphaSaturateFactor, NeverDepth, AlwaysDepth, LessDepth, LessEqualDepth, EqualDepth, GreaterEqualDepth, GreaterDepth, NotEqualDepth, MultiplyOperation, MixOperation, AddOperation, NoToneMapping, LinearToneMapping, ReinhardToneMapping, Uncharted2ToneMapping, CineonToneMapping, ACESFilmicToneMapping, UVMapping, CubeReflectionMapping, CubeRefractionMapping, EquirectangularReflectionMapping, EquirectangularRefractionMapping, SphericalReflectionMapping, CubeUVReflectionMapping, CubeUVRefractionMapping, RepeatWrapping, ClampToEdgeWrapping, MirroredRepeatWrapping, NearestFilter, NearestMipMapNearestFilter, NearestMipMapLinearFilter, LinearFilter, LinearMipMapNearestFilter, LinearMipMapLinearFilter, UnsignedByteType, ByteType, ShortType, UnsignedShortType, IntType, UnsignedIntType, FloatType, HalfFloatType, UnsignedShort4444Type, UnsignedShort5551Type, UnsignedShort565Type, UnsignedInt248Type, AlphaFormat, RGBFormat, RGBAFormat, LuminanceFormat, LuminanceAlphaFormat, RGBEFormat, DepthFormat, DepthStencilFormat, RedFormat, RGB_S3TC_DXT1_Format, RGBA_S3TC_DXT1_Format, RGBA_S3TC_DXT3_Format, RGBA_S3TC_DXT5_Format, RGB_PVRTC_4BPPV1_Format, RGB_PVRTC_2BPPV1_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_PVRTC_2BPPV1_Format, RGB_ETC1_Format, RGBA_ASTC_4x4_Format, RGBA_ASTC_5x4_Format, RGBA_ASTC_5x5_Format, RGBA_ASTC_6x5_Format, RGBA_ASTC_6x6_Format, RGBA_ASTC_8x5_Format, RGBA_ASTC_8x6_Format, RGBA_ASTC_8x8_Format, RGBA_ASTC_10x5_Format, RGBA_ASTC_10x6_Format, RGBA_ASTC_10x8_Format, RGBA_ASTC_10x10_Format, RGBA_ASTC_12x10_Format, RGBA_ASTC_12x12_Format, LoopOnce, LoopRepeat, LoopPingPong, InterpolateDiscrete, InterpolateLinear, InterpolateSmooth, ZeroCurvatureEnding, ZeroSlopeEnding, WrapAroundEnding, TrianglesDrawMode, TriangleStripDrawMode, TriangleFanDrawMode, LinearEncoding, sRGBEncoding, GammaEncoding, RGBEEncoding, LogLuvEncoding, RGBM7Encoding, RGBM16Encoding, RGBDEncoding, BasicDepthPacking, RGBADepthPacking, TangentSpaceNormalMap, ObjectSpaceNormalMap, Face4, LineStrip, LinePieces, MeshFaceMaterial, MultiMaterial, PointCloud, Particle, ParticleSystem, PointCloudMaterial, ParticleBasicMaterial, ParticleSystemMaterial, Vertex, DynamicBufferAttribute, Int8Attribute, Uint8Attribute, Uint8ClampedAttribute, Int16Attribute, Uint16Attribute, Int32Attribute, Uint32Attribute, Float32Attribute, Float64Attribute, ClosedSplineCurve3, SplineCurve3, Spline, AxisHelper, BoundingBoxHelper, EdgesHelper, WireframeHelper, XHRLoader, BinaryTextureLoader, GeometryUtils, Projector, CanvasRenderer, JSONLoader, SceneUtils, LensFlare };\\n\",\"import art from './toile.jpg'\\nimport cadre from './cadre2.obj'\\nimport OrbitControls from 'three-orbitcontrols'\\n\\nlet fpc = require('./fpc.js')\\n\\nimport floorColor from './floorTexture/WoodFlooring044_COL_2K.jpg'\\nimport floorNormal from './floorTexture/WoodFlooring044_NRM_2K.jpg'\\nimport floorDisplacement from './floorTexture/WoodFlooring044_DISP_2K.jpg'\\n\\nimport frameColor from './floorTexture/frame.jpg'\\n\\nexport default class App {\\n\\n    constructor() {\\n\\n        document.addEventListener('keydown', this.onKeyDown.bind(this))\\n        document.addEventListener('keyup', this.onKeyUp.bind(this))\\n\\n        this.moveFwd = false\\n        this.moveBwd = false\\n        this.moveLeft = false\\n        this.moveRight = false\\n\\n        this.heading = 0\\n\\n        this.camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 0.01, 100);\\n        this.camera.position.z = -5;\\n        this.camera.position.y = 2;\\n        this.camera.rotation.y = 0;\\n        this.camera.lookAt(new THREE.Vector3(0, 2, 0))\\n\\n        this.loader = new THREE.OBJLoader()\\n\\n        this.scene = new THREE.Scene();\\n\\n        this.geometry = new THREE.PlaneBufferGeometry(1.2, 2.1)\\n\\n        var texture = new THREE.TextureLoader().load(art);\\n        this.material = new THREE.MeshLambertMaterial({ map: texture });\\n        this.mesh = new THREE.Mesh(this.geometry, this.material);\\n        this.mesh.rotateX(Math.PI)\\n        this.mesh.rotateZ(Math.PI)\\n        this.mesh.position.z = -0.15\\n        //this.scene.add(this.mesh);\\n\\n        this.wallGeometry = new THREE.PlaneBufferGeometry(20, 10)\\n\\n        this.wallMaterial = new THREE.MeshPhongMaterial({ color: 0xffffff, shininess: 1 });\\n        this.wall = new THREE.Mesh(this.wallGeometry, this.wallMaterial);\\n        this.wall.rotateX(Math.PI)\\n        this.wall.position.z = 0.05\\n        this.scene.add(this.wall);\\n        this.wall.receiveShadow = true;\\n\\n        this.wallR = new THREE.Mesh(this.wallGeometry, this.wallMaterial);\\n        this.wallR.rotateY(Math.PI / 2)\\n        this.wallR.position.x = -6\\n        this.scene.add(this.wallR);\\n        this.wallR.receiveShadow = true;\\n\\n        this.wallL = new THREE.Mesh(this.wallGeometry, this.wallMaterial);\\n        this.wallL.rotateY(-Math.PI / 2)\\n        this.wallL.position.x = 6\\n        this.scene.add(this.wallL);\\n        this.wallL.receiveShadow = true;\\n\\n        this.wallB = new THREE.Mesh(this.wallGeometry, this.wallMaterial);\\n        this.wallB.position.z = -10\\n        this.scene.add(this.wallB);\\n        this.wallB.receiveShadow = true;\\n\\n        this.floor = null\\n        this.createFloor()\\n\\n        this.ambientlight = new THREE.AmbientLight(0xffffff, 0.1)\\n        this.scene.add(this.ambientlight)\\n\\n        this.frame = \\\"\\\"\\n\\n        this.renderer = new THREE.WebGLRenderer({ antialias: true });\\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\\n        this.renderer.setPixelRatio(window.devicePixelRatio);\\n        document.body.appendChild(this.renderer.domElement);\\n        this.renderer.shadowMap.enabled = true;\\n\\n        this.light = new THREE.PointLight(0xffffff, .5)\\n        this.light.position.set(0, 5, -4)\\n        this.scene.add(this.light)\\n\\n        let spotlight = new THREE.SpotLight(0xffffff, 1, 10, 0.38, 1)\\n        spotlight.position.set(0, 5, -5)\\n\\n        spotlight.castShadow = true;\\n\\n        // additional shadow properties of interest\\n        spotlight.shadow.mapSize.width = 128;\\n        spotlight.shadow.mapSize.height = 128;\\n        spotlight.shadow.camera.near = 1;\\n        spotlight.shadow.camera.far = 1000;\\n\\n        this.scene.add(spotlight)\\n        this.scene.add(spotlight.target)\\n        spotlight.target.position.y = 3\\n\\n        // \\n\\n\\n        //this.controls = new OrbitControls(this.camera, this.renderer.domElement)\\n\\n        this.addFrame()\\n\\n        this.frameAndPic = new THREE.Group()\\n        this.frameAndPic.add(this.mesh)\\n        this.scene.add(this.frameAndPic)\\n\\n        this.frameAndPic.position.y = 3\\n\\n        this.render()\\n    }\\n\\n    onKeyDown(event) {\\n        switch (event.keyCode) {\\n\\n            case 38: /*up*/\\n            case 87: /*W*/ this.moveFwd = true; break;\\n\\n            case 37: /*left*/\\n            case 65: /*A*/ this.moveLeft = true; break;\\n\\n            case 40: /*down*/\\n            case 83: /*S*/ this.moveBwd = true; break;\\n\\n            case 39: /*right*/\\n            case 68: /*D*/ this.moveRight = true; break;\\n\\n        }\\n    }\\n\\n    onKeyUp(event) {\\n        switch (event.keyCode) {\\n\\n            case 38: /*up*/\\n            case 87: /*W*/ this.moveFwd = false; break;\\n\\n            case 37: /*left*/\\n            case 65: /*A*/ this.moveLeft = false; break;\\n\\n            case 40: /*down*/\\n            case 83: /*S*/ this.moveBwd = false; break;\\n\\n            case 39: /*right*/\\n            case 68: /*D*/ this.moveRight = false; break;\\n\\n        }\\n    }\\n\\n    createFloor() {\\n        var floorDiffuse = new THREE.TextureLoader().load(floorColor);\\n        floorDiffuse.wrapS = THREE.RepeatWrapping;\\n        floorDiffuse.wrapT = THREE.RepeatWrapping;\\n        floorDiffuse.repeat.set(10, 10);\\n        var floorNrm = new THREE.TextureLoader().load(floorNormal);\\n        floorNrm.wrapS = THREE.RepeatWrapping;\\n        floorNrm.wrapT = THREE.RepeatWrapping;\\n        floorNrm.repeat.set(10, 10);\\n        var floorDisp = new THREE.TextureLoader().load(floorDisplacement);\\n        floorDisp.wrapS = THREE.RepeatWrapping;\\n        floorDisp.wrapT = THREE.RepeatWrapping;\\n        floorDisp.repeat.set(10, 10);\\n        let floorGeo = new THREE.PlaneBufferGeometry(20, 20);\\n        let floorMat = new THREE.MeshPhongMaterial({\\n            map: floorDiffuse,\\n            displacementMap: floorDisp,\\n        });\\n        this.floor = new THREE.Mesh(floorGeo, floorMat)\\n        this.floor.position.z = -0.5\\n        this.floor.rotateX(-Math.PI / 2)\\n        this.scene.add(this.floor)\\n        this.floor.receiveShadow = true;\\n    }\\n\\n    addFrame() {\\n        // load a resource\\n        this.loader.load(\\n            // resource URL\\n            cadre,\\n            // called when resource is loaded\\n            (object) => {\\n                let texture = new THREE.TextureLoader().load(frameColor);\\n                let material = new THREE.MeshLambertMaterial({\\n                    map: texture\\n                })\\n                texture.wrapS = THREE.RepeatWrapping;\\n                texture.wrapT = THREE.RepeatWrapping;\\n                texture.repeat.set(0.5, 0.5);\\n                object.children[0].material = material\\n                this.scene.add(object);\\n                object.scale.set(0.2, 0.15, 0.2)\\n                object.rotateY(Math.PI)\\n                this.frameAndPic.add(object)\\n            },\\n            // called when loading is in progresses\\n            (xhr) => {\\n\\n                console.log((xhr.loaded / xhr.total * 100) + '% loaded');\\n\\n            },\\n            // called when loading has errors\\n            (error) => {\\n\\n                console.log('An error happened');\\n\\n            }\\n        );\\n    }\\n\\n    render() {\\n        requestAnimationFrame(this.render.bind(this));\\n\\n\\n        //this.mesh.rotation.x += 0.01;\\n        //this.mesh.rotation.y += 0.02;\\n        if (this.moveRight) {\\n            this.heading += 0.06\\n        }\\n\\n        if (this.moveLeft) {\\n            this.heading -= 0.06\\n        }\\n\\n        this.camera.rotation.y = this.heading\\n\\n        if (this.moveFwd) {\\n            this.camera.position.z += Math.cos(this.heading) * 0.1\\n            this.camera.position.x -= Math.sin(this.heading) * 0.1\\n        }\\n\\n        if (this.moveBwd) {\\n            this.camera.position.z -= Math.cos(this.heading) * 0.1\\n            this.camera.position.x += Math.sin(this.heading) * 0.1\\n        }\\n\\n        this.renderer.render(this.scene, this.camera);\\n    }\\n\\n\\n}\",\"module.exports = __webpack_public_path__ + \\\"b51dda80b1a50c959e01c91bd9e00202.jpg\\\";\",\"module.exports = __webpack_public_path__ + \\\"d22798412c8751bcc153168e2c3ed59e.obj\\\";\",\"module.exports = __webpack_public_path__ + \\\"d4ec5c874e99740411598a7551c630c3.jpg\\\";\",\"module.exports = __webpack_public_path__ + \\\"60d2fcbf02a8520ef5f9da4e21376136.jpg\\\";\",\"module.exports = __webpack_public_path__ + \\\"8ddd8186c7d3177d2f68b0d3654453e6.jpg\\\";\",\"module.exports = __webpack_public_path__ + \\\"1df20469bfb4c376dceff509feea94d6.jpg\\\";\",\"global.THREE = require('three')\\nlet OBJLoader = require('three-obj-loader');\\nOBJLoader(THREE);\\nglobal.OIMO = require('oimo')\\nimport App from './app'\\n\\nlet app = new App()\",\"var g;\\n\\n// This works in non-strict mode\\ng = (function() {\\n\\treturn this;\\n})();\\n\\ntry {\\n\\t// This works if eval is allowed (see CSP)\\n\\tg = g || new Function(\\\"return this\\\")();\\n} catch (e) {\\n\\t// This works if the window reference is available\\n\\tif (typeof window === \\\"object\\\") g = window;\\n}\\n\\n// g can still be undefined, but nothing to do about it...\\n// We return undefined, instead of nothing here, so it's\\n// easier to handle this case. if(!global) { ...}\\n\\nmodule.exports = g;\\n\",\"'use strict';\\n\\nfunction defaultOnError(err) {\\n  throw new Error(err);\\n}\\n\\nmodule.exports = function (THREE) {\\n\\n  /**\\n   * @author mrdoob / http://mrdoob.com/\\n   */\\n\\n  THREE.OBJLoader = function (manager) {\\n\\n    this.manager = manager !== undefined ? manager : THREE.DefaultLoadingManager;\\n\\n    this.materials = null;\\n\\n    this.regexp = {\\n      // v float float float\\n      vertex_pattern: /^v\\\\s+([\\\\d|\\\\.|\\\\+|\\\\-|e|E]+)\\\\s+([\\\\d|\\\\.|\\\\+|\\\\-|e|E]+)\\\\s+([\\\\d|\\\\.|\\\\+|\\\\-|e|E]+)/,\\n      // vn float float float\\n      normal_pattern: /^vn\\\\s+([\\\\d|\\\\.|\\\\+|\\\\-|e|E]+)\\\\s+([\\\\d|\\\\.|\\\\+|\\\\-|e|E]+)\\\\s+([\\\\d|\\\\.|\\\\+|\\\\-|e|E]+)/,\\n      // vt float float\\n      uv_pattern: /^vt\\\\s+([\\\\d|\\\\.|\\\\+|\\\\-|e|E]+)\\\\s+([\\\\d|\\\\.|\\\\+|\\\\-|e|E]+)/,\\n      // f vertex vertex vertex\\n      face_vertex: /^f\\\\s+(-?\\\\d+)\\\\s+(-?\\\\d+)\\\\s+(-?\\\\d+)(?:\\\\s+(-?\\\\d+))?/,\\n      // f vertex/uv vertex/uv vertex/uv\\n      face_vertex_uv: /^f\\\\s+(-?\\\\d+)\\\\/(-?\\\\d+)\\\\s+(-?\\\\d+)\\\\/(-?\\\\d+)\\\\s+(-?\\\\d+)\\\\/(-?\\\\d+)(?:\\\\s+(-?\\\\d+)\\\\/(-?\\\\d+))?/,\\n      // f vertex/uv/normal vertex/uv/normal vertex/uv/normal\\n      face_vertex_uv_normal: /^f\\\\s+(-?\\\\d+)\\\\/(-?\\\\d+)\\\\/(-?\\\\d+)\\\\s+(-?\\\\d+)\\\\/(-?\\\\d+)\\\\/(-?\\\\d+)\\\\s+(-?\\\\d+)\\\\/(-?\\\\d+)\\\\/(-?\\\\d+)(?:\\\\s+(-?\\\\d+)\\\\/(-?\\\\d+)\\\\/(-?\\\\d+))?/,\\n      // f vertex//normal vertex//normal vertex//normal\\n      face_vertex_normal: /^f\\\\s+(-?\\\\d+)\\\\/\\\\/(-?\\\\d+)\\\\s+(-?\\\\d+)\\\\/\\\\/(-?\\\\d+)\\\\s+(-?\\\\d+)\\\\/\\\\/(-?\\\\d+)(?:\\\\s+(-?\\\\d+)\\\\/\\\\/(-?\\\\d+))?/,\\n      // o object_name | g group_name\\n      object_pattern: /^[og]\\\\s*(.+)?/,\\n      // s boolean\\n      smoothing_pattern: /^s\\\\s+(\\\\d+|on|off)/,\\n      // mtllib file_reference\\n      material_library_pattern: /^mtllib /,\\n      // usemtl material_name\\n      material_use_pattern: /^usemtl /\\n    };\\n  };\\n\\n  THREE.OBJLoader.prototype = {\\n\\n    constructor: THREE.OBJLoader,\\n\\n    load: function load(url, onLoad, onProgress, onError) {\\n\\n      var scope = this;\\n      this.onError = onError || defaultOnError;\\n\\n      var loader = new THREE.FileLoader(scope.manager);\\n      loader.setPath(this.path);\\n      loader.load(url, function (text) {\\n\\n        onLoad(scope.parse(text));\\n      }, onProgress, onError);\\n    },\\n\\n    setPath: function setPath(value) {\\n\\n      this.path = value;\\n    },\\n\\n    setMaterials: function setMaterials(materials) {\\n\\n      this.materials = materials;\\n    },\\n\\n    _createParserState: function _createParserState() {\\n\\n      var state = {\\n        objects: [],\\n        object: {},\\n\\n        vertices: [],\\n        normals: [],\\n        uvs: [],\\n\\n        materialLibraries: [],\\n\\n        startObject: function startObject(name, fromDeclaration) {\\n\\n          // If the current object (initial from reset) is not from a g/o declaration in the parsed\\n          // file. We need to use it for the first parsed g/o to keep things in sync.\\n          if (this.object && this.object.fromDeclaration === false) {\\n\\n            this.object.name = name;\\n            this.object.fromDeclaration = fromDeclaration !== false;\\n            return;\\n          }\\n\\n          var previousMaterial = this.object && typeof this.object.currentMaterial === 'function' ? this.object.currentMaterial() : undefined;\\n\\n          if (this.object && typeof this.object._finalize === 'function') {\\n\\n            this.object._finalize(true);\\n          }\\n\\n          this.object = {\\n            name: name || '',\\n            fromDeclaration: fromDeclaration !== false,\\n\\n            geometry: {\\n              vertices: [],\\n              normals: [],\\n              uvs: []\\n            },\\n            materials: [],\\n            smooth: true,\\n\\n            startMaterial: function startMaterial(name, libraries) {\\n\\n              var previous = this._finalize(false);\\n\\n              // New usemtl declaration overwrites an inherited material, except if faces were declared\\n              // after the material, then it must be preserved for proper MultiMaterial continuation.\\n              if (previous && (previous.inherited || previous.groupCount <= 0)) {\\n\\n                this.materials.splice(previous.index, 1);\\n              }\\n\\n              var material = {\\n                index: this.materials.length,\\n                name: name || '',\\n                mtllib: Array.isArray(libraries) && libraries.length > 0 ? libraries[libraries.length - 1] : '',\\n                smooth: previous !== undefined ? previous.smooth : this.smooth,\\n                groupStart: previous !== undefined ? previous.groupEnd : 0,\\n                groupEnd: -1,\\n                groupCount: -1,\\n                inherited: false,\\n\\n                clone: function clone(index) {\\n                  var cloned = {\\n                    index: typeof index === 'number' ? index : this.index,\\n                    name: this.name,\\n                    mtllib: this.mtllib,\\n                    smooth: this.smooth,\\n                    groupStart: 0,\\n                    groupEnd: -1,\\n                    groupCount: -1,\\n                    inherited: false\\n                  };\\n                  cloned.clone = this.clone.bind(cloned);\\n                  return cloned;\\n                }\\n              };\\n\\n              this.materials.push(material);\\n\\n              return material;\\n            },\\n\\n            currentMaterial: function currentMaterial() {\\n\\n              if (this.materials.length > 0) {\\n                return this.materials[this.materials.length - 1];\\n              }\\n\\n              return undefined;\\n            },\\n\\n            _finalize: function _finalize(end) {\\n\\n              var lastMultiMaterial = this.currentMaterial();\\n              if (lastMultiMaterial && lastMultiMaterial.groupEnd === -1) {\\n\\n                lastMultiMaterial.groupEnd = this.geometry.vertices.length / 3;\\n                lastMultiMaterial.groupCount = lastMultiMaterial.groupEnd - lastMultiMaterial.groupStart;\\n                lastMultiMaterial.inherited = false;\\n              }\\n\\n              // Ignore objects tail materials if no face declarations followed them before a new o/g started.\\n              if (end && this.materials.length > 1) {\\n\\n                for (var mi = this.materials.length - 1; mi >= 0; mi--) {\\n                  if (this.materials[mi].groupCount <= 0) {\\n                    this.materials.splice(mi, 1);\\n                  }\\n                }\\n              }\\n\\n              // Guarantee at least one empty material, this makes the creation later more straight forward.\\n              if (end && this.materials.length === 0) {\\n\\n                this.materials.push({\\n                  name: '',\\n                  smooth: this.smooth\\n                });\\n              }\\n\\n              return lastMultiMaterial;\\n            }\\n          };\\n\\n          // Inherit previous objects material.\\n          // Spec tells us that a declared material must be set to all objects until a new material is declared.\\n          // If a usemtl declaration is encountered while this new object is being parsed, it will\\n          // overwrite the inherited material. Exception being that there was already face declarations\\n          // to the inherited material, then it will be preserved for proper MultiMaterial continuation.\\n\\n          if (previousMaterial && previousMaterial.name && typeof previousMaterial.clone === \\\"function\\\") {\\n\\n            var declared = previousMaterial.clone(0);\\n            declared.inherited = true;\\n            this.object.materials.push(declared);\\n          }\\n\\n          this.objects.push(this.object);\\n        },\\n\\n        finalize: function finalize() {\\n\\n          if (this.object && typeof this.object._finalize === 'function') {\\n\\n            this.object._finalize(true);\\n          }\\n        },\\n\\n        parseVertexIndex: function parseVertexIndex(value, len) {\\n\\n          var index = parseInt(value, 10);\\n          return (index >= 0 ? index - 1 : index + len / 3) * 3;\\n        },\\n\\n        parseNormalIndex: function parseNormalIndex(value, len) {\\n\\n          var index = parseInt(value, 10);\\n          return (index >= 0 ? index - 1 : index + len / 3) * 3;\\n        },\\n\\n        parseUVIndex: function parseUVIndex(value, len) {\\n\\n          var index = parseInt(value, 10);\\n          return (index >= 0 ? index - 1 : index + len / 2) * 2;\\n        },\\n\\n        addVertex: function addVertex(a, b, c) {\\n\\n          var src = this.vertices;\\n          var dst = this.object.geometry.vertices;\\n\\n          dst.push(src[a + 0]);\\n          dst.push(src[a + 1]);\\n          dst.push(src[a + 2]);\\n          dst.push(src[b + 0]);\\n          dst.push(src[b + 1]);\\n          dst.push(src[b + 2]);\\n          dst.push(src[c + 0]);\\n          dst.push(src[c + 1]);\\n          dst.push(src[c + 2]);\\n        },\\n\\n        addVertexLine: function addVertexLine(a) {\\n\\n          var src = this.vertices;\\n          var dst = this.object.geometry.vertices;\\n\\n          dst.push(src[a + 0]);\\n          dst.push(src[a + 1]);\\n          dst.push(src[a + 2]);\\n        },\\n\\n        addNormal: function addNormal(a, b, c) {\\n\\n          var src = this.normals;\\n          var dst = this.object.geometry.normals;\\n\\n          dst.push(src[a + 0]);\\n          dst.push(src[a + 1]);\\n          dst.push(src[a + 2]);\\n          dst.push(src[b + 0]);\\n          dst.push(src[b + 1]);\\n          dst.push(src[b + 2]);\\n          dst.push(src[c + 0]);\\n          dst.push(src[c + 1]);\\n          dst.push(src[c + 2]);\\n        },\\n\\n        addUV: function addUV(a, b, c) {\\n\\n          var src = this.uvs;\\n          var dst = this.object.geometry.uvs;\\n\\n          dst.push(src[a + 0]);\\n          dst.push(src[a + 1]);\\n          dst.push(src[b + 0]);\\n          dst.push(src[b + 1]);\\n          dst.push(src[c + 0]);\\n          dst.push(src[c + 1]);\\n        },\\n\\n        addUVLine: function addUVLine(a) {\\n\\n          var src = this.uvs;\\n          var dst = this.object.geometry.uvs;\\n\\n          dst.push(src[a + 0]);\\n          dst.push(src[a + 1]);\\n        },\\n\\n        addFace: function addFace(a, b, c, d, ua, ub, uc, ud, na, nb, nc, nd) {\\n\\n          var vLen = this.vertices.length;\\n\\n          var ia = this.parseVertexIndex(a, vLen);\\n          var ib = this.parseVertexIndex(b, vLen);\\n          var ic = this.parseVertexIndex(c, vLen);\\n          var id;\\n\\n          if (d === undefined) {\\n\\n            this.addVertex(ia, ib, ic);\\n          } else {\\n\\n            id = this.parseVertexIndex(d, vLen);\\n\\n            this.addVertex(ia, ib, id);\\n            this.addVertex(ib, ic, id);\\n          }\\n\\n          if (ua !== undefined) {\\n\\n            var uvLen = this.uvs.length;\\n\\n            ia = this.parseUVIndex(ua, uvLen);\\n            ib = this.parseUVIndex(ub, uvLen);\\n            ic = this.parseUVIndex(uc, uvLen);\\n\\n            if (d === undefined) {\\n\\n              this.addUV(ia, ib, ic);\\n            } else {\\n\\n              id = this.parseUVIndex(ud, uvLen);\\n\\n              this.addUV(ia, ib, id);\\n              this.addUV(ib, ic, id);\\n            }\\n          }\\n\\n          if (na !== undefined) {\\n\\n            // Normals are many times the same. If so, skip function call and parseInt.\\n            var nLen = this.normals.length;\\n            ia = this.parseNormalIndex(na, nLen);\\n\\n            ib = na === nb ? ia : this.parseNormalIndex(nb, nLen);\\n            ic = na === nc ? ia : this.parseNormalIndex(nc, nLen);\\n\\n            if (d === undefined) {\\n\\n              this.addNormal(ia, ib, ic);\\n            } else {\\n\\n              id = this.parseNormalIndex(nd, nLen);\\n\\n              this.addNormal(ia, ib, id);\\n              this.addNormal(ib, ic, id);\\n            }\\n          }\\n        },\\n\\n        addLineGeometry: function addLineGeometry(vertices, uvs) {\\n\\n          this.object.geometry.type = 'Line';\\n\\n          var vLen = this.vertices.length;\\n          var uvLen = this.uvs.length;\\n\\n          for (var vi = 0, l = vertices.length; vi < l; vi++) {\\n\\n            this.addVertexLine(this.parseVertexIndex(vertices[vi], vLen));\\n          }\\n\\n          for (var uvi = 0, l = uvs.length; uvi < l; uvi++) {\\n\\n            this.addUVLine(this.parseUVIndex(uvs[uvi], uvLen));\\n          }\\n        }\\n\\n      };\\n\\n      state.startObject('', false);\\n\\n      return state;\\n    },\\n\\n    parse: function parse(text, debug) {\\n      if (typeof debug === 'undefined') {\\n        debug = true;\\n      }\\n\\n      if (debug) {\\n        console.time('OBJLoader');\\n      }\\n\\n      var state = this._createParserState();\\n\\n      if (text.indexOf('\\\\r\\\\n') !== -1) {\\n\\n        // This is faster than String.split with regex that splits on both\\n        text = text.replace(/\\\\r\\\\n/g, '\\\\n');\\n      }\\n\\n      if (text.indexOf('\\\\\\\\\\\\n') !== -1) {\\n\\n        // join lines separated by a line continuation character (\\\\)\\n        text = text.replace(/\\\\\\\\\\\\n/g, '');\\n      }\\n\\n      var lines = text.split('\\\\n');\\n      var line = '',\\n          lineFirstChar = '',\\n          lineSecondChar = '';\\n      var lineLength = 0;\\n      var result = [];\\n\\n      // Faster to just trim left side of the line. Use if available.\\n      var trimLeft = typeof ''.trimLeft === 'function';\\n\\n      for (var i = 0, l = lines.length; i < l; i++) {\\n\\n        line = lines[i];\\n\\n        line = trimLeft ? line.trimLeft() : line.trim();\\n\\n        lineLength = line.length;\\n\\n        if (lineLength === 0) continue;\\n\\n        lineFirstChar = line.charAt(0);\\n\\n        // @todo invoke passed in handler if any\\n        if (lineFirstChar === '#') continue;\\n\\n        if (lineFirstChar === 'v') {\\n\\n          lineSecondChar = line.charAt(1);\\n\\n          if (lineSecondChar === ' ' && (result = this.regexp.vertex_pattern.exec(line)) !== null) {\\n\\n            // 0                  1      2      3\\n            // [\\\"v 1.0 2.0 3.0\\\", \\\"1.0\\\", \\\"2.0\\\", \\\"3.0\\\"]\\n\\n            state.vertices.push(parseFloat(result[1]), parseFloat(result[2]), parseFloat(result[3]));\\n          } else if (lineSecondChar === 'n' && (result = this.regexp.normal_pattern.exec(line)) !== null) {\\n\\n            // 0                   1      2      3\\n            // [\\\"vn 1.0 2.0 3.0\\\", \\\"1.0\\\", \\\"2.0\\\", \\\"3.0\\\"]\\n\\n            state.normals.push(parseFloat(result[1]), parseFloat(result[2]), parseFloat(result[3]));\\n          } else if (lineSecondChar === 't' && (result = this.regexp.uv_pattern.exec(line)) !== null) {\\n\\n            // 0               1      2\\n            // [\\\"vt 0.1 0.2\\\", \\\"0.1\\\", \\\"0.2\\\"]\\n\\n            state.uvs.push(parseFloat(result[1]), parseFloat(result[2]));\\n          } else {\\n\\n            this.onError(\\\"Unexpected vertex/normal/uv line: '\\\" + line + \\\"'\\\");\\n          }\\n        } else if (lineFirstChar === \\\"f\\\") {\\n\\n          if ((result = this.regexp.face_vertex_uv_normal.exec(line)) !== null) {\\n\\n            // f vertex/uv/normal vertex/uv/normal vertex/uv/normal\\n            // 0                        1    2    3    4    5    6    7    8    9   10         11         12\\n            // [\\\"f 1/1/1 2/2/2 3/3/3\\\", \\\"1\\\", \\\"1\\\", \\\"1\\\", \\\"2\\\", \\\"2\\\", \\\"2\\\", \\\"3\\\", \\\"3\\\", \\\"3\\\", undefined, undefined, undefined]\\n\\n            state.addFace(result[1], result[4], result[7], result[10], result[2], result[5], result[8], result[11], result[3], result[6], result[9], result[12]);\\n          } else if ((result = this.regexp.face_vertex_uv.exec(line)) !== null) {\\n\\n            // f vertex/uv vertex/uv vertex/uv\\n            // 0                  1    2    3    4    5    6   7          8\\n            // [\\\"f 1/1 2/2 3/3\\\", \\\"1\\\", \\\"1\\\", \\\"2\\\", \\\"2\\\", \\\"3\\\", \\\"3\\\", undefined, undefined]\\n\\n            state.addFace(result[1], result[3], result[5], result[7], result[2], result[4], result[6], result[8]);\\n          } else if ((result = this.regexp.face_vertex_normal.exec(line)) !== null) {\\n\\n            // f vertex//normal vertex//normal vertex//normal\\n            // 0                     1    2    3    4    5    6   7          8\\n            // [\\\"f 1//1 2//2 3//3\\\", \\\"1\\\", \\\"1\\\", \\\"2\\\", \\\"2\\\", \\\"3\\\", \\\"3\\\", undefined, undefined]\\n\\n            state.addFace(result[1], result[3], result[5], result[7], undefined, undefined, undefined, undefined, result[2], result[4], result[6], result[8]);\\n          } else if ((result = this.regexp.face_vertex.exec(line)) !== null) {\\n\\n            // f vertex vertex vertex\\n            // 0            1    2    3   4\\n            // [\\\"f 1 2 3\\\", \\\"1\\\", \\\"2\\\", \\\"3\\\", undefined]\\n\\n            state.addFace(result[1], result[2], result[3], result[4]);\\n          } else {\\n\\n            this.onError(\\\"Unexpected face line: '\\\" + line + \\\"'\\\");\\n          }\\n        } else if (lineFirstChar === \\\"l\\\") {\\n\\n          var lineParts = line.substring(1).trim().split(\\\" \\\");\\n          var lineVertices = [],\\n              lineUVs = [];\\n\\n          if (line.indexOf(\\\"/\\\") === -1) {\\n\\n            lineVertices = lineParts;\\n          } else {\\n\\n            for (var li = 0, llen = lineParts.length; li < llen; li++) {\\n\\n              var parts = lineParts[li].split(\\\"/\\\");\\n\\n              if (parts[0] !== \\\"\\\") lineVertices.push(parts[0]);\\n              if (parts[1] !== \\\"\\\") lineUVs.push(parts[1]);\\n            }\\n          }\\n          state.addLineGeometry(lineVertices, lineUVs);\\n        } else if ((result = this.regexp.object_pattern.exec(line)) !== null) {\\n\\n          // o object_name\\n          // or\\n          // g group_name\\n\\n          // WORKAROUND: https://bugs.chromium.org/p/v8/issues/detail?id=2869\\n          // var name = result[ 0 ].substr( 1 ).trim();\\n          var name = (\\\" \\\" + result[0].substr(1).trim()).substr(1);\\n\\n          state.startObject(name);\\n        } else if (this.regexp.material_use_pattern.test(line)) {\\n\\n          // material\\n\\n          state.object.startMaterial(line.substring(7).trim(), state.materialLibraries);\\n        } else if (this.regexp.material_library_pattern.test(line)) {\\n\\n          // mtl file\\n\\n          state.materialLibraries.push(line.substring(7).trim());\\n        } else if ((result = this.regexp.smoothing_pattern.exec(line)) !== null) {\\n\\n          // smooth shading\\n\\n          // @todo Handle files that have varying smooth values for a set of faces inside one geometry,\\n          // but does not define a usemtl for each face set.\\n          // This should be detected and a dummy material created (later MultiMaterial and geometry groups).\\n          // This requires some care to not create extra material on each smooth value for \\\"normal\\\" obj files.\\n          // where explicit usemtl defines geometry groups.\\n          // Example asset: examples/models/obj/cerberus/Cerberus.obj\\n\\n          var value = result[1].trim().toLowerCase();\\n          state.object.smooth = value === '1' || value === 'on';\\n\\n          var material = state.object.currentMaterial();\\n          if (material) {\\n\\n            material.smooth = state.object.smooth;\\n          }\\n        } else {\\n\\n          // Handle null terminated files without exception\\n          if (line === '\\\\0') continue;\\n\\n          this.onError(\\\"Unexpected line: '\\\" + line + \\\"'\\\");\\n        }\\n      }\\n\\n      state.finalize();\\n\\n      var container = new THREE.Group();\\n      container.materialLibraries = [].concat(state.materialLibraries);\\n\\n      for (var i = 0, l = state.objects.length; i < l; i++) {\\n\\n        var object = state.objects[i];\\n        var geometry = object.geometry;\\n        var materials = object.materials;\\n        var isLine = geometry.type === 'Line';\\n\\n        // Skip o/g line declarations that did not follow with any faces\\n        if (geometry.vertices.length === 0) continue;\\n\\n        var buffergeometry = new THREE.BufferGeometry();\\n\\n        buffergeometry.addAttribute('position', new THREE.BufferAttribute(new Float32Array(geometry.vertices), 3));\\n\\n        if (geometry.normals.length > 0) {\\n\\n          buffergeometry.addAttribute('normal', new THREE.BufferAttribute(new Float32Array(geometry.normals), 3));\\n        } else {\\n\\n          buffergeometry.computeVertexNormals();\\n        }\\n\\n        if (geometry.uvs.length > 0) {\\n\\n          buffergeometry.addAttribute('uv', new THREE.BufferAttribute(new Float32Array(geometry.uvs), 2));\\n        }\\n\\n        // Create materials\\n\\n        var createdMaterials = [];\\n\\n        for (var mi = 0, miLen = materials.length; mi < miLen; mi++) {\\n\\n          var sourceMaterial = materials[mi];\\n          var material = undefined;\\n\\n          if (this.materials !== null) {\\n\\n            material = this.materials.create(sourceMaterial.name);\\n\\n            // mtl etc. loaders probably can't create line materials correctly, copy properties to a line material.\\n            if (isLine && material && !(material instanceof THREE.LineBasicMaterial)) {\\n\\n              var materialLine = new THREE.LineBasicMaterial();\\n              materialLine.copy(material);\\n              material = materialLine;\\n            }\\n          }\\n\\n          if (!material) {\\n\\n            material = !isLine ? new THREE.MeshPhongMaterial() : new THREE.LineBasicMaterial();\\n            material.name = sourceMaterial.name;\\n          }\\n\\n          material.shading = sourceMaterial.smooth ? THREE.SmoothShading : THREE.FlatShading;\\n\\n          createdMaterials.push(material);\\n        }\\n\\n        // Create mesh\\n\\n        var mesh;\\n\\n        if (createdMaterials.length > 1) {\\n\\n          for (var mi = 0, miLen = materials.length; mi < miLen; mi++) {\\n\\n            var sourceMaterial = materials[mi];\\n            buffergeometry.addGroup(sourceMaterial.groupStart, sourceMaterial.groupCount, mi);\\n          }\\n\\n          var multiMaterial = new THREE.MultiMaterial(createdMaterials);\\n          mesh = !isLine ? new THREE.Mesh(buffergeometry, multiMaterial) : new THREE.LineSegments(buffergeometry, multiMaterial);\\n        } else {\\n\\n          mesh = !isLine ? new THREE.Mesh(buffergeometry, createdMaterials[0]) : new THREE.LineSegments(buffergeometry, createdMaterials[0]);\\n        }\\n\\n        mesh.name = object.name;\\n\\n        container.add(mesh);\\n      }\\n\\n      if (debug) {\\n        console.timeEnd('OBJLoader');\\n      }\\n\\n      return container;\\n    }\\n\\n  };\\n};\",\"// Polyfills\\r\\n\\r\\nif ( Number.EPSILON === undefined ) {\\r\\n\\r\\n\\tNumber.EPSILON = Math.pow( 2, - 52 );\\r\\n\\r\\n}\\r\\n\\r\\n//\\r\\n\\r\\nif ( Math.sign === undefined ) {\\r\\n\\r\\n\\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\\r\\n\\r\\n\\tMath.sign = function ( x ) {\\r\\n\\r\\n\\t\\treturn ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;\\r\\n\\r\\n\\t};\\r\\n\\r\\n}\\r\\n\\r\\nif ( Function.prototype.name === undefined ) {\\r\\n\\r\\n\\t// Missing in IE9-11.\\r\\n\\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\\r\\n\\r\\n\\tObject.defineProperty( Function.prototype, 'name', {\\r\\n\\r\\n\\t\\tget: function () {\\r\\n\\r\\n\\t\\t\\treturn this.toString().match( /^\\\\s*function\\\\s*([^\\\\(\\\\s]*)/ )[ 1 ];\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n}\\r\\n\\r\\nif ( Object.assign === undefined ) {\\r\\n\\r\\n\\t// Missing in IE.\\r\\n\\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\\r\\n\\r\\n\\t( function () {\\r\\n\\r\\n\\t\\tObject.assign = function ( target ) {\\r\\n\\r\\n\\t\\t\\t'use strict';\\r\\n\\r\\n\\t\\t\\tif ( target === undefined || target === null ) {\\r\\n\\r\\n\\t\\t\\t\\tthrow new TypeError( 'Cannot convert undefined or null to object' );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar output = Object( target );\\r\\n\\r\\n\\t\\t\\tfor ( var index = 1; index < arguments.length; index ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar source = arguments[ index ];\\r\\n\\r\\n\\t\\t\\t\\tif ( source !== undefined && source !== null ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tfor ( var nextKey in source ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\toutput[ nextKey ] = source[ nextKey ];\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn output;\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t} )();\\r\\n\\r\\n}\\n\\n/*\\r\\n * A list of constants built-in for\\r\\n * the physics engine.\\r\\n */\\r\\n\\r\\nvar REVISION = '1.0.9';\\r\\n\\r\\n// BroadPhase\\r\\nvar BR_NULL = 0;\\r\\nvar BR_BRUTE_FORCE = 1;\\r\\nvar BR_SWEEP_AND_PRUNE = 2;\\r\\nvar BR_BOUNDING_VOLUME_TREE = 3;\\r\\n\\r\\n// Body type\\r\\nvar BODY_NULL = 0;\\r\\nvar BODY_DYNAMIC = 1;\\r\\nvar BODY_STATIC = 2;\\r\\nvar BODY_KINEMATIC = 3;\\r\\nvar BODY_GHOST = 4;\\r\\n\\r\\n// Shape type\\r\\nvar SHAPE_NULL = 0;\\r\\nvar SHAPE_SPHERE = 1;\\r\\nvar SHAPE_BOX = 2;\\r\\nvar SHAPE_CYLINDER = 3;\\r\\nvar SHAPE_PLANE = 4;\\r\\nvar SHAPE_PARTICLE = 5;\\r\\nvar SHAPE_TETRA = 6;\\r\\n\\r\\n// Joint type\\r\\nvar JOINT_NULL = 0;\\r\\nvar JOINT_DISTANCE = 1;\\r\\nvar JOINT_BALL_AND_SOCKET = 2;\\r\\nvar JOINT_HINGE = 3;\\r\\nvar JOINT_WHEEL = 4;\\r\\nvar JOINT_SLIDER = 5;\\r\\nvar JOINT_PRISMATIC = 6;\\r\\n\\r\\n// AABB aproximation\\r\\nvar AABB_PROX = 0.005;\\n\\nvar _Math = {\\r\\n\\r\\n    sqrt   : Math.sqrt,\\r\\n    abs    : Math.abs,\\r\\n    floor  : Math.floor,\\r\\n    cos    : Math.cos,\\r\\n    sin    : Math.sin,\\r\\n    acos   : Math.acos,\\r\\n    asin   : Math.asin,\\r\\n    atan2  : Math.atan2,\\r\\n    round  : Math.round,\\r\\n    pow    : Math.pow,\\r\\n    max    : Math.max,\\r\\n    min    : Math.min,\\r\\n    random : Math.random,\\r\\n\\r\\n    degtorad : 0.0174532925199432957,\\r\\n    radtodeg : 57.295779513082320876,\\r\\n    PI       : 3.141592653589793,\\r\\n    TwoPI    : 6.283185307179586,\\r\\n    PI90     : 1.570796326794896,\\r\\n    PI270    : 4.712388980384689,\\r\\n\\r\\n    INF      : Infinity,\\r\\n    EPZ      : 0.00001,\\r\\n    EPZ2      : 0.000001,\\r\\n\\r\\n    lerp: function ( x, y, t ) { \\r\\n\\r\\n        return ( 1 - t ) * x + t * y; \\r\\n\\r\\n    },\\r\\n\\r\\n    randInt: function ( low, high ) { \\r\\n\\r\\n        return low + _Math.floor( _Math.random() * ( high - low + 1 ) ); \\r\\n\\r\\n    },\\r\\n\\r\\n    rand: function ( low, high ) { \\r\\n\\r\\n        return low + _Math.random() * ( high - low ); \\r\\n\\r\\n    },\\r\\n    \\r\\n    generateUUID: function () {\\r\\n\\r\\n        // http://www.broofa.com/Tools/Math.uuid.htm\\r\\n\\r\\n        var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split( '' );\\r\\n        var uuid = new Array( 36 );\\r\\n        var rnd = 0, r;\\r\\n\\r\\n        return function generateUUID() {\\r\\n\\r\\n            for ( var i = 0; i < 36; i ++ ) {\\r\\n\\r\\n                if ( i === 8 || i === 13 || i === 18 || i === 23 ) {\\r\\n\\r\\n                    uuid[ i ] = '-';\\r\\n\\r\\n                } else if ( i === 14 ) {\\r\\n\\r\\n                    uuid[ i ] = '4';\\r\\n\\r\\n                } else {\\r\\n\\r\\n                    if ( rnd <= 0x02 ) rnd = 0x2000000 + ( Math.random() * 0x1000000 ) | 0;\\r\\n                    r = rnd & 0xf;\\r\\n                    rnd = rnd >> 4;\\r\\n                    uuid[ i ] = chars[ ( i === 19 ) ? ( r & 0x3 ) | 0x8 : r ];\\r\\n\\r\\n                }\\r\\n\\r\\n            }\\r\\n\\r\\n            return uuid.join( '' );\\r\\n\\r\\n        };\\r\\n\\r\\n    }(),\\r\\n\\r\\n    int: function( x ) { \\r\\n\\r\\n        return _Math.floor(x); \\r\\n\\r\\n    },\\r\\n\\r\\n    fix: function( x, n ) { \\r\\n\\r\\n        return x.toFixed(n || 3, 10); \\r\\n\\r\\n    },\\r\\n\\r\\n    clamp: function ( value, min, max ) { \\r\\n\\r\\n        return _Math.max( min, _Math.min( max, value ) ); \\r\\n\\r\\n    },\\r\\n    \\r\\n    //clamp: function ( x, a, b ) { return ( x < a ) ? a : ( ( x > b ) ? b : x ); },\\r\\n\\r\\n    \\r\\n\\r\\n    distance: function( p1, p2 ){\\r\\n\\r\\n        var xd = p2[0]-p1[0];\\r\\n        var yd = p2[1]-p1[1];\\r\\n        var zd = p2[2]-p1[2];\\r\\n        return _Math.sqrt(xd*xd + yd*yd + zd*zd);\\r\\n\\r\\n    },\\r\\n\\r\\n    /*unwrapDegrees: function ( r ) {\\r\\n\\r\\n        r = r % 360;\\r\\n        if (r > 180) r -= 360;\\r\\n        if (r < -180) r += 360;\\r\\n        return r;\\r\\n\\r\\n    },\\r\\n\\r\\n    unwrapRadian: function( r ){\\r\\n\\r\\n        r = r % _Math.TwoPI;\\r\\n        if (r > _Math.PI) r -= _Math.TwoPI;\\r\\n        if (r < -_Math.PI) r += _Math.TwoPI;\\r\\n        return r;\\r\\n\\r\\n    },*/\\r\\n\\r\\n    acosClamp: function ( cos ) {\\r\\n\\r\\n        if(cos>1)return 0;\\r\\n        else if(cos<-1)return _Math.PI;\\r\\n        else return _Math.acos(cos);\\r\\n\\r\\n    },\\r\\n\\r\\n    distanceVector: function( v1, v2 ){\\r\\n\\r\\n        var xd = v1.x - v2.x;\\r\\n        var yd = v1.y - v2.y;\\r\\n        var zd = v1.z - v2.z;\\r\\n        return xd * xd + yd * yd + zd * zd;\\r\\n\\r\\n    },\\r\\n\\r\\n    dotVectors: function ( a, b ) {\\r\\n\\r\\n        return a.x * b.x + a.y * b.y + a.z * b.z;\\r\\n\\r\\n    },\\r\\n\\r\\n};\\n\\nfunction printError( clazz, msg ){\\r\\n    console.error(\\\"[OIMO] \\\" + clazz + \\\": \\\" + msg);\\r\\n}\\r\\n\\r\\n// A performance evaluator\\r\\n\\r\\nfunction InfoDisplay(world){\\r\\n\\r\\n    this.parent = world;\\r\\n\\r\\n    this.infos = new Float32Array( 13 );\\r\\n    this.f = [0,0,0];\\r\\n\\r\\n    this.times = [0,0,0,0];\\r\\n\\r\\n    this.broadPhase = this.parent.broadPhaseType;\\r\\n\\r\\n    this.version = REVISION;\\r\\n\\r\\n    this.fps = 0;\\r\\n\\r\\n    this.tt = 0;\\r\\n\\r\\n    this.broadPhaseTime = 0;\\r\\n    this.narrowPhaseTime = 0;\\r\\n    this.solvingTime = 0;\\r\\n    this.totalTime = 0;\\r\\n    this.updateTime = 0;\\r\\n\\r\\n    this.MaxBroadPhaseTime = 0;\\r\\n    this.MaxNarrowPhaseTime = 0;\\r\\n    this.MaxSolvingTime = 0;\\r\\n    this.MaxTotalTime = 0;\\r\\n    this.MaxUpdateTime = 0;\\r\\n}\\r\\n\\r\\nObject.assign( InfoDisplay.prototype, {\\r\\n\\r\\n    setTime: function(n){\\r\\n        this.times[ n || 0 ] = performance.now();\\r\\n    },\\r\\n\\r\\n    resetMax: function(){\\r\\n\\r\\n        this.MaxBroadPhaseTime = 0;\\r\\n        this.MaxNarrowPhaseTime = 0;\\r\\n        this.MaxSolvingTime = 0;\\r\\n        this.MaxTotalTime = 0;\\r\\n        this.MaxUpdateTime = 0;\\r\\n\\r\\n    },\\r\\n\\r\\n    calcBroadPhase: function () {\\r\\n\\r\\n        this.setTime( 2 );\\r\\n        this.broadPhaseTime = this.times[ 2 ] - this.times[ 1 ];\\r\\n\\r\\n    },\\r\\n\\r\\n    calcNarrowPhase: function () {\\r\\n\\r\\n        this.setTime( 3 );\\r\\n        this.narrowPhaseTime = this.times[ 3 ] - this.times[ 2 ];\\r\\n\\r\\n    },\\r\\n\\r\\n    calcEnd: function () {\\r\\n\\r\\n        this.setTime( 2 );\\r\\n        this.solvingTime = this.times[ 2 ] - this.times[ 1 ];\\r\\n        this.totalTime = this.times[ 2 ] - this.times[ 0 ];\\r\\n        this.updateTime = this.totalTime - ( this.broadPhaseTime + this.narrowPhaseTime + this.solvingTime );\\r\\n\\r\\n        if( this.tt === 100 ) this.resetMax();\\r\\n\\r\\n        if( this.tt > 100 ){\\r\\n            if( this.broadPhaseTime > this.MaxBroadPhaseTime ) this.MaxBroadPhaseTime = this.broadPhaseTime;\\r\\n            if( this.narrowPhaseTime > this.MaxNarrowPhaseTime ) this.MaxNarrowPhaseTime = this.narrowPhaseTime;\\r\\n            if( this.solvingTime > this.MaxSolvingTime ) this.MaxSolvingTime = this.solvingTime;\\r\\n            if( this.totalTime > this.MaxTotalTime ) this.MaxTotalTime = this.totalTime;\\r\\n            if( this.updateTime > this.MaxUpdateTime ) this.MaxUpdateTime = this.updateTime;\\r\\n        }\\r\\n\\r\\n\\r\\n        this.upfps();\\r\\n\\r\\n        this.tt ++;\\r\\n        if(this.tt > 500) this.tt = 0;\\r\\n\\r\\n    },\\r\\n\\r\\n\\r\\n    upfps : function(){\\r\\n        this.f[1] = Date.now();\\r\\n        if (this.f[1]-1000>this.f[0]){ this.f[0] = this.f[1]; this.fps = this.f[2]; this.f[2] = 0; } this.f[2]++;\\r\\n    },\\r\\n\\r\\n    show: function(){\\r\\n        var info =[\\r\\n            \\\"Oimo.js \\\"+this.version+\\\"<br>\\\",\\r\\n            this.broadPhase + \\\"<br><br>\\\",\\r\\n            \\\"FPS: \\\" + this.fps +\\\" fps<br><br>\\\",\\r\\n            \\\"rigidbody \\\"+this.parent.numRigidBodies+\\\"<br>\\\",\\r\\n            \\\"contact &nbsp;&nbsp;\\\"+this.parent.numContacts+\\\"<br>\\\",\\r\\n            \\\"ct-point &nbsp;\\\"+this.parent.numContactPoints+\\\"<br>\\\",\\r\\n            \\\"paircheck \\\"+this.parent.broadPhase.numPairChecks+\\\"<br>\\\",\\r\\n            \\\"island &nbsp;&nbsp;&nbsp;\\\"+this.parent.numIslands +\\\"<br><br>\\\",\\r\\n            \\\"Time in milliseconds<br><br>\\\",\\r\\n            \\\"broadphase &nbsp;\\\"+ _Math.fix(this.broadPhaseTime) + \\\" | \\\" + _Math.fix(this.MaxBroadPhaseTime) +\\\"<br>\\\",\\r\\n            \\\"narrowphase \\\"+ _Math.fix(this.narrowPhaseTime)  + \\\" | \\\" + _Math.fix(this.MaxNarrowPhaseTime) + \\\"<br>\\\",\\r\\n            \\\"solving &nbsp;&nbsp;&nbsp;&nbsp;\\\"+ _Math.fix(this.solvingTime)+ \\\" | \\\" + _Math.fix(this.MaxSolvingTime) + \\\"<br>\\\",\\r\\n            \\\"total &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\\"+ _Math.fix(this.totalTime) + \\\" | \\\" + _Math.fix(this.MaxTotalTime) + \\\"<br>\\\",\\r\\n            \\\"updating &nbsp;&nbsp;&nbsp;\\\"+ _Math.fix(this.updateTime) + \\\" | \\\" + _Math.fix(this.MaxUpdateTime) + \\\"<br>\\\"\\r\\n        ].join(\\\"\\\\n\\\");\\r\\n        return info;\\r\\n    },\\r\\n\\r\\n    toArray: function(){\\r\\n        this.infos[0] = this.parent.broadPhase.types;\\r\\n        this.infos[1] = this.parent.numRigidBodies;\\r\\n        this.infos[2] = this.parent.numContacts;\\r\\n        this.infos[3] = this.parent.broadPhase.numPairChecks;\\r\\n        this.infos[4] = this.parent.numContactPoints;\\r\\n        this.infos[5] = this.parent.numIslands;\\r\\n        this.infos[6] = this.broadPhaseTime;\\r\\n        this.infos[7] = this.narrowPhaseTime;\\r\\n        this.infos[8] = this.solvingTime;\\r\\n        this.infos[9] = this.updateTime;\\r\\n        this.infos[10] = this.totalTime;\\r\\n        this.infos[11] = this.fps;\\r\\n        return this.infos;\\r\\n    }\\r\\n    \\r\\n});\\n\\nfunction Vec3 ( x, y, z ) {\\n\\n    this.x = x || 0;\\n    this.y = y || 0;\\n    this.z = z || 0;\\n    \\n}\\n\\nObject.assign( Vec3.prototype, {\\n\\n    Vec3: true,\\n\\n    set: function( x, y, z ){\\n\\n        this.x = x;\\n        this.y = y;\\n        this.z = z;\\n        return this;\\n\\n    },\\n\\n    add: function ( a, b ) {\\n\\n        if ( b !== undefined ) return this.addVectors( a, b );\\n\\n        this.x += a.x;\\n        this.y += a.y;\\n        this.z += a.z;\\n        return this;\\n\\n    },\\n\\n    addVectors: function ( a, b ) {\\n\\n        this.x = a.x + b.x;\\n        this.y = a.y + b.y;\\n        this.z = a.z + b.z;\\n        return this;\\n\\n    },\\n\\n    addEqual: function ( v ) {\\n\\n        this.x += v.x;\\n        this.y += v.y;\\n        this.z += v.z;\\n        return this;\\n\\n    },\\n\\n    sub: function ( a, b ) {\\n\\n        if ( b !== undefined ) return this.subVectors( a, b );\\n\\n        this.x -= a.x;\\n        this.y -= a.y;\\n        this.z -= a.z;\\n        return this;\\n\\n    },\\n\\n    subVectors: function ( a, b ) {\\n\\n        this.x = a.x - b.x;\\n        this.y = a.y - b.y;\\n        this.z = a.z - b.z;\\n        return this;\\n\\n    },\\n\\n    subEqual: function ( v ) {\\n\\n        this.x -= v.x;\\n        this.y -= v.y;\\n        this.z -= v.z;\\n        return this;\\n\\n    },\\n\\n    scale: function ( v, s ) {\\n\\n        this.x = v.x * s;\\n        this.y = v.y * s;\\n        this.z = v.z * s;\\n        return this;\\n\\n    },\\n\\n    scaleEqual: function( s ){\\n\\n        this.x *= s;\\n        this.y *= s;\\n        this.z *= s;\\n        return this;\\n\\n    },\\n\\n    multiply: function( v ){\\n\\n        this.x *= v.x;\\n        this.y *= v.y;\\n        this.z *= v.z;\\n        return this;\\n\\n    },\\n\\n    multiplyScalar: function( s ){\\n\\n        this.x *= s;\\n        this.y *= s;\\n        this.z *= s;\\n        return this;\\n\\n    },\\n\\n    /*scaleV: function( v ){\\n\\n        this.x *= v.x;\\n        this.y *= v.y;\\n        this.z *= v.z;\\n        return this;\\n\\n    },\\n\\n    scaleVectorEqual: function( v ){\\n\\n        this.x *= v.x;\\n        this.y *= v.y;\\n        this.z *= v.z;\\n        return this;\\n\\n    },*/\\n\\n    addScaledVector: function ( v, s ) {\\n\\n        this.x += v.x * s;\\n        this.y += v.y * s;\\n        this.z += v.z * s;\\n\\n        return this;\\n\\n    },\\n\\n    subScaledVector: function ( v, s ) {\\n\\n        this.x -= v.x * s;\\n        this.y -= v.y * s;\\n        this.z -= v.z * s;\\n\\n        return this;\\n\\n    },\\n\\n    /*addTime: function ( v, t ) {\\n\\n        this.x += v.x * t;\\n        this.y += v.y * t;\\n        this.z += v.z * t;\\n        return this;\\n\\n    },\\n    \\n    addScale: function ( v, s ) {\\n\\n        this.x += v.x * s;\\n        this.y += v.y * s;\\n        this.z += v.z * s;\\n        return this;\\n\\n    },\\n\\n    subScale: function ( v, s ) {\\n\\n        this.x -= v.x * s;\\n        this.y -= v.y * s;\\n        this.z -= v.z * s;\\n        return this;\\n\\n    },*/\\n   \\n    cross: function( a, b ) {\\n\\n        if ( b !== undefined ) return this.crossVectors( a, b );\\n\\n        var x = this.x, y = this.y, z = this.z;\\n\\n        this.x = y * a.z - z * a.y;\\n        this.y = z * a.x - x * a.z;\\n        this.z = x * a.y - y * a.x;\\n\\n        return this;\\n\\n    },\\n\\n    crossVectors: function ( a, b ) {\\n\\n        var ax = a.x, ay = a.y, az = a.z;\\n        var bx = b.x, by = b.y, bz = b.z;\\n\\n        this.x = ay * bz - az * by;\\n        this.y = az * bx - ax * bz;\\n        this.z = ax * by - ay * bx;\\n\\n        return this;\\n\\n    },\\n\\n    tangent: function ( a ) {\\n\\n        var ax = a.x, ay = a.y, az = a.z;\\n\\n        this.x = ay * ax - az * az;\\n        this.y = - az * ay - ax * ax;\\n        this.z = ax * az + ay * ay;\\n\\n        return this;\\n\\n    },\\n\\n    \\n\\n    \\n\\n    invert: function ( v ) {\\n\\n        this.x=-v.x;\\n        this.y=-v.y;\\n        this.z=-v.z;\\n        return this;\\n\\n    },\\n\\n    negate: function () {\\n\\n        this.x = - this.x;\\n        this.y = - this.y;\\n        this.z = - this.z;\\n\\n        return this;\\n\\n    },\\n\\n    dot: function ( v ) {\\n\\n        return this.x * v.x + this.y * v.y + this.z * v.z;\\n\\n    },\\n\\n    addition: function () {\\n\\n        return this.x + this.y + this.z;\\n\\n    },\\n\\n    lengthSq: function () {\\n\\n        return this.x * this.x + this.y * this.y + this.z * this.z;\\n\\n    },\\n\\n    length: function () {\\n\\n        return _Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\\n\\n    },\\n\\n    copy: function( v ){\\n\\n        this.x = v.x;\\n        this.y = v.y;\\n        this.z = v.z;\\n        return this;\\n\\n    },\\n\\n    /*mul: function( b, a, m ){\\n\\n        return this.mulMat( m, a ).add( b );\\n\\n    },\\n\\n    mulMat: function( m, a ){\\n\\n        var e = m.elements;\\n        var x = a.x, y = a.y, z = a.z;\\n\\n        this.x = e[ 0 ] * x + e[ 1 ] * y + e[ 2 ] * z;\\n        this.y = e[ 3 ] * x + e[ 4 ] * y + e[ 5 ] * z;\\n        this.z = e[ 6 ] * x + e[ 7 ] * y + e[ 8 ] * z;\\n        return this;\\n\\n    },*/\\n\\n    applyMatrix3: function ( m, transpose ) {\\n\\n        //if( transpose ) m = m.clone().transpose();\\n        var x = this.x, y = this.y, z = this.z;\\n        var e = m.elements;\\n\\n        if( transpose ){\\n            \\n            this.x = e[ 0 ] * x + e[ 1 ] * y + e[ 2 ] * z;\\n            this.y = e[ 3 ] * x + e[ 4 ] * y + e[ 5 ] * z;\\n            this.z = e[ 6 ] * x + e[ 7 ] * y + e[ 8 ] * z;\\n\\n        } else {\\n      \\n            this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\\n            this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\\n            this.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\\n        }\\n\\n        return this;\\n\\n    },\\n\\n    applyQuaternion: function ( q ) {\\n\\n        var x = this.x;\\n        var y = this.y;\\n        var z = this.z;\\n\\n        var qx = q.x;\\n        var qy = q.y;\\n        var qz = q.z;\\n        var qw = q.w;\\n\\n        // calculate quat * vector\\n\\n        var ix =  qw * x + qy * z - qz * y;\\n        var iy =  qw * y + qz * x - qx * z;\\n        var iz =  qw * z + qx * y - qy * x;\\n        var iw = - qx * x - qy * y - qz * z;\\n\\n        // calculate result * inverse quat\\n\\n        this.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\\n        this.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\\n        this.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\\n\\n        return this;\\n\\n    },\\n\\n    testZero: function () {\\n\\n        if(this.x!==0 || this.y!==0 || this.z!==0) return true;\\n        else return false;\\n\\n    },\\n\\n    testDiff: function( v ){\\n\\n        return this.equals( v ) ? false : true;\\n\\n    },\\n\\n    equals: function ( v ) {\\n\\n        return v.x === this.x && v.y === this.y && v.z === this.z;\\n\\n    },\\n\\n    clone: function () {\\n\\n        return new this.constructor( this.x, this.y, this.z );\\n\\n    },\\n\\n    toString: function(){\\n\\n        return\\\"Vec3[\\\"+this.x.toFixed(4)+\\\", \\\"+this.y.toFixed(4)+\\\", \\\"+this.z.toFixed(4)+\\\"]\\\";\\n        \\n    },\\n\\n    multiplyScalar: function ( scalar ) {\\n\\n        if ( isFinite( scalar ) ) {\\n            this.x *= scalar;\\n            this.y *= scalar;\\n            this.z *= scalar;\\n        } else {\\n            this.x = 0;\\n            this.y = 0;\\n            this.z = 0;\\n        }\\n\\n        return this;\\n\\n    },\\n\\n    divideScalar: function ( scalar ) {\\n\\n        return this.multiplyScalar( 1 / scalar );\\n\\n    },\\n\\n    normalize: function () {\\n\\n        return this.divideScalar( this.length() );\\n\\n    },\\n\\n    toArray: function ( array, offset ) {\\n\\n        if ( offset === undefined ) offset = 0;\\n\\n        array[ offset ] = this.x;\\n        array[ offset + 1 ] = this.y;\\n        array[ offset + 2 ] = this.z;\\n\\n    },\\n\\n    fromArray: function( array, offset ){\\n\\n        if ( offset === undefined ) offset = 0;\\n        \\n        this.x = array[ offset ];\\n        this.y = array[ offset + 1 ];\\n        this.z = array[ offset + 2 ];\\n        return this;\\n\\n    },\\n\\n\\n} );\\n\\nfunction Quat ( x, y, z, w ){\\n\\n    this.x = x || 0;\\n    this.y = y || 0;\\n    this.z = z || 0;\\n    this.w = ( w !== undefined ) ? w : 1;\\n\\n}\\n\\nObject.assign( Quat.prototype, {\\n\\n    Quat: true,\\n\\n    set: function ( x, y, z, w ) {\\n\\n        \\n        this.x = x;\\n        this.y = y;\\n        this.z = z;\\n        this.w = w;\\n\\n        return this;\\n\\n    },\\n\\n    addTime: function( v, t ){\\n\\n        var ax = v.x, ay = v.y, az = v.z;\\n        var qw = this.w, qx = this.x, qy = this.y, qz = this.z;\\n        t *= 0.5;    \\n        this.x += t * (  ax*qw + ay*qz - az*qy );\\n        this.y += t * (  ay*qw + az*qx - ax*qz );\\n        this.z += t * (  az*qw + ax*qy - ay*qx );\\n        this.w += t * ( -ax*qx - ay*qy - az*qz );\\n        this.normalize();\\n        return this;\\n\\n    },\\n\\n    /*mul: function( q1, q2 ){\\n\\n        var ax = q1.x, ay = q1.y, az = q1.z, as = q1.w,\\n        bx = q2.x, by = q2.y, bz = q2.z, bs = q2.w;\\n        this.x = ax * bs + as * bx + ay * bz - az * by;\\n        this.y = ay * bs + as * by + az * bx - ax * bz;\\n        this.z = az * bs + as * bz + ax * by - ay * bx;\\n        this.w = as * bs - ax * bx - ay * by - az * bz;\\n        return this;\\n\\n    },*/\\n\\n    multiply: function ( q, p ) {\\n\\n        if ( p !== undefined ) return this.multiplyQuaternions( q, p );\\n        return this.multiplyQuaternions( this, q );\\n\\n    },\\n\\n    multiplyQuaternions: function ( a, b ) {\\n\\n        var qax = a.x, qay = a.y, qaz = a.z, qaw = a.w;\\n        var qbx = b.x, qby = b.y, qbz = b.z, qbw = b.w;\\n\\n        this.x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\\n        this.y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\\n        this.z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\\n        this.w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\\n        return this;\\n\\n    },\\n\\n    setFromUnitVectors: function( v1, v2 ) {\\n\\n        var vx = new Vec3();\\n        var r = v1.dot( v2 ) + 1;\\n\\n        if ( r < _Math.EPS2 ) {\\n\\n            r = 0;\\n            if ( _Math.abs( v1.x ) > _Math.abs( v1.z ) ) vx.set( - v1.y, v1.x, 0 );\\n            else vx.set( 0, - v1.z, v1.y );\\n\\n        } else {\\n\\n            vx.crossVectors( v1, v2 );\\n\\n        }\\n\\n        this._x = vx.x;\\n        this._y = vx.y;\\n        this._z = vx.z;\\n        this._w = r;\\n\\n        return this.normalize();\\n\\n    },\\n\\n    arc: function( v1, v2 ){\\n\\n        var x1 = v1.x;\\n        var y1 = v1.y;\\n        var z1 = v1.z;\\n        var x2 = v2.x;\\n        var y2 = v2.y;\\n        var z2 = v2.z;\\n        var d = x1*x2 + y1*y2 + z1*z2;\\n        if( d==-1 ){\\n            x2 = y1*x1 - z1*z1;\\n            y2 = -z1*y1 - x1*x1;\\n            z2 = x1*z1 + y1*y1;\\n            d = 1 / _Math.sqrt( x2*x2 + y2*y2 + z2*z2 );\\n            this.w = 0;\\n            this.x = x2*d;\\n            this.y = y2*d;\\n            this.z = z2*d;\\n            return this;\\n        }\\n        var cx = y1*z2 - z1*y2;\\n        var cy = z1*x2 - x1*z2;\\n        var cz = x1*y2 - y1*x2;\\n        this.w = _Math.sqrt( ( 1 + d) * 0.5 );\\n        d = 0.5 / this.w;\\n        this.x = cx * d;\\n        this.y = cy * d;\\n        this.z = cz * d;\\n        return this;\\n\\n    },\\n\\n    normalize: function(){\\n\\n        var l = this.length();\\n        if ( l === 0 ) {\\n            this.set( 0, 0, 0, 1 );\\n        } else {\\n            l = 1 / l;\\n            this.x = this.x * l;\\n            this.y = this.y * l;\\n            this.z = this.z * l;\\n            this.w = this.w * l;\\n        }\\n        return this;\\n\\n    },\\n\\n    inverse: function () {\\n\\n        return this.conjugate().normalize();\\n\\n    },\\n\\n    invert: function ( q ) {\\n\\n        this.x = q.x;\\n        this.y = q.y;\\n        this.z = q.z;\\n        this.w = q.w;\\n        this.conjugate().normalize();\\n        return this;\\n\\n    },\\n\\n    conjugate: function () {\\n\\n        this.x *= - 1;\\n        this.y *= - 1;\\n        this.z *= - 1;\\n        return this;\\n\\n    },\\n\\n    length: function(){\\n\\n        return _Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w  );\\n\\n    },\\n\\n    lengthSq: function () {\\n\\n        return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\\n\\n    },\\n    \\n    copy: function( q ){\\n        \\n        this.x = q.x;\\n        this.y = q.y;\\n        this.z = q.z;\\n        this.w = q.w;\\n        return this;\\n\\n    },\\n\\n    clone: function( q ){\\n\\n        return new Quat( this.x, this.y, this.z, this.w );\\n\\n    },\\n\\n    testDiff: function ( q ) {\\n\\n        return this.equals( q ) ? false : true;\\n\\n    },\\n\\n    equals: function ( q ) {\\n\\n        return this.x === q.x && this.y === q.y && this.z === q.z && this.w === q.w;\\n\\n    },\\n\\n    toString: function(){\\n\\n        return\\\"Quat[\\\"+this.x.toFixed(4)+\\\", (\\\"+this.y.toFixed(4)+\\\", \\\"+this.z.toFixed(4)+\\\", \\\"+this.w.toFixed(4)+\\\")]\\\";\\n        \\n    },\\n\\n    setFromEuler: function ( x, y, z ){\\n\\n        var c1 = Math.cos( x * 0.5 );\\n        var c2 = Math.cos( y * 0.5 );\\n        var c3 = Math.cos( z * 0.5 );\\n        var s1 = Math.sin( x * 0.5 );\\n        var s2 = Math.sin( y * 0.5 );\\n        var s3 = Math.sin( z * 0.5 );\\n\\n        // XYZ\\n        this.x = s1 * c2 * c3 + c1 * s2 * s3;\\n        this.y = c1 * s2 * c3 - s1 * c2 * s3;\\n        this.z = c1 * c2 * s3 + s1 * s2 * c3;\\n        this.w = c1 * c2 * c3 - s1 * s2 * s3;\\n\\n        return this;\\n\\n    },\\n    \\n    setFromAxis: function ( axis, rad ) {\\n\\n        axis.normalize();\\n        rad = rad * 0.5;\\n        var s = _Math.sin( rad );\\n        this.x = s * axis.x;\\n        this.y = s * axis.y;\\n        this.z = s * axis.z;\\n        this.w = _Math.cos( rad );\\n        return this;\\n\\n    },\\n\\n    setFromMat33: function ( m ) {\\n\\n        var trace = m[0] + m[4] + m[8];\\n        var s;\\n\\n        if ( trace > 0 ) {\\n\\n            s = _Math.sqrt( trace + 1.0 );\\n            this.w = 0.5 / s;\\n            s = 0.5 / s;\\n            this.x = ( m[5] - m[7] ) * s;\\n            this.y = ( m[6] - m[2] ) * s;\\n            this.z = ( m[1] - m[3] ) * s;\\n\\n        } else {\\n\\n            var out = [];\\n            var i = 0;\\n            if ( m[4] > m[0] ) i = 1;\\n            if ( m[8] > m[i*3+i] ) i = 2;\\n\\n            var j = (i+1)%3;\\n            var k = (i+2)%3;\\n            \\n            s = _Math.sqrt( m[i*3+i] - m[j*3+j] - m[k*3+k] + 1.0 );\\n            out[i] = 0.5 * fRoot;\\n            s = 0.5 / fRoot;\\n            this.w = ( m[j*3+k] - m[k*3+j] ) * s;\\n            out[j] = ( m[j*3+i] + m[i*3+j] ) * s;\\n            out[k] = ( m[k*3+i] + m[i*3+k] ) * s;\\n\\n            this.x = out[1];\\n            this.y = out[2];\\n            this.z = out[3];\\n\\n        }\\n\\n        return this;\\n\\n    },\\n\\n    toArray: function ( array, offset ) {\\n\\n        offset = offset || 0;\\n\\n        array[ offset ] = this.x;\\n        array[ offset + 1 ] = this.y;\\n        array[ offset + 2 ] = this.z;\\n        array[ offset + 3 ] = this.w;\\n\\n    },\\n\\n    fromArray: function( array, offset ){\\n\\n        offset = offset || 0;\\n        this.set( array[ offset ], array[ offset + 1 ], array[ offset + 2 ], array[ offset + 3 ] );\\n        return this;\\n\\n    }\\n\\n});\\n\\nfunction Mat33 ( e00, e01, e02, e10, e11, e12, e20, e21, e22 ){\\r\\n\\r\\n    this.elements = [\\r\\n        1, 0, 0,\\r\\n        0, 1, 0,\\r\\n        0, 0, 1\\r\\n    ];\\r\\n\\r\\n    if ( arguments.length > 0 ) {\\r\\n\\r\\n        console.error( 'OIMO.Mat33: the constructor no longer reads arguments. use .set() instead.' );\\r\\n\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\nObject.assign( Mat33.prototype, {\\r\\n\\r\\n    Mat33: true,\\r\\n\\r\\n    set: function ( e00, e01, e02, e10, e11, e12, e20, e21, e22 ){\\r\\n\\r\\n        var te = this.elements;\\r\\n        te[0] = e00; te[1] = e01; te[2] = e02;\\r\\n        te[3] = e10; te[4] = e11; te[5] = e12;\\r\\n        te[6] = e20; te[7] = e21; te[8] = e22;\\r\\n        return this;\\r\\n\\r\\n    },\\r\\n    \\r\\n    add: function ( a, b ) {\\r\\n\\r\\n        if( b !== undefined ) return this.addMatrixs( a, b );\\r\\n\\r\\n        var e = this.elements, te = a.elements;\\r\\n        e[0] += te[0]; e[1] += te[1]; e[2] += te[2];\\r\\n        e[3] += te[3]; e[4] += te[4]; e[5] += te[5];\\r\\n        e[6] += te[6]; e[7] += te[7]; e[8] += te[8];\\r\\n        return this;\\r\\n\\r\\n    },\\r\\n\\r\\n    addMatrixs: function ( a, b ) {\\r\\n\\r\\n        var te = this.elements, tem1 = a.elements, tem2 = b.elements;\\r\\n        te[0] = tem1[0] + tem2[0]; te[1] = tem1[1] + tem2[1]; te[2] = tem1[2] + tem2[2];\\r\\n        te[3] = tem1[3] + tem2[3]; te[4] = tem1[4] + tem2[4]; te[5] = tem1[5] + tem2[5];\\r\\n        te[6] = tem1[6] + tem2[6]; te[7] = tem1[7] + tem2[7]; te[8] = tem1[8] + tem2[8];\\r\\n        return this;\\r\\n\\r\\n    },\\r\\n\\r\\n    addEqual: function( m ){\\r\\n\\r\\n        var te = this.elements, tem = m.elements;\\r\\n        te[0] += tem[0]; te[1] += tem[1]; te[2] += tem[2];\\r\\n        te[3] += tem[3]; te[4] += tem[4]; te[5] += tem[5];\\r\\n        te[6] += tem[6]; te[7] += tem[7]; te[8] += tem[8];\\r\\n        return this;\\r\\n\\r\\n    },\\r\\n\\r\\n    sub: function ( a, b ) {\\r\\n\\r\\n        if( b !== undefined ) return this.subMatrixs( a, b );\\r\\n\\r\\n        var e = this.elements, te = a.elements;\\r\\n        e[0] -= te[0]; e[1] -= te[1]; e[2] -= te[2];\\r\\n        e[3] -= te[3]; e[4] -= te[4]; e[5] -= te[5];\\r\\n        e[6] -= te[6]; e[7] -= te[7]; e[8] -= te[8];\\r\\n        return this;\\r\\n\\r\\n    },\\r\\n\\r\\n    subMatrixs: function ( a, b ) {\\r\\n\\r\\n        var te = this.elements, tem1 = a.elements, tem2 = b.elements;\\r\\n        te[0] = tem1[0] - tem2[0]; te[1] = tem1[1] - tem2[1]; te[2] = tem1[2] - tem2[2];\\r\\n        te[3] = tem1[3] - tem2[3]; te[4] = tem1[4] - tem2[4]; te[5] = tem1[5] - tem2[5];\\r\\n        te[6] = tem1[6] - tem2[6]; te[7] = tem1[7] - tem2[7]; te[8] = tem1[8] - tem2[8];\\r\\n        return this;\\r\\n\\r\\n    },\\r\\n\\r\\n    subEqual: function ( m ) {\\r\\n\\r\\n        var te = this.elements, tem = m.elements;\\r\\n        te[0] -= tem[0]; te[1] -= tem[1]; te[2] -= tem[2];\\r\\n        te[3] -= tem[3]; te[4] -= tem[4]; te[5] -= tem[5];\\r\\n        te[6] -= tem[6]; te[7] -= tem[7]; te[8] -= tem[8];\\r\\n        return this;\\r\\n\\r\\n    },\\r\\n\\r\\n    scale: function ( m, s ) {\\r\\n\\r\\n        var te = this.elements, tm = m.elements;\\r\\n        te[0] = tm[0] * s; te[1] = tm[1] * s; te[2] = tm[2] * s;\\r\\n        te[3] = tm[3] * s; te[4] = tm[4] * s; te[5] = tm[5] * s;\\r\\n        te[6] = tm[6] * s; te[7] = tm[7] * s; te[8] = tm[8] * s;\\r\\n        return this;\\r\\n\\r\\n    },\\r\\n\\r\\n    scaleEqual: function ( s ){// multiplyScalar\\r\\n\\r\\n        var te = this.elements;\\r\\n        te[0] *= s; te[1] *= s; te[2] *= s;\\r\\n        te[3] *= s; te[4] *= s; te[5] *= s;\\r\\n        te[6] *= s; te[7] *= s; te[8] *= s;\\r\\n        return this;\\r\\n\\r\\n    },\\r\\n\\r\\n    multiplyMatrices: function ( m1, m2, transpose ) {\\r\\n\\r\\n        if( transpose ) m2 = m2.clone().transpose();\\r\\n\\r\\n        var te = this.elements;\\r\\n        var tm1 = m1.elements;\\r\\n        var tm2 = m2.elements;\\r\\n\\r\\n        var a0 = tm1[0], a3 = tm1[3], a6 = tm1[6];\\r\\n        var a1 = tm1[1], a4 = tm1[4], a7 = tm1[7];\\r\\n        var a2 = tm1[2], a5 = tm1[5], a8 = tm1[8];\\r\\n\\r\\n        var b0 = tm2[0], b3 = tm2[3], b6 = tm2[6];\\r\\n        var b1 = tm2[1], b4 = tm2[4], b7 = tm2[7];\\r\\n        var b2 = tm2[2], b5 = tm2[5], b8 = tm2[8];\\r\\n\\r\\n        te[0] = a0*b0 + a1*b3 + a2*b6;\\r\\n        te[1] = a0*b1 + a1*b4 + a2*b7;\\r\\n        te[2] = a0*b2 + a1*b5 + a2*b8;\\r\\n        te[3] = a3*b0 + a4*b3 + a5*b6;\\r\\n        te[4] = a3*b1 + a4*b4 + a5*b7;\\r\\n        te[5] = a3*b2 + a4*b5 + a5*b8;\\r\\n        te[6] = a6*b0 + a7*b3 + a8*b6;\\r\\n        te[7] = a6*b1 + a7*b4 + a8*b7;\\r\\n        te[8] = a6*b2 + a7*b5 + a8*b8;\\r\\n\\r\\n        return this;\\r\\n\\r\\n    },\\r\\n\\r\\n    /*mul: function ( m1, m2, transpose ) {\\r\\n\\r\\n        if( transpose ) m2 = m2.clone().transpose();\\r\\n\\r\\n        var te = this.elements;\\r\\n        var tm1 = m1.elements;\\r\\n        var tm2 = m2.elements;\\r\\n        //var tmp;\\r\\n\\r\\n        var a0 = tm1[0], a3 = tm1[3], a6 = tm1[6];\\r\\n        var a1 = tm1[1], a4 = tm1[4], a7 = tm1[7];\\r\\n        var a2 = tm1[2], a5 = tm1[5], a8 = tm1[8];\\r\\n\\r\\n        var b0 = tm2[0], b3 = tm2[3], b6 = tm2[6];\\r\\n        var b1 = tm2[1], b4 = tm2[4], b7 = tm2[7];\\r\\n        var b2 = tm2[2], b5 = tm2[5], b8 = tm2[8];\\r\\n\\r\\n        /*if( transpose ){\\r\\n\\r\\n            tmp = b1; b1 = b3; b3 = tmp;\\r\\n            tmp = b2; b2 = b6; b6 = tmp;\\r\\n            tmp = b5; b5 = b7; b7 = tmp;\\r\\n\\r\\n        }\\r\\n\\r\\n        te[0] = a0*b0 + a1*b3 + a2*b6;\\r\\n        te[1] = a0*b1 + a1*b4 + a2*b7;\\r\\n        te[2] = a0*b2 + a1*b5 + a2*b8;\\r\\n        te[3] = a3*b0 + a4*b3 + a5*b6;\\r\\n        te[4] = a3*b1 + a4*b4 + a5*b7;\\r\\n        te[5] = a3*b2 + a4*b5 + a5*b8;\\r\\n        te[6] = a6*b0 + a7*b3 + a8*b6;\\r\\n        te[7] = a6*b1 + a7*b4 + a8*b7;\\r\\n        te[8] = a6*b2 + a7*b5 + a8*b8;\\r\\n\\r\\n        return this;\\r\\n\\r\\n    },*/\\r\\n\\r\\n    transpose: function ( m ) {\\r\\n        \\r\\n        if( m !== undefined ){\\r\\n            var a = m.elements;\\r\\n            this.set( a[0], a[3], a[6], a[1], a[4], a[7], a[2], a[5], a[8] );\\r\\n            return this;\\r\\n        }\\r\\n\\r\\n        var te = this.elements;\\r\\n        var a01 = te[1], a02 = te[2], a12 = te[5];\\r\\n        te[1] = te[3];\\r\\n        te[2] = te[6];\\r\\n        te[3] = a01;\\r\\n        te[5] = te[7];\\r\\n        te[6] = a02;\\r\\n        te[7] = a12;\\r\\n        return this;\\r\\n\\r\\n    },\\r\\n\\r\\n\\r\\n\\r\\n    /*mulScale: function ( m, sx, sy, sz, Prepend ) {\\r\\n\\r\\n        var prepend = Prepend || false;\\r\\n        var te = this.elements, tm = m.elements;\\r\\n        if(prepend){\\r\\n            te[0] = sx*tm[0]; te[1] = sx*tm[1]; te[2] = sx*tm[2];\\r\\n            te[3] = sy*tm[3]; te[4] = sy*tm[4]; te[5] = sy*tm[5];\\r\\n            te[6] = sz*tm[6]; te[7] = sz*tm[7]; te[8] = sz*tm[8];\\r\\n        }else{\\r\\n            te[0] = tm[0]*sx; te[1] = tm[1]*sy; te[2] = tm[2]*sz;\\r\\n            te[3] = tm[3]*sx; te[4] = tm[4]*sy; te[5] = tm[5]*sz;\\r\\n            te[6] = tm[6]*sx; te[7] = tm[7]*sy; te[8] = tm[8]*sz;\\r\\n        }\\r\\n        return this;\\r\\n\\r\\n    },\\r\\n\\r\\n    transpose: function ( m ) {\\r\\n\\r\\n        var te = this.elements, tm = m.elements;\\r\\n        te[0] = tm[0]; te[1] = tm[3]; te[2] = tm[6];\\r\\n        te[3] = tm[1]; te[4] = tm[4]; te[5] = tm[7];\\r\\n        te[6] = tm[2]; te[7] = tm[5]; te[8] = tm[8];\\r\\n        return this;\\r\\n\\r\\n    },*/\\r\\n\\r\\n    setQuat: function ( q ) {\\r\\n\\r\\n        var te = this.elements;\\r\\n        var x = q.x, y = q.y, z = q.z, w = q.w;\\r\\n        var x2 = x + x,  y2 = y + y, z2 = z + z;\\r\\n        var xx = x * x2, xy = x * y2, xz = x * z2;\\r\\n        var yy = y * y2, yz = y * z2, zz = z * z2;\\r\\n        var wx = w * x2, wy = w * y2, wz = w * z2;\\r\\n        \\r\\n        te[0] = 1 - ( yy + zz );\\r\\n        te[1] = xy - wz;\\r\\n        te[2] = xz + wy;\\r\\n\\r\\n        te[3] = xy + wz;\\r\\n        te[4] = 1 - ( xx + zz );\\r\\n        te[5] = yz - wx;\\r\\n\\r\\n        te[6] = xz - wy;\\r\\n        te[7] = yz + wx;\\r\\n        te[8] = 1 - ( xx + yy );\\r\\n\\r\\n        return this;\\r\\n\\r\\n    },\\r\\n\\r\\n    invert: function( m ) {\\r\\n\\r\\n        var te = this.elements, tm = m.elements,\\r\\n        a00 = tm[0], a10 = tm[3], a20 = tm[6],\\r\\n        a01 = tm[1], a11 = tm[4], a21 = tm[7],\\r\\n        a02 = tm[2], a12 = tm[5], a22 = tm[8],\\r\\n        b01 = a22 * a11 - a12 * a21,\\r\\n        b11 = -a22 * a10 + a12 * a20,\\r\\n        b21 = a21 * a10 - a11 * a20,\\r\\n        det = a00 * b01 + a01 * b11 + a02 * b21;\\r\\n\\r\\n        if ( det === 0 ) {\\r\\n            console.log( \\\"can't invert matrix, determinant is 0\\\");\\r\\n            return this.identity();\\r\\n        }\\r\\n\\r\\n        det = 1.0 / det;\\r\\n        te[0] = b01 * det;\\r\\n        te[1] = (-a22 * a01 + a02 * a21) * det;\\r\\n        te[2] = (a12 * a01 - a02 * a11) * det;\\r\\n        te[3] = b11 * det;\\r\\n        te[4] = (a22 * a00 - a02 * a20) * det;\\r\\n        te[5] = (-a12 * a00 + a02 * a10) * det;\\r\\n        te[6] = b21 * det;\\r\\n        te[7] = (-a21 * a00 + a01 * a20) * det;\\r\\n        te[8] = (a11 * a00 - a01 * a10) * det;\\r\\n        return this;\\r\\n\\r\\n    },\\r\\n\\r\\n    addOffset: function ( m, v ) {\\r\\n\\r\\n        var relX = v.x;\\r\\n        var relY = v.y;\\r\\n        var relZ = v.z;\\r\\n\\r\\n        var te = this.elements;\\r\\n        te[0] += m * ( relY * relY + relZ * relZ );\\r\\n        te[4] += m * ( relX * relX + relZ * relZ );\\r\\n        te[8] += m * ( relX * relX + relY * relY );\\r\\n        var xy = m * relX * relY;\\r\\n        var yz = m * relY * relZ;\\r\\n        var zx = m * relZ * relX;\\r\\n        te[1] -= xy;\\r\\n        te[3] -= xy;\\r\\n        te[2] -= yz;\\r\\n        te[6] -= yz;\\r\\n        te[5] -= zx;\\r\\n        te[7] -= zx;\\r\\n        return this;\\r\\n\\r\\n    },\\r\\n\\r\\n    subOffset: function ( m, v ) {\\r\\n\\r\\n        var relX = v.x;\\r\\n        var relY = v.y;\\r\\n        var relZ = v.z;\\r\\n\\r\\n        var te = this.elements;\\r\\n        te[0] -= m * ( relY * relY + relZ * relZ );\\r\\n        te[4] -= m * ( relX * relX + relZ * relZ );\\r\\n        te[8] -= m * ( relX * relX + relY * relY );\\r\\n        var xy = m * relX * relY;\\r\\n        var yz = m * relY * relZ;\\r\\n        var zx = m * relZ * relX;\\r\\n        te[1] += xy;\\r\\n        te[3] += xy;\\r\\n        te[2] += yz;\\r\\n        te[6] += yz;\\r\\n        te[5] += zx;\\r\\n        te[7] += zx;\\r\\n        return this;\\r\\n\\r\\n    },\\r\\n\\r\\n    // OK \\r\\n\\r\\n    multiplyScalar: function ( s ) {\\r\\n\\r\\n        var te = this.elements;\\r\\n\\r\\n        te[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\\r\\n        te[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\\r\\n        te[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\\r\\n\\r\\n        return this;\\r\\n\\r\\n    },\\r\\n\\r\\n    identity: function () {\\r\\n\\r\\n        this.set( 1, 0, 0, 0, 1, 0, 0, 0, 1 );\\r\\n        return this;\\r\\n\\r\\n    },\\r\\n\\r\\n\\r\\n    clone: function () {\\r\\n\\r\\n        return new Mat33().fromArray( this.elements );\\r\\n\\r\\n    },\\r\\n\\r\\n    copy: function ( m ) {\\r\\n\\r\\n        for ( var i = 0; i < 9; i ++ ) this.elements[ i ] = m.elements[ i ];\\r\\n        return this;\\r\\n\\r\\n    },\\r\\n\\r\\n    determinant: function () {\\r\\n\\r\\n        var te = this.elements;\\r\\n        var a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\\r\\n            d = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\\r\\n            g = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\\r\\n\\r\\n        return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\\r\\n\\r\\n    },\\r\\n\\r\\n    fromArray: function ( array, offset ) {\\r\\n\\r\\n        if ( offset === undefined ) offset = 0;\\r\\n\\r\\n        for( var i = 0; i < 9; i ++ ) {\\r\\n\\r\\n            this.elements[ i ] = array[ i + offset ];\\r\\n\\r\\n        }\\r\\n\\r\\n        return this;\\r\\n\\r\\n    },\\r\\n\\r\\n    toArray: function ( array, offset ) {\\r\\n\\r\\n        if ( array === undefined ) array = [];\\r\\n        if ( offset === undefined ) offset = 0;\\r\\n\\r\\n        var te = this.elements;\\r\\n\\r\\n        array[ offset ] = te[ 0 ];\\r\\n        array[ offset + 1 ] = te[ 1 ];\\r\\n        array[ offset + 2 ] = te[ 2 ];\\r\\n\\r\\n        array[ offset + 3 ] = te[ 3 ];\\r\\n        array[ offset + 4 ] = te[ 4 ];\\r\\n        array[ offset + 5 ] = te[ 5 ];\\r\\n\\r\\n        array[ offset + 6 ] = te[ 6 ];\\r\\n        array[ offset + 7 ] = te[ 7 ];\\r\\n        array[ offset + 8 ] = te[ 8 ];\\r\\n\\r\\n        return array;\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n} );\\n\\n/**\\r\\n * An axis-aligned bounding box.\\r\\n *\\r\\n * @author saharan\\r\\n * @author lo-th\\r\\n */\\r\\n\\r\\nfunction AABB( minX, maxX, minY, maxY, minZ, maxZ ){\\r\\n\\r\\n    this.elements = new Float32Array( 6 );\\r\\n    var te = this.elements;\\r\\n\\r\\n    te[0] = minX || 0; te[1] = minY || 0; te[2] = minZ || 0;\\r\\n    te[3] = maxX || 0; te[4] = maxY || 0; te[5] = maxZ || 0;\\r\\n\\r\\n}\\r\\n\\r\\nObject.assign( AABB.prototype, {\\r\\n\\r\\n\\tAABB: true,\\r\\n\\r\\n\\tset: function(minX, maxX, minY, maxY, minZ, maxZ){\\r\\n\\r\\n\\t\\tvar te = this.elements;\\r\\n\\t\\tte[0] = minX;\\r\\n\\t\\tte[3] = maxX;\\r\\n\\t\\tte[1] = minY;\\r\\n\\t\\tte[4] = maxY;\\r\\n\\t\\tte[2] = minZ;\\r\\n\\t\\tte[5] = maxZ;\\r\\n\\t\\treturn this;\\r\\n\\t},\\r\\n\\r\\n\\tintersectTest: function ( aabb ) {\\r\\n\\r\\n\\t\\tvar te = this.elements;\\r\\n\\t\\tvar ue = aabb.elements;\\r\\n\\t\\treturn te[0] > ue[3] || te[1] > ue[4] || te[2] > ue[5] || te[3] < ue[0] || te[4] < ue[1] || te[5] < ue[2] ? true : false;\\r\\n\\r\\n\\t},\\r\\n\\r\\n\\tintersectTestTwo: function ( aabb ) {\\r\\n\\r\\n\\t\\tvar te = this.elements;\\r\\n\\t\\tvar ue = aabb.elements;\\r\\n\\t\\treturn te[0] < ue[0] || te[1] < ue[1] || te[2] < ue[2] || te[3] > ue[3] || te[4] > ue[4] || te[5] > ue[5] ? true : false;\\r\\n\\r\\n\\t},\\r\\n\\r\\n\\tclone: function () {\\r\\n\\r\\n\\t\\treturn new this.constructor().fromArray( this.elements );\\r\\n\\r\\n\\t},\\r\\n\\r\\n\\tcopy: function ( aabb, margin ) {\\r\\n\\r\\n\\t\\tvar m = margin || 0;\\r\\n\\t\\tvar me = aabb.elements;\\r\\n\\t\\tthis.set( me[ 0 ]-m, me[ 3 ]+m, me[ 1 ]-m, me[ 4 ]+m, me[ 2 ]-m, me[ 5 ]+m );\\r\\n\\t\\treturn this;\\r\\n\\r\\n\\t},\\r\\n\\r\\n\\tfromArray: function ( array ) {\\r\\n\\r\\n\\t\\tthis.elements.set( array );\\r\\n\\t\\treturn this;\\r\\n\\r\\n\\t},\\r\\n\\r\\n\\t// Set this AABB to the combined AABB of aabb1 and aabb2.\\r\\n\\r\\n\\tcombine: function( aabb1, aabb2 ) {\\r\\n\\r\\n\\t\\tvar a = aabb1.elements;\\r\\n\\t\\tvar b = aabb2.elements;\\r\\n\\t\\tvar te = this.elements;\\r\\n\\r\\n\\t\\tte[0] = a[0] < b[0] ? a[0] : b[0];\\r\\n\\t\\tte[1] = a[1] < b[1] ? a[1] : b[1];\\r\\n\\t\\tte[2] = a[2] < b[2] ? a[2] : b[2];\\r\\n\\r\\n\\t\\tte[3] = a[3] > b[3] ? a[3] : b[3];\\r\\n\\t\\tte[4] = a[4] > b[4] ? a[4] : b[4];\\r\\n\\t\\tte[5] = a[5] > b[5] ? a[5] : b[5];\\r\\n\\r\\n\\t\\treturn this;\\r\\n\\r\\n\\t},\\r\\n\\r\\n\\r\\n\\t// Get the surface area.\\r\\n\\r\\n\\tsurfaceArea: function () {\\r\\n\\r\\n\\t\\tvar te = this.elements;\\r\\n\\t\\tvar a = te[3] - te[0];\\r\\n\\t\\tvar h = te[4] - te[1];\\r\\n\\t\\tvar d = te[5] - te[2];\\r\\n\\t\\treturn 2 * (a * (h + d) + h * d );\\r\\n\\r\\n\\t},\\r\\n\\r\\n\\r\\n\\t// Get whether the AABB intersects with the point or not.\\r\\n\\r\\n\\tintersectsWithPoint:function(x,y,z){\\r\\n\\r\\n\\t\\tvar te = this.elements;\\r\\n\\t\\treturn x>=te[0] && x<=te[3] && y>=te[1] && y<=te[4] && z>=te[2] && z<=te[5];\\r\\n\\r\\n\\t},\\r\\n\\r\\n\\t/**\\r\\n\\t * Set the AABB from an array\\r\\n\\t * of vertices. From THREE.\\r\\n\\t * @author WestLangley\\r\\n\\t * @author xprogram\\r\\n\\t */\\r\\n\\r\\n\\tsetFromPoints: function(arr){\\r\\n\\t\\tthis.makeEmpty();\\r\\n\\t\\tfor(var i = 0; i < arr.length; i++){\\r\\n\\t\\t\\tthis.expandByPoint(arr[i]);\\r\\n\\t\\t}\\r\\n\\t},\\r\\n\\r\\n\\tmakeEmpty: function(){\\r\\n\\t\\tthis.set(-Infinity, -Infinity, -Infinity, Infinity, Infinity, Infinity);\\r\\n\\t},\\r\\n\\r\\n\\texpandByPoint: function(pt){\\r\\n\\t\\tvar te = this.elements;\\r\\n\\t\\tthis.set(\\r\\n\\t\\t\\t_Math.min(te[ 0 ], pt.x), _Math.min(te[ 1 ], pt.y), _Math.min(te[ 2 ], pt.z),\\r\\n\\t\\t\\t_Math.max(te[ 3 ], pt.x), _Math.max(te[ 4 ], pt.y), _Math.max(te[ 5 ], pt.z)\\r\\n\\t\\t);\\r\\n\\t},\\r\\n\\r\\n\\texpandByScalar: function(s){\\r\\n\\r\\n\\t\\tvar te = this.elements;\\r\\n\\t\\tte[0] += -s;\\r\\n\\t\\tte[1] += -s;\\r\\n\\t\\tte[2] += -s;\\r\\n\\t\\tte[3] += s;\\r\\n\\t\\tte[4] += s;\\r\\n\\t\\tte[5] += s;\\r\\n\\t}\\r\\n\\r\\n});\\n\\nvar count = 0;\\r\\nfunction ShapeIdCount() { return count++; }\\r\\n\\r\\n/**\\r\\n * A shape is used to detect collisions of rigid bodies.\\r\\n *\\r\\n * @author saharan\\r\\n * @author lo-th\\r\\n */\\r\\n\\r\\nfunction Shape ( config ) {\\r\\n\\r\\n    this.type = SHAPE_NULL;\\r\\n\\r\\n    // global identification of the shape should be unique to the shape.\\r\\n    this.id = ShapeIdCount();\\r\\n\\r\\n    // previous shape in parent rigid body. Used for fast interations.\\r\\n    this.prev = null;\\r\\n\\r\\n    // next shape in parent rigid body. Used for fast interations.\\r\\n    this.next = null;\\r\\n\\r\\n    // proxy of the shape used for broad-phase collision detection.\\r\\n    this.proxy = null;\\r\\n\\r\\n    // parent rigid body of the shape.\\r\\n    this.parent = null;\\r\\n\\r\\n    // linked list of the contacts with the shape.\\r\\n    this.contactLink = null;\\r\\n\\r\\n    // number of the contacts with the shape.\\r\\n    this.numContacts = 0;\\r\\n\\r\\n    // center of gravity of the shape in world coordinate system.\\r\\n    this.position = new Vec3();\\r\\n\\r\\n    // rotation matrix of the shape in world coordinate system.\\r\\n    this.rotation = new Mat33();\\r\\n\\r\\n    // position of the shape in parent's coordinate system.\\r\\n    this.relativePosition = new Vec3().copy( config.relativePosition );\\r\\n\\r\\n    // rotation matrix of the shape in parent's coordinate system.\\r\\n    this.relativeRotation = new Mat33().copy( config.relativeRotation );\\r\\n\\r\\n    // axis-aligned bounding box of the shape.\\r\\n    this.aabb = new AABB();\\r\\n\\r\\n    // density of the shape.\\r\\n    this.density = config.density;\\r\\n\\r\\n    // coefficient of friction of the shape.\\r\\n    this.friction = config.friction;\\r\\n\\r\\n    // coefficient of restitution of the shape.\\r\\n    this.restitution = config.restitution;\\r\\n\\r\\n    // bits of the collision groups to which the shape belongs.\\r\\n    this.belongsTo = config.belongsTo;\\r\\n\\r\\n    // bits of the collision groups with which the shape collides.\\r\\n    this.collidesWith = config.collidesWith;\\r\\n\\r\\n}\\r\\n\\r\\nObject.assign( Shape.prototype, {\\r\\n\\r\\n    Shape: true,\\r\\n\\r\\n    // Calculate the mass information of the shape.\\r\\n\\r\\n    calculateMassInfo: function( out ){\\r\\n\\r\\n        printError(\\\"Shape\\\", \\\"Inheritance error.\\\");\\r\\n\\r\\n    },\\r\\n\\r\\n    // Update the proxy of the shape.\\r\\n\\r\\n    updateProxy: function(){\\r\\n\\r\\n        printError(\\\"Shape\\\", \\\"Inheritance error.\\\");\\r\\n\\r\\n    }\\r\\n\\r\\n});\\n\\n/**\\r\\n * Box shape.\\r\\n * @author saharan\\r\\n * @author lo-th\\r\\n */\\r\\n \\r\\nfunction Box ( config, Width, Height, Depth ) {\\r\\n\\r\\n    Shape.call( this, config );\\r\\n\\r\\n    this.type = SHAPE_BOX;\\r\\n\\r\\n    this.width = Width;\\r\\n    this.height = Height;\\r\\n    this.depth = Depth;\\r\\n\\r\\n    this.halfWidth = Width * 0.5;\\r\\n    this.halfHeight = Height * 0.5;\\r\\n    this.halfDepth = Depth * 0.5;\\r\\n\\r\\n    this.dimentions = new Float32Array( 18 );\\r\\n    this.elements = new Float32Array( 24 );\\r\\n\\r\\n}\\r\\n\\r\\nBox.prototype = Object.assign( Object.create( Shape.prototype ), {\\r\\n\\r\\n\\tconstructor: Box,\\r\\n\\r\\n\\tcalculateMassInfo: function ( out ) {\\r\\n\\r\\n\\t\\tvar mass = this.width * this.height * this.depth * this.density;\\r\\n\\t\\tvar divid = 1/12;\\r\\n\\t\\tout.mass = mass;\\r\\n\\t\\tout.inertia.set(\\r\\n\\t\\t\\tmass * ( this.height * this.height + this.depth * this.depth ) * divid, 0, 0,\\r\\n\\t\\t\\t0, mass * ( this.width * this.width + this.depth * this.depth ) * divid, 0,\\r\\n\\t\\t\\t0, 0, mass * ( this.width * this.width + this.height * this.height ) * divid\\r\\n\\t\\t);\\r\\n\\r\\n\\t},\\r\\n\\r\\n\\tupdateProxy: function () {\\r\\n\\r\\n\\t\\tvar te = this.rotation.elements;\\r\\n\\t\\tvar di = this.dimentions;\\r\\n\\t\\t// Width\\r\\n\\t\\tdi[0] = te[0];\\r\\n\\t\\tdi[1] = te[3];\\r\\n\\t\\tdi[2] = te[6];\\r\\n\\t\\t// Height\\r\\n\\t\\tdi[3] = te[1];\\r\\n\\t\\tdi[4] = te[4];\\r\\n\\t\\tdi[5] = te[7];\\r\\n\\t\\t// Depth\\r\\n\\t\\tdi[6] = te[2];\\r\\n\\t\\tdi[7] = te[5];\\r\\n\\t\\tdi[8] = te[8];\\r\\n\\t\\t// half Width\\r\\n\\t\\tdi[9] = te[0] * this.halfWidth;\\r\\n\\t\\tdi[10] = te[3] * this.halfWidth;\\r\\n\\t\\tdi[11] = te[6] * this.halfWidth;\\r\\n\\t\\t// half Height\\r\\n\\t\\tdi[12] = te[1] * this.halfHeight;\\r\\n\\t\\tdi[13] = te[4] * this.halfHeight;\\r\\n\\t\\tdi[14] = te[7] * this.halfHeight;\\r\\n\\t\\t// half Depth\\r\\n\\t\\tdi[15] = te[2] * this.halfDepth;\\r\\n\\t\\tdi[16] = te[5] * this.halfDepth;\\r\\n\\t\\tdi[17] = te[8] * this.halfDepth;\\r\\n\\r\\n\\t\\tvar wx = di[9];\\r\\n\\t\\tvar wy = di[10];\\r\\n\\t\\tvar wz = di[11];\\r\\n\\t\\tvar hx = di[12];\\r\\n\\t\\tvar hy = di[13];\\r\\n\\t\\tvar hz = di[14];\\r\\n\\t\\tvar dx = di[15];\\r\\n\\t\\tvar dy = di[16];\\r\\n\\t\\tvar dz = di[17];\\r\\n\\r\\n\\t\\tvar x = this.position.x;\\r\\n\\t\\tvar y = this.position.y;\\r\\n\\t\\tvar z = this.position.z;\\r\\n\\r\\n\\t\\tvar v = this.elements;\\r\\n\\t\\t//v1\\r\\n\\t\\tv[0] = x + wx + hx + dx;\\r\\n\\t\\tv[1] = y + wy + hy + dy;\\r\\n\\t\\tv[2] = z + wz + hz + dz;\\r\\n\\t\\t//v2\\r\\n\\t\\tv[3] = x + wx + hx - dx;\\r\\n\\t\\tv[4] = y + wy + hy - dy;\\r\\n\\t\\tv[5] = z + wz + hz - dz;\\r\\n\\t\\t//v3\\r\\n\\t\\tv[6] = x + wx - hx + dx;\\r\\n\\t\\tv[7] = y + wy - hy + dy;\\r\\n\\t\\tv[8] = z + wz - hz + dz;\\r\\n\\t\\t//v4\\r\\n\\t\\tv[9] = x + wx - hx - dx;\\r\\n\\t\\tv[10] = y + wy - hy - dy;\\r\\n\\t\\tv[11] = z + wz - hz - dz;\\r\\n\\t\\t//v5\\r\\n\\t\\tv[12] = x - wx + hx + dx;\\r\\n\\t\\tv[13] = y - wy + hy + dy;\\r\\n\\t\\tv[14] = z - wz + hz + dz;\\r\\n\\t\\t//v6\\r\\n\\t\\tv[15] = x - wx + hx - dx;\\r\\n\\t\\tv[16] = y - wy + hy - dy;\\r\\n\\t\\tv[17] = z - wz + hz - dz;\\r\\n\\t\\t//v7\\r\\n\\t\\tv[18] = x - wx - hx + dx;\\r\\n\\t\\tv[19] = y - wy - hy + dy;\\r\\n\\t\\tv[20] = z - wz - hz + dz;\\r\\n\\t\\t//v8\\r\\n\\t\\tv[21] = x - wx - hx - dx;\\r\\n\\t\\tv[22] = y - wy - hy - dy;\\r\\n\\t\\tv[23] = z - wz - hz - dz;\\r\\n\\r\\n\\t\\tvar w = di[9] < 0 ? -di[9] : di[9];\\r\\n\\t\\tvar h = di[10] < 0 ? -di[10] : di[10];\\r\\n\\t\\tvar d = di[11] < 0 ? -di[11] : di[11];\\r\\n\\r\\n\\t\\tw = di[12] < 0 ? w - di[12] : w + di[12];\\r\\n\\t\\th = di[13] < 0 ? h - di[13] : h + di[13];\\r\\n\\t\\td = di[14] < 0 ? d - di[14] : d + di[14];\\r\\n\\r\\n\\t\\tw = di[15] < 0 ? w - di[15] : w + di[15];\\r\\n\\t\\th = di[16] < 0 ? h - di[16] : h + di[16];\\r\\n\\t\\td = di[17] < 0 ? d - di[17] : d + di[17];\\r\\n\\r\\n\\t\\tvar p = AABB_PROX;\\r\\n\\r\\n\\t\\tthis.aabb.set(\\r\\n\\t\\t\\tthis.position.x - w - p, this.position.x + w + p,\\r\\n\\t\\t\\tthis.position.y - h - p, this.position.y + h + p,\\r\\n\\t\\t\\tthis.position.z - d - p, this.position.z + d + p\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\tif ( this.proxy != null ) this.proxy.update();\\r\\n\\r\\n\\t}\\r\\n});\\n\\n/**\\r\\n * Sphere shape\\r\\n * @author saharan\\r\\n * @author lo-th\\r\\n */\\r\\n\\r\\nfunction Sphere( config, radius ) {\\r\\n\\r\\n    Shape.call( this, config );\\r\\n\\r\\n    this.type = SHAPE_SPHERE;\\r\\n\\r\\n    // radius of the shape.\\r\\n    this.radius = radius;\\r\\n\\r\\n}\\r\\n\\r\\nSphere.prototype = Object.assign( Object.create( Shape.prototype ), {\\r\\n\\r\\n\\tconstructor: Sphere,\\r\\n\\r\\n\\tvolume: function () {\\r\\n\\r\\n\\t\\treturn _Math.PI * this.radius * 1.333333;\\r\\n\\r\\n\\t},\\r\\n\\r\\n\\tcalculateMassInfo: function ( out ) {\\r\\n\\r\\n\\t\\tvar mass = this.volume() * this.radius * this.radius * this.density; //1.333 * _Math.PI * this.radius * this.radius * this.radius * this.density;\\r\\n\\t\\tout.mass = mass;\\r\\n\\t\\tvar inertia = mass * this.radius * this.radius * 0.4;\\r\\n\\t\\tout.inertia.set( inertia, 0, 0, 0, inertia, 0, 0, 0, inertia );\\r\\n\\r\\n\\t},\\r\\n\\r\\n\\tupdateProxy: function () {\\r\\n\\r\\n\\t\\tvar p = AABB_PROX;\\r\\n\\r\\n\\t\\tthis.aabb.set(\\r\\n\\t\\t\\tthis.position.x - this.radius - p, this.position.x + this.radius + p,\\r\\n\\t\\t\\tthis.position.y - this.radius - p, this.position.y + this.radius + p,\\r\\n\\t\\t\\tthis.position.z - this.radius - p, this.position.z + this.radius + p\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\tif ( this.proxy != null ) this.proxy.update();\\r\\n\\r\\n\\t}\\r\\n\\r\\n});\\n\\n/**\\r\\n * Cylinder shape\\r\\n * @author saharan\\r\\n * @author lo-th\\r\\n */\\r\\n\\r\\nfunction Cylinder ( config, radius, height ) {\\r\\n\\r\\n    Shape.call( this, config );\\r\\n\\r\\n    this.type = SHAPE_CYLINDER;\\r\\n\\r\\n    this.radius = radius;\\r\\n    this.height = height;\\r\\n    this.halfHeight = height * 0.5;\\r\\n\\r\\n    this.normalDirection = new Vec3();\\r\\n    this.halfDirection = new Vec3();\\r\\n\\r\\n}\\r\\n\\r\\nCylinder.prototype = Object.assign( Object.create( Shape.prototype ), {\\r\\n\\r\\n    constructor: Cylinder,\\r\\n\\r\\n    calculateMassInfo: function ( out ) {\\r\\n\\r\\n        var rsq = this.radius * this.radius;\\r\\n        var mass = _Math.PI * rsq * this.height * this.density;\\r\\n        var inertiaXZ = ( ( 0.25 * rsq ) + ( 0.0833 * this.height * this.height ) ) * mass;\\r\\n        var inertiaY = 0.5 * rsq;\\r\\n        out.mass = mass;\\r\\n        out.inertia.set( inertiaXZ, 0, 0,  0, inertiaY, 0,  0, 0, inertiaXZ );\\r\\n\\r\\n    },\\r\\n\\r\\n    updateProxy: function () {\\r\\n\\r\\n        var te = this.rotation.elements;\\r\\n        var len, wx, hy, dz, xx, yy, zz, w, h, d, p;\\r\\n\\r\\n        xx = te[1] * te[1];\\r\\n        yy = te[4] * te[4];\\r\\n        zz = te[7] * te[7];\\r\\n\\r\\n        this.normalDirection.set( te[1], te[4], te[7] );\\r\\n        this.halfDirection.scale( this.normalDirection, this.halfHeight );\\r\\n\\r\\n        wx = 1 - xx;\\r\\n        len = _Math.sqrt(wx*wx + xx*yy + xx*zz);\\r\\n        if(len>0) len = this.radius/len;\\r\\n        wx *= len;\\r\\n        hy = 1 - yy;\\r\\n        len = _Math.sqrt(yy*xx + hy*hy + yy*zz);\\r\\n        if(len>0) len = this.radius/len;\\r\\n        hy *= len;\\r\\n        dz = 1 - zz;\\r\\n        len = _Math.sqrt(zz*xx + zz*yy + dz*dz);\\r\\n        if(len>0) len = this.radius/len;\\r\\n        dz *= len;\\r\\n\\r\\n        w = this.halfDirection.x < 0 ? -this.halfDirection.x : this.halfDirection.x;\\r\\n        h = this.halfDirection.y < 0 ? -this.halfDirection.y : this.halfDirection.y;\\r\\n        d = this.halfDirection.z < 0 ? -this.halfDirection.z : this.halfDirection.z;\\r\\n\\r\\n        w = wx < 0 ? w - wx : w + wx;\\r\\n        h = hy < 0 ? h - hy : h + hy;\\r\\n        d = dz < 0 ? d - dz : d + dz;\\r\\n\\r\\n        p = AABB_PROX;\\r\\n\\r\\n        this.aabb.set(\\r\\n            this.position.x - w - p, this.position.x + w + p,\\r\\n            this.position.y - h - p, this.position.y + h + p,\\r\\n            this.position.z - d - p, this.position.z + d + p\\r\\n        );\\r\\n\\r\\n        if ( this.proxy != null ) this.proxy.update();\\r\\n\\r\\n    }\\r\\n\\r\\n});\\n\\n/**\\r\\n * Plane shape.\\r\\n * @author lo-th\\r\\n */\\r\\n\\r\\nfunction Plane( config, normal ) {\\r\\n\\r\\n    Shape.call( this, config );\\r\\n\\r\\n    this.type = SHAPE_PLANE;\\r\\n\\r\\n    // radius of the shape.\\r\\n    this.normal = new Vec3( 0, 1, 0 );\\r\\n\\r\\n}\\r\\n\\r\\nPlane.prototype = Object.assign( Object.create( Shape.prototype ), {\\r\\n\\r\\n    constructor: Plane,\\r\\n\\r\\n    volume: function () {\\r\\n\\r\\n        return Number.MAX_VALUE;\\r\\n\\r\\n    },\\r\\n\\r\\n    calculateMassInfo: function ( out ) {\\r\\n\\r\\n        out.mass = this.density;//0.0001;\\r\\n        var inertia = 1;\\r\\n        out.inertia.set( inertia, 0, 0, 0, inertia, 0, 0, 0, inertia );\\r\\n\\r\\n    },\\r\\n\\r\\n    updateProxy: function () {\\r\\n\\r\\n        var p = AABB_PROX;\\r\\n\\r\\n        var min = -_Math.INF;\\r\\n        var max = _Math.INF;\\r\\n        var n = this.normal;\\r\\n        // The plane AABB is infinite, except if the normal is pointing along any axis\\r\\n        this.aabb.set(\\r\\n            n.x === -1 ? this.position.x - p : min, n.x === 1 ? this.position.x + p : max,\\r\\n            n.y === -1 ? this.position.y - p : min, n.y === 1 ? this.position.y + p : max,\\r\\n            n.z === -1 ? this.position.z - p : min, n.z === 1 ? this.position.z + p : max\\r\\n        );\\r\\n\\r\\n        if ( this.proxy != null ) this.proxy.update();\\r\\n\\r\\n    }\\r\\n\\r\\n});\\n\\n/**\\r\\n * A Particule shape\\r\\n * @author lo-th\\r\\n */\\r\\n\\r\\nfunction Particle( config, normal ) {\\r\\n\\r\\n    Shape.call( this, config );\\r\\n\\r\\n    this.type = SHAPE_PARTICLE;\\r\\n\\r\\n}\\r\\n\\r\\nParticle.prototype = Object.assign( Object.create( Shape.prototype ), {\\r\\n\\r\\n    constructor: Particle,\\r\\n\\r\\n    volume: function () {\\r\\n\\r\\n        return Number.MAX_VALUE;\\r\\n\\r\\n    },\\r\\n\\r\\n    calculateMassInfo: function ( out ) {\\r\\n\\r\\n        var inertia = 0;\\r\\n        out.inertia.set( inertia, 0, 0, 0, inertia, 0, 0, 0, inertia );\\r\\n\\r\\n    },\\r\\n\\r\\n    updateProxy: function () {\\r\\n\\r\\n        var p = 0;//AABB_PROX;\\r\\n\\r\\n        this.aabb.set(\\r\\n            this.position.x - p, this.position.x + p,\\r\\n            this.position.y - p, this.position.y + p,\\r\\n            this.position.z - p, this.position.z + p\\r\\n        );\\r\\n\\r\\n        if ( this.proxy != null ) this.proxy.update();\\r\\n\\r\\n    }\\r\\n\\r\\n});\\n\\n/**\\r\\n * A shape configuration holds common configuration data for constructing a shape.\\r\\n * These configurations can be reused safely.\\r\\n *\\r\\n * @author saharan\\r\\n * @author lo-th\\r\\n */\\r\\n \\r\\nfunction ShapeConfig(){\\r\\n\\r\\n    // position of the shape in parent's coordinate system.\\r\\n    this.relativePosition = new Vec3();\\r\\n    // rotation matrix of the shape in parent's coordinate system.\\r\\n    this.relativeRotation = new Mat33();\\r\\n    // coefficient of friction of the shape.\\r\\n    this.friction = 0.2; // 0.4\\r\\n    // coefficient of restitution of the shape.\\r\\n    this.restitution = 0.2;\\r\\n    // density of the shape.\\r\\n    this.density = 1;\\r\\n    // bits of the collision groups to which the shape belongs.\\r\\n    this.belongsTo = 1;\\r\\n    // bits of the collision groups with which the shape collides.\\r\\n    this.collidesWith = 0xffffffff;\\r\\n\\r\\n}\\n\\n/**\\n* An information of limit and motor.\\n*\\n* @author saharan\\n*/\\n\\nfunction LimitMotor ( axis, fixed ) {\\n\\n    fixed = fixed || false;\\n    // The axis of the constraint.\\n    this.axis = axis;\\n    // The current angle for rotational constraints.\\n    this.angle = 0;\\n    // The lower limit. Set lower > upper to disable\\n    this.lowerLimit = fixed ? 0 : 1;\\n\\n    //  The upper limit. Set lower > upper to disable.\\n    this.upperLimit = 0;\\n    // The target motor speed.\\n    this.motorSpeed = 0;\\n    // The maximum motor force or torque. Set 0 to disable.\\n    this.maxMotorForce = 0;\\n    // The frequency of the spring. Set 0 to disable.\\n    this.frequency = 0;\\n    // The damping ratio of the spring. Set 0 for no damping, 1 for critical damping.\\n    this.dampingRatio = 0;\\n\\n}\\n\\nObject.assign( LimitMotor.prototype, {\\n\\n    LimitMotor: true,\\n\\n    // Set limit data into this constraint.\\n    setLimit:function ( lowerLimit, upperLimit ) {\\n\\n        this.lowerLimit = lowerLimit;\\n        this.upperLimit = upperLimit;\\n\\n    },\\n\\n    // Set motor data into this constraint.\\n    setMotor:function ( motorSpeed, maxMotorForce ) {\\n        \\n        this.motorSpeed = motorSpeed;\\n        this.maxMotorForce = maxMotorForce;\\n\\n    },\\n\\n    // Set spring data into this constraint.\\n    setSpring:function ( frequency, dampingRatio ) {\\n        \\n        this.frequency = frequency;\\n        this.dampingRatio = dampingRatio;\\n        \\n    }\\n\\n});\\n\\n/**\\r\\n * The base class of all type of the constraints.\\r\\n *\\r\\n * @author saharan\\r\\n * @author lo-th\\r\\n */\\r\\n\\r\\nfunction Constraint(){\\r\\n\\r\\n    // parent world of the constraint.\\r\\n    this.parent = null;\\r\\n\\r\\n    // first body of the constraint.\\r\\n    this.body1 = null;\\r\\n\\r\\n    // second body of the constraint.\\r\\n    this.body2 = null;\\r\\n\\r\\n    // Internal\\r\\n    this.addedToIsland = false;\\r\\n    \\r\\n}\\r\\n\\r\\nObject.assign( Constraint.prototype, {\\r\\n\\r\\n    Constraint: true,\\r\\n\\r\\n    // Prepare for solving the constraint\\r\\n    preSolve: function( timeStep, invTimeStep ){\\r\\n\\r\\n        printError(\\\"Constraint\\\", \\\"Inheritance error.\\\");\\r\\n\\r\\n    },\\r\\n\\r\\n    // Solve the constraint. This is usually called iteratively.\\r\\n    solve: function(){\\r\\n\\r\\n        printError(\\\"Constraint\\\", \\\"Inheritance error.\\\");\\r\\n\\r\\n    },\\r\\n\\r\\n    // Do the post-processing.\\r\\n    postSolve: function(){\\r\\n\\r\\n        printError(\\\"Constraint\\\", \\\"Inheritance error.\\\");\\r\\n\\r\\n    }\\r\\n\\r\\n});\\n\\nfunction JointLink ( joint ){\\r\\n    \\r\\n    // The previous joint link.\\r\\n    this.prev = null;\\r\\n    // The next joint link.\\r\\n    this.next = null;\\r\\n    // The other rigid body connected to the joint.\\r\\n    this.body = null;\\r\\n    // The joint of the link.\\r\\n    this.joint = joint;\\r\\n\\r\\n}\\n\\n/**\\n * Joints are used to constrain the motion between two rigid bodies.\\n *\\n * @author saharan\\n * @author lo-th\\n */\\n\\nfunction Joint ( config ){\\n\\n    Constraint.call( this );\\n\\n    this.scale = 1;\\n    this.invScale = 1;\\n\\n    // joint name\\n    this.name = \\\"\\\";\\n    this.id = NaN;\\n\\n    // The type of the joint.\\n    this.type = JOINT_NULL;\\n    //  The previous joint in the world.\\n    this.prev = null;\\n    // The next joint in the world.\\n    this.next = null;\\n\\n    this.body1 = config.body1;\\n    this.body2 = config.body2;\\n\\n    // anchor point on the first rigid body in local coordinate system.\\n    this.localAnchorPoint1 = new Vec3().copy( config.localAnchorPoint1 );\\n    // anchor point on the second rigid body in local coordinate system.\\n    this.localAnchorPoint2 = new Vec3().copy( config.localAnchorPoint2 );\\n    // anchor point on the first rigid body in world coordinate system relative to the body's origin.\\n    this.relativeAnchorPoint1 = new Vec3();\\n    // anchor point on the second rigid body in world coordinate system relative to the body's origin.\\n    this.relativeAnchorPoint2 = new Vec3();\\n    //  anchor point on the first rigid body in world coordinate system.\\n    this.anchorPoint1 = new Vec3();\\n    // anchor point on the second rigid body in world coordinate system.\\n    this.anchorPoint2 = new Vec3();\\n    // Whether allow collision between connected rigid bodies or not.\\n    this.allowCollision = config.allowCollision;\\n\\n    this.b1Link = new JointLink( this );\\n    this.b2Link = new JointLink( this );\\n\\n}\\n\\nJoint.prototype = Object.assign( Object.create( Constraint.prototype ), {\\n\\n    constructor: Joint,\\n\\n    setId: function ( n ) { \\n\\n        this.id = i; \\n\\n    },\\n\\n    setParent: function ( world ) {\\n\\n        this.parent = world;\\n        this.scale = this.parent.scale;\\n        this.invScale = this.parent.invScale;\\n        this.id = this.parent.numJoints;\\n        if( !this.name ) this.name = 'J' +  this.id;\\n\\n    },\\n\\n    // Update all the anchor points.\\n\\n    updateAnchorPoints: function () {\\n\\n        this.relativeAnchorPoint1.copy( this.localAnchorPoint1 ).applyMatrix3( this.body1.rotation, true );\\n        this.relativeAnchorPoint2.copy( this.localAnchorPoint2 ).applyMatrix3( this.body2.rotation, true );\\n\\n        this.anchorPoint1.add( this.relativeAnchorPoint1, this.body1.position );\\n        this.anchorPoint2.add( this.relativeAnchorPoint2, this.body2.position );\\n\\n    },\\n\\n    // Attach the joint from the bodies.\\n\\n    attach: function ( isX ) {\\n\\n        this.b1Link.body = this.body2;\\n        this.b2Link.body = this.body1;\\n\\n        if(isX){\\n\\n            this.body1.jointLink.push( this.b1Link );\\n            this.body2.jointLink.push( this.b2Link );\\n\\n        } else {\\n\\n            if(this.body1.jointLink != null) (this.b1Link.next=this.body1.jointLink).prev = this.b1Link;\\n            else this.b1Link.next = null;\\n            this.body1.jointLink = this.b1Link;\\n            this.body1.numJoints++;\\n            if(this.body2.jointLink != null) (this.b2Link.next=this.body2.jointLink).prev = this.b2Link;\\n            else this.b2Link.next = null;\\n            this.body2.jointLink = this.b2Link;\\n            this.body2.numJoints++;\\n\\n        }\\n\\n    },\\n\\n    // Detach the joint from the bodies.\\n\\n    detach: function ( isX ) {\\n\\n        if( isX ){\\n\\n            this.body1.jointLink.splice( this.body1.jointLink.indexOf( this.b1Link ), 1 );\\n            this.body2.jointLink.splice( this.body2.jointLink.indexOf( this.b2Link ), 1 );\\n\\n        } else {\\n\\n            var prev = this.b1Link.prev;\\n            var next = this.b1Link.next;\\n            if(prev != null) prev.next = next;\\n            if(next != null) next.prev = prev;\\n            if(this.body1.jointLink == this.b1Link) this.body1.jointLink = next;\\n            this.b1Link.prev = null;\\n            this.b1Link.next = null;\\n            this.b1Link.body = null;\\n            this.body1.numJoints--;\\n\\n            prev = this.b2Link.prev;\\n            next = this.b2Link.next;\\n            if(prev != null) prev.next = next;\\n            if(next != null) next.prev = prev;\\n            if(this.body2.jointLink==this.b2Link) this.body2.jointLink = next;\\n            this.b2Link.prev = null;\\n            this.b2Link.next = null;\\n            this.b2Link.body = null;\\n            this.body2.numJoints--;\\n\\n        }\\n\\n        this.b1Link.body = null;\\n        this.b2Link.body = null;\\n\\n    },\\n\\n\\n    // Awake the bodies.\\n\\n    awake: function () {\\n\\n        this.body1.awake();\\n        this.body2.awake();\\n\\n    },\\n\\n    // calculation function\\n\\n    preSolve: function ( timeStep, invTimeStep ) {\\n\\n    },\\n\\n    solve: function () {\\n\\n    },\\n\\n    postSolve: function () {\\n\\n    },\\n\\n    // Delete process\\n\\n    remove: function () {\\n\\n        this.dispose();\\n\\n    },\\n\\n    dispose: function () {\\n\\n        this.parent.removeJoint( this );\\n\\n    },\\n\\n\\n    // Three js add\\n\\n    getPosition: function () {\\n\\n        var p1 = new Vec3().scale( this.anchorPoint1, this.scale );\\n        var p2 = new Vec3().scale( this.anchorPoint2, this.scale );\\n        return [ p1, p2 ];\\n\\n    }\\n\\n});\\n\\n/**\\n* A linear constraint for all axes for various joints.\\n* @author saharan\\n*/\\nfunction LinearConstraint ( joint ){\\n\\n    this.m1=NaN;\\n    this.m2=NaN;\\n\\n    this.ii1 = null;\\n    this.ii2 = null;\\n    this.dd = null;\\n\\n    this.r1x=NaN;\\n    this.r1y=NaN;\\n    this.r1z=NaN;\\n\\n    this.r2x=NaN;\\n    this.r2y=NaN;\\n    this.r2z=NaN;\\n\\n    this.ax1x=NaN;\\n    this.ax1y=NaN;\\n    this.ax1z=NaN;\\n    this.ay1x=NaN;\\n    this.ay1y=NaN;\\n    this.ay1z=NaN;\\n    this.az1x=NaN;\\n    this.az1y=NaN;\\n    this.az1z=NaN;\\n\\n    this.ax2x=NaN;\\n    this.ax2y=NaN;\\n    this.ax2z=NaN;\\n    this.ay2x=NaN;\\n    this.ay2y=NaN;\\n    this.ay2z=NaN;\\n    this.az2x=NaN;\\n    this.az2y=NaN;\\n    this.az2z=NaN;\\n\\n    this.vel=NaN;\\n    this.velx=NaN;\\n    this.vely=NaN;\\n    this.velz=NaN;\\n\\n\\n    this.joint = joint;\\n    this.r1 = joint.relativeAnchorPoint1;\\n    this.r2 = joint.relativeAnchorPoint2;\\n    this.p1 = joint.anchorPoint1;\\n    this.p2 = joint.anchorPoint2;\\n    this.b1 = joint.body1;\\n    this.b2 = joint.body2;\\n    this.l1 = this.b1.linearVelocity;\\n    this.l2 = this.b2.linearVelocity;\\n    this.a1 = this.b1.angularVelocity;\\n    this.a2 = this.b2.angularVelocity;\\n    this.i1 = this.b1.inverseInertia;\\n    this.i2 = this.b2.inverseInertia;\\n    this.impx = 0;\\n    this.impy = 0;\\n    this.impz = 0;\\n\\n}\\n\\nObject.assign( LinearConstraint.prototype, {\\n\\n    LinearConstraint: true,\\n\\n    preSolve: function ( timeStep, invTimeStep ) {\\n        \\n        this.r1x = this.r1.x;\\n        this.r1y = this.r1.y;\\n        this.r1z = this.r1.z;\\n\\n        this.r2x = this.r2.x;\\n        this.r2y = this.r2.y;\\n        this.r2z = this.r2.z;\\n\\n        this.m1 = this.b1.inverseMass;\\n        this.m2 = this.b2.inverseMass;\\n\\n        this.ii1 = this.i1.clone();\\n        this.ii2 = this.i2.clone();\\n\\n        var ii1 = this.ii1.elements;\\n        var ii2 = this.ii2.elements;\\n\\n        this.ax1x = this.r1z*ii1[1]+-this.r1y*ii1[2];\\n        this.ax1y = this.r1z*ii1[4]+-this.r1y*ii1[5];\\n        this.ax1z = this.r1z*ii1[7]+-this.r1y*ii1[8];\\n        this.ay1x = -this.r1z*ii1[0]+this.r1x*ii1[2];\\n        this.ay1y = -this.r1z*ii1[3]+this.r1x*ii1[5];\\n        this.ay1z = -this.r1z*ii1[6]+this.r1x*ii1[8];\\n        this.az1x = this.r1y*ii1[0]+-this.r1x*ii1[1];\\n        this.az1y = this.r1y*ii1[3]+-this.r1x*ii1[4];\\n        this.az1z = this.r1y*ii1[6]+-this.r1x*ii1[7];\\n        this.ax2x = this.r2z*ii2[1]+-this.r2y*ii2[2];\\n        this.ax2y = this.r2z*ii2[4]+-this.r2y*ii2[5];\\n        this.ax2z = this.r2z*ii2[7]+-this.r2y*ii2[8];\\n        this.ay2x = -this.r2z*ii2[0]+this.r2x*ii2[2];\\n        this.ay2y = -this.r2z*ii2[3]+this.r2x*ii2[5];\\n        this.ay2z = -this.r2z*ii2[6]+this.r2x*ii2[8];\\n        this.az2x = this.r2y*ii2[0]+-this.r2x*ii2[1];\\n        this.az2y = this.r2y*ii2[3]+-this.r2x*ii2[4];\\n        this.az2z = this.r2y*ii2[6]+-this.r2x*ii2[7];\\n\\n        // calculate point-to-point mass matrix\\n        // from impulse equation\\n        // \\n        // M = ([/m] - [r^][/I][r^]) ^ -1\\n        // \\n        // where\\n        // \\n        // [/m] = |1/m, 0, 0|\\n        //        |0, 1/m, 0|\\n        //        |0, 0, 1/m|\\n        // \\n        // [r^] = |0, -rz, ry|\\n        //        |rz, 0, -rx|\\n        //        |-ry, rx, 0|\\n        // \\n        // [/I] = Inverted moment inertia\\n\\n        var rxx = this.m1+this.m2;\\n\\n        var kk = new Mat33().set( rxx, 0, 0,  0, rxx, 0,  0, 0, rxx );\\n        var k = kk.elements;\\n\\n        k[0] += ii1[4]*this.r1z*this.r1z-(ii1[7]+ii1[5])*this.r1y*this.r1z+ii1[8]*this.r1y*this.r1y;\\n        k[1] += (ii1[6]*this.r1y+ii1[5]*this.r1x)*this.r1z-ii1[3]*this.r1z*this.r1z-ii1[8]*this.r1x*this.r1y;\\n        k[2] += (ii1[3]*this.r1y-ii1[4]*this.r1x)*this.r1z-ii1[6]*this.r1y*this.r1y+ii1[7]*this.r1x*this.r1y;\\n        k[3] += (ii1[2]*this.r1y+ii1[7]*this.r1x)*this.r1z-ii1[1]*this.r1z*this.r1z-ii1[8]*this.r1x*this.r1y;\\n        k[4] += ii1[0]*this.r1z*this.r1z-(ii1[6]+ii1[2])*this.r1x*this.r1z+ii1[8]*this.r1x*this.r1x;\\n        k[5] += (ii1[1]*this.r1x-ii1[0]*this.r1y)*this.r1z-ii1[7]*this.r1x*this.r1x+ii1[6]*this.r1x*this.r1y;\\n        k[6] += (ii1[1]*this.r1y-ii1[4]*this.r1x)*this.r1z-ii1[2]*this.r1y*this.r1y+ii1[5]*this.r1x*this.r1y;\\n        k[7] += (ii1[3]*this.r1x-ii1[0]*this.r1y)*this.r1z-ii1[5]*this.r1x*this.r1x+ii1[2]*this.r1x*this.r1y;\\n        k[8] += ii1[0]*this.r1y*this.r1y-(ii1[3]+ii1[1])*this.r1x*this.r1y+ii1[4]*this.r1x*this.r1x;\\n\\n        k[0] += ii2[4]*this.r2z*this.r2z-(ii2[7]+ii2[5])*this.r2y*this.r2z+ii2[8]*this.r2y*this.r2y;\\n        k[1] += (ii2[6]*this.r2y+ii2[5]*this.r2x)*this.r2z-ii2[3]*this.r2z*this.r2z-ii2[8]*this.r2x*this.r2y;\\n        k[2] += (ii2[3]*this.r2y-ii2[4]*this.r2x)*this.r2z-ii2[6]*this.r2y*this.r2y+ii2[7]*this.r2x*this.r2y;\\n        k[3] += (ii2[2]*this.r2y+ii2[7]*this.r2x)*this.r2z-ii2[1]*this.r2z*this.r2z-ii2[8]*this.r2x*this.r2y;\\n        k[4] += ii2[0]*this.r2z*this.r2z-(ii2[6]+ii2[2])*this.r2x*this.r2z+ii2[8]*this.r2x*this.r2x;\\n        k[5] += (ii2[1]*this.r2x-ii2[0]*this.r2y)*this.r2z-ii2[7]*this.r2x*this.r2x+ii2[6]*this.r2x*this.r2y;\\n        k[6] += (ii2[1]*this.r2y-ii2[4]*this.r2x)*this.r2z-ii2[2]*this.r2y*this.r2y+ii2[5]*this.r2x*this.r2y;\\n        k[7] += (ii2[3]*this.r2x-ii2[0]*this.r2y)*this.r2z-ii2[5]*this.r2x*this.r2x+ii2[2]*this.r2x*this.r2y;\\n        k[8] += ii2[0]*this.r2y*this.r2y-(ii2[3]+ii2[1])*this.r2x*this.r2y+ii2[4]*this.r2x*this.r2x;\\n\\n        var inv=1/( k[0]*(k[4]*k[8]-k[7]*k[5]) + k[3]*(k[7]*k[2]-k[1]*k[8]) + k[6]*(k[1]*k[5]-k[4]*k[2]) );\\n        this.dd = new Mat33().set(\\n            k[4]*k[8]-k[5]*k[7], k[2]*k[7]-k[1]*k[8], k[1]*k[5]-k[2]*k[4],\\n            k[5]*k[6]-k[3]*k[8], k[0]*k[8]-k[2]*k[6], k[2]*k[3]-k[0]*k[5],\\n            k[3]*k[7]-k[4]*k[6], k[1]*k[6]-k[0]*k[7], k[0]*k[4]-k[1]*k[3]\\n        ).scaleEqual( inv );\\n\\n        this.velx = this.p2.x-this.p1.x;\\n        this.vely = this.p2.y-this.p1.y;\\n        this.velz = this.p2.z-this.p1.z;\\n        var len = _Math.sqrt(this.velx*this.velx+this.vely*this.vely+this.velz*this.velz);\\n        if(len>0.005){\\n            len = (0.005-len)/len*invTimeStep*0.05;\\n            this.velx *= len;\\n            this.vely *= len;\\n            this.velz *= len;\\n        }else{\\n            this.velx = 0;\\n            this.vely = 0;\\n            this.velz = 0;\\n        }\\n\\n        this.impx *= 0.95;\\n        this.impy *= 0.95;\\n        this.impz *= 0.95;\\n        \\n        this.l1.x += this.impx*this.m1;\\n        this.l1.y += this.impy*this.m1;\\n        this.l1.z += this.impz*this.m1;\\n        this.a1.x += this.impx*this.ax1x+this.impy*this.ay1x+this.impz*this.az1x;\\n        this.a1.y += this.impx*this.ax1y+this.impy*this.ay1y+this.impz*this.az1y;\\n        this.a1.z += this.impx*this.ax1z+this.impy*this.ay1z+this.impz*this.az1z;\\n        this.l2.x -= this.impx*this.m2;\\n        this.l2.y -= this.impy*this.m2;\\n        this.l2.z -= this.impz*this.m2;\\n        this.a2.x -= this.impx*this.ax2x+this.impy*this.ay2x+this.impz*this.az2x;\\n        this.a2.y -= this.impx*this.ax2y+this.impy*this.ay2y+this.impz*this.az2y;\\n        this.a2.z -= this.impx*this.ax2z+this.impy*this.ay2z+this.impz*this.az2z;\\n    },\\n\\n    solve: function () {\\n\\n        var d = this.dd.elements;\\n        var rvx = this.l2.x-this.l1.x+this.a2.y*this.r2z-this.a2.z*this.r2y-this.a1.y*this.r1z+this.a1.z*this.r1y-this.velx;\\n        var rvy = this.l2.y-this.l1.y+this.a2.z*this.r2x-this.a2.x*this.r2z-this.a1.z*this.r1x+this.a1.x*this.r1z-this.vely;\\n        var rvz = this.l2.z-this.l1.z+this.a2.x*this.r2y-this.a2.y*this.r2x-this.a1.x*this.r1y+this.a1.y*this.r1x-this.velz;\\n        var nimpx = rvx*d[0]+rvy*d[1]+rvz*d[2];\\n        var nimpy = rvx*d[3]+rvy*d[4]+rvz*d[5];\\n        var nimpz = rvx*d[6]+rvy*d[7]+rvz*d[8];\\n        this.impx += nimpx;\\n        this.impy += nimpy;\\n        this.impz += nimpz;\\n        this.l1.x += nimpx*this.m1;\\n        this.l1.y += nimpy*this.m1;\\n        this.l1.z += nimpz*this.m1;\\n        this.a1.x += nimpx*this.ax1x+nimpy*this.ay1x+nimpz*this.az1x;\\n        this.a1.y += nimpx*this.ax1y+nimpy*this.ay1y+nimpz*this.az1y;\\n        this.a1.z += nimpx*this.ax1z+nimpy*this.ay1z+nimpz*this.az1z;\\n        this.l2.x -= nimpx*this.m2;\\n        this.l2.y -= nimpy*this.m2;\\n        this.l2.z -= nimpz*this.m2;\\n        this.a2.x -= nimpx*this.ax2x+nimpy*this.ay2x+nimpz*this.az2x;\\n        this.a2.y -= nimpx*this.ax2y+nimpy*this.ay2y+nimpz*this.az2y;\\n        this.a2.z -= nimpx*this.ax2z+nimpy*this.ay2z+nimpz*this.az2z;\\n\\n    }\\n\\n} );\\n\\n/**\\n* A three-axis rotational constraint for various joints.\\n* @author saharan\\n*/\\n\\nfunction Rotational3Constraint ( joint, limitMotor1, limitMotor2, limitMotor3 ) {\\n    \\n    this.cfm1=NaN;\\n    this.cfm2=NaN;\\n    this.cfm3=NaN;\\n    this.i1e00=NaN;\\n    this.i1e01=NaN;\\n    this.i1e02=NaN;\\n    this.i1e10=NaN;\\n    this.i1e11=NaN;\\n    this.i1e12=NaN;\\n    this.i1e20=NaN;\\n    this.i1e21=NaN;\\n    this.i1e22=NaN;\\n    this.i2e00=NaN;\\n    this.i2e01=NaN;\\n    this.i2e02=NaN;\\n    this.i2e10=NaN;\\n    this.i2e11=NaN;\\n    this.i2e12=NaN;\\n    this.i2e20=NaN;\\n    this.i2e21=NaN;\\n    this.i2e22=NaN;\\n    this.ax1=NaN;\\n    this.ay1=NaN;\\n    this.az1=NaN;\\n    this.ax2=NaN;\\n    this.ay2=NaN;\\n    this.az2=NaN;\\n    this.ax3=NaN;\\n    this.ay3=NaN;\\n    this.az3=NaN;\\n\\n    this.a1x1=NaN; // jacoians\\n    this.a1y1=NaN;\\n    this.a1z1=NaN;\\n    this.a2x1=NaN;\\n    this.a2y1=NaN;\\n    this.a2z1=NaN;\\n    this.a1x2=NaN;\\n    this.a1y2=NaN;\\n    this.a1z2=NaN;\\n    this.a2x2=NaN;\\n    this.a2y2=NaN;\\n    this.a2z2=NaN;\\n    this.a1x3=NaN;\\n    this.a1y3=NaN;\\n    this.a1z3=NaN;\\n    this.a2x3=NaN;\\n    this.a2y3=NaN;\\n    this.a2z3=NaN;\\n\\n    this.lowerLimit1=NaN;\\n    this.upperLimit1=NaN;\\n    this.limitVelocity1=NaN;\\n    this.limitState1=0; // -1: at lower, 0: locked, 1: at upper, 2: free\\n    this.enableMotor1=false;\\n    this.motorSpeed1=NaN;\\n    this.maxMotorForce1=NaN;\\n    this.maxMotorImpulse1=NaN;\\n    this.lowerLimit2=NaN;\\n    this.upperLimit2=NaN;\\n    this.limitVelocity2=NaN;\\n    this.limitState2=0; // -1: at lower, 0: locked, 1: at upper, 2: free\\n    this.enableMotor2=false;\\n    this.motorSpeed2=NaN;\\n    this.maxMotorForce2=NaN;\\n    this.maxMotorImpulse2=NaN;\\n    this.lowerLimit3=NaN;\\n    this.upperLimit3=NaN;\\n    this.limitVelocity3=NaN;\\n    this.limitState3=0; // -1: at lower, 0: locked, 1: at upper, 2: free\\n    this.enableMotor3=false;\\n    this.motorSpeed3=NaN;\\n    this.maxMotorForce3=NaN;\\n    this.maxMotorImpulse3=NaN;\\n\\n    this.k00=NaN; // K = J*M*JT\\n    this.k01=NaN;\\n    this.k02=NaN;\\n    this.k10=NaN;\\n    this.k11=NaN;\\n    this.k12=NaN;\\n    this.k20=NaN;\\n    this.k21=NaN;\\n    this.k22=NaN;\\n\\n    this.kv00=NaN; // diagonals without CFMs\\n    this.kv11=NaN;\\n    this.kv22=NaN;\\n\\n    this.dv00=NaN; // ...inverted\\n    this.dv11=NaN;\\n    this.dv22=NaN;\\n\\n    this.d00=NaN;  // K^-1\\n    this.d01=NaN;\\n    this.d02=NaN;\\n    this.d10=NaN;\\n    this.d11=NaN;\\n    this.d12=NaN;\\n    this.d20=NaN;\\n    this.d21=NaN;\\n    this.d22=NaN;\\n\\n    this.limitMotor1=limitMotor1;\\n    this.limitMotor2=limitMotor2;\\n    this.limitMotor3=limitMotor3;\\n    this.b1=joint.body1;\\n    this.b2=joint.body2;\\n    this.a1=this.b1.angularVelocity;\\n    this.a2=this.b2.angularVelocity;\\n    this.i1=this.b1.inverseInertia;\\n    this.i2=this.b2.inverseInertia;\\n    this.limitImpulse1=0;\\n    this.motorImpulse1=0;\\n    this.limitImpulse2=0;\\n    this.motorImpulse2=0;\\n    this.limitImpulse3=0;\\n    this.motorImpulse3=0;\\n\\n}\\n\\nObject.assign( Rotational3Constraint.prototype, {\\n\\n    Rotational3Constraint: true,\\n\\n    preSolve: function( timeStep, invTimeStep ){\\n\\n        this.ax1=this.limitMotor1.axis.x;\\n        this.ay1=this.limitMotor1.axis.y;\\n        this.az1=this.limitMotor1.axis.z;\\n        this.ax2=this.limitMotor2.axis.x;\\n        this.ay2=this.limitMotor2.axis.y;\\n        this.az2=this.limitMotor2.axis.z;\\n        this.ax3=this.limitMotor3.axis.x;\\n        this.ay3=this.limitMotor3.axis.y;\\n        this.az3=this.limitMotor3.axis.z;\\n        this.lowerLimit1=this.limitMotor1.lowerLimit;\\n        this.upperLimit1=this.limitMotor1.upperLimit;\\n        this.motorSpeed1=this.limitMotor1.motorSpeed;\\n        this.maxMotorForce1=this.limitMotor1.maxMotorForce;\\n        this.enableMotor1=this.maxMotorForce1>0;\\n        this.lowerLimit2=this.limitMotor2.lowerLimit;\\n        this.upperLimit2=this.limitMotor2.upperLimit;\\n        this.motorSpeed2=this.limitMotor2.motorSpeed;\\n        this.maxMotorForce2=this.limitMotor2.maxMotorForce;\\n        this.enableMotor2=this.maxMotorForce2>0;\\n        this.lowerLimit3=this.limitMotor3.lowerLimit;\\n        this.upperLimit3=this.limitMotor3.upperLimit;\\n        this.motorSpeed3=this.limitMotor3.motorSpeed;\\n        this.maxMotorForce3=this.limitMotor3.maxMotorForce;\\n        this.enableMotor3=this.maxMotorForce3>0;\\n\\n        var ti1 = this.i1.elements;\\n        var ti2 = this.i2.elements;\\n        this.i1e00=ti1[0];\\n        this.i1e01=ti1[1];\\n        this.i1e02=ti1[2];\\n        this.i1e10=ti1[3];\\n        this.i1e11=ti1[4];\\n        this.i1e12=ti1[5];\\n        this.i1e20=ti1[6];\\n        this.i1e21=ti1[7];\\n        this.i1e22=ti1[8];\\n\\n        this.i2e00=ti2[0];\\n        this.i2e01=ti2[1];\\n        this.i2e02=ti2[2];\\n        this.i2e10=ti2[3];\\n        this.i2e11=ti2[4];\\n        this.i2e12=ti2[5];\\n        this.i2e20=ti2[6];\\n        this.i2e21=ti2[7];\\n        this.i2e22=ti2[8];\\n\\n        var frequency1=this.limitMotor1.frequency;\\n        var frequency2=this.limitMotor2.frequency;\\n        var frequency3=this.limitMotor3.frequency;\\n        var enableSpring1=frequency1>0;\\n        var enableSpring2=frequency2>0;\\n        var enableSpring3=frequency3>0;\\n        var enableLimit1=this.lowerLimit1<=this.upperLimit1;\\n        var enableLimit2=this.lowerLimit2<=this.upperLimit2;\\n        var enableLimit3=this.lowerLimit3<=this.upperLimit3;\\n        var angle1=this.limitMotor1.angle;\\n        if(enableLimit1){\\n            if(this.lowerLimit1==this.upperLimit1){\\n                if(this.limitState1!=0){\\n                    this.limitState1=0;\\n                    this.limitImpulse1=0;\\n                }\\n                this.limitVelocity1=this.lowerLimit1-angle1;\\n            }else if(angle1<this.lowerLimit1){\\n                if(this.limitState1!=-1){\\n                    this.limitState1=-1;\\n                    this.limitImpulse1=0;\\n                }\\n                this.limitVelocity1=this.lowerLimit1-angle1;\\n            }else if(angle1>this.upperLimit1){\\n                if(this.limitState1!=1){\\n                    this.limitState1=1;\\n                    this.limitImpulse1=0;\\n                }\\n                this.limitVelocity1=this.upperLimit1-angle1;\\n            }else{\\n                this.limitState1=2;\\n                this.limitImpulse1=0;\\n                this.limitVelocity1=0;\\n            }\\n            if(!enableSpring1){\\n                if(this.limitVelocity1>0.02)this.limitVelocity1-=0.02;\\n                else if(this.limitVelocity1<-0.02)this.limitVelocity1+=0.02;\\n                else this.limitVelocity1=0;\\n            }\\n        }else{\\n            this.limitState1=2;\\n            this.limitImpulse1=0;\\n        }\\n\\n        var angle2=this.limitMotor2.angle;\\n        if(enableLimit2){\\n            if(this.lowerLimit2==this.upperLimit2){\\n                if(this.limitState2!=0){\\n                    this.limitState2=0;\\n                    this.limitImpulse2=0;\\n                }\\n                this.limitVelocity2=this.lowerLimit2-angle2;\\n            }else if(angle2<this.lowerLimit2){\\n                if(this.limitState2!=-1){\\n                    this.limitState2=-1;\\n                    this.limitImpulse2=0;\\n                }\\n                this.limitVelocity2=this.lowerLimit2-angle2;\\n            }else if(angle2>this.upperLimit2){\\n                if(this.limitState2!=1){\\n                    this.limitState2=1;\\n                    this.limitImpulse2=0;\\n                }\\n                this.limitVelocity2=this.upperLimit2-angle2;\\n            }else{\\n                this.limitState2=2;\\n                this.limitImpulse2=0;\\n                this.limitVelocity2=0;\\n            }\\n            if(!enableSpring2){\\n                if(this.limitVelocity2>0.02)this.limitVelocity2-=0.02;\\n                else if(this.limitVelocity2<-0.02)this.limitVelocity2+=0.02;\\n                else this.limitVelocity2=0;\\n            }\\n        }else{\\n            this.limitState2=2;\\n            this.limitImpulse2=0;\\n        }\\n\\n        var angle3=this.limitMotor3.angle;\\n        if(enableLimit3){\\n            if(this.lowerLimit3==this.upperLimit3){\\n                if(this.limitState3!=0){\\n                    this.limitState3=0;\\n                    this.limitImpulse3=0;\\n                }\\n                this.limitVelocity3=this.lowerLimit3-angle3;\\n            }else if(angle3<this.lowerLimit3){\\n                if(this.limitState3!=-1){\\n                    this.limitState3=-1;\\n                    this.limitImpulse3=0;\\n                }\\n                this.limitVelocity3=this.lowerLimit3-angle3;\\n            }else if(angle3>this.upperLimit3){\\n                if(this.limitState3!=1){\\n                    this.limitState3=1;\\n                    this.limitImpulse3=0;\\n                }\\n                this.limitVelocity3=this.upperLimit3-angle3;\\n            }else{\\n                this.limitState3=2;\\n                this.limitImpulse3=0;\\n                this.limitVelocity3=0;\\n                }\\n            if(!enableSpring3){\\n                if(this.limitVelocity3>0.02)this.limitVelocity3-=0.02;\\n                else if(this.limitVelocity3<-0.02)this.limitVelocity3+=0.02;\\n                else this.limitVelocity3=0;\\n            }\\n        }else{\\n            this.limitState3=2;\\n            this.limitImpulse3=0;\\n        }\\n\\n        if(this.enableMotor1&&(this.limitState1!=0||enableSpring1)){\\n            this.maxMotorImpulse1=this.maxMotorForce1*timeStep;\\n        }else{\\n            this.motorImpulse1=0;\\n            this.maxMotorImpulse1=0;\\n        }\\n        if(this.enableMotor2&&(this.limitState2!=0||enableSpring2)){\\n            this.maxMotorImpulse2=this.maxMotorForce2*timeStep;\\n        }else{\\n            this.motorImpulse2=0;\\n            this.maxMotorImpulse2=0;\\n        }\\n        if(this.enableMotor3&&(this.limitState3!=0||enableSpring3)){\\n            this.maxMotorImpulse3=this.maxMotorForce3*timeStep;\\n        }else{\\n            this.motorImpulse3=0;\\n            this.maxMotorImpulse3=0;\\n        }\\n\\n        // build jacobians\\n        this.a1x1=this.ax1*this.i1e00+this.ay1*this.i1e01+this.az1*this.i1e02;\\n        this.a1y1=this.ax1*this.i1e10+this.ay1*this.i1e11+this.az1*this.i1e12;\\n        this.a1z1=this.ax1*this.i1e20+this.ay1*this.i1e21+this.az1*this.i1e22;\\n        this.a2x1=this.ax1*this.i2e00+this.ay1*this.i2e01+this.az1*this.i2e02;\\n        this.a2y1=this.ax1*this.i2e10+this.ay1*this.i2e11+this.az1*this.i2e12;\\n        this.a2z1=this.ax1*this.i2e20+this.ay1*this.i2e21+this.az1*this.i2e22;\\n\\n        this.a1x2=this.ax2*this.i1e00+this.ay2*this.i1e01+this.az2*this.i1e02;\\n        this.a1y2=this.ax2*this.i1e10+this.ay2*this.i1e11+this.az2*this.i1e12;\\n        this.a1z2=this.ax2*this.i1e20+this.ay2*this.i1e21+this.az2*this.i1e22;\\n        this.a2x2=this.ax2*this.i2e00+this.ay2*this.i2e01+this.az2*this.i2e02;\\n        this.a2y2=this.ax2*this.i2e10+this.ay2*this.i2e11+this.az2*this.i2e12;\\n        this.a2z2=this.ax2*this.i2e20+this.ay2*this.i2e21+this.az2*this.i2e22;\\n\\n        this.a1x3=this.ax3*this.i1e00+this.ay3*this.i1e01+this.az3*this.i1e02;\\n        this.a1y3=this.ax3*this.i1e10+this.ay3*this.i1e11+this.az3*this.i1e12;\\n        this.a1z3=this.ax3*this.i1e20+this.ay3*this.i1e21+this.az3*this.i1e22;\\n        this.a2x3=this.ax3*this.i2e00+this.ay3*this.i2e01+this.az3*this.i2e02;\\n        this.a2y3=this.ax3*this.i2e10+this.ay3*this.i2e11+this.az3*this.i2e12;\\n        this.a2z3=this.ax3*this.i2e20+this.ay3*this.i2e21+this.az3*this.i2e22;\\n\\n        // build an impulse matrix\\n        this.k00=this.ax1*(this.a1x1+this.a2x1)+this.ay1*(this.a1y1+this.a2y1)+this.az1*(this.a1z1+this.a2z1);\\n        this.k01=this.ax1*(this.a1x2+this.a2x2)+this.ay1*(this.a1y2+this.a2y2)+this.az1*(this.a1z2+this.a2z2);\\n        this.k02=this.ax1*(this.a1x3+this.a2x3)+this.ay1*(this.a1y3+this.a2y3)+this.az1*(this.a1z3+this.a2z3);\\n        this.k10=this.ax2*(this.a1x1+this.a2x1)+this.ay2*(this.a1y1+this.a2y1)+this.az2*(this.a1z1+this.a2z1);\\n        this.k11=this.ax2*(this.a1x2+this.a2x2)+this.ay2*(this.a1y2+this.a2y2)+this.az2*(this.a1z2+this.a2z2);\\n        this.k12=this.ax2*(this.a1x3+this.a2x3)+this.ay2*(this.a1y3+this.a2y3)+this.az2*(this.a1z3+this.a2z3);\\n        this.k20=this.ax3*(this.a1x1+this.a2x1)+this.ay3*(this.a1y1+this.a2y1)+this.az3*(this.a1z1+this.a2z1);\\n        this.k21=this.ax3*(this.a1x2+this.a2x2)+this.ay3*(this.a1y2+this.a2y2)+this.az3*(this.a1z2+this.a2z2);\\n        this.k22=this.ax3*(this.a1x3+this.a2x3)+this.ay3*(this.a1y3+this.a2y3)+this.az3*(this.a1z3+this.a2z3);\\n\\n        this.kv00=this.k00;\\n        this.kv11=this.k11;\\n        this.kv22=this.k22;\\n        this.dv00=1/this.kv00;\\n        this.dv11=1/this.kv11;\\n        this.dv22=1/this.kv22;\\n\\n        if(enableSpring1&&this.limitState1!=2){\\n            var omega=6.2831853*frequency1;\\n            var k=omega*omega*timeStep;\\n            var dmp=invTimeStep/(k+2*this.limitMotor1.dampingRatio*omega);\\n            this.cfm1=this.kv00*dmp;\\n            this.limitVelocity1*=k*dmp;\\n        }else{\\n            this.cfm1=0;\\n            this.limitVelocity1*=invTimeStep*0.05;\\n        }\\n\\n        if(enableSpring2&&this.limitState2!=2){\\n            omega=6.2831853*frequency2;\\n            k=omega*omega*timeStep;\\n            dmp=invTimeStep/(k+2*this.limitMotor2.dampingRatio*omega);\\n            this.cfm2=this.kv11*dmp;\\n            this.limitVelocity2*=k*dmp;\\n        }else{\\n            this.cfm2=0;\\n            this.limitVelocity2*=invTimeStep*0.05;\\n        }\\n\\n        if(enableSpring3&&this.limitState3!=2){\\n            omega=6.2831853*frequency3;\\n            k=omega*omega*timeStep;\\n            dmp=invTimeStep/(k+2*this.limitMotor3.dampingRatio*omega);\\n            this.cfm3=this.kv22*dmp;\\n            this.limitVelocity3*=k*dmp;\\n        }else{\\n            this.cfm3=0;\\n            this.limitVelocity3*=invTimeStep*0.05;\\n        }\\n\\n        this.k00+=this.cfm1;\\n        this.k11+=this.cfm2;\\n        this.k22+=this.cfm3;\\n\\n        var inv=1/(\\n        this.k00*(this.k11*this.k22-this.k21*this.k12)+\\n        this.k10*(this.k21*this.k02-this.k01*this.k22)+\\n        this.k20*(this.k01*this.k12-this.k11*this.k02)\\n        );\\n        this.d00=(this.k11*this.k22-this.k12*this.k21)*inv;\\n        this.d01=(this.k02*this.k21-this.k01*this.k22)*inv;\\n        this.d02=(this.k01*this.k12-this.k02*this.k11)*inv;\\n        this.d10=(this.k12*this.k20-this.k10*this.k22)*inv;\\n        this.d11=(this.k00*this.k22-this.k02*this.k20)*inv;\\n        this.d12=(this.k02*this.k10-this.k00*this.k12)*inv;\\n        this.d20=(this.k10*this.k21-this.k11*this.k20)*inv;\\n        this.d21=(this.k01*this.k20-this.k00*this.k21)*inv;\\n        this.d22=(this.k00*this.k11-this.k01*this.k10)*inv;\\n        \\n        this.limitImpulse1*=0.95;\\n        this.motorImpulse1*=0.95;\\n        this.limitImpulse2*=0.95;\\n        this.motorImpulse2*=0.95;\\n        this.limitImpulse3*=0.95;\\n        this.motorImpulse3*=0.95;\\n        var totalImpulse1=this.limitImpulse1+this.motorImpulse1;\\n        var totalImpulse2=this.limitImpulse2+this.motorImpulse2;\\n        var totalImpulse3=this.limitImpulse3+this.motorImpulse3;\\n        this.a1.x+=totalImpulse1*this.a1x1+totalImpulse2*this.a1x2+totalImpulse3*this.a1x3;\\n        this.a1.y+=totalImpulse1*this.a1y1+totalImpulse2*this.a1y2+totalImpulse3*this.a1y3;\\n        this.a1.z+=totalImpulse1*this.a1z1+totalImpulse2*this.a1z2+totalImpulse3*this.a1z3;\\n        this.a2.x-=totalImpulse1*this.a2x1+totalImpulse2*this.a2x2+totalImpulse3*this.a2x3;\\n        this.a2.y-=totalImpulse1*this.a2y1+totalImpulse2*this.a2y2+totalImpulse3*this.a2y3;\\n        this.a2.z-=totalImpulse1*this.a2z1+totalImpulse2*this.a2z2+totalImpulse3*this.a2z3;\\n    },\\n    solve_:function(){\\n\\n        var rvx=this.a2.x-this.a1.x;\\n        var rvy=this.a2.y-this.a1.y;\\n        var rvz=this.a2.z-this.a1.z;\\n\\n        this.limitVelocity3=30;\\n        var rvn1=rvx*this.ax1+rvy*this.ay1+rvz*this.az1-this.limitVelocity1;\\n        var rvn2=rvx*this.ax2+rvy*this.ay2+rvz*this.az2-this.limitVelocity2;\\n        var rvn3=rvx*this.ax3+rvy*this.ay3+rvz*this.az3-this.limitVelocity3;\\n\\n        var dLimitImpulse1=rvn1*this.d00+rvn2*this.d01+rvn3*this.d02;\\n        var dLimitImpulse2=rvn1*this.d10+rvn2*this.d11+rvn3*this.d12;\\n        var dLimitImpulse3=rvn1*this.d20+rvn2*this.d21+rvn3*this.d22;\\n\\n        this.limitImpulse1+=dLimitImpulse1;\\n        this.limitImpulse2+=dLimitImpulse2;\\n        this.limitImpulse3+=dLimitImpulse3;\\n\\n        this.a1.x+=dLimitImpulse1*this.a1x1+dLimitImpulse2*this.a1x2+dLimitImpulse3*this.a1x3;\\n        this.a1.y+=dLimitImpulse1*this.a1y1+dLimitImpulse2*this.a1y2+dLimitImpulse3*this.a1y3;\\n        this.a1.z+=dLimitImpulse1*this.a1z1+dLimitImpulse2*this.a1z2+dLimitImpulse3*this.a1z3;\\n        this.a2.x-=dLimitImpulse1*this.a2x1+dLimitImpulse2*this.a2x2+dLimitImpulse3*this.a2x3;\\n        this.a2.y-=dLimitImpulse1*this.a2y1+dLimitImpulse2*this.a2y2+dLimitImpulse3*this.a2y3;\\n        this.a2.z-=dLimitImpulse1*this.a2z1+dLimitImpulse2*this.a2z2+dLimitImpulse3*this.a2z3;\\n    },\\n    solve:function(){\\n\\n        var rvx=this.a2.x-this.a1.x;\\n        var rvy=this.a2.y-this.a1.y;\\n        var rvz=this.a2.z-this.a1.z;\\n\\n        var rvn1=rvx*this.ax1+rvy*this.ay1+rvz*this.az1;\\n        var rvn2=rvx*this.ax2+rvy*this.ay2+rvz*this.az2;\\n        var rvn3=rvx*this.ax3+rvy*this.ay3+rvz*this.az3;\\n\\n        var oldMotorImpulse1=this.motorImpulse1;\\n        var oldMotorImpulse2=this.motorImpulse2;\\n        var oldMotorImpulse3=this.motorImpulse3;\\n\\n        var dMotorImpulse1=0;\\n        var dMotorImpulse2=0;\\n        var dMotorImpulse3=0;\\n\\n        if(this.enableMotor1){\\n            dMotorImpulse1=(rvn1-this.motorSpeed1)*this.dv00;\\n            this.motorImpulse1+=dMotorImpulse1;\\n            if(this.motorImpulse1>this.maxMotorImpulse1){ // clamp motor impulse\\n            this.motorImpulse1=this.maxMotorImpulse1;\\n            }else if(this.motorImpulse1<-this.maxMotorImpulse1){\\n            this.motorImpulse1=-this.maxMotorImpulse1;\\n            }\\n            dMotorImpulse1=this.motorImpulse1-oldMotorImpulse1;\\n        }\\n        if(this.enableMotor2){\\n            dMotorImpulse2=(rvn2-this.motorSpeed2)*this.dv11;\\n            this.motorImpulse2+=dMotorImpulse2;\\n            if(this.motorImpulse2>this.maxMotorImpulse2){ // clamp motor impulse\\n                this.motorImpulse2=this.maxMotorImpulse2;\\n            }else if(this.motorImpulse2<-this.maxMotorImpulse2){\\n                this.motorImpulse2=-this.maxMotorImpulse2;\\n            }\\n            dMotorImpulse2=this.motorImpulse2-oldMotorImpulse2;\\n        }\\n        if(this.enableMotor3){\\n            dMotorImpulse3=(rvn3-this.motorSpeed3)*this.dv22;\\n            this.motorImpulse3+=dMotorImpulse3;\\n            if(this.motorImpulse3>this.maxMotorImpulse3){ // clamp motor impulse\\n                this.motorImpulse3=this.maxMotorImpulse3;\\n            }else if(this.motorImpulse3<-this.maxMotorImpulse3){\\n                this.motorImpulse3=-this.maxMotorImpulse3;\\n            }\\n            dMotorImpulse3=this.motorImpulse3-oldMotorImpulse3;\\n        }\\n\\n        // apply motor impulse to relative velocity\\n        rvn1+=dMotorImpulse1*this.kv00+dMotorImpulse2*this.k01+dMotorImpulse3*this.k02;\\n        rvn2+=dMotorImpulse1*this.k10+dMotorImpulse2*this.kv11+dMotorImpulse3*this.k12;\\n        rvn3+=dMotorImpulse1*this.k20+dMotorImpulse2*this.k21+dMotorImpulse3*this.kv22;\\n\\n        // subtract target velocity and applied impulse\\n        rvn1-=this.limitVelocity1+this.limitImpulse1*this.cfm1;\\n        rvn2-=this.limitVelocity2+this.limitImpulse2*this.cfm2;\\n        rvn3-=this.limitVelocity3+this.limitImpulse3*this.cfm3;\\n\\n        var oldLimitImpulse1=this.limitImpulse1;\\n        var oldLimitImpulse2=this.limitImpulse2;\\n        var oldLimitImpulse3=this.limitImpulse3;\\n\\n        var dLimitImpulse1=rvn1*this.d00+rvn2*this.d01+rvn3*this.d02;\\n        var dLimitImpulse2=rvn1*this.d10+rvn2*this.d11+rvn3*this.d12;\\n        var dLimitImpulse3=rvn1*this.d20+rvn2*this.d21+rvn3*this.d22;\\n\\n        this.limitImpulse1+=dLimitImpulse1;\\n        this.limitImpulse2+=dLimitImpulse2;\\n        this.limitImpulse3+=dLimitImpulse3;\\n\\n        // clamp\\n        var clampState=0;\\n        if(this.limitState1==2||this.limitImpulse1*this.limitState1<0){\\n            dLimitImpulse1=-oldLimitImpulse1;\\n            rvn2+=dLimitImpulse1*this.k10;\\n            rvn3+=dLimitImpulse1*this.k20;\\n            clampState|=1;\\n        }\\n        if(this.limitState2==2||this.limitImpulse2*this.limitState2<0){\\n            dLimitImpulse2=-oldLimitImpulse2;\\n            rvn1+=dLimitImpulse2*this.k01;\\n            rvn3+=dLimitImpulse2*this.k21;\\n            clampState|=2;\\n        }\\n        if(this.limitState3==2||this.limitImpulse3*this.limitState3<0){\\n            dLimitImpulse3=-oldLimitImpulse3;\\n            rvn1+=dLimitImpulse3*this.k02;\\n            rvn2+=dLimitImpulse3*this.k12;\\n            clampState|=4;\\n        }\\n\\n        // update un-clamped impulse\\n        // TODO: isolate division\\n        var det;\\n        switch(clampState){\\n            case 1: // update 2 3\\n            det=1/(this.k11*this.k22-this.k12*this.k21);\\n            dLimitImpulse2=(this.k22*rvn2+-this.k12*rvn3)*det;\\n            dLimitImpulse3=(-this.k21*rvn2+this.k11*rvn3)*det;\\n            break;\\n            case 2: // update 1 3\\n            det=1/(this.k00*this.k22-this.k02*this.k20);\\n            dLimitImpulse1=(this.k22*rvn1+-this.k02*rvn3)*det;\\n            dLimitImpulse3=(-this.k20*rvn1+this.k00*rvn3)*det;\\n            break;\\n            case 3: // update 3\\n            dLimitImpulse3=rvn3/this.k22;\\n            break;\\n            case 4: // update 1 2\\n            det=1/(this.k00*this.k11-this.k01*this.k10);\\n            dLimitImpulse1=(this.k11*rvn1+-this.k01*rvn2)*det;\\n            dLimitImpulse2=(-this.k10*rvn1+this.k00*rvn2)*det;\\n            break;\\n            case 5: // update 2\\n            dLimitImpulse2=rvn2/this.k11;\\n            break;\\n            case 6: // update 1\\n            dLimitImpulse1=rvn1/this.k00;\\n            break;\\n        }\\n\\n        this.limitImpulse1=dLimitImpulse1+oldLimitImpulse1;\\n        this.limitImpulse2=dLimitImpulse2+oldLimitImpulse2;\\n        this.limitImpulse3=dLimitImpulse3+oldLimitImpulse3;\\n\\n        var dImpulse1=dMotorImpulse1+dLimitImpulse1;\\n        var dImpulse2=dMotorImpulse2+dLimitImpulse2;\\n        var dImpulse3=dMotorImpulse3+dLimitImpulse3;\\n\\n        // apply impulse\\n        this.a1.x+=dImpulse1*this.a1x1+dImpulse2*this.a1x2+dImpulse3*this.a1x3;\\n        this.a1.y+=dImpulse1*this.a1y1+dImpulse2*this.a1y2+dImpulse3*this.a1y3;\\n        this.a1.z+=dImpulse1*this.a1z1+dImpulse2*this.a1z2+dImpulse3*this.a1z3;\\n        this.a2.x-=dImpulse1*this.a2x1+dImpulse2*this.a2x2+dImpulse3*this.a2x3;\\n        this.a2.y-=dImpulse1*this.a2y1+dImpulse2*this.a2y2+dImpulse3*this.a2y3;\\n        this.a2.z-=dImpulse1*this.a2z1+dImpulse2*this.a2z2+dImpulse3*this.a2z3;\\n        rvx=this.a2.x-this.a1.x;\\n        rvy=this.a2.y-this.a1.y;\\n        rvz=this.a2.z-this.a1.z;\\n\\n        rvn2=rvx*this.ax2+rvy*this.ay2+rvz*this.az2;\\n    }\\n    \\n} );\\n\\n/**\\n * A hinge joint allows only for relative rotation of rigid bodies along the axis.\\n *\\n * @author saharan\\n * @author lo-th\\n */\\n\\nfunction HingeJoint ( config, lowerAngleLimit, upperAngleLimit ) {\\n\\n    Joint.call( this, config );\\n\\n    this.type = JOINT_HINGE;\\n\\n    // The axis in the first body's coordinate system.\\n    this.localAxis1 = config.localAxis1.clone().normalize();\\n    // The axis in the second body's coordinate system.\\n    this.localAxis2 = config.localAxis2.clone().normalize();\\n\\n    // make angle axis\\n    var arc = new Mat33().setQuat( new Quat().setFromUnitVectors( this.localAxis1, this.localAxis2 ) );\\n    this.localAngle1 = new Vec3().tangent( this.localAxis1 ).normalize();\\n    this.localAngle2 = this.localAngle1.clone().applyMatrix3( arc, true );\\n\\n    this.ax1 = new Vec3();\\n    this.ax2 = new Vec3();\\n    this.an1 = new Vec3();\\n    this.an2 = new Vec3();\\n\\n    this.tmp = new Vec3();\\n\\n    this.nor = new Vec3();\\n    this.tan = new Vec3();\\n    this.bin = new Vec3();\\n\\n    // The rotational limit and motor information of the joint.\\n    this.limitMotor = new LimitMotor( this.nor, false );\\n    this.limitMotor.lowerLimit = lowerAngleLimit;\\n    this.limitMotor.upperLimit = upperAngleLimit;\\n\\n    this.lc = new LinearConstraint( this );\\n    this.r3 = new Rotational3Constraint( this, this.limitMotor, new LimitMotor( this.tan, true ), new LimitMotor( this.bin, true ) );\\n}\\n\\nHingeJoint.prototype = Object.assign( Object.create( Joint.prototype ), {\\n\\n    constructor: HingeJoint,\\n\\n\\n    preSolve: function ( timeStep, invTimeStep ) {\\n\\n        this.updateAnchorPoints();\\n\\n        this.ax1.copy( this.localAxis1 ).applyMatrix3( this.body1.rotation, true );\\n        this.ax2.copy( this.localAxis2 ).applyMatrix3( this.body2.rotation, true );\\n\\n        this.an1.copy( this.localAngle1 ).applyMatrix3( this.body1.rotation, true );\\n        this.an2.copy( this.localAngle2 ).applyMatrix3( this.body2.rotation, true );\\n\\n        // normal tangent binormal\\n\\n        this.nor.set(\\n            this.ax1.x*this.body2.inverseMass + this.ax2.x*this.body1.inverseMass,\\n            this.ax1.y*this.body2.inverseMass + this.ax2.y*this.body1.inverseMass,\\n            this.ax1.z*this.body2.inverseMass + this.ax2.z*this.body1.inverseMass\\n        ).normalize();\\n\\n        this.tan.tangent( this.nor ).normalize();\\n\\n        this.bin.crossVectors( this.nor, this.tan );\\n\\n        // calculate hinge angle\\n\\n        var limite = _Math.acosClamp( _Math.dotVectors( this.an1, this.an2 ) );\\n\\n        this.tmp.crossVectors( this.an1, this.an2 );\\n\\n        if( _Math.dotVectors( this.nor, this.tmp ) < 0 ) this.limitMotor.angle = -limite;\\n        else this.limitMotor.angle = limite;\\n\\n        this.tmp.crossVectors( this.ax1, this.ax2 );\\n\\n        this.r3.limitMotor2.angle = _Math.dotVectors( this.tan, this.tmp );\\n        this.r3.limitMotor3.angle = _Math.dotVectors( this.bin, this.tmp );\\n\\n        // preSolve\\n        \\n        this.r3.preSolve( timeStep, invTimeStep );\\n        this.lc.preSolve( timeStep, invTimeStep );\\n\\n    },\\n\\n    solve: function () {\\n\\n        this.r3.solve();\\n        this.lc.solve();\\n\\n    },\\n\\n    postSolve: function () {\\n\\n    }\\n\\n});\\n\\n/**\\n * A ball-and-socket joint limits relative translation on two anchor points on rigid bodies.\\n *\\n * @author saharan\\n * @author lo-th\\n */\\n\\nfunction BallAndSocketJoint ( config ){\\n\\n    Joint.call( this, config );\\n\\n    this.type = JOINT_BALL_AND_SOCKET;\\n    \\n    this.lc = new LinearConstraint( this );\\n\\n}\\n\\nBallAndSocketJoint.prototype = Object.assign( Object.create( Joint.prototype ), {\\n\\n    constructor: BallAndSocketJoint,\\n\\n    preSolve: function ( timeStep, invTimeStep ) {\\n\\n        this.updateAnchorPoints();\\n\\n        // preSolve\\n\\n        this.lc.preSolve( timeStep, invTimeStep );\\n\\n    },\\n\\n    solve: function () {\\n\\n        this.lc.solve();\\n\\n    },\\n\\n    postSolve: function () {\\n\\n    }\\n\\n});\\n\\n/**\\n* A translational constraint for various joints.\\n* @author saharan\\n*/\\nfunction TranslationalConstraint ( joint, limitMotor ){\\n    this.cfm=NaN;\\n    this.m1=NaN;\\n    this.m2=NaN;\\n    this.i1e00=NaN;\\n    this.i1e01=NaN;\\n    this.i1e02=NaN;\\n    this.i1e10=NaN;\\n    this.i1e11=NaN;\\n    this.i1e12=NaN;\\n    this.i1e20=NaN;\\n    this.i1e21=NaN;\\n    this.i1e22=NaN;\\n    this.i2e00=NaN;\\n    this.i2e01=NaN;\\n    this.i2e02=NaN;\\n    this.i2e10=NaN;\\n    this.i2e11=NaN;\\n    this.i2e12=NaN;\\n    this.i2e20=NaN;\\n    this.i2e21=NaN;\\n    this.i2e22=NaN;\\n    this.motorDenom=NaN;\\n    this.invMotorDenom=NaN;\\n    this.invDenom=NaN;\\n    this.ax=NaN;\\n    this.ay=NaN;\\n    this.az=NaN;\\n    this.r1x=NaN;\\n    this.r1y=NaN;\\n    this.r1z=NaN;\\n    this.r2x=NaN;\\n    this.r2y=NaN;\\n    this.r2z=NaN;\\n    this.t1x=NaN;\\n    this.t1y=NaN;\\n    this.t1z=NaN;\\n    this.t2x=NaN;\\n    this.t2y=NaN;\\n    this.t2z=NaN;\\n    this.l1x=NaN;\\n    this.l1y=NaN;\\n    this.l1z=NaN;\\n    this.l2x=NaN;\\n    this.l2y=NaN;\\n    this.l2z=NaN;\\n    this.a1x=NaN;\\n    this.a1y=NaN;\\n    this.a1z=NaN;\\n    this.a2x=NaN;\\n    this.a2y=NaN;\\n    this.a2z=NaN;\\n    this.lowerLimit=NaN;\\n    this.upperLimit=NaN;\\n    this.limitVelocity=NaN;\\n    this.limitState=0; // -1: at lower, 0: locked, 1: at upper, 2: free\\n    this.enableMotor=false;\\n    this.motorSpeed=NaN;\\n    this.maxMotorForce=NaN;\\n    this.maxMotorImpulse=NaN;\\n\\n    this.limitMotor=limitMotor;\\n    this.b1=joint.body1;\\n    this.b2=joint.body2;\\n    this.p1=joint.anchorPoint1;\\n    this.p2=joint.anchorPoint2;\\n    this.r1=joint.relativeAnchorPoint1;\\n    this.r2=joint.relativeAnchorPoint2;\\n    this.l1=this.b1.linearVelocity;\\n    this.l2=this.b2.linearVelocity;\\n    this.a1=this.b1.angularVelocity;\\n    this.a2=this.b2.angularVelocity;\\n    this.i1=this.b1.inverseInertia;\\n    this.i2=this.b2.inverseInertia;\\n    this.limitImpulse=0;\\n    this.motorImpulse=0;\\n}\\n\\nObject.assign( TranslationalConstraint.prototype, {\\n\\n    TranslationalConstraint: true,\\n\\n    preSolve:function(timeStep,invTimeStep){\\n        this.ax=this.limitMotor.axis.x;\\n        this.ay=this.limitMotor.axis.y;\\n        this.az=this.limitMotor.axis.z;\\n        this.lowerLimit=this.limitMotor.lowerLimit;\\n        this.upperLimit=this.limitMotor.upperLimit;\\n        this.motorSpeed=this.limitMotor.motorSpeed;\\n        this.maxMotorForce=this.limitMotor.maxMotorForce;\\n        this.enableMotor=this.maxMotorForce>0;\\n        this.m1=this.b1.inverseMass;\\n        this.m2=this.b2.inverseMass;\\n\\n        var ti1 = this.i1.elements;\\n        var ti2 = this.i2.elements;\\n        this.i1e00=ti1[0];\\n        this.i1e01=ti1[1];\\n        this.i1e02=ti1[2];\\n        this.i1e10=ti1[3];\\n        this.i1e11=ti1[4];\\n        this.i1e12=ti1[5];\\n        this.i1e20=ti1[6];\\n        this.i1e21=ti1[7];\\n        this.i1e22=ti1[8];\\n\\n        this.i2e00=ti2[0];\\n        this.i2e01=ti2[1];\\n        this.i2e02=ti2[2];\\n        this.i2e10=ti2[3];\\n        this.i2e11=ti2[4];\\n        this.i2e12=ti2[5];\\n        this.i2e20=ti2[6];\\n        this.i2e21=ti2[7];\\n        this.i2e22=ti2[8];\\n\\n        var dx=this.p2.x-this.p1.x;\\n        var dy=this.p2.y-this.p1.y;\\n        var dz=this.p2.z-this.p1.z;\\n        var d=dx*this.ax+dy*this.ay+dz*this.az;\\n        var frequency=this.limitMotor.frequency;\\n        var enableSpring=frequency>0;\\n        var enableLimit=this.lowerLimit<=this.upperLimit;\\n        if(enableSpring&&d>20||d<-20){\\n            enableSpring=false;\\n        }\\n\\n        if(enableLimit){\\n            if(this.lowerLimit==this.upperLimit){\\n                if(this.limitState!=0){\\n                    this.limitState=0;\\n                    this.limitImpulse=0;\\n                }\\n                this.limitVelocity=this.lowerLimit-d;\\n                if(!enableSpring)d=this.lowerLimit;\\n            }else if(d<this.lowerLimit){\\n                if(this.limitState!=-1){\\n                    this.limitState=-1;\\n                    this.limitImpulse=0;\\n                }\\n                this.limitVelocity=this.lowerLimit-d;\\n                if(!enableSpring)d=this.lowerLimit;\\n            }else if(d>this.upperLimit){\\n                if(this.limitState!=1){\\n                    this.limitState=1;\\n                    this.limitImpulse=0;\\n                }\\n                this.limitVelocity=this.upperLimit-d;\\n                if(!enableSpring)d=this.upperLimit;\\n            }else{\\n                this.limitState=2;\\n                this.limitImpulse=0;\\n                this.limitVelocity=0;\\n            }\\n            if(!enableSpring){\\n                if(this.limitVelocity>0.005)this.limitVelocity-=0.005;\\n                else if(this.limitVelocity<-0.005)this.limitVelocity+=0.005;\\n                else this.limitVelocity=0;\\n            }\\n        }else{\\n            this.limitState=2;\\n            this.limitImpulse=0;\\n        }\\n\\n        if(this.enableMotor&&(this.limitState!=0||enableSpring)){\\n            this.maxMotorImpulse=this.maxMotorForce*timeStep;\\n        }else{\\n            this.motorImpulse=0;\\n            this.maxMotorImpulse=0;\\n        }\\n\\n        var rdx=d*this.ax;\\n        var rdy=d*this.ay;\\n        var rdz=d*this.az;\\n        var w1=this.m1/(this.m1+this.m2);\\n        var w2=1-w1;\\n        this.r1x=this.r1.x+rdx*w1;\\n        this.r1y=this.r1.y+rdy*w1;\\n        this.r1z=this.r1.z+rdz*w1;\\n        this.r2x=this.r2.x-rdx*w2;\\n        this.r2y=this.r2.y-rdy*w2;\\n        this.r2z=this.r2.z-rdz*w2;\\n\\n        this.t1x=this.r1y*this.az-this.r1z*this.ay;\\n        this.t1y=this.r1z*this.ax-this.r1x*this.az;\\n        this.t1z=this.r1x*this.ay-this.r1y*this.ax;\\n        this.t2x=this.r2y*this.az-this.r2z*this.ay;\\n        this.t2y=this.r2z*this.ax-this.r2x*this.az;\\n        this.t2z=this.r2x*this.ay-this.r2y*this.ax;\\n        this.l1x=this.ax*this.m1;\\n        this.l1y=this.ay*this.m1;\\n        this.l1z=this.az*this.m1;\\n        this.l2x=this.ax*this.m2;\\n        this.l2y=this.ay*this.m2;\\n        this.l2z=this.az*this.m2;\\n        this.a1x=this.t1x*this.i1e00+this.t1y*this.i1e01+this.t1z*this.i1e02;\\n        this.a1y=this.t1x*this.i1e10+this.t1y*this.i1e11+this.t1z*this.i1e12;\\n        this.a1z=this.t1x*this.i1e20+this.t1y*this.i1e21+this.t1z*this.i1e22;\\n        this.a2x=this.t2x*this.i2e00+this.t2y*this.i2e01+this.t2z*this.i2e02;\\n        this.a2y=this.t2x*this.i2e10+this.t2y*this.i2e11+this.t2z*this.i2e12;\\n        this.a2z=this.t2x*this.i2e20+this.t2y*this.i2e21+this.t2z*this.i2e22;\\n        this.motorDenom=\\n        this.m1+this.m2+\\n            this.ax*(this.a1y*this.r1z-this.a1z*this.r1y+this.a2y*this.r2z-this.a2z*this.r2y)+\\n            this.ay*(this.a1z*this.r1x-this.a1x*this.r1z+this.a2z*this.r2x-this.a2x*this.r2z)+\\n            this.az*(this.a1x*this.r1y-this.a1y*this.r1x+this.a2x*this.r2y-this.a2y*this.r2x);\\n\\n        this.invMotorDenom=1/this.motorDenom;\\n\\n        if(enableSpring&&this.limitState!=2){\\n            var omega=6.2831853*frequency;\\n            var k=omega*omega*timeStep;\\n            var dmp=invTimeStep/(k+2*this.limitMotor.dampingRatio*omega);\\n            this.cfm=this.motorDenom*dmp;\\n            this.limitVelocity*=k*dmp;\\n        }else{\\n            this.cfm=0;\\n            this.limitVelocity*=invTimeStep*0.05;\\n        }\\n\\n        this.invDenom=1/(this.motorDenom+this.cfm);\\n\\n        var totalImpulse=this.limitImpulse+this.motorImpulse;\\n        this.l1.x+=totalImpulse*this.l1x;\\n        this.l1.y+=totalImpulse*this.l1y;\\n        this.l1.z+=totalImpulse*this.l1z;\\n        this.a1.x+=totalImpulse*this.a1x;\\n        this.a1.y+=totalImpulse*this.a1y;\\n        this.a1.z+=totalImpulse*this.a1z;\\n        this.l2.x-=totalImpulse*this.l2x;\\n        this.l2.y-=totalImpulse*this.l2y;\\n        this.l2.z-=totalImpulse*this.l2z;\\n        this.a2.x-=totalImpulse*this.a2x;\\n        this.a2.y-=totalImpulse*this.a2y;\\n        this.a2.z-=totalImpulse*this.a2z;\\n    },\\n    solve:function(){\\n        var rvn=\\n            this.ax*(this.l2.x-this.l1.x)+this.ay*(this.l2.y-this.l1.y)+this.az*(this.l2.z-this.l1.z)+\\n            this.t2x*this.a2.x-this.t1x*this.a1.x+this.t2y*this.a2.y-this.t1y*this.a1.y+this.t2z*this.a2.z-this.t1z*this.a1.z;\\n\\n        // motor part\\n        var newMotorImpulse;\\n        if(this.enableMotor){\\n            newMotorImpulse=(rvn-this.motorSpeed)*this.invMotorDenom;\\n            var oldMotorImpulse=this.motorImpulse;\\n            this.motorImpulse+=newMotorImpulse;\\n            if(this.motorImpulse>this.maxMotorImpulse)this.motorImpulse=this.maxMotorImpulse;\\n            else if(this.motorImpulse<-this.maxMotorImpulse)this.motorImpulse=-this.maxMotorImpulse;\\n            newMotorImpulse=this.motorImpulse-oldMotorImpulse;\\n            rvn-=newMotorImpulse*this.motorDenom;\\n        }else newMotorImpulse=0;\\n\\n        // limit part\\n        var newLimitImpulse;\\n        if(this.limitState!=2){\\n            newLimitImpulse=(rvn-this.limitVelocity-this.limitImpulse*this.cfm)*this.invDenom;\\n            var oldLimitImpulse=this.limitImpulse;\\n            this.limitImpulse+=newLimitImpulse;\\n            if(this.limitImpulse*this.limitState<0)this.limitImpulse=0;\\n            newLimitImpulse=this.limitImpulse-oldLimitImpulse;\\n        }else newLimitImpulse=0;\\n        \\n        var totalImpulse=newLimitImpulse+newMotorImpulse;\\n        this.l1.x+=totalImpulse*this.l1x;\\n        this.l1.y+=totalImpulse*this.l1y;\\n        this.l1.z+=totalImpulse*this.l1z;\\n        this.a1.x+=totalImpulse*this.a1x;\\n        this.a1.y+=totalImpulse*this.a1y;\\n        this.a1.z+=totalImpulse*this.a1z;\\n        this.l2.x-=totalImpulse*this.l2x;\\n        this.l2.y-=totalImpulse*this.l2y;\\n        this.l2.z-=totalImpulse*this.l2z;\\n        this.a2.x-=totalImpulse*this.a2x;\\n        this.a2.y-=totalImpulse*this.a2y;\\n        this.a2.z-=totalImpulse*this.a2z;\\n    }\\n} );\\n\\n/**\\n * A distance joint limits the distance between two anchor points on rigid bodies.\\n *\\n * @author saharan\\n * @author lo-th\\n */\\n\\nfunction DistanceJoint ( config, minDistance, maxDistance ){\\n\\n    Joint.call( this, config );\\n\\n    this.type = JOINT_DISTANCE;\\n    \\n    this.nor = new Vec3();\\n\\n    // The limit and motor information of the joint.\\n    this.limitMotor = new LimitMotor( this.nor, true );\\n    this.limitMotor.lowerLimit = minDistance;\\n    this.limitMotor.upperLimit = maxDistance;\\n\\n    this.t = new TranslationalConstraint( this, this.limitMotor );\\n\\n}\\n\\nDistanceJoint.prototype = Object.assign( Object.create( Joint.prototype ), {\\n\\n    constructor: DistanceJoint,\\n\\n    preSolve: function ( timeStep, invTimeStep ) {\\n\\n        this.updateAnchorPoints();\\n\\n        this.nor.sub( this.anchorPoint2, this.anchorPoint1 ).normalize();\\n\\n        // preSolve\\n\\n        this.t.preSolve( timeStep, invTimeStep );\\n\\n    },\\n\\n    solve: function () {\\n\\n        this.t.solve();\\n\\n    },\\n\\n    postSolve: function () {\\n\\n    }\\n\\n});\\n\\n/**\\n* An angular constraint for all axes for various joints.\\n* @author saharan\\n*/\\n\\nfunction AngularConstraint( joint, targetOrientation ) {\\n\\n    this.joint = joint;\\n\\n    this.targetOrientation = new Quat().invert( targetOrientation );\\n\\n    this.relativeOrientation = new Quat();\\n\\n    this.ii1 = null;\\n    this.ii2 = null;\\n    this.dd = null;\\n\\n    this.vel = new Vec3();\\n    this.imp = new Vec3();\\n\\n    this.rn0 = new Vec3();\\n    this.rn1 = new Vec3();\\n    this.rn2 = new Vec3();\\n\\n    this.b1 = joint.body1;\\n    this.b2 = joint.body2;\\n    this.a1 = this.b1.angularVelocity;\\n    this.a2 = this.b2.angularVelocity;\\n    this.i1 = this.b1.inverseInertia;\\n    this.i2 = this.b2.inverseInertia;\\n\\n}\\n\\nObject.assign( AngularConstraint.prototype, {\\n\\n    AngularConstraint: true,\\n\\n    preSolve: function ( timeStep, invTimeStep ) {\\n\\n        var inv, len, v;\\n\\n        this.ii1 = this.i1.clone();\\n        this.ii2 = this.i2.clone();\\n\\n        v = new Mat33().add(this.ii1, this.ii2).elements;\\n        inv = 1/( v[0]*(v[4]*v[8]-v[7]*v[5])  +  v[3]*(v[7]*v[2]-v[1]*v[8])  +  v[6]*(v[1]*v[5]-v[4]*v[2]) );\\n        this.dd = new Mat33().set(\\n            v[4]*v[8]-v[5]*v[7], v[2]*v[7]-v[1]*v[8], v[1]*v[5]-v[2]*v[4],\\n            v[5]*v[6]-v[3]*v[8], v[0]*v[8]-v[2]*v[6], v[2]*v[3]-v[0]*v[5],\\n            v[3]*v[7]-v[4]*v[6], v[1]*v[6]-v[0]*v[7], v[0]*v[4]-v[1]*v[3]\\n        ).multiplyScalar( inv );\\n        \\n        this.relativeOrientation.invert( this.b1.orientation ).multiply( this.targetOrientation ).multiply( this.b2.orientation );\\n\\n        inv = this.relativeOrientation.w*2;\\n\\n        this.vel.copy( this.relativeOrientation ).multiplyScalar( inv );\\n\\n        len = this.vel.length();\\n\\n        if( len > 0.02 ) {\\n            len = (0.02-len)/len*invTimeStep*0.05;\\n            this.vel.multiplyScalar( len );\\n        }else{\\n            this.vel.set(0,0,0);\\n        }\\n\\n        this.rn1.copy( this.imp ).applyMatrix3( this.ii1, true );\\n        this.rn2.copy( this.imp ).applyMatrix3( this.ii2, true );\\n\\n        this.a1.add( this.rn1 );\\n        this.a2.sub( this.rn2 );\\n\\n    },\\n\\n    solve: function () {\\n\\n        var r = this.a2.clone().sub( this.a1 ).sub( this.vel );\\n\\n        this.rn0.copy( r ).applyMatrix3( this.dd, true );\\n        this.rn1.copy( this.rn0 ).applyMatrix3( this.ii1, true );\\n        this.rn2.copy( this.rn0 ).applyMatrix3( this.ii2, true );\\n\\n        this.imp.add( this.rn0 );\\n        this.a1.add( this.rn1 );\\n        this.a2.sub( this.rn2 );\\n\\n    }\\n\\n} );\\n\\n/**\\n* A three-axis translational constraint for various joints.\\n* @author saharan\\n*/\\nfunction Translational3Constraint (joint,limitMotor1,limitMotor2,limitMotor3){\\n\\n    this.m1=NaN;\\n    this.m2=NaN;\\n    this.i1e00=NaN;\\n    this.i1e01=NaN;\\n    this.i1e02=NaN;\\n    this.i1e10=NaN;\\n    this.i1e11=NaN;\\n    this.i1e12=NaN;\\n    this.i1e20=NaN;\\n    this.i1e21=NaN;\\n    this.i1e22=NaN;\\n    this.i2e00=NaN;\\n    this.i2e01=NaN;\\n    this.i2e02=NaN;\\n    this.i2e10=NaN;\\n    this.i2e11=NaN;\\n    this.i2e12=NaN;\\n    this.i2e20=NaN;\\n    this.i2e21=NaN;\\n    this.i2e22=NaN;\\n    this.ax1=NaN;\\n    this.ay1=NaN;\\n    this.az1=NaN;\\n    this.ax2=NaN;\\n    this.ay2=NaN;\\n    this.az2=NaN;\\n    this.ax3=NaN;\\n    this.ay3=NaN;\\n    this.az3=NaN;\\n    this.r1x=NaN;\\n    this.r1y=NaN;\\n    this.r1z=NaN;\\n    this.r2x=NaN;\\n    this.r2y=NaN;\\n    this.r2z=NaN;\\n    this.t1x1=NaN;// jacobians\\n    this.t1y1=NaN;\\n    this.t1z1=NaN;\\n    this.t2x1=NaN;\\n    this.t2y1=NaN;\\n    this.t2z1=NaN;\\n    this.l1x1=NaN;\\n    this.l1y1=NaN;\\n    this.l1z1=NaN;\\n    this.l2x1=NaN;\\n    this.l2y1=NaN;\\n    this.l2z1=NaN;\\n    this.a1x1=NaN;\\n    this.a1y1=NaN;\\n    this.a1z1=NaN;\\n    this.a2x1=NaN;\\n    this.a2y1=NaN;\\n    this.a2z1=NaN;\\n    this.t1x2=NaN;\\n    this.t1y2=NaN;\\n    this.t1z2=NaN;\\n    this.t2x2=NaN;\\n    this.t2y2=NaN;\\n    this.t2z2=NaN;\\n    this.l1x2=NaN;\\n    this.l1y2=NaN;\\n    this.l1z2=NaN;\\n    this.l2x2=NaN;\\n    this.l2y2=NaN;\\n    this.l2z2=NaN;\\n    this.a1x2=NaN;\\n    this.a1y2=NaN;\\n    this.a1z2=NaN;\\n    this.a2x2=NaN;\\n    this.a2y2=NaN;\\n    this.a2z2=NaN;\\n    this.t1x3=NaN;\\n    this.t1y3=NaN;\\n    this.t1z3=NaN;\\n    this.t2x3=NaN;\\n    this.t2y3=NaN;\\n    this.t2z3=NaN;\\n    this.l1x3=NaN;\\n    this.l1y3=NaN;\\n    this.l1z3=NaN;\\n    this.l2x3=NaN;\\n    this.l2y3=NaN;\\n    this.l2z3=NaN;\\n    this.a1x3=NaN;\\n    this.a1y3=NaN;\\n    this.a1z3=NaN;\\n    this.a2x3=NaN;\\n    this.a2y3=NaN;\\n    this.a2z3=NaN;\\n    this.lowerLimit1=NaN;\\n    this.upperLimit1=NaN;\\n    this.limitVelocity1=NaN;\\n    this.limitState1=0; // -1: at lower, 0: locked, 1: at upper, 2: unlimited\\n    this.enableMotor1=false;\\n    this.motorSpeed1=NaN;\\n    this.maxMotorForce1=NaN;\\n    this.maxMotorImpulse1=NaN;\\n    this.lowerLimit2=NaN;\\n    this.upperLimit2=NaN;\\n    this.limitVelocity2=NaN;\\n    this.limitState2=0; // -1: at lower, 0: locked, 1: at upper, 2: unlimited\\n    this.enableMotor2=false;\\n    this.motorSpeed2=NaN;\\n    this.maxMotorForce2=NaN;\\n    this.maxMotorImpulse2=NaN;\\n    this.lowerLimit3=NaN;\\n    this.upperLimit3=NaN;\\n    this.limitVelocity3=NaN;\\n    this.limitState3=0; // -1: at lower, 0: locked, 1: at upper, 2: unlimited\\n    this.enableMotor3=false;\\n    this.motorSpeed3=NaN;\\n    this.maxMotorForce3=NaN;\\n    this.maxMotorImpulse3=NaN;\\n    this.k00=NaN; // K = J*M*JT\\n    this.k01=NaN;\\n    this.k02=NaN;\\n    this.k10=NaN;\\n    this.k11=NaN;\\n    this.k12=NaN;\\n    this.k20=NaN;\\n    this.k21=NaN;\\n    this.k22=NaN;\\n    this.kv00=NaN; // diagonals without CFMs\\n    this.kv11=NaN;\\n    this.kv22=NaN;\\n    this.dv00=NaN; // ...inverted\\n    this.dv11=NaN;\\n    this.dv22=NaN;\\n    this.d00=NaN; // K^-1\\n    this.d01=NaN;\\n    this.d02=NaN;\\n    this.d10=NaN;\\n    this.d11=NaN;\\n    this.d12=NaN;\\n    this.d20=NaN;\\n    this.d21=NaN;\\n    this.d22=NaN;\\n\\n    this.limitMotor1=limitMotor1;\\n    this.limitMotor2=limitMotor2;\\n    this.limitMotor3=limitMotor3;\\n    this.b1=joint.body1;\\n    this.b2=joint.body2;\\n    this.p1=joint.anchorPoint1;\\n    this.p2=joint.anchorPoint2;\\n    this.r1=joint.relativeAnchorPoint1;\\n    this.r2=joint.relativeAnchorPoint2;\\n    this.l1=this.b1.linearVelocity;\\n    this.l2=this.b2.linearVelocity;\\n    this.a1=this.b1.angularVelocity;\\n    this.a2=this.b2.angularVelocity;\\n    this.i1=this.b1.inverseInertia;\\n    this.i2=this.b2.inverseInertia;\\n    this.limitImpulse1=0;\\n    this.motorImpulse1=0;\\n    this.limitImpulse2=0;\\n    this.motorImpulse2=0;\\n    this.limitImpulse3=0;\\n    this.motorImpulse3=0;\\n    this.cfm1=0;// Constraint Force Mixing\\n    this.cfm2=0;\\n    this.cfm3=0;\\n    this.weight=-1;\\n}\\n\\nObject.assign( Translational3Constraint.prototype, {\\n\\n    Translational3Constraint: true,\\n\\n    preSolve:function(timeStep,invTimeStep){\\n        this.ax1=this.limitMotor1.axis.x;\\n        this.ay1=this.limitMotor1.axis.y;\\n        this.az1=this.limitMotor1.axis.z;\\n        this.ax2=this.limitMotor2.axis.x;\\n        this.ay2=this.limitMotor2.axis.y;\\n        this.az2=this.limitMotor2.axis.z;\\n        this.ax3=this.limitMotor3.axis.x;\\n        this.ay3=this.limitMotor3.axis.y;\\n        this.az3=this.limitMotor3.axis.z;\\n        this.lowerLimit1=this.limitMotor1.lowerLimit;\\n        this.upperLimit1=this.limitMotor1.upperLimit;\\n        this.motorSpeed1=this.limitMotor1.motorSpeed;\\n        this.maxMotorForce1=this.limitMotor1.maxMotorForce;\\n        this.enableMotor1=this.maxMotorForce1>0;\\n        this.lowerLimit2=this.limitMotor2.lowerLimit;\\n        this.upperLimit2=this.limitMotor2.upperLimit;\\n        this.motorSpeed2=this.limitMotor2.motorSpeed;\\n        this.maxMotorForce2=this.limitMotor2.maxMotorForce;\\n        this.enableMotor2=this.maxMotorForce2>0;\\n        this.lowerLimit3=this.limitMotor3.lowerLimit;\\n        this.upperLimit3=this.limitMotor3.upperLimit;\\n        this.motorSpeed3=this.limitMotor3.motorSpeed;\\n        this.maxMotorForce3=this.limitMotor3.maxMotorForce;\\n        this.enableMotor3=this.maxMotorForce3>0;\\n        this.m1=this.b1.inverseMass;\\n        this.m2=this.b2.inverseMass;\\n\\n        var ti1 = this.i1.elements;\\n        var ti2 = this.i2.elements;\\n        this.i1e00=ti1[0];\\n        this.i1e01=ti1[1];\\n        this.i1e02=ti1[2];\\n        this.i1e10=ti1[3];\\n        this.i1e11=ti1[4];\\n        this.i1e12=ti1[5];\\n        this.i1e20=ti1[6];\\n        this.i1e21=ti1[7];\\n        this.i1e22=ti1[8];\\n\\n        this.i2e00=ti2[0];\\n        this.i2e01=ti2[1];\\n        this.i2e02=ti2[2];\\n        this.i2e10=ti2[3];\\n        this.i2e11=ti2[4];\\n        this.i2e12=ti2[5];\\n        this.i2e20=ti2[6];\\n        this.i2e21=ti2[7];\\n        this.i2e22=ti2[8];\\n\\n        var dx=this.p2.x-this.p1.x;\\n        var dy=this.p2.y-this.p1.y;\\n        var dz=this.p2.z-this.p1.z;\\n        var d1=dx*this.ax1+dy*this.ay1+dz*this.az1;\\n        var d2=dx*this.ax2+dy*this.ay2+dz*this.az2;\\n        var d3=dx*this.ax3+dy*this.ay3+dz*this.az3;\\n        var frequency1=this.limitMotor1.frequency;\\n        var frequency2=this.limitMotor2.frequency;\\n        var frequency3=this.limitMotor3.frequency;\\n        var enableSpring1=frequency1>0;\\n        var enableSpring2=frequency2>0;\\n        var enableSpring3=frequency3>0;\\n        var enableLimit1=this.lowerLimit1<=this.upperLimit1;\\n        var enableLimit2=this.lowerLimit2<=this.upperLimit2;\\n        var enableLimit3=this.lowerLimit3<=this.upperLimit3;\\n\\n        // for stability\\n        if(enableSpring1&&d1>20||d1<-20){\\n            enableSpring1=false;\\n        }\\n        if(enableSpring2&&d2>20||d2<-20){\\n            enableSpring2=false;\\n        }\\n        if(enableSpring3&&d3>20||d3<-20){\\n            enableSpring3=false;\\n        }\\n\\n        if(enableLimit1){\\n            if(this.lowerLimit1==this.upperLimit1){\\n                if(this.limitState1!=0){\\n                    this.limitState1=0;\\n                    this.limitImpulse1=0;\\n                }\\n                this.limitVelocity1=this.lowerLimit1-d1;\\n                if(!enableSpring1)d1=this.lowerLimit1;\\n            }else if(d1<this.lowerLimit1){\\n                if(this.limitState1!=-1){\\n                    this.limitState1=-1;\\n                    this.limitImpulse1=0;\\n                }\\n                this.limitVelocity1=this.lowerLimit1-d1;\\n                if(!enableSpring1)d1=this.lowerLimit1;\\n            }else if(d1>this.upperLimit1){\\n                if(this.limitState1!=1){\\n                    this.limitState1=1;\\n                    this.limitImpulse1=0;\\n                }\\n                this.limitVelocity1=this.upperLimit1-d1;\\n                if(!enableSpring1)d1=this.upperLimit1;\\n            }else{\\n                this.limitState1=2;\\n                this.limitImpulse1=0;\\n                this.limitVelocity1=0;\\n            }\\n            if(!enableSpring1){\\n                if(this.limitVelocity1>0.005)this.limitVelocity1-=0.005;\\n                else if(this.limitVelocity1<-0.005)this.limitVelocity1+=0.005;\\n                else this.limitVelocity1=0;\\n            }\\n        }else{\\n            this.limitState1=2;\\n            this.limitImpulse1=0;\\n        }\\n\\n        if(enableLimit2){\\n            if(this.lowerLimit2==this.upperLimit2){\\n                if(this.limitState2!=0){\\n                    this.limitState2=0;\\n                    this.limitImpulse2=0;\\n                }\\n                this.limitVelocity2=this.lowerLimit2-d2;\\n                if(!enableSpring2)d2=this.lowerLimit2;\\n            }else if(d2<this.lowerLimit2){\\n                if(this.limitState2!=-1){\\n                    this.limitState2=-1;\\n                    this.limitImpulse2=0;\\n                }\\n                this.limitVelocity2=this.lowerLimit2-d2;\\n                if(!enableSpring2)d2=this.lowerLimit2;\\n            }else if(d2>this.upperLimit2){\\n                if(this.limitState2!=1){\\n                    this.limitState2=1;\\n                    this.limitImpulse2=0;\\n                }\\n                this.limitVelocity2=this.upperLimit2-d2;\\n                if(!enableSpring2)d2=this.upperLimit2;\\n            }else{\\n                this.limitState2=2;\\n                this.limitImpulse2=0;\\n                this.limitVelocity2=0;\\n            }\\n            if(!enableSpring2){\\n                if(this.limitVelocity2>0.005)this.limitVelocity2-=0.005;\\n                else if(this.limitVelocity2<-0.005)this.limitVelocity2+=0.005;\\n                else this.limitVelocity2=0;\\n            }\\n        }else{\\n            this.limitState2=2;\\n            this.limitImpulse2=0;\\n        }\\n\\n        if(enableLimit3){\\n            if(this.lowerLimit3==this.upperLimit3){\\n                if(this.limitState3!=0){\\n                    this.limitState3=0;\\n                    this.limitImpulse3=0;\\n                }\\n                this.limitVelocity3=this.lowerLimit3-d3;\\n                if(!enableSpring3)d3=this.lowerLimit3;\\n                }else if(d3<this.lowerLimit3){\\n                if(this.limitState3!=-1){\\n                    this.limitState3=-1;\\n                    this.limitImpulse3=0;\\n                }\\n                this.limitVelocity3=this.lowerLimit3-d3;\\n                if(!enableSpring3)d3=this.lowerLimit3;\\n            }else if(d3>this.upperLimit3){\\n                if(this.limitState3!=1){\\n                    this.limitState3=1;\\n                    this.limitImpulse3=0;\\n                }\\n                this.limitVelocity3=this.upperLimit3-d3;\\n                if(!enableSpring3)d3=this.upperLimit3;\\n            }else{\\n                this.limitState3=2;\\n                this.limitImpulse3=0;\\n                this.limitVelocity3=0;\\n            }\\n            if(!enableSpring3){\\n                if(this.limitVelocity3>0.005)this.limitVelocity3-=0.005;\\n                else if(this.limitVelocity3<-0.005)this.limitVelocity3+=0.005;\\n                else this.limitVelocity3=0;\\n            }\\n        }else{\\n            this.limitState3=2;\\n            this.limitImpulse3=0;\\n        }\\n\\n        if(this.enableMotor1&&(this.limitState1!=0||enableSpring1)){\\n            this.maxMotorImpulse1=this.maxMotorForce1*timeStep;\\n        }else{\\n            this.motorImpulse1=0;\\n            this.maxMotorImpulse1=0;\\n        }\\n\\n        if(this.enableMotor2&&(this.limitState2!=0||enableSpring2)){\\n            this.maxMotorImpulse2=this.maxMotorForce2*timeStep;\\n        }else{\\n            this.motorImpulse2=0;\\n            this.maxMotorImpulse2=0;\\n        }\\n\\n        if(this.enableMotor3&&(this.limitState3!=0||enableSpring3)){\\n            this.maxMotorImpulse3=this.maxMotorForce3*timeStep;\\n        }else{\\n            this.motorImpulse3=0;\\n            this.maxMotorImpulse3=0;\\n        }\\n        \\n        var rdx=d1*this.ax1+d2*this.ax2+d3*this.ax2;\\n        var rdy=d1*this.ay1+d2*this.ay2+d3*this.ay2;\\n        var rdz=d1*this.az1+d2*this.az2+d3*this.az2;\\n        var w1=this.m2/(this.m1+this.m2);\\n        if(this.weight>=0)w1=this.weight; // use given weight\\n        var w2=1-w1;\\n        this.r1x=this.r1.x+rdx*w1;\\n        this.r1y=this.r1.y+rdy*w1;\\n        this.r1z=this.r1.z+rdz*w1;\\n        this.r2x=this.r2.x-rdx*w2;\\n        this.r2y=this.r2.y-rdy*w2;\\n        this.r2z=this.r2.z-rdz*w2;\\n\\n        // build jacobians\\n        this.t1x1=this.r1y*this.az1-this.r1z*this.ay1;\\n        this.t1y1=this.r1z*this.ax1-this.r1x*this.az1;\\n        this.t1z1=this.r1x*this.ay1-this.r1y*this.ax1;\\n        this.t2x1=this.r2y*this.az1-this.r2z*this.ay1;\\n        this.t2y1=this.r2z*this.ax1-this.r2x*this.az1;\\n        this.t2z1=this.r2x*this.ay1-this.r2y*this.ax1;\\n        this.l1x1=this.ax1*this.m1;\\n        this.l1y1=this.ay1*this.m1;\\n        this.l1z1=this.az1*this.m1;\\n        this.l2x1=this.ax1*this.m2;\\n        this.l2y1=this.ay1*this.m2;\\n        this.l2z1=this.az1*this.m2;\\n        this.a1x1=this.t1x1*this.i1e00+this.t1y1*this.i1e01+this.t1z1*this.i1e02;\\n        this.a1y1=this.t1x1*this.i1e10+this.t1y1*this.i1e11+this.t1z1*this.i1e12;\\n        this.a1z1=this.t1x1*this.i1e20+this.t1y1*this.i1e21+this.t1z1*this.i1e22;\\n        this.a2x1=this.t2x1*this.i2e00+this.t2y1*this.i2e01+this.t2z1*this.i2e02;\\n        this.a2y1=this.t2x1*this.i2e10+this.t2y1*this.i2e11+this.t2z1*this.i2e12;\\n        this.a2z1=this.t2x1*this.i2e20+this.t2y1*this.i2e21+this.t2z1*this.i2e22;\\n\\n        this.t1x2=this.r1y*this.az2-this.r1z*this.ay2;\\n        this.t1y2=this.r1z*this.ax2-this.r1x*this.az2;\\n        this.t1z2=this.r1x*this.ay2-this.r1y*this.ax2;\\n        this.t2x2=this.r2y*this.az2-this.r2z*this.ay2;\\n        this.t2y2=this.r2z*this.ax2-this.r2x*this.az2;\\n        this.t2z2=this.r2x*this.ay2-this.r2y*this.ax2;\\n        this.l1x2=this.ax2*this.m1;\\n        this.l1y2=this.ay2*this.m1;\\n        this.l1z2=this.az2*this.m1;\\n        this.l2x2=this.ax2*this.m2;\\n        this.l2y2=this.ay2*this.m2;\\n        this.l2z2=this.az2*this.m2;\\n        this.a1x2=this.t1x2*this.i1e00+this.t1y2*this.i1e01+this.t1z2*this.i1e02;\\n        this.a1y2=this.t1x2*this.i1e10+this.t1y2*this.i1e11+this.t1z2*this.i1e12;\\n        this.a1z2=this.t1x2*this.i1e20+this.t1y2*this.i1e21+this.t1z2*this.i1e22;\\n        this.a2x2=this.t2x2*this.i2e00+this.t2y2*this.i2e01+this.t2z2*this.i2e02;\\n        this.a2y2=this.t2x2*this.i2e10+this.t2y2*this.i2e11+this.t2z2*this.i2e12;\\n        this.a2z2=this.t2x2*this.i2e20+this.t2y2*this.i2e21+this.t2z2*this.i2e22;\\n\\n        this.t1x3=this.r1y*this.az3-this.r1z*this.ay3;\\n        this.t1y3=this.r1z*this.ax3-this.r1x*this.az3;\\n        this.t1z3=this.r1x*this.ay3-this.r1y*this.ax3;\\n        this.t2x3=this.r2y*this.az3-this.r2z*this.ay3;\\n        this.t2y3=this.r2z*this.ax3-this.r2x*this.az3;\\n        this.t2z3=this.r2x*this.ay3-this.r2y*this.ax3;\\n        this.l1x3=this.ax3*this.m1;\\n        this.l1y3=this.ay3*this.m1;\\n        this.l1z3=this.az3*this.m1;\\n        this.l2x3=this.ax3*this.m2;\\n        this.l2y3=this.ay3*this.m2;\\n        this.l2z3=this.az3*this.m2;\\n        this.a1x3=this.t1x3*this.i1e00+this.t1y3*this.i1e01+this.t1z3*this.i1e02;\\n        this.a1y3=this.t1x3*this.i1e10+this.t1y3*this.i1e11+this.t1z3*this.i1e12;\\n        this.a1z3=this.t1x3*this.i1e20+this.t1y3*this.i1e21+this.t1z3*this.i1e22;\\n        this.a2x3=this.t2x3*this.i2e00+this.t2y3*this.i2e01+this.t2z3*this.i2e02;\\n        this.a2y3=this.t2x3*this.i2e10+this.t2y3*this.i2e11+this.t2z3*this.i2e12;\\n        this.a2z3=this.t2x3*this.i2e20+this.t2y3*this.i2e21+this.t2z3*this.i2e22;\\n\\n        // build an impulse matrix\\n        var m12=this.m1+this.m2;\\n        this.k00=(this.ax1*this.ax1+this.ay1*this.ay1+this.az1*this.az1)*m12;\\n        this.k01=(this.ax1*this.ax2+this.ay1*this.ay2+this.az1*this.az2)*m12;\\n        this.k02=(this.ax1*this.ax3+this.ay1*this.ay3+this.az1*this.az3)*m12;\\n        this.k10=(this.ax2*this.ax1+this.ay2*this.ay1+this.az2*this.az1)*m12;\\n        this.k11=(this.ax2*this.ax2+this.ay2*this.ay2+this.az2*this.az2)*m12;\\n        this.k12=(this.ax2*this.ax3+this.ay2*this.ay3+this.az2*this.az3)*m12;\\n        this.k20=(this.ax3*this.ax1+this.ay3*this.ay1+this.az3*this.az1)*m12;\\n        this.k21=(this.ax3*this.ax2+this.ay3*this.ay2+this.az3*this.az2)*m12;\\n        this.k22=(this.ax3*this.ax3+this.ay3*this.ay3+this.az3*this.az3)*m12;\\n\\n        this.k00+=this.t1x1*this.a1x1+this.t1y1*this.a1y1+this.t1z1*this.a1z1;\\n        this.k01+=this.t1x1*this.a1x2+this.t1y1*this.a1y2+this.t1z1*this.a1z2;\\n        this.k02+=this.t1x1*this.a1x3+this.t1y1*this.a1y3+this.t1z1*this.a1z3;\\n        this.k10+=this.t1x2*this.a1x1+this.t1y2*this.a1y1+this.t1z2*this.a1z1;\\n        this.k11+=this.t1x2*this.a1x2+this.t1y2*this.a1y2+this.t1z2*this.a1z2;\\n        this.k12+=this.t1x2*this.a1x3+this.t1y2*this.a1y3+this.t1z2*this.a1z3;\\n        this.k20+=this.t1x3*this.a1x1+this.t1y3*this.a1y1+this.t1z3*this.a1z1;\\n        this.k21+=this.t1x3*this.a1x2+this.t1y3*this.a1y2+this.t1z3*this.a1z2;\\n        this.k22+=this.t1x3*this.a1x3+this.t1y3*this.a1y3+this.t1z3*this.a1z3;\\n\\n        this.k00+=this.t2x1*this.a2x1+this.t2y1*this.a2y1+this.t2z1*this.a2z1;\\n        this.k01+=this.t2x1*this.a2x2+this.t2y1*this.a2y2+this.t2z1*this.a2z2;\\n        this.k02+=this.t2x1*this.a2x3+this.t2y1*this.a2y3+this.t2z1*this.a2z3;\\n        this.k10+=this.t2x2*this.a2x1+this.t2y2*this.a2y1+this.t2z2*this.a2z1;\\n        this.k11+=this.t2x2*this.a2x2+this.t2y2*this.a2y2+this.t2z2*this.a2z2;\\n        this.k12+=this.t2x2*this.a2x3+this.t2y2*this.a2y3+this.t2z2*this.a2z3;\\n        this.k20+=this.t2x3*this.a2x1+this.t2y3*this.a2y1+this.t2z3*this.a2z1;\\n        this.k21+=this.t2x3*this.a2x2+this.t2y3*this.a2y2+this.t2z3*this.a2z2;\\n        this.k22+=this.t2x3*this.a2x3+this.t2y3*this.a2y3+this.t2z3*this.a2z3;\\n\\n        this.kv00=this.k00;\\n        this.kv11=this.k11;\\n        this.kv22=this.k22;\\n\\n        this.dv00=1/this.kv00;\\n        this.dv11=1/this.kv11;\\n        this.dv22=1/this.kv22;\\n\\n        if(enableSpring1&&this.limitState1!=2){\\n            var omega=6.2831853*frequency1;\\n            var k=omega*omega*timeStep;\\n            var dmp=invTimeStep/(k+2*this.limitMotor1.dampingRatio*omega);\\n            this.cfm1=this.kv00*dmp;\\n            this.limitVelocity1*=k*dmp;\\n        }else{\\n            this.cfm1=0;\\n            this.limitVelocity1*=invTimeStep*0.05;\\n        }\\n        if(enableSpring2&&this.limitState2!=2){\\n            omega=6.2831853*frequency2;\\n            k=omega*omega*timeStep;\\n            dmp=invTimeStep/(k+2*this.limitMotor2.dampingRatio*omega);\\n            this.cfm2=this.kv11*dmp;\\n            this.limitVelocity2*=k*dmp;\\n        }else{\\n            this.cfm2=0;\\n            this.limitVelocity2*=invTimeStep*0.05;\\n        }\\n        if(enableSpring3&&this.limitState3!=2){\\n            omega=6.2831853*frequency3;\\n            k=omega*omega*timeStep;\\n            dmp=invTimeStep/(k+2*this.limitMotor3.dampingRatio*omega);\\n            this.cfm3=this.kv22*dmp;\\n            this.limitVelocity3*=k*dmp;\\n        }else{\\n            this.cfm3=0;\\n            this.limitVelocity3*=invTimeStep*0.05;\\n        }\\n        this.k00+=this.cfm1;\\n        this.k11+=this.cfm2;\\n        this.k22+=this.cfm3;\\n\\n        var inv=1/(\\n        this.k00*(this.k11*this.k22-this.k21*this.k12)+\\n        this.k10*(this.k21*this.k02-this.k01*this.k22)+\\n        this.k20*(this.k01*this.k12-this.k11*this.k02)\\n        );\\n        this.d00=(this.k11*this.k22-this.k12*this.k21)*inv;\\n        this.d01=(this.k02*this.k21-this.k01*this.k22)*inv;\\n        this.d02=(this.k01*this.k12-this.k02*this.k11)*inv;\\n        this.d10=(this.k12*this.k20-this.k10*this.k22)*inv;\\n        this.d11=(this.k00*this.k22-this.k02*this.k20)*inv;\\n        this.d12=(this.k02*this.k10-this.k00*this.k12)*inv;\\n        this.d20=(this.k10*this.k21-this.k11*this.k20)*inv;\\n        this.d21=(this.k01*this.k20-this.k00*this.k21)*inv;\\n        this.d22=(this.k00*this.k11-this.k01*this.k10)*inv;\\n\\n        // warm starting\\n        var totalImpulse1=this.limitImpulse1+this.motorImpulse1;\\n        var totalImpulse2=this.limitImpulse2+this.motorImpulse2;\\n        var totalImpulse3=this.limitImpulse3+this.motorImpulse3;\\n        this.l1.x+=totalImpulse1*this.l1x1+totalImpulse2*this.l1x2+totalImpulse3*this.l1x3;\\n        this.l1.y+=totalImpulse1*this.l1y1+totalImpulse2*this.l1y2+totalImpulse3*this.l1y3;\\n        this.l1.z+=totalImpulse1*this.l1z1+totalImpulse2*this.l1z2+totalImpulse3*this.l1z3;\\n        this.a1.x+=totalImpulse1*this.a1x1+totalImpulse2*this.a1x2+totalImpulse3*this.a1x3;\\n        this.a1.y+=totalImpulse1*this.a1y1+totalImpulse2*this.a1y2+totalImpulse3*this.a1y3;\\n        this.a1.z+=totalImpulse1*this.a1z1+totalImpulse2*this.a1z2+totalImpulse3*this.a1z3;\\n        this.l2.x-=totalImpulse1*this.l2x1+totalImpulse2*this.l2x2+totalImpulse3*this.l2x3;\\n        this.l2.y-=totalImpulse1*this.l2y1+totalImpulse2*this.l2y2+totalImpulse3*this.l2y3;\\n        this.l2.z-=totalImpulse1*this.l2z1+totalImpulse2*this.l2z2+totalImpulse3*this.l2z3;\\n        this.a2.x-=totalImpulse1*this.a2x1+totalImpulse2*this.a2x2+totalImpulse3*this.a2x3;\\n        this.a2.y-=totalImpulse1*this.a2y1+totalImpulse2*this.a2y2+totalImpulse3*this.a2y3;\\n        this.a2.z-=totalImpulse1*this.a2z1+totalImpulse2*this.a2z2+totalImpulse3*this.a2z3;\\n    },\\n\\n    solve:function(){\\n        var rvx=this.l2.x-this.l1.x+this.a2.y*this.r2z-this.a2.z*this.r2y-this.a1.y*this.r1z+this.a1.z*this.r1y;\\n        var rvy=this.l2.y-this.l1.y+this.a2.z*this.r2x-this.a2.x*this.r2z-this.a1.z*this.r1x+this.a1.x*this.r1z;\\n        var rvz=this.l2.z-this.l1.z+this.a2.x*this.r2y-this.a2.y*this.r2x-this.a1.x*this.r1y+this.a1.y*this.r1x;\\n        var rvn1=rvx*this.ax1+rvy*this.ay1+rvz*this.az1;\\n        var rvn2=rvx*this.ax2+rvy*this.ay2+rvz*this.az2;\\n        var rvn3=rvx*this.ax3+rvy*this.ay3+rvz*this.az3;\\n        var oldMotorImpulse1=this.motorImpulse1;\\n        var oldMotorImpulse2=this.motorImpulse2;\\n        var oldMotorImpulse3=this.motorImpulse3;\\n        var dMotorImpulse1=0;\\n        var dMotorImpulse2=0;\\n        var dMotorImpulse3=0;\\n        if(this.enableMotor1){\\n            dMotorImpulse1=(rvn1-this.motorSpeed1)*this.dv00;\\n            this.motorImpulse1+=dMotorImpulse1;\\n            if(this.motorImpulse1>this.maxMotorImpulse1){ // clamp motor impulse\\n                this.motorImpulse1=this.maxMotorImpulse1;\\n            }else if(this.motorImpulse1<-this.maxMotorImpulse1){\\n                this.motorImpulse1=-this.maxMotorImpulse1;\\n            }\\n            dMotorImpulse1=this.motorImpulse1-oldMotorImpulse1;\\n        }\\n        if(this.enableMotor2){\\n            dMotorImpulse2=(rvn2-this.motorSpeed2)*this.dv11;\\n            this.motorImpulse2+=dMotorImpulse2;\\n            if(this.motorImpulse2>this.maxMotorImpulse2){ // clamp motor impulse\\n                this.motorImpulse2=this.maxMotorImpulse2;\\n            }else if(this.motorImpulse2<-this.maxMotorImpulse2){\\n                this.motorImpulse2=-this.maxMotorImpulse2;\\n            }\\n            dMotorImpulse2=this.motorImpulse2-oldMotorImpulse2;\\n        }\\n        if(this.enableMotor3){\\n            dMotorImpulse3=(rvn3-this.motorSpeed3)*this.dv22;\\n            this.motorImpulse3+=dMotorImpulse3;\\n            if(this.motorImpulse3>this.maxMotorImpulse3){ // clamp motor impulse\\n                this.motorImpulse3=this.maxMotorImpulse3;\\n            }else if(this.motorImpulse3<-this.maxMotorImpulse3){\\n                this.motorImpulse3=-this.maxMotorImpulse3;\\n            }\\n            dMotorImpulse3=this.motorImpulse3-oldMotorImpulse3;\\n        }\\n\\n        // apply motor impulse to relative velocity\\n        rvn1+=dMotorImpulse1*this.kv00+dMotorImpulse2*this.k01+dMotorImpulse3*this.k02;\\n        rvn2+=dMotorImpulse1*this.k10+dMotorImpulse2*this.kv11+dMotorImpulse3*this.k12;\\n        rvn3+=dMotorImpulse1*this.k20+dMotorImpulse2*this.k21+dMotorImpulse3*this.kv22;\\n\\n        // subtract target velocity and applied impulse\\n        rvn1-=this.limitVelocity1+this.limitImpulse1*this.cfm1;\\n        rvn2-=this.limitVelocity2+this.limitImpulse2*this.cfm2;\\n        rvn3-=this.limitVelocity3+this.limitImpulse3*this.cfm3;\\n\\n        var oldLimitImpulse1=this.limitImpulse1;\\n        var oldLimitImpulse2=this.limitImpulse2;\\n        var oldLimitImpulse3=this.limitImpulse3;\\n\\n        var dLimitImpulse1=rvn1*this.d00+rvn2*this.d01+rvn3*this.d02;\\n        var dLimitImpulse2=rvn1*this.d10+rvn2*this.d11+rvn3*this.d12;\\n        var dLimitImpulse3=rvn1*this.d20+rvn2*this.d21+rvn3*this.d22;\\n\\n        this.limitImpulse1+=dLimitImpulse1;\\n        this.limitImpulse2+=dLimitImpulse2;\\n        this.limitImpulse3+=dLimitImpulse3;\\n\\n        // clamp\\n        var clampState=0;\\n        if(this.limitState1==2||this.limitImpulse1*this.limitState1<0){\\n            dLimitImpulse1=-oldLimitImpulse1;\\n            rvn2+=dLimitImpulse1*this.k10;\\n            rvn3+=dLimitImpulse1*this.k20;\\n            clampState|=1;\\n        }\\n        if(this.limitState2==2||this.limitImpulse2*this.limitState2<0){\\n            dLimitImpulse2=-oldLimitImpulse2;\\n            rvn1+=dLimitImpulse2*this.k01;\\n            rvn3+=dLimitImpulse2*this.k21;\\n            clampState|=2;\\n        }\\n        if(this.limitState3==2||this.limitImpulse3*this.limitState3<0){\\n            dLimitImpulse3=-oldLimitImpulse3;\\n            rvn1+=dLimitImpulse3*this.k02;\\n            rvn2+=dLimitImpulse3*this.k12;\\n            clampState|=4;\\n        }\\n\\n        // update un-clamped impulse\\n        // TODO: isolate division\\n        var det;\\n        switch(clampState){\\n            case 1:// update 2 3\\n            det=1/(this.k11*this.k22-this.k12*this.k21);\\n            dLimitImpulse2=(this.k22*rvn2+-this.k12*rvn3)*det;\\n            dLimitImpulse3=(-this.k21*rvn2+this.k11*rvn3)*det;\\n            break;\\n            case 2:// update 1 3\\n            det=1/(this.k00*this.k22-this.k02*this.k20);\\n            dLimitImpulse1=(this.k22*rvn1+-this.k02*rvn3)*det;\\n            dLimitImpulse3=(-this.k20*rvn1+this.k00*rvn3)*det;\\n            break;\\n            case 3:// update 3\\n            dLimitImpulse3=rvn3/this.k22;\\n            break;\\n            case 4:// update 1 2\\n            det=1/(this.k00*this.k11-this.k01*this.k10);\\n            dLimitImpulse1=(this.k11*rvn1+-this.k01*rvn2)*det;\\n            dLimitImpulse2=(-this.k10*rvn1+this.k00*rvn2)*det;\\n            break;\\n            case 5:// update 2\\n            dLimitImpulse2=rvn2/this.k11;\\n            break;\\n            case 6:// update 1\\n            dLimitImpulse1=rvn1/this.k00;\\n            break;\\n        }\\n\\n        this.limitImpulse1=oldLimitImpulse1+dLimitImpulse1;\\n        this.limitImpulse2=oldLimitImpulse2+dLimitImpulse2;\\n        this.limitImpulse3=oldLimitImpulse3+dLimitImpulse3;\\n\\n        var dImpulse1=dMotorImpulse1+dLimitImpulse1;\\n        var dImpulse2=dMotorImpulse2+dLimitImpulse2;\\n        var dImpulse3=dMotorImpulse3+dLimitImpulse3;\\n\\n        // apply impulse\\n        this.l1.x+=dImpulse1*this.l1x1+dImpulse2*this.l1x2+dImpulse3*this.l1x3;\\n        this.l1.y+=dImpulse1*this.l1y1+dImpulse2*this.l1y2+dImpulse3*this.l1y3;\\n        this.l1.z+=dImpulse1*this.l1z1+dImpulse2*this.l1z2+dImpulse3*this.l1z3;\\n        this.a1.x+=dImpulse1*this.a1x1+dImpulse2*this.a1x2+dImpulse3*this.a1x3;\\n        this.a1.y+=dImpulse1*this.a1y1+dImpulse2*this.a1y2+dImpulse3*this.a1y3;\\n        this.a1.z+=dImpulse1*this.a1z1+dImpulse2*this.a1z2+dImpulse3*this.a1z3;\\n        this.l2.x-=dImpulse1*this.l2x1+dImpulse2*this.l2x2+dImpulse3*this.l2x3;\\n        this.l2.y-=dImpulse1*this.l2y1+dImpulse2*this.l2y2+dImpulse3*this.l2y3;\\n        this.l2.z-=dImpulse1*this.l2z1+dImpulse2*this.l2z2+dImpulse3*this.l2z3;\\n        this.a2.x-=dImpulse1*this.a2x1+dImpulse2*this.a2x2+dImpulse3*this.a2x3;\\n        this.a2.y-=dImpulse1*this.a2y1+dImpulse2*this.a2y2+dImpulse3*this.a2y3;\\n        this.a2.z-=dImpulse1*this.a2z1+dImpulse2*this.a2z2+dImpulse3*this.a2z3;\\n    }\\n    \\n} );\\n\\n/**\\n * A prismatic joint allows only for relative translation of rigid bodies along the axis.\\n *\\n * @author saharan\\n * @author lo-th\\n */\\n\\nfunction PrismaticJoint( config, lowerTranslation, upperTranslation ){\\n\\n    Joint.call( this, config );\\n\\n    this.type = JOINT_PRISMATIC;\\n\\n    // The axis in the first body's coordinate system.\\n    this.localAxis1 = config.localAxis1.clone().normalize();\\n    // The axis in the second body's coordinate system.\\n    this.localAxis2 = config.localAxis2.clone().normalize();\\n\\n    this.ax1 = new Vec3();\\n    this.ax2 = new Vec3();\\n    \\n    this.nor = new Vec3();\\n    this.tan = new Vec3();\\n    this.bin = new Vec3();\\n\\n    this.ac = new AngularConstraint( this, new Quat().setFromUnitVectors( this.localAxis1, this.localAxis2 ) );\\n\\n    // The translational limit and motor information of the joint.\\n    this.limitMotor = new LimitMotor( this.nor, true );\\n    this.limitMotor.lowerLimit = lowerTranslation;\\n    this.limitMotor.upperLimit = upperTranslation;\\n    this.t3 = new Translational3Constraint( this, this.limitMotor, new LimitMotor( this.tan, true ), new LimitMotor( this.bin, true ) );\\n\\n}\\n\\nPrismaticJoint.prototype = Object.assign( Object.create( Joint.prototype ), {\\n\\n    constructor: PrismaticJoint,\\n\\n    preSolve: function ( timeStep, invTimeStep ) {\\n\\n        this.updateAnchorPoints();\\n\\n        this.ax1.copy( this.localAxis1 ).applyMatrix3( this.body1.rotation, true );\\n        this.ax2.copy( this.localAxis2 ).applyMatrix3( this.body2.rotation, true );\\n\\n        // normal tangent binormal\\n\\n        this.nor.set(\\n            this.ax1.x*this.body2.inverseMass + this.ax2.x*this.body1.inverseMass,\\n            this.ax1.y*this.body2.inverseMass + this.ax2.y*this.body1.inverseMass,\\n            this.ax1.z*this.body2.inverseMass + this.ax2.z*this.body1.inverseMass\\n        ).normalize();\\n        this.tan.tangent( this.nor ).normalize();\\n        this.bin.crossVectors( this.nor, this.tan );\\n\\n        // preSolve\\n\\n        this.ac.preSolve( timeStep, invTimeStep );\\n        this.t3.preSolve( timeStep, invTimeStep );\\n\\n    },\\n\\n    solve: function () {\\n\\n        this.ac.solve();\\n        this.t3.solve();\\n        \\n    },\\n\\n    postSolve: function () {\\n\\n    }\\n\\n});\\n\\n/**\\n * A slider joint allows for relative translation and relative rotation between two rigid bodies along the axis.\\n *\\n * @author saharan\\n * @author lo-th\\n */\\n\\nfunction SliderJoint( config, lowerTranslation, upperTranslation ){\\n\\n    Joint.call( this, config );\\n\\n    this.type = JOINT_SLIDER;\\n\\n    // The axis in the first body's coordinate system.\\n    this.localAxis1 = config.localAxis1.clone().normalize();\\n    // The axis in the second body's coordinate system.\\n    this.localAxis2 = config.localAxis2.clone().normalize();\\n\\n    // make angle axis\\n    var arc = new Mat33().setQuat( new Quat().setFromUnitVectors( this.localAxis1, this.localAxis2 ) );\\n    this.localAngle1 = new Vec3().tangent( this.localAxis1 ).normalize();\\n    this.localAngle2 = this.localAngle1.clone().applyMatrix3( arc, true );\\n\\n    this.ax1 = new Vec3();\\n    this.ax2 = new Vec3();\\n    this.an1 = new Vec3();\\n    this.an2 = new Vec3();\\n\\n    this.tmp = new Vec3();\\n    \\n    this.nor = new Vec3();\\n    this.tan = new Vec3();\\n    this.bin = new Vec3();\\n\\n    // The limit and motor for the rotation\\n    this.rotationalLimitMotor = new LimitMotor( this.nor, false );\\n    this.r3 = new Rotational3Constraint( this, this.rotationalLimitMotor, new LimitMotor( this.tan, true ), new LimitMotor( this.bin, true ) );\\n\\n    // The limit and motor for the translation.\\n    this.translationalLimitMotor = new LimitMotor( this.nor, true );\\n    this.translationalLimitMotor.lowerLimit = lowerTranslation;\\n    this.translationalLimitMotor.upperLimit = upperTranslation;\\n    this.t3 = new Translational3Constraint( this, this.translationalLimitMotor, new LimitMotor( this.tan, true ), new LimitMotor( this.bin, true ) );\\n\\n}\\n\\nSliderJoint.prototype = Object.assign( Object.create( Joint.prototype ), {\\n\\n    constructor: SliderJoint,\\n\\n    preSolve: function ( timeStep, invTimeStep ) {\\n\\n        this.updateAnchorPoints();\\n\\n        this.ax1.copy( this.localAxis1 ).applyMatrix3( this.body1.rotation, true );\\n        this.an1.copy( this.localAngle1 ).applyMatrix3( this.body1.rotation, true );\\n\\n        this.ax2.copy( this.localAxis2 ).applyMatrix3( this.body2.rotation, true );\\n        this.an2.copy( this.localAngle2 ).applyMatrix3( this.body2.rotation, true );\\n\\n        // normal tangent binormal\\n\\n        this.nor.set(\\n            this.ax1.x*this.body2.inverseMass + this.ax2.x*this.body1.inverseMass,\\n            this.ax1.y*this.body2.inverseMass + this.ax2.y*this.body1.inverseMass,\\n            this.ax1.z*this.body2.inverseMass + this.ax2.z*this.body1.inverseMass\\n        ).normalize();\\n        this.tan.tangent( this.nor ).normalize();\\n        this.bin.crossVectors( this.nor, this.tan );\\n\\n        // calculate hinge angle\\n\\n        this.tmp.crossVectors( this.an1, this.an2 );\\n\\n        var limite = _Math.acosClamp( _Math.dotVectors( this.an1, this.an2 ) );\\n\\n        if( _Math.dotVectors( this.nor, this.tmp ) < 0 ) this.rotationalLimitMotor.angle = -limite;\\n        else this.rotationalLimitMotor.angle = limite;\\n\\n        // angular error\\n\\n        this.tmp.crossVectors( this.ax1, this.ax2 );\\n        this.r3.limitMotor2.angle = _Math.dotVectors( this.tan, this.tmp );\\n        this.r3.limitMotor3.angle = _Math.dotVectors( this.bin, this.tmp );\\n\\n        // preSolve\\n        \\n        this.r3.preSolve( timeStep, invTimeStep );\\n        this.t3.preSolve( timeStep, invTimeStep );\\n\\n    },\\n\\n    solve: function () {\\n\\n        this.r3.solve();\\n        this.t3.solve();\\n\\n    },\\n\\n    postSolve: function () {\\n\\n    }\\n\\n});\\n\\n/**\\n * A wheel joint allows for relative rotation between two rigid bodies along two axes.\\n * The wheel joint also allows for relative translation for the suspension.\\n *\\n * @author saharan\\n * @author lo-th\\n */\\n\\nfunction WheelJoint ( config ){\\n\\n    Joint.call( this, config );\\n\\n    this.type = JOINT_WHEEL;\\n\\n    // The axis in the first body's coordinate system.\\n    this.localAxis1 = config.localAxis1.clone().normalize();\\n    // The axis in the second body's coordinate system.\\n    this.localAxis2 = config.localAxis2.clone().normalize();\\n\\n    this.localAngle1 = new Vec3();\\n    this.localAngle2 = new Vec3();\\n\\n    var dot = _Math.dotVectors( this.localAxis1, this.localAxis2 );\\n\\n    if( dot > -1 && dot < 1 ){\\n\\n        this.localAngle1.set(\\n            this.localAxis2.x - dot*this.localAxis1.x,\\n            this.localAxis2.y - dot*this.localAxis1.y,\\n            this.localAxis2.z - dot*this.localAxis1.z\\n        ).normalize();\\n\\n        this.localAngle2.set(\\n            this.localAxis1.x - dot*this.localAxis2.x,\\n            this.localAxis1.y - dot*this.localAxis2.y,\\n            this.localAxis1.z - dot*this.localAxis2.z\\n        ).normalize();\\n\\n    } else {\\n\\n        var arc = new Mat33().setQuat( new Quat().setFromUnitVectors( this.localAxis1, this.localAxis2 ) );\\n        this.localAngle1.tangent( this.localAxis1 ).normalize();\\n        this.localAngle2 = this.localAngle1.clone().applyMatrix3( arc, true );\\n\\n    }\\n\\n    this.ax1 = new Vec3();\\n    this.ax2 = new Vec3();\\n    this.an1 = new Vec3();\\n    this.an2 = new Vec3();\\n\\n    this.tmp = new Vec3();\\n\\n    this.nor = new Vec3();\\n    this.tan = new Vec3();\\n    this.bin = new Vec3();\\n\\n    // The translational limit and motor information of the joint.\\n    this.translationalLimitMotor = new LimitMotor( this.tan,true );\\n    this.translationalLimitMotor.frequency = 8;\\n    this.translationalLimitMotor.dampingRatio = 1;\\n    // The first rotational limit and motor information of the joint.\\n    this.rotationalLimitMotor1 = new LimitMotor( this.tan, false );\\n    // The second rotational limit and motor information of the joint.\\n    this.rotationalLimitMotor2 = new LimitMotor( this.bin, false );\\n\\n    this.t3 = new Translational3Constraint( this, new LimitMotor( this.nor, true ),this.translationalLimitMotor,new LimitMotor( this.bin, true ));\\n    this.t3.weight = 1;\\n    this.r3 = new Rotational3Constraint(this,new LimitMotor( this.nor, true ),this.rotationalLimitMotor1,this.rotationalLimitMotor2);\\n\\n}\\n\\nWheelJoint.prototype = Object.assign( Object.create( Joint.prototype ), {\\n\\n    constructor: WheelJoint,\\n\\n    preSolve: function ( timeStep, invTimeStep ) {\\n\\n        this.updateAnchorPoints();\\n\\n        this.ax1.copy( this.localAxis1 ).applyMatrix3( this.body1.rotation, true );\\n        this.an1.copy( this.localAngle1 ).applyMatrix3( this.body1.rotation, true );\\n\\n        this.ax2.copy( this.localAxis2 ).applyMatrix3( this.body2.rotation, true );\\n        this.an2.copy( this.localAngle2 ).applyMatrix3( this.body2.rotation, true );\\n\\n        this.r3.limitMotor1.angle = _Math.dotVectors( this.ax1, this.ax2 );\\n\\n        var limite = _Math.dotVectors( this.an1, this.ax2 );\\n\\n        if( _Math.dotVectors( this.ax1, this.tmp.crossVectors( this.an1, this.ax2 ) ) < 0 ) this.rotationalLimitMotor1.angle = -limite;\\n        else this.rotationalLimitMotor1.angle = limite;\\n\\n        limite = _Math.dotVectors( this.an2, this.ax1 );\\n\\n        if( _Math.dotVectors( this.ax2, this.tmp.crossVectors( this.an2, this.ax1 ) ) < 0 ) this.rotationalLimitMotor2.angle = -limite;\\n        else this.rotationalLimitMotor2.angle = limite;\\n\\n        this.nor.crossVectors( this.ax1, this.ax2 ).normalize();\\n        this.tan.crossVectors( this.nor, this.ax2 ).normalize();\\n        this.bin.crossVectors( this.nor, this.ax1 ).normalize();\\n        \\n        this.r3.preSolve(timeStep,invTimeStep);\\n        this.t3.preSolve(timeStep,invTimeStep);\\n\\n    },\\n\\n    solve: function () {\\n\\n        this.r3.solve();\\n        this.t3.solve();\\n\\n    },\\n\\n    postSolve: function () {\\n\\n    }\\n\\n});\\n\\nfunction JointConfig(){\\r\\n\\r\\n    this.scale = 1;\\r\\n    this.invScale = 1;\\r\\n\\r\\n    // The first rigid body of the joint.\\r\\n    this.body1 = null;\\r\\n    // The second rigid body of the joint.\\r\\n    this.body2 = null;\\r\\n    // The anchor point on the first rigid body in local coordinate system.\\r\\n    this.localAnchorPoint1 = new Vec3();\\r\\n    //  The anchor point on the second rigid body in local coordinate system.\\r\\n    this.localAnchorPoint2 = new Vec3();\\r\\n    // The axis in the first body's coordinate system.\\r\\n    // his property is available in some joints.\\r\\n    this.localAxis1 = new Vec3();\\r\\n    // The axis in the second body's coordinate system.\\r\\n    // This property is available in some joints.\\r\\n    this.localAxis2 = new Vec3();\\r\\n    //  Whether allow collision between connected rigid bodies or not.\\r\\n    this.allowCollision = false;\\r\\n\\r\\n}\\n\\n/**\\r\\n * This class holds mass information of a shape.\\r\\n * @author lo-th\\r\\n * @author saharan\\r\\n */\\r\\n\\r\\nfunction MassInfo (){\\r\\n\\r\\n    // Mass of the shape.\\r\\n    this.mass = 0;\\r\\n\\r\\n    // The moment inertia of the shape.\\r\\n    this.inertia = new Mat33();\\r\\n\\r\\n}\\n\\n/**\\n* A link list of contacts.\\n* @author saharan\\n*/\\nfunction ContactLink ( contact ){\\n    \\n\\t// The previous contact link.\\n    this.prev = null;\\n    // The next contact link.\\n    this.next = null;\\n    // The shape of the contact.\\n    this.shape = null;\\n    // The other rigid body.\\n    this.body = null;\\n    // The contact of the link.\\n    this.contact = contact;\\n\\n}\\n\\nfunction ImpulseDataBuffer (){\\n\\n    this.lp1X = NaN;\\n    this.lp1Y = NaN;\\n    this.lp1Z = NaN;\\n    this.lp2X = NaN;\\n    this.lp2Y = NaN;\\n    this.lp2Z = NaN;\\n    this.impulse = NaN;\\n\\n}\\n\\n/**\\n* The class holds details of the contact point.\\n* @author saharan\\n*/\\n\\nfunction ManifoldPoint(){\\n\\n    // Whether this manifold point is persisting or not.\\n    this.warmStarted = false;\\n    //  The position of this manifold point.\\n    this.position = new Vec3();\\n    // The position in the first shape's coordinate.\\n    this.localPoint1 = new Vec3();\\n    //  The position in the second shape's coordinate.\\n    this.localPoint2 = new Vec3();\\n    // The normal vector of this manifold point.\\n    this.normal = new Vec3();\\n    // The tangent vector of this manifold point.\\n    this.tangent = new Vec3();\\n    // The binormal vector of this manifold point.\\n    this.binormal = new Vec3();\\n    // The impulse in normal direction.\\n    this.normalImpulse = 0;\\n    // The impulse in tangent direction.\\n    this.tangentImpulse = 0;\\n    // The impulse in binormal direction.\\n    this.binormalImpulse = 0;\\n    // The denominator in normal direction.\\n    this.normalDenominator = 0;\\n    // The denominator in tangent direction.\\n    this.tangentDenominator = 0;\\n    // The denominator in binormal direction.\\n    this.binormalDenominator = 0;\\n    // The depth of penetration.\\n    this.penetration = 0;\\n\\n}\\n\\n/**\\n* A contact manifold between two shapes.\\n* @author saharan\\n* @author lo-th\\n*/\\n\\nfunction ContactManifold () {\\n\\n    // The first rigid body.\\n    this.body1 = null;\\n    // The second rigid body.\\n    this.body2 = null;\\n    // The number of manifold points.\\n    this.numPoints = 0;\\n    // The manifold points.\\n    this.points = [\\n        new ManifoldPoint(),\\n        new ManifoldPoint(),\\n        new ManifoldPoint(),\\n        new ManifoldPoint()\\n    ];\\n\\n}\\n\\nContactManifold.prototype = {\\n\\n    constructor: ContactManifold,\\n\\n    //Reset the manifold.\\n    reset:function( shape1, shape2 ){\\n\\n        this.body1 = shape1.parent;\\n        this.body2 = shape2.parent;\\n        this.numPoints = 0;\\n\\n    },\\n\\n    //  Add a point into this manifold.\\n    addPointVec: function ( pos, norm, penetration, flip ) {\\n        \\n        var p = this.points[ this.numPoints++ ];\\n\\n        p.position.copy( pos );\\n        p.localPoint1.sub( pos, this.body1.position ).applyMatrix3( this.body1.rotation );\\n        p.localPoint2.sub( pos, this.body2.position ).applyMatrix3( this.body2.rotation );\\n\\n        p.normal.copy( norm );\\n        if( flip ) p.normal.negate();\\n\\n        p.normalImpulse = 0;\\n        p.penetration = penetration;\\n        p.warmStarted = false;\\n        \\n    },\\n\\n    //  Add a point into this manifold.\\n    addPoint: function ( x, y, z, nx, ny, nz, penetration, flip ) {\\n        \\n        var p = this.points[ this.numPoints++ ];\\n\\n        p.position.set( x, y, z );\\n        p.localPoint1.sub( p.position, this.body1.position ).applyMatrix3( this.body1.rotation );\\n        p.localPoint2.sub( p.position, this.body2.position ).applyMatrix3( this.body2.rotation );\\n\\n        p.normalImpulse = 0;\\n\\n        p.normal.set( nx, ny, nz );\\n        if( flip ) p.normal.negate();\\n\\n        p.penetration = penetration;\\n        p.warmStarted = false;\\n        \\n    }\\n};\\n\\nfunction ContactPointDataBuffer (){\\n\\n    this.nor = new Vec3();\\n    this.tan = new Vec3();\\n    this.bin = new Vec3();\\n\\n    this.norU1 = new Vec3();\\n    this.tanU1 = new Vec3();\\n    this.binU1 = new Vec3();\\n\\n    this.norU2 = new Vec3();\\n    this.tanU2 = new Vec3();\\n    this.binU2 = new Vec3();\\n\\n    this.norT1 = new Vec3();\\n    this.tanT1 = new Vec3();\\n    this.binT1 = new Vec3();\\n\\n    this.norT2 = new Vec3();\\n    this.tanT2 = new Vec3();\\n    this.binT2 = new Vec3();\\n\\n    this.norTU1 = new Vec3();\\n    this.tanTU1 = new Vec3();\\n    this.binTU1 = new Vec3();\\n\\n    this.norTU2 = new Vec3();\\n    this.tanTU2 = new Vec3();\\n    this.binTU2 = new Vec3();\\n\\n    this.norImp = 0;\\n    this.tanImp = 0;\\n    this.binImp = 0;\\n\\n    this.norDen = 0;\\n    this.tanDen = 0;\\n    this.binDen = 0;\\n\\n    this.norTar = 0;\\n\\n    this.next = null;\\n    this.last = false;\\n\\n}\\n\\n/**\\n* ...\\n* @author saharan\\n*/\\nfunction ContactConstraint ( manifold ){\\n    \\n    Constraint.call( this );\\n    // The contact manifold of the constraint.\\n    this.manifold = manifold;\\n    // The coefficient of restitution of the constraint.\\n    this.restitution=NaN;\\n    // The coefficient of friction of the constraint.\\n    this.friction=NaN;\\n    this.p1=null;\\n    this.p2=null;\\n    this.lv1=null;\\n    this.lv2=null;\\n    this.av1=null;\\n    this.av2=null;\\n    this.i1=null;\\n    this.i2=null;\\n\\n    //this.ii1 = null;\\n    //this.ii2 = null;\\n\\n    this.tmp = new Vec3();\\n    this.tmpC1 = new Vec3();\\n    this.tmpC2 = new Vec3();\\n\\n    this.tmpP1 = new Vec3();\\n    this.tmpP2 = new Vec3();\\n\\n    this.tmplv1 = new Vec3();\\n    this.tmplv2 = new Vec3();\\n    this.tmpav1 = new Vec3();\\n    this.tmpav2 = new Vec3();\\n\\n    this.m1=NaN;\\n    this.m2=NaN;\\n    this.num=0;\\n    \\n    this.ps = manifold.points;\\n    this.cs = new ContactPointDataBuffer();\\n    this.cs.next = new ContactPointDataBuffer();\\n    this.cs.next.next = new ContactPointDataBuffer();\\n    this.cs.next.next.next = new ContactPointDataBuffer();\\n}\\n\\nContactConstraint.prototype = Object.assign( Object.create( Constraint.prototype ), {\\n\\n    constructor: ContactConstraint,\\n\\n    // Attach the constraint to the bodies.\\n    attach: function(){\\n\\n        this.p1=this.body1.position;\\n        this.p2=this.body2.position;\\n        this.lv1=this.body1.linearVelocity;\\n        this.av1=this.body1.angularVelocity;\\n        this.lv2=this.body2.linearVelocity;\\n        this.av2=this.body2.angularVelocity;\\n        this.i1=this.body1.inverseInertia;\\n        this.i2=this.body2.inverseInertia;\\n\\n    },\\n\\n    // Detach the constraint from the bodies.\\n    detach: function(){\\n\\n        this.p1=null;\\n        this.p2=null;\\n        this.lv1=null;\\n        this.lv2=null;\\n        this.av1=null;\\n        this.av2=null;\\n        this.i1=null;\\n        this.i2=null;\\n\\n    },\\n\\n    preSolve: function( timeStep, invTimeStep ){\\n\\n        this.m1 = this.body1.inverseMass;\\n        this.m2 = this.body2.inverseMass;\\n\\n        var m1m2 = this.m1 + this.m2;\\n\\n        this.num = this.manifold.numPoints;\\n\\n        var c = this.cs;\\n        var p, rvn, len, norImp, norTar, sepV, i1, i2;\\n\\n        for( var i=0; i < this.num; i++ ){\\n\\n            p = this.ps[i];\\n\\n            this.tmpP1.sub( p.position, this.p1 );\\n            this.tmpP2.sub( p.position, this.p2 );\\n\\n            this.tmpC1.crossVectors( this.av1, this.tmpP1 );\\n            this.tmpC2.crossVectors( this.av2, this.tmpP2 );\\n\\n            c.norImp = p.normalImpulse;\\n            c.tanImp = p.tangentImpulse;\\n            c.binImp = p.binormalImpulse;\\n\\n            c.nor.copy( p.normal );\\n\\n            this.tmp.set(\\n\\n                ( this.lv2.x + this.tmpC2.x ) - ( this.lv1.x + this.tmpC1.x ),\\n                ( this.lv2.y + this.tmpC2.y ) - ( this.lv1.y + this.tmpC1.y ),\\n                ( this.lv2.z + this.tmpC2.z ) - ( this.lv1.z + this.tmpC1.z )\\n\\n            );\\n\\n            rvn = _Math.dotVectors( c.nor, this.tmp );\\n\\n            c.tan.set(\\n                this.tmp.x - rvn * c.nor.x,\\n                this.tmp.y - rvn * c.nor.y,\\n                this.tmp.z - rvn * c.nor.z\\n            );\\n\\n            len = _Math.dotVectors( c.tan, c.tan );\\n\\n            if( len <= 0.04 ) {\\n                c.tan.tangent( c.nor );\\n            }\\n\\n            c.tan.normalize();\\n\\n            c.bin.crossVectors( c.nor, c.tan );\\n\\n            c.norU1.scale( c.nor, this.m1 );\\n            c.norU2.scale( c.nor, this.m2 );\\n\\n            c.tanU1.scale( c.tan, this.m1 );\\n            c.tanU2.scale( c.tan, this.m2 );\\n\\n            c.binU1.scale( c.bin, this.m1 );\\n            c.binU2.scale( c.bin, this.m2 );\\n\\n            c.norT1.crossVectors( this.tmpP1, c.nor );\\n            c.tanT1.crossVectors( this.tmpP1, c.tan );\\n            c.binT1.crossVectors( this.tmpP1, c.bin );\\n\\n            c.norT2.crossVectors( this.tmpP2, c.nor );\\n            c.tanT2.crossVectors( this.tmpP2, c.tan );\\n            c.binT2.crossVectors( this.tmpP2, c.bin );\\n\\n            i1 = this.i1;\\n            i2 = this.i2;\\n\\n            c.norTU1.copy( c.norT1 ).applyMatrix3( i1, true );\\n            c.tanTU1.copy( c.tanT1 ).applyMatrix3( i1, true );\\n            c.binTU1.copy( c.binT1 ).applyMatrix3( i1, true );\\n\\n            c.norTU2.copy( c.norT2 ).applyMatrix3( i2, true );\\n            c.tanTU2.copy( c.tanT2 ).applyMatrix3( i2, true );\\n            c.binTU2.copy( c.binT2 ).applyMatrix3( i2, true );\\n\\n            /*c.norTU1.mulMat( this.i1, c.norT1 );\\n            c.tanTU1.mulMat( this.i1, c.tanT1 );\\n            c.binTU1.mulMat( this.i1, c.binT1 );\\n\\n            c.norTU2.mulMat( this.i2, c.norT2 );\\n            c.tanTU2.mulMat( this.i2, c.tanT2 );\\n            c.binTU2.mulMat( this.i2, c.binT2 );*/\\n\\n            this.tmpC1.crossVectors( c.norTU1, this.tmpP1 );\\n            this.tmpC2.crossVectors( c.norTU2, this.tmpP2 );\\n            this.tmp.add( this.tmpC1, this.tmpC2 );\\n            c.norDen = 1 / ( m1m2 +_Math.dotVectors( c.nor, this.tmp ));\\n\\n            this.tmpC1.crossVectors( c.tanTU1, this.tmpP1 );\\n            this.tmpC2.crossVectors( c.tanTU2, this.tmpP2 );\\n            this.tmp.add( this.tmpC1, this.tmpC2 );\\n            c.tanDen = 1 / ( m1m2 +_Math.dotVectors( c.tan, this.tmp ));\\n\\n            this.tmpC1.crossVectors( c.binTU1, this.tmpP1 );\\n            this.tmpC2.crossVectors( c.binTU2, this.tmpP2 );\\n            this.tmp.add( this.tmpC1, this.tmpC2 );\\n            c.binDen = 1 / ( m1m2 +_Math.dotVectors( c.bin, this.tmp ));\\n\\n            if( p.warmStarted ){\\n\\n                norImp = p.normalImpulse;\\n\\n                this.lv1.addScaledVector( c.norU1, norImp );\\n                this.av1.addScaledVector( c.norTU1, norImp );\\n\\n                this.lv2.subScaledVector( c.norU2, norImp );\\n                this.av2.subScaledVector( c.norTU2, norImp );\\n\\n                c.norImp = norImp;\\n                c.tanImp = 0;\\n                c.binImp = 0;\\n                rvn = 0; // disable bouncing\\n\\n            } else {\\n\\n                c.norImp=0;\\n                c.tanImp=0;\\n                c.binImp=0;\\n\\n            }\\n\\n\\n            if(rvn>-1) rvn=0; // disable bouncing\\n            \\n            norTar = this.restitution*-rvn;\\n            sepV = -(p.penetration+0.005)*invTimeStep*0.05; // allow 0.5cm error\\n            if(norTar<sepV) norTar=sepV;\\n            c.norTar = norTar;\\n            c.last = i==this.num-1;\\n            c = c.next;\\n        }\\n    },\\n\\n    solve: function(){\\n\\n        this.tmplv1.copy( this.lv1 );\\n        this.tmplv2.copy( this.lv2 );\\n        this.tmpav1.copy( this.av1 );\\n        this.tmpav2.copy( this.av2 );\\n\\n        var oldImp1, newImp1, oldImp2, newImp2, rvn, norImp, tanImp, binImp, max, len;\\n\\n        var c = this.cs;\\n\\n        while(true){\\n\\n            norImp = c.norImp;\\n            tanImp = c.tanImp;\\n            binImp = c.binImp;\\n            max = -norImp * this.friction;\\n\\n            this.tmp.sub( this.tmplv2, this.tmplv1 );\\n\\n            rvn = _Math.dotVectors( this.tmp, c.tan ) + _Math.dotVectors( this.tmpav2, c.tanT2 ) - _Math.dotVectors( this.tmpav1, c.tanT1 );\\n        \\n            oldImp1 = tanImp;\\n            newImp1 = rvn*c.tanDen;\\n            tanImp += newImp1;\\n\\n            rvn = _Math.dotVectors( this.tmp, c.bin ) + _Math.dotVectors( this.tmpav2, c.binT2 ) - _Math.dotVectors( this.tmpav1, c.binT1 );\\n      \\n            oldImp2 = binImp;\\n            newImp2 = rvn*c.binDen;\\n            binImp += newImp2;\\n\\n            // cone friction clamp\\n            len = tanImp*tanImp + binImp*binImp;\\n            if(len > max * max ){\\n                len = max/_Math.sqrt(len);\\n                tanImp *= len;\\n                binImp *= len;\\n            }\\n\\n            newImp1 = tanImp-oldImp1;\\n            newImp2 = binImp-oldImp2;\\n\\n            //\\n\\n            this.tmp.set( \\n                c.tanU1.x*newImp1 + c.binU1.x*newImp2,\\n                c.tanU1.y*newImp1 + c.binU1.y*newImp2,\\n                c.tanU1.z*newImp1 + c.binU1.z*newImp2\\n            );\\n\\n            this.tmplv1.addEqual( this.tmp );\\n\\n            this.tmp.set(\\n                c.tanTU1.x*newImp1 + c.binTU1.x*newImp2,\\n                c.tanTU1.y*newImp1 + c.binTU1.y*newImp2,\\n                c.tanTU1.z*newImp1 + c.binTU1.z*newImp2\\n            );\\n\\n            this.tmpav1.addEqual( this.tmp );\\n\\n            this.tmp.set(\\n                c.tanU2.x*newImp1 + c.binU2.x*newImp2,\\n                c.tanU2.y*newImp1 + c.binU2.y*newImp2,\\n                c.tanU2.z*newImp1 + c.binU2.z*newImp2\\n            );\\n\\n            this.tmplv2.subEqual( this.tmp );\\n\\n            this.tmp.set(\\n                c.tanTU2.x*newImp1 + c.binTU2.x*newImp2,\\n                c.tanTU2.y*newImp1 + c.binTU2.y*newImp2,\\n                c.tanTU2.z*newImp1 + c.binTU2.z*newImp2\\n            );\\n\\n            this.tmpav2.subEqual( this.tmp );\\n\\n            // restitution part\\n\\n            this.tmp.sub( this.tmplv2, this.tmplv1 );\\n\\n            rvn = _Math.dotVectors( this.tmp, c.nor ) + _Math.dotVectors( this.tmpav2, c.norT2 ) - _Math.dotVectors( this.tmpav1, c.norT1 );\\n\\n            oldImp1 = norImp;\\n            newImp1 = (rvn-c.norTar)*c.norDen;\\n            norImp += newImp1;\\n            if( norImp > 0 ) norImp = 0;\\n\\n            newImp1 = norImp - oldImp1;\\n\\n            this.tmplv1.addScaledVector( c.norU1, newImp1 );\\n            this.tmpav1.addScaledVector( c.norTU1, newImp1 );\\n            this.tmplv2.subScaledVector( c.norU2, newImp1 );\\n            this.tmpav2.subScaledVector( c.norTU2, newImp1 );\\n\\n            c.norImp = norImp;\\n            c.tanImp = tanImp;\\n            c.binImp = binImp;\\n\\n            if(c.last)break;\\n            c = c.next;\\n        }\\n\\n        this.lv1.copy( this.tmplv1 );\\n        this.lv2.copy( this.tmplv2 );\\n        this.av1.copy( this.tmpav1 );\\n        this.av2.copy( this.tmpav2 );\\n\\n    },\\n\\n    postSolve: function(){\\n\\n        var c = this.cs, p;\\n        var i = this.num;\\n        while(i--){\\n        //for(var i=0;i<this.num;i++){\\n            p = this.ps[i];\\n            p.normal.copy( c.nor );\\n            p.tangent.copy( c.tan );\\n            p.binormal.copy( c.bin );\\n\\n            p.normalImpulse = c.norImp;\\n            p.tangentImpulse = c.tanImp;\\n            p.binormalImpulse = c.binImp;\\n            p.normalDenominator = c.norDen;\\n            p.tangentDenominator = c.tanDen;\\n            p.binormalDenominator = c.binDen;\\n            c=c.next;\\n        }\\n    }\\n\\n});\\n\\n/**\\n* A contact is a pair of shapes whose axis-aligned bounding boxes are overlapping.\\n* @author saharan\\n*/\\n\\nfunction Contact(){\\n\\n    // The first shape.\\n    this.shape1 = null;\\n    // The second shape.\\n    this.shape2 = null;\\n    // The first rigid body.\\n    this.body1 = null;\\n    // The second rigid body.\\n    this.body2 = null;\\n    // The previous contact in the world.\\n    this.prev = null;\\n    // The next contact in the world.\\n    this.next = null;\\n    // Internal\\n    this.persisting = false;\\n    // Whether both the rigid bodies are sleeping or not.\\n    this.sleeping = false;\\n    // The collision detector between two shapes.\\n    this.detector = null;\\n    // The contact constraint of the contact.\\n    this.constraint = null;\\n    // Whether the shapes are touching or not.\\n    this.touching = false;\\n    // shapes is very close and touching \\n    this.close = false;\\n\\n    this.dist = _Math.INF;\\n\\n    this.b1Link = new ContactLink( this );\\n    this.b2Link = new ContactLink( this );\\n    this.s1Link = new ContactLink( this );\\n    this.s2Link = new ContactLink( this );\\n\\n    // The contact manifold of the contact.\\n    this.manifold = new ContactManifold();\\n\\n    this.buffer = [\\n\\n        new ImpulseDataBuffer(),\\n        new ImpulseDataBuffer(),\\n        new ImpulseDataBuffer(),\\n        new ImpulseDataBuffer()\\n\\n    ];\\n\\n    this.points = this.manifold.points;\\n    this.constraint = new ContactConstraint( this.manifold );\\n    \\n}\\n\\nObject.assign( Contact.prototype, {\\n\\n    Contact: true,\\n\\n    mixRestitution: function ( restitution1, restitution2 ) {\\n\\n        return _Math.sqrt(restitution1*restitution2);\\n\\n    },\\n    mixFriction: function ( friction1, friction2 ) {\\n\\n        return _Math.sqrt(friction1*friction2);\\n\\n    },\\n\\n    /**\\n    * Update the contact manifold.\\n    */\\n    updateManifold: function () {\\n\\n        this.constraint.restitution =this.mixRestitution(this.shape1.restitution,this.shape2.restitution);\\n        this.constraint.friction=this.mixFriction(this.shape1.friction,this.shape2.friction);\\n        var numBuffers=this.manifold.numPoints;\\n        var i = numBuffers;\\n        while(i--){\\n        //for(var i=0;i<numBuffers;i++){\\n            var b = this.buffer[i];\\n            var p = this.points[i];\\n            b.lp1X=p.localPoint1.x;\\n            b.lp1Y=p.localPoint1.y;\\n            b.lp1Z=p.localPoint1.z;\\n            b.lp2X=p.localPoint2.x;\\n            b.lp2Y=p.localPoint2.y;\\n            b.lp2Z=p.localPoint2.z;\\n            b.impulse=p.normalImpulse;\\n        }\\n        this.manifold.numPoints=0;\\n        this.detector.detectCollision(this.shape1,this.shape2,this.manifold);\\n        var num=this.manifold.numPoints;\\n        if(num==0){\\n            this.touching = false;\\n            this.close = false;\\n            this.dist = _Math.INF;\\n            return;\\n        }\\n\\n        if( this.touching || this.dist < 0.001 ) this.close = true;\\n        this.touching=true;\\n        i = num;\\n        while(i--){\\n        //for(i=0; i<num; i++){\\n            p=this.points[i];\\n            var lp1x=p.localPoint1.x;\\n            var lp1y=p.localPoint1.y;\\n            var lp1z=p.localPoint1.z;\\n            var lp2x=p.localPoint2.x;\\n            var lp2y=p.localPoint2.y;\\n            var lp2z=p.localPoint2.z;\\n            var index=-1;\\n            var minDistance=0.0004;\\n            var j = numBuffers;\\n            while(j--){\\n            //for(var j=0;j<numBuffers;j++){\\n                b=this.buffer[j];\\n                var dx=b.lp1X-lp1x;\\n                var dy=b.lp1Y-lp1y;\\n                var dz=b.lp1Z-lp1z;\\n                var distance1=dx*dx+dy*dy+dz*dz;\\n                dx=b.lp2X-lp2x;\\n                dy=b.lp2Y-lp2y;\\n                dz=b.lp2Z-lp2z;\\n                var distance2=dx*dx+dy*dy+dz*dz;\\n                if(distance1<distance2){\\n                    if(distance1<minDistance){\\n                        minDistance=distance1;\\n                        index=j;\\n                    }\\n                }else{\\n                    if(distance2<minDistance){\\n                        minDistance=distance2;\\n                        index=j;\\n                    }\\n                }\\n\\n                if( minDistance < this.dist ) this.dist = minDistance;\\n\\n            }\\n            if(index!=-1){\\n                var tmp=this.buffer[index];\\n                this.buffer[index]=this.buffer[--numBuffers];\\n                this.buffer[numBuffers]=tmp;\\n                p.normalImpulse=tmp.impulse;\\n                p.warmStarted=true;\\n            }else{\\n                p.normalImpulse=0;\\n                p.warmStarted=false;\\n            }\\n        }\\n    },\\n    /**\\n    * Attach the contact to the shapes.\\n    * @param   shape1\\n    * @param   shape2\\n    */\\n    attach:function(shape1,shape2){\\n        this.shape1=shape1;\\n        this.shape2=shape2;\\n        this.body1=shape1.parent;\\n        this.body2=shape2.parent;\\n\\n        this.manifold.body1=this.body1;\\n        this.manifold.body2=this.body2;\\n        this.constraint.body1=this.body1;\\n        this.constraint.body2=this.body2;\\n        this.constraint.attach();\\n\\n        this.s1Link.shape=shape2;\\n        this.s1Link.body=this.body2;\\n        this.s2Link.shape=shape1;\\n        this.s2Link.body=this.body1;\\n\\n        if(shape1.contactLink!=null)(this.s1Link.next=shape1.contactLink).prev=this.s1Link;\\n        else this.s1Link.next=null;\\n        shape1.contactLink=this.s1Link;\\n        shape1.numContacts++;\\n\\n        if(shape2.contactLink!=null)(this.s2Link.next=shape2.contactLink).prev=this.s2Link;\\n        else this.s2Link.next=null;\\n        shape2.contactLink=this.s2Link;\\n        shape2.numContacts++;\\n\\n        this.b1Link.shape=shape2;\\n        this.b1Link.body=this.body2;\\n        this.b2Link.shape=shape1;\\n        this.b2Link.body=this.body1;\\n\\n        if(this.body1.contactLink!=null)(this.b1Link.next=this.body1.contactLink).prev=this.b1Link;\\n        else this.b1Link.next=null;\\n        this.body1.contactLink=this.b1Link;\\n        this.body1.numContacts++;\\n\\n        if(this.body2.contactLink!=null)(this.b2Link.next=this.body2.contactLink).prev=this.b2Link;\\n        else this.b2Link.next=null;\\n        this.body2.contactLink=this.b2Link;\\n        this.body2.numContacts++;\\n\\n        this.prev=null;\\n        this.next=null;\\n\\n        this.persisting=true;\\n        this.sleeping=this.body1.sleeping&&this.body2.sleeping;\\n        this.manifold.numPoints=0;\\n    },\\n    /**\\n    * Detach the contact from the shapes.\\n    */\\n    detach:function(){\\n        var prev=this.s1Link.prev;\\n        var next=this.s1Link.next;\\n        if(prev!==null)prev.next=next;\\n        if(next!==null)next.prev=prev;\\n        if(this.shape1.contactLink==this.s1Link)this.shape1.contactLink=next;\\n        this.s1Link.prev=null;\\n        this.s1Link.next=null;\\n        this.s1Link.shape=null;\\n        this.s1Link.body=null;\\n        this.shape1.numContacts--;\\n\\n        prev=this.s2Link.prev;\\n        next=this.s2Link.next;\\n        if(prev!==null)prev.next=next;\\n        if(next!==null)next.prev=prev;\\n        if(this.shape2.contactLink==this.s2Link)this.shape2.contactLink=next;\\n        this.s2Link.prev=null;\\n        this.s2Link.next=null;\\n        this.s2Link.shape=null;\\n        this.s2Link.body=null;\\n        this.shape2.numContacts--;\\n\\n        prev=this.b1Link.prev;\\n        next=this.b1Link.next;\\n        if(prev!==null)prev.next=next;\\n        if(next!==null)next.prev=prev;\\n        if(this.body1.contactLink==this.b1Link)this.body1.contactLink=next;\\n        this.b1Link.prev=null;\\n        this.b1Link.next=null;\\n        this.b1Link.shape=null;\\n        this.b1Link.body=null;\\n        this.body1.numContacts--;\\n\\n        prev=this.b2Link.prev;\\n        next=this.b2Link.next;\\n        if(prev!==null)prev.next=next;\\n        if(next!==null)next.prev=prev;\\n        if(this.body2.contactLink==this.b2Link)this.body2.contactLink=next;\\n        this.b2Link.prev=null;\\n        this.b2Link.next=null;\\n        this.b2Link.shape=null;\\n        this.b2Link.body=null;\\n        this.body2.numContacts--;\\n\\n        this.manifold.body1=null;\\n        this.manifold.body2=null;\\n        this.constraint.body1=null;\\n        this.constraint.body2=null;\\n        this.constraint.detach();\\n\\n        this.shape1=null;\\n        this.shape2=null;\\n        this.body1=null;\\n        this.body2=null;\\n    }\\n\\n} );\\n\\n/**\\r\\n* The class of rigid body.\\r\\n* Rigid body has the shape of a single or multiple collision processing,\\r\\n* I can set the parameters individually.\\r\\n* @author saharan\\r\\n* @author lo-th\\r\\n*/\\r\\n\\r\\nfunction RigidBody ( Position, Rotation ) {\\r\\n\\r\\n    this.position = Position || new Vec3();\\r\\n    this.orientation = Rotation || new Quat();\\r\\n\\r\\n    this.scale = 1;\\r\\n    this.invScale = 1;\\r\\n\\r\\n    // possible link to three Mesh;\\r\\n    this.mesh = null;\\r\\n\\r\\n    this.id = NaN;\\r\\n    this.name = \\\"\\\";\\r\\n    // The maximum number of shapes that can be added to a one rigid.\\r\\n    //this.MAX_SHAPES = 64;//64;\\r\\n\\r\\n    this.prev = null;\\r\\n    this.next = null;\\r\\n\\r\\n    // I represent the kind of rigid body.\\r\\n    // Please do not change from the outside this variable.\\r\\n    // If you want to change the type of rigid body, always\\r\\n    // Please specify the type you want to set the arguments of setupMass method.\\r\\n    this.type = BODY_NULL;\\r\\n\\r\\n    this.massInfo = new MassInfo();\\r\\n\\r\\n    this.newPosition = new Vec3();\\r\\n    this.controlPos = false;\\r\\n    this.newOrientation = new Quat();\\r\\n    this.newRotation = new Vec3();\\r\\n    this.currentRotation = new Vec3();\\r\\n    this.controlRot = false;\\r\\n    this.controlRotInTime = false;\\r\\n\\r\\n    this.quaternion = new Quat();\\r\\n    this.pos = new Vec3();\\r\\n\\r\\n\\r\\n\\r\\n    // Is the translational velocity.\\r\\n    this.linearVelocity = new Vec3();\\r\\n    // Is the angular velocity.\\r\\n    this.angularVelocity = new Vec3();\\r\\n\\r\\n    //--------------------------------------------\\r\\n    //  Please do not change from the outside this variables.\\r\\n    //--------------------------------------------\\r\\n\\r\\n    // It is a world that rigid body has been added.\\r\\n    this.parent = null;\\r\\n    this.contactLink = null;\\r\\n    this.numContacts = 0;\\r\\n\\r\\n    // An array of shapes that are included in the rigid body.\\r\\n    this.shapes = null;\\r\\n    // The number of shapes that are included in the rigid body.\\r\\n    this.numShapes = 0;\\r\\n\\r\\n    // It is the link array of joint that is connected to the rigid body.\\r\\n    this.jointLink = null;\\r\\n    // The number of joints that are connected to the rigid body.\\r\\n    this.numJoints = 0;\\r\\n\\r\\n    // It is the world coordinate of the center of gravity in the sleep just before.\\r\\n    this.sleepPosition = new Vec3();\\r\\n    // It is a quaternion that represents the attitude of sleep just before.\\r\\n    this.sleepOrientation = new Quat();\\r\\n    // I will show this rigid body to determine whether it is a rigid body static.\\r\\n    this.isStatic = false;\\r\\n    // I indicates that this rigid body to determine whether it is a rigid body dynamic.\\r\\n    this.isDynamic = false;\\r\\n\\r\\n    this.isKinematic = false;\\r\\n\\r\\n    // It is a rotation matrix representing the orientation.\\r\\n    this.rotation = new Mat33();\\r\\n\\r\\n    //--------------------------------------------\\r\\n    // It will be recalculated automatically from the shape, which is included.\\r\\n    //--------------------------------------------\\r\\n\\r\\n    // This is the weight.\\r\\n    this.mass = 0;\\r\\n    // It is the reciprocal of the mass.\\r\\n    this.inverseMass = 0;\\r\\n    // It is the inverse of the inertia tensor in the world system.\\r\\n    this.inverseInertia = new Mat33();\\r\\n    // It is the inertia tensor in the initial state.\\r\\n    this.localInertia = new Mat33();\\r\\n    // It is the inverse of the inertia tensor in the initial state.\\r\\n    this.inverseLocalInertia = new Mat33();\\r\\n\\r\\n    this.tmpInertia = new Mat33();\\r\\n\\r\\n\\r\\n    // I indicates rigid body whether it has been added to the simulation Island.\\r\\n    this.addedToIsland = false;\\r\\n    // It shows how to sleep rigid body.\\r\\n    this.allowSleep = true;\\r\\n    // This is the time from when the rigid body at rest.\\r\\n    this.sleepTime = 0;\\r\\n    // I shows rigid body to determine whether it is a sleep state.\\r\\n    this.sleeping = false;\\r\\n\\r\\n}\\r\\n\\r\\nObject.assign( RigidBody.prototype, {\\r\\n\\r\\n    setParent: function ( world ) {\\r\\n\\r\\n        this.parent = world;\\r\\n        this.scale = this.parent.scale;\\r\\n        this.invScale = this.parent.invScale;\\r\\n        this.id = this.parent.numRigidBodies;\\r\\n        if( !this.name ) this.name = this.id;\\r\\n\\r\\n        this.updateMesh();\\r\\n\\r\\n    },\\r\\n\\r\\n    /**\\r\\n     * I'll add a shape to rigid body.\\r\\n     * If you add a shape, please call the setupMass method to step up to the start of the next.\\r\\n     * @param   shape shape to Add\\r\\n     */\\r\\n    addShape:function(shape){\\r\\n\\r\\n        if(shape.parent){\\r\\n\\t\\t\\tprintError(\\\"RigidBody\\\", \\\"It is not possible that you add a shape which already has an associated body.\\\");\\r\\n\\t\\t}\\r\\n\\r\\n        if(this.shapes!=null)( this.shapes.prev = shape ).next = this.shapes;\\r\\n        this.shapes = shape;\\r\\n        shape.parent = this;\\r\\n        if(this.parent) this.parent.addShape( shape );\\r\\n        this.numShapes++;\\r\\n\\r\\n    },\\r\\n    /**\\r\\n     * I will delete the shape from the rigid body.\\r\\n     * If you delete a shape, please call the setupMass method to step up to the start of the next.\\r\\n     * @param shape {Shape} to delete\\r\\n     * @return void\\r\\n     */\\r\\n    removeShape:function(shape){\\r\\n\\r\\n        var remove = shape;\\r\\n        if(remove.parent!=this)return;\\r\\n        var prev=remove.prev;\\r\\n        var next=remove.next;\\r\\n        if(prev!=null) prev.next=next;\\r\\n        if(next!=null) next.prev=prev;\\r\\n        if(this.shapes==remove)this.shapes=next;\\r\\n        remove.prev=null;\\r\\n        remove.next=null;\\r\\n        remove.parent=null;\\r\\n        if(this.parent)this.parent.removeShape(remove);\\r\\n        this.numShapes--;\\r\\n\\r\\n    },\\r\\n\\r\\n    remove: function () {\\r\\n\\r\\n        this.dispose();\\r\\n\\r\\n    },\\r\\n\\r\\n    dispose: function () {\\r\\n\\r\\n        this.parent.removeRigidBody( this );\\r\\n\\r\\n    },\\r\\n\\r\\n    checkContact: function( name ) {\\r\\n\\r\\n        this.parent.checkContact( this.name, name );\\r\\n\\r\\n    },\\r\\n\\r\\n    /**\\r\\n     * Calulates mass datas(center of gravity, mass, moment inertia, etc...).\\r\\n     * If the parameter type is set to BODY_STATIC, the rigid body will be fixed to the space.\\r\\n     * If the parameter adjustPosition is set to true, the shapes' relative positions and\\r\\n     * the rigid body's position will be adjusted to the center of gravity.\\r\\n     * @param type\\r\\n     * @param adjustPosition\\r\\n     * @return void\\r\\n     */\\r\\n    setupMass: function ( type, AdjustPosition ) {\\r\\n\\r\\n        var adjustPosition = ( AdjustPosition !== undefined ) ? AdjustPosition : true;\\r\\n\\r\\n        this.type = type || BODY_STATIC;\\r\\n        this.isDynamic = this.type === BODY_DYNAMIC;\\r\\n        this.isStatic = this.type === BODY_STATIC;\\r\\n\\r\\n        this.mass = 0;\\r\\n        this.localInertia.set(0,0,0,0,0,0,0,0,0);\\r\\n\\r\\n\\r\\n        var tmpM = new Mat33();\\r\\n        var tmpV = new Vec3();\\r\\n\\r\\n        for( var shape = this.shapes; shape !== null; shape = shape.next ){\\r\\n\\r\\n            shape.calculateMassInfo( this.massInfo );\\r\\n            var shapeMass = this.massInfo.mass;\\r\\n            tmpV.addScaledVector(shape.relativePosition, shapeMass);\\r\\n            this.mass += shapeMass;\\r\\n            this.rotateInertia( shape.relativeRotation, this.massInfo.inertia, tmpM );\\r\\n            this.localInertia.add( tmpM );\\r\\n\\r\\n            // add offset inertia\\r\\n            this.localInertia.addOffset( shapeMass, shape.relativePosition );\\r\\n\\r\\n        }\\r\\n\\r\\n        this.inverseMass = 1 / this.mass;\\r\\n        tmpV.scaleEqual( this.inverseMass );\\r\\n\\r\\n        if( adjustPosition ){\\r\\n            this.position.add( tmpV );\\r\\n            for( shape=this.shapes; shape !== null; shape = shape.next ){\\r\\n                shape.relativePosition.subEqual(tmpV);\\r\\n            }\\r\\n\\r\\n            // subtract offset inertia\\r\\n            this.localInertia.subOffset( this.mass, tmpV );\\r\\n\\r\\n        }\\r\\n\\r\\n        this.inverseLocalInertia.invert( this.localInertia );\\r\\n\\r\\n        //}\\r\\n\\r\\n        if( this.type === BODY_STATIC ){\\r\\n            this.inverseMass = 0;\\r\\n            this.inverseLocalInertia.set(0,0,0,0,0,0,0,0,0);\\r\\n        }\\r\\n\\r\\n        this.syncShapes();\\r\\n        this.awake();\\r\\n\\r\\n    },\\r\\n    /**\\r\\n     * Awake the rigid body.\\r\\n     */\\r\\n    awake:function(){\\r\\n\\r\\n        if( !this.allowSleep || !this.sleeping ) return;\\r\\n        this.sleeping = false;\\r\\n        this.sleepTime = 0;\\r\\n        // awake connected constraints\\r\\n        var cs = this.contactLink;\\r\\n        while(cs != null){\\r\\n            cs.body.sleepTime = 0;\\r\\n            cs.body.sleeping = false;\\r\\n            cs = cs.next;\\r\\n        }\\r\\n        var js = this.jointLink;\\r\\n        while(js != null){\\r\\n            js.body.sleepTime = 0;\\r\\n            js.body.sleeping = false;\\r\\n            js = js.next;\\r\\n        }\\r\\n        for(var shape = this.shapes; shape!=null; shape = shape.next){\\r\\n            shape.updateProxy();\\r\\n        }\\r\\n\\r\\n    },\\r\\n    /**\\r\\n     * Sleep the rigid body.\\r\\n     */\\r\\n    sleep:function(){\\r\\n\\r\\n        if( !this.allowSleep || this.sleeping ) return;\\r\\n\\r\\n        this.linearVelocity.set(0,0,0);\\r\\n        this.angularVelocity.set(0,0,0);\\r\\n        this.sleepPosition.copy( this.position );\\r\\n        this.sleepOrientation.copy( this.orientation );\\r\\n\\r\\n        this.sleepTime = 0;\\r\\n        this.sleeping = true;\\r\\n        for( var shape = this.shapes; shape != null; shape = shape.next ) {\\r\\n            shape.updateProxy();\\r\\n        }\\r\\n    },\\r\\n\\r\\n    testWakeUp: function(){\\r\\n\\r\\n        if( this.linearVelocity.testZero() || this.angularVelocity.testZero() || this.position.testDiff( this.sleepPosition ) || this.orientation.testDiff( this.sleepOrientation )) this.awake(); // awake the body\\r\\n\\r\\n    },\\r\\n\\r\\n    /**\\r\\n     * Get whether the rigid body has not any connection with others.\\r\\n     * @return {void}\\r\\n     */\\r\\n    isLonely: function () {\\r\\n        return this.numJoints==0 && this.numContacts==0;\\r\\n    },\\r\\n\\r\\n    /**\\r\\n     * The time integration of the motion of a rigid body, you can update the information such as the shape.\\r\\n     * This method is invoked automatically when calling the step of the World,\\r\\n     * There is no need to call from outside usually.\\r\\n     * @param  timeStep time\\r\\n     * @return {void}\\r\\n     */\\r\\n\\r\\n    updatePosition: function ( timeStep ) {\\r\\n        switch(this.type){\\r\\n            case BODY_STATIC:\\r\\n                this.linearVelocity.set(0,0,0);\\r\\n                this.angularVelocity.set(0,0,0);\\r\\n\\r\\n                // ONLY FOR TEST\\r\\n                if(this.controlPos){\\r\\n                    this.position.copy(this.newPosition);\\r\\n                    this.controlPos = false;\\r\\n                }\\r\\n                if(this.controlRot){\\r\\n                    this.orientation.copy(this.newOrientation);\\r\\n                    this.controlRot = false;\\r\\n                }\\r\\n                /*this.linearVelocity.x=0;\\r\\n                this.linearVelocity.y=0;\\r\\n                this.linearVelocity.z=0;\\r\\n                this.angularVelocity.x=0;\\r\\n                this.angularVelocity.y=0;\\r\\n                this.angularVelocity.z=0;*/\\r\\n            break;\\r\\n            case BODY_DYNAMIC:\\r\\n\\r\\n                if( this.isKinematic ){\\r\\n\\r\\n                    this.linearVelocity.set(0,0,0);\\r\\n                    this.angularVelocity.set(0,0,0);\\r\\n\\r\\n                }\\r\\n\\r\\n                if(this.controlPos){\\r\\n\\r\\n                    this.linearVelocity.subVectors( this.newPosition, this.position ).multiplyScalar(1/timeStep);\\r\\n                    this.controlPos = false;\\r\\n\\r\\n                }\\r\\n                if(this.controlRot){\\r\\n\\r\\n                    this.angularVelocity.copy( this.getAxis() );\\r\\n                    this.orientation.copy( this.newOrientation );\\r\\n                    this.controlRot = false;\\r\\n\\r\\n                }\\r\\n\\r\\n                this.position.addScaledVector(this.linearVelocity, timeStep);\\r\\n                this.orientation.addTime(this.angularVelocity, timeStep);\\r\\n\\r\\n                this.updateMesh();\\r\\n\\r\\n            break;\\r\\n            default: printError(\\\"RigidBody\\\", \\\"Invalid type.\\\");\\r\\n        }\\r\\n\\r\\n        this.syncShapes();\\r\\n        this.updateMesh();\\r\\n\\r\\n    },\\r\\n\\r\\n    getAxis: function () {\\r\\n\\r\\n        return new Vec3( 0,1,0 ).applyMatrix3( this.inverseLocalInertia, true ).normalize();\\r\\n\\r\\n    },\\r\\n\\r\\n    rotateInertia: function ( rot, inertia, out ) {\\r\\n\\r\\n        this.tmpInertia.multiplyMatrices( rot, inertia );\\r\\n        out.multiplyMatrices( this.tmpInertia, rot, true );\\r\\n\\r\\n    },\\r\\n\\r\\n    syncShapes: function () {\\r\\n\\r\\n        this.rotation.setQuat( this.orientation );\\r\\n        this.rotateInertia( this.rotation, this.inverseLocalInertia, this.inverseInertia );\\r\\n        \\r\\n        for(var shape = this.shapes; shape!=null; shape = shape.next){\\r\\n\\r\\n            shape.position.copy( shape.relativePosition ).applyMatrix3( this.rotation, true ).add( this.position );\\r\\n            // add by QuaziKb\\r\\n            shape.rotation.multiplyMatrices( this.rotation, shape.relativeRotation );\\r\\n            shape.updateProxy();\\r\\n        }\\r\\n    },\\r\\n\\r\\n\\r\\n    //---------------------------------------------\\r\\n    // APPLY IMPULSE FORCE\\r\\n    //---------------------------------------------\\r\\n\\r\\n    applyImpulse: function(position, force){\\r\\n        this.linearVelocity.addScaledVector(force, this.inverseMass);\\r\\n        var rel = new Vec3().copy( position ).sub( this.position ).cross( force ).applyMatrix3( this.inverseInertia, true );\\r\\n        this.angularVelocity.add( rel );\\r\\n    },\\r\\n\\r\\n\\r\\n    //---------------------------------------------\\r\\n    // SET DYNAMIQUE POSITION AND ROTATION\\r\\n    //---------------------------------------------\\r\\n\\r\\n    setPosition: function(pos){\\r\\n        this.newPosition.copy( pos ).multiplyScalar( this.invScale );\\r\\n        this.controlPos = true;\\r\\n        if( !this.isKinematic ) this.isKinematic = true;\\r\\n    },\\r\\n\\r\\n    setQuaternion: function(q){\\r\\n        this.newOrientation.set(q.x, q.y, q.z, q.w);\\r\\n        this.controlRot = true;\\r\\n        if( !this.isKinematic ) this.isKinematic = true;\\r\\n    },\\r\\n\\r\\n    setRotation: function ( rot ) {\\r\\n\\r\\n        this.newOrientation = new Quat().setFromEuler( rot.x * _Math.degtorad, rot.y * _Math.degtorad, rot.y * _Math.degtorad );//this.rotationVectToQuad( rot );\\r\\n        this.controlRot = true;\\r\\n\\r\\n    },\\r\\n\\r\\n    //---------------------------------------------\\r\\n    // RESET DYNAMIQUE POSITION AND ROTATION\\r\\n    //---------------------------------------------\\r\\n\\r\\n    resetPosition:function(x,y,z){\\r\\n\\r\\n        this.linearVelocity.set( 0, 0, 0 );\\r\\n        this.angularVelocity.set( 0, 0, 0 );\\r\\n        this.position.set( x, y, z ).multiplyScalar( this.invScale );\\r\\n        //this.position.set( x*OIMO.WorldScale.invScale, y*OIMO.WorldScale.invScale, z*OIMO.WorldScale.invScale );\\r\\n        this.awake();\\r\\n    },\\r\\n\\r\\n    resetQuaternion:function( q ){\\r\\n\\r\\n        this.angularVelocity.set(0,0,0);\\r\\n        this.orientation = new Quat( q.x, q.y, q.z, q.w );\\r\\n        this.awake();\\r\\n\\r\\n    },\\r\\n\\r\\n    resetRotation:function(x,y,z){\\r\\n\\r\\n        this.angularVelocity.set(0,0,0);\\r\\n        this.orientation = new Quat().setFromEuler( x * _Math.degtorad, y * _Math.degtorad,  z * _Math.degtorad );//this.rotationVectToQuad( new Vec3(x,y,z) );\\r\\n        this.awake();\\r\\n\\r\\n    },\\r\\n\\r\\n    //---------------------------------------------\\r\\n    // GET POSITION AND ROTATION\\r\\n    //---------------------------------------------\\r\\n\\r\\n    getPosition:function () {\\r\\n\\r\\n        return this.pos;\\r\\n\\r\\n    },\\r\\n\\r\\n    getQuaternion: function () {\\r\\n\\r\\n        return this.quaternion;\\r\\n\\r\\n    },\\r\\n\\r\\n    //---------------------------------------------\\r\\n    // AUTO UPDATE THREE MESH\\r\\n    //---------------------------------------------\\r\\n\\r\\n    connectMesh: function ( mesh ) {\\r\\n\\r\\n        this.mesh = mesh;\\r\\n        this.updateMesh();\\r\\n\\r\\n    },\\r\\n\\r\\n    updateMesh: function(){\\r\\n\\r\\n        this.pos.scale( this.position, this.scale );\\r\\n        this.quaternion.copy( this.orientation );\\r\\n\\r\\n        if( this.mesh === null ) return;\\r\\n\\r\\n        this.mesh.position.copy( this.getPosition() );\\r\\n        this.mesh.quaternion.copy( this.getQuaternion() );\\r\\n\\r\\n    },\\r\\n\\r\\n} );\\n\\n/**\\r\\n* A pair of shapes that may collide.\\r\\n* @author saharan\\r\\n*/\\r\\nfunction Pair ( s1, s2 ){\\r\\n\\r\\n    // The first shape.\\r\\n    this.shape1 = s1 || null;\\r\\n    // The second shape.\\r\\n    this.shape2 = s2 || null;\\r\\n\\r\\n}\\n\\n/**\\r\\n* The broad-phase is used for collecting all possible pairs for collision.\\r\\n*/\\r\\n\\r\\n function BroadPhase(){\\r\\n\\r\\n    this.types = BR_NULL;\\r\\n    this.numPairChecks = 0;\\r\\n    this.numPairs = 0;\\r\\n    this.pairs = [];\\r\\n\\r\\n}\\r\\n\\r\\nObject.assign( BroadPhase.prototype, {\\r\\n\\r\\n    BroadPhase: true,\\r\\n\\r\\n    // Create a new proxy.\\r\\n    createProxy: function ( shape ) {\\r\\n\\r\\n        printError(\\\"BroadPhase\\\",\\\"Inheritance error.\\\");\\r\\n\\r\\n    },\\r\\n\\r\\n    // Add the proxy into the broad-phase.\\r\\n    addProxy: function ( proxy ) {\\r\\n\\r\\n        printError(\\\"BroadPhase\\\",\\\"Inheritance error.\\\");\\r\\n    },\\r\\n\\r\\n    // Remove the proxy from the broad-phase.\\r\\n    removeProxy: function ( proxy ) {\\r\\n\\r\\n        printError(\\\"BroadPhase\\\",\\\"Inheritance error.\\\");\\r\\n\\r\\n    },\\r\\n\\r\\n    // Returns whether the pair is available or not.\\r\\n    isAvailablePair: function ( s1, s2 ) {\\r\\n\\r\\n        var b1 = s1.parent;\\r\\n        var b2 = s2.parent;\\r\\n        if( b1 == b2 || // same parents\\r\\n            (!b1.isDynamic && !b2.isDynamic) || // static or kinematic object\\r\\n            (s1.belongsTo&s2.collidesWith)==0 ||\\r\\n            (s2.belongsTo&s1.collidesWith)==0 // collision filtering\\r\\n        ){ return false; }\\r\\n        var js;\\r\\n        if(b1.numJoints<b2.numJoints) js = b1.jointLink;\\r\\n        else js = b2.jointLink;\\r\\n        while(js!==null){\\r\\n           var joint = js.joint;\\r\\n           if( !joint.allowCollision && ((joint.body1==b1 && joint.body2==b2) || (joint.body1==b2 && joint.body2==b1)) ){ return false; }\\r\\n           js = js.next;\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n\\r\\n    },\\r\\n\\r\\n    // Detect overlapping pairs.\\r\\n    detectPairs: function () {\\r\\n\\r\\n        // clear old\\r\\n        this.pairs = [];\\r\\n        this.numPairs = 0;\\r\\n        this.numPairChecks = 0;\\r\\n        this.collectPairs();\\r\\n\\r\\n    },\\r\\n\\r\\n    collectPairs: function () {\\r\\n\\r\\n        Error(\\\"BroadPhase\\\", \\\"Inheritance error.\\\");\\r\\n\\r\\n    },\\r\\n\\r\\n    addPair: function ( s1, s2 ) {\\r\\n\\r\\n        var pair = new Pair( s1, s2 );\\r\\n        this.pairs.push(pair);\\r\\n        this.numPairs++;\\r\\n\\r\\n    }\\r\\n\\r\\n});\\n\\nvar count$1 = 0;\\r\\nfunction ProxyIdCount() { return count$1++; }\\r\\n\\r\\n/**\\r\\n * A proxy is used for broad-phase collecting pairs that can be colliding.\\r\\n *\\r\\n * @author lo-th\\r\\n */\\r\\n\\r\\nfunction Proxy( shape ) {\\r\\n\\r\\n\\t//The parent shape.\\r\\n    this.shape = shape;\\r\\n\\r\\n    //The axis-aligned bounding box.\\r\\n    this.aabb = shape.aabb;\\r\\n\\r\\n}\\r\\n\\r\\nObject.assign( Proxy.prototype, {\\r\\n\\r\\n    Proxy: true,\\r\\n\\r\\n\\t// Update the proxy. Must be inherited by a child.\\r\\n\\r\\n    update: function(){\\r\\n\\r\\n        printError(\\\"Proxy\\\",\\\"Inheritance error.\\\");\\r\\n\\r\\n    }\\r\\n\\r\\n});\\n\\n/**\\r\\n* A basic implementation of proxies.\\r\\n*\\r\\n* @author saharan\\r\\n*/\\r\\n\\r\\nfunction BasicProxy ( shape ) {\\r\\n\\r\\n    Proxy.call( this, shape );\\r\\n\\r\\n    this.id = ProxyIdCount();\\r\\n\\r\\n}\\r\\n\\r\\nBasicProxy.prototype = Object.assign( Object.create( Proxy.prototype ), {\\r\\n\\r\\n    constructor: BasicProxy,\\r\\n\\r\\n    update: function () {\\r\\n\\r\\n    }\\r\\n\\r\\n});\\n\\n/**\\r\\n* A broad-phase algorithm with brute-force search.\\r\\n* This always checks for all possible pairs.\\r\\n*/\\r\\n\\r\\nfunction BruteForceBroadPhase(){\\r\\n\\r\\n    BroadPhase.call( this );\\r\\n    this.types = BR_BRUTE_FORCE;\\r\\n    //this.numProxies=0;\\r\\n    ///this.maxProxies = 256;\\r\\n    this.proxies = [];\\r\\n    //this.proxies.length = 256;\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\nBruteForceBroadPhase.prototype = Object.assign( Object.create( BroadPhase.prototype ), {\\r\\n\\r\\n    constructor: BruteForceBroadPhase,\\r\\n\\r\\n    createProxy: function ( shape ) {\\r\\n\\r\\n        return new BasicProxy( shape );\\r\\n\\r\\n    },\\r\\n\\r\\n    addProxy: function ( proxy ) {\\r\\n\\r\\n        /*if(this.numProxies==this.maxProxies){\\r\\n            //this.maxProxies<<=1;\\r\\n            this.maxProxies*=2;\\r\\n            var newProxies=[];\\r\\n            newProxies.length = this.maxProxies;\\r\\n            var i = this.numProxies;\\r\\n            while(i--){\\r\\n            //for(var i=0, l=this.numProxies;i<l;i++){\\r\\n                newProxies[i]=this.proxies[i];\\r\\n            }\\r\\n            this.proxies=newProxies;\\r\\n        }*/\\r\\n        //this.proxies[this.numProxies++] = proxy;\\r\\n        this.proxies.push( proxy );\\r\\n        //this.numProxies++;\\r\\n\\r\\n    },\\r\\n\\r\\n    removeProxy: function ( proxy ) {\\r\\n\\r\\n        var n = this.proxies.indexOf( proxy );\\r\\n        if ( n > -1 ){\\r\\n            this.proxies.splice( n, 1 );\\r\\n            //this.numProxies--;\\r\\n        }\\r\\n\\r\\n        /*var i = this.numProxies;\\r\\n        while(i--){\\r\\n        //for(var i=0, l=this.numProxies;i<l;i++){\\r\\n            if(this.proxies[i] == proxy){\\r\\n                this.proxies[i] = this.proxies[--this.numProxies];\\r\\n                this.proxies[this.numProxies] = null;\\r\\n                return;\\r\\n            }\\r\\n        }*/\\r\\n\\r\\n    },\\r\\n\\r\\n    collectPairs: function () {\\r\\n\\r\\n        var i = 0, j, p1, p2;\\r\\n\\r\\n        var px = this.proxies;\\r\\n        var l = px.length;//this.numProxies;\\r\\n        //var ar1 = [];\\r\\n        //var ar2 = [];\\r\\n\\r\\n        //for( i = px.length ; i-- ; ar1[ i ] = px[ i ] ){};\\r\\n        //for( i = px.length ; i-- ; ar2[ i ] = px[ i ] ){};\\r\\n\\r\\n        //var ar1 = JSON.parse(JSON.stringify(this.proxies))\\r\\n        //var ar2 = JSON.parse(JSON.stringify(this.proxies))\\r\\n\\r\\n        this.numPairChecks = l*(l-1)>>1;\\r\\n        //this.numPairChecks=this.numProxies*(this.numProxies-1)*0.5;\\r\\n\\r\\n        while( i < l ){\\r\\n            p1 = px[i++];\\r\\n            j = i + 1;\\r\\n            while( j < l ){\\r\\n                p2 = px[j++];\\r\\n                if ( p1.aabb.intersectTest( p2.aabb ) || !this.isAvailablePair( p1.shape, p2.shape ) ) continue;\\r\\n                this.addPair( p1.shape, p2.shape );\\r\\n            }\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n});\\n\\n/**\\r\\n * A projection axis for sweep and prune broad-phase.\\r\\n * @author saharan\\r\\n */\\r\\n\\r\\nfunction SAPAxis (){\\r\\n\\r\\n    this.numElements = 0;\\r\\n    this.bufferSize = 256;\\r\\n    this.elements = [];\\r\\n    this.elements.length = this.bufferSize;\\r\\n    this.stack = new Float32Array( 64 );\\r\\n\\r\\n}\\r\\n\\r\\nObject.assign( SAPAxis.prototype, {\\r\\n\\r\\n    SAPAxis: true,\\r\\n\\r\\n    addElements: function ( min, max ) {\\r\\n\\r\\n        if(this.numElements+2>=this.bufferSize){\\r\\n            //this.bufferSize<<=1;\\r\\n            this.bufferSize*=2;\\r\\n            var newElements=[];\\r\\n            var i = this.numElements;\\r\\n            while(i--){\\r\\n            //for(var i=0, l=this.numElements; i<l; i++){\\r\\n                newElements[i] = this.elements[i];\\r\\n            }\\r\\n        }\\r\\n        this.elements[this.numElements++] = min;\\r\\n        this.elements[this.numElements++] = max;\\r\\n\\r\\n    },\\r\\n\\r\\n    removeElements: function ( min, max ) {\\r\\n\\r\\n        var minIndex=-1;\\r\\n        var maxIndex=-1;\\r\\n        for(var i=0, l=this.numElements; i<l; i++){\\r\\n            var e=this.elements[i];\\r\\n            if(e==min||e==max){\\r\\n                if(minIndex==-1){\\r\\n                    minIndex=i;\\r\\n                }else{\\r\\n                    maxIndex=i;\\r\\n                break;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        for(i = minIndex+1, l = maxIndex; i < l; i++){\\r\\n            this.elements[i-1] = this.elements[i];\\r\\n        }\\r\\n        for(i = maxIndex+1, l = this.numElements; i < l; i++){\\r\\n            this.elements[i-2] = this.elements[i];\\r\\n        }\\r\\n\\r\\n        this.elements[--this.numElements] = null;\\r\\n        this.elements[--this.numElements] = null;\\r\\n\\r\\n    },\\r\\n\\r\\n    sort: function () {\\r\\n\\r\\n        var count = 0;\\r\\n        var threshold = 1;\\r\\n        while((this.numElements >> threshold) != 0 ) threshold++;\\r\\n        threshold = threshold * this.numElements >> 2;\\r\\n        count = 0;\\r\\n\\r\\n        var giveup = false;\\r\\n        var elements = this.elements;\\r\\n        for( var i = 1, l = this.numElements; i < l; i++){ // try insertion sort\\r\\n            var tmp=elements[i];\\r\\n            var pivot=tmp.value;\\r\\n            var tmp2=elements[i-1];\\r\\n            if(tmp2.value>pivot){\\r\\n                var j=i;\\r\\n                do{\\r\\n                    elements[j]=tmp2;\\r\\n                    if(--j==0)break;\\r\\n                    tmp2=elements[j-1];\\r\\n                }while(tmp2.value>pivot);\\r\\n                elements[j]=tmp;\\r\\n                count+=i-j;\\r\\n                if(count>threshold){\\r\\n                    giveup=true; // stop and use quick sort\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        if(!giveup)return;\\r\\n        count=2;var stack=this.stack;\\r\\n        stack[0]=0;\\r\\n        stack[1]=this.numElements-1;\\r\\n        while(count>0){\\r\\n            var right=stack[--count];\\r\\n            var left=stack[--count];\\r\\n            var diff=right-left;\\r\\n            if(diff>16){  // quick sort\\r\\n                //var mid=left+(diff>>1);\\r\\n                var mid = left + (_Math.floor(diff*0.5));\\r\\n                tmp = elements[mid];\\r\\n                elements[mid] = elements[right];\\r\\n                elements[right] = tmp;\\r\\n                pivot = tmp.value;\\r\\n                i = left-1;\\r\\n                j = right;\\r\\n                while( true ){\\r\\n                    var ei;\\r\\n                    var ej;\\r\\n                    do{ ei = elements[++i]; } while( ei.value < pivot);\\r\\n                    do{ ej = elements[--j]; } while( pivot < ej.value && j != left );\\r\\n                    if( i >= j ) break;\\r\\n                    elements[i] = ej;\\r\\n                    elements[j] = ei;\\r\\n                }\\r\\n\\r\\n                elements[right] = elements[i];\\r\\n                elements[i] = tmp;\\r\\n                if( i - left > right - i ) {\\r\\n                    stack[count++] = left;\\r\\n                    stack[count++] = i - 1;\\r\\n                    stack[count++] = i + 1;\\r\\n                    stack[count++] = right;\\r\\n                }else{\\r\\n                    stack[count++] = i + 1;\\r\\n                    stack[count++] = right;\\r\\n                    stack[count++] = left;\\r\\n                    stack[count++] = i - 1;\\r\\n                }\\r\\n            }else{\\r\\n                for( i = left + 1; i <= right; i++ ) {\\r\\n                    tmp = elements[i];\\r\\n                    pivot = tmp.value;\\r\\n                    tmp2 = elements[i-1];\\r\\n                    if( tmp2.value > pivot ) {\\r\\n                        j = i;\\r\\n                        do{\\r\\n                            elements[j] = tmp2;\\r\\n                            if( --j == 0 ) break;\\r\\n                            tmp2 = elements[j-1];\\r\\n                        }while( tmp2.value > pivot );\\r\\n                        elements[j] = tmp;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        \\r\\n    },\\r\\n\\r\\n    calculateTestCount: function () {\\r\\n\\r\\n        var num = 1;\\r\\n        var sum = 0;\\r\\n        for(var i = 1, l = this.numElements; i<l; i++){\\r\\n            if(this.elements[i].max){\\r\\n                num--;\\r\\n            }else{\\r\\n                sum += num;\\r\\n                num++;\\r\\n            }\\r\\n        }\\r\\n        return sum;\\r\\n\\r\\n    }\\r\\n\\r\\n});\\n\\n/**\\r\\n * An element of proxies.\\r\\n * @author saharan\\r\\n */\\r\\n\\r\\nfunction SAPElement ( proxy, max ) {\\r\\n\\r\\n    // The parent proxy\\r\\n    this.proxy = proxy;\\r\\n\\t// The pair element.\\r\\n    this.pair = null;\\r\\n    // The minimum element on other axis.\\r\\n    this.min1 = null;\\r\\n    // The maximum element on other axis.\\r\\n    this.max1 = null;\\r\\n    // The minimum element on other axis.\\r\\n    this.min2 = null;\\r\\n    // The maximum element on other axis.\\r\\n    this.max2 = null;\\r\\n    // Whether the element has maximum value or not.\\r\\n    this.max = max;\\r\\n    // The value of the element.\\r\\n    this.value = 0;\\r\\n\\r\\n}\\n\\n/**\\r\\n * A proxy for sweep and prune broad-phase.\\r\\n * @author saharan\\r\\n * @author lo-th\\r\\n */\\r\\n\\r\\nfunction SAPProxy ( sap, shape ){\\r\\n\\r\\n    Proxy.call( this, shape );\\r\\n    // Type of the axis to which the proxy belongs to. [0:none, 1:dynamic, 2:static]\\r\\n    this.belongsTo = 0;\\r\\n    // The maximum elements on each axis.\\r\\n    this.max = [];\\r\\n    // The minimum elements on each axis.\\r\\n    this.min = [];\\r\\n    \\r\\n    this.sap = sap;\\r\\n    this.min[0] = new SAPElement( this, false );\\r\\n    this.max[0] = new SAPElement( this, true );\\r\\n    this.min[1] = new SAPElement( this, false );\\r\\n    this.max[1] = new SAPElement( this, true );\\r\\n    this.min[2] = new SAPElement( this, false );\\r\\n    this.max[2] = new SAPElement( this, true );\\r\\n    this.max[0].pair = this.min[0];\\r\\n    this.max[1].pair = this.min[1];\\r\\n    this.max[2].pair = this.min[2];\\r\\n    this.min[0].min1 = this.min[1];\\r\\n    this.min[0].max1 = this.max[1];\\r\\n    this.min[0].min2 = this.min[2];\\r\\n    this.min[0].max2 = this.max[2];\\r\\n    this.min[1].min1 = this.min[0];\\r\\n    this.min[1].max1 = this.max[0];\\r\\n    this.min[1].min2 = this.min[2];\\r\\n    this.min[1].max2 = this.max[2];\\r\\n    this.min[2].min1 = this.min[0];\\r\\n    this.min[2].max1 = this.max[0];\\r\\n    this.min[2].min2 = this.min[1];\\r\\n    this.min[2].max2 = this.max[1];\\r\\n\\r\\n}\\r\\n\\r\\nSAPProxy.prototype = Object.assign( Object.create( Proxy.prototype ), {\\r\\n\\r\\n    constructor: SAPProxy,\\r\\n\\r\\n\\r\\n    // Returns whether the proxy is dynamic or not.\\r\\n    isDynamic: function () {\\r\\n\\r\\n        var body = this.shape.parent;\\r\\n        return body.isDynamic && !body.sleeping;\\r\\n\\r\\n    },\\r\\n\\r\\n    update: function () {\\r\\n\\r\\n        var te = this.aabb.elements;\\r\\n        this.min[0].value = te[0];\\r\\n        this.min[1].value = te[1];\\r\\n        this.min[2].value = te[2];\\r\\n        this.max[0].value = te[3];\\r\\n        this.max[1].value = te[4];\\r\\n        this.max[2].value = te[5];\\r\\n\\r\\n        if( this.belongsTo == 1 && !this.isDynamic() || this.belongsTo == 2 && this.isDynamic() ){\\r\\n            this.sap.removeProxy(this);\\r\\n            this.sap.addProxy(this);\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n});\\n\\n/**\\r\\n * A broad-phase collision detection algorithm using sweep and prune.\\r\\n * @author saharan\\r\\n * @author lo-th\\r\\n */\\r\\n\\r\\nfunction SAPBroadPhase () {\\r\\n\\r\\n    BroadPhase.call( this);\\r\\n    this.types = BR_SWEEP_AND_PRUNE;\\r\\n\\r\\n    this.numElementsD = 0;\\r\\n    this.numElementsS = 0;\\r\\n    // dynamic proxies\\r\\n    this.axesD = [\\r\\n       new SAPAxis(),\\r\\n       new SAPAxis(),\\r\\n       new SAPAxis()\\r\\n    ];\\r\\n    // static or sleeping proxies\\r\\n    this.axesS = [\\r\\n       new SAPAxis(),\\r\\n       new SAPAxis(),\\r\\n       new SAPAxis()\\r\\n    ];\\r\\n\\r\\n    this.index1 = 0;\\r\\n    this.index2 = 1;\\r\\n\\r\\n}\\r\\n\\r\\nSAPBroadPhase.prototype = Object.assign( Object.create( BroadPhase.prototype ), {\\r\\n\\r\\n    constructor: SAPBroadPhase,\\r\\n\\r\\n    createProxy: function ( shape ) {\\r\\n\\r\\n        return new SAPProxy( this, shape );\\r\\n\\r\\n    },\\r\\n\\r\\n    addProxy: function ( proxy ) {\\r\\n\\r\\n        var p = proxy;\\r\\n        if(p.isDynamic()){\\r\\n            this.axesD[0].addElements( p.min[0], p.max[0] );\\r\\n            this.axesD[1].addElements( p.min[1], p.max[1] );\\r\\n            this.axesD[2].addElements( p.min[2], p.max[2] );\\r\\n            p.belongsTo = 1;\\r\\n            this.numElementsD += 2;\\r\\n        } else {\\r\\n            this.axesS[0].addElements( p.min[0], p.max[0] );\\r\\n            this.axesS[1].addElements( p.min[1], p.max[1] );\\r\\n            this.axesS[2].addElements( p.min[2], p.max[2] );\\r\\n            p.belongsTo = 2;\\r\\n            this.numElementsS += 2;\\r\\n        }\\r\\n\\r\\n    },\\r\\n\\r\\n    removeProxy: function ( proxy ) {\\r\\n\\r\\n        var p = proxy;\\r\\n        if ( p.belongsTo == 0 ) return;\\r\\n\\r\\n        /*else if ( p.belongsTo == 1 ) {\\r\\n            this.axesD[0].removeElements( p.min[0], p.max[0] );\\r\\n            this.axesD[1].removeElements( p.min[1], p.max[1] );\\r\\n            this.axesD[2].removeElements( p.min[2], p.max[2] );\\r\\n            this.numElementsD -= 2;\\r\\n        } else if ( p.belongsTo == 2 ) {\\r\\n            this.axesS[0].removeElements( p.min[0], p.max[0] );\\r\\n            this.axesS[1].removeElements( p.min[1], p.max[1] );\\r\\n            this.axesS[2].removeElements( p.min[2], p.max[2] );\\r\\n            this.numElementsS -= 2;\\r\\n        }*/\\r\\n\\r\\n        switch( p.belongsTo ){\\r\\n            case 1:\\r\\n            this.axesD[0].removeElements( p.min[0], p.max[0] );\\r\\n            this.axesD[1].removeElements( p.min[1], p.max[1] );\\r\\n            this.axesD[2].removeElements( p.min[2], p.max[2] );\\r\\n            this.numElementsD -= 2;\\r\\n            break;\\r\\n            case 2:\\r\\n            this.axesS[0].removeElements( p.min[0], p.max[0] );\\r\\n            this.axesS[1].removeElements( p.min[1], p.max[1] );\\r\\n            this.axesS[2].removeElements( p.min[2], p.max[2] );\\r\\n            this.numElementsS -= 2;\\r\\n            break;\\r\\n        }\\r\\n\\r\\n        p.belongsTo = 0;\\r\\n\\r\\n    },\\r\\n\\r\\n    collectPairs: function () {\\r\\n\\r\\n        if( this.numElementsD == 0 ) return;\\r\\n\\r\\n        var axis1 = this.axesD[this.index1];\\r\\n        var axis2 = this.axesD[this.index2];\\r\\n\\r\\n        axis1.sort();\\r\\n        axis2.sort();\\r\\n\\r\\n        var count1 = axis1.calculateTestCount();\\r\\n        var count2 = axis2.calculateTestCount();\\r\\n        var elementsD;\\r\\n        var elementsS;\\r\\n        if( count1 <= count2 ){// select the best axis\\r\\n            axis2 = this.axesS[this.index1];\\r\\n            axis2.sort();\\r\\n            elementsD = axis1.elements;\\r\\n            elementsS = axis2.elements;\\r\\n        }else{\\r\\n            axis1 = this.axesS[this.index2];\\r\\n            axis1.sort();\\r\\n            elementsD = axis2.elements;\\r\\n            elementsS = axis1.elements;\\r\\n            this.index1 ^= this.index2;\\r\\n            this.index2 ^= this.index1;\\r\\n            this.index1 ^= this.index2;\\r\\n        }\\r\\n        var activeD;\\r\\n        var activeS;\\r\\n        var p = 0;\\r\\n        var q = 0;\\r\\n        while( p < this.numElementsD ){\\r\\n            var e1;\\r\\n            var dyn;\\r\\n            if (q == this.numElementsS ){\\r\\n                e1 = elementsD[p];\\r\\n                dyn = true;\\r\\n                p++;\\r\\n            }else{\\r\\n                var d = elementsD[p];\\r\\n                var s = elementsS[q];\\r\\n                if( d.value < s.value ){\\r\\n                    e1 = d;\\r\\n                    dyn = true;\\r\\n                    p++;\\r\\n                }else{\\r\\n                    e1 = s;\\r\\n                    dyn = false;\\r\\n                    q++;\\r\\n                }\\r\\n            }\\r\\n            if( !e1.max ){\\r\\n                var s1 = e1.proxy.shape;\\r\\n                var min1 = e1.min1.value;\\r\\n                var max1 = e1.max1.value;\\r\\n                var min2 = e1.min2.value;\\r\\n                var max2 = e1.max2.value;\\r\\n\\r\\n                for( var e2 = activeD; e2 != null; e2 = e2.pair ) {// test for dynamic\\r\\n                    var s2 = e2.proxy.shape;\\r\\n\\r\\n                    this.numPairChecks++;\\r\\n                    if( min1 > e2.max1.value || max1 < e2.min1.value || min2 > e2.max2.value || max2 < e2.min2.value || !this.isAvailablePair( s1, s2 ) ) continue;\\r\\n                    this.addPair( s1, s2 );\\r\\n                }\\r\\n                if( dyn ){\\r\\n                    for( e2 = activeS; e2 != null; e2 = e2.pair ) {// test for static\\r\\n                        s2 = e2.proxy.shape;\\r\\n\\r\\n                        this.numPairChecks++;\\r\\n\\r\\n                        if( min1 > e2.max1.value || max1 < e2.min1.value|| min2 > e2.max2.value || max2 < e2.min2.value || !this.isAvailablePair(s1,s2) ) continue;\\r\\n                        this.addPair( s1, s2 );\\r\\n                    }\\r\\n                    e1.pair = activeD;\\r\\n                    activeD = e1;\\r\\n                }else{\\r\\n                    e1.pair = activeS;\\r\\n                    activeS = e1;\\r\\n                }\\r\\n            }else{\\r\\n                var min = e1.pair;\\r\\n                if( dyn ){\\r\\n                    if( min == activeD ){\\r\\n                        activeD = activeD.pair;\\r\\n                        continue;\\r\\n                    }else{\\r\\n                        e1 = activeD;\\r\\n                    }\\r\\n                }else{\\r\\n                    if( min == activeS ){\\r\\n                        activeS = activeS.pair;\\r\\n                        continue;\\r\\n                    }else{\\r\\n                        e1 = activeS;\\r\\n                    }\\r\\n                }\\r\\n                do{\\r\\n                    e2 = e1.pair;\\r\\n                    if( e2 == min ){\\r\\n                        e1.pair = e2.pair;\\r\\n                        break;\\r\\n                    }\\r\\n                    e1 = e2;\\r\\n                }while( e1 != null );\\r\\n            }\\r\\n        }\\r\\n        this.index2 = (this.index1|this.index2)^3;\\r\\n        \\r\\n    }\\r\\n\\r\\n});\\n\\n/**\\r\\n* A node of the dynamic bounding volume tree.\\r\\n* @author saharan\\r\\n*/\\r\\n\\r\\nfunction DBVTNode(){\\r\\n    \\r\\n\\t// The first child node of this node.\\r\\n    this.child1 = null;\\r\\n    // The second child node of this node.\\r\\n    this.child2 = null;\\r\\n    //  The parent node of this tree.\\r\\n    this.parent = null;\\r\\n    // The proxy of this node. This has no value if this node is not leaf.\\r\\n    this.proxy = null;\\r\\n    // The maximum distance from leaf nodes.\\r\\n    this.height = 0;\\r\\n    // The AABB of this node.\\r\\n    this.aabb = new AABB();\\r\\n\\r\\n}\\n\\n/**\\r\\n * A dynamic bounding volume tree for the broad-phase algorithm.\\r\\n *\\r\\n * @author saharan\\r\\n * @author lo-th\\r\\n */\\r\\n\\r\\nfunction DBVT(){\\r\\n\\r\\n    // The root of the tree.\\r\\n    this.root = null;\\r\\n    this.freeNodes = [];\\r\\n    this.freeNodes.length = 16384;\\r\\n    this.numFreeNodes = 0;\\r\\n    this.aabb = new AABB();\\r\\n\\r\\n}\\r\\n\\r\\nObject.assign( DBVT.prototype, {\\r\\n\\r\\n    DBVT: true,\\r\\n\\r\\n    moveLeaf: function( leaf ) {\\r\\n\\r\\n        this.deleteLeaf( leaf );\\r\\n        this.insertLeaf( leaf );\\r\\n    \\r\\n    },\\r\\n\\r\\n    insertLeaf: function ( leaf ) {\\r\\n\\r\\n        if(this.root == null){\\r\\n            this.root = leaf;\\r\\n            return;\\r\\n        }\\r\\n        var lb = leaf.aabb;\\r\\n        var sibling = this.root;\\r\\n        var oldArea;\\r\\n        var newArea;\\r\\n        while(sibling.proxy == null){ // descend the node to search the best pair\\r\\n            var c1 = sibling.child1;\\r\\n            var c2 = sibling.child2;\\r\\n            var b = sibling.aabb;\\r\\n            var c1b = c1.aabb;\\r\\n            var c2b = c2.aabb;\\r\\n            oldArea = b.surfaceArea();\\r\\n            this.aabb.combine(lb,b);\\r\\n            newArea = this.aabb.surfaceArea();\\r\\n            var creatingCost = newArea*2;\\r\\n            var incrementalCost = (newArea-oldArea)*2; // cost of creating a new pair with the node\\r\\n            var discendingCost1 = incrementalCost;\\r\\n            this.aabb.combine(lb,c1b);\\r\\n            if(c1.proxy!=null){\\r\\n                // leaf cost = area(combined aabb)\\r\\n                discendingCost1+=this.aabb.surfaceArea();\\r\\n            }else{\\r\\n                // node cost = area(combined aabb) - area(old aabb)\\r\\n                discendingCost1+=this.aabb.surfaceArea()-c1b.surfaceArea();\\r\\n            }\\r\\n            var discendingCost2=incrementalCost;\\r\\n            this.aabb.combine(lb,c2b);\\r\\n            if(c2.proxy!=null){\\r\\n                // leaf cost = area(combined aabb)\\r\\n                discendingCost2+=this.aabb.surfaceArea();\\r\\n            }else{\\r\\n                // node cost = area(combined aabb) - area(old aabb)\\r\\n                discendingCost2+=this.aabb.surfaceArea()-c2b.surfaceArea();\\r\\n            }\\r\\n            if(discendingCost1<discendingCost2){\\r\\n                if(creatingCost<discendingCost1){\\r\\n                    break;// stop descending\\r\\n                }else{\\r\\n                    sibling = c1;// descend into first child\\r\\n                }\\r\\n            }else{\\r\\n                if(creatingCost<discendingCost2){\\r\\n                    break;// stop descending\\r\\n                }else{\\r\\n                    sibling = c2;// descend into second child\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        var oldParent = sibling.parent;\\r\\n        var newParent;\\r\\n        if(this.numFreeNodes>0){\\r\\n            newParent = this.freeNodes[--this.numFreeNodes];\\r\\n        }else{\\r\\n            newParent = new DBVTNode();\\r\\n        }\\r\\n\\r\\n        newParent.parent = oldParent;\\r\\n        newParent.child1 = leaf;\\r\\n        newParent.child2 = sibling;\\r\\n        newParent.aabb.combine(leaf.aabb,sibling.aabb);\\r\\n        newParent.height = sibling.height+1;\\r\\n        sibling.parent = newParent;\\r\\n        leaf.parent = newParent;\\r\\n        if(sibling == this.root){\\r\\n            // replace root\\r\\n            this.root = newParent;\\r\\n        }else{\\r\\n            // replace child\\r\\n            if(oldParent.child1 == sibling){\\r\\n                oldParent.child1 = newParent;\\r\\n            }else{\\r\\n                oldParent.child2 = newParent;\\r\\n            }\\r\\n        }\\r\\n        // update whole tree\\r\\n        do{\\r\\n            newParent = this.balance(newParent);\\r\\n            this.fix(newParent);\\r\\n            newParent = newParent.parent;\\r\\n        }while(newParent != null);\\r\\n    },\\r\\n\\r\\n    getBalance: function( node ) {\\r\\n\\r\\n        if(node.proxy!=null)return 0;\\r\\n        return node.child1.height-node.child2.height;\\r\\n\\r\\n    },\\r\\n\\r\\n    deleteLeaf: function( leaf ) {\\r\\n\\r\\n        if(leaf == this.root){\\r\\n            this.root = null;\\r\\n            return;\\r\\n        }\\r\\n        var parent = leaf.parent;\\r\\n        var sibling;\\r\\n        if(parent.child1==leaf){\\r\\n            sibling=parent.child2;\\r\\n        }else{\\r\\n            sibling=parent.child1;\\r\\n        }\\r\\n        if(parent==this.root){\\r\\n            this.root=sibling;\\r\\n            sibling.parent=null;\\r\\n            return;\\r\\n        }\\r\\n        var grandParent = parent.parent;\\r\\n        sibling.parent = grandParent;\\r\\n        if(grandParent.child1 == parent ) {\\r\\n            grandParent.child1 = sibling;\\r\\n        }else{\\r\\n            grandParent.child2 = sibling;\\r\\n        }\\r\\n        if(this.numFreeNodes<16384){\\r\\n            this.freeNodes[this.numFreeNodes++] = parent;\\r\\n        }\\r\\n        do{\\r\\n            grandParent = this.balance(grandParent);\\r\\n            this.fix(grandParent);\\r\\n            grandParent = grandParent.parent;\\r\\n        }while( grandParent != null );\\r\\n    \\r\\n    },\\r\\n\\r\\n    balance: function( node ) {\\r\\n\\r\\n        var nh = node.height;\\r\\n        if(nh<2){\\r\\n            return node;\\r\\n        }\\r\\n        var p = node.parent;\\r\\n        var l = node.child1;\\r\\n        var r = node.child2;\\r\\n        var lh = l.height;\\r\\n        var rh = r.height;\\r\\n        var balance = lh-rh;\\r\\n        var t;// for bit operation\\r\\n\\r\\n        //          [ N ]\\r\\n        //         /     \\\\\\r\\n        //    [ L ]       [ R ]\\r\\n        //     / \\\\         / \\\\\\r\\n        // [L-L] [L-R] [R-L] [R-R]\\r\\n\\r\\n        // Is the tree balanced?\\r\\n        if(balance>1){\\r\\n            var ll = l.child1;\\r\\n            var lr = l.child2;\\r\\n            var llh = ll.height;\\r\\n            var lrh = lr.height;\\r\\n\\r\\n            // Is L-L higher than L-R?\\r\\n            if(llh>lrh){\\r\\n                // set N to L-R\\r\\n                l.child2 = node;\\r\\n                node.parent = l;\\r\\n\\r\\n                //          [ L ]\\r\\n                //         /     \\\\\\r\\n                //    [L-L]       [ N ]\\r\\n                //     / \\\\         / \\\\\\r\\n                // [...] [...] [ L ] [ R ]\\r\\n                \\r\\n                // set L-R\\r\\n                node.child1 = lr;\\r\\n                lr.parent = node;\\r\\n\\r\\n                //          [ L ]\\r\\n                //         /     \\\\\\r\\n                //    [L-L]       [ N ]\\r\\n                //     / \\\\         / \\\\\\r\\n                // [...] [...] [L-R] [ R ]\\r\\n                \\r\\n                // fix bounds and heights\\r\\n                node.aabb.combine( lr.aabb, r.aabb );\\r\\n                t = lrh-rh;\\r\\n                node.height=lrh-(t&t>>31)+1;\\r\\n                l.aabb.combine(ll.aabb,node.aabb);\\r\\n                t=llh-nh;\\r\\n                l.height=llh-(t&t>>31)+1;\\r\\n            }else{\\r\\n                // set N to L-L\\r\\n                l.child1=node;\\r\\n                node.parent=l;\\r\\n\\r\\n                //          [ L ]\\r\\n                //         /     \\\\\\r\\n                //    [ N ]       [L-R]\\r\\n                //     / \\\\         / \\\\\\r\\n                // [ L ] [ R ] [...] [...]\\r\\n                \\r\\n                // set L-L\\r\\n                node.child1 = ll;\\r\\n                ll.parent = node;\\r\\n\\r\\n                //          [ L ]\\r\\n                //         /     \\\\\\r\\n                //    [ N ]       [L-R]\\r\\n                //     / \\\\         / \\\\\\r\\n                // [L-L] [ R ] [...] [...]\\r\\n                \\r\\n                // fix bounds and heights\\r\\n                node.aabb.combine(ll.aabb,r.aabb);\\r\\n                t = llh - rh;\\r\\n                node.height=llh-(t&t>>31)+1;\\r\\n\\r\\n                l.aabb.combine(node.aabb,lr.aabb);\\r\\n                t=nh-lrh;\\r\\n                l.height=nh-(t&t>>31)+1;\\r\\n            }\\r\\n            // set new parent of L\\r\\n            if(p!=null){\\r\\n                if(p.child1==node){\\r\\n                    p.child1=l;\\r\\n                }else{\\r\\n                    p.child2=l;\\r\\n                }\\r\\n            }else{\\r\\n                this.root=l;\\r\\n            }\\r\\n            l.parent=p;\\r\\n            return l;\\r\\n        }else if(balance<-1){\\r\\n            var rl = r.child1;\\r\\n            var rr = r.child2;\\r\\n            var rlh = rl.height;\\r\\n            var rrh = rr.height;\\r\\n\\r\\n            // Is R-L higher than R-R?\\r\\n            if( rlh > rrh ) {\\r\\n                // set N to R-R\\r\\n                r.child2 = node;\\r\\n                node.parent = r;\\r\\n\\r\\n                //          [ R ]\\r\\n                //         /     \\\\\\r\\n                //    [R-L]       [ N ]\\r\\n                //     / \\\\         / \\\\\\r\\n                // [...] [...] [ L ] [ R ]\\r\\n                \\r\\n                // set R-R\\r\\n                node.child2 = rr;\\r\\n                rr.parent = node;\\r\\n\\r\\n                //          [ R ]\\r\\n                //         /     \\\\\\r\\n                //    [R-L]       [ N ]\\r\\n                //     / \\\\         / \\\\\\r\\n                // [...] [...] [ L ] [R-R]\\r\\n                \\r\\n                // fix bounds and heights\\r\\n                node.aabb.combine(l.aabb,rr.aabb);\\r\\n                t = lh-rrh;\\r\\n                node.height = lh-(t&t>>31)+1;\\r\\n                r.aabb.combine(rl.aabb,node.aabb);\\r\\n                t = rlh-nh;\\r\\n                r.height = rlh-(t&t>>31)+1;\\r\\n            }else{\\r\\n                // set N to R-L\\r\\n                r.child1 = node;\\r\\n                node.parent = r;\\r\\n                //          [ R ]\\r\\n                //         /     \\\\\\r\\n                //    [ N ]       [R-R]\\r\\n                //     / \\\\         / \\\\\\r\\n                // [ L ] [ R ] [...] [...]\\r\\n                \\r\\n                // set R-L\\r\\n                node.child2 = rl;\\r\\n                rl.parent = node;\\r\\n\\r\\n                //          [ R ]\\r\\n                //         /     \\\\\\r\\n                //    [ N ]       [R-R]\\r\\n                //     / \\\\         / \\\\\\r\\n                // [ L ] [R-L] [...] [...]\\r\\n                \\r\\n                // fix bounds and heights\\r\\n                node.aabb.combine(l.aabb,rl.aabb);\\r\\n                t=lh-rlh;\\r\\n                node.height=lh-(t&t>>31)+1;\\r\\n                r.aabb.combine(node.aabb,rr.aabb);\\r\\n                t=nh-rrh;\\r\\n                r.height=nh-(t&t>>31)+1;\\r\\n            }\\r\\n            // set new parent of R\\r\\n            if(p!=null){\\r\\n                if(p.child1==node){\\r\\n                    p.child1=r;\\r\\n                }else{\\r\\n                    p.child2=r;\\r\\n                }\\r\\n            }else{\\r\\n                this.root=r;\\r\\n            }\\r\\n            r.parent=p;\\r\\n            return r;\\r\\n        }\\r\\n        return node;\\r\\n    },\\r\\n\\r\\n    fix: function ( node ) {\\r\\n\\r\\n        var c1 = node.child1;\\r\\n        var c2 = node.child2;\\r\\n        node.aabb.combine( c1.aabb, c2.aabb );\\r\\n        node.height = c1.height < c2.height ? c2.height+1 : c1.height+1; \\r\\n\\r\\n    }\\r\\n    \\r\\n});\\n\\n/**\\r\\n* A proxy for dynamic bounding volume tree broad-phase.\\r\\n* @author saharan\\r\\n*/\\r\\n\\r\\nfunction DBVTProxy ( shape ) {\\r\\n\\r\\n    Proxy.call( this, shape);\\r\\n    // The leaf of the proxy.\\r\\n    this.leaf = new DBVTNode();\\r\\n    this.leaf.proxy = this;\\r\\n\\r\\n}\\r\\n\\r\\nDBVTProxy.prototype = Object.assign( Object.create( Proxy.prototype ), {\\r\\n\\r\\n    constructor: DBVTProxy,\\r\\n\\r\\n    update: function () {\\r\\n\\r\\n    }\\r\\n\\r\\n});\\n\\n/**\\r\\n * A broad-phase algorithm using dynamic bounding volume tree.\\r\\n *\\r\\n * @author saharan\\r\\n * @author lo-th\\r\\n */\\r\\n\\r\\nfunction DBVTBroadPhase(){\\r\\n\\r\\n    BroadPhase.call( this );\\r\\n\\r\\n    this.types = BR_BOUNDING_VOLUME_TREE;\\r\\n\\r\\n    this.tree = new DBVT();\\r\\n    this.stack = [];\\r\\n    this.leaves = [];\\r\\n    this.numLeaves = 0;\\r\\n\\r\\n}\\r\\n\\r\\nDBVTBroadPhase.prototype = Object.assign( Object.create( BroadPhase.prototype ), {\\r\\n\\r\\n    constructor: DBVTBroadPhase,\\r\\n\\r\\n    createProxy: function ( shape ) {\\r\\n\\r\\n        return new DBVTProxy( shape );\\r\\n\\r\\n    },\\r\\n\\r\\n    addProxy: function ( proxy ) {\\r\\n\\r\\n        this.tree.insertLeaf( proxy.leaf );\\r\\n        this.leaves.push( proxy.leaf );\\r\\n        this.numLeaves++;\\r\\n\\r\\n    },\\r\\n\\r\\n    removeProxy: function ( proxy ) {\\r\\n\\r\\n        this.tree.deleteLeaf( proxy.leaf );\\r\\n        var n = this.leaves.indexOf( proxy.leaf );\\r\\n        if ( n > -1 ) {\\r\\n            this.leaves.splice(n,1);\\r\\n            this.numLeaves--;\\r\\n        }\\r\\n\\r\\n    },\\r\\n\\r\\n    collectPairs: function () {\\r\\n\\r\\n        if ( this.numLeaves < 2 ) return;\\r\\n\\r\\n        var leaf, margin = 0.1, i = this.numLeaves;\\r\\n\\r\\n        while(i--){\\r\\n\\r\\n            leaf = this.leaves[i];\\r\\n\\r\\n            if ( leaf.proxy.aabb.intersectTestTwo( leaf.aabb ) ){\\r\\n\\r\\n                leaf.aabb.copy( leaf.proxy.aabb, margin );\\r\\n                this.tree.deleteLeaf( leaf );\\r\\n                this.tree.insertLeaf( leaf );\\r\\n                this.collide( leaf, this.tree.root );\\r\\n\\r\\n            }\\r\\n        }\\r\\n\\r\\n    },\\r\\n\\r\\n    collide: function ( node1, node2 ) {\\r\\n\\r\\n        var stackCount = 2;\\r\\n        var s1, s2, n1, n2, l1, l2;\\r\\n        this.stack[0] = node1;\\r\\n        this.stack[1] = node2;\\r\\n\\r\\n        while( stackCount > 0 ){\\r\\n\\r\\n            n1 = this.stack[--stackCount];\\r\\n            n2 = this.stack[--stackCount];\\r\\n            l1 = n1.proxy != null;\\r\\n            l2 = n2.proxy != null;\\r\\n            \\r\\n            this.numPairChecks++;\\r\\n\\r\\n            if( l1 && l2 ){\\r\\n                s1 = n1.proxy.shape;\\r\\n                s2 = n2.proxy.shape;\\r\\n                if ( s1 == s2 || s1.aabb.intersectTest( s2.aabb ) || !this.isAvailablePair( s1, s2 ) ) continue;\\r\\n\\r\\n                this.addPair(s1,s2);\\r\\n\\r\\n            }else{\\r\\n\\r\\n                if ( n1.aabb.intersectTest( n2.aabb ) ) continue;\\r\\n                \\r\\n                /*if(stackCount+4>=this.maxStack){// expand the stack\\r\\n                    //this.maxStack<<=1;\\r\\n                    this.maxStack*=2;\\r\\n                    var newStack = [];// vector\\r\\n                    newStack.length = this.maxStack;\\r\\n                    for(var i=0;i<stackCount;i++){\\r\\n                        newStack[i] = this.stack[i];\\r\\n                    }\\r\\n                    this.stack = newStack;\\r\\n                }*/\\r\\n\\r\\n                if( l2 || !l1 && (n1.aabb.surfaceArea() > n2.aabb.surfaceArea()) ){\\r\\n                    this.stack[stackCount++] = n1.child1;\\r\\n                    this.stack[stackCount++] = n2;\\r\\n                    this.stack[stackCount++] = n1.child2;\\r\\n                    this.stack[stackCount++] = n2;\\r\\n                }else{\\r\\n                    this.stack[stackCount++] = n1;\\r\\n                    this.stack[stackCount++] = n2.child1;\\r\\n                    this.stack[stackCount++] = n1;\\r\\n                    this.stack[stackCount++] = n2.child2;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n});\\n\\nfunction CollisionDetector (){\\r\\n\\r\\n    this.flip = false;\\r\\n\\r\\n}\\r\\n\\r\\nObject.assign( CollisionDetector.prototype, {\\r\\n\\r\\n    CollisionDetector: true,\\r\\n\\r\\n    detectCollision: function ( shape1, shape2, manifold ) {\\r\\n\\r\\n        printError(\\\"CollisionDetector\\\", \\\"Inheritance error.\\\");\\r\\n\\r\\n    }\\r\\n\\r\\n} );\\n\\n/**\\r\\n * A collision detector which detects collisions between two boxes.\\r\\n * @author saharan\\r\\n */\\r\\nfunction BoxBoxCollisionDetector() {\\r\\n\\r\\n    CollisionDetector.call( this );\\r\\n    this.clipVertices1 = new Float32Array( 24 ); // 8 vertices x,y,z\\r\\n    this.clipVertices2 = new Float32Array( 24 );\\r\\n    this.used = new Float32Array( 8 );\\r\\n    \\r\\n    this.INF = 1/0;\\r\\n\\r\\n}\\r\\n\\r\\nBoxBoxCollisionDetector.prototype = Object.assign( Object.create( CollisionDetector.prototype ), {\\r\\n\\r\\n    constructor: BoxBoxCollisionDetector,\\r\\n\\r\\n    detectCollision: function ( shape1, shape2, manifold ) {\\r\\n        // What you are doing \\r\\n        // · I to prepare a separate axis of the fifteen \\r\\n        //-Six in each of three normal vectors of the xyz direction of the box both \\r\\n        // · Remaining nine 3x3 a vector perpendicular to the side of the box 2 and the side of the box 1 \\r\\n        // · Calculate the depth to the separation axis \\r\\n\\r\\n        // Calculates the distance using the inner product and put the amount of embedment \\r\\n        // · However a vertical separation axis and side to weight a little to avoid vibration \\r\\n        // And end when there is a separate axis that is remote even one \\r\\n        // · I look for separation axis with little to dent most \\r\\n        // Men and if separation axis of the first six - end collision \\r\\n        // Heng If it separate axis of nine other - side collision \\r\\n        // Heng - case of a side collision \\r\\n        // · Find points of two sides on which you made ​​the separation axis \\r\\n\\r\\n        // Calculates the point of closest approach of a straight line consisting of separate axis points obtained, and the collision point \\r\\n        //-Surface - the case of the plane crash \\r\\n        //-Box A, box B and the other a box of better made ​​a separate axis \\r\\n        // • The surface A and the plane that made the separation axis of the box A, and B to the surface the face of the box B close in the opposite direction to the most isolated axis \\r\\n\\r\\n        // When viewed from the front surface A, and the cut part exceeding the area of the surface A is a surface B \\r\\n        //-Plane B becomes the 3-8 triangle, I a candidate for the collision point the vertex of surface B \\r\\n        // • If more than one candidate 5 exists, scraping up to four \\r\\n\\r\\n        // For potential collision points of all, to examine the distance between the surface A \\r\\n        // • If you were on the inside surface of A, and the collision point\\r\\n\\r\\n        var b1;\\r\\n        var b2;\\r\\n        if(shape1.id<shape2.id){\\r\\n            b1=(shape1);\\r\\n            b2=(shape2);\\r\\n        }else{\\r\\n            b1=(shape2);\\r\\n            b2=(shape1);\\r\\n        }\\r\\n        var V1 = b1.elements;\\r\\n        var V2 = b2.elements;\\r\\n\\r\\n        var D1 = b1.dimentions;\\r\\n        var D2 = b2.dimentions;\\r\\n\\r\\n        var p1=b1.position;\\r\\n        var p2=b2.position;\\r\\n        var p1x=p1.x;\\r\\n        var p1y=p1.y;\\r\\n        var p1z=p1.z;\\r\\n        var p2x=p2.x;\\r\\n        var p2y=p2.y;\\r\\n        var p2z=p2.z;\\r\\n        // diff\\r\\n        var dx=p2x-p1x;\\r\\n        var dy=p2y-p1y;\\r\\n        var dz=p2z-p1z;\\r\\n        // distance\\r\\n        var w1=b1.halfWidth;\\r\\n        var h1=b1.halfHeight;\\r\\n        var d1=b1.halfDepth;\\r\\n        var w2=b2.halfWidth;\\r\\n        var h2=b2.halfHeight;\\r\\n        var d2=b2.halfDepth;\\r\\n        // direction\\r\\n\\r\\n        // ----------------------------\\r\\n        // 15 separating axes\\r\\n        // 1~6: face\\r\\n        // 7~f: edge\\r\\n        // http://marupeke296.com/COL_3D_No13_OBBvsOBB.html\\r\\n        // ----------------------------\\r\\n        \\r\\n        var a1x=D1[0];\\r\\n        var a1y=D1[1];\\r\\n        var a1z=D1[2];\\r\\n        var a2x=D1[3];\\r\\n        var a2y=D1[4];\\r\\n        var a2z=D1[5];\\r\\n        var a3x=D1[6];\\r\\n        var a3y=D1[7];\\r\\n        var a3z=D1[8];\\r\\n        var d1x=D1[9];\\r\\n        var d1y=D1[10];\\r\\n        var d1z=D1[11];\\r\\n        var d2x=D1[12];\\r\\n        var d2y=D1[13];\\r\\n        var d2z=D1[14];\\r\\n        var d3x=D1[15];\\r\\n        var d3y=D1[16];\\r\\n        var d3z=D1[17];\\r\\n\\r\\n        var a4x=D2[0];\\r\\n        var a4y=D2[1];\\r\\n        var a4z=D2[2];\\r\\n        var a5x=D2[3];\\r\\n        var a5y=D2[4];\\r\\n        var a5z=D2[5];\\r\\n        var a6x=D2[6];\\r\\n        var a6y=D2[7];\\r\\n        var a6z=D2[8];\\r\\n        var d4x=D2[9];\\r\\n        var d4y=D2[10];\\r\\n        var d4z=D2[11];\\r\\n        var d5x=D2[12];\\r\\n        var d5y=D2[13];\\r\\n        var d5z=D2[14];\\r\\n        var d6x=D2[15];\\r\\n        var d6y=D2[16];\\r\\n        var d6z=D2[17];\\r\\n        \\r\\n        var a7x=a1y*a4z-a1z*a4y;\\r\\n        var a7y=a1z*a4x-a1x*a4z;\\r\\n        var a7z=a1x*a4y-a1y*a4x;\\r\\n        var a8x=a1y*a5z-a1z*a5y;\\r\\n        var a8y=a1z*a5x-a1x*a5z;\\r\\n        var a8z=a1x*a5y-a1y*a5x;\\r\\n        var a9x=a1y*a6z-a1z*a6y;\\r\\n        var a9y=a1z*a6x-a1x*a6z;\\r\\n        var a9z=a1x*a6y-a1y*a6x;\\r\\n        var aax=a2y*a4z-a2z*a4y;\\r\\n        var aay=a2z*a4x-a2x*a4z;\\r\\n        var aaz=a2x*a4y-a2y*a4x;\\r\\n        var abx=a2y*a5z-a2z*a5y;\\r\\n        var aby=a2z*a5x-a2x*a5z;\\r\\n        var abz=a2x*a5y-a2y*a5x;\\r\\n        var acx=a2y*a6z-a2z*a6y;\\r\\n        var acy=a2z*a6x-a2x*a6z;\\r\\n        var acz=a2x*a6y-a2y*a6x;\\r\\n        var adx=a3y*a4z-a3z*a4y;\\r\\n        var ady=a3z*a4x-a3x*a4z;\\r\\n        var adz=a3x*a4y-a3y*a4x;\\r\\n        var aex=a3y*a5z-a3z*a5y;\\r\\n        var aey=a3z*a5x-a3x*a5z;\\r\\n        var aez=a3x*a5y-a3y*a5x;\\r\\n        var afx=a3y*a6z-a3z*a6y;\\r\\n        var afy=a3z*a6x-a3x*a6z;\\r\\n        var afz=a3x*a6y-a3y*a6x;\\r\\n        // right or left flags\\r\\n        var right1;\\r\\n        var right2;\\r\\n        var right3;\\r\\n        var right4;\\r\\n        var right5;\\r\\n        var right6;\\r\\n        var right7;\\r\\n        var right8;\\r\\n        var right9;\\r\\n        var righta;\\r\\n        var rightb;\\r\\n        var rightc;\\r\\n        var rightd;\\r\\n        var righte;\\r\\n        var rightf;\\r\\n        // overlapping distances\\r\\n        var overlap1;\\r\\n        var overlap2;\\r\\n        var overlap3;\\r\\n        var overlap4;\\r\\n        var overlap5;\\r\\n        var overlap6;\\r\\n        var overlap7;\\r\\n        var overlap8;\\r\\n        var overlap9;\\r\\n        var overlapa;\\r\\n        var overlapb;\\r\\n        var overlapc;\\r\\n        var overlapd;\\r\\n        var overlape;\\r\\n        var overlapf;\\r\\n        // invalid flags\\r\\n        var invalid7=false;\\r\\n        var invalid8=false;\\r\\n        var invalid9=false;\\r\\n        var invalida=false;\\r\\n        var invalidb=false;\\r\\n        var invalidc=false;\\r\\n        var invalidd=false;\\r\\n        var invalide=false;\\r\\n        var invalidf=false;\\r\\n        // temporary variables\\r\\n        var len;\\r\\n        var len1;\\r\\n        var len2;\\r\\n        var dot1;\\r\\n        var dot2;\\r\\n        var dot3;\\r\\n        // try axis 1\\r\\n        len=a1x*dx+a1y*dy+a1z*dz;\\r\\n        right1=len>0;\\r\\n        if(!right1)len=-len;\\r\\n        len1=w1;\\r\\n        dot1=a1x*a4x+a1y*a4y+a1z*a4z;\\r\\n        dot2=a1x*a5x+a1y*a5y+a1z*a5z;\\r\\n        dot3=a1x*a6x+a1y*a6y+a1z*a6z;\\r\\n        if(dot1<0)dot1=-dot1;\\r\\n        if(dot2<0)dot2=-dot2;\\r\\n        if(dot3<0)dot3=-dot3;\\r\\n        len2=dot1*w2+dot2*h2+dot3*d2;\\r\\n        overlap1=len-len1-len2;\\r\\n        if(overlap1>0)return;\\r\\n        // try axis 2\\r\\n        len=a2x*dx+a2y*dy+a2z*dz;\\r\\n        right2=len>0;\\r\\n        if(!right2)len=-len;\\r\\n        len1=h1;\\r\\n        dot1=a2x*a4x+a2y*a4y+a2z*a4z;\\r\\n        dot2=a2x*a5x+a2y*a5y+a2z*a5z;\\r\\n        dot3=a2x*a6x+a2y*a6y+a2z*a6z;\\r\\n        if(dot1<0)dot1=-dot1;\\r\\n        if(dot2<0)dot2=-dot2;\\r\\n        if(dot3<0)dot3=-dot3;\\r\\n        len2=dot1*w2+dot2*h2+dot3*d2;\\r\\n        overlap2=len-len1-len2;\\r\\n        if(overlap2>0)return;\\r\\n        // try axis 3\\r\\n        len=a3x*dx+a3y*dy+a3z*dz;\\r\\n        right3=len>0;\\r\\n        if(!right3)len=-len;\\r\\n        len1=d1;\\r\\n        dot1=a3x*a4x+a3y*a4y+a3z*a4z;\\r\\n        dot2=a3x*a5x+a3y*a5y+a3z*a5z;\\r\\n        dot3=a3x*a6x+a3y*a6y+a3z*a6z;\\r\\n        if(dot1<0)dot1=-dot1;\\r\\n        if(dot2<0)dot2=-dot2;\\r\\n        if(dot3<0)dot3=-dot3;\\r\\n        len2=dot1*w2+dot2*h2+dot3*d2;\\r\\n        overlap3=len-len1-len2;\\r\\n        if(overlap3>0)return;\\r\\n        // try axis 4\\r\\n        len=a4x*dx+a4y*dy+a4z*dz;\\r\\n        right4=len>0;\\r\\n        if(!right4)len=-len;\\r\\n        dot1=a4x*a1x+a4y*a1y+a4z*a1z;\\r\\n        dot2=a4x*a2x+a4y*a2y+a4z*a2z;\\r\\n        dot3=a4x*a3x+a4y*a3y+a4z*a3z;\\r\\n        if(dot1<0)dot1=-dot1;\\r\\n        if(dot2<0)dot2=-dot2;\\r\\n        if(dot3<0)dot3=-dot3;\\r\\n        len1=dot1*w1+dot2*h1+dot3*d1;\\r\\n        len2=w2;\\r\\n        overlap4=(len-len1-len2)*1.0;\\r\\n        if(overlap4>0)return;\\r\\n        // try axis 5\\r\\n        len=a5x*dx+a5y*dy+a5z*dz;\\r\\n        right5=len>0;\\r\\n        if(!right5)len=-len;\\r\\n        dot1=a5x*a1x+a5y*a1y+a5z*a1z;\\r\\n        dot2=a5x*a2x+a5y*a2y+a5z*a2z;\\r\\n        dot3=a5x*a3x+a5y*a3y+a5z*a3z;\\r\\n        if(dot1<0)dot1=-dot1;\\r\\n        if(dot2<0)dot2=-dot2;\\r\\n        if(dot3<0)dot3=-dot3;\\r\\n        len1=dot1*w1+dot2*h1+dot3*d1;\\r\\n        len2=h2;\\r\\n        overlap5=(len-len1-len2)*1.0;\\r\\n        if(overlap5>0)return;\\r\\n        // try axis 6\\r\\n        len=a6x*dx+a6y*dy+a6z*dz;\\r\\n        right6=len>0;\\r\\n        if(!right6)len=-len;\\r\\n        dot1=a6x*a1x+a6y*a1y+a6z*a1z;\\r\\n        dot2=a6x*a2x+a6y*a2y+a6z*a2z;\\r\\n        dot3=a6x*a3x+a6y*a3y+a6z*a3z;\\r\\n        if(dot1<0)dot1=-dot1;\\r\\n        if(dot2<0)dot2=-dot2;\\r\\n        if(dot3<0)dot3=-dot3;\\r\\n        len1=dot1*w1+dot2*h1+dot3*d1;\\r\\n        len2=d2;\\r\\n        overlap6=(len-len1-len2)*1.0;\\r\\n        if(overlap6>0)return;\\r\\n        // try axis 7\\r\\n        len=a7x*a7x+a7y*a7y+a7z*a7z;\\r\\n        if(len>1e-5){\\r\\n            len=1/_Math.sqrt(len);\\r\\n            a7x*=len;\\r\\n            a7y*=len;\\r\\n            a7z*=len;\\r\\n            len=a7x*dx+a7y*dy+a7z*dz;\\r\\n            right7=len>0;\\r\\n            if(!right7)len=-len;\\r\\n            dot1=a7x*a2x+a7y*a2y+a7z*a2z;\\r\\n            dot2=a7x*a3x+a7y*a3y+a7z*a3z;\\r\\n            if(dot1<0)dot1=-dot1;\\r\\n            if(dot2<0)dot2=-dot2;\\r\\n            len1=dot1*h1+dot2*d1;\\r\\n            dot1=a7x*a5x+a7y*a5y+a7z*a5z;\\r\\n            dot2=a7x*a6x+a7y*a6y+a7z*a6z;\\r\\n            if(dot1<0)dot1=-dot1;\\r\\n            if(dot2<0)dot2=-dot2;\\r\\n            len2=dot1*h2+dot2*d2;\\r\\n            overlap7=len-len1-len2;\\r\\n            if(overlap7>0)return;\\r\\n        }else{\\r\\n            right7=false;\\r\\n            overlap7=0;\\r\\n            invalid7=true;\\r\\n        }\\r\\n        // try axis 8\\r\\n        len=a8x*a8x+a8y*a8y+a8z*a8z;\\r\\n        if(len>1e-5){\\r\\n            len=1/_Math.sqrt(len);\\r\\n            a8x*=len;\\r\\n            a8y*=len;\\r\\n            a8z*=len;\\r\\n            len=a8x*dx+a8y*dy+a8z*dz;\\r\\n            right8=len>0;\\r\\n            if(!right8)len=-len;\\r\\n            dot1=a8x*a2x+a8y*a2y+a8z*a2z;\\r\\n            dot2=a8x*a3x+a8y*a3y+a8z*a3z;\\r\\n            if(dot1<0)dot1=-dot1;\\r\\n            if(dot2<0)dot2=-dot2;\\r\\n            len1=dot1*h1+dot2*d1;\\r\\n            dot1=a8x*a4x+a8y*a4y+a8z*a4z;\\r\\n            dot2=a8x*a6x+a8y*a6y+a8z*a6z;\\r\\n            if(dot1<0)dot1=-dot1;\\r\\n            if(dot2<0)dot2=-dot2;\\r\\n            len2=dot1*w2+dot2*d2;\\r\\n            overlap8=len-len1-len2;\\r\\n            if(overlap8>0)return;\\r\\n        }else{\\r\\n            right8=false;\\r\\n            overlap8=0;\\r\\n            invalid8=true;\\r\\n        }\\r\\n        // try axis 9\\r\\n        len=a9x*a9x+a9y*a9y+a9z*a9z;\\r\\n        if(len>1e-5){\\r\\n            len=1/_Math.sqrt(len);\\r\\n            a9x*=len;\\r\\n            a9y*=len;\\r\\n            a9z*=len;\\r\\n            len=a9x*dx+a9y*dy+a9z*dz;\\r\\n            right9=len>0;\\r\\n            if(!right9)len=-len;\\r\\n            dot1=a9x*a2x+a9y*a2y+a9z*a2z;\\r\\n            dot2=a9x*a3x+a9y*a3y+a9z*a3z;\\r\\n            if(dot1<0)dot1=-dot1;\\r\\n            if(dot2<0)dot2=-dot2;\\r\\n            len1=dot1*h1+dot2*d1;\\r\\n            dot1=a9x*a4x+a9y*a4y+a9z*a4z;\\r\\n            dot2=a9x*a5x+a9y*a5y+a9z*a5z;\\r\\n            if(dot1<0)dot1=-dot1;\\r\\n            if(dot2<0)dot2=-dot2;\\r\\n            len2=dot1*w2+dot2*h2;\\r\\n            overlap9=len-len1-len2;\\r\\n            if(overlap9>0)return;\\r\\n        }else{\\r\\n            right9=false;\\r\\n            overlap9=0;\\r\\n            invalid9=true;\\r\\n        }\\r\\n        // try axis 10\\r\\n        len=aax*aax+aay*aay+aaz*aaz;\\r\\n        if(len>1e-5){\\r\\n            len=1/_Math.sqrt(len);\\r\\n            aax*=len;\\r\\n            aay*=len;\\r\\n            aaz*=len;\\r\\n            len=aax*dx+aay*dy+aaz*dz;\\r\\n            righta=len>0;\\r\\n            if(!righta)len=-len;\\r\\n            dot1=aax*a1x+aay*a1y+aaz*a1z;\\r\\n            dot2=aax*a3x+aay*a3y+aaz*a3z;\\r\\n            if(dot1<0)dot1=-dot1;\\r\\n            if(dot2<0)dot2=-dot2;\\r\\n            len1=dot1*w1+dot2*d1;\\r\\n            dot1=aax*a5x+aay*a5y+aaz*a5z;\\r\\n            dot2=aax*a6x+aay*a6y+aaz*a6z;\\r\\n            if(dot1<0)dot1=-dot1;\\r\\n            if(dot2<0)dot2=-dot2;\\r\\n            len2=dot1*h2+dot2*d2;\\r\\n            overlapa=len-len1-len2;\\r\\n            if(overlapa>0)return;\\r\\n        }else{\\r\\n            righta=false;\\r\\n            overlapa=0;\\r\\n            invalida=true;\\r\\n        }\\r\\n        // try axis 11\\r\\n        len=abx*abx+aby*aby+abz*abz;\\r\\n        if(len>1e-5){\\r\\n            len=1/_Math.sqrt(len);\\r\\n            abx*=len;\\r\\n            aby*=len;\\r\\n            abz*=len;\\r\\n            len=abx*dx+aby*dy+abz*dz;\\r\\n            rightb=len>0;\\r\\n            if(!rightb)len=-len;\\r\\n            dot1=abx*a1x+aby*a1y+abz*a1z;\\r\\n            dot2=abx*a3x+aby*a3y+abz*a3z;\\r\\n            if(dot1<0)dot1=-dot1;\\r\\n            if(dot2<0)dot2=-dot2;\\r\\n            len1=dot1*w1+dot2*d1;\\r\\n            dot1=abx*a4x+aby*a4y+abz*a4z;\\r\\n            dot2=abx*a6x+aby*a6y+abz*a6z;\\r\\n            if(dot1<0)dot1=-dot1;\\r\\n            if(dot2<0)dot2=-dot2;\\r\\n            len2=dot1*w2+dot2*d2;\\r\\n            overlapb=len-len1-len2;\\r\\n            if(overlapb>0)return;\\r\\n        }else{\\r\\n            rightb=false;\\r\\n            overlapb=0;\\r\\n            invalidb=true;\\r\\n        }\\r\\n        // try axis 12\\r\\n        len=acx*acx+acy*acy+acz*acz;\\r\\n        if(len>1e-5){\\r\\n            len=1/_Math.sqrt(len);\\r\\n            acx*=len;\\r\\n            acy*=len;\\r\\n            acz*=len;\\r\\n            len=acx*dx+acy*dy+acz*dz;\\r\\n            rightc=len>0;\\r\\n            if(!rightc)len=-len;\\r\\n            dot1=acx*a1x+acy*a1y+acz*a1z;\\r\\n            dot2=acx*a3x+acy*a3y+acz*a3z;\\r\\n            if(dot1<0)dot1=-dot1;\\r\\n            if(dot2<0)dot2=-dot2;\\r\\n            len1=dot1*w1+dot2*d1;\\r\\n            dot1=acx*a4x+acy*a4y+acz*a4z;\\r\\n            dot2=acx*a5x+acy*a5y+acz*a5z;\\r\\n            if(dot1<0)dot1=-dot1;\\r\\n            if(dot2<0)dot2=-dot2;\\r\\n            len2=dot1*w2+dot2*h2;\\r\\n            overlapc=len-len1-len2;\\r\\n            if(overlapc>0)return;\\r\\n        }else{\\r\\n            rightc=false;\\r\\n            overlapc=0;\\r\\n            invalidc=true;\\r\\n        }\\r\\n        // try axis 13\\r\\n        len=adx*adx+ady*ady+adz*adz;\\r\\n        if(len>1e-5){\\r\\n            len=1/_Math.sqrt(len);\\r\\n            adx*=len;\\r\\n            ady*=len;\\r\\n            adz*=len;\\r\\n            len=adx*dx+ady*dy+adz*dz;\\r\\n            rightd=len>0;\\r\\n            if(!rightd)len=-len;\\r\\n            dot1=adx*a1x+ady*a1y+adz*a1z;\\r\\n            dot2=adx*a2x+ady*a2y+adz*a2z;\\r\\n            if(dot1<0)dot1=-dot1;\\r\\n            if(dot2<0)dot2=-dot2;\\r\\n            len1=dot1*w1+dot2*h1;\\r\\n            dot1=adx*a5x+ady*a5y+adz*a5z;\\r\\n            dot2=adx*a6x+ady*a6y+adz*a6z;\\r\\n            if(dot1<0)dot1=-dot1;\\r\\n            if(dot2<0)dot2=-dot2;\\r\\n            len2=dot1*h2+dot2*d2;\\r\\n            overlapd=len-len1-len2;\\r\\n            if(overlapd>0)return;\\r\\n        }else{\\r\\n            rightd=false;\\r\\n            overlapd=0;\\r\\n            invalidd=true;\\r\\n        }\\r\\n        // try axis 14\\r\\n        len=aex*aex+aey*aey+aez*aez;\\r\\n        if(len>1e-5){\\r\\n            len=1/_Math.sqrt(len);\\r\\n            aex*=len;\\r\\n            aey*=len;\\r\\n            aez*=len;\\r\\n            len=aex*dx+aey*dy+aez*dz;\\r\\n            righte=len>0;\\r\\n            if(!righte)len=-len;\\r\\n            dot1=aex*a1x+aey*a1y+aez*a1z;\\r\\n            dot2=aex*a2x+aey*a2y+aez*a2z;\\r\\n            if(dot1<0)dot1=-dot1;\\r\\n            if(dot2<0)dot2=-dot2;\\r\\n            len1=dot1*w1+dot2*h1;\\r\\n            dot1=aex*a4x+aey*a4y+aez*a4z;\\r\\n            dot2=aex*a6x+aey*a6y+aez*a6z;\\r\\n            if(dot1<0)dot1=-dot1;\\r\\n            if(dot2<0)dot2=-dot2;\\r\\n            len2=dot1*w2+dot2*d2;\\r\\n            overlape=len-len1-len2;\\r\\n            if(overlape>0)return;\\r\\n        }else{\\r\\n            righte=false;\\r\\n            overlape=0;\\r\\n            invalide=true;\\r\\n        }\\r\\n        // try axis 15\\r\\n        len=afx*afx+afy*afy+afz*afz;\\r\\n        if(len>1e-5){\\r\\n            len=1/_Math.sqrt(len);\\r\\n            afx*=len;\\r\\n            afy*=len;\\r\\n            afz*=len;\\r\\n            len=afx*dx+afy*dy+afz*dz;\\r\\n            rightf=len>0;\\r\\n            if(!rightf)len=-len;\\r\\n            dot1=afx*a1x+afy*a1y+afz*a1z;\\r\\n            dot2=afx*a2x+afy*a2y+afz*a2z;\\r\\n            if(dot1<0)dot1=-dot1;\\r\\n            if(dot2<0)dot2=-dot2;\\r\\n            len1=dot1*w1+dot2*h1;\\r\\n            dot1=afx*a4x+afy*a4y+afz*a4z;\\r\\n            dot2=afx*a5x+afy*a5y+afz*a5z;\\r\\n            if(dot1<0)dot1=-dot1;\\r\\n            if(dot2<0)dot2=-dot2;\\r\\n            len2=dot1*w2+dot2*h2;\\r\\n            overlapf=len-len1-len2;\\r\\n            if(overlapf>0)return;\\r\\n        }else{\\r\\n            rightf=false;\\r\\n            overlapf=0;\\r\\n            invalidf=true;\\r\\n        }\\r\\n        // boxes are overlapping\\r\\n        var depth=overlap1;\\r\\n        var depth2=overlap1;\\r\\n        var minIndex=0;\\r\\n        var right=right1;\\r\\n        if(overlap2>depth2){\\r\\n            depth=overlap2;\\r\\n            depth2=overlap2;\\r\\n            minIndex=1;\\r\\n            right=right2;\\r\\n        }\\r\\n        if(overlap3>depth2){\\r\\n            depth=overlap3;\\r\\n            depth2=overlap3;\\r\\n            minIndex=2;\\r\\n            right=right3;\\r\\n        }\\r\\n        if(overlap4>depth2){\\r\\n            depth=overlap4;\\r\\n            depth2=overlap4;\\r\\n            minIndex=3;\\r\\n            right=right4;\\r\\n        }\\r\\n        if(overlap5>depth2){\\r\\n            depth=overlap5;\\r\\n            depth2=overlap5;\\r\\n            minIndex=4;\\r\\n            right=right5;\\r\\n        }\\r\\n        if(overlap6>depth2){\\r\\n            depth=overlap6;\\r\\n            depth2=overlap6;\\r\\n            minIndex=5;\\r\\n            right=right6;\\r\\n        }\\r\\n        if(overlap7-0.01>depth2&&!invalid7){\\r\\n            depth=overlap7;\\r\\n            depth2=overlap7-0.01;\\r\\n            minIndex=6;\\r\\n            right=right7;\\r\\n        }\\r\\n        if(overlap8-0.01>depth2&&!invalid8){\\r\\n            depth=overlap8;\\r\\n            depth2=overlap8-0.01;\\r\\n            minIndex=7;\\r\\n            right=right8;\\r\\n        }\\r\\n        if(overlap9-0.01>depth2&&!invalid9){\\r\\n            depth=overlap9;\\r\\n            depth2=overlap9-0.01;\\r\\n            minIndex=8;\\r\\n            right=right9;\\r\\n        }\\r\\n        if(overlapa-0.01>depth2&&!invalida){\\r\\n            depth=overlapa;\\r\\n            depth2=overlapa-0.01;\\r\\n            minIndex=9;\\r\\n            right=righta;\\r\\n        }\\r\\n        if(overlapb-0.01>depth2&&!invalidb){\\r\\n            depth=overlapb;\\r\\n            depth2=overlapb-0.01;\\r\\n            minIndex=10;\\r\\n            right=rightb;\\r\\n        }\\r\\n        if(overlapc-0.01>depth2&&!invalidc){\\r\\n            depth=overlapc;\\r\\n            depth2=overlapc-0.01;\\r\\n            minIndex=11;\\r\\n            right=rightc;\\r\\n        }\\r\\n        if(overlapd-0.01>depth2&&!invalidd){\\r\\n            depth=overlapd;\\r\\n            depth2=overlapd-0.01;\\r\\n            minIndex=12;\\r\\n            right=rightd;\\r\\n        }\\r\\n        if(overlape-0.01>depth2&&!invalide){\\r\\n            depth=overlape;\\r\\n            depth2=overlape-0.01;\\r\\n            minIndex=13;\\r\\n            right=righte;\\r\\n        }\\r\\n        if(overlapf-0.01>depth2&&!invalidf){\\r\\n            depth=overlapf;\\r\\n            minIndex=14;\\r\\n            right=rightf;\\r\\n        }\\r\\n        // normal\\r\\n        var nx=0;\\r\\n        var ny=0;\\r\\n        var nz=0;\\r\\n        // edge line or face side normal\\r\\n        var n1x=0;\\r\\n        var n1y=0;\\r\\n        var n1z=0;\\r\\n        var n2x=0;\\r\\n        var n2y=0;\\r\\n        var n2z=0;\\r\\n        // center of current face\\r\\n        var cx=0;\\r\\n        var cy=0;\\r\\n        var cz=0;\\r\\n        // face side\\r\\n        var s1x=0;\\r\\n        var s1y=0;\\r\\n        var s1z=0;\\r\\n        var s2x=0;\\r\\n        var s2y=0;\\r\\n        var s2z=0;\\r\\n        // swap b1 b2\\r\\n        var swap=false;\\r\\n\\r\\n        //_______________________________________\\r\\n\\r\\n        if(minIndex==0){// b1.x * b2\\r\\n            if(right){\\r\\n                cx=p1x+d1x; cy=p1y+d1y;  cz=p1z+d1z;\\r\\n                nx=a1x; ny=a1y; nz=a1z;\\r\\n            }else{\\r\\n                cx=p1x-d1x; cy=p1y-d1y; cz=p1z-d1z;\\r\\n                nx=-a1x; ny=-a1y; nz=-a1z;\\r\\n            }\\r\\n            s1x=d2x; s1y=d2y; s1z=d2z;\\r\\n            n1x=-a2x; n1y=-a2y; n1z=-a2z;\\r\\n            s2x=d3x; s2y=d3y; s2z=d3z;\\r\\n            n2x=-a3x; n2y=-a3y; n2z=-a3z;\\r\\n        }\\r\\n        else if(minIndex==1){// b1.y * b2\\r\\n            if(right){\\r\\n                cx=p1x+d2x; cy=p1y+d2y; cz=p1z+d2z;\\r\\n                nx=a2x; ny=a2y; nz=a2z;\\r\\n            }else{\\r\\n                cx=p1x-d2x; cy=p1y-d2y; cz=p1z-d2z;\\r\\n                nx=-a2x; ny=-a2y; nz=-a2z;\\r\\n            }\\r\\n            s1x=d1x; s1y=d1y; s1z=d1z;\\r\\n            n1x=-a1x; n1y=-a1y; n1z=-a1z;\\r\\n            s2x=d3x; s2y=d3y; s2z=d3z;\\r\\n            n2x=-a3x; n2y=-a3y; n2z=-a3z;\\r\\n        }\\r\\n        else if(minIndex==2){// b1.z * b2\\r\\n            if(right){\\r\\n                cx=p1x+d3x; cy=p1y+d3y; cz=p1z+d3z;\\r\\n                nx=a3x; ny=a3y; nz=a3z;\\r\\n            }else{\\r\\n                cx=p1x-d3x; cy=p1y-d3y; cz=p1z-d3z;\\r\\n                nx=-a3x; ny=-a3y; nz=-a3z;\\r\\n            }\\r\\n            s1x=d1x; s1y=d1y; s1z=d1z;\\r\\n            n1x=-a1x; n1y=-a1y; n1z=-a1z;\\r\\n            s2x=d2x; s2y=d2y; s2z=d2z;\\r\\n            n2x=-a2x; n2y=-a2y; n2z=-a2z;\\r\\n        }\\r\\n        else if(minIndex==3){// b2.x * b1\\r\\n            swap=true;\\r\\n            if(!right){\\r\\n                cx=p2x+d4x; cy=p2y+d4y; cz=p2z+d4z;\\r\\n                nx=a4x; ny=a4y; nz=a4z;\\r\\n            }else{\\r\\n                cx=p2x-d4x; cy=p2y-d4y; cz=p2z-d4z;\\r\\n                nx=-a4x; ny=-a4y; nz=-a4z;\\r\\n            }\\r\\n            s1x=d5x; s1y=d5y; s1z=d5z;\\r\\n            n1x=-a5x; n1y=-a5y; n1z=-a5z;\\r\\n            s2x=d6x; s2y=d6y; s2z=d6z;\\r\\n            n2x=-a6x; n2y=-a6y; n2z=-a6z;\\r\\n        }\\r\\n        else if(minIndex==4){// b2.y * b1\\r\\n            swap=true;\\r\\n            if(!right){\\r\\n                cx=p2x+d5x; cy=p2y+d5y; cz=p2z+d5z;\\r\\n                nx=a5x; ny=a5y; nz=a5z;\\r\\n            }else{\\r\\n                cx=p2x-d5x; cy=p2y-d5y; cz=p2z-d5z;\\r\\n                nx=-a5x; ny=-a5y; nz=-a5z;\\r\\n            }\\r\\n            s1x=d4x; s1y=d4y; s1z=d4z;\\r\\n            n1x=-a4x; n1y=-a4y; n1z=-a4z;\\r\\n            s2x=d6x; s2y=d6y; s2z=d6z;\\r\\n            n2x=-a6x; n2y=-a6y; n2z=-a6z;\\r\\n        }\\r\\n        else if(minIndex==5){// b2.z * b1\\r\\n            swap=true;\\r\\n            if(!right){\\r\\n                cx=p2x+d6x; cy=p2y+d6y; cz=p2z+d6z;\\r\\n                nx=a6x; ny=a6y; nz=a6z;\\r\\n            }else{\\r\\n                cx=p2x-d6x; cy=p2y-d6y; cz=p2z-d6z;\\r\\n                nx=-a6x; ny=-a6y; nz=-a6z;\\r\\n            }\\r\\n            s1x=d4x; s1y=d4y; s1z=d4z;\\r\\n            n1x=-a4x; n1y=-a4y; n1z=-a4z;\\r\\n            s2x=d5x; s2y=d5y; s2z=d5z;\\r\\n            n2x=-a5x; n2y=-a5y; n2z=-a5z;\\r\\n        }\\r\\n        else if(minIndex==6){// b1.x * b2.x\\r\\n            nx=a7x; ny=a7y; nz=a7z;\\r\\n            n1x=a1x; n1y=a1y; n1z=a1z;\\r\\n            n2x=a4x; n2y=a4y; n2z=a4z;\\r\\n        }\\r\\n        else if(minIndex==7){// b1.x * b2.y\\r\\n            nx=a8x; ny=a8y; nz=a8z;\\r\\n            n1x=a1x; n1y=a1y; n1z=a1z;\\r\\n            n2x=a5x; n2y=a5y; n2z=a5z;\\r\\n        }\\r\\n        else if(minIndex==8){// b1.x * b2.z\\r\\n            nx=a9x; ny=a9y; nz=a9z;\\r\\n            n1x=a1x; n1y=a1y; n1z=a1z;\\r\\n            n2x=a6x; n2y=a6y; n2z=a6z;\\r\\n        }\\r\\n        else if(minIndex==9){// b1.y * b2.x\\r\\n            nx=aax; ny=aay; nz=aaz;\\r\\n            n1x=a2x; n1y=a2y; n1z=a2z;\\r\\n            n2x=a4x; n2y=a4y; n2z=a4z;\\r\\n        }\\r\\n        else if(minIndex==10){// b1.y * b2.y\\r\\n            nx=abx; ny=aby; nz=abz;\\r\\n            n1x=a2x; n1y=a2y; n1z=a2z;\\r\\n            n2x=a5x; n2y=a5y; n2z=a5z;\\r\\n        }\\r\\n        else if(minIndex==11){// b1.y * b2.z\\r\\n            nx=acx; ny=acy; nz=acz;\\r\\n            n1x=a2x; n1y=a2y; n1z=a2z;\\r\\n            n2x=a6x; n2y=a6y; n2z=a6z;\\r\\n        }\\r\\n        else if(minIndex==12){// b1.z * b2.x\\r\\n            nx=adx;  ny=ady; nz=adz;\\r\\n            n1x=a3x; n1y=a3y; n1z=a3z;\\r\\n            n2x=a4x; n2y=a4y; n2z=a4z;\\r\\n        }\\r\\n        else if(minIndex==13){// b1.z * b2.y\\r\\n            nx=aex; ny=aey; nz=aez;\\r\\n            n1x=a3x; n1y=a3y; n1z=a3z;\\r\\n            n2x=a5x; n2y=a5y; n2z=a5z;\\r\\n        }\\r\\n        else if(minIndex==14){// b1.z * b2.z\\r\\n            nx=afx; ny=afy; nz=afz;\\r\\n            n1x=a3x; n1y=a3y; n1z=a3z;\\r\\n            n2x=a6x; n2y=a6y; n2z=a6z;\\r\\n        }\\r\\n\\r\\n        //__________________________________________\\r\\n\\r\\n        //var v;\\r\\n        if(minIndex>5){\\r\\n            if(!right){\\r\\n                nx=-nx; ny=-ny; nz=-nz;\\r\\n            }\\r\\n            var distance;\\r\\n            var maxDistance;\\r\\n            var vx;\\r\\n            var vy;\\r\\n            var vz;\\r\\n            var v1x;\\r\\n            var v1y;\\r\\n            var v1z;\\r\\n            var v2x;\\r\\n            var v2y;\\r\\n            var v2z;\\r\\n            //vertex1;\\r\\n            v1x=V1[0]; v1y=V1[1]; v1z=V1[2];\\r\\n            maxDistance=nx*v1x+ny*v1y+nz*v1z;\\r\\n            //vertex2;\\r\\n            vx=V1[3]; vy=V1[4]; vz=V1[5];\\r\\n            distance=nx*vx+ny*vy+nz*vz;\\r\\n            if(distance>maxDistance){\\r\\n                maxDistance=distance;\\r\\n                v1x=vx; v1y=vy; v1z=vz;\\r\\n            }\\r\\n            //vertex3;\\r\\n            vx=V1[6]; vy=V1[7]; vz=V1[8];\\r\\n            distance=nx*vx+ny*vy+nz*vz;\\r\\n            if(distance>maxDistance){\\r\\n                maxDistance=distance;\\r\\n                v1x=vx; v1y=vy; v1z=vz;\\r\\n            }\\r\\n            //vertex4;\\r\\n            vx=V1[9]; vy=V1[10]; vz=V1[11];\\r\\n            distance=nx*vx+ny*vy+nz*vz;\\r\\n            if(distance>maxDistance){\\r\\n                maxDistance=distance;\\r\\n                v1x=vx; v1y=vy; v1z=vz;\\r\\n            }\\r\\n            //vertex5;\\r\\n            vx=V1[12]; vy=V1[13]; vz=V1[14];\\r\\n            distance=nx*vx+ny*vy+nz*vz;\\r\\n            if(distance>maxDistance){\\r\\n                maxDistance=distance;\\r\\n                v1x=vx; v1y=vy; v1z=vz;\\r\\n            }\\r\\n            //vertex6;\\r\\n            vx=V1[15]; vy=V1[16]; vz=V1[17];\\r\\n            distance=nx*vx+ny*vy+nz*vz;\\r\\n            if(distance>maxDistance){\\r\\n                maxDistance=distance;\\r\\n                v1x=vx; v1y=vy; v1z=vz;\\r\\n            }\\r\\n            //vertex7;\\r\\n            vx=V1[18]; vy=V1[19]; vz=V1[20];\\r\\n            distance=nx*vx+ny*vy+nz*vz;\\r\\n            if(distance>maxDistance){\\r\\n                maxDistance=distance;\\r\\n                v1x=vx; v1y=vy; v1z=vz;\\r\\n            }\\r\\n            //vertex8;\\r\\n            vx=V1[21]; vy=V1[22]; vz=V1[23];\\r\\n            distance=nx*vx+ny*vy+nz*vz;\\r\\n            if(distance>maxDistance){\\r\\n                maxDistance=distance;\\r\\n                v1x=vx; v1y=vy; v1z=vz;\\r\\n            }\\r\\n            //vertex1;\\r\\n            v2x=V2[0]; v2y=V2[1]; v2z=V2[2];\\r\\n            maxDistance=nx*v2x+ny*v2y+nz*v2z;\\r\\n            //vertex2;\\r\\n            vx=V2[3]; vy=V2[4]; vz=V2[5];\\r\\n            distance=nx*vx+ny*vy+nz*vz;\\r\\n            if(distance<maxDistance){\\r\\n                maxDistance=distance;\\r\\n                v2x=vx; v2y=vy; v2z=vz;\\r\\n            }\\r\\n            //vertex3;\\r\\n            vx=V2[6]; vy=V2[7]; vz=V2[8];\\r\\n            distance=nx*vx+ny*vy+nz*vz;\\r\\n            if(distance<maxDistance){\\r\\n                maxDistance=distance;\\r\\n                v2x=vx; v2y=vy; v2z=vz;\\r\\n            }\\r\\n            //vertex4;\\r\\n            vx=V2[9]; vy=V2[10]; vz=V2[11];\\r\\n            distance=nx*vx+ny*vy+nz*vz;\\r\\n            if(distance<maxDistance){\\r\\n                maxDistance=distance;\\r\\n                v2x=vx; v2y=vy; v2z=vz;\\r\\n            }\\r\\n            //vertex5;\\r\\n            vx=V2[12]; vy=V2[13]; vz=V2[14];\\r\\n            distance=nx*vx+ny*vy+nz*vz;\\r\\n            if(distance<maxDistance){\\r\\n                maxDistance=distance;\\r\\n                v2x=vx; v2y=vy; v2z=vz;\\r\\n            }\\r\\n            //vertex6;\\r\\n            vx=V2[15]; vy=V2[16]; vz=V2[17];\\r\\n            distance=nx*vx+ny*vy+nz*vz;\\r\\n            if(distance<maxDistance){\\r\\n                maxDistance=distance;\\r\\n                v2x=vx; v2y=vy; v2z=vz;\\r\\n            }\\r\\n            //vertex7;\\r\\n            vx=V2[18]; vy=V2[19]; vz=V2[20];\\r\\n            distance=nx*vx+ny*vy+nz*vz;\\r\\n            if(distance<maxDistance){\\r\\n                maxDistance=distance;\\r\\n                v2x=vx; v2y=vy; v2z=vz;\\r\\n            }\\r\\n            //vertex8;\\r\\n            vx=V2[21]; vy=V2[22]; vz=V2[23];\\r\\n            distance=nx*vx+ny*vy+nz*vz;\\r\\n            if(distance<maxDistance){\\r\\n                maxDistance=distance;\\r\\n                v2x=vx; v2y=vy; v2z=vz;\\r\\n            }\\r\\n            vx=v2x-v1x; vy=v2y-v1y; vz=v2z-v1z;\\r\\n            dot1=n1x*n2x+n1y*n2y+n1z*n2z;\\r\\n            var t=(vx*(n1x-n2x*dot1)+vy*(n1y-n2y*dot1)+vz*(n1z-n2z*dot1))/(1-dot1*dot1);\\r\\n            manifold.addPoint(v1x+n1x*t+nx*depth*0.5,v1y+n1y*t+ny*depth*0.5,v1z+n1z*t+nz*depth*0.5,nx,ny,nz,depth,false);\\r\\n            return;\\r\\n        }\\r\\n        // now detect face-face collision...\\r\\n        // target quad\\r\\n        var q1x;\\r\\n        var q1y;\\r\\n        var q1z;\\r\\n        var q2x;\\r\\n        var q2y;\\r\\n        var q2z;\\r\\n        var q3x;\\r\\n        var q3y;\\r\\n        var q3z;\\r\\n        var q4x;\\r\\n        var q4y;\\r\\n        var q4z;\\r\\n        // search support face and vertex\\r\\n        var minDot=1;\\r\\n        var dot=0;\\r\\n        var minDotIndex=0;\\r\\n        if(swap){\\r\\n            dot=a1x*nx+a1y*ny+a1z*nz;\\r\\n            if(dot<minDot){\\r\\n                minDot=dot;\\r\\n                minDotIndex=0;\\r\\n            }\\r\\n            if(-dot<minDot){\\r\\n                minDot=-dot;\\r\\n                minDotIndex=1;\\r\\n            }\\r\\n            dot=a2x*nx+a2y*ny+a2z*nz;\\r\\n            if(dot<minDot){\\r\\n                minDot=dot;\\r\\n                minDotIndex=2;\\r\\n            }\\r\\n            if(-dot<minDot){\\r\\n                minDot=-dot;\\r\\n                minDotIndex=3;\\r\\n            }\\r\\n            dot=a3x*nx+a3y*ny+a3z*nz;\\r\\n            if(dot<minDot){\\r\\n                minDot=dot;\\r\\n                minDotIndex=4;\\r\\n            }\\r\\n            if(-dot<minDot){\\r\\n                minDot=-dot;\\r\\n                minDotIndex=5;\\r\\n            }\\r\\n\\r\\n            if(minDotIndex==0){// x+ face\\r\\n                q1x=V1[0]; q1y=V1[1]; q1z=V1[2];//vertex1\\r\\n                q2x=V1[6]; q2y=V1[7]; q2z=V1[8];//vertex3\\r\\n                q3x=V1[9]; q3y=V1[10]; q3z=V1[11];//vertex4\\r\\n                q4x=V1[3]; q4y=V1[4]; q4z=V1[5];//vertex2\\r\\n            }\\r\\n            else if(minDotIndex==1){// x- face\\r\\n                q1x=V1[15]; q1y=V1[16]; q1z=V1[17];//vertex6\\r\\n                q2x=V1[21]; q2y=V1[22]; q2z=V1[23];//vertex8\\r\\n                q3x=V1[18]; q3y=V1[19]; q3z=V1[20];//vertex7\\r\\n                q4x=V1[12]; q4y=V1[13]; q4z=V1[14];//vertex5\\r\\n            }\\r\\n            else if(minDotIndex==2){// y+ face\\r\\n                q1x=V1[12]; q1y=V1[13]; q1z=V1[14];//vertex5\\r\\n                q2x=V1[0]; q2y=V1[1]; q2z=V1[2];//vertex1\\r\\n                q3x=V1[3]; q3y=V1[4]; q3z=V1[5];//vertex2\\r\\n                q4x=V1[15]; q4y=V1[16]; q4z=V1[17];//vertex6\\r\\n            }\\r\\n            else if(minDotIndex==3){// y- face\\r\\n                q1x=V1[21]; q1y=V1[22]; q1z=V1[23];//vertex8\\r\\n                q2x=V1[9]; q2y=V1[10]; q2z=V1[11];//vertex4\\r\\n                q3x=V1[6]; q3y=V1[7]; q3z=V1[8];//vertex3\\r\\n                q4x=V1[18]; q4y=V1[19]; q4z=V1[20];//vertex7\\r\\n            }\\r\\n            else if(minDotIndex==4){// z+ face\\r\\n                q1x=V1[12]; q1y=V1[13]; q1z=V1[14];//vertex5\\r\\n                q2x=V1[18]; q2y=V1[19]; q2z=V1[20];//vertex7\\r\\n                q3x=V1[6]; q3y=V1[7]; q3z=V1[8];//vertex3\\r\\n                q4x=V1[0]; q4y=V1[1]; q4z=V1[2];//vertex1\\r\\n            }\\r\\n            else if(minDotIndex==5){// z- face\\r\\n                q1x=V1[3]; q1y=V1[4]; q1z=V1[5];//vertex2\\r\\n                //2x=V1[6]; q2y=V1[7]; q2z=V1[8];//vertex4 !!!\\r\\n                q2x=V2[9]; q2y=V2[10]; q2z=V2[11];//vertex4\\r\\n                q3x=V1[21]; q3y=V1[22]; q3z=V1[23];//vertex8\\r\\n                q4x=V1[15]; q4y=V1[16]; q4z=V1[17];//vertex6\\r\\n            }\\r\\n\\r\\n        }else{\\r\\n            dot=a4x*nx+a4y*ny+a4z*nz;\\r\\n            if(dot<minDot){\\r\\n                minDot=dot;\\r\\n                minDotIndex=0;\\r\\n            }\\r\\n            if(-dot<minDot){\\r\\n                minDot=-dot;\\r\\n                minDotIndex=1;\\r\\n            }\\r\\n            dot=a5x*nx+a5y*ny+a5z*nz;\\r\\n            if(dot<minDot){\\r\\n                minDot=dot;\\r\\n                minDotIndex=2;\\r\\n            }\\r\\n            if(-dot<minDot){\\r\\n                minDot=-dot;\\r\\n                minDotIndex=3;\\r\\n            }\\r\\n            dot=a6x*nx+a6y*ny+a6z*nz;\\r\\n            if(dot<minDot){\\r\\n                minDot=dot;\\r\\n                minDotIndex=4;\\r\\n            }\\r\\n            if(-dot<minDot){\\r\\n                minDot=-dot;\\r\\n                minDotIndex=5;\\r\\n            }\\r\\n\\r\\n            //______________________________________________________\\r\\n\\r\\n            if(minDotIndex==0){// x+ face\\r\\n                q1x=V2[0]; q1y=V2[1]; q1z=V2[2];//vertex1\\r\\n                q2x=V2[6]; q2y=V2[7]; q2z=V2[8];//vertex3\\r\\n                q3x=V2[9]; q3y=V2[10]; q3z=V2[11];//vertex4\\r\\n                q4x=V2[3]; q4y=V2[4]; q4z=V2[5];//vertex2\\r\\n            }\\r\\n            else if(minDotIndex==1){// x- face\\r\\n                q1x=V2[15]; q1y=V2[16]; q1z=V2[17];//vertex6\\r\\n                q2x=V2[21]; q2y=V2[22]; q2z=V2[23]; //vertex8\\r\\n                q3x=V2[18]; q3y=V2[19]; q3z=V2[20];//vertex7\\r\\n                q4x=V2[12]; q4y=V2[13]; q4z=V2[14];//vertex5\\r\\n            }\\r\\n            else if(minDotIndex==2){// y+ face\\r\\n                q1x=V2[12]; q1y=V2[13]; q1z=V2[14];//vertex5\\r\\n                q2x=V2[0]; q2y=V2[1]; q2z=V2[2];//vertex1\\r\\n                q3x=V2[3]; q3y=V2[4]; q3z=V2[5];//vertex2\\r\\n                q4x=V2[15]; q4y=V2[16]; q4z=V2[17];//vertex6\\r\\n            }\\r\\n            else if(minDotIndex==3){// y- face\\r\\n                q1x=V2[21]; q1y=V2[22]; q1z=V2[23];//vertex8\\r\\n                q2x=V2[9]; q2y=V2[10]; q2z=V2[11];//vertex4\\r\\n                q3x=V2[6]; q3y=V2[7]; q3z=V2[8];//vertex3\\r\\n                q4x=V2[18]; q4y=V2[19]; q4z=V2[20];//vertex7\\r\\n            }\\r\\n            else if(minDotIndex==4){// z+ face\\r\\n                q1x=V2[12]; q1y=V2[13]; q1z=V2[14];//vertex5\\r\\n                q2x=V2[18]; q2y=V2[19]; q2z=V2[20];//vertex7\\r\\n                q3x=V2[6]; q3y=V2[7]; q3z=V2[8];//vertex3\\r\\n                q4x=V2[0]; q4y=V2[1]; q4z=V2[2];//vertex1\\r\\n            }\\r\\n            else if(minDotIndex==5){// z- face\\r\\n                q1x=V2[3]; q1y=V2[4]; q1z=V2[5];//vertex2\\r\\n                q2x=V2[9]; q2y=V2[10]; q2z=V2[11];//vertex4\\r\\n                q3x=V2[21]; q3y=V2[22]; q3z=V2[23];//vertex8\\r\\n                q4x=V2[15]; q4y=V2[16]; q4z=V2[17];//vertex6\\r\\n            }\\r\\n      \\r\\n        }\\r\\n        // clip vertices\\r\\n        var numClipVertices;\\r\\n        var numAddedClipVertices;\\r\\n        var index;\\r\\n        var x1;\\r\\n        var y1;\\r\\n        var z1;\\r\\n        var x2;\\r\\n        var y2;\\r\\n        var z2;\\r\\n        this.clipVertices1[0]=q1x;\\r\\n        this.clipVertices1[1]=q1y;\\r\\n        this.clipVertices1[2]=q1z;\\r\\n        this.clipVertices1[3]=q2x;\\r\\n        this.clipVertices1[4]=q2y;\\r\\n        this.clipVertices1[5]=q2z;\\r\\n        this.clipVertices1[6]=q3x;\\r\\n        this.clipVertices1[7]=q3y;\\r\\n        this.clipVertices1[8]=q3z;\\r\\n        this.clipVertices1[9]=q4x;\\r\\n        this.clipVertices1[10]=q4y;\\r\\n        this.clipVertices1[11]=q4z;\\r\\n        numAddedClipVertices=0;\\r\\n        x1=this.clipVertices1[9];\\r\\n        y1=this.clipVertices1[10];\\r\\n        z1=this.clipVertices1[11];\\r\\n        dot1=(x1-cx-s1x)*n1x+(y1-cy-s1y)*n1y+(z1-cz-s1z)*n1z;\\r\\n\\r\\n        //var i = 4;\\r\\n        //while(i--){\\r\\n        for(var i=0;i<4;i++){\\r\\n            index=i*3;\\r\\n            x2=this.clipVertices1[index];\\r\\n            y2=this.clipVertices1[index+1];\\r\\n            z2=this.clipVertices1[index+2];\\r\\n            dot2=(x2-cx-s1x)*n1x+(y2-cy-s1y)*n1y+(z2-cz-s1z)*n1z;\\r\\n            if(dot1>0){\\r\\n                if(dot2>0){\\r\\n                    index=numAddedClipVertices*3;\\r\\n                    numAddedClipVertices++;\\r\\n                    this.clipVertices2[index]=x2;\\r\\n                    this.clipVertices2[index+1]=y2;\\r\\n                    this.clipVertices2[index+2]=z2;\\r\\n                }else{\\r\\n                    index=numAddedClipVertices*3;\\r\\n                    numAddedClipVertices++;\\r\\n                    t=dot1/(dot1-dot2);\\r\\n                    this.clipVertices2[index]=x1+(x2-x1)*t;\\r\\n                    this.clipVertices2[index+1]=y1+(y2-y1)*t;\\r\\n                    this.clipVertices2[index+2]=z1+(z2-z1)*t;\\r\\n                }\\r\\n            }else{\\r\\n                if(dot2>0){\\r\\n                    index=numAddedClipVertices*3;\\r\\n                    numAddedClipVertices++;\\r\\n                    t=dot1/(dot1-dot2);\\r\\n                    this.clipVertices2[index]=x1+(x2-x1)*t;\\r\\n                    this.clipVertices2[index+1]=y1+(y2-y1)*t;\\r\\n                    this.clipVertices2[index+2]=z1+(z2-z1)*t;\\r\\n                    index=numAddedClipVertices*3;\\r\\n                    numAddedClipVertices++;\\r\\n                    this.clipVertices2[index]=x2;\\r\\n                    this.clipVertices2[index+1]=y2;\\r\\n                    this.clipVertices2[index+2]=z2;\\r\\n                }\\r\\n            }\\r\\n            x1=x2;\\r\\n            y1=y2;\\r\\n            z1=z2;\\r\\n            dot1=dot2;\\r\\n        }\\r\\n\\r\\n        numClipVertices=numAddedClipVertices;\\r\\n        if(numClipVertices==0)return;\\r\\n        numAddedClipVertices=0;\\r\\n        index=(numClipVertices-1)*3;\\r\\n        x1=this.clipVertices2[index];\\r\\n        y1=this.clipVertices2[index+1];\\r\\n        z1=this.clipVertices2[index+2];\\r\\n        dot1=(x1-cx-s2x)*n2x+(y1-cy-s2y)*n2y+(z1-cz-s2z)*n2z;\\r\\n\\r\\n        //i = numClipVertices;\\r\\n        //while(i--){\\r\\n        for(i=0;i<numClipVertices;i++){\\r\\n            index=i*3;\\r\\n            x2=this.clipVertices2[index];\\r\\n            y2=this.clipVertices2[index+1];\\r\\n            z2=this.clipVertices2[index+2];\\r\\n            dot2=(x2-cx-s2x)*n2x+(y2-cy-s2y)*n2y+(z2-cz-s2z)*n2z;\\r\\n            if(dot1>0){\\r\\n                if(dot2>0){\\r\\n                    index=numAddedClipVertices*3;\\r\\n                    numAddedClipVertices++;\\r\\n                    this.clipVertices1[index]=x2;\\r\\n                    this.clipVertices1[index+1]=y2;\\r\\n                    this.clipVertices1[index+2]=z2;\\r\\n                }else{\\r\\n                    index=numAddedClipVertices*3;\\r\\n                    numAddedClipVertices++;\\r\\n                    t=dot1/(dot1-dot2);\\r\\n                    this.clipVertices1[index]=x1+(x2-x1)*t;\\r\\n                    this.clipVertices1[index+1]=y1+(y2-y1)*t;\\r\\n                    this.clipVertices1[index+2]=z1+(z2-z1)*t;\\r\\n                }\\r\\n            }else{\\r\\n                if(dot2>0){\\r\\n                    index=numAddedClipVertices*3;\\r\\n                    numAddedClipVertices++;\\r\\n                    t=dot1/(dot1-dot2);\\r\\n                    this.clipVertices1[index]=x1+(x2-x1)*t;\\r\\n                    this.clipVertices1[index+1]=y1+(y2-y1)*t;\\r\\n                    this.clipVertices1[index+2]=z1+(z2-z1)*t;\\r\\n                    index=numAddedClipVertices*3;\\r\\n                    numAddedClipVertices++;\\r\\n                    this.clipVertices1[index]=x2;\\r\\n                    this.clipVertices1[index+1]=y2;\\r\\n                    this.clipVertices1[index+2]=z2;\\r\\n                }\\r\\n            }\\r\\n            x1=x2;\\r\\n            y1=y2;\\r\\n            z1=z2;\\r\\n            dot1=dot2;\\r\\n        }\\r\\n\\r\\n        numClipVertices=numAddedClipVertices;\\r\\n        if(numClipVertices==0)return;\\r\\n        numAddedClipVertices=0;\\r\\n        index=(numClipVertices-1)*3;\\r\\n        x1=this.clipVertices1[index];\\r\\n        y1=this.clipVertices1[index+1];\\r\\n        z1=this.clipVertices1[index+2];\\r\\n        dot1=(x1-cx+s1x)*-n1x+(y1-cy+s1y)*-n1y+(z1-cz+s1z)*-n1z;\\r\\n\\r\\n        //i = numClipVertices;\\r\\n        //while(i--){\\r\\n        for(i=0;i<numClipVertices;i++){\\r\\n            index=i*3;\\r\\n            x2=this.clipVertices1[index];\\r\\n            y2=this.clipVertices1[index+1];\\r\\n            z2=this.clipVertices1[index+2];\\r\\n            dot2=(x2-cx+s1x)*-n1x+(y2-cy+s1y)*-n1y+(z2-cz+s1z)*-n1z;\\r\\n            if(dot1>0){\\r\\n                if(dot2>0){\\r\\n                    index=numAddedClipVertices*3;\\r\\n                    numAddedClipVertices++;\\r\\n                    this.clipVertices2[index]=x2;\\r\\n                    this.clipVertices2[index+1]=y2;\\r\\n                    this.clipVertices2[index+2]=z2;\\r\\n                }else{\\r\\n                    index=numAddedClipVertices*3;\\r\\n                    numAddedClipVertices++;\\r\\n                    t=dot1/(dot1-dot2);\\r\\n                    this.clipVertices2[index]=x1+(x2-x1)*t;\\r\\n                    this.clipVertices2[index+1]=y1+(y2-y1)*t;\\r\\n                    this.clipVertices2[index+2]=z1+(z2-z1)*t;\\r\\n                }\\r\\n            }else{\\r\\n                if(dot2>0){\\r\\n                    index=numAddedClipVertices*3;\\r\\n                    numAddedClipVertices++;\\r\\n                    t=dot1/(dot1-dot2);\\r\\n                    this.clipVertices2[index]=x1+(x2-x1)*t;\\r\\n                    this.clipVertices2[index+1]=y1+(y2-y1)*t;\\r\\n                    this.clipVertices2[index+2]=z1+(z2-z1)*t;\\r\\n                    index=numAddedClipVertices*3;\\r\\n                    numAddedClipVertices++;\\r\\n                    this.clipVertices2[index]=x2;\\r\\n                    this.clipVertices2[index+1]=y2;\\r\\n                    this.clipVertices2[index+2]=z2;\\r\\n                }\\r\\n            }\\r\\n            x1=x2;\\r\\n            y1=y2;\\r\\n            z1=z2;\\r\\n            dot1=dot2;\\r\\n        }\\r\\n\\r\\n        numClipVertices=numAddedClipVertices;\\r\\n        if(numClipVertices==0)return;\\r\\n        numAddedClipVertices=0;\\r\\n        index=(numClipVertices-1)*3;\\r\\n        x1=this.clipVertices2[index];\\r\\n        y1=this.clipVertices2[index+1];\\r\\n        z1=this.clipVertices2[index+2];\\r\\n        dot1=(x1-cx+s2x)*-n2x+(y1-cy+s2y)*-n2y+(z1-cz+s2z)*-n2z;\\r\\n\\r\\n        //i = numClipVertices;\\r\\n        //while(i--){\\r\\n        for(i=0;i<numClipVertices;i++){\\r\\n            index=i*3;\\r\\n            x2=this.clipVertices2[index];\\r\\n            y2=this.clipVertices2[index+1];\\r\\n            z2=this.clipVertices2[index+2];\\r\\n            dot2=(x2-cx+s2x)*-n2x+(y2-cy+s2y)*-n2y+(z2-cz+s2z)*-n2z;\\r\\n            if(dot1>0){\\r\\n                if(dot2>0){\\r\\n                    index=numAddedClipVertices*3;\\r\\n                    numAddedClipVertices++;\\r\\n                    this.clipVertices1[index]=x2;\\r\\n                    this.clipVertices1[index+1]=y2;\\r\\n                    this.clipVertices1[index+2]=z2;\\r\\n                }else{\\r\\n                    index=numAddedClipVertices*3;\\r\\n                    numAddedClipVertices++;\\r\\n                    t=dot1/(dot1-dot2);\\r\\n                    this.clipVertices1[index]=x1+(x2-x1)*t;\\r\\n                    this.clipVertices1[index+1]=y1+(y2-y1)*t;\\r\\n                    this.clipVertices1[index+2]=z1+(z2-z1)*t;\\r\\n                }\\r\\n            }else{\\r\\n                if(dot2>0){\\r\\n                    index=numAddedClipVertices*3;\\r\\n                    numAddedClipVertices++;\\r\\n                    t=dot1/(dot1-dot2);\\r\\n                    this.clipVertices1[index]=x1+(x2-x1)*t;\\r\\n                    this.clipVertices1[index+1]=y1+(y2-y1)*t;\\r\\n                    this.clipVertices1[index+2]=z1+(z2-z1)*t;\\r\\n                    index=numAddedClipVertices*3;\\r\\n                    numAddedClipVertices++;\\r\\n                    this.clipVertices1[index]=x2;\\r\\n                    this.clipVertices1[index+1]=y2;\\r\\n                    this.clipVertices1[index+2]=z2;\\r\\n                }\\r\\n            }\\r\\n            x1=x2;\\r\\n            y1=y2;\\r\\n            z1=z2;\\r\\n            dot1=dot2;\\r\\n        }\\r\\n\\r\\n        numClipVertices=numAddedClipVertices;\\r\\n        if(swap){\\r\\n            var tb=b1;\\r\\n            b1=b2;\\r\\n            b2=tb;\\r\\n        }\\r\\n        if(numClipVertices==0)return;\\r\\n        var flipped=b1!=shape1;\\r\\n        if(numClipVertices>4){\\r\\n            x1=(q1x+q2x+q3x+q4x)*0.25;\\r\\n            y1=(q1y+q2y+q3y+q4y)*0.25;\\r\\n            z1=(q1z+q2z+q3z+q4z)*0.25;\\r\\n            n1x=q1x-x1;\\r\\n            n1y=q1y-y1;\\r\\n            n1z=q1z-z1;\\r\\n            n2x=q2x-x1;\\r\\n            n2y=q2y-y1;\\r\\n            n2z=q2z-z1;\\r\\n            var index1=0;\\r\\n            var index2=0;\\r\\n            var index3=0;\\r\\n            var index4=0;\\r\\n            var maxDot=-this.INF;\\r\\n            minDot=this.INF;\\r\\n\\r\\n            //i = numClipVertices;\\r\\n            //while(i--){\\r\\n            for(i=0;i<numClipVertices;i++){\\r\\n                this.used[i]=false;\\r\\n                index=i*3;\\r\\n                x1=this.clipVertices1[index];\\r\\n                y1=this.clipVertices1[index+1];\\r\\n                z1=this.clipVertices1[index+2];\\r\\n                dot=x1*n1x+y1*n1y+z1*n1z;\\r\\n                if(dot<minDot){\\r\\n                    minDot=dot;\\r\\n                    index1=i;\\r\\n                }\\r\\n                if(dot>maxDot){\\r\\n                    maxDot=dot;\\r\\n                    index3=i;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            this.used[index1]=true;\\r\\n            this.used[index3]=true;\\r\\n            maxDot=-this.INF;\\r\\n            minDot=this.INF;\\r\\n\\r\\n            //i = numClipVertices;\\r\\n            //while(i--){\\r\\n            for(i=0;i<numClipVertices;i++){\\r\\n                if(this.used[i])continue;\\r\\n                index=i*3;\\r\\n                x1=this.clipVertices1[index];\\r\\n                y1=this.clipVertices1[index+1];\\r\\n                z1=this.clipVertices1[index+2];\\r\\n                dot=x1*n2x+y1*n2y+z1*n2z;\\r\\n                if(dot<minDot){\\r\\n                    minDot=dot;\\r\\n                    index2=i;\\r\\n                }\\r\\n                if(dot>maxDot){\\r\\n                    maxDot=dot;\\r\\n                    index4=i;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            index=index1*3;\\r\\n            x1=this.clipVertices1[index];\\r\\n            y1=this.clipVertices1[index+1];\\r\\n            z1=this.clipVertices1[index+2];\\r\\n            dot=(x1-cx)*nx+(y1-cy)*ny+(z1-cz)*nz;\\r\\n            if(dot<0) manifold.addPoint(x1,y1,z1,nx,ny,nz,dot,flipped);\\r\\n            \\r\\n            index=index2*3;\\r\\n            x1=this.clipVertices1[index];\\r\\n            y1=this.clipVertices1[index+1];\\r\\n            z1=this.clipVertices1[index+2];\\r\\n            dot=(x1-cx)*nx+(y1-cy)*ny+(z1-cz)*nz;\\r\\n            if(dot<0) manifold.addPoint(x1,y1,z1,nx,ny,nz,dot,flipped);\\r\\n            \\r\\n            index=index3*3;\\r\\n            x1=this.clipVertices1[index];\\r\\n            y1=this.clipVertices1[index+1];\\r\\n            z1=this.clipVertices1[index+2];\\r\\n            dot=(x1-cx)*nx+(y1-cy)*ny+(z1-cz)*nz;\\r\\n            if(dot<0) manifold.addPoint(x1,y1,z1,nx,ny,nz,dot,flipped);\\r\\n            \\r\\n            index=index4*3;\\r\\n            x1=this.clipVertices1[index];\\r\\n            y1=this.clipVertices1[index+1];\\r\\n            z1=this.clipVertices1[index+2];\\r\\n            dot=(x1-cx)*nx+(y1-cy)*ny+(z1-cz)*nz;\\r\\n            if(dot<0) manifold.addPoint(x1,y1,z1,nx,ny,nz,dot,flipped);\\r\\n            \\r\\n        }else{\\r\\n            //i = numClipVertices;\\r\\n            //while(i--){\\r\\n            for(i=0;i<numClipVertices;i++){\\r\\n                index=i*3;\\r\\n                x1=this.clipVertices1[index];\\r\\n                y1=this.clipVertices1[index+1];\\r\\n                z1=this.clipVertices1[index+2];\\r\\n                dot=(x1-cx)*nx+(y1-cy)*ny+(z1-cz)*nz;\\r\\n                if(dot<0)manifold.addPoint(x1,y1,z1,nx,ny,nz,dot,flipped);\\r\\n            }\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n});\\n\\nfunction BoxCylinderCollisionDetector (flip){\\r\\n\\r\\n    CollisionDetector.call( this );\\r\\n    this.flip = flip;\\r\\n\\r\\n}\\r\\n\\r\\nBoxCylinderCollisionDetector.prototype = Object.assign( Object.create( CollisionDetector.prototype ), {\\r\\n\\r\\n    constructor: BoxCylinderCollisionDetector,\\r\\n\\r\\n    getSep: function ( c1, c2, sep, pos, dep ) {\\r\\n\\r\\n        var t1x;\\r\\n        var t1y;\\r\\n        var t1z;\\r\\n        var t2x;\\r\\n        var t2y;\\r\\n        var t2z;\\r\\n        var sup=new Vec3();\\r\\n        var len;\\r\\n        var p1x;\\r\\n        var p1y;\\r\\n        var p1z;\\r\\n        var p2x;\\r\\n        var p2y;\\r\\n        var p2z;\\r\\n        var v01x=c1.position.x;\\r\\n        var v01y=c1.position.y;\\r\\n        var v01z=c1.position.z;\\r\\n        var v02x=c2.position.x;\\r\\n        var v02y=c2.position.y;\\r\\n        var v02z=c2.position.z;\\r\\n        var v0x=v02x-v01x;\\r\\n        var v0y=v02y-v01y;\\r\\n        var v0z=v02z-v01z;\\r\\n        if(v0x*v0x+v0y*v0y+v0z*v0z==0)v0y=0.001;\\r\\n        var nx=-v0x;\\r\\n        var ny=-v0y;\\r\\n        var nz=-v0z;\\r\\n        this.supportPointB(c1,-nx,-ny,-nz,sup);\\r\\n        var v11x=sup.x;\\r\\n        var v11y=sup.y;\\r\\n        var v11z=sup.z;\\r\\n        this.supportPointC(c2,nx,ny,nz,sup);\\r\\n        var v12x=sup.x;\\r\\n        var v12y=sup.y;\\r\\n        var v12z=sup.z;\\r\\n        var v1x=v12x-v11x;\\r\\n        var v1y=v12y-v11y;\\r\\n        var v1z=v12z-v11z;\\r\\n        if(v1x*nx+v1y*ny+v1z*nz<=0){\\r\\n        return false;\\r\\n        }\\r\\n        nx=v1y*v0z-v1z*v0y;\\r\\n        ny=v1z*v0x-v1x*v0z;\\r\\n        nz=v1x*v0y-v1y*v0x;\\r\\n        if(nx*nx+ny*ny+nz*nz==0){\\r\\n        sep.set( v1x-v0x, v1y-v0y, v1z-v0z ).normalize();\\r\\n        pos.set( (v11x+v12x)*0.5, (v11y+v12y)*0.5, (v11z+v12z)*0.5 );\\r\\n        return true;\\r\\n        }\\r\\n        this.supportPointB(c1,-nx,-ny,-nz,sup);\\r\\n        var v21x=sup.x;\\r\\n        var v21y=sup.y;\\r\\n        var v21z=sup.z;\\r\\n        this.supportPointC(c2,nx,ny,nz,sup);\\r\\n        var v22x=sup.x;\\r\\n        var v22y=sup.y;\\r\\n        var v22z=sup.z;\\r\\n        var v2x=v22x-v21x;\\r\\n        var v2y=v22y-v21y;\\r\\n        var v2z=v22z-v21z;\\r\\n        if(v2x*nx+v2y*ny+v2z*nz<=0){\\r\\n        return false;\\r\\n        }\\r\\n        t1x=v1x-v0x;\\r\\n        t1y=v1y-v0y;\\r\\n        t1z=v1z-v0z;\\r\\n        t2x=v2x-v0x;\\r\\n        t2y=v2y-v0y;\\r\\n        t2z=v2z-v0z;\\r\\n        nx=t1y*t2z-t1z*t2y;\\r\\n        ny=t1z*t2x-t1x*t2z;\\r\\n        nz=t1x*t2y-t1y*t2x;\\r\\n        if(nx*v0x+ny*v0y+nz*v0z>0){\\r\\n        t1x=v1x;\\r\\n        t1y=v1y;\\r\\n        t1z=v1z;\\r\\n        v1x=v2x;\\r\\n        v1y=v2y;\\r\\n        v1z=v2z;\\r\\n        v2x=t1x;\\r\\n        v2y=t1y;\\r\\n        v2z=t1z;\\r\\n        t1x=v11x;\\r\\n        t1y=v11y;\\r\\n        t1z=v11z;\\r\\n        v11x=v21x;\\r\\n        v11y=v21y;\\r\\n        v11z=v21z;\\r\\n        v21x=t1x;\\r\\n        v21y=t1y;\\r\\n        v21z=t1z;\\r\\n        t1x=v12x;\\r\\n        t1y=v12y;\\r\\n        t1z=v12z;\\r\\n        v12x=v22x;\\r\\n        v12y=v22y;\\r\\n        v12z=v22z;\\r\\n        v22x=t1x;\\r\\n        v22y=t1y;\\r\\n        v22z=t1z;\\r\\n        nx=-nx;\\r\\n        ny=-ny;\\r\\n        nz=-nz;\\r\\n        }\\r\\n        var iterations=0;\\r\\n        while(true){\\r\\n        if(++iterations>100){\\r\\n        return false;\\r\\n        }\\r\\n        this.supportPointB(c1,-nx,-ny,-nz,sup);\\r\\n        var v31x=sup.x;\\r\\n        var v31y=sup.y;\\r\\n        var v31z=sup.z;\\r\\n        this.supportPointC(c2,nx,ny,nz,sup);\\r\\n        var v32x=sup.x;\\r\\n        var v32y=sup.y;\\r\\n        var v32z=sup.z;\\r\\n        var v3x=v32x-v31x;\\r\\n        var v3y=v32y-v31y;\\r\\n        var v3z=v32z-v31z;\\r\\n        if(v3x*nx+v3y*ny+v3z*nz<=0){\\r\\n        return false;\\r\\n        }\\r\\n        if((v1y*v3z-v1z*v3y)*v0x+(v1z*v3x-v1x*v3z)*v0y+(v1x*v3y-v1y*v3x)*v0z<0){\\r\\n        v2x=v3x;\\r\\n        v2y=v3y;\\r\\n        v2z=v3z;\\r\\n        v21x=v31x;\\r\\n        v21y=v31y;\\r\\n        v21z=v31z;\\r\\n        v22x=v32x;\\r\\n        v22y=v32y;\\r\\n        v22z=v32z;\\r\\n        t1x=v1x-v0x;\\r\\n        t1y=v1y-v0y;\\r\\n        t1z=v1z-v0z;\\r\\n        t2x=v3x-v0x;\\r\\n        t2y=v3y-v0y;\\r\\n        t2z=v3z-v0z;\\r\\n        nx=t1y*t2z-t1z*t2y;\\r\\n        ny=t1z*t2x-t1x*t2z;\\r\\n        nz=t1x*t2y-t1y*t2x;\\r\\n        continue;\\r\\n        }\\r\\n        if((v3y*v2z-v3z*v2y)*v0x+(v3z*v2x-v3x*v2z)*v0y+(v3x*v2y-v3y*v2x)*v0z<0){\\r\\n        v1x=v3x;\\r\\n        v1y=v3y;\\r\\n        v1z=v3z;\\r\\n        v11x=v31x;\\r\\n        v11y=v31y;\\r\\n        v11z=v31z;\\r\\n        v12x=v32x;\\r\\n        v12y=v32y;\\r\\n        v12z=v32z;\\r\\n        t1x=v3x-v0x;\\r\\n        t1y=v3y-v0y;\\r\\n        t1z=v3z-v0z;\\r\\n        t2x=v2x-v0x;\\r\\n        t2y=v2y-v0y;\\r\\n        t2z=v2z-v0z;\\r\\n        nx=t1y*t2z-t1z*t2y;\\r\\n        ny=t1z*t2x-t1x*t2z;\\r\\n        nz=t1x*t2y-t1y*t2x;\\r\\n        continue;\\r\\n        }\\r\\n        var hit=false;\\r\\n        while(true){\\r\\n        t1x=v2x-v1x;\\r\\n        t1y=v2y-v1y;\\r\\n        t1z=v2z-v1z;\\r\\n        t2x=v3x-v1x;\\r\\n        t2y=v3y-v1y;\\r\\n        t2z=v3z-v1z;\\r\\n        nx=t1y*t2z-t1z*t2y;\\r\\n        ny=t1z*t2x-t1x*t2z;\\r\\n        nz=t1x*t2y-t1y*t2x;\\r\\n        len=1/_Math.sqrt(nx*nx+ny*ny+nz*nz);\\r\\n        nx*=len;\\r\\n        ny*=len;\\r\\n        nz*=len;\\r\\n        if(nx*v1x+ny*v1y+nz*v1z>=0&&!hit){\\r\\n        var b0=(v1y*v2z-v1z*v2y)*v3x+(v1z*v2x-v1x*v2z)*v3y+(v1x*v2y-v1y*v2x)*v3z;\\r\\n        var b1=(v3y*v2z-v3z*v2y)*v0x+(v3z*v2x-v3x*v2z)*v0y+(v3x*v2y-v3y*v2x)*v0z;\\r\\n        var b2=(v0y*v1z-v0z*v1y)*v3x+(v0z*v1x-v0x*v1z)*v3y+(v0x*v1y-v0y*v1x)*v3z;\\r\\n        var b3=(v2y*v1z-v2z*v1y)*v0x+(v2z*v1x-v2x*v1z)*v0y+(v2x*v1y-v2y*v1x)*v0z;\\r\\n        var sum=b0+b1+b2+b3;\\r\\n        if(sum<=0){\\r\\n        b0=0;\\r\\n        b1=(v2y*v3z-v2z*v3y)*nx+(v2z*v3x-v2x*v3z)*ny+(v2x*v3y-v2y*v3x)*nz;\\r\\n        b2=(v3y*v2z-v3z*v2y)*nx+(v3z*v2x-v3x*v2z)*ny+(v3x*v2y-v3y*v2x)*nz;\\r\\n        b3=(v1y*v2z-v1z*v2y)*nx+(v1z*v2x-v1x*v2z)*ny+(v1x*v2y-v1y*v2x)*nz;\\r\\n        sum=b1+b2+b3;\\r\\n        }\\r\\n        var inv=1/sum;\\r\\n        p1x=(v01x*b0+v11x*b1+v21x*b2+v31x*b3)*inv;\\r\\n        p1y=(v01y*b0+v11y*b1+v21y*b2+v31y*b3)*inv;\\r\\n        p1z=(v01z*b0+v11z*b1+v21z*b2+v31z*b3)*inv;\\r\\n        p2x=(v02x*b0+v12x*b1+v22x*b2+v32x*b3)*inv;\\r\\n        p2y=(v02y*b0+v12y*b1+v22y*b2+v32y*b3)*inv;\\r\\n        p2z=(v02z*b0+v12z*b1+v22z*b2+v32z*b3)*inv;\\r\\n        hit=true;\\r\\n        }\\r\\n        this.supportPointB(c1,-nx,-ny,-nz,sup);\\r\\n        var v41x=sup.x;\\r\\n        var v41y=sup.y;\\r\\n        var v41z=sup.z;\\r\\n        this.supportPointC(c2,nx,ny,nz,sup);\\r\\n        var v42x=sup.x;\\r\\n        var v42y=sup.y;\\r\\n        var v42z=sup.z;\\r\\n        var v4x=v42x-v41x;\\r\\n        var v4y=v42y-v41y;\\r\\n        var v4z=v42z-v41z;\\r\\n        var separation=-(v4x*nx+v4y*ny+v4z*nz);\\r\\n        if((v4x-v3x)*nx+(v4y-v3y)*ny+(v4z-v3z)*nz<=0.01||separation>=0){\\r\\n        if(hit){\\r\\n        sep.set( -nx, -ny, -nz );\\r\\n        pos.set( (p1x+p2x)*0.5, (p1y+p2y)*0.5, (p1z+p2z)*0.5 );\\r\\n        dep.x=separation;\\r\\n        return true;\\r\\n        }\\r\\n        return false;\\r\\n        }\\r\\n        if(\\r\\n        (v4y*v1z-v4z*v1y)*v0x+\\r\\n        (v4z*v1x-v4x*v1z)*v0y+\\r\\n        (v4x*v1y-v4y*v1x)*v0z<0\\r\\n        ){\\r\\n        if(\\r\\n        (v4y*v2z-v4z*v2y)*v0x+\\r\\n        (v4z*v2x-v4x*v2z)*v0y+\\r\\n        (v4x*v2y-v4y*v2x)*v0z<0\\r\\n        ){\\r\\n        v1x=v4x;\\r\\n        v1y=v4y;\\r\\n        v1z=v4z;\\r\\n        v11x=v41x;\\r\\n        v11y=v41y;\\r\\n        v11z=v41z;\\r\\n        v12x=v42x;\\r\\n        v12y=v42y;\\r\\n        v12z=v42z;\\r\\n        }else{\\r\\n        v3x=v4x;\\r\\n        v3y=v4y;\\r\\n        v3z=v4z;\\r\\n        v31x=v41x;\\r\\n        v31y=v41y;\\r\\n        v31z=v41z;\\r\\n        v32x=v42x;\\r\\n        v32y=v42y;\\r\\n        v32z=v42z;\\r\\n        }\\r\\n        }else{\\r\\n        if(\\r\\n        (v4y*v3z-v4z*v3y)*v0x+\\r\\n        (v4z*v3x-v4x*v3z)*v0y+\\r\\n        (v4x*v3y-v4y*v3x)*v0z<0\\r\\n        ){\\r\\n        v2x=v4x;\\r\\n        v2y=v4y;\\r\\n        v2z=v4z;\\r\\n        v21x=v41x;\\r\\n        v21y=v41y;\\r\\n        v21z=v41z;\\r\\n        v22x=v42x;\\r\\n        v22y=v42y;\\r\\n        v22z=v42z;\\r\\n        }else{\\r\\n        v1x=v4x;\\r\\n        v1y=v4y;\\r\\n        v1z=v4z;\\r\\n        v11x=v41x;\\r\\n        v11y=v41y;\\r\\n        v11z=v41z;\\r\\n        v12x=v42x;\\r\\n        v12y=v42y;\\r\\n        v12z=v42z;\\r\\n    }\\r\\n    }\\r\\n    }\\r\\n    }\\r\\n    //return false;\\r\\n    },\\r\\n\\r\\n    supportPointB: function( c, dx, dy, dz, out ) {\\r\\n\\r\\n        var rot=c.rotation.elements;\\r\\n        var ldx=rot[0]*dx+rot[3]*dy+rot[6]*dz;\\r\\n        var ldy=rot[1]*dx+rot[4]*dy+rot[7]*dz;\\r\\n        var ldz=rot[2]*dx+rot[5]*dy+rot[8]*dz;\\r\\n        var w=c.halfWidth;\\r\\n        var h=c.halfHeight;\\r\\n        var d=c.halfDepth;\\r\\n        var ox;\\r\\n        var oy;\\r\\n        var oz;\\r\\n        if(ldx<0)ox=-w;\\r\\n        else ox=w;\\r\\n        if(ldy<0)oy=-h;\\r\\n        else oy=h;\\r\\n        if(ldz<0)oz=-d;\\r\\n        else oz=d;\\r\\n        ldx=rot[0]*ox+rot[1]*oy+rot[2]*oz+c.position.x;\\r\\n        ldy=rot[3]*ox+rot[4]*oy+rot[5]*oz+c.position.y;\\r\\n        ldz=rot[6]*ox+rot[7]*oy+rot[8]*oz+c.position.z;\\r\\n        out.set( ldx, ldy, ldz );\\r\\n\\r\\n    },\\r\\n\\r\\n    supportPointC: function ( c, dx, dy, dz, out ) {\\r\\n\\r\\n        var rot=c.rotation.elements;\\r\\n        var ldx=rot[0]*dx+rot[3]*dy+rot[6]*dz;\\r\\n        var ldy=rot[1]*dx+rot[4]*dy+rot[7]*dz;\\r\\n        var ldz=rot[2]*dx+rot[5]*dy+rot[8]*dz;\\r\\n        var radx=ldx;\\r\\n        var radz=ldz;\\r\\n        var len=radx*radx+radz*radz;\\r\\n        var rad=c.radius;\\r\\n        var hh=c.halfHeight;\\r\\n        var ox;\\r\\n        var oy;\\r\\n        var oz;\\r\\n        if(len==0){\\r\\n        if(ldy<0){\\r\\n        ox=rad;\\r\\n        oy=-hh;\\r\\n        oz=0;\\r\\n        }else{\\r\\n        ox=rad;\\r\\n        oy=hh;\\r\\n        oz=0;\\r\\n        }\\r\\n        }else{\\r\\n        len=c.radius/_Math.sqrt(len);\\r\\n        if(ldy<0){\\r\\n        ox=radx*len;\\r\\n        oy=-hh;\\r\\n        oz=radz*len;\\r\\n        }else{\\r\\n        ox=radx*len;\\r\\n        oy=hh;\\r\\n        oz=radz*len;\\r\\n        }\\r\\n        }\\r\\n        ldx=rot[0]*ox+rot[1]*oy+rot[2]*oz+c.position.x;\\r\\n        ldy=rot[3]*ox+rot[4]*oy+rot[5]*oz+c.position.y;\\r\\n        ldz=rot[6]*ox+rot[7]*oy+rot[8]*oz+c.position.z;\\r\\n        out.set( ldx, ldy, ldz );\\r\\n\\r\\n    },\\r\\n\\r\\n    detectCollision: function( shape1, shape2, manifold ) {\\r\\n\\r\\n        var b;\\r\\n        var c;\\r\\n        if(this.flip){\\r\\n        b=shape2;\\r\\n        c=shape1;\\r\\n        }else{\\r\\n        b=shape1;\\r\\n        c=shape2;\\r\\n        }\\r\\n        var sep=new Vec3();\\r\\n        var pos=new Vec3();\\r\\n        var dep=new Vec3();\\r\\n\\r\\n        if(!this.getSep(b,c,sep,pos,dep))return;\\r\\n        var pbx=b.position.x;\\r\\n        var pby=b.position.y;\\r\\n        var pbz=b.position.z;\\r\\n        var pcx=c.position.x;\\r\\n        var pcy=c.position.y;\\r\\n        var pcz=c.position.z;\\r\\n        var bw=b.halfWidth;\\r\\n        var bh=b.halfHeight;\\r\\n        var bd=b.halfDepth;\\r\\n        var ch=c.halfHeight;\\r\\n        var r=c.radius;\\r\\n\\r\\n        var D = b.dimentions;\\r\\n\\r\\n        var nwx=D[0];//b.normalDirectionWidth.x;\\r\\n        var nwy=D[1];//b.normalDirectionWidth.y;\\r\\n        var nwz=D[2];//b.normalDirectionWidth.z;\\r\\n        var nhx=D[3];//b.normalDirectionHeight.x;\\r\\n        var nhy=D[4];//b.normalDirectionHeight.y;\\r\\n        var nhz=D[5];//b.normalDirectionHeight.z;\\r\\n        var ndx=D[6];//b.normalDirectionDepth.x;\\r\\n        var ndy=D[7];//b.normalDirectionDepth.y;\\r\\n        var ndz=D[8];//b.normalDirectionDepth.z;\\r\\n\\r\\n        var dwx=D[9];//b.halfDirectionWidth.x;\\r\\n        var dwy=D[10];//b.halfDirectionWidth.y;\\r\\n        var dwz=D[11];//b.halfDirectionWidth.z;\\r\\n        var dhx=D[12];//b.halfDirectionHeight.x;\\r\\n        var dhy=D[13];//b.halfDirectionHeight.y;\\r\\n        var dhz=D[14];//b.halfDirectionHeight.z;\\r\\n        var ddx=D[15];//b.halfDirectionDepth.x;\\r\\n        var ddy=D[16];//b.halfDirectionDepth.y;\\r\\n        var ddz=D[17];//b.halfDirectionDepth.z;\\r\\n\\r\\n        var ncx=c.normalDirection.x;\\r\\n        var ncy=c.normalDirection.y;\\r\\n        var ncz=c.normalDirection.z;\\r\\n        var dcx=c.halfDirection.x;\\r\\n        var dcy=c.halfDirection.y;\\r\\n        var dcz=c.halfDirection.z;\\r\\n        var nx=sep.x;\\r\\n        var ny=sep.y;\\r\\n        var nz=sep.z;\\r\\n        var dotw=nx*nwx+ny*nwy+nz*nwz;\\r\\n        var doth=nx*nhx+ny*nhy+nz*nhz;\\r\\n        var dotd=nx*ndx+ny*ndy+nz*ndz;\\r\\n        var dotc=nx*ncx+ny*ncy+nz*ncz;\\r\\n        var right1=dotw>0;\\r\\n        var right2=doth>0;\\r\\n        var right3=dotd>0;\\r\\n        var right4=dotc>0;\\r\\n        if(!right1)dotw=-dotw;\\r\\n        if(!right2)doth=-doth;\\r\\n        if(!right3)dotd=-dotd;\\r\\n        if(!right4)dotc=-dotc;\\r\\n        var state=0;\\r\\n        if(dotc>0.999){\\r\\n        if(dotw>0.999){\\r\\n        if(dotw>dotc)state=1;\\r\\n        else state=4;\\r\\n        }else if(doth>0.999){\\r\\n        if(doth>dotc)state=2;\\r\\n        else state=4;\\r\\n        }else if(dotd>0.999){\\r\\n        if(dotd>dotc)state=3;\\r\\n        else state=4;\\r\\n        }else state=4;\\r\\n        }else{\\r\\n        if(dotw>0.999)state=1;\\r\\n        else if(doth>0.999)state=2;\\r\\n        else if(dotd>0.999)state=3;\\r\\n        }\\r\\n        var cbx;\\r\\n        var cby;\\r\\n        var cbz;\\r\\n        var ccx;\\r\\n        var ccy;\\r\\n        var ccz;\\r\\n        var r00;\\r\\n        var r01;\\r\\n        var r02;\\r\\n        var r10;\\r\\n        var r11;\\r\\n        var r12;\\r\\n        var r20;\\r\\n        var r21;\\r\\n        var r22;\\r\\n        var px;\\r\\n        var py;\\r\\n        var pz;\\r\\n        var pd;\\r\\n        var dot;\\r\\n        var len;\\r\\n        var tx;\\r\\n        var ty;\\r\\n        var tz;\\r\\n        var td;\\r\\n        var dx;\\r\\n        var dy;\\r\\n        var dz;\\r\\n        var d1x;\\r\\n        var d1y;\\r\\n        var d1z;\\r\\n        var d2x;\\r\\n        var d2y;\\r\\n        var d2z;\\r\\n        var sx;\\r\\n        var sy;\\r\\n        var sz;\\r\\n        var sd;\\r\\n        var ex;\\r\\n        var ey;\\r\\n        var ez;\\r\\n        var ed;\\r\\n        var dot1;\\r\\n        var dot2;\\r\\n        var t1;\\r\\n        var dir1x;\\r\\n        var dir1y;\\r\\n        var dir1z;\\r\\n        var dir2x;\\r\\n        var dir2y;\\r\\n        var dir2z;\\r\\n        var dir1l;\\r\\n        var dir2l;\\r\\n        if(state==0){\\r\\n        //manifold.addPoint(pos.x,pos.y,pos.z,nx,ny,nz,dep.x,b,c,0,0,false);\\r\\n        manifold.addPoint(pos.x,pos.y,pos.z,nx,ny,nz,dep.x,this.flip);\\r\\n        }else if(state==4){\\r\\n        if(right4){\\r\\n        ccx=pcx-dcx;\\r\\n        ccy=pcy-dcy;\\r\\n        ccz=pcz-dcz;\\r\\n        nx=-ncx;\\r\\n        ny=-ncy;\\r\\n        nz=-ncz;\\r\\n        }else{\\r\\n        ccx=pcx+dcx;\\r\\n        ccy=pcy+dcy;\\r\\n        ccz=pcz+dcz;\\r\\n        nx=ncx;\\r\\n        ny=ncy;\\r\\n        nz=ncz;\\r\\n        }\\r\\n        var v1x;\\r\\n        var v1y;\\r\\n        var v1z;\\r\\n        var v2x;\\r\\n        var v2y;\\r\\n        var v2z;\\r\\n        var v3x;\\r\\n        var v3y;\\r\\n        var v3z;\\r\\n        var v4x;\\r\\n        var v4y;\\r\\n        var v4z;\\r\\n        \\r\\n        dot=1;\\r\\n        state=0;\\r\\n        dot1=nwx*nx+nwy*ny+nwz*nz;\\r\\n        if(dot1<dot){\\r\\n        dot=dot1;\\r\\n        state=0;\\r\\n        }\\r\\n        if(-dot1<dot){\\r\\n        dot=-dot1;\\r\\n        state=1;\\r\\n        }\\r\\n        dot1=nhx*nx+nhy*ny+nhz*nz;\\r\\n        if(dot1<dot){\\r\\n        dot=dot1;\\r\\n        state=2;\\r\\n        }\\r\\n        if(-dot1<dot){\\r\\n        dot=-dot1;\\r\\n        state=3;\\r\\n        }\\r\\n        dot1=ndx*nx+ndy*ny+ndz*nz;\\r\\n        if(dot1<dot){\\r\\n        dot=dot1;\\r\\n        state=4;\\r\\n        }\\r\\n        if(-dot1<dot){\\r\\n        dot=-dot1;\\r\\n        state=5;\\r\\n        }\\r\\n        var v = b.elements;\\r\\n        switch(state){\\r\\n        case 0:\\r\\n        //v=b.vertex1;\\r\\n        v1x=v[0];//v.x;\\r\\n        v1y=v[1];//v.y;\\r\\n        v1z=v[2];//v.z;\\r\\n        //v=b.vertex3;\\r\\n        v2x=v[6];//v.x;\\r\\n        v2y=v[7];//v.y;\\r\\n        v2z=v[8];//v.z;\\r\\n        //v=b.vertex4;\\r\\n        v3x=v[9];//v.x;\\r\\n        v3y=v[10];//v.y;\\r\\n        v3z=v[11];//v.z;\\r\\n        //v=b.vertex2;\\r\\n        v4x=v[3];//v.x;\\r\\n        v4y=v[4];//v.y;\\r\\n        v4z=v[5];//v.z;\\r\\n        break;\\r\\n        case 1:\\r\\n        //v=b.vertex6;\\r\\n        v1x=v[15];//v.x;\\r\\n        v1y=v[16];//v.y;\\r\\n        v1z=v[17];//v.z;\\r\\n        //v=b.vertex8;\\r\\n        v2x=v[21];//v.x;\\r\\n        v2y=v[22];//v.y;\\r\\n        v2z=v[23];//v.z;\\r\\n        //v=b.vertex7;\\r\\n        v3x=v[18];//v.x;\\r\\n        v3y=v[19];//v.y;\\r\\n        v3z=v[20];//v.z;\\r\\n        //v=b.vertex5;\\r\\n        v4x=v[12];//v.x;\\r\\n        v4y=v[13];//v.y;\\r\\n        v4z=v[14];//v.z;\\r\\n        break;\\r\\n        case 2:\\r\\n        //v=b.vertex5;\\r\\n        v1x=v[12];//v.x;\\r\\n        v1y=v[13];//v.y;\\r\\n        v1z=v[14];//v.z;\\r\\n        //v=b.vertex1;\\r\\n        v2x=v[0];//v.x;\\r\\n        v2y=v[1];//v.y;\\r\\n        v2z=v[2];//v.z;\\r\\n        //v=b.vertex2;\\r\\n        v3x=v[3];//v.x;\\r\\n        v3y=v[4];//v.y;\\r\\n        v3z=v[5];//v.z;\\r\\n        //v=b.vertex6;\\r\\n        v4x=v[15];//v.x;\\r\\n        v4y=v[16];//v.y;\\r\\n        v4z=v[17];//v.z;\\r\\n        break;\\r\\n        case 3:\\r\\n        //v=b.vertex8;\\r\\n        v1x=v[21];//v.x;\\r\\n        v1y=v[22];//v.y;\\r\\n        v1z=v[23];//v.z;\\r\\n        //v=b.vertex4;\\r\\n        v2x=v[9];//v.x;\\r\\n        v2y=v[10];//v.y;\\r\\n        v2z=v[11];//v.z;\\r\\n        //v=b.vertex3;\\r\\n        v3x=v[6];//v.x;\\r\\n        v3y=v[7];//v.y;\\r\\n        v3z=v[8];//v.z;\\r\\n        //v=b.vertex7;\\r\\n        v4x=v[18];//v.x;\\r\\n        v4y=v[19];//v.y;\\r\\n        v4z=v[20];//v.z;\\r\\n        break;\\r\\n        case 4:\\r\\n        //v=b.vertex5;\\r\\n        v1x=v[12];//v.x;\\r\\n        v1y=v[13];//v.y;\\r\\n        v1z=v[14];//v.z;\\r\\n        //v=b.vertex7;\\r\\n        v2x=v[18];//v.x;\\r\\n        v2y=v[19];//v.y;\\r\\n        v2z=v[20];//v.z;\\r\\n        //v=b.vertex3;\\r\\n        v3x=v[6];//v.x;\\r\\n        v3y=v[7];//v.y;\\r\\n        v3z=v[8];//v.z;\\r\\n        //v=b.vertex1;\\r\\n        v4x=v[0];//v.x;\\r\\n        v4y=v[1];//v.y;\\r\\n        v4z=v[2];//v.z;\\r\\n        break;\\r\\n        case 5:\\r\\n        //v=b.vertex2;\\r\\n        v1x=v[3];//v.x;\\r\\n        v1y=v[4];//v.y;\\r\\n        v1z=v[5];//v.z;\\r\\n        //v=b.vertex4;\\r\\n        v2x=v[9];//v.x;\\r\\n        v2y=v[10];//v.y;\\r\\n        v2z=v[11];//v.z;\\r\\n        //v=b.vertex8;\\r\\n        v3x=v[21];//v.x;\\r\\n        v3y=v[22];//v.y;\\r\\n        v3z=v[23];//v.z;\\r\\n        //v=b.vertex6;\\r\\n        v4x=v[15];//v.x;\\r\\n        v4y=v[16];//v.y;\\r\\n        v4z=v[17];//v.z;\\r\\n        break;\\r\\n        }\\r\\n        pd=nx*(v1x-ccx)+ny*(v1y-ccy)+nz*(v1z-ccz);\\r\\n        if(pd<=0)manifold.addPoint(v1x,v1y,v1z,-nx,-ny,-nz,pd,this.flip);\\r\\n        pd=nx*(v2x-ccx)+ny*(v2y-ccy)+nz*(v2z-ccz);\\r\\n        if(pd<=0)manifold.addPoint(v2x,v2y,v2z,-nx,-ny,-nz,pd,this.flip);\\r\\n        pd=nx*(v3x-ccx)+ny*(v3y-ccy)+nz*(v3z-ccz);\\r\\n        if(pd<=0)manifold.addPoint(v3x,v3y,v3z,-nx,-ny,-nz,pd,this.flip);\\r\\n        pd=nx*(v4x-ccx)+ny*(v4y-ccy)+nz*(v4z-ccz);\\r\\n        if(pd<=0)manifold.addPoint(v4x,v4y,v4z,-nx,-ny,-nz,pd,this.flip);\\r\\n        }else{\\r\\n        switch(state){\\r\\n        case 1:\\r\\n        if(right1){\\r\\n        cbx=pbx+dwx;\\r\\n        cby=pby+dwy;\\r\\n        cbz=pbz+dwz;\\r\\n        nx=nwx;\\r\\n        ny=nwy;\\r\\n        nz=nwz;\\r\\n        }else{\\r\\n        cbx=pbx-dwx;\\r\\n        cby=pby-dwy;\\r\\n        cbz=pbz-dwz;\\r\\n        nx=-nwx;\\r\\n        ny=-nwy;\\r\\n        nz=-nwz;\\r\\n        }\\r\\n        dir1x=nhx;\\r\\n        dir1y=nhy;\\r\\n        dir1z=nhz;\\r\\n        dir1l=bh;\\r\\n        dir2x=ndx;\\r\\n        dir2y=ndy;\\r\\n        dir2z=ndz;\\r\\n        dir2l=bd;\\r\\n        break;\\r\\n        case 2:\\r\\n        if(right2){\\r\\n        cbx=pbx+dhx;\\r\\n        cby=pby+dhy;\\r\\n        cbz=pbz+dhz;\\r\\n        nx=nhx;\\r\\n        ny=nhy;\\r\\n        nz=nhz;\\r\\n        }else{\\r\\n        cbx=pbx-dhx;\\r\\n        cby=pby-dhy;\\r\\n        cbz=pbz-dhz;\\r\\n        nx=-nhx;\\r\\n        ny=-nhy;\\r\\n        nz=-nhz;\\r\\n        }\\r\\n        dir1x=nwx;\\r\\n        dir1y=nwy;\\r\\n        dir1z=nwz;\\r\\n        dir1l=bw;\\r\\n        dir2x=ndx;\\r\\n        dir2y=ndy;\\r\\n        dir2z=ndz;\\r\\n        dir2l=bd;\\r\\n        break;\\r\\n        case 3:\\r\\n        if(right3){\\r\\n        cbx=pbx+ddx;\\r\\n        cby=pby+ddy;\\r\\n        cbz=pbz+ddz;\\r\\n        nx=ndx;\\r\\n        ny=ndy;\\r\\n        nz=ndz;\\r\\n        }else{\\r\\n        cbx=pbx-ddx;\\r\\n        cby=pby-ddy;\\r\\n        cbz=pbz-ddz;\\r\\n        nx=-ndx;\\r\\n        ny=-ndy;\\r\\n        nz=-ndz;\\r\\n        }\\r\\n        dir1x=nwx;\\r\\n        dir1y=nwy;\\r\\n        dir1z=nwz;\\r\\n        dir1l=bw;\\r\\n        dir2x=nhx;\\r\\n        dir2y=nhy;\\r\\n        dir2z=nhz;\\r\\n        dir2l=bh;\\r\\n        break;\\r\\n        }\\r\\n        dot=nx*ncx+ny*ncy+nz*ncz;\\r\\n        if(dot<0)len=ch;\\r\\n        else len=-ch;\\r\\n        ccx=pcx+len*ncx;\\r\\n        ccy=pcy+len*ncy;\\r\\n        ccz=pcz+len*ncz;\\r\\n        if(dotc>=0.999999){\\r\\n        tx=-ny;\\r\\n        ty=nz;\\r\\n        tz=nx;\\r\\n        }else{\\r\\n        tx=nx;\\r\\n        ty=ny;\\r\\n        tz=nz;\\r\\n        }\\r\\n        len=tx*ncx+ty*ncy+tz*ncz;\\r\\n        dx=len*ncx-tx;\\r\\n        dy=len*ncy-ty;\\r\\n        dz=len*ncz-tz;\\r\\n        len=_Math.sqrt(dx*dx+dy*dy+dz*dz);\\r\\n        if(len==0)return;\\r\\n        len=r/len;\\r\\n        dx*=len;\\r\\n        dy*=len;\\r\\n        dz*=len;\\r\\n        tx=ccx+dx;\\r\\n        ty=ccy+dy;\\r\\n        tz=ccz+dz;\\r\\n        if(dot<-0.96||dot>0.96){\\r\\n        r00=ncx*ncx*1.5-0.5;\\r\\n        r01=ncx*ncy*1.5-ncz*0.866025403;\\r\\n        r02=ncx*ncz*1.5+ncy*0.866025403;\\r\\n        r10=ncy*ncx*1.5+ncz*0.866025403;\\r\\n        r11=ncy*ncy*1.5-0.5;\\r\\n        r12=ncy*ncz*1.5-ncx*0.866025403;\\r\\n        r20=ncz*ncx*1.5-ncy*0.866025403;\\r\\n        r21=ncz*ncy*1.5+ncx*0.866025403;\\r\\n        r22=ncz*ncz*1.5-0.5;\\r\\n        px=tx;\\r\\n        py=ty;\\r\\n        pz=tz;\\r\\n        pd=nx*(px-cbx)+ny*(py-cby)+nz*(pz-cbz);\\r\\n        tx=px-pd*nx-cbx;\\r\\n        ty=py-pd*ny-cby;\\r\\n        tz=pz-pd*nz-cbz;\\r\\n        sd=dir1x*tx+dir1y*ty+dir1z*tz;\\r\\n        ed=dir2x*tx+dir2y*ty+dir2z*tz;\\r\\n        if(sd<-dir1l)sd=-dir1l;\\r\\n        else if(sd>dir1l)sd=dir1l;\\r\\n        if(ed<-dir2l)ed=-dir2l;\\r\\n        else if(ed>dir2l)ed=dir2l;\\r\\n        tx=sd*dir1x+ed*dir2x;\\r\\n        ty=sd*dir1y+ed*dir2y;\\r\\n        tz=sd*dir1z+ed*dir2z;\\r\\n        px=cbx+tx;\\r\\n        py=cby+ty;\\r\\n        pz=cbz+tz;\\r\\n        manifold.addPoint(px,py,pz,nx,ny,nz,pd,this.flip);\\r\\n        px=dx*r00+dy*r01+dz*r02;\\r\\n        py=dx*r10+dy*r11+dz*r12;\\r\\n        pz=dx*r20+dy*r21+dz*r22;\\r\\n        px=(dx=px)+ccx;\\r\\n        py=(dy=py)+ccy;\\r\\n        pz=(dz=pz)+ccz;\\r\\n        pd=nx*(px-cbx)+ny*(py-cby)+nz*(pz-cbz);\\r\\n        if(pd<=0){\\r\\n        tx=px-pd*nx-cbx;\\r\\n        ty=py-pd*ny-cby;\\r\\n        tz=pz-pd*nz-cbz;\\r\\n        sd=dir1x*tx+dir1y*ty+dir1z*tz;\\r\\n        ed=dir2x*tx+dir2y*ty+dir2z*tz;\\r\\n        if(sd<-dir1l)sd=-dir1l;\\r\\n        else if(sd>dir1l)sd=dir1l;\\r\\n        if(ed<-dir2l)ed=-dir2l;\\r\\n        else if(ed>dir2l)ed=dir2l;\\r\\n        tx=sd*dir1x+ed*dir2x;\\r\\n        ty=sd*dir1y+ed*dir2y;\\r\\n        tz=sd*dir1z+ed*dir2z;\\r\\n        px=cbx+tx;\\r\\n        py=cby+ty;\\r\\n        pz=cbz+tz;\\r\\n        //manifold.addPoint(px,py,pz,nx,ny,nz,pd,b,c,2,0,false);\\r\\n        manifold.addPoint(px,py,pz,nx,ny,nz,pd,this.flip);\\r\\n        }\\r\\n        px=dx*r00+dy*r01+dz*r02;\\r\\n        py=dx*r10+dy*r11+dz*r12;\\r\\n        pz=dx*r20+dy*r21+dz*r22;\\r\\n        px=(dx=px)+ccx;\\r\\n        py=(dy=py)+ccy;\\r\\n        pz=(dz=pz)+ccz;\\r\\n        pd=nx*(px-cbx)+ny*(py-cby)+nz*(pz-cbz);\\r\\n        if(pd<=0){\\r\\n        tx=px-pd*nx-cbx;\\r\\n        ty=py-pd*ny-cby;\\r\\n        tz=pz-pd*nz-cbz;\\r\\n        sd=dir1x*tx+dir1y*ty+dir1z*tz;\\r\\n        ed=dir2x*tx+dir2y*ty+dir2z*tz;\\r\\n        if(sd<-dir1l)sd=-dir1l;\\r\\n        else if(sd>dir1l)sd=dir1l;\\r\\n        if(ed<-dir2l)ed=-dir2l;\\r\\n        else if(ed>dir2l)ed=dir2l;\\r\\n        tx=sd*dir1x+ed*dir2x;\\r\\n        ty=sd*dir1y+ed*dir2y;\\r\\n        tz=sd*dir1z+ed*dir2z;\\r\\n        px=cbx+tx;\\r\\n        py=cby+ty;\\r\\n        pz=cbz+tz;\\r\\n        //manifold.addPoint(px,py,pz,nx,ny,nz,pd,b,c,3,0,false);\\r\\n        manifold.addPoint(px,py,pz,nx,ny,nz,pd,this.flip);\\r\\n        }\\r\\n        }else{\\r\\n        sx=tx;\\r\\n        sy=ty;\\r\\n        sz=tz;\\r\\n        sd=nx*(sx-cbx)+ny*(sy-cby)+nz*(sz-cbz);\\r\\n        sx-=sd*nx;\\r\\n        sy-=sd*ny;\\r\\n        sz-=sd*nz;\\r\\n        if(dot>0){\\r\\n        ex=tx+dcx*2;\\r\\n        ey=ty+dcy*2;\\r\\n        ez=tz+dcz*2;\\r\\n        }else{\\r\\n        ex=tx-dcx*2;\\r\\n        ey=ty-dcy*2;\\r\\n        ez=tz-dcz*2;\\r\\n        }\\r\\n        ed=nx*(ex-cbx)+ny*(ey-cby)+nz*(ez-cbz);\\r\\n        ex-=ed*nx;\\r\\n        ey-=ed*ny;\\r\\n        ez-=ed*nz;\\r\\n        d1x=sx-cbx;\\r\\n        d1y=sy-cby;\\r\\n        d1z=sz-cbz;\\r\\n        d2x=ex-cbx;\\r\\n        d2y=ey-cby;\\r\\n        d2z=ez-cbz;\\r\\n        tx=ex-sx;\\r\\n        ty=ey-sy;\\r\\n        tz=ez-sz;\\r\\n        td=ed-sd;\\r\\n        dotw=d1x*dir1x+d1y*dir1y+d1z*dir1z;\\r\\n        doth=d2x*dir1x+d2y*dir1y+d2z*dir1z;\\r\\n        dot1=dotw-dir1l;\\r\\n        dot2=doth-dir1l;\\r\\n        if(dot1>0){\\r\\n        if(dot2>0)return;\\r\\n        t1=dot1/(dot1-dot2);\\r\\n        sx=sx+tx*t1;\\r\\n        sy=sy+ty*t1;\\r\\n        sz=sz+tz*t1;\\r\\n        sd=sd+td*t1;\\r\\n        d1x=sx-cbx;\\r\\n        d1y=sy-cby;\\r\\n        d1z=sz-cbz;\\r\\n        dotw=d1x*dir1x+d1y*dir1y+d1z*dir1z;\\r\\n        tx=ex-sx;\\r\\n        ty=ey-sy;\\r\\n        tz=ez-sz;\\r\\n        td=ed-sd;\\r\\n        }else if(dot2>0){\\r\\n        t1=dot1/(dot1-dot2);\\r\\n        ex=sx+tx*t1;\\r\\n        ey=sy+ty*t1;\\r\\n        ez=sz+tz*t1;\\r\\n        ed=sd+td*t1;\\r\\n        d2x=ex-cbx;\\r\\n        d2y=ey-cby;\\r\\n        d2z=ez-cbz;\\r\\n        doth=d2x*dir1x+d2y*dir1y+d2z*dir1z;\\r\\n        tx=ex-sx;\\r\\n        ty=ey-sy;\\r\\n        tz=ez-sz;\\r\\n        td=ed-sd;\\r\\n        }\\r\\n        dot1=dotw+dir1l;\\r\\n        dot2=doth+dir1l;\\r\\n        if(dot1<0){\\r\\n        if(dot2<0)return;\\r\\n        t1=dot1/(dot1-dot2);\\r\\n        sx=sx+tx*t1;\\r\\n        sy=sy+ty*t1;\\r\\n        sz=sz+tz*t1;\\r\\n        sd=sd+td*t1;\\r\\n        d1x=sx-cbx;\\r\\n        d1y=sy-cby;\\r\\n        d1z=sz-cbz;\\r\\n        tx=ex-sx;\\r\\n        ty=ey-sy;\\r\\n        tz=ez-sz;\\r\\n        td=ed-sd;\\r\\n        }else if(dot2<0){\\r\\n        t1=dot1/(dot1-dot2);\\r\\n        ex=sx+tx*t1;\\r\\n        ey=sy+ty*t1;\\r\\n        ez=sz+tz*t1;\\r\\n        ed=sd+td*t1;\\r\\n        d2x=ex-cbx;\\r\\n        d2y=ey-cby;\\r\\n        d2z=ez-cbz;\\r\\n        tx=ex-sx;\\r\\n        ty=ey-sy;\\r\\n        tz=ez-sz;\\r\\n        td=ed-sd;\\r\\n        }\\r\\n        dotw=d1x*dir2x+d1y*dir2y+d1z*dir2z;\\r\\n        doth=d2x*dir2x+d2y*dir2y+d2z*dir2z;\\r\\n        dot1=dotw-dir2l;\\r\\n        dot2=doth-dir2l;\\r\\n        if(dot1>0){\\r\\n        if(dot2>0)return;\\r\\n        t1=dot1/(dot1-dot2);\\r\\n        sx=sx+tx*t1;\\r\\n        sy=sy+ty*t1;\\r\\n        sz=sz+tz*t1;\\r\\n        sd=sd+td*t1;\\r\\n        d1x=sx-cbx;\\r\\n        d1y=sy-cby;\\r\\n        d1z=sz-cbz;\\r\\n        dotw=d1x*dir2x+d1y*dir2y+d1z*dir2z;\\r\\n        tx=ex-sx;\\r\\n        ty=ey-sy;\\r\\n        tz=ez-sz;\\r\\n        td=ed-sd;\\r\\n        }else if(dot2>0){\\r\\n        t1=dot1/(dot1-dot2);\\r\\n        ex=sx+tx*t1;\\r\\n        ey=sy+ty*t1;\\r\\n        ez=sz+tz*t1;\\r\\n        ed=sd+td*t1;\\r\\n        d2x=ex-cbx;\\r\\n        d2y=ey-cby;\\r\\n        d2z=ez-cbz;\\r\\n        doth=d2x*dir2x+d2y*dir2y+d2z*dir2z;\\r\\n        tx=ex-sx;\\r\\n        ty=ey-sy;\\r\\n        tz=ez-sz;\\r\\n        td=ed-sd;\\r\\n        }\\r\\n        dot1=dotw+dir2l;\\r\\n        dot2=doth+dir2l;\\r\\n        if(dot1<0){\\r\\n        if(dot2<0)return;\\r\\n        t1=dot1/(dot1-dot2);\\r\\n        sx=sx+tx*t1;\\r\\n        sy=sy+ty*t1;\\r\\n        sz=sz+tz*t1;\\r\\n        sd=sd+td*t1;\\r\\n        }else if(dot2<0){\\r\\n        t1=dot1/(dot1-dot2);\\r\\n        ex=sx+tx*t1;\\r\\n        ey=sy+ty*t1;\\r\\n        ez=sz+tz*t1;\\r\\n        ed=sd+td*t1;\\r\\n        }\\r\\n        if(sd<0){\\r\\n        //manifold.addPoint(sx,sy,sz,nx,ny,nz,sd,b,c,1,0,false);\\r\\n        manifold.addPoint(sx,sy,sz,nx,ny,nz,sd,this.flip);\\r\\n        }\\r\\n        if(ed<0){\\r\\n        //manifold.addPoint(ex,ey,ez,nx,ny,nz,ed,b,c,4,0,false);\\r\\n        manifold.addPoint(ex,ey,ez,nx,ny,nz,ed,this.flip);\\r\\n        }\\r\\n        }\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    });\\n\\nfunction CylinderCylinderCollisionDetector() {\\r\\n    \\r\\n    CollisionDetector.call( this );\\r\\n\\r\\n}\\r\\n\\r\\nCylinderCylinderCollisionDetector.prototype = Object.assign( Object.create( CollisionDetector.prototype ), {\\r\\n\\r\\n    constructor: CylinderCylinderCollisionDetector,\\r\\n\\r\\n\\r\\n    getSep: function ( c1, c2, sep, pos, dep ) {\\r\\n\\r\\n        var t1x;\\r\\n        var t1y;\\r\\n        var t1z;\\r\\n        var t2x;\\r\\n        var t2y;\\r\\n        var t2z;\\r\\n        var sup=new Vec3();\\r\\n        var len;\\r\\n        var p1x;\\r\\n        var p1y;\\r\\n        var p1z;\\r\\n        var p2x;\\r\\n        var p2y;\\r\\n        var p2z;\\r\\n        var v01x=c1.position.x;\\r\\n        var v01y=c1.position.y;\\r\\n        var v01z=c1.position.z;\\r\\n        var v02x=c2.position.x;\\r\\n        var v02y=c2.position.y;\\r\\n        var v02z=c2.position.z;\\r\\n        var v0x=v02x-v01x;\\r\\n        var v0y=v02y-v01y;\\r\\n        var v0z=v02z-v01z;\\r\\n        if(v0x*v0x+v0y*v0y+v0z*v0z==0)v0y=0.001;\\r\\n        var nx=-v0x;\\r\\n        var ny=-v0y;\\r\\n        var nz=-v0z;\\r\\n        this.supportPoint(c1,-nx,-ny,-nz,sup);\\r\\n        var v11x=sup.x;\\r\\n        var v11y=sup.y;\\r\\n        var v11z=sup.z;\\r\\n        this.supportPoint(c2,nx,ny,nz,sup);\\r\\n        var v12x=sup.x;\\r\\n        var v12y=sup.y;\\r\\n        var v12z=sup.z;\\r\\n        var v1x=v12x-v11x;\\r\\n        var v1y=v12y-v11y;\\r\\n        var v1z=v12z-v11z;\\r\\n        if(v1x*nx+v1y*ny+v1z*nz<=0){\\r\\n        return false;\\r\\n        }\\r\\n        nx=v1y*v0z-v1z*v0y;\\r\\n        ny=v1z*v0x-v1x*v0z;\\r\\n        nz=v1x*v0y-v1y*v0x;\\r\\n        if(nx*nx+ny*ny+nz*nz==0){\\r\\n        sep.set( v1x-v0x, v1y-v0y, v1z-v0z ).normalize();\\r\\n        pos.set( (v11x+v12x)*0.5, (v11y+v12y)*0.5, (v11z+v12z)*0.5 );\\r\\n        return true;\\r\\n        }\\r\\n        this.supportPoint(c1,-nx,-ny,-nz,sup);\\r\\n        var v21x=sup.x;\\r\\n        var v21y=sup.y;\\r\\n        var v21z=sup.z;\\r\\n        this.supportPoint(c2,nx,ny,nz,sup);\\r\\n        var v22x=sup.x;\\r\\n        var v22y=sup.y;\\r\\n        var v22z=sup.z;\\r\\n        var v2x=v22x-v21x;\\r\\n        var v2y=v22y-v21y;\\r\\n        var v2z=v22z-v21z;\\r\\n        if(v2x*nx+v2y*ny+v2z*nz<=0){\\r\\n        return false;\\r\\n        }\\r\\n        t1x=v1x-v0x;\\r\\n        t1y=v1y-v0y;\\r\\n        t1z=v1z-v0z;\\r\\n        t2x=v2x-v0x;\\r\\n        t2y=v2y-v0y;\\r\\n        t2z=v2z-v0z;\\r\\n        nx=t1y*t2z-t1z*t2y;\\r\\n        ny=t1z*t2x-t1x*t2z;\\r\\n        nz=t1x*t2y-t1y*t2x;\\r\\n        if(nx*v0x+ny*v0y+nz*v0z>0){\\r\\n        t1x=v1x;\\r\\n        t1y=v1y;\\r\\n        t1z=v1z;\\r\\n        v1x=v2x;\\r\\n        v1y=v2y;\\r\\n        v1z=v2z;\\r\\n        v2x=t1x;\\r\\n        v2y=t1y;\\r\\n        v2z=t1z;\\r\\n        t1x=v11x;\\r\\n        t1y=v11y;\\r\\n        t1z=v11z;\\r\\n        v11x=v21x;\\r\\n        v11y=v21y;\\r\\n        v11z=v21z;\\r\\n        v21x=t1x;\\r\\n        v21y=t1y;\\r\\n        v21z=t1z;\\r\\n        t1x=v12x;\\r\\n        t1y=v12y;\\r\\n        t1z=v12z;\\r\\n        v12x=v22x;\\r\\n        v12y=v22y;\\r\\n        v12z=v22z;\\r\\n        v22x=t1x;\\r\\n        v22y=t1y;\\r\\n        v22z=t1z;\\r\\n        nx=-nx;\\r\\n        ny=-ny;\\r\\n        nz=-nz;\\r\\n        }\\r\\n        var iterations=0;\\r\\n        while(true){\\r\\n        if(++iterations>100){\\r\\n        return false;\\r\\n        }\\r\\n        this.supportPoint(c1,-nx,-ny,-nz,sup);\\r\\n        var v31x=sup.x;\\r\\n        var v31y=sup.y;\\r\\n        var v31z=sup.z;\\r\\n        this.supportPoint(c2,nx,ny,nz,sup);\\r\\n        var v32x=sup.x;\\r\\n        var v32y=sup.y;\\r\\n        var v32z=sup.z;\\r\\n        var v3x=v32x-v31x;\\r\\n        var v3y=v32y-v31y;\\r\\n        var v3z=v32z-v31z;\\r\\n        if(v3x*nx+v3y*ny+v3z*nz<=0){\\r\\n        return false;\\r\\n        }\\r\\n        if((v1y*v3z-v1z*v3y)*v0x+(v1z*v3x-v1x*v3z)*v0y+(v1x*v3y-v1y*v3x)*v0z<0){\\r\\n        v2x=v3x;\\r\\n        v2y=v3y;\\r\\n        v2z=v3z;\\r\\n        v21x=v31x;\\r\\n        v21y=v31y;\\r\\n        v21z=v31z;\\r\\n        v22x=v32x;\\r\\n        v22y=v32y;\\r\\n        v22z=v32z;\\r\\n        t1x=v1x-v0x;\\r\\n        t1y=v1y-v0y;\\r\\n        t1z=v1z-v0z;\\r\\n        t2x=v3x-v0x;\\r\\n        t2y=v3y-v0y;\\r\\n        t2z=v3z-v0z;\\r\\n        nx=t1y*t2z-t1z*t2y;\\r\\n        ny=t1z*t2x-t1x*t2z;\\r\\n        nz=t1x*t2y-t1y*t2x;\\r\\n        continue;\\r\\n        }\\r\\n        if((v3y*v2z-v3z*v2y)*v0x+(v3z*v2x-v3x*v2z)*v0y+(v3x*v2y-v3y*v2x)*v0z<0){\\r\\n        v1x=v3x;\\r\\n        v1y=v3y;\\r\\n        v1z=v3z;\\r\\n        v11x=v31x;\\r\\n        v11y=v31y;\\r\\n        v11z=v31z;\\r\\n        v12x=v32x;\\r\\n        v12y=v32y;\\r\\n        v12z=v32z;\\r\\n        t1x=v3x-v0x;\\r\\n        t1y=v3y-v0y;\\r\\n        t1z=v3z-v0z;\\r\\n        t2x=v2x-v0x;\\r\\n        t2y=v2y-v0y;\\r\\n        t2z=v2z-v0z;\\r\\n        nx=t1y*t2z-t1z*t2y;\\r\\n        ny=t1z*t2x-t1x*t2z;\\r\\n        nz=t1x*t2y-t1y*t2x;\\r\\n        continue;\\r\\n        }\\r\\n        var hit=false;\\r\\n        while(true){\\r\\n        t1x=v2x-v1x;\\r\\n        t1y=v2y-v1y;\\r\\n        t1z=v2z-v1z;\\r\\n        t2x=v3x-v1x;\\r\\n        t2y=v3y-v1y;\\r\\n        t2z=v3z-v1z;\\r\\n        nx=t1y*t2z-t1z*t2y;\\r\\n        ny=t1z*t2x-t1x*t2z;\\r\\n        nz=t1x*t2y-t1y*t2x;\\r\\n        len=1/_Math.sqrt(nx*nx+ny*ny+nz*nz);\\r\\n        nx*=len;\\r\\n        ny*=len;\\r\\n        nz*=len;\\r\\n        if(nx*v1x+ny*v1y+nz*v1z>=0&&!hit){\\r\\n        var b0=(v1y*v2z-v1z*v2y)*v3x+(v1z*v2x-v1x*v2z)*v3y+(v1x*v2y-v1y*v2x)*v3z;\\r\\n        var b1=(v3y*v2z-v3z*v2y)*v0x+(v3z*v2x-v3x*v2z)*v0y+(v3x*v2y-v3y*v2x)*v0z;\\r\\n        var b2=(v0y*v1z-v0z*v1y)*v3x+(v0z*v1x-v0x*v1z)*v3y+(v0x*v1y-v0y*v1x)*v3z;\\r\\n        var b3=(v2y*v1z-v2z*v1y)*v0x+(v2z*v1x-v2x*v1z)*v0y+(v2x*v1y-v2y*v1x)*v0z;\\r\\n        var sum=b0+b1+b2+b3;\\r\\n        if(sum<=0){\\r\\n        b0=0;\\r\\n        b1=(v2y*v3z-v2z*v3y)*nx+(v2z*v3x-v2x*v3z)*ny+(v2x*v3y-v2y*v3x)*nz;\\r\\n        b2=(v3y*v2z-v3z*v2y)*nx+(v3z*v2x-v3x*v2z)*ny+(v3x*v2y-v3y*v2x)*nz;\\r\\n        b3=(v1y*v2z-v1z*v2y)*nx+(v1z*v2x-v1x*v2z)*ny+(v1x*v2y-v1y*v2x)*nz;\\r\\n        sum=b1+b2+b3;\\r\\n        }\\r\\n        var inv=1/sum;\\r\\n        p1x=(v01x*b0+v11x*b1+v21x*b2+v31x*b3)*inv;\\r\\n        p1y=(v01y*b0+v11y*b1+v21y*b2+v31y*b3)*inv;\\r\\n        p1z=(v01z*b0+v11z*b1+v21z*b2+v31z*b3)*inv;\\r\\n        p2x=(v02x*b0+v12x*b1+v22x*b2+v32x*b3)*inv;\\r\\n        p2y=(v02y*b0+v12y*b1+v22y*b2+v32y*b3)*inv;\\r\\n        p2z=(v02z*b0+v12z*b1+v22z*b2+v32z*b3)*inv;\\r\\n        hit=true;\\r\\n        }\\r\\n        this.supportPoint(c1,-nx,-ny,-nz,sup);\\r\\n        var v41x=sup.x;\\r\\n        var v41y=sup.y;\\r\\n        var v41z=sup.z;\\r\\n        this.supportPoint(c2,nx,ny,nz,sup);\\r\\n        var v42x=sup.x;\\r\\n        var v42y=sup.y;\\r\\n        var v42z=sup.z;\\r\\n        var v4x=v42x-v41x;\\r\\n        var v4y=v42y-v41y;\\r\\n        var v4z=v42z-v41z;\\r\\n        var separation=-(v4x*nx+v4y*ny+v4z*nz);\\r\\n        if((v4x-v3x)*nx+(v4y-v3y)*ny+(v4z-v3z)*nz<=0.01||separation>=0){\\r\\n        if(hit){\\r\\n        sep.set( -nx, -ny, -nz );\\r\\n        pos.set( (p1x+p2x)*0.5, (p1y+p2y)*0.5, (p1z+p2z)*0.5 );\\r\\n        dep.x=separation;\\r\\n        return true;\\r\\n        }\\r\\n        return false;\\r\\n        }\\r\\n        if(\\r\\n        (v4y*v1z-v4z*v1y)*v0x+\\r\\n        (v4z*v1x-v4x*v1z)*v0y+\\r\\n        (v4x*v1y-v4y*v1x)*v0z<0\\r\\n        ){\\r\\n        if(\\r\\n        (v4y*v2z-v4z*v2y)*v0x+\\r\\n        (v4z*v2x-v4x*v2z)*v0y+\\r\\n        (v4x*v2y-v4y*v2x)*v0z<0\\r\\n        ){\\r\\n        v1x=v4x;\\r\\n        v1y=v4y;\\r\\n        v1z=v4z;\\r\\n        v11x=v41x;\\r\\n        v11y=v41y;\\r\\n        v11z=v41z;\\r\\n        v12x=v42x;\\r\\n        v12y=v42y;\\r\\n        v12z=v42z;\\r\\n        }else{\\r\\n        v3x=v4x;\\r\\n        v3y=v4y;\\r\\n        v3z=v4z;\\r\\n        v31x=v41x;\\r\\n        v31y=v41y;\\r\\n        v31z=v41z;\\r\\n        v32x=v42x;\\r\\n        v32y=v42y;\\r\\n        v32z=v42z;\\r\\n        }\\r\\n        }else{\\r\\n        if(\\r\\n        (v4y*v3z-v4z*v3y)*v0x+\\r\\n        (v4z*v3x-v4x*v3z)*v0y+\\r\\n        (v4x*v3y-v4y*v3x)*v0z<0\\r\\n        ){\\r\\n        v2x=v4x;\\r\\n        v2y=v4y;\\r\\n        v2z=v4z;\\r\\n        v21x=v41x;\\r\\n        v21y=v41y;\\r\\n        v21z=v41z;\\r\\n        v22x=v42x;\\r\\n        v22y=v42y;\\r\\n        v22z=v42z;\\r\\n        }else{\\r\\n        v1x=v4x;\\r\\n        v1y=v4y;\\r\\n        v1z=v4z;\\r\\n        v11x=v41x;\\r\\n        v11y=v41y;\\r\\n        v11z=v41z;\\r\\n        v12x=v42x;\\r\\n        v12y=v42y;\\r\\n        v12z=v42z;\\r\\n        }\\r\\n        }\\r\\n        }\\r\\n        }\\r\\n        //return false;\\r\\n    },\\r\\n\\r\\n    supportPoint: function ( c, dx, dy, dz, out ) {\\r\\n\\r\\n        var rot=c.rotation.elements;\\r\\n        var ldx=rot[0]*dx+rot[3]*dy+rot[6]*dz;\\r\\n        var ldy=rot[1]*dx+rot[4]*dy+rot[7]*dz;\\r\\n        var ldz=rot[2]*dx+rot[5]*dy+rot[8]*dz;\\r\\n        var radx=ldx;\\r\\n        var radz=ldz;\\r\\n        var len=radx*radx+radz*radz;\\r\\n        var rad=c.radius;\\r\\n        var hh=c.halfHeight;\\r\\n        var ox;\\r\\n        var oy;\\r\\n        var oz;\\r\\n        if(len==0){\\r\\n        if(ldy<0){\\r\\n        ox=rad;\\r\\n        oy=-hh;\\r\\n        oz=0;\\r\\n        }else{\\r\\n        ox=rad;\\r\\n        oy=hh;\\r\\n        oz=0;\\r\\n        }\\r\\n        }else{\\r\\n        len=c.radius/_Math.sqrt(len);\\r\\n        if(ldy<0){\\r\\n        ox=radx*len;\\r\\n        oy=-hh;\\r\\n        oz=radz*len;\\r\\n        }else{\\r\\n        ox=radx*len;\\r\\n        oy=hh;\\r\\n        oz=radz*len;\\r\\n        }\\r\\n        }\\r\\n        ldx=rot[0]*ox+rot[1]*oy+rot[2]*oz+c.position.x;\\r\\n        ldy=rot[3]*ox+rot[4]*oy+rot[5]*oz+c.position.y;\\r\\n        ldz=rot[6]*ox+rot[7]*oy+rot[8]*oz+c.position.z;\\r\\n        out.set( ldx, ldy, ldz );\\r\\n\\r\\n    },\\r\\n\\r\\n    detectCollision: function ( shape1, shape2, manifold ) {\\r\\n\\r\\n        var c1;\\r\\n        var c2;\\r\\n        if(shape1.id<shape2.id){\\r\\n            c1=shape1;\\r\\n            c2=shape2;\\r\\n        }else{\\r\\n            c1=shape2;\\r\\n            c2=shape1;\\r\\n        }\\r\\n        var p1=c1.position;\\r\\n        var p2=c2.position;\\r\\n        var p1x=p1.x;\\r\\n        var p1y=p1.y;\\r\\n        var p1z=p1.z;\\r\\n        var p2x=p2.x;\\r\\n        var p2y=p2.y;\\r\\n        var p2z=p2.z;\\r\\n        var h1=c1.halfHeight;\\r\\n        var h2=c2.halfHeight;\\r\\n        var n1=c1.normalDirection;\\r\\n        var n2=c2.normalDirection;\\r\\n        var d1=c1.halfDirection;\\r\\n        var d2=c2.halfDirection;\\r\\n        var r1=c1.radius;\\r\\n        var r2=c2.radius;\\r\\n        var n1x=n1.x;\\r\\n        var n1y=n1.y;\\r\\n        var n1z=n1.z;\\r\\n        var n2x=n2.x;\\r\\n        var n2y=n2.y;\\r\\n        var n2z=n2.z;\\r\\n        var d1x=d1.x;\\r\\n        var d1y=d1.y;\\r\\n        var d1z=d1.z;\\r\\n        var d2x=d2.x;\\r\\n        var d2y=d2.y;\\r\\n        var d2z=d2.z;\\r\\n        var dx=p1x-p2x;\\r\\n        var dy=p1y-p2y;\\r\\n        var dz=p1z-p2z;\\r\\n        var len;\\r\\n        var c1x;\\r\\n        var c1y;\\r\\n        var c1z;\\r\\n        var c2x;\\r\\n        var c2y;\\r\\n        var c2z;\\r\\n        var tx;\\r\\n        var ty;\\r\\n        var tz;\\r\\n        var sx;\\r\\n        var sy;\\r\\n        var sz;\\r\\n        var ex;\\r\\n        var ey;\\r\\n        var ez;\\r\\n        var depth1;\\r\\n        var depth2;\\r\\n        var dot;\\r\\n        var t1;\\r\\n        var t2;\\r\\n        var sep=new Vec3();\\r\\n        var pos=new Vec3();\\r\\n        var dep=new Vec3();\\r\\n        if(!this.getSep(c1,c2,sep,pos,dep))return;\\r\\n        var dot1=sep.x*n1x+sep.y*n1y+sep.z*n1z;\\r\\n        var dot2=sep.x*n2x+sep.y*n2y+sep.z*n2z;\\r\\n        var right1=dot1>0;\\r\\n        var right2=dot2>0;\\r\\n        if(!right1)dot1=-dot1;\\r\\n        if(!right2)dot2=-dot2;\\r\\n        var state=0;\\r\\n        if(dot1>0.999||dot2>0.999){\\r\\n        if(dot1>dot2)state=1;\\r\\n        else state=2;\\r\\n        }\\r\\n        var nx;\\r\\n        var ny;\\r\\n        var nz;\\r\\n        var depth=dep.x;\\r\\n        var r00;\\r\\n        var r01;\\r\\n        var r02;\\r\\n        var r10;\\r\\n        var r11;\\r\\n        var r12;\\r\\n        var r20;\\r\\n        var r21;\\r\\n        var r22;\\r\\n        var px;\\r\\n        var py;\\r\\n        var pz;\\r\\n        var pd;\\r\\n        var a;\\r\\n        var b;\\r\\n        var e;\\r\\n        var f;\\r\\n        nx=sep.x;\\r\\n        ny=sep.y;\\r\\n        nz=sep.z;\\r\\n        switch(state){\\r\\n        case 0:\\r\\n        manifold.addPoint(pos.x,pos.y,pos.z,nx,ny,nz,depth,false);\\r\\n        break;\\r\\n        case 1:\\r\\n        if(right1){\\r\\n        c1x=p1x+d1x;\\r\\n        c1y=p1y+d1y;\\r\\n        c1z=p1z+d1z;\\r\\n        nx=n1x;\\r\\n        ny=n1y;\\r\\n        nz=n1z;\\r\\n        }else{\\r\\n        c1x=p1x-d1x;\\r\\n        c1y=p1y-d1y;\\r\\n        c1z=p1z-d1z;\\r\\n        nx=-n1x;\\r\\n        ny=-n1y;\\r\\n        nz=-n1z;\\r\\n        }\\r\\n        dot=nx*n2x+ny*n2y+nz*n2z;\\r\\n        if(dot<0)len=h2;\\r\\n        else len=-h2;\\r\\n        c2x=p2x+len*n2x;\\r\\n        c2y=p2y+len*n2y;\\r\\n        c2z=p2z+len*n2z;\\r\\n        if(dot2>=0.999999){\\r\\n        tx=-ny;\\r\\n        ty=nz;\\r\\n        tz=nx;\\r\\n        }else{\\r\\n        tx=nx;\\r\\n        ty=ny;\\r\\n        tz=nz;\\r\\n        }\\r\\n        len=tx*n2x+ty*n2y+tz*n2z;\\r\\n        dx=len*n2x-tx;\\r\\n        dy=len*n2y-ty;\\r\\n        dz=len*n2z-tz;\\r\\n        len=_Math.sqrt(dx*dx+dy*dy+dz*dz);\\r\\n        if(len==0)break;\\r\\n        len=r2/len;\\r\\n        dx*=len;\\r\\n        dy*=len;\\r\\n        dz*=len;\\r\\n        tx=c2x+dx;\\r\\n        ty=c2y+dy;\\r\\n        tz=c2z+dz;\\r\\n        if(dot<-0.96||dot>0.96){\\r\\n        r00=n2x*n2x*1.5-0.5;\\r\\n        r01=n2x*n2y*1.5-n2z*0.866025403;\\r\\n        r02=n2x*n2z*1.5+n2y*0.866025403;\\r\\n        r10=n2y*n2x*1.5+n2z*0.866025403;\\r\\n        r11=n2y*n2y*1.5-0.5;\\r\\n        r12=n2y*n2z*1.5-n2x*0.866025403;\\r\\n        r20=n2z*n2x*1.5-n2y*0.866025403;\\r\\n        r21=n2z*n2y*1.5+n2x*0.866025403;\\r\\n        r22=n2z*n2z*1.5-0.5;\\r\\n        px=tx;\\r\\n        py=ty;\\r\\n        pz=tz;\\r\\n        pd=nx*(px-c1x)+ny*(py-c1y)+nz*(pz-c1z);\\r\\n        tx=px-pd*nx-c1x;\\r\\n        ty=py-pd*ny-c1y;\\r\\n        tz=pz-pd*nz-c1z;\\r\\n        len=tx*tx+ty*ty+tz*tz;\\r\\n        if(len>r1*r1){\\r\\n        len=r1/_Math.sqrt(len);\\r\\n        tx*=len;\\r\\n        ty*=len;\\r\\n        tz*=len;\\r\\n        }\\r\\n        px=c1x+tx;\\r\\n        py=c1y+ty;\\r\\n        pz=c1z+tz;\\r\\n        manifold.addPoint(px,py,pz,nx,ny,nz,pd,false);\\r\\n        px=dx*r00+dy*r01+dz*r02;\\r\\n        py=dx*r10+dy*r11+dz*r12;\\r\\n        pz=dx*r20+dy*r21+dz*r22;\\r\\n        px=(dx=px)+c2x;\\r\\n        py=(dy=py)+c2y;\\r\\n        pz=(dz=pz)+c2z;\\r\\n        pd=nx*(px-c1x)+ny*(py-c1y)+nz*(pz-c1z);\\r\\n        if(pd<=0){\\r\\n        tx=px-pd*nx-c1x;\\r\\n        ty=py-pd*ny-c1y;\\r\\n        tz=pz-pd*nz-c1z;\\r\\n        len=tx*tx+ty*ty+tz*tz;\\r\\n        if(len>r1*r1){\\r\\n        len=r1/_Math.sqrt(len);\\r\\n        tx*=len;\\r\\n        ty*=len;\\r\\n        tz*=len;\\r\\n        }\\r\\n        px=c1x+tx;\\r\\n        py=c1y+ty;\\r\\n        pz=c1z+tz;\\r\\n        manifold.addPoint(px,py,pz,nx,ny,nz,pd,false);\\r\\n        }\\r\\n        px=dx*r00+dy*r01+dz*r02;\\r\\n        py=dx*r10+dy*r11+dz*r12;\\r\\n        pz=dx*r20+dy*r21+dz*r22;\\r\\n        px=(dx=px)+c2x;\\r\\n        py=(dy=py)+c2y;\\r\\n        pz=(dz=pz)+c2z;\\r\\n        pd=nx*(px-c1x)+ny*(py-c1y)+nz*(pz-c1z);\\r\\n        if(pd<=0){\\r\\n        tx=px-pd*nx-c1x;\\r\\n        ty=py-pd*ny-c1y;\\r\\n        tz=pz-pd*nz-c1z;\\r\\n        len=tx*tx+ty*ty+tz*tz;\\r\\n        if(len>r1*r1){\\r\\n        len=r1/_Math.sqrt(len);\\r\\n        tx*=len;\\r\\n        ty*=len;\\r\\n        tz*=len;\\r\\n        }\\r\\n        px=c1x+tx;\\r\\n        py=c1y+ty;\\r\\n        pz=c1z+tz;\\r\\n        manifold.addPoint(px,py,pz,nx,ny,nz,pd,false);\\r\\n        }\\r\\n        }else{\\r\\n        sx=tx;\\r\\n        sy=ty;\\r\\n        sz=tz;\\r\\n        depth1=nx*(sx-c1x)+ny*(sy-c1y)+nz*(sz-c1z);\\r\\n        sx-=depth1*nx;\\r\\n        sy-=depth1*ny;\\r\\n        sz-=depth1*nz;\\r\\n        if(dot>0){\\r\\n        ex=tx+n2x*h2*2;\\r\\n        ey=ty+n2y*h2*2;\\r\\n        ez=tz+n2z*h2*2;\\r\\n        }else{\\r\\n        ex=tx-n2x*h2*2;\\r\\n        ey=ty-n2y*h2*2;\\r\\n        ez=tz-n2z*h2*2;\\r\\n        }\\r\\n        depth2=nx*(ex-c1x)+ny*(ey-c1y)+nz*(ez-c1z);\\r\\n        ex-=depth2*nx;\\r\\n        ey-=depth2*ny;\\r\\n        ez-=depth2*nz;\\r\\n        dx=c1x-sx;\\r\\n        dy=c1y-sy;\\r\\n        dz=c1z-sz;\\r\\n        tx=ex-sx;\\r\\n        ty=ey-sy;\\r\\n        tz=ez-sz;\\r\\n        a=dx*dx+dy*dy+dz*dz;\\r\\n        b=dx*tx+dy*ty+dz*tz;\\r\\n        e=tx*tx+ty*ty+tz*tz;\\r\\n        f=b*b-e*(a-r1*r1);\\r\\n        if(f<0)break;\\r\\n        f=_Math.sqrt(f);\\r\\n        t1=(b+f)/e;\\r\\n        t2=(b-f)/e;\\r\\n        if(t2<t1){\\r\\n        len=t1;\\r\\n        t1=t2;\\r\\n        t2=len;\\r\\n        }\\r\\n        if(t2>1)t2=1;\\r\\n        if(t1<0)t1=0;\\r\\n        tx=sx+(ex-sx)*t1;\\r\\n        ty=sy+(ey-sy)*t1;\\r\\n        tz=sz+(ez-sz)*t1;\\r\\n        ex=sx+(ex-sx)*t2;\\r\\n        ey=sy+(ey-sy)*t2;\\r\\n        ez=sz+(ez-sz)*t2;\\r\\n        sx=tx;\\r\\n        sy=ty;\\r\\n        sz=tz;\\r\\n        len=depth1+(depth2-depth1)*t1;\\r\\n        depth2=depth1+(depth2-depth1)*t2;\\r\\n        depth1=len;\\r\\n        if(depth1<0) manifold.addPoint(sx,sy,sz,nx,ny,nz,pd,false);\\r\\n        if(depth2<0) manifold.addPoint(ex,ey,ez,nx,ny,nz,pd,false);\\r\\n        \\r\\n        }\\r\\n        break;\\r\\n        case 2:\\r\\n        if(right2){\\r\\n        c2x=p2x-d2x;\\r\\n        c2y=p2y-d2y;\\r\\n        c2z=p2z-d2z;\\r\\n        nx=-n2x;\\r\\n        ny=-n2y;\\r\\n        nz=-n2z;\\r\\n        }else{\\r\\n        c2x=p2x+d2x;\\r\\n        c2y=p2y+d2y;\\r\\n        c2z=p2z+d2z;\\r\\n        nx=n2x;\\r\\n        ny=n2y;\\r\\n        nz=n2z;\\r\\n        }\\r\\n        dot=nx*n1x+ny*n1y+nz*n1z;\\r\\n        if(dot<0)len=h1;\\r\\n        else len=-h1;\\r\\n        c1x=p1x+len*n1x;\\r\\n        c1y=p1y+len*n1y;\\r\\n        c1z=p1z+len*n1z;\\r\\n        if(dot1>=0.999999){\\r\\n        tx=-ny;\\r\\n        ty=nz;\\r\\n        tz=nx;\\r\\n        }else{\\r\\n        tx=nx;\\r\\n        ty=ny;\\r\\n        tz=nz;\\r\\n        }\\r\\n        len=tx*n1x+ty*n1y+tz*n1z;\\r\\n        dx=len*n1x-tx;\\r\\n        dy=len*n1y-ty;\\r\\n        dz=len*n1z-tz;\\r\\n        len=_Math.sqrt(dx*dx+dy*dy+dz*dz);\\r\\n        if(len==0)break;\\r\\n        len=r1/len;\\r\\n        dx*=len;\\r\\n        dy*=len;\\r\\n        dz*=len;\\r\\n        tx=c1x+dx;\\r\\n        ty=c1y+dy;\\r\\n        tz=c1z+dz;\\r\\n        if(dot<-0.96||dot>0.96){\\r\\n        r00=n1x*n1x*1.5-0.5;\\r\\n        r01=n1x*n1y*1.5-n1z*0.866025403;\\r\\n        r02=n1x*n1z*1.5+n1y*0.866025403;\\r\\n        r10=n1y*n1x*1.5+n1z*0.866025403;\\r\\n        r11=n1y*n1y*1.5-0.5;\\r\\n        r12=n1y*n1z*1.5-n1x*0.866025403;\\r\\n        r20=n1z*n1x*1.5-n1y*0.866025403;\\r\\n        r21=n1z*n1y*1.5+n1x*0.866025403;\\r\\n        r22=n1z*n1z*1.5-0.5;\\r\\n        px=tx;\\r\\n        py=ty;\\r\\n        pz=tz;\\r\\n        pd=nx*(px-c2x)+ny*(py-c2y)+nz*(pz-c2z);\\r\\n        tx=px-pd*nx-c2x;\\r\\n        ty=py-pd*ny-c2y;\\r\\n        tz=pz-pd*nz-c2z;\\r\\n        len=tx*tx+ty*ty+tz*tz;\\r\\n        if(len>r2*r2){\\r\\n        len=r2/_Math.sqrt(len);\\r\\n        tx*=len;\\r\\n        ty*=len;\\r\\n        tz*=len;\\r\\n        }\\r\\n        px=c2x+tx;\\r\\n        py=c2y+ty;\\r\\n        pz=c2z+tz;\\r\\n        manifold.addPoint(px,py,pz,-nx,-ny,-nz,pd,false);\\r\\n        px=dx*r00+dy*r01+dz*r02;\\r\\n        py=dx*r10+dy*r11+dz*r12;\\r\\n        pz=dx*r20+dy*r21+dz*r22;\\r\\n        px=(dx=px)+c1x;\\r\\n        py=(dy=py)+c1y;\\r\\n        pz=(dz=pz)+c1z;\\r\\n        pd=nx*(px-c2x)+ny*(py-c2y)+nz*(pz-c2z);\\r\\n        if(pd<=0){\\r\\n        tx=px-pd*nx-c2x;\\r\\n        ty=py-pd*ny-c2y;\\r\\n        tz=pz-pd*nz-c2z;\\r\\n        len=tx*tx+ty*ty+tz*tz;\\r\\n        if(len>r2*r2){\\r\\n        len=r2/_Math.sqrt(len);\\r\\n        tx*=len;\\r\\n        ty*=len;\\r\\n        tz*=len;\\r\\n        }\\r\\n        px=c2x+tx;\\r\\n        py=c2y+ty;\\r\\n        pz=c2z+tz;\\r\\n        manifold.addPoint(px,py,pz,-nx,-ny,-nz,pd,false);\\r\\n        }\\r\\n        px=dx*r00+dy*r01+dz*r02;\\r\\n        py=dx*r10+dy*r11+dz*r12;\\r\\n        pz=dx*r20+dy*r21+dz*r22;\\r\\n        px=(dx=px)+c1x;\\r\\n        py=(dy=py)+c1y;\\r\\n        pz=(dz=pz)+c1z;\\r\\n        pd=nx*(px-c2x)+ny*(py-c2y)+nz*(pz-c2z);\\r\\n        if(pd<=0){\\r\\n        tx=px-pd*nx-c2x;\\r\\n        ty=py-pd*ny-c2y;\\r\\n        tz=pz-pd*nz-c2z;\\r\\n        len=tx*tx+ty*ty+tz*tz;\\r\\n        if(len>r2*r2){\\r\\n        len=r2/_Math.sqrt(len);\\r\\n        tx*=len;\\r\\n        ty*=len;\\r\\n        tz*=len;\\r\\n        }\\r\\n        px=c2x+tx;\\r\\n        py=c2y+ty;\\r\\n        pz=c2z+tz;\\r\\n        manifold.addPoint(px,py,pz,-nx,-ny,-nz,pd,false);\\r\\n        }\\r\\n        }else{\\r\\n        sx=tx;\\r\\n        sy=ty;\\r\\n        sz=tz;\\r\\n        depth1=nx*(sx-c2x)+ny*(sy-c2y)+nz*(sz-c2z);\\r\\n        sx-=depth1*nx;\\r\\n        sy-=depth1*ny;\\r\\n        sz-=depth1*nz;\\r\\n        if(dot>0){\\r\\n        ex=tx+n1x*h1*2;\\r\\n        ey=ty+n1y*h1*2;\\r\\n        ez=tz+n1z*h1*2;\\r\\n        }else{\\r\\n        ex=tx-n1x*h1*2;\\r\\n        ey=ty-n1y*h1*2;\\r\\n        ez=tz-n1z*h1*2;\\r\\n        }\\r\\n        depth2=nx*(ex-c2x)+ny*(ey-c2y)+nz*(ez-c2z);\\r\\n        ex-=depth2*nx;\\r\\n        ey-=depth2*ny;\\r\\n        ez-=depth2*nz;\\r\\n        dx=c2x-sx;\\r\\n        dy=c2y-sy;\\r\\n        dz=c2z-sz;\\r\\n        tx=ex-sx;\\r\\n        ty=ey-sy;\\r\\n        tz=ez-sz;\\r\\n        a=dx*dx+dy*dy+dz*dz;\\r\\n        b=dx*tx+dy*ty+dz*tz;\\r\\n        e=tx*tx+ty*ty+tz*tz;\\r\\n        f=b*b-e*(a-r2*r2);\\r\\n        if(f<0)break;\\r\\n        f=_Math.sqrt(f);\\r\\n        t1=(b+f)/e;\\r\\n        t2=(b-f)/e;\\r\\n        if(t2<t1){\\r\\n        len=t1;\\r\\n        t1=t2;\\r\\n        t2=len;\\r\\n        }\\r\\n        if(t2>1)t2=1;\\r\\n        if(t1<0)t1=0;\\r\\n        tx=sx+(ex-sx)*t1;\\r\\n        ty=sy+(ey-sy)*t1;\\r\\n        tz=sz+(ez-sz)*t1;\\r\\n        ex=sx+(ex-sx)*t2;\\r\\n        ey=sy+(ey-sy)*t2;\\r\\n        ez=sz+(ez-sz)*t2;\\r\\n        sx=tx;\\r\\n        sy=ty;\\r\\n        sz=tz;\\r\\n        len=depth1+(depth2-depth1)*t1;\\r\\n        depth2=depth1+(depth2-depth1)*t2;\\r\\n        depth1=len;\\r\\n        if(depth1<0){\\r\\n        manifold.addPoint(sx,sy,sz,-nx,-ny,-nz,depth1,false);\\r\\n        }\\r\\n        if(depth2<0){\\r\\n        manifold.addPoint(ex,ey,ez,-nx,-ny,-nz,depth2,false);\\r\\n        }\\r\\n        }\\r\\n        break;\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n});\\n\\n/**\\n * A collision detector which detects collisions between sphere and box.\\n * @author saharan\\n */\\nfunction SphereBoxCollisionDetector ( flip ) {\\n    \\n    CollisionDetector.call( this );\\n    this.flip = flip;\\n\\n}\\n\\nSphereBoxCollisionDetector.prototype = Object.assign( Object.create( CollisionDetector.prototype ), {\\n\\n    constructor: SphereBoxCollisionDetector,\\n\\n    detectCollision: function ( shape1, shape2, manifold ) {\\n\\n        var s;\\n        var b;\\n        if(this.flip){\\n            s=(shape2);\\n            b=(shape1);\\n        }else{\\n            s=(shape1);\\n            b=(shape2);\\n        }\\n\\n        var D = b.dimentions;\\n\\n        var ps=s.position;\\n        var psx=ps.x;\\n        var psy=ps.y;\\n        var psz=ps.z;\\n        var pb=b.position;\\n        var pbx=pb.x;\\n        var pby=pb.y;\\n        var pbz=pb.z;\\n        var rad=s.radius;\\n\\n        var hw=b.halfWidth;\\n        var hh=b.halfHeight;\\n        var hd=b.halfDepth;\\n\\n        var dx=psx-pbx;\\n        var dy=psy-pby;\\n        var dz=psz-pbz;\\n        var sx=D[0]*dx+D[1]*dy+D[2]*dz;\\n        var sy=D[3]*dx+D[4]*dy+D[5]*dz;\\n        var sz=D[6]*dx+D[7]*dy+D[8]*dz;\\n        var cx;\\n        var cy;\\n        var cz;\\n        var len;\\n        var invLen;\\n        var overlap=0;\\n        if(sx>hw){\\n            sx=hw;\\n        }else if(sx<-hw){\\n            sx=-hw;\\n        }else{\\n            overlap=1;\\n        }\\n        if(sy>hh){\\n            sy=hh;\\n        }else if(sy<-hh){\\n            sy=-hh;\\n        }else{\\n            overlap|=2;\\n        }\\n        if(sz>hd){\\n            sz=hd;\\n        }else if(sz<-hd){\\n            sz=-hd;\\n        }else{\\n            overlap|=4;\\n        }\\n        if(overlap==7){\\n            // center of sphere is in the box\\n            if(sx<0){\\n                dx=hw+sx;\\n            }else{\\n                dx=hw-sx;\\n            }\\n            if(sy<0){\\n                dy=hh+sy;\\n            }else{\\n                dy=hh-sy;\\n            }\\n            if(sz<0){\\n                dz=hd+sz;\\n            }else{\\n                dz=hd-sz;\\n            }\\n            if(dx<dy){\\n                if(dx<dz){\\n                    len=dx-hw;\\n                if(sx<0){\\n                    sx=-hw;\\n                    dx=D[0];\\n                    dy=D[1];\\n                    dz=D[2];\\n                }else{\\n                    sx=hw;\\n                    dx=-D[0];\\n                    dy=-D[1];\\n                    dz=-D[2];\\n                }\\n            }else{\\n                len=dz-hd;\\n                if(sz<0){\\n                    sz=-hd;\\n                    dx=D[6];\\n                    dy=D[7];\\n                    dz=D[8];\\n                }else{\\n                    sz=hd;\\n                    dx=-D[6];\\n                    dy=-D[7];\\n                    dz=-D[8];\\n                }\\n            }\\n            }else{\\n                if(dy<dz){\\n                    len=dy-hh;\\n                    if(sy<0){\\n                        sy=-hh;\\n                        dx=D[3];\\n                        dy=D[4];\\n                        dz=D[5];\\n                    }else{\\n                        sy=hh;\\n                        dx=-D[3];\\n                        dy=-D[4];\\n                        dz=-D[5];\\n                    }\\n                }else{\\n                    len=dz-hd;\\n                    if(sz<0){\\n                        sz=-hd;\\n                        dx=D[6];\\n                        dy=D[7];\\n                        dz=D[8];\\n                    }else{\\n                        sz=hd;\\n                        dx=-D[6];\\n                        dy=-D[7];\\n                        dz=-D[8];\\n                }\\n            }\\n        }\\n        cx=pbx+sx*D[0]+sy*D[3]+sz*D[6];\\n        cy=pby+sx*D[1]+sy*D[4]+sz*D[7];\\n        cz=pbz+sx*D[2]+sy*D[5]+sz*D[8];\\n        manifold.addPoint(psx+rad*dx,psy+rad*dy,psz+rad*dz,dx,dy,dz,len-rad,this.flip);\\n        }else{\\n            cx=pbx+sx*D[0]+sy*D[3]+sz*D[6];\\n            cy=pby+sx*D[1]+sy*D[4]+sz*D[7];\\n            cz=pbz+sx*D[2]+sy*D[5]+sz*D[8];\\n            dx=cx-ps.x;\\n            dy=cy-ps.y;\\n            dz=cz-ps.z;\\n            len=dx*dx+dy*dy+dz*dz;\\n            if(len>0&&len<rad*rad){\\n                len=_Math.sqrt(len);\\n                invLen=1/len;\\n                dx*=invLen;\\n                dy*=invLen;\\n                dz*=invLen;\\n                manifold.addPoint(psx+rad*dx,psy+rad*dy,psz+rad*dz,dx,dy,dz,len-rad,this.flip);\\n            }\\n        }\\n\\n    }\\n\\n});\\n\\nfunction SphereCylinderCollisionDetector ( flip ){\\n    \\n    CollisionDetector.call( this );\\n    this.flip = flip;\\n\\n}\\n\\nSphereCylinderCollisionDetector.prototype = Object.assign( Object.create( CollisionDetector.prototype ), {\\n\\n    constructor: SphereCylinderCollisionDetector,\\n\\n    detectCollision: function ( shape1, shape2, manifold ) {\\n        \\n        var s;\\n        var c;\\n        if( this.flip ){\\n            s = shape2;\\n            c = shape1;\\n        }else{\\n            s = shape1;\\n            c = shape2;\\n        }\\n        var ps = s.position;\\n        var psx = ps.x;\\n        var psy = ps.y;\\n        var psz = ps.z;\\n        var pc = c.position;\\n        var pcx = pc.x;\\n        var pcy = pc.y;\\n        var pcz = pc.z;\\n        var dirx = c.normalDirection.x;\\n        var diry = c.normalDirection.y;\\n        var dirz = c.normalDirection.z;\\n        var rads = s.radius;\\n        var radc = c.radius;\\n        var rad2 = rads + radc;\\n        var halfh = c.halfHeight;\\n        var dx = psx - pcx;\\n        var dy = psy - pcy;\\n        var dz = psz - pcz;\\n        var dot = dx * dirx + dy * diry + dz * dirz;\\n        if ( dot < -halfh - rads || dot > halfh + rads ) return;\\n        var cx = pcx + dot * dirx;\\n        var cy = pcy + dot * diry;\\n        var cz = pcz + dot * dirz;\\n        var d2x = psx - cx;\\n        var d2y = psy - cy;\\n        var d2z = psz - cz;\\n        var len = d2x * d2x + d2y * d2y + d2z * d2z;\\n        if ( len > rad2 * rad2 ) return;\\n        if ( len > radc * radc ) {\\n            len = radc / _Math.sqrt( len );\\n            d2x *= len;\\n            d2y *= len;\\n            d2z *= len;\\n        }\\n        if( dot < -halfh ) dot = -halfh;\\n        else if( dot > halfh ) dot = halfh;\\n        cx = pcx + dot * dirx + d2x;\\n        cy = pcy + dot * diry + d2y;\\n        cz = pcz + dot * dirz + d2z;\\n        dx = cx - psx;\\n        dy = cy - psy;\\n        dz = cz - psz;\\n        len = dx * dx + dy * dy + dz * dz;\\n        var invLen;\\n        if ( len > 0 && len < rads * rads ) {\\n            len = _Math.sqrt(len);\\n            invLen = 1 / len;\\n            dx *= invLen;\\n            dy *= invLen;\\n            dz *= invLen;\\n            ///result.addContactInfo(psx+dx*rads,psy+dy*rads,psz+dz*rads,dx,dy,dz,len-rads,s,c,0,0,false);\\n            manifold.addPoint( psx + dx * rads, psy + dy * rads, psz + dz * rads, dx, dy, dz, len - rads, this.flip );\\n        }\\n\\n    }\\n\\n\\n});\\n\\n/**\\n * A collision detector which detects collisions between two spheres.\\n * @author saharan\\n */\\n \\nfunction SphereSphereCollisionDetector (){\\n\\n    CollisionDetector.call( this );\\n\\n}\\n\\nSphereSphereCollisionDetector.prototype = Object.assign( Object.create( CollisionDetector.prototype ), {\\n\\n    constructor: SphereSphereCollisionDetector,\\n\\n    detectCollision: function ( shape1, shape2, manifold ) {\\n\\n        var s1 = shape1;\\n        var s2 = shape2;\\n        var p1 = s1.position;\\n        var p2 = s2.position;\\n        var dx = p2.x - p1.x;\\n        var dy = p2.y - p1.y;\\n        var dz = p2.z - p1.z;\\n        var len = dx * dx + dy * dy + dz * dz;\\n        var r1 = s1.radius;\\n        var r2 = s2.radius;\\n        var rad = r1 + r2;\\n        if ( len > 0 && len < rad * rad ){\\n            len = _Math.sqrt( len );\\n            var invLen = 1 / len;\\n            dx *= invLen;\\n            dy *= invLen;\\n            dz *= invLen;\\n            manifold.addPoint( p1.x + dx * r1, p1.y + dy * r1, p1.z + dz * r1, dx, dy, dz, len - rad, false );\\n        }\\n\\n    }\\n\\n});\\n\\n/**\\r\\n * A collision detector which detects collisions between two spheres.\\r\\n * @author saharan \\r\\n * @author lo-th\\r\\n */\\r\\n \\r\\nfunction SpherePlaneCollisionDetector ( flip ){\\r\\n\\r\\n    CollisionDetector.call( this );\\r\\n\\r\\n    this.flip = flip;\\r\\n\\r\\n    this.n = new Vec3();\\r\\n    this.p = new Vec3();\\r\\n\\r\\n}\\r\\n\\r\\nSpherePlaneCollisionDetector.prototype = Object.assign( Object.create( CollisionDetector.prototype ), {\\r\\n\\r\\n    constructor: SpherePlaneCollisionDetector,\\r\\n\\r\\n    detectCollision: function ( shape1, shape2, manifold ) {\\r\\n\\r\\n        var n = this.n;\\r\\n        var p = this.p;\\r\\n\\r\\n        var s = this.flip ? shape2 : shape1;\\r\\n        var pn = this.flip ? shape1 : shape2;\\r\\n        var rad = s.radius;\\r\\n        var len;\\r\\n\\r\\n        n.sub( s.position, pn.position );\\r\\n        //var h = _Math.dotVectors( pn.normal, n );\\r\\n\\r\\n        n.x *= pn.normal.x;//+ rad;\\r\\n        n.y *= pn.normal.y;\\r\\n        n.z *= pn.normal.z;//+ rad;\\r\\n\\r\\n        \\r\\n        var len = n.lengthSq();\\r\\n        \\r\\n        if( len > 0 && len < rad * rad){//&& h > rad*rad ){\\r\\n\\r\\n            \\r\\n            len = _Math.sqrt( len );\\r\\n            //len = _Math.sqrt( h );\\r\\n            n.copy(pn.normal).negate();\\r\\n            //n.scaleEqual( 1/len );\\r\\n\\r\\n            //(0, -1, 0)\\r\\n\\r\\n            //n.normalize();\\r\\n            p.copy( s.position ).addScaledVector( n, rad );\\r\\n            manifold.addPointVec( p, n, len - rad, this.flip );\\r\\n\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n});\\n\\n/**\\r\\n * A collision detector which detects collisions between two spheres.\\r\\n * @author saharan \\r\\n * @author lo-th\\r\\n */\\r\\n \\r\\nfunction BoxPlaneCollisionDetector ( flip ){\\r\\n\\r\\n    CollisionDetector.call( this );\\r\\n\\r\\n    this.flip = flip;\\r\\n\\r\\n    this.n = new Vec3();\\r\\n    this.p = new Vec3();\\r\\n\\r\\n    this.dix = new Vec3();\\r\\n    this.diy = new Vec3();\\r\\n    this.diz = new Vec3();\\r\\n\\r\\n    this.cc = new Vec3();\\r\\n    this.cc2 = new Vec3();\\r\\n\\r\\n}\\r\\n\\r\\nBoxPlaneCollisionDetector.prototype = Object.assign( Object.create( CollisionDetector.prototype ), {\\r\\n\\r\\n    constructor: BoxPlaneCollisionDetector,\\r\\n\\r\\n    detectCollision: function ( shape1, shape2, manifold ) {\\r\\n\\r\\n        var n = this.n;\\r\\n        var p = this.p;\\r\\n        var cc = this.cc;\\r\\n\\r\\n        var b = this.flip ? shape2 : shape1;\\r\\n        var pn = this.flip ? shape1 : shape2;\\r\\n\\r\\n        var D = b.dimentions;\\r\\n        var hw = b.halfWidth;\\r\\n        var hh = b.halfHeight;\\r\\n        var hd = b.halfDepth;\\r\\n        var len;\\r\\n        var overlap = 0;\\r\\n\\r\\n        this.dix.set( D[0], D[1], D[2] );\\r\\n        this.diy.set( D[3], D[4], D[5] );\\r\\n        this.diz.set( D[6], D[7], D[8] );\\r\\n\\r\\n        n.sub( b.position, pn.position );\\r\\n\\r\\n        n.x *= pn.normal.x;//+ rad;\\r\\n        n.y *= pn.normal.y;\\r\\n        n.z *= pn.normal.z;//+ rad;\\r\\n\\r\\n        cc.set(\\r\\n            _Math.dotVectors( this.dix, n ),\\r\\n            _Math.dotVectors( this.diy, n ),\\r\\n            _Math.dotVectors( this.diz, n )\\r\\n        );\\r\\n\\r\\n\\r\\n        if( cc.x > hw ) cc.x = hw;\\r\\n        else if( cc.x < -hw ) cc.x = -hw;\\r\\n        else overlap = 1;\\r\\n        \\r\\n        if( cc.y > hh ) cc.y = hh;\\r\\n        else if( cc.y < -hh ) cc.y = -hh;\\r\\n        else overlap |= 2;\\r\\n        \\r\\n        if( cc.z > hd ) cc.z = hd;\\r\\n        else if( cc.z < -hd ) cc.z = -hd;\\r\\n        else overlap |= 4;\\r\\n\\r\\n        \\r\\n\\r\\n        if( overlap === 7 ){\\r\\n\\r\\n            // center of sphere is in the box\\r\\n            \\r\\n            n.set(\\r\\n                cc.x < 0 ? hw + cc.x : hw - cc.x,\\r\\n                cc.y < 0 ? hh + cc.y : hh - cc.y,\\r\\n                cc.z < 0 ? hd + cc.z : hd - cc.z\\r\\n            );\\r\\n            \\r\\n            if( n.x < n.y ){\\r\\n                if( n.x < n.z ){\\r\\n                    len = n.x - hw;\\r\\n                    if( cc.x < 0 ){\\r\\n                        cc.x = -hw;\\r\\n                        n.copy( this.dix );\\r\\n                    }else{\\r\\n                        cc.x = hw;\\r\\n                        n.subEqual( this.dix );\\r\\n                    }\\r\\n                }else{\\r\\n                    len = n.z - hd;\\r\\n                    if( cc.z < 0 ){\\r\\n                        cc.z = -hd;\\r\\n                        n.copy( this.diz );\\r\\n                    }else{\\r\\n                        cc.z = hd;\\r\\n                        n.subEqual( this.diz );\\r\\n                    }\\r\\n                }\\r\\n            }else{\\r\\n                if( n.y < n.z ){\\r\\n                    len = n.y - hh;\\r\\n                    if( cc.y < 0 ){\\r\\n                        cc.y = -hh;\\r\\n                        n.copy( this.diy );\\r\\n                    }else{\\r\\n                        cc.y = hh;\\r\\n                        n.subEqual( this.diy );\\r\\n                    }\\r\\n                }else{\\r\\n                    len = n.z - hd;\\r\\n                    if( cc.z < 0 ){\\r\\n                        cc.z = -hd;\\r\\n                        n.copy( this.diz );\\r\\n                    }else{\\r\\n                        cc.z = hd;\\r\\n                        n.subEqual( this.diz );\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n\\r\\n            p.copy( pn.position ).addScaledVector( n, 1 );\\r\\n            manifold.addPointVec( p, n, len, this.flip );\\r\\n\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n});\\n\\n//import { TetraShape } from '../collision/shape/TetraShape';\\r\\n\\r\\n/**\\r\\n * The class of physical computing world.\\r\\n * You must be added to the world physical all computing objects\\r\\n *\\r\\n * @author saharan\\r\\n * @author lo-th\\r\\n */\\r\\n\\r\\n // timestep, broadphase, iterations, worldscale, random, stat\\r\\n\\r\\nfunction World ( o ) {\\r\\n\\r\\n    if( !(o instanceof Object) ) o = {};\\r\\n\\r\\n    // this world scale defaut is 0.1 to 10 meters max for dynamique body\\r\\n    this.scale = o.worldscale || 1;\\r\\n    this.invScale = 1/this.scale;\\r\\n\\r\\n    // The time between each step\\r\\n    this.timeStep = o.timestep || 0.01666; // 1/60;\\r\\n    this.timerate = this.timeStep * 1000;\\r\\n    this.timer = null;\\r\\n\\r\\n    this.preLoop = null;//function(){};\\r\\n    this.postLoop = null;//function(){};\\r\\n\\r\\n    // The number of iterations for constraint solvers.\\r\\n    this.numIterations = o.iterations || 8;\\r\\n\\r\\n     // It is a wide-area collision judgment that is used in order to reduce as much as possible a detailed collision judgment.\\r\\n    switch( o.broadphase || 2 ){\\r\\n        case 1: this.broadPhase = new BruteForceBroadPhase(); break;\\r\\n        case 2: default: this.broadPhase = new SAPBroadPhase(); break;\\r\\n        case 3: this.broadPhase = new DBVTBroadPhase(); break;\\r\\n    }\\r\\n\\r\\n    this.Btypes = ['None','BruteForce','Sweep & Prune', 'Bounding Volume Tree' ];\\r\\n    this.broadPhaseType = this.Btypes[ o.broadphase || 2 ];\\r\\n\\r\\n    // This is the detailed information of the performance.\\r\\n    this.performance = null;\\r\\n    this.isStat = o.info === undefined ? false : o.info;\\r\\n    if( this.isStat ) this.performance = new InfoDisplay( this );\\r\\n\\r\\n    /**\\r\\n     * Whether the constraints randomizer is enabled or not.\\r\\n     *\\r\\n     * @property enableRandomizer\\r\\n     * @type {Boolean}\\r\\n     */\\r\\n    this.enableRandomizer = o.random !== undefined ? o.random : true;\\r\\n\\r\\n    // The rigid body list\\r\\n    this.rigidBodies=null;\\r\\n    // number of rigid body\\r\\n    this.numRigidBodies=0;\\r\\n    // The contact list\\r\\n    this.contacts=null;\\r\\n    this.unusedContacts=null;\\r\\n    // The number of contact\\r\\n    this.numContacts=0;\\r\\n    // The number of contact points\\r\\n    this.numContactPoints=0;\\r\\n    //  The joint list\\r\\n    this.joints=null;\\r\\n    // The number of joints.\\r\\n    this.numJoints=0;\\r\\n    // The number of simulation islands.\\r\\n    this.numIslands=0;\\r\\n\\r\\n\\r\\n    // The gravity in the world.\\r\\n    this.gravity = new Vec3(0,-9.8,0);\\r\\n    if( o.gravity !== undefined ) this.gravity.fromArray( o.gravity );\\r\\n\\r\\n\\r\\n\\r\\n    var numShapeTypes = 5;//4;//3;\\r\\n    this.detectors=[];\\r\\n    this.detectors.length = numShapeTypes;\\r\\n    var i = numShapeTypes;\\r\\n    while(i--){\\r\\n        this.detectors[i]=[];\\r\\n        this.detectors[i].length = numShapeTypes;\\r\\n    }\\r\\n\\r\\n    this.detectors[SHAPE_SPHERE][SHAPE_SPHERE] = new SphereSphereCollisionDetector();\\r\\n    this.detectors[SHAPE_SPHERE][SHAPE_BOX] = new SphereBoxCollisionDetector(false);\\r\\n    this.detectors[SHAPE_BOX][SHAPE_SPHERE] = new SphereBoxCollisionDetector(true);\\r\\n    this.detectors[SHAPE_BOX][SHAPE_BOX] = new BoxBoxCollisionDetector();\\r\\n\\r\\n    // CYLINDER add\\r\\n    this.detectors[SHAPE_CYLINDER][SHAPE_CYLINDER] = new CylinderCylinderCollisionDetector();\\r\\n\\r\\n    this.detectors[SHAPE_CYLINDER][SHAPE_BOX] = new BoxCylinderCollisionDetector(true);\\r\\n    this.detectors[SHAPE_BOX][SHAPE_CYLINDER] = new BoxCylinderCollisionDetector(false);\\r\\n\\r\\n    this.detectors[SHAPE_CYLINDER][SHAPE_SPHERE] = new SphereCylinderCollisionDetector(true);\\r\\n    this.detectors[SHAPE_SPHERE][SHAPE_CYLINDER] = new SphereCylinderCollisionDetector(false);\\r\\n\\r\\n    // PLANE add\\r\\n\\r\\n    this.detectors[SHAPE_PLANE][SHAPE_SPHERE] = new SpherePlaneCollisionDetector(true);\\r\\n    this.detectors[SHAPE_SPHERE][SHAPE_PLANE] = new SpherePlaneCollisionDetector(false);\\r\\n\\r\\n    this.detectors[SHAPE_PLANE][SHAPE_BOX] = new BoxPlaneCollisionDetector(true);\\r\\n    this.detectors[SHAPE_BOX][SHAPE_PLANE] = new BoxPlaneCollisionDetector(false);\\r\\n\\r\\n    // TETRA add\\r\\n    //this.detectors[SHAPE_TETRA][SHAPE_TETRA] = new TetraTetraCollisionDetector();\\r\\n\\r\\n\\r\\n    this.randX = 65535;\\r\\n    this.randA = 98765;\\r\\n    this.randB = 123456789;\\r\\n\\r\\n    this.islandRigidBodies = [];\\r\\n    this.islandStack = [];\\r\\n    this.islandConstraints = [];\\r\\n\\r\\n}\\r\\n\\r\\nObject.assign( World.prototype, {\\r\\n\\r\\n    World: true,\\r\\n\\r\\n    play: function(){\\r\\n \\r\\n        if( this.timer !== null ) return;\\r\\n\\r\\n        var _this = this;\\r\\n        this.timer = setInterval( function(){ _this.step(); } , this.timerate );\\r\\n        //this.timer = setInterval( this.loop.bind(this) , this.timerate );\\r\\n\\r\\n    },\\r\\n\\r\\n    stop: function(){\\r\\n\\r\\n        if( this.timer === null ) return;\\r\\n\\r\\n        clearInterval( this.timer );\\r\\n        this.timer = null;\\r\\n\\r\\n    },\\r\\n\\r\\n    setGravity: function ( ar ) {\\r\\n\\r\\n        this.gravity.fromArray( ar );\\r\\n\\r\\n    },\\r\\n\\r\\n    getInfo: function () {\\r\\n\\r\\n        return this.isStat ? this.performance.show() : '';\\r\\n\\r\\n    },\\r\\n\\r\\n    // Reset the world and remove all rigid bodies, shapes, joints and any object from the world.\\r\\n    clear:function(){\\r\\n\\r\\n        this.stop();\\r\\n        this.preLoop = null;\\r\\n        this.postLoop = null;\\r\\n\\r\\n        this.randX = 65535;\\r\\n\\r\\n        while(this.joints!==null){\\r\\n            this.removeJoint( this.joints );\\r\\n        }\\r\\n        while(this.contacts!==null){\\r\\n            this.removeContact( this.contacts );\\r\\n        }\\r\\n        while(this.rigidBodies!==null){\\r\\n            this.removeRigidBody( this.rigidBodies );\\r\\n        }\\r\\n\\r\\n    },\\r\\n    /**\\r\\n    * I'll add a rigid body to the world.\\r\\n    * Rigid body that has been added will be the operands of each step.\\r\\n    * @param  rigidBody  Rigid body that you want to add\\r\\n    */\\r\\n    addRigidBody:function( rigidBody ){\\r\\n\\r\\n        if(rigidBody.parent){\\r\\n            printError(\\\"World\\\", \\\"It is not possible to be added to more than one world one of the rigid body\\\");\\r\\n        }\\r\\n\\r\\n        rigidBody.setParent( this );\\r\\n        //rigidBody.awake();\\r\\n\\r\\n        for(var shape = rigidBody.shapes; shape !== null; shape = shape.next){\\r\\n            this.addShape( shape );\\r\\n        }\\r\\n        if(this.rigidBodies!==null)(this.rigidBodies.prev=rigidBody).next=this.rigidBodies;\\r\\n        this.rigidBodies = rigidBody;\\r\\n        this.numRigidBodies++;\\r\\n\\r\\n    },\\r\\n    /**\\r\\n    * I will remove the rigid body from the world.\\r\\n    * Rigid body that has been deleted is excluded from the calculation on a step-by-step basis.\\r\\n    * @param  rigidBody  Rigid body to be removed\\r\\n    */\\r\\n    removeRigidBody:function( rigidBody ){\\r\\n\\r\\n        var remove=rigidBody;\\r\\n        if(remove.parent!==this)return;\\r\\n        remove.awake();\\r\\n        var js=remove.jointLink;\\r\\n        while(js!=null){\\r\\n\\t        var joint=js.joint;\\r\\n\\t        js=js.next;\\r\\n\\t        this.removeJoint(joint);\\r\\n        }\\r\\n        for(var shape=rigidBody.shapes; shape!==null; shape=shape.next){\\r\\n            this.removeShape(shape);\\r\\n        }\\r\\n        var prev=remove.prev;\\r\\n        var next=remove.next;\\r\\n        if(prev!==null) prev.next=next;\\r\\n        if(next!==null) next.prev=prev;\\r\\n        if(this.rigidBodies==remove) this.rigidBodies=next;\\r\\n        remove.prev=null;\\r\\n        remove.next=null;\\r\\n        remove.parent=null;\\r\\n        this.numRigidBodies--;\\r\\n\\r\\n    },\\r\\n\\r\\n    getByName: function( name ){\\r\\n\\r\\n        var body = this.rigidBodies;\\r\\n        while( body !== null ){\\r\\n            if( body.name === name ) return body;\\r\\n            body=body.next;\\r\\n        }\\r\\n\\r\\n        var joint = this.joints;\\r\\n        while( joint !== null ){\\r\\n            if( joint.name === name ) return joint;\\r\\n            joint = joint.next;\\r\\n        }\\r\\n\\r\\n        return null;\\r\\n\\r\\n    },\\r\\n\\r\\n    /**\\r\\n    * I'll add a shape to the world..\\r\\n    * Add to the rigid world, and if you add a shape to a rigid body that has been added to the world,\\r\\n    * Shape will be added to the world automatically, please do not call from outside this method.\\r\\n    * @param  shape  Shape you want to add\\r\\n    */\\r\\n    addShape:function ( shape ){\\r\\n\\r\\n        if(!shape.parent || !shape.parent.parent){\\r\\n            printError(\\\"World\\\", \\\"It is not possible to be added alone to shape world\\\");\\r\\n        }\\r\\n\\r\\n        shape.proxy = this.broadPhase.createProxy(shape);\\r\\n        shape.updateProxy();\\r\\n        this.broadPhase.addProxy(shape.proxy);\\r\\n\\r\\n    },\\r\\n\\r\\n    /**\\r\\n    * I will remove the shape from the world.\\r\\n    * Add to the rigid world, and if you add a shape to a rigid body that has been added to the world,\\r\\n    * Shape will be added to the world automatically, please do not call from outside this method.\\r\\n    * @param  shape  Shape you want to delete\\r\\n    */\\r\\n    removeShape: function ( shape ){\\r\\n\\r\\n        this.broadPhase.removeProxy(shape.proxy);\\r\\n        shape.proxy = null;\\r\\n\\r\\n    },\\r\\n\\r\\n    /**\\r\\n    * I'll add a joint to the world.\\r\\n    * Joint that has been added will be the operands of each step.\\r\\n    * @param  shape Joint to be added\\r\\n    */\\r\\n    addJoint: function ( joint ) {\\r\\n\\r\\n        if(joint.parent){\\r\\n            printError(\\\"World\\\", \\\"It is not possible to be added to more than one world one of the joint\\\");\\r\\n        }\\r\\n        if(this.joints!=null)(this.joints.prev=joint).next=this.joints;\\r\\n        this.joints=joint;\\r\\n        joint.setParent( this );\\r\\n        this.numJoints++;\\r\\n        joint.awake();\\r\\n        joint.attach();\\r\\n\\r\\n    },\\r\\n\\r\\n    /**\\r\\n    * I will remove the joint from the world.\\r\\n    * Joint that has been added will be the operands of each step.\\r\\n    * @param  shape Joint to be deleted\\r\\n    */\\r\\n    removeJoint: function ( joint ) {\\r\\n\\r\\n        var remove=joint;\\r\\n        var prev=remove.prev;\\r\\n        var next=remove.next;\\r\\n        if(prev!==null)prev.next=next;\\r\\n        if(next!==null)next.prev=prev;\\r\\n        if(this.joints==remove)this.joints=next;\\r\\n        remove.prev=null;\\r\\n        remove.next=null;\\r\\n        this.numJoints--;\\r\\n        remove.awake();\\r\\n        remove.detach();\\r\\n        remove.parent=null;\\r\\n\\r\\n    },\\r\\n\\r\\n    addContact: function ( s1, s2 ) {\\r\\n\\r\\n        var newContact;\\r\\n        if(this.unusedContacts!==null){\\r\\n            newContact=this.unusedContacts;\\r\\n            this.unusedContacts=this.unusedContacts.next;\\r\\n        }else{\\r\\n            newContact = new Contact();\\r\\n        }\\r\\n        newContact.attach(s1,s2);\\r\\n        newContact.detector = this.detectors[s1.type][s2.type];\\r\\n        if(this.contacts)(this.contacts.prev = newContact).next = this.contacts;\\r\\n        this.contacts = newContact;\\r\\n        this.numContacts++;\\r\\n\\r\\n    },\\r\\n\\r\\n    removeContact: function ( contact ) {\\r\\n\\r\\n        var prev = contact.prev;\\r\\n        var next = contact.next;\\r\\n        if(next) next.prev = prev;\\r\\n        if(prev) prev.next = next;\\r\\n        if(this.contacts == contact) this.contacts = next;\\r\\n        contact.prev = null;\\r\\n        contact.next = null;\\r\\n        contact.detach();\\r\\n        contact.next = this.unusedContacts;\\r\\n        this.unusedContacts = contact;\\r\\n        this.numContacts--;\\r\\n\\r\\n    },\\r\\n\\r\\n    getContact: function ( b1, b2 ) {\\r\\n\\r\\n        b1 = b1.constructor === RigidBody ? b1.name : b1;\\r\\n        b2 = b2.constructor === RigidBody ? b2.name : b2;\\r\\n\\r\\n        var n1, n2;\\r\\n        var contact = this.contacts;\\r\\n        while(contact!==null){\\r\\n            n1 = contact.body1.name;\\r\\n            n2 = contact.body2.name;\\r\\n            if((n1===b1 && n2===b2) || (n2===b1 && n1===b2)){ if(contact.touching) return contact; else return null;}\\r\\n            else contact = contact.next;\\r\\n        }\\r\\n        return null;\\r\\n\\r\\n    },\\r\\n\\r\\n    checkContact: function ( name1, name2 ) {\\r\\n\\r\\n        var n1, n2;\\r\\n        var contact = this.contacts;\\r\\n        while(contact!==null){\\r\\n            n1 = contact.body1.name || ' ';\\r\\n            n2 = contact.body2.name || ' ';\\r\\n            if((n1==name1 && n2==name2) || (n2==name1 && n1==name2)){ if(contact.touching) return true; else return false;}\\r\\n            else contact = contact.next;\\r\\n        }\\r\\n        //return false;\\r\\n\\r\\n    },\\r\\n\\r\\n    callSleep: function( body ) {\\r\\n\\r\\n        if( !body.allowSleep ) return false;\\r\\n        if( body.linearVelocity.lengthSq() > 0.04 ) return false;\\r\\n        if( body.angularVelocity.lengthSq() > 0.25 ) return false;\\r\\n        return true;\\r\\n\\r\\n    },\\r\\n\\r\\n    /**\\r\\n    * I will proceed only time step seconds time of World.\\r\\n    */\\r\\n    step: function () {\\r\\n\\r\\n        var stat = this.isStat;\\r\\n\\r\\n        if( stat ) this.performance.setTime( 0 );\\r\\n\\r\\n        var body = this.rigidBodies;\\r\\n\\r\\n        while( body !== null ){\\r\\n\\r\\n            body.addedToIsland = false;\\r\\n\\r\\n            if( body.sleeping ) body.testWakeUp();\\r\\n\\r\\n            body = body.next;\\r\\n\\r\\n        }\\r\\n\\r\\n\\r\\n\\r\\n        //------------------------------------------------------\\r\\n        //   UPDATE BROADPHASE CONTACT\\r\\n        //------------------------------------------------------\\r\\n\\r\\n        if( stat ) this.performance.setTime( 1 );\\r\\n\\r\\n        this.broadPhase.detectPairs();\\r\\n\\r\\n        var pairs = this.broadPhase.pairs;\\r\\n\\r\\n        var i = this.broadPhase.numPairs;\\r\\n        //do{\\r\\n        while(i--){\\r\\n        //for(var i=0, l=numPairs; i<l; i++){\\r\\n            var pair = pairs[i];\\r\\n            var s1;\\r\\n            var s2;\\r\\n            if(pair.shape1.id<pair.shape2.id){\\r\\n                s1 = pair.shape1;\\r\\n                s2 = pair.shape2;\\r\\n            }else{\\r\\n                s1 = pair.shape2;\\r\\n                s2 = pair.shape1;\\r\\n            }\\r\\n\\r\\n            var link;\\r\\n            if( s1.numContacts < s2.numContacts ) link = s1.contactLink;\\r\\n            else link = s2.contactLink;\\r\\n\\r\\n            var exists = false;\\r\\n            while(link){\\r\\n                var contact = link.contact;\\r\\n                if( contact.shape1 == s1 && contact.shape2 == s2 ){\\r\\n                    contact.persisting = true;\\r\\n                    exists = true;// contact already exists\\r\\n                    break;\\r\\n                }\\r\\n                link = link.next;\\r\\n            }\\r\\n            if(!exists){\\r\\n                this.addContact( s1, s2 );\\r\\n            }\\r\\n        }// while(i-- >0);\\r\\n\\r\\n        if( stat ) this.performance.calcBroadPhase();\\r\\n\\r\\n        //------------------------------------------------------\\r\\n        //   UPDATE NARROWPHASE CONTACT\\r\\n        //------------------------------------------------------\\r\\n\\r\\n        // update & narrow phase\\r\\n        this.numContactPoints = 0;\\r\\n        contact = this.contacts;\\r\\n        while( contact!==null ){\\r\\n            if(!contact.persisting){\\r\\n                if ( contact.shape1.aabb.intersectTest( contact.shape2.aabb ) ) {\\r\\n                /*var aabb1=contact.shape1.aabb;\\r\\n                var aabb2=contact.shape2.aabb;\\r\\n                if(\\r\\n\\t                aabb1.minX>aabb2.maxX || aabb1.maxX<aabb2.minX ||\\r\\n\\t                aabb1.minY>aabb2.maxY || aabb1.maxY<aabb2.minY ||\\r\\n\\t                aabb1.minZ>aabb2.maxZ || aabb1.maxZ<aabb2.minZ\\r\\n                ){*/\\r\\n                    var next = contact.next;\\r\\n                    this.removeContact(contact);\\r\\n                    contact = next;\\r\\n                    continue;\\r\\n                }\\r\\n            }\\r\\n            var b1 = contact.body1;\\r\\n            var b2 = contact.body2;\\r\\n\\r\\n            if( b1.isDynamic && !b1.sleeping || b2.isDynamic && !b2.sleeping ) contact.updateManifold();\\r\\n\\r\\n            this.numContactPoints += contact.manifold.numPoints;\\r\\n            contact.persisting = false;\\r\\n            contact.constraint.addedToIsland = false;\\r\\n            contact = contact.next;\\r\\n\\r\\n        }\\r\\n\\r\\n        if( stat ) this.performance.calcNarrowPhase();\\r\\n\\r\\n        //------------------------------------------------------\\r\\n        //   SOLVE ISLANDS\\r\\n        //------------------------------------------------------\\r\\n\\r\\n        var invTimeStep = 1 / this.timeStep;\\r\\n        var joint;\\r\\n        var constraint;\\r\\n\\r\\n        for( joint = this.joints; joint !== null; joint = joint.next ){\\r\\n            joint.addedToIsland = false;\\r\\n        }\\r\\n\\r\\n\\r\\n        // clear old island array\\r\\n        this.islandRigidBodies = [];\\r\\n        this.islandConstraints = [];\\r\\n        this.islandStack = [];\\r\\n\\r\\n        if( stat ) this.performance.setTime( 1 );\\r\\n\\r\\n        this.numIslands = 0;\\r\\n\\r\\n        // build and solve simulation islands\\r\\n\\r\\n        for( var base = this.rigidBodies; base !== null; base = base.next ){\\r\\n\\r\\n            if( base.addedToIsland || base.isStatic || base.sleeping ) continue;// ignore\\r\\n\\r\\n            if( base.isLonely() ){// update single body\\r\\n                if( base.isDynamic ){\\r\\n                    base.linearVelocity.addScaledVector( this.gravity, this.timeStep );\\r\\n                    /*base.linearVelocity.x+=this.gravity.x*this.timeStep;\\r\\n                    base.linearVelocity.y+=this.gravity.y*this.timeStep;\\r\\n                    base.linearVelocity.z+=this.gravity.z*this.timeStep;*/\\r\\n                }\\r\\n                if( this.callSleep( base ) ) {\\r\\n                    base.sleepTime += this.timeStep;\\r\\n                    if( base.sleepTime > 0.5 ) base.sleep();\\r\\n                    else base.updatePosition( this.timeStep );\\r\\n                }else{\\r\\n                    base.sleepTime = 0;\\r\\n                    base.updatePosition( this.timeStep );\\r\\n                }\\r\\n                this.numIslands++;\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            var islandNumRigidBodies = 0;\\r\\n            var islandNumConstraints = 0;\\r\\n            var stackCount = 1;\\r\\n            // add rigid body to stack\\r\\n            this.islandStack[0] = base;\\r\\n            base.addedToIsland = true;\\r\\n\\r\\n            // build an island\\r\\n            do{\\r\\n                // get rigid body from stack\\r\\n                body = this.islandStack[--stackCount];\\r\\n                this.islandStack[stackCount] = null;\\r\\n                body.sleeping = false;\\r\\n                // add rigid body to the island\\r\\n                this.islandRigidBodies[islandNumRigidBodies++] = body;\\r\\n                if(body.isStatic) continue;\\r\\n\\r\\n                // search connections\\r\\n                for( var cs = body.contactLink; cs !== null; cs = cs.next ) {\\r\\n                    var contact = cs.contact;\\r\\n                    constraint = contact.constraint;\\r\\n                    if( constraint.addedToIsland || !contact.touching ) continue;// ignore\\r\\n\\r\\n                    // add constraint to the island\\r\\n                    this.islandConstraints[islandNumConstraints++] = constraint;\\r\\n                    constraint.addedToIsland = true;\\r\\n                    var next = cs.body;\\r\\n\\r\\n                    if(next.addedToIsland) continue;\\r\\n\\r\\n                    // add rigid body to stack\\r\\n                    this.islandStack[stackCount++] = next;\\r\\n                    next.addedToIsland = true;\\r\\n                }\\r\\n                for( var js = body.jointLink; js !== null; js = js.next ) {\\r\\n                    constraint = js.joint;\\r\\n\\r\\n                    if(constraint.addedToIsland) continue;// ignore\\r\\n\\r\\n                    // add constraint to the island\\r\\n                    this.islandConstraints[islandNumConstraints++] = constraint;\\r\\n                    constraint.addedToIsland = true;\\r\\n                    next = js.body;\\r\\n                    if( next.addedToIsland || !next.isDynamic ) continue;\\r\\n\\r\\n                    // add rigid body to stack\\r\\n                    this.islandStack[stackCount++] = next;\\r\\n                    next.addedToIsland = true;\\r\\n                }\\r\\n            } while( stackCount != 0 );\\r\\n\\r\\n            // update velocities\\r\\n            var gVel = new Vec3().addScaledVector( this.gravity, this.timeStep );\\r\\n            /*var gx=this.gravity.x*this.timeStep;\\r\\n            var gy=this.gravity.y*this.timeStep;\\r\\n            var gz=this.gravity.z*this.timeStep;*/\\r\\n            var j = islandNumRigidBodies;\\r\\n            while (j--){\\r\\n            //or(var j=0, l=islandNumRigidBodies; j<l; j++){\\r\\n                body = this.islandRigidBodies[j];\\r\\n                if(body.isDynamic){\\r\\n                    body.linearVelocity.addEqual(gVel);\\r\\n                    /*body.linearVelocity.x+=gx;\\r\\n                    body.linearVelocity.y+=gy;\\r\\n                    body.linearVelocity.z+=gz;*/\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // randomizing order\\r\\n            if(this.enableRandomizer){\\r\\n                //for(var j=1, l=islandNumConstraints; j<l; j++){\\r\\n                j = islandNumConstraints;\\r\\n                while(j--){ if(j!==0){\\r\\n                        var swap = (this.randX=(this.randX*this.randA+this.randB&0x7fffffff))/2147483648.0*j|0;\\r\\n                        constraint = this.islandConstraints[j];\\r\\n                        this.islandConstraints[j] = this.islandConstraints[swap];\\r\\n                        this.islandConstraints[swap] = constraint;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // solve contraints\\r\\n\\r\\n            j = islandNumConstraints;\\r\\n            while(j--){\\r\\n            //for(j=0, l=islandNumConstraints; j<l; j++){\\r\\n                this.islandConstraints[j].preSolve( this.timeStep, invTimeStep );// pre-solve\\r\\n            }\\r\\n            var k = this.numIterations;\\r\\n            while(k--){\\r\\n            //for(var k=0, l=this.numIterations; k<l; k++){\\r\\n                j = islandNumConstraints;\\r\\n                while(j--){\\r\\n                //for(j=0, m=islandNumConstraints; j<m; j++){\\r\\n                    this.islandConstraints[j].solve();// main-solve\\r\\n                }\\r\\n            }\\r\\n            j = islandNumConstraints;\\r\\n            while(j--){\\r\\n            //for(j=0, l=islandNumConstraints; j<l; j++){\\r\\n                this.islandConstraints[j].postSolve();// post-solve\\r\\n                this.islandConstraints[j] = null;// gc\\r\\n            }\\r\\n\\r\\n            // sleeping check\\r\\n\\r\\n            var sleepTime = 10;\\r\\n            j = islandNumRigidBodies;\\r\\n            while(j--){\\r\\n            //for(j=0, l=islandNumRigidBodies;j<l;j++){\\r\\n                body = this.islandRigidBodies[j];\\r\\n                if( this.callSleep( body ) ){\\r\\n                    body.sleepTime += this.timeStep;\\r\\n                    if( body.sleepTime < sleepTime ) sleepTime = body.sleepTime;\\r\\n                }else{\\r\\n                    body.sleepTime = 0;\\r\\n                    sleepTime = 0;\\r\\n                    continue;\\r\\n                }\\r\\n            }\\r\\n            if(sleepTime > 0.5){\\r\\n                // sleep the island\\r\\n                j = islandNumRigidBodies;\\r\\n                while(j--){\\r\\n                //for(j=0, l=islandNumRigidBodies;j<l;j++){\\r\\n                    this.islandRigidBodies[j].sleep();\\r\\n                    this.islandRigidBodies[j] = null;// gc\\r\\n                }\\r\\n            }else{\\r\\n                // update positions\\r\\n                j = islandNumRigidBodies;\\r\\n                while(j--){\\r\\n                //for(j=0, l=islandNumRigidBodies;j<l;j++){\\r\\n                    this.islandRigidBodies[j].updatePosition( this.timeStep );\\r\\n                    this.islandRigidBodies[j] = null;// gc\\r\\n                }\\r\\n            }\\r\\n            this.numIslands++;\\r\\n        }\\r\\n\\r\\n        //------------------------------------------------------\\r\\n        //   END SIMULATION\\r\\n        //------------------------------------------------------\\r\\n\\r\\n        if( stat ) this.performance.calcEnd();\\r\\n\\r\\n        if( this.postLoop !== null ) this.postLoop();\\r\\n\\r\\n    },\\r\\n\\r\\n    // remove someting to world\\r\\n\\r\\n    remove: function( obj ){\\r\\n\\r\\n    },\\r\\n\\r\\n    // add someting to world\\r\\n    \\r\\n    add: function( o ){\\r\\n\\r\\n        o = o || {};\\r\\n\\r\\n        var type = o.type || \\\"box\\\";\\r\\n        if( type.constructor === String ) type = [ type ];\\r\\n        var isJoint = type[0].substring( 0, 5 ) === 'joint' ? true : false;\\r\\n\\r\\n        if( isJoint ) return this.initJoint( type[0], o );\\r\\n        else return this.initBody( type, o );\\r\\n\\r\\n    },\\r\\n\\r\\n    initBody: function( type, o ){\\r\\n\\r\\n        var invScale = this.invScale;\\r\\n\\r\\n        // body dynamic or static\\r\\n        var move = o.move || false;\\r\\n        var kinematic = o.kinematic || false;\\r\\n\\r\\n        // POSITION\\r\\n\\r\\n        // body position\\r\\n        var p = o.pos || [0,0,0];\\r\\n        p = p.map( function(x) { return x * invScale; } );\\r\\n\\r\\n        // shape position\\r\\n        var p2 = o.posShape || [0,0,0];\\r\\n        p2 = p2.map( function(x) { return x * invScale; } );\\r\\n\\r\\n        // ROTATION\\r\\n\\r\\n        // body rotation in degree\\r\\n        var r = o.rot || [0,0,0];\\r\\n        r = r.map( function(x) { return x * _Math.degtorad; } );\\r\\n\\r\\n        // shape rotation in degree\\r\\n        var r2 = o.rotShape || [0,0,0];\\r\\n        r2 = r.map( function(x) { return x * _Math.degtorad; } );\\r\\n\\r\\n        // SIZE\\r\\n\\r\\n        // shape size\\r\\n        var s = o.size === undefined ? [1,1,1] : o.size;\\r\\n        if( s.length === 1 ){ s[1] = s[0]; }\\r\\n        if( s.length === 2 ){ s[2] = s[0]; }\\r\\n        s = s.map( function(x) { return x * invScale; } );\\r\\n\\r\\n        \\r\\n\\r\\n        // body physics settings\\r\\n        var sc = new ShapeConfig();\\r\\n        // The density of the shape.\\r\\n        if( o.density !== undefined ) sc.density = o.density;\\r\\n        // The coefficient of friction of the shape.\\r\\n        if( o.friction !== undefined ) sc.friction = o.friction;\\r\\n        // The coefficient of restitution of the shape.\\r\\n        if( o.restitution !== undefined ) sc.restitution = o.restitution;\\r\\n        // The bits of the collision groups to which the shape belongs.\\r\\n        if( o.belongsTo !== undefined ) sc.belongsTo = o.belongsTo;\\r\\n        // The bits of the collision groups with which the shape collides.\\r\\n        if( o.collidesWith !== undefined ) sc.collidesWith = o.collidesWith;\\r\\n\\r\\n        if(o.config !== undefined ){\\r\\n            if( o.config[0] !== undefined ) sc.density = o.config[0];\\r\\n            if( o.config[1] !== undefined ) sc.friction = o.config[1];\\r\\n            if( o.config[2] !== undefined ) sc.restitution = o.config[2];\\r\\n            if( o.config[3] !== undefined ) sc.belongsTo = o.config[3];\\r\\n            if( o.config[4] !== undefined ) sc.collidesWith = o.config[4];\\r\\n        }\\r\\n\\r\\n\\r\\n       /* if(o.massPos){\\r\\n            o.massPos = o.massPos.map(function(x) { return x * invScale; });\\r\\n            sc.relativePosition.set( o.massPos[0], o.massPos[1], o.massPos[2] );\\r\\n        }\\r\\n        if(o.massRot){\\r\\n            o.massRot = o.massRot.map(function(x) { return x * _Math.degtorad; });\\r\\n            var q = new Quat().setFromEuler( o.massRot[0], o.massRot[1], o.massRot[2] );\\r\\n            sc.relativeRotation = new Mat33().setQuat( q );//_Math.EulerToMatrix( o.massRot[0], o.massRot[1], o.massRot[2] );\\r\\n        }*/\\r\\n\\r\\n        var position = new Vec3( p[0], p[1], p[2] );\\r\\n        var rotation = new Quat().setFromEuler( r[0], r[1], r[2] );\\r\\n\\r\\n        // rigidbody\\r\\n        var body = new RigidBody( position, rotation );\\r\\n        //var body = new RigidBody( p[0], p[1], p[2], r[0], r[1], r[2], r[3], this.scale, this.invScale );\\r\\n\\r\\n        // SHAPES\\r\\n\\r\\n        var shape, n;\\r\\n\\r\\n        for( var i = 0; i < type.length; i++ ){\\r\\n\\r\\n            n = i * 3;\\r\\n\\r\\n            if( p2[n] !== undefined ) sc.relativePosition.set( p2[n], p2[n+1], p2[n+2] );\\r\\n            if( r2[n] !== undefined ) sc.relativeRotation.setQuat( new Quat().setFromEuler( r2[n], r2[n+1], r2[n+2] ) );\\r\\n            \\r\\n            switch( type[i] ){\\r\\n                case \\\"sphere\\\": shape = new Sphere( sc, s[n] ); break;\\r\\n                case \\\"cylinder\\\": shape = new Cylinder( sc, s[n], s[n+1] ); break;\\r\\n                case \\\"box\\\": shape = new Box( sc, s[n], s[n+1], s[n+2] ); break;\\r\\n                case \\\"plane\\\": shape = new Plane( sc ); break\\r\\n            }\\r\\n\\r\\n            body.addShape( shape );\\r\\n            \\r\\n        }\\r\\n\\r\\n        // body can sleep or not\\r\\n        if( o.neverSleep || kinematic) body.allowSleep = false;\\r\\n        else body.allowSleep = true;\\r\\n\\r\\n        body.isKinematic = kinematic;\\r\\n\\r\\n        // body static or dynamic\\r\\n        if( move ){\\r\\n\\r\\n            if(o.massPos || o.massRot) body.setupMass( BODY_DYNAMIC, false );\\r\\n            else body.setupMass( BODY_DYNAMIC, true );\\r\\n\\r\\n            // body can sleep or not\\r\\n            //if( o.neverSleep ) body.allowSleep = false;\\r\\n            //else body.allowSleep = true;\\r\\n\\r\\n        } else {\\r\\n\\r\\n            body.setupMass( BODY_STATIC );\\r\\n\\r\\n        }\\r\\n\\r\\n        if( o.name !== undefined ) body.name = o.name;\\r\\n        //else if( move ) body.name = this.numRigidBodies;\\r\\n\\r\\n        // finaly add to physics world\\r\\n        this.addRigidBody( body );\\r\\n\\r\\n        // force sleep on not\\r\\n        if( move ){\\r\\n            if( o.sleep ) body.sleep();\\r\\n            else body.awake();\\r\\n        }\\r\\n\\r\\n        return body;\\r\\n\\r\\n\\r\\n    },\\r\\n\\r\\n    initJoint: function( type, o ){\\r\\n\\r\\n        //var type = type;\\r\\n        var invScale = this.invScale;\\r\\n\\r\\n        var axe1 = o.axe1 || [1,0,0];\\r\\n        var axe2 = o.axe2 || [1,0,0];\\r\\n        var pos1 = o.pos1 || [0,0,0];\\r\\n        var pos2 = o.pos2 || [0,0,0];\\r\\n\\r\\n        pos1 = pos1.map(function(x){ return x * invScale; });\\r\\n        pos2 = pos2.map(function(x){ return x * invScale; });\\r\\n\\r\\n        var min, max;\\r\\n        if( type === \\\"jointDistance\\\" ){\\r\\n            min = o.min || 0;\\r\\n            max = o.max || 10;\\r\\n            min = min * invScale;\\r\\n            max = max * invScale;\\r\\n        }else{\\r\\n            min = o.min || 57.29578;\\r\\n            max = o.max || 0;\\r\\n            min = min * _Math.degtorad;\\r\\n            max = max * _Math.degtorad;\\r\\n        }\\r\\n\\r\\n        var limit = o.limit || null;\\r\\n        var spring = o.spring || null;\\r\\n        var motor = o.motor || null;\\r\\n\\r\\n        // joint setting\\r\\n        var jc = new JointConfig();\\r\\n        jc.scale = this.scale;\\r\\n        jc.invScale = this.invScale;\\r\\n        jc.allowCollision = o.collision || false;\\r\\n        jc.localAxis1.set( axe1[0], axe1[1], axe1[2] );\\r\\n        jc.localAxis2.set( axe2[0], axe2[1], axe2[2] );\\r\\n        jc.localAnchorPoint1.set( pos1[0], pos1[1], pos1[2] );\\r\\n        jc.localAnchorPoint2.set( pos2[0], pos2[1], pos2[2] );\\r\\n\\r\\n        var b1 = null;\\r\\n        var b2 = null;\\r\\n\\r\\n        if( o.body1 === undefined || o.body2 === undefined ) return printError('World', \\\"Can't add joint if attach rigidbodys not define !\\\" );\\r\\n\\r\\n        if ( o.body1.constructor === String ) { b1 = this.getByName( o.body1 ); }\\r\\n        else if ( o.body1.constructor === Number ) { b1 = this.getByName( o.body1 ); }\\r\\n        else if ( o.body1.constructor === RigidBody ) { b1 = o.body1; }\\r\\n\\r\\n        if ( o.body2.constructor === String ) { b2 = this.getByName( o.body2 ); }\\r\\n        else if ( o.body2.constructor === Number ) { b2 = this.getByName( o.body2 ); }\\r\\n        else if ( o.body2.constructor === RigidBody ) { b2 = o.body2; }\\r\\n\\r\\n        if( b1 === null || b2 === null ) return printError('World', \\\"Can't add joint attach rigidbodys not find !\\\" );\\r\\n\\r\\n        jc.body1 = b1;\\r\\n        jc.body2 = b2;\\r\\n\\r\\n        var joint;\\r\\n        switch( type ){\\r\\n            case \\\"jointDistance\\\": joint = new DistanceJoint(jc, min, max);\\r\\n                if(spring !== null) joint.limitMotor.setSpring( spring[0], spring[1] );\\r\\n                if(motor !== null) joint.limitMotor.setMotor( motor[0], motor[1] );\\r\\n            break;\\r\\n            case \\\"jointHinge\\\": case \\\"joint\\\": joint = new HingeJoint(jc, min, max);\\r\\n                if(spring !== null) joint.limitMotor.setSpring( spring[0], spring[1] );// soften the joint ex: 100, 0.2\\r\\n                if(motor !== null) joint.limitMotor.setMotor( motor[0], motor[1] );\\r\\n            break;\\r\\n            case \\\"jointPrisme\\\": joint = new PrismaticJoint(jc, min, max); break;\\r\\n            case \\\"jointSlide\\\": joint = new SliderJoint(jc, min, max); break;\\r\\n            case \\\"jointBall\\\": joint = new BallAndSocketJoint(jc); break;\\r\\n            case \\\"jointWheel\\\": joint = new WheelJoint(jc);\\r\\n                if(limit !== null) joint.rotationalLimitMotor1.setLimit( limit[0], limit[1] );\\r\\n                if(spring !== null) joint.rotationalLimitMotor1.setSpring( spring[0], spring[1] );\\r\\n                if(motor !== null) joint.rotationalLimitMotor1.setMotor( motor[0], motor[1] );\\r\\n            break;\\r\\n        }\\r\\n\\r\\n        joint.name = o.name || '';\\r\\n        // finaly add to physics world\\r\\n        this.addJoint( joint );\\r\\n\\r\\n        return joint;\\r\\n\\r\\n    },\\r\\n\\r\\n\\r\\n} );\\n\\n// test version\\r\\n\\r\\n//export { RigidBody } from './core/RigidBody_X.js';\\r\\n//export { World } from './core/World_X.js';\\n\\nexport { _Math as Math, Vec3, Quat, Mat33, Shape, Box, Sphere, Cylinder, Plane, Particle, ShapeConfig, LimitMotor, HingeJoint, BallAndSocketJoint, DistanceJoint, PrismaticJoint, SliderJoint, WheelJoint, JointConfig, RigidBody, World, REVISION, BR_NULL, BR_BRUTE_FORCE, BR_SWEEP_AND_PRUNE, BR_BOUNDING_VOLUME_TREE, BODY_NULL, BODY_DYNAMIC, BODY_STATIC, BODY_KINEMATIC, BODY_GHOST, SHAPE_NULL, SHAPE_SPHERE, SHAPE_BOX, SHAPE_CYLINDER, SHAPE_PLANE, SHAPE_PARTICLE, SHAPE_TETRA, JOINT_NULL, JOINT_DISTANCE, JOINT_BALL_AND_SOCKET, JOINT_HINGE, JOINT_WHEEL, JOINT_SLIDER, JOINT_PRISMATIC, AABB_PROX, printError, InfoDisplay };\\n\",\"/* three-orbitcontrols addendum */ var THREE = require('three');\\n/**\\n * @author qiao / https://github.com/qiao\\n * @author mrdoob / http://mrdoob.com\\n * @author alteredq / http://alteredqualia.com/\\n * @author WestLangley / http://github.com/WestLangley\\n * @author erich666 / http://erichaines.com\\n */\\n\\n// This set of controls performs orbiting, dollying (zooming), and panning.\\n// Unlike TrackballControls, it maintains the \\\"up\\\" direction object.up (+Y by default).\\n//\\n//    Orbit - left mouse / touch: one-finger move\\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\\n//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\\n\\nTHREE.OrbitControls = function ( object, domElement ) {\\n\\n\\tthis.object = object;\\n\\n\\tthis.domElement = ( domElement !== undefined ) ? domElement : document;\\n\\n\\t// Set to false to disable this control\\n\\tthis.enabled = true;\\n\\n\\t// \\\"target\\\" sets the location of focus, where the object orbits around\\n\\tthis.target = new THREE.Vector3();\\n\\n\\t// How far you can dolly in and out ( PerspectiveCamera only )\\n\\tthis.minDistance = 0;\\n\\tthis.maxDistance = Infinity;\\n\\n\\t// How far you can zoom in and out ( OrthographicCamera only )\\n\\tthis.minZoom = 0;\\n\\tthis.maxZoom = Infinity;\\n\\n\\t// How far you can orbit vertically, upper and lower limits.\\n\\t// Range is 0 to Math.PI radians.\\n\\tthis.minPolarAngle = 0; // radians\\n\\tthis.maxPolarAngle = Math.PI; // radians\\n\\n\\t// How far you can orbit horizontally, upper and lower limits.\\n\\t// If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].\\n\\tthis.minAzimuthAngle = - Infinity; // radians\\n\\tthis.maxAzimuthAngle = Infinity; // radians\\n\\n\\t// Set to true to enable damping (inertia)\\n\\t// If damping is enabled, you must call controls.update() in your animation loop\\n\\tthis.enableDamping = false;\\n\\tthis.dampingFactor = 0.25;\\n\\n\\t// This option actually enables dollying in and out; left as \\\"zoom\\\" for backwards compatibility.\\n\\t// Set to false to disable zooming\\n\\tthis.enableZoom = true;\\n\\tthis.zoomSpeed = 1.0;\\n\\n\\t// Set to false to disable rotating\\n\\tthis.enableRotate = true;\\n\\tthis.rotateSpeed = 1.0;\\n\\n\\t// Set to false to disable panning\\n\\tthis.enablePan = true;\\n\\tthis.panSpeed = 1.0;\\n\\tthis.screenSpacePanning = false; // if true, pan in screen-space\\n\\tthis.keyPanSpeed = 7.0;\\t// pixels moved per arrow key push\\n\\n\\t// Set to true to automatically rotate around the target\\n\\t// If auto-rotate is enabled, you must call controls.update() in your animation loop\\n\\tthis.autoRotate = false;\\n\\tthis.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\\n\\n\\t// Set to false to disable use of the keys\\n\\tthis.enableKeys = true;\\n\\n\\t// The four arrow keys\\n\\tthis.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };\\n\\n\\t// Mouse buttons\\n\\tthis.mouseButtons = { LEFT: THREE.MOUSE.LEFT, MIDDLE: THREE.MOUSE.MIDDLE, RIGHT: THREE.MOUSE.RIGHT };\\n\\n\\t// for reset\\n\\tthis.target0 = this.target.clone();\\n\\tthis.position0 = this.object.position.clone();\\n\\tthis.zoom0 = this.object.zoom;\\n\\n\\t//\\n\\t// public methods\\n\\t//\\n\\n\\tthis.getPolarAngle = function () {\\n\\n\\t\\treturn spherical.phi;\\n\\n\\t};\\n\\n\\tthis.getAzimuthalAngle = function () {\\n\\n\\t\\treturn spherical.theta;\\n\\n\\t};\\n\\n\\tthis.saveState = function () {\\n\\n\\t\\tscope.target0.copy( scope.target );\\n\\t\\tscope.position0.copy( scope.object.position );\\n\\t\\tscope.zoom0 = scope.object.zoom;\\n\\n\\t};\\n\\n\\tthis.reset = function () {\\n\\n\\t\\tscope.target.copy( scope.target0 );\\n\\t\\tscope.object.position.copy( scope.position0 );\\n\\t\\tscope.object.zoom = scope.zoom0;\\n\\n\\t\\tscope.object.updateProjectionMatrix();\\n\\t\\tscope.dispatchEvent( changeEvent );\\n\\n\\t\\tscope.update();\\n\\n\\t\\tstate = STATE.NONE;\\n\\n\\t};\\n\\n\\t// this method is exposed, but perhaps it would be better if we can make it private...\\n\\tthis.update = function () {\\n\\n\\t\\tvar offset = new THREE.Vector3();\\n\\n\\t\\t// so camera.up is the orbit axis\\n\\t\\tvar quat = new THREE.Quaternion().setFromUnitVectors( object.up, new THREE.Vector3( 0, 1, 0 ) );\\n\\t\\tvar quatInverse = quat.clone().inverse();\\n\\n\\t\\tvar lastPosition = new THREE.Vector3();\\n\\t\\tvar lastQuaternion = new THREE.Quaternion();\\n\\n\\t\\treturn function update() {\\n\\n\\t\\t\\tvar position = scope.object.position;\\n\\n\\t\\t\\toffset.copy( position ).sub( scope.target );\\n\\n\\t\\t\\t// rotate offset to \\\"y-axis-is-up\\\" space\\n\\t\\t\\toffset.applyQuaternion( quat );\\n\\n\\t\\t\\t// angle from z-axis around y-axis\\n\\t\\t\\tspherical.setFromVector3( offset );\\n\\n\\t\\t\\tif ( scope.autoRotate && state === STATE.NONE ) {\\n\\n\\t\\t\\t\\trotateLeft( getAutoRotationAngle() );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tspherical.theta += sphericalDelta.theta;\\n\\t\\t\\tspherical.phi += sphericalDelta.phi;\\n\\n\\t\\t\\t// restrict theta to be between desired limits\\n\\t\\t\\tspherical.theta = Math.max( scope.minAzimuthAngle, Math.min( scope.maxAzimuthAngle, spherical.theta ) );\\n\\n\\t\\t\\t// restrict phi to be between desired limits\\n\\t\\t\\tspherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );\\n\\n\\t\\t\\tspherical.makeSafe();\\n\\n\\n\\t\\t\\tspherical.radius *= scale;\\n\\n\\t\\t\\t// restrict radius to be between desired limits\\n\\t\\t\\tspherical.radius = Math.max( scope.minDistance, Math.min( scope.maxDistance, spherical.radius ) );\\n\\n\\t\\t\\t// move target to panned location\\n\\t\\t\\tscope.target.add( panOffset );\\n\\n\\t\\t\\toffset.setFromSpherical( spherical );\\n\\n\\t\\t\\t// rotate offset back to \\\"camera-up-vector-is-up\\\" space\\n\\t\\t\\toffset.applyQuaternion( quatInverse );\\n\\n\\t\\t\\tposition.copy( scope.target ).add( offset );\\n\\n\\t\\t\\tscope.object.lookAt( scope.target );\\n\\n\\t\\t\\tif ( scope.enableDamping === true ) {\\n\\n\\t\\t\\t\\tsphericalDelta.theta *= ( 1 - scope.dampingFactor );\\n\\t\\t\\t\\tsphericalDelta.phi *= ( 1 - scope.dampingFactor );\\n\\n\\t\\t\\t\\tpanOffset.multiplyScalar( 1 - scope.dampingFactor );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tsphericalDelta.set( 0, 0, 0 );\\n\\n\\t\\t\\t\\tpanOffset.set( 0, 0, 0 );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tscale = 1;\\n\\n\\t\\t\\t// update condition is:\\n\\t\\t\\t// min(camera displacement, camera rotation in radians)^2 > EPS\\n\\t\\t\\t// using small-angle approximation cos(x/2) = 1 - x^2 / 8\\n\\n\\t\\t\\tif ( zoomChanged ||\\n\\t\\t\\t\\tlastPosition.distanceToSquared( scope.object.position ) > EPS ||\\n\\t\\t\\t\\t8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ) {\\n\\n\\t\\t\\t\\tscope.dispatchEvent( changeEvent );\\n\\n\\t\\t\\t\\tlastPosition.copy( scope.object.position );\\n\\t\\t\\t\\tlastQuaternion.copy( scope.object.quaternion );\\n\\t\\t\\t\\tzoomChanged = false;\\n\\n\\t\\t\\t\\treturn true;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn false;\\n\\n\\t\\t};\\n\\n\\t}();\\n\\n\\tthis.dispose = function () {\\n\\n\\t\\tscope.domElement.removeEventListener( 'contextmenu', onContextMenu, false );\\n\\t\\tscope.domElement.removeEventListener( 'mousedown', onMouseDown, false );\\n\\t\\tscope.domElement.removeEventListener( 'wheel', onMouseWheel, false );\\n\\n\\t\\tscope.domElement.removeEventListener( 'touchstart', onTouchStart, false );\\n\\t\\tscope.domElement.removeEventListener( 'touchend', onTouchEnd, false );\\n\\t\\tscope.domElement.removeEventListener( 'touchmove', onTouchMove, false );\\n\\n\\t\\tdocument.removeEventListener( 'mousemove', onMouseMove, false );\\n\\t\\tdocument.removeEventListener( 'mouseup', onMouseUp, false );\\n\\n\\t\\twindow.removeEventListener( 'keydown', onKeyDown, false );\\n\\n\\t\\t//scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?\\n\\n\\t};\\n\\n\\t//\\n\\t// internals\\n\\t//\\n\\n\\tvar scope = this;\\n\\n\\tvar changeEvent = { type: 'change' };\\n\\tvar startEvent = { type: 'start' };\\n\\tvar endEvent = { type: 'end' };\\n\\n\\tvar STATE = { NONE: - 1, ROTATE: 0, DOLLY: 1, PAN: 2, TOUCH_ROTATE: 3, TOUCH_DOLLY_PAN: 4 };\\n\\n\\tvar state = STATE.NONE;\\n\\n\\tvar EPS = 0.000001;\\n\\n\\t// current position in spherical coordinates\\n\\tvar spherical = new THREE.Spherical();\\n\\tvar sphericalDelta = new THREE.Spherical();\\n\\n\\tvar scale = 1;\\n\\tvar panOffset = new THREE.Vector3();\\n\\tvar zoomChanged = false;\\n\\n\\tvar rotateStart = new THREE.Vector2();\\n\\tvar rotateEnd = new THREE.Vector2();\\n\\tvar rotateDelta = new THREE.Vector2();\\n\\n\\tvar panStart = new THREE.Vector2();\\n\\tvar panEnd = new THREE.Vector2();\\n\\tvar panDelta = new THREE.Vector2();\\n\\n\\tvar dollyStart = new THREE.Vector2();\\n\\tvar dollyEnd = new THREE.Vector2();\\n\\tvar dollyDelta = new THREE.Vector2();\\n\\n\\tfunction getAutoRotationAngle() {\\n\\n\\t\\treturn 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\\n\\n\\t}\\n\\n\\tfunction getZoomScale() {\\n\\n\\t\\treturn Math.pow( 0.95, scope.zoomSpeed );\\n\\n\\t}\\n\\n\\tfunction rotateLeft( angle ) {\\n\\n\\t\\tsphericalDelta.theta -= angle;\\n\\n\\t}\\n\\n\\tfunction rotateUp( angle ) {\\n\\n\\t\\tsphericalDelta.phi -= angle;\\n\\n\\t}\\n\\n\\tvar panLeft = function () {\\n\\n\\t\\tvar v = new THREE.Vector3();\\n\\n\\t\\treturn function panLeft( distance, objectMatrix ) {\\n\\n\\t\\t\\tv.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\\n\\t\\t\\tv.multiplyScalar( - distance );\\n\\n\\t\\t\\tpanOffset.add( v );\\n\\n\\t\\t};\\n\\n\\t}();\\n\\n\\tvar panUp = function () {\\n\\n\\t\\tvar v = new THREE.Vector3();\\n\\n\\t\\treturn function panUp( distance, objectMatrix ) {\\n\\n\\t\\t\\tif ( scope.screenSpacePanning === true ) {\\n\\n\\t\\t\\t\\tv.setFromMatrixColumn( objectMatrix, 1 );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tv.setFromMatrixColumn( objectMatrix, 0 );\\n\\t\\t\\t\\tv.crossVectors( scope.object.up, v );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tv.multiplyScalar( distance );\\n\\n\\t\\t\\tpanOffset.add( v );\\n\\n\\t\\t};\\n\\n\\t}();\\n\\n\\t// deltaX and deltaY are in pixels; right and down are positive\\n\\tvar pan = function () {\\n\\n\\t\\tvar offset = new THREE.Vector3();\\n\\n\\t\\treturn function pan( deltaX, deltaY ) {\\n\\n\\t\\t\\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\\n\\n\\t\\t\\tif ( scope.object.isPerspectiveCamera ) {\\n\\n\\t\\t\\t\\t// perspective\\n\\t\\t\\t\\tvar position = scope.object.position;\\n\\t\\t\\t\\toffset.copy( position ).sub( scope.target );\\n\\t\\t\\t\\tvar targetDistance = offset.length();\\n\\n\\t\\t\\t\\t// half of the fov is center to top of screen\\n\\t\\t\\t\\ttargetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\\n\\n\\t\\t\\t\\t// we use only clientHeight here so aspect ratio does not distort speed\\n\\t\\t\\t\\tpanLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\\n\\t\\t\\t\\tpanUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\\n\\n\\t\\t\\t} else if ( scope.object.isOrthographicCamera ) {\\n\\n\\t\\t\\t\\t// orthographic\\n\\t\\t\\t\\tpanLeft( deltaX * ( scope.object.right - scope.object.left ) / scope.object.zoom / element.clientWidth, scope.object.matrix );\\n\\t\\t\\t\\tpanUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom / element.clientHeight, scope.object.matrix );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t// camera neither orthographic nor perspective\\n\\t\\t\\t\\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\\n\\t\\t\\t\\tscope.enablePan = false;\\n\\n\\t\\t\\t}\\n\\n\\t\\t};\\n\\n\\t}();\\n\\n\\tfunction dollyIn( dollyScale ) {\\n\\n\\t\\tif ( scope.object.isPerspectiveCamera ) {\\n\\n\\t\\t\\tscale /= dollyScale;\\n\\n\\t\\t} else if ( scope.object.isOrthographicCamera ) {\\n\\n\\t\\t\\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom * dollyScale ) );\\n\\t\\t\\tscope.object.updateProjectionMatrix();\\n\\t\\t\\tzoomChanged = true;\\n\\n\\t\\t} else {\\n\\n\\t\\t\\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\\n\\t\\t\\tscope.enableZoom = false;\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tfunction dollyOut( dollyScale ) {\\n\\n\\t\\tif ( scope.object.isPerspectiveCamera ) {\\n\\n\\t\\t\\tscale *= dollyScale;\\n\\n\\t\\t} else if ( scope.object.isOrthographicCamera ) {\\n\\n\\t\\t\\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / dollyScale ) );\\n\\t\\t\\tscope.object.updateProjectionMatrix();\\n\\t\\t\\tzoomChanged = true;\\n\\n\\t\\t} else {\\n\\n\\t\\t\\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\\n\\t\\t\\tscope.enableZoom = false;\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\t//\\n\\t// event callbacks - update the object state\\n\\t//\\n\\n\\tfunction handleMouseDownRotate( event ) {\\n\\n\\t\\t//console.log( 'handleMouseDownRotate' );\\n\\n\\t\\trotateStart.set( event.clientX, event.clientY );\\n\\n\\t}\\n\\n\\tfunction handleMouseDownDolly( event ) {\\n\\n\\t\\t//console.log( 'handleMouseDownDolly' );\\n\\n\\t\\tdollyStart.set( event.clientX, event.clientY );\\n\\n\\t}\\n\\n\\tfunction handleMouseDownPan( event ) {\\n\\n\\t\\t//console.log( 'handleMouseDownPan' );\\n\\n\\t\\tpanStart.set( event.clientX, event.clientY );\\n\\n\\t}\\n\\n\\tfunction handleMouseMoveRotate( event ) {\\n\\n\\t\\t//console.log( 'handleMouseMoveRotate' );\\n\\n\\t\\trotateEnd.set( event.clientX, event.clientY );\\n\\n\\t\\trotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\\n\\n\\t\\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\\n\\n\\t\\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\\n\\n\\t\\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\\n\\n\\t\\trotateStart.copy( rotateEnd );\\n\\n\\t\\tscope.update();\\n\\n\\t}\\n\\n\\tfunction handleMouseMoveDolly( event ) {\\n\\n\\t\\t//console.log( 'handleMouseMoveDolly' );\\n\\n\\t\\tdollyEnd.set( event.clientX, event.clientY );\\n\\n\\t\\tdollyDelta.subVectors( dollyEnd, dollyStart );\\n\\n\\t\\tif ( dollyDelta.y > 0 ) {\\n\\n\\t\\t\\tdollyIn( getZoomScale() );\\n\\n\\t\\t} else if ( dollyDelta.y < 0 ) {\\n\\n\\t\\t\\tdollyOut( getZoomScale() );\\n\\n\\t\\t}\\n\\n\\t\\tdollyStart.copy( dollyEnd );\\n\\n\\t\\tscope.update();\\n\\n\\t}\\n\\n\\tfunction handleMouseMovePan( event ) {\\n\\n\\t\\t//console.log( 'handleMouseMovePan' );\\n\\n\\t\\tpanEnd.set( event.clientX, event.clientY );\\n\\n\\t\\tpanDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\\n\\n\\t\\tpan( panDelta.x, panDelta.y );\\n\\n\\t\\tpanStart.copy( panEnd );\\n\\n\\t\\tscope.update();\\n\\n\\t}\\n\\n\\tfunction handleMouseUp( event ) {\\n\\n\\t\\t// console.log( 'handleMouseUp' );\\n\\n\\t}\\n\\n\\tfunction handleMouseWheel( event ) {\\n\\n\\t\\t// console.log( 'handleMouseWheel' );\\n\\n\\t\\tif ( event.deltaY < 0 ) {\\n\\n\\t\\t\\tdollyOut( getZoomScale() );\\n\\n\\t\\t} else if ( event.deltaY > 0 ) {\\n\\n\\t\\t\\tdollyIn( getZoomScale() );\\n\\n\\t\\t}\\n\\n\\t\\tscope.update();\\n\\n\\t}\\n\\n\\tfunction handleKeyDown( event ) {\\n\\n\\t\\t//console.log( 'handleKeyDown' );\\n\\n\\t\\t// prevent the browser from scrolling on cursor up/down\\n\\n\\t\\tevent.preventDefault();\\n\\n\\t\\tswitch ( event.keyCode ) {\\n\\n\\t\\t\\tcase scope.keys.UP:\\n\\t\\t\\t\\tpan( 0, scope.keyPanSpeed );\\n\\t\\t\\t\\tscope.update();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase scope.keys.BOTTOM:\\n\\t\\t\\t\\tpan( 0, - scope.keyPanSpeed );\\n\\t\\t\\t\\tscope.update();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase scope.keys.LEFT:\\n\\t\\t\\t\\tpan( scope.keyPanSpeed, 0 );\\n\\t\\t\\t\\tscope.update();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase scope.keys.RIGHT:\\n\\t\\t\\t\\tpan( - scope.keyPanSpeed, 0 );\\n\\t\\t\\t\\tscope.update();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tfunction handleTouchStartRotate( event ) {\\n\\n\\t\\t//console.log( 'handleTouchStartRotate' );\\n\\n\\t\\trotateStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\\n\\n\\t}\\n\\n\\tfunction handleTouchStartDollyPan( event ) {\\n\\n\\t\\t//console.log( 'handleTouchStartDollyPan' );\\n\\n\\t\\tif ( scope.enableZoom ) {\\n\\n\\t\\t\\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\\n\\t\\t\\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\\n\\n\\t\\t\\tvar distance = Math.sqrt( dx * dx + dy * dy );\\n\\n\\t\\t\\tdollyStart.set( 0, distance );\\n\\n\\t\\t}\\n\\n\\t\\tif ( scope.enablePan ) {\\n\\n\\t\\t\\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\\n\\t\\t\\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\\n\\n\\t\\t\\tpanStart.set( x, y );\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tfunction handleTouchMoveRotate( event ) {\\n\\n\\t\\t//console.log( 'handleTouchMoveRotate' );\\n\\n\\t\\trotateEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\\n\\n\\t\\trotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\\n\\n\\t\\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\\n\\n\\t\\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\\n\\n\\t\\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\\n\\n\\t\\trotateStart.copy( rotateEnd );\\n\\n\\t\\tscope.update();\\n\\n\\t}\\n\\n\\tfunction handleTouchMoveDollyPan( event ) {\\n\\n\\t\\t//console.log( 'handleTouchMoveDollyPan' );\\n\\n\\t\\tif ( scope.enableZoom ) {\\n\\n\\t\\t\\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\\n\\t\\t\\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\\n\\n\\t\\t\\tvar distance = Math.sqrt( dx * dx + dy * dy );\\n\\n\\t\\t\\tdollyEnd.set( 0, distance );\\n\\n\\t\\t\\tdollyDelta.set( 0, Math.pow( dollyEnd.y / dollyStart.y, scope.zoomSpeed ) );\\n\\n\\t\\t\\tdollyIn( dollyDelta.y );\\n\\n\\t\\t\\tdollyStart.copy( dollyEnd );\\n\\n\\t\\t}\\n\\n\\t\\tif ( scope.enablePan ) {\\n\\n\\t\\t\\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\\n\\t\\t\\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\\n\\n\\t\\t\\tpanEnd.set( x, y );\\n\\n\\t\\t\\tpanDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\\n\\n\\t\\t\\tpan( panDelta.x, panDelta.y );\\n\\n\\t\\t\\tpanStart.copy( panEnd );\\n\\n\\t\\t}\\n\\n\\t\\tscope.update();\\n\\n\\t}\\n\\n\\tfunction handleTouchEnd( event ) {\\n\\n\\t\\t//console.log( 'handleTouchEnd' );\\n\\n\\t}\\n\\n\\t//\\n\\t// event handlers - FSM: listen for events and reset state\\n\\t//\\n\\n\\tfunction onMouseDown( event ) {\\n\\n\\t\\tif ( scope.enabled === false ) return;\\n\\n\\t\\t// Prevent the browser from scrolling.\\n\\n\\t\\tevent.preventDefault();\\n\\n\\t\\t// Manually set the focus since calling preventDefault above\\n\\t\\t// prevents the browser from setting it automatically.\\n\\n\\t\\tscope.domElement.focus ? scope.domElement.focus() : window.focus();\\n\\n\\t\\tswitch ( event.button ) {\\n\\n\\t\\t\\tcase scope.mouseButtons.LEFT:\\n\\n\\t\\t\\t\\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\\n\\n\\t\\t\\t\\t\\tif ( scope.enablePan === false ) return;\\n\\n\\t\\t\\t\\t\\thandleMouseDownPan( event );\\n\\n\\t\\t\\t\\t\\tstate = STATE.PAN;\\n\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\tif ( scope.enableRotate === false ) return;\\n\\n\\t\\t\\t\\t\\thandleMouseDownRotate( event );\\n\\n\\t\\t\\t\\t\\tstate = STATE.ROTATE;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase scope.mouseButtons.MIDDLE:\\n\\n\\t\\t\\t\\tif ( scope.enableZoom === false ) return;\\n\\n\\t\\t\\t\\thandleMouseDownDolly( event );\\n\\n\\t\\t\\t\\tstate = STATE.DOLLY;\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase scope.mouseButtons.RIGHT:\\n\\n\\t\\t\\t\\tif ( scope.enablePan === false ) return;\\n\\n\\t\\t\\t\\thandleMouseDownPan( event );\\n\\n\\t\\t\\t\\tstate = STATE.PAN;\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t}\\n\\n\\t\\tif ( state !== STATE.NONE ) {\\n\\n\\t\\t\\tdocument.addEventListener( 'mousemove', onMouseMove, false );\\n\\t\\t\\tdocument.addEventListener( 'mouseup', onMouseUp, false );\\n\\n\\t\\t\\tscope.dispatchEvent( startEvent );\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tfunction onMouseMove( event ) {\\n\\n\\t\\tif ( scope.enabled === false ) return;\\n\\n\\t\\tevent.preventDefault();\\n\\n\\t\\tswitch ( state ) {\\n\\n\\t\\t\\tcase STATE.ROTATE:\\n\\n\\t\\t\\t\\tif ( scope.enableRotate === false ) return;\\n\\n\\t\\t\\t\\thandleMouseMoveRotate( event );\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase STATE.DOLLY:\\n\\n\\t\\t\\t\\tif ( scope.enableZoom === false ) return;\\n\\n\\t\\t\\t\\thandleMouseMoveDolly( event );\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase STATE.PAN:\\n\\n\\t\\t\\t\\tif ( scope.enablePan === false ) return;\\n\\n\\t\\t\\t\\thandleMouseMovePan( event );\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tfunction onMouseUp( event ) {\\n\\n\\t\\tif ( scope.enabled === false ) return;\\n\\n\\t\\thandleMouseUp( event );\\n\\n\\t\\tdocument.removeEventListener( 'mousemove', onMouseMove, false );\\n\\t\\tdocument.removeEventListener( 'mouseup', onMouseUp, false );\\n\\n\\t\\tscope.dispatchEvent( endEvent );\\n\\n\\t\\tstate = STATE.NONE;\\n\\n\\t}\\n\\n\\tfunction onMouseWheel( event ) {\\n\\n\\t\\tif ( scope.enabled === false || scope.enableZoom === false || ( state !== STATE.NONE && state !== STATE.ROTATE ) ) return;\\n\\n\\t\\tevent.preventDefault();\\n\\t\\tevent.stopPropagation();\\n\\n\\t\\tscope.dispatchEvent( startEvent );\\n\\n\\t\\thandleMouseWheel( event );\\n\\n\\t\\tscope.dispatchEvent( endEvent );\\n\\n\\t}\\n\\n\\tfunction onKeyDown( event ) {\\n\\n\\t\\tif ( scope.enabled === false || scope.enableKeys === false || scope.enablePan === false ) return;\\n\\n\\t\\thandleKeyDown( event );\\n\\n\\t}\\n\\n\\tfunction onTouchStart( event ) {\\n\\n\\t\\tif ( scope.enabled === false ) return;\\n\\n\\t\\tevent.preventDefault();\\n\\n\\t\\tswitch ( event.touches.length ) {\\n\\n\\t\\t\\tcase 1:\\t// one-fingered touch: rotate\\n\\n\\t\\t\\t\\tif ( scope.enableRotate === false ) return;\\n\\n\\t\\t\\t\\thandleTouchStartRotate( event );\\n\\n\\t\\t\\t\\tstate = STATE.TOUCH_ROTATE;\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\t// two-fingered touch: dolly-pan\\n\\n\\t\\t\\t\\tif ( scope.enableZoom === false && scope.enablePan === false ) return;\\n\\n\\t\\t\\t\\thandleTouchStartDollyPan( event );\\n\\n\\t\\t\\t\\tstate = STATE.TOUCH_DOLLY_PAN;\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\n\\t\\t\\t\\tstate = STATE.NONE;\\n\\n\\t\\t}\\n\\n\\t\\tif ( state !== STATE.NONE ) {\\n\\n\\t\\t\\tscope.dispatchEvent( startEvent );\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tfunction onTouchMove( event ) {\\n\\n\\t\\tif ( scope.enabled === false ) return;\\n\\n\\t\\tevent.preventDefault();\\n\\t\\tevent.stopPropagation();\\n\\n\\t\\tswitch ( event.touches.length ) {\\n\\n\\t\\t\\tcase 1: // one-fingered touch: rotate\\n\\n\\t\\t\\t\\tif ( scope.enableRotate === false ) return;\\n\\t\\t\\t\\tif ( state !== STATE.TOUCH_ROTATE ) return; // is this needed?\\n\\n\\t\\t\\t\\thandleTouchMoveRotate( event );\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2: // two-fingered touch: dolly-pan\\n\\n\\t\\t\\t\\tif ( scope.enableZoom === false && scope.enablePan === false ) return;\\n\\t\\t\\t\\tif ( state !== STATE.TOUCH_DOLLY_PAN ) return; // is this needed?\\n\\n\\t\\t\\t\\thandleTouchMoveDollyPan( event );\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\n\\t\\t\\t\\tstate = STATE.NONE;\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tfunction onTouchEnd( event ) {\\n\\n\\t\\tif ( scope.enabled === false ) return;\\n\\n\\t\\thandleTouchEnd( event );\\n\\n\\t\\tscope.dispatchEvent( endEvent );\\n\\n\\t\\tstate = STATE.NONE;\\n\\n\\t}\\n\\n\\tfunction onContextMenu( event ) {\\n\\n\\t\\tif ( scope.enabled === false ) return;\\n\\n\\t\\tevent.preventDefault();\\n\\n\\t}\\n\\n\\t//\\n\\n\\tscope.domElement.addEventListener( 'contextmenu', onContextMenu, false );\\n\\n\\tscope.domElement.addEventListener( 'mousedown', onMouseDown, false );\\n\\tscope.domElement.addEventListener( 'wheel', onMouseWheel, false );\\n\\n\\tscope.domElement.addEventListener( 'touchstart', onTouchStart, false );\\n\\tscope.domElement.addEventListener( 'touchend', onTouchEnd, false );\\n\\tscope.domElement.addEventListener( 'touchmove', onTouchMove, false );\\n\\n\\twindow.addEventListener( 'keydown', onKeyDown, false );\\n\\n\\t// force an update at start\\n\\n\\tthis.update();\\n\\n};\\n\\nTHREE.OrbitControls.prototype = Object.create( THREE.EventDispatcher.prototype );\\nTHREE.OrbitControls.prototype.constructor = THREE.OrbitControls;\\n\\nObject.defineProperties( THREE.OrbitControls.prototype, {\\n\\n\\tcenter: {\\n\\n\\t\\tget: function () {\\n\\n\\t\\t\\tconsole.warn( 'THREE.OrbitControls: .center has been renamed to .target' );\\n\\t\\t\\treturn this.target;\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\t// backward compatibility\\n\\n\\tnoZoom: {\\n\\n\\t\\tget: function () {\\n\\n\\t\\t\\tconsole.warn( 'THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.' );\\n\\t\\t\\treturn ! this.enableZoom;\\n\\n\\t\\t},\\n\\n\\t\\tset: function ( value ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.' );\\n\\t\\t\\tthis.enableZoom = ! value;\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\tnoRotate: {\\n\\n\\t\\tget: function () {\\n\\n\\t\\t\\tconsole.warn( 'THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.' );\\n\\t\\t\\treturn ! this.enableRotate;\\n\\n\\t\\t},\\n\\n\\t\\tset: function ( value ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.' );\\n\\t\\t\\tthis.enableRotate = ! value;\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\tnoPan: {\\n\\n\\t\\tget: function () {\\n\\n\\t\\t\\tconsole.warn( 'THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.' );\\n\\t\\t\\treturn ! this.enablePan;\\n\\n\\t\\t},\\n\\n\\t\\tset: function ( value ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.' );\\n\\t\\t\\tthis.enablePan = ! value;\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\tnoKeys: {\\n\\n\\t\\tget: function () {\\n\\n\\t\\t\\tconsole.warn( 'THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.' );\\n\\t\\t\\treturn ! this.enableKeys;\\n\\n\\t\\t},\\n\\n\\t\\tset: function ( value ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.' );\\n\\t\\t\\tthis.enableKeys = ! value;\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\tstaticMoving: {\\n\\n\\t\\tget: function () {\\n\\n\\t\\t\\tconsole.warn( 'THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.' );\\n\\t\\t\\treturn ! this.enableDamping;\\n\\n\\t\\t},\\n\\n\\t\\tset: function ( value ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.' );\\n\\t\\t\\tthis.enableDamping = ! value;\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\tdynamicDampingFactor: {\\n\\n\\t\\tget: function () {\\n\\n\\t\\t\\tconsole.warn( 'THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.' );\\n\\t\\t\\treturn this.dampingFactor;\\n\\n\\t\\t},\\n\\n\\t\\tset: function ( value ) {\\n\\n\\t\\t\\tconsole.warn( 'THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.' );\\n\\t\\t\\tthis.dampingFactor = value;\\n\\n\\t\\t}\\n\\n\\t}\\n\\n} );\\n/* three-orbitcontrols addendum */ module.exports = exports.default = THREE.OrbitControls;\\n\",\"/**\\n * @author mrdoob / http://mrdoob.com/\\n * @author alteredq / http://alteredqualia.com/\\n * @author paulirish / http://paulirish.com/\\n */\\n\\nmodule.exports = function (object, domElement) {\\n\\n    this.object = object;\\n\\n    this.domElement = (domElement !== undefined) ? domElement : document;\\n\\n    this.enabled = true;\\n\\n    this.movementSpeed = 1.0;\\n    this.lookSpeed = 0.005;\\n\\n    this.lookVertical = true;\\n    this.autoForward = false;\\n\\n    this.activeLook = true;\\n\\n    this.heightSpeed = false;\\n    this.heightCoef = 1.0;\\n    this.heightMin = 0.0;\\n    this.heightMax = 1.0;\\n\\n    this.constrainVertical = false;\\n    this.verticalMin = 0;\\n    this.verticalMax = Math.PI;\\n\\n    this.autoSpeedFactor = 0.0;\\n\\n    this.mouseX = 0;\\n    this.mouseY = 0;\\n\\n    this.moveForward = false;\\n    this.moveBackward = false;\\n    this.moveLeft = false;\\n    this.moveRight = false;\\n\\n    this.mouseDragOn = false;\\n\\n    this.viewHalfX = 0;\\n    this.viewHalfY = 0;\\n\\n    // private variables\\n\\n    var lat = 0;\\n    var lon = 0;\\n\\n    var lookDirection = new THREE.Vector3();\\n    var spherical = new THREE.Spherical();\\n    var target = new THREE.Vector3();\\n\\n    //\\n\\n    if (this.domElement !== document) {\\n\\n        this.domElement.setAttribute('tabindex', - 1);\\n\\n    }\\n\\n    //\\n\\n    this.handleResize = function () {\\n\\n        if (this.domElement === document) {\\n\\n            this.viewHalfX = window.innerWidth / 2;\\n            this.viewHalfY = window.innerHeight / 2;\\n\\n        } else {\\n\\n            this.viewHalfX = this.domElement.offsetWidth / 2;\\n            this.viewHalfY = this.domElement.offsetHeight / 2;\\n\\n        }\\n\\n    };\\n\\n    this.onMouseDown = function (event) {\\n\\n        if (this.domElement !== document) {\\n\\n            this.domElement.focus();\\n\\n        }\\n\\n        event.preventDefault();\\n        event.stopPropagation();\\n\\n        if (this.activeLook) {\\n\\n            switch (event.button) {\\n\\n                case 0: this.moveForward = true; break;\\n                case 2: this.moveBackward = true; break;\\n\\n            }\\n\\n        }\\n\\n        this.mouseDragOn = true;\\n\\n    };\\n\\n    this.onMouseUp = function (event) {\\n\\n        event.preventDefault();\\n        event.stopPropagation();\\n\\n        if (this.activeLook) {\\n\\n            switch (event.button) {\\n\\n                case 0: this.moveForward = false; break;\\n                case 2: this.moveBackward = false; break;\\n\\n            }\\n\\n        }\\n\\n        this.mouseDragOn = false;\\n\\n    };\\n\\n    this.onMouseMove = function (event) {\\n\\n        if (this.domElement === document) {\\n\\n            this.mouseX = event.pageX - this.viewHalfX;\\n            this.mouseY = event.pageY - this.viewHalfY;\\n\\n        } else {\\n\\n            this.mouseX = event.pageX - this.domElement.offsetLeft - this.viewHalfX;\\n            this.mouseY = event.pageY - this.domElement.offsetTop - this.viewHalfY;\\n\\n        }\\n\\n    };\\n\\n    this.onKeyDown = function (event) {\\n\\n        //event.preventDefault();\\n\\n        switch (event.keyCode) {\\n\\n            case 38: /*up*/\\n            case 87: /*W*/ this.moveForward = true; break;\\n\\n            case 37: /*left*/\\n            case 65: /*A*/ this.moveLeft = true; break;\\n\\n            case 40: /*down*/\\n            case 83: /*S*/ this.moveBackward = true; break;\\n\\n            case 39: /*right*/\\n            case 68: /*D*/ this.moveRight = true; break;\\n\\n            case 82: /*R*/ this.moveUp = true; break;\\n            case 70: /*F*/ this.moveDown = true; break;\\n\\n        }\\n\\n    };\\n\\n    this.onKeyUp = function (event) {\\n\\n        switch (event.keyCode) {\\n\\n            case 38: /*up*/\\n            case 87: /*W*/ this.moveForward = false; break;\\n\\n            case 37: /*left*/\\n            case 65: /*A*/ this.moveLeft = false; break;\\n\\n            case 40: /*down*/\\n            case 83: /*S*/ this.moveBackward = false; break;\\n\\n            case 39: /*right*/\\n            case 68: /*D*/ this.moveRight = false; break;\\n\\n            case 82: /*R*/ this.moveUp = false; break;\\n            case 70: /*F*/ this.moveDown = false; break;\\n\\n        }\\n\\n    };\\n\\n    this.lookAt = function (x, y, z) {\\n\\n        if (x.isVector3) {\\n\\n            target.copy(x);\\n\\n        } else {\\n\\n            target.set(x, y, z);\\n\\n        }\\n\\n        this.object.lookAt(target);\\n\\n        setOrientation(this);\\n\\n        return this;\\n\\n    };\\n\\n    this.update = function () {\\n\\n        var targetPosition = new THREE.Vector3();\\n\\n        return function update(delta) {\\n\\n            if (this.enabled === false) return;\\n\\n            if (this.heightSpeed) {\\n\\n                var y = THREE.Math.clamp(this.object.position.y, this.heightMin, this.heightMax);\\n                var heightDelta = y - this.heightMin;\\n\\n                this.autoSpeedFactor = delta * (heightDelta * this.heightCoef);\\n\\n            } else {\\n\\n                this.autoSpeedFactor = 0.0;\\n\\n            }\\n\\n            var actualMoveSpeed = delta * this.movementSpeed;\\n\\n            if (this.moveForward || (this.autoForward && !this.moveBackward)) this.object.translateZ(- (actualMoveSpeed + this.autoSpeedFactor));\\n            if (this.moveBackward) this.object.translateZ(actualMoveSpeed);\\n\\n            if (this.moveLeft) this.object.translateX(- actualMoveSpeed);\\n            if (this.moveRight) this.object.translateX(actualMoveSpeed);\\n\\n            if (this.moveUp) this.object.translateY(actualMoveSpeed);\\n            if (this.moveDown) this.object.translateY(- actualMoveSpeed);\\n\\n            var actualLookSpeed = delta * this.lookSpeed;\\n\\n            if (!this.activeLook) {\\n\\n                actualLookSpeed = 0;\\n\\n            }\\n\\n            var verticalLookRatio = 1;\\n\\n            if (this.constrainVertical) {\\n\\n                verticalLookRatio = Math.PI / (this.verticalMax - this.verticalMin);\\n\\n            }\\n\\n            lon -= this.mouseX * actualLookSpeed;\\n            if (this.lookVertical) lat -= this.mouseY * actualLookSpeed * verticalLookRatio;\\n\\n            lat = Math.max(- 85, Math.min(85, lat));\\n\\n            var phi = THREE.Math.degToRad(90 - lat);\\n            var theta = THREE.Math.degToRad(lon);\\n\\n            if (this.constrainVertical) {\\n\\n                phi = THREE.Math.mapLinear(phi, 0, Math.PI, this.verticalMin, this.verticalMax);\\n\\n            }\\n\\n            var position = this.object.position;\\n\\n            targetPosition.setFromSphericalCoords(1, phi, theta).add(position);\\n\\n            this.object.lookAt(targetPosition);\\n\\n        };\\n\\n    }();\\n\\n    function contextmenu(event) {\\n\\n        event.preventDefault();\\n\\n    }\\n\\n    this.dispose = function () {\\n\\n        this.domElement.removeEventListener('contextmenu', contextmenu, false);\\n        this.domElement.removeEventListener('mousedown', _onMouseDown, false);\\n        this.domElement.removeEventListener('mousemove', _onMouseMove, false);\\n        this.domElement.removeEventListener('mouseup', _onMouseUp, false);\\n\\n        window.removeEventListener('keydown', _onKeyDown, false);\\n        window.removeEventListener('keyup', _onKeyUp, false);\\n\\n    };\\n\\n    var _onMouseMove = bind(this, this.onMouseMove);\\n    var _onMouseDown = bind(this, this.onMouseDown);\\n    var _onMouseUp = bind(this, this.onMouseUp);\\n    var _onKeyDown = bind(this, this.onKeyDown);\\n    var _onKeyUp = bind(this, this.onKeyUp);\\n\\n    this.domElement.addEventListener('contextmenu', contextmenu, false);\\n    this.domElement.addEventListener('mousemove', _onMouseMove, false);\\n    this.domElement.addEventListener('mousedown', _onMouseDown, false);\\n    this.domElement.addEventListener('mouseup', _onMouseUp, false);\\n\\n    window.addEventListener('keydown', _onKeyDown, false);\\n    window.addEventListener('keyup', _onKeyUp, false);\\n\\n    function bind(scope, fn) {\\n\\n        return function () {\\n\\n            fn.apply(scope, arguments);\\n\\n        };\\n\\n    }\\n\\n    function setOrientation(controls) {\\n\\n        var quaternion = controls.object.quaternion;\\n\\n        lookDirection.set(0, 0, - 1).applyQuaternion(quaternion);\\n        spherical.setFromVector3(lookDirection);\\n\\n        lat = 90 - THREE.Math.radToDeg(spherical.phi);\\n        lon = THREE.Math.radToDeg(spherical.theta);\\n\\n    }\\n\\n    this.handleResize();\\n\\n    setOrientation(this);\\n\\n};\"]}","code":"!function(t){var e={};function i(n){if(e[n])return e[n].exports;var r=e[n]={i:n,l:!1,exports:{}};return t[n].call(r.exports,r,r.exports,i),r.l=!0,r.exports}i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(t,\"__esModule\",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&\"object\"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,\"default\",{enumerable:!0,value:t}),2&e&&\"string\"!=typeof t)for(var r in t)i.d(n,r,function(e){return t[e]}.bind(null,r));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,\"a\",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p=\"\",i(i.s=8)}([function(t,e,i){\"use strict\";function n(){}i.r(e),i.d(e,\"WebGLMultisampleRenderTarget\",function(){return di}),i.d(e,\"WebGLRenderTargetCube\",function(){return mi}),i.d(e,\"WebGLRenderTarget\",function(){return pi}),i.d(e,\"WebGLRenderer\",function(){return _s}),i.d(e,\"ShaderLib\",function(){return Ni}),i.d(e,\"UniformsLib\",function(){return zi}),i.d(e,\"UniformsUtils\",function(){return Ti}),i.d(e,\"ShaderChunk\",function(){return bi}),i.d(e,\"FogExp2\",function(){return Ss}),i.d(e,\"Fog\",function(){return Es}),i.d(e,\"Scene\",function(){return Ts}),i.d(e,\"Sprite\",function(){return zs}),i.d(e,\"LOD\",function(){return Ns}),i.d(e,\"SkinnedMesh\",function(){return Rs}),i.d(e,\"Skeleton\",function(){return Cs}),i.d(e,\"Bone\",function(){return Is}),i.d(e,\"Mesh\",function(){return zn}),i.d(e,\"LineSegments\",function(){return Ds}),i.d(e,\"LineLoop\",function(){return Bs}),i.d(e,\"Line\",function(){return ks}),i.d(e,\"Points\",function(){return Us}),i.d(e,\"Group\",function(){return hs}),i.d(e,\"VideoTexture\",function(){return Fs}),i.d(e,\"DataTexture\",function(){return fi}),i.d(e,\"DataTexture3D\",function(){return Gn}),i.d(e,\"CompressedTexture\",function(){return Hs}),i.d(e,\"CubeTexture\",function(){return Hn}),i.d(e,\"CanvasTexture\",function(){return Gs}),i.d(e,\"DepthTexture\",function(){return js}),i.d(e,\"Texture\",function(){return ci}),i.d(e,\"AnimationLoader\",function(){return ko}),i.d(e,\"CompressedTextureLoader\",function(){return Do}),i.d(e,\"DataTextureLoader\",function(){return Bo}),i.d(e,\"CubeTextureLoader\",function(){return Uo}),i.d(e,\"TextureLoader\",function(){return Fo}),i.d(e,\"ObjectLoader\",function(){return Th}),i.d(e,\"MaterialLoader\",function(){return Mh}),i.d(e,\"BufferGeometryLoader\",function(){return Sh}),i.d(e,\"DefaultLoadingManager\",function(){return Co}),i.d(e,\"LoadingManager\",function(){return Ro}),i.d(e,\"ImageLoader\",function(){return Vo}),i.d(e,\"ImageBitmapLoader\",function(){return Oh}),i.d(e,\"FontLoader\",function(){return Vh}),i.d(e,\"FileLoader\",function(){return Oo}),i.d(e,\"Loader\",function(){return Uh}),i.d(e,\"LoaderUtils\",function(){return _h}),i.d(e,\"Cache\",function(){return No}),i.d(e,\"AudioLoader\",function(){return Kh}),i.d(e,\"SpotLightShadow\",function(){return mh}),i.d(e,\"SpotLight\",function(){return fh}),i.d(e,\"PointLight\",function(){return vh}),i.d(e,\"RectAreaLight\",function(){return wh}),i.d(e,\"HemisphereLight\",function(){return ph}),i.d(e,\"DirectionalLightShadow\",function(){return yh}),i.d(e,\"DirectionalLight\",function(){return xh}),i.d(e,\"AmbientLight\",function(){return bh}),i.d(e,\"LightShadow\",function(){return dh}),i.d(e,\"Light\",function(){return uh}),i.d(e,\"StereoCamera\",function(){return $h}),i.d(e,\"PerspectiveCamera\",function(){return cs}),i.d(e,\"OrthographicCamera\",function(){return gh}),i.d(e,\"CubeCamera\",function(){return tl}),i.d(e,\"ArrayCamera\",function(){return us}),i.d(e,\"Camera\",function(){return ls}),i.d(e,\"AudioListener\",function(){return il}),i.d(e,\"PositionalAudio\",function(){return rl}),i.d(e,\"AudioContext\",function(){return Qh}),i.d(e,\"AudioAnalyser\",function(){return sl}),i.d(e,\"Audio\",function(){return nl}),i.d(e,\"VectorKeyframeTrack\",function(){return Ao}),i.d(e,\"StringKeyframeTrack\",function(){return Lo}),i.d(e,\"QuaternionKeyframeTrack\",function(){return To}),i.d(e,\"NumberKeyframeTrack\",function(){return So}),i.d(e,\"ColorKeyframeTrack\",function(){return _o}),i.d(e,\"BooleanKeyframeTrack\",function(){return Mo}),i.d(e,\"PropertyMixer\",function(){return al}),i.d(e,\"PropertyBinding\",function(){return _l}),i.d(e,\"KeyframeTrack\",function(){return wo}),i.d(e,\"AnimationUtils\",function(){return vo}),i.d(e,\"AnimationObjectGroup\",function(){return Sl}),i.d(e,\"AnimationMixer\",function(){return Tl}),i.d(e,\"AnimationClip\",function(){return Po}),i.d(e,\"Uniform\",function(){return Ll}),i.d(e,\"InstancedBufferGeometry\",function(){return Al}),i.d(e,\"BufferGeometry\",function(){return on}),i.d(e,\"Geometry\",function(){return qi}),i.d(e,\"InterleavedBufferAttribute\",function(){return As}),i.d(e,\"InstancedInterleavedBuffer\",function(){return Pl}),i.d(e,\"InterleavedBuffer\",function(){return Ls}),i.d(e,\"InstancedBufferAttribute\",function(){return zl}),i.d(e,\"Face3\",function(){return Ii}),i.d(e,\"Object3D\",function(){return Hi}),i.d(e,\"Raycaster\",function(){return Nl}),i.d(e,\"Layers\",function(){return ki}),i.d(e,\"EventDispatcher\",function(){return n}),i.d(e,\"Clock\",function(){return el}),i.d(e,\"QuaternionLinearInterpolant\",function(){return Eo}),i.d(e,\"LinearInterpolant\",function(){return xo}),i.d(e,\"DiscreteInterpolant\",function(){return bo}),i.d(e,\"CubicInterpolant\",function(){return yo}),i.d(e,\"Interpolant\",function(){return go}),i.d(e,\"Triangle\",function(){return An}),i.d(e,\"Math\",function(){return Qe}),i.d(e,\"Spherical\",function(){return Il}),i.d(e,\"Cylindrical\",function(){return Ol}),i.d(e,\"Plane\",function(){return yi}),i.d(e,\"Frustum\",function(){return xi}),i.d(e,\"Sphere\",function(){return gi}),i.d(e,\"Ray\",function(){return Ln}),i.d(e,\"Matrix4\",function(){return $e}),i.d(e,\"Matrix3\",function(){return ii}),i.d(e,\"Box3\",function(){return vi}),i.d(e,\"Box2\",function(){return kl}),i.d(e,\"Line3\",function(){return Dl}),i.d(e,\"Euler\",function(){return Oi}),i.d(e,\"Vector4\",function(){return ui}),i.d(e,\"Vector3\",function(){return ei}),i.d(e,\"Vector2\",function(){return Ke}),i.d(e,\"Quaternion\",function(){return ti}),i.d(e,\"Color\",function(){return Ai}),i.d(e,\"ImmediateRenderObject\",function(){return Bl}),i.d(e,\"VertexNormalsHelper\",function(){return Vl}),i.d(e,\"SpotLightHelper\",function(){return Ul}),i.d(e,\"SkeletonHelper\",function(){return Fl}),i.d(e,\"PointLightHelper\",function(){return Hl}),i.d(e,\"RectAreaLightHelper\",function(){return Gl}),i.d(e,\"HemisphereLightHelper\",function(){return jl}),i.d(e,\"GridHelper\",function(){return Wl}),i.d(e,\"PolarGridHelper\",function(){return ql}),i.d(e,\"FaceNormalsHelper\",function(){return Xl}),i.d(e,\"DirectionalLightHelper\",function(){return Yl}),i.d(e,\"CameraHelper\",function(){return Jl}),i.d(e,\"BoxHelper\",function(){return Zl}),i.d(e,\"Box3Helper\",function(){return Ql}),i.d(e,\"PlaneHelper\",function(){return Kl}),i.d(e,\"ArrowHelper\",function(){return $l}),i.d(e,\"AxesHelper\",function(){return tc}),i.d(e,\"Shape\",function(){return ch}),i.d(e,\"Path\",function(){return lh}),i.d(e,\"ShapePath\",function(){return kh}),i.d(e,\"Font\",function(){return Dh}),i.d(e,\"CurvePath\",function(){return hh}),i.d(e,\"Curve\",function(){return Ho}),i.d(e,\"ImageUtils\",function(){return hi}),i.d(e,\"ShapeUtils\",function(){return Ra}),i.d(e,\"WebGLUtils\",function(){return os}),i.d(e,\"WireframeGeometry\",function(){return Ws}),i.d(e,\"ParametricGeometry\",function(){return qs}),i.d(e,\"ParametricBufferGeometry\",function(){return Xs}),i.d(e,\"TetrahedronGeometry\",function(){return Zs}),i.d(e,\"TetrahedronBufferGeometry\",function(){return Qs}),i.d(e,\"OctahedronGeometry\",function(){return Ks}),i.d(e,\"OctahedronBufferGeometry\",function(){return $s}),i.d(e,\"IcosahedronGeometry\",function(){return ta}),i.d(e,\"IcosahedronBufferGeometry\",function(){return ea}),i.d(e,\"DodecahedronGeometry\",function(){return ia}),i.d(e,\"DodecahedronBufferGeometry\",function(){return na}),i.d(e,\"PolyhedronGeometry\",function(){return Ys}),i.d(e,\"PolyhedronBufferGeometry\",function(){return Js}),i.d(e,\"TubeGeometry\",function(){return ra}),i.d(e,\"TubeBufferGeometry\",function(){return sa}),i.d(e,\"TorusKnotGeometry\",function(){return aa}),i.d(e,\"TorusKnotBufferGeometry\",function(){return oa}),i.d(e,\"TorusGeometry\",function(){return ha}),i.d(e,\"TorusBufferGeometry\",function(){return la}),i.d(e,\"TextGeometry\",function(){return Va}),i.d(e,\"TextBufferGeometry\",function(){return Ua}),i.d(e,\"SphereGeometry\",function(){return Fa}),i.d(e,\"SphereBufferGeometry\",function(){return Ha}),i.d(e,\"RingGeometry\",function(){return Ga}),i.d(e,\"RingBufferGeometry\",function(){return ja}),i.d(e,\"PlaneGeometry\",function(){return cn}),i.d(e,\"PlaneBufferGeometry\",function(){return un}),i.d(e,\"LatheGeometry\",function(){return Wa}),i.d(e,\"LatheBufferGeometry\",function(){return qa}),i.d(e,\"ShapeGeometry\",function(){return Xa}),i.d(e,\"ShapeBufferGeometry\",function(){return Ya}),i.d(e,\"ExtrudeGeometry\",function(){return Oa}),i.d(e,\"ExtrudeBufferGeometry\",function(){return ka}),i.d(e,\"EdgesGeometry\",function(){return Za}),i.d(e,\"ConeGeometry\",function(){return $a}),i.d(e,\"ConeBufferGeometry\",function(){return to}),i.d(e,\"CylinderGeometry\",function(){return Qa}),i.d(e,\"CylinderBufferGeometry\",function(){return Ka}),i.d(e,\"CircleGeometry\",function(){return eo}),i.d(e,\"CircleBufferGeometry\",function(){return io}),i.d(e,\"BoxGeometry\",function(){return hn}),i.d(e,\"CubeGeometry\",function(){return hn}),i.d(e,\"BoxBufferGeometry\",function(){return ln}),i.d(e,\"ShadowMaterial\",function(){return ro}),i.d(e,\"SpriteMaterial\",function(){return Ps}),i.d(e,\"RawShaderMaterial\",function(){return so}),i.d(e,\"ShaderMaterial\",function(){return Tn}),i.d(e,\"PointsMaterial\",function(){return Vs}),i.d(e,\"MeshPhysicalMaterial\",function(){return oo}),i.d(e,\"MeshStandardMaterial\",function(){return ao}),i.d(e,\"MeshPhongMaterial\",function(){return ho}),i.d(e,\"MeshToonMaterial\",function(){return lo}),i.d(e,\"MeshNormalMaterial\",function(){return co}),i.d(e,\"MeshLambertMaterial\",function(){return uo}),i.d(e,\"MeshDepthMaterial\",function(){return is}),i.d(e,\"MeshDistanceMaterial\",function(){return ns}),i.d(e,\"MeshBasicMaterial\",function(){return Pn}),i.d(e,\"MeshMatcapMaterial\",function(){return po}),i.d(e,\"LineDashedMaterial\",function(){return mo}),i.d(e,\"LineBasicMaterial\",function(){return Os}),i.d(e,\"Material\",function(){return En}),i.d(e,\"Float64BufferAttribute\",function(){return nn}),i.d(e,\"Float32BufferAttribute\",function(){return en}),i.d(e,\"Uint32BufferAttribute\",function(){return tn}),i.d(e,\"Int32BufferAttribute\",function(){return $i}),i.d(e,\"Uint16BufferAttribute\",function(){return Ki}),i.d(e,\"Int16BufferAttribute\",function(){return Qi}),i.d(e,\"Uint8ClampedBufferAttribute\",function(){return Zi}),i.d(e,\"Uint8BufferAttribute\",function(){return Ji}),i.d(e,\"Int8BufferAttribute\",function(){return Yi}),i.d(e,\"BufferAttribute\",function(){return Xi}),i.d(e,\"ArcCurve\",function(){return jo}),i.d(e,\"CatmullRomCurve3\",function(){return Zo}),i.d(e,\"CubicBezierCurve\",function(){return th}),i.d(e,\"CubicBezierCurve3\",function(){return eh}),i.d(e,\"EllipseCurve\",function(){return Go}),i.d(e,\"LineCurve\",function(){return ih}),i.d(e,\"LineCurve3\",function(){return nh}),i.d(e,\"QuadraticBezierCurve\",function(){return rh}),i.d(e,\"QuadraticBezierCurve3\",function(){return sh}),i.d(e,\"SplineCurve\",function(){return ah}),i.d(e,\"REVISION\",function(){return v}),i.d(e,\"MOUSE\",function(){return g}),i.d(e,\"CullFaceNone\",function(){return y}),i.d(e,\"CullFaceBack\",function(){return x}),i.d(e,\"CullFaceFront\",function(){return b}),i.d(e,\"CullFaceFrontBack\",function(){return w}),i.d(e,\"FrontFaceDirectionCW\",function(){return M}),i.d(e,\"FrontFaceDirectionCCW\",function(){return _}),i.d(e,\"BasicShadowMap\",function(){return S}),i.d(e,\"PCFShadowMap\",function(){return E}),i.d(e,\"PCFSoftShadowMap\",function(){return T}),i.d(e,\"FrontSide\",function(){return L}),i.d(e,\"BackSide\",function(){return A}),i.d(e,\"DoubleSide\",function(){return P}),i.d(e,\"FlatShading\",function(){return z}),i.d(e,\"SmoothShading\",function(){return N}),i.d(e,\"NoColors\",function(){return R}),i.d(e,\"FaceColors\",function(){return C}),i.d(e,\"VertexColors\",function(){return I}),i.d(e,\"NoBlending\",function(){return O}),i.d(e,\"NormalBlending\",function(){return k}),i.d(e,\"AdditiveBlending\",function(){return D}),i.d(e,\"SubtractiveBlending\",function(){return B}),i.d(e,\"MultiplyBlending\",function(){return V}),i.d(e,\"CustomBlending\",function(){return U}),i.d(e,\"AddEquation\",function(){return F}),i.d(e,\"SubtractEquation\",function(){return H}),i.d(e,\"ReverseSubtractEquation\",function(){return G}),i.d(e,\"MinEquation\",function(){return j}),i.d(e,\"MaxEquation\",function(){return W}),i.d(e,\"ZeroFactor\",function(){return q}),i.d(e,\"OneFactor\",function(){return X}),i.d(e,\"SrcColorFactor\",function(){return Y}),i.d(e,\"OneMinusSrcColorFactor\",function(){return J}),i.d(e,\"SrcAlphaFactor\",function(){return Z}),i.d(e,\"OneMinusSrcAlphaFactor\",function(){return Q}),i.d(e,\"DstAlphaFactor\",function(){return K}),i.d(e,\"OneMinusDstAlphaFactor\",function(){return $}),i.d(e,\"DstColorFactor\",function(){return tt}),i.d(e,\"OneMinusDstColorFactor\",function(){return et}),i.d(e,\"SrcAlphaSaturateFactor\",function(){return it}),i.d(e,\"NeverDepth\",function(){return nt}),i.d(e,\"AlwaysDepth\",function(){return rt}),i.d(e,\"LessDepth\",function(){return st}),i.d(e,\"LessEqualDepth\",function(){return at}),i.d(e,\"EqualDepth\",function(){return ot}),i.d(e,\"GreaterEqualDepth\",function(){return ht}),i.d(e,\"GreaterDepth\",function(){return lt}),i.d(e,\"NotEqualDepth\",function(){return ct}),i.d(e,\"MultiplyOperation\",function(){return ut}),i.d(e,\"MixOperation\",function(){return pt}),i.d(e,\"AddOperation\",function(){return dt}),i.d(e,\"NoToneMapping\",function(){return mt}),i.d(e,\"LinearToneMapping\",function(){return ft}),i.d(e,\"ReinhardToneMapping\",function(){return vt}),i.d(e,\"Uncharted2ToneMapping\",function(){return gt}),i.d(e,\"CineonToneMapping\",function(){return yt}),i.d(e,\"ACESFilmicToneMapping\",function(){return xt}),i.d(e,\"UVMapping\",function(){return bt}),i.d(e,\"CubeReflectionMapping\",function(){return wt}),i.d(e,\"CubeRefractionMapping\",function(){return Mt}),i.d(e,\"EquirectangularReflectionMapping\",function(){return _t}),i.d(e,\"EquirectangularRefractionMapping\",function(){return St}),i.d(e,\"SphericalReflectionMapping\",function(){return Et}),i.d(e,\"CubeUVReflectionMapping\",function(){return Tt}),i.d(e,\"CubeUVRefractionMapping\",function(){return Lt}),i.d(e,\"RepeatWrapping\",function(){return At}),i.d(e,\"ClampToEdgeWrapping\",function(){return Pt}),i.d(e,\"MirroredRepeatWrapping\",function(){return zt}),i.d(e,\"NearestFilter\",function(){return Nt}),i.d(e,\"NearestMipMapNearestFilter\",function(){return Rt}),i.d(e,\"NearestMipMapLinearFilter\",function(){return Ct}),i.d(e,\"LinearFilter\",function(){return It}),i.d(e,\"LinearMipMapNearestFilter\",function(){return Ot}),i.d(e,\"LinearMipMapLinearFilter\",function(){return kt}),i.d(e,\"UnsignedByteType\",function(){return Dt}),i.d(e,\"ByteType\",function(){return Bt}),i.d(e,\"ShortType\",function(){return Vt}),i.d(e,\"UnsignedShortType\",function(){return Ut}),i.d(e,\"IntType\",function(){return Ft}),i.d(e,\"UnsignedIntType\",function(){return Ht}),i.d(e,\"FloatType\",function(){return Gt}),i.d(e,\"HalfFloatType\",function(){return jt}),i.d(e,\"UnsignedShort4444Type\",function(){return Wt}),i.d(e,\"UnsignedShort5551Type\",function(){return qt}),i.d(e,\"UnsignedShort565Type\",function(){return Xt}),i.d(e,\"UnsignedInt248Type\",function(){return Yt}),i.d(e,\"AlphaFormat\",function(){return Jt}),i.d(e,\"RGBFormat\",function(){return Zt}),i.d(e,\"RGBAFormat\",function(){return Qt}),i.d(e,\"LuminanceFormat\",function(){return Kt}),i.d(e,\"LuminanceAlphaFormat\",function(){return $t}),i.d(e,\"RGBEFormat\",function(){return te}),i.d(e,\"DepthFormat\",function(){return ee}),i.d(e,\"DepthStencilFormat\",function(){return ie}),i.d(e,\"RedFormat\",function(){return ne}),i.d(e,\"RGB_S3TC_DXT1_Format\",function(){return re}),i.d(e,\"RGBA_S3TC_DXT1_Format\",function(){return se}),i.d(e,\"RGBA_S3TC_DXT3_Format\",function(){return ae}),i.d(e,\"RGBA_S3TC_DXT5_Format\",function(){return oe}),i.d(e,\"RGB_PVRTC_4BPPV1_Format\",function(){return he}),i.d(e,\"RGB_PVRTC_2BPPV1_Format\",function(){return le}),i.d(e,\"RGBA_PVRTC_4BPPV1_Format\",function(){return ce}),i.d(e,\"RGBA_PVRTC_2BPPV1_Format\",function(){return ue}),i.d(e,\"RGB_ETC1_Format\",function(){return pe}),i.d(e,\"RGBA_ASTC_4x4_Format\",function(){return de}),i.d(e,\"RGBA_ASTC_5x4_Format\",function(){return me}),i.d(e,\"RGBA_ASTC_5x5_Format\",function(){return fe}),i.d(e,\"RGBA_ASTC_6x5_Format\",function(){return ve}),i.d(e,\"RGBA_ASTC_6x6_Format\",function(){return ge}),i.d(e,\"RGBA_ASTC_8x5_Format\",function(){return ye}),i.d(e,\"RGBA_ASTC_8x6_Format\",function(){return xe}),i.d(e,\"RGBA_ASTC_8x8_Format\",function(){return be}),i.d(e,\"RGBA_ASTC_10x5_Format\",function(){return we}),i.d(e,\"RGBA_ASTC_10x6_Format\",function(){return Me}),i.d(e,\"RGBA_ASTC_10x8_Format\",function(){return _e}),i.d(e,\"RGBA_ASTC_10x10_Format\",function(){return Se}),i.d(e,\"RGBA_ASTC_12x10_Format\",function(){return Ee}),i.d(e,\"RGBA_ASTC_12x12_Format\",function(){return Te}),i.d(e,\"LoopOnce\",function(){return Le}),i.d(e,\"LoopRepeat\",function(){return Ae}),i.d(e,\"LoopPingPong\",function(){return Pe}),i.d(e,\"InterpolateDiscrete\",function(){return ze}),i.d(e,\"InterpolateLinear\",function(){return Ne}),i.d(e,\"InterpolateSmooth\",function(){return Re}),i.d(e,\"ZeroCurvatureEnding\",function(){return Ce}),i.d(e,\"ZeroSlopeEnding\",function(){return Ie}),i.d(e,\"WrapAroundEnding\",function(){return Oe}),i.d(e,\"TrianglesDrawMode\",function(){return ke}),i.d(e,\"TriangleStripDrawMode\",function(){return De}),i.d(e,\"TriangleFanDrawMode\",function(){return Be}),i.d(e,\"LinearEncoding\",function(){return Ve}),i.d(e,\"sRGBEncoding\",function(){return Ue}),i.d(e,\"GammaEncoding\",function(){return Fe}),i.d(e,\"RGBEEncoding\",function(){return He}),i.d(e,\"LogLuvEncoding\",function(){return Ge}),i.d(e,\"RGBM7Encoding\",function(){return je}),i.d(e,\"RGBM16Encoding\",function(){return We}),i.d(e,\"RGBDEncoding\",function(){return qe}),i.d(e,\"BasicDepthPacking\",function(){return Xe}),i.d(e,\"RGBADepthPacking\",function(){return Ye}),i.d(e,\"TangentSpaceNormalMap\",function(){return Je}),i.d(e,\"ObjectSpaceNormalMap\",function(){return Ze}),i.d(e,\"Face4\",function(){return ec}),i.d(e,\"LineStrip\",function(){return ic}),i.d(e,\"LinePieces\",function(){return nc}),i.d(e,\"MeshFaceMaterial\",function(){return rc}),i.d(e,\"MultiMaterial\",function(){return sc}),i.d(e,\"PointCloud\",function(){return ac}),i.d(e,\"Particle\",function(){return oc}),i.d(e,\"ParticleSystem\",function(){return hc}),i.d(e,\"PointCloudMaterial\",function(){return lc}),i.d(e,\"ParticleBasicMaterial\",function(){return cc}),i.d(e,\"ParticleSystemMaterial\",function(){return uc}),i.d(e,\"Vertex\",function(){return pc}),i.d(e,\"DynamicBufferAttribute\",function(){return dc}),i.d(e,\"Int8Attribute\",function(){return mc}),i.d(e,\"Uint8Attribute\",function(){return fc}),i.d(e,\"Uint8ClampedAttribute\",function(){return vc}),i.d(e,\"Int16Attribute\",function(){return gc}),i.d(e,\"Uint16Attribute\",function(){return yc}),i.d(e,\"Int32Attribute\",function(){return xc}),i.d(e,\"Uint32Attribute\",function(){return bc}),i.d(e,\"Float32Attribute\",function(){return wc}),i.d(e,\"Float64Attribute\",function(){return Mc}),i.d(e,\"ClosedSplineCurve3\",function(){return _c}),i.d(e,\"SplineCurve3\",function(){return Sc}),i.d(e,\"Spline\",function(){return Ec}),i.d(e,\"AxisHelper\",function(){return Tc}),i.d(e,\"BoundingBoxHelper\",function(){return Lc}),i.d(e,\"EdgesHelper\",function(){return Ac}),i.d(e,\"WireframeHelper\",function(){return Pc}),i.d(e,\"XHRLoader\",function(){return zc}),i.d(e,\"BinaryTextureLoader\",function(){return Nc}),i.d(e,\"GeometryUtils\",function(){return Rc}),i.d(e,\"Projector\",function(){return Cc}),i.d(e,\"CanvasRenderer\",function(){return Ic}),i.d(e,\"JSONLoader\",function(){return Oc}),i.d(e,\"SceneUtils\",function(){return kc}),i.d(e,\"LensFlare\",function(){return Dc}),void 0===Number.EPSILON&&(Number.EPSILON=Math.pow(2,-52)),void 0===Number.isInteger&&(Number.isInteger=function(t){return\"number\"==typeof t&&isFinite(t)&&Math.floor(t)===t}),void 0===Math.sign&&(Math.sign=function(t){return t<0?-1:t>0?1:+t}),\"name\"in Function.prototype==!1&&Object.defineProperty(Function.prototype,\"name\",{get:function(){return this.toString().match(/^\\s*function\\s*([^\\(\\s]*)/)[1]}}),void 0===Object.assign&&(Object.assign=function(t){if(null==t)throw new TypeError(\"Cannot convert undefined or null to object\");for(var e=Object(t),i=1;i<arguments.length;i++){var n=arguments[i];if(null!=n)for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}),Object.assign(n.prototype,{addEventListener:function(t,e){void 0===this._listeners&&(this._listeners={});var i=this._listeners;void 0===i[t]&&(i[t]=[]),-1===i[t].indexOf(e)&&i[t].push(e)},hasEventListener:function(t,e){if(void 0===this._listeners)return!1;var i=this._listeners;return void 0!==i[t]&&-1!==i[t].indexOf(e)},removeEventListener:function(t,e){if(void 0!==this._listeners){var i=this._listeners[t];if(void 0!==i){var n=i.indexOf(e);-1!==n&&i.splice(n,1)}}},dispatchEvent:function(t){if(void 0!==this._listeners){var e=this._listeners[t.type];if(void 0!==e){t.target=this;for(var i=e.slice(0),n=0,r=i.length;n<r;n++)i[n].call(this,t)}}}});var r,s,a,o,h,l,c,u,p,d,m,f,v=\"101\",g={LEFT:0,MIDDLE:1,RIGHT:2},y=0,x=1,b=2,w=3,M=0,_=1,S=0,E=1,T=2,L=0,A=1,P=2,z=1,N=2,R=0,C=1,I=2,O=0,k=1,D=2,B=3,V=4,U=5,F=100,H=101,G=102,j=103,W=104,q=200,X=201,Y=202,J=203,Z=204,Q=205,K=206,$=207,tt=208,et=209,it=210,nt=0,rt=1,st=2,at=3,ot=4,ht=5,lt=6,ct=7,ut=0,pt=1,dt=2,mt=0,ft=1,vt=2,gt=3,yt=4,xt=5,bt=300,wt=301,Mt=302,_t=303,St=304,Et=305,Tt=306,Lt=307,At=1e3,Pt=1001,zt=1002,Nt=1003,Rt=1004,Ct=1005,It=1006,Ot=1007,kt=1008,Dt=1009,Bt=1010,Vt=1011,Ut=1012,Ft=1013,Ht=1014,Gt=1015,jt=1016,Wt=1017,qt=1018,Xt=1019,Yt=1020,Jt=1021,Zt=1022,Qt=1023,Kt=1024,$t=1025,te=Qt,ee=1026,ie=1027,ne=1028,re=33776,se=33777,ae=33778,oe=33779,he=35840,le=35841,ce=35842,ue=35843,pe=36196,de=37808,me=37809,fe=37810,ve=37811,ge=37812,ye=37813,xe=37814,be=37815,we=37816,Me=37817,_e=37818,Se=37819,Ee=37820,Te=37821,Le=2200,Ae=2201,Pe=2202,ze=2300,Ne=2301,Re=2302,Ce=2400,Ie=2401,Oe=2402,ke=0,De=1,Be=2,Ve=3e3,Ue=3001,Fe=3007,He=3002,Ge=3003,je=3004,We=3005,qe=3006,Xe=3200,Ye=3201,Je=0,Ze=1,Qe={DEG2RAD:Math.PI/180,RAD2DEG:180/Math.PI,generateUUID:function(){for(var t=[],e=0;e<256;e++)t[e]=(e<16?\"0\":\"\")+e.toString(16);return function(){var e=4294967295*Math.random()|0,i=4294967295*Math.random()|0,n=4294967295*Math.random()|0,r=4294967295*Math.random()|0;return(t[255&e]+t[e>>8&255]+t[e>>16&255]+t[e>>24&255]+\"-\"+t[255&i]+t[i>>8&255]+\"-\"+t[i>>16&15|64]+t[i>>24&255]+\"-\"+t[63&n|128]+t[n>>8&255]+\"-\"+t[n>>16&255]+t[n>>24&255]+t[255&r]+t[r>>8&255]+t[r>>16&255]+t[r>>24&255]).toUpperCase()}}(),clamp:function(t,e,i){return Math.max(e,Math.min(i,t))},euclideanModulo:function(t,e){return(t%e+e)%e},mapLinear:function(t,e,i,n,r){return n+(t-e)*(r-n)/(i-e)},lerp:function(t,e,i){return(1-i)*t+i*e},smoothstep:function(t,e,i){return t<=e?0:t>=i?1:(t=(t-e)/(i-e))*t*(3-2*t)},smootherstep:function(t,e,i){return t<=e?0:t>=i?1:(t=(t-e)/(i-e))*t*t*(t*(6*t-15)+10)},randInt:function(t,e){return t+Math.floor(Math.random()*(e-t+1))},randFloat:function(t,e){return t+Math.random()*(e-t)},randFloatSpread:function(t){return t*(.5-Math.random())},degToRad:function(t){return t*Qe.DEG2RAD},radToDeg:function(t){return t*Qe.RAD2DEG},isPowerOfTwo:function(t){return 0==(t&t-1)&&0!==t},ceilPowerOfTwo:function(t){return Math.pow(2,Math.ceil(Math.log(t)/Math.LN2))},floorPowerOfTwo:function(t){return Math.pow(2,Math.floor(Math.log(t)/Math.LN2))}};function Ke(t,e){this.x=t||0,this.y=e||0}function $e(){this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],arguments.length>0&&console.error(\"THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.\")}function ti(t,e,i,n){this._x=t||0,this._y=e||0,this._z=i||0,this._w=void 0!==n?n:1}function ei(t,e,i){this.x=t||0,this.y=e||0,this.z=i||0}function ii(){this.elements=[1,0,0,0,1,0,0,0,1],arguments.length>0&&console.error(\"THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.\")}Object.defineProperties(Ke.prototype,{width:{get:function(){return this.x},set:function(t){this.x=t}},height:{get:function(){return this.y},set:function(t){this.y=t}}}),Object.assign(Ke.prototype,{isVector2:!0,set:function(t,e){return this.x=t,this.y=e,this},setScalar:function(t){return this.x=t,this.y=t,this},setX:function(t){return this.x=t,this},setY:function(t){return this.y=t,this},setComponent:function(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;default:throw new Error(\"index is out of range: \"+t)}return this},getComponent:function(t){switch(t){case 0:return this.x;case 1:return this.y;default:throw new Error(\"index is out of range: \"+t)}},clone:function(){return new this.constructor(this.x,this.y)},copy:function(t){return this.x=t.x,this.y=t.y,this},add:function(t,e){return void 0!==e?(console.warn(\"THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.\"),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this)},addScalar:function(t){return this.x+=t,this.y+=t,this},addVectors:function(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this},addScaledVector:function(t,e){return this.x+=t.x*e,this.y+=t.y*e,this},sub:function(t,e){return void 0!==e?(console.warn(\"THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.\"),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this)},subScalar:function(t){return this.x-=t,this.y-=t,this},subVectors:function(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this},multiply:function(t){return this.x*=t.x,this.y*=t.y,this},multiplyScalar:function(t){return this.x*=t,this.y*=t,this},divide:function(t){return this.x/=t.x,this.y/=t.y,this},divideScalar:function(t){return this.multiplyScalar(1/t)},applyMatrix3:function(t){var e=this.x,i=this.y,n=t.elements;return this.x=n[0]*e+n[3]*i+n[6],this.y=n[1]*e+n[4]*i+n[7],this},min:function(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this},max:function(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this},clamp:function(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this},clampScalar:(r=new Ke,s=new Ke,function(t,e){return r.set(t,t),s.set(e,e),this.clamp(r,s)}),clampLength:function(t,e){var i=this.length();return this.divideScalar(i||1).multiplyScalar(Math.max(t,Math.min(e,i)))},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this},negate:function(){return this.x=-this.x,this.y=-this.y,this},dot:function(t){return this.x*t.x+this.y*t.y},cross:function(t){return this.x*t.y-this.y*t.x},lengthSq:function(){return this.x*this.x+this.y*this.y},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y)},manhattanLength:function(){return Math.abs(this.x)+Math.abs(this.y)},normalize:function(){return this.divideScalar(this.length()||1)},angle:function(){var t=Math.atan2(this.y,this.x);return t<0&&(t+=2*Math.PI),t},distanceTo:function(t){return Math.sqrt(this.distanceToSquared(t))},distanceToSquared:function(t){var e=this.x-t.x,i=this.y-t.y;return e*e+i*i},manhattanDistanceTo:function(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)},setLength:function(t){return this.normalize().multiplyScalar(t)},lerp:function(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this},lerpVectors:function(t,e,i){return this.subVectors(e,t).multiplyScalar(i).add(t)},equals:function(t){return t.x===this.x&&t.y===this.y},fromArray:function(t,e){return void 0===e&&(e=0),this.x=t[e],this.y=t[e+1],this},toArray:function(t,e){return void 0===t&&(t=[]),void 0===e&&(e=0),t[e]=this.x,t[e+1]=this.y,t},fromBufferAttribute:function(t,e,i){return void 0!==i&&console.warn(\"THREE.Vector2: offset has been removed from .fromBufferAttribute().\"),this.x=t.getX(e),this.y=t.getY(e),this},rotateAround:function(t,e){var i=Math.cos(e),n=Math.sin(e),r=this.x-t.x,s=this.y-t.y;return this.x=r*i-s*n+t.x,this.y=r*n+s*i+t.y,this}}),Object.assign($e.prototype,{isMatrix4:!0,set:function(t,e,i,n,r,s,a,o,h,l,c,u,p,d,m,f){var v=this.elements;return v[0]=t,v[4]=e,v[8]=i,v[12]=n,v[1]=r,v[5]=s,v[9]=a,v[13]=o,v[2]=h,v[6]=l,v[10]=c,v[14]=u,v[3]=p,v[7]=d,v[11]=m,v[15]=f,this},identity:function(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this},clone:function(){return(new $e).fromArray(this.elements)},copy:function(t){var e=this.elements,i=t.elements;return e[0]=i[0],e[1]=i[1],e[2]=i[2],e[3]=i[3],e[4]=i[4],e[5]=i[5],e[6]=i[6],e[7]=i[7],e[8]=i[8],e[9]=i[9],e[10]=i[10],e[11]=i[11],e[12]=i[12],e[13]=i[13],e[14]=i[14],e[15]=i[15],this},copyPosition:function(t){var e=this.elements,i=t.elements;return e[12]=i[12],e[13]=i[13],e[14]=i[14],this},extractBasis:function(t,e,i){return t.setFromMatrixColumn(this,0),e.setFromMatrixColumn(this,1),i.setFromMatrixColumn(this,2),this},makeBasis:function(t,e,i){return this.set(t.x,e.x,i.x,0,t.y,e.y,i.y,0,t.z,e.z,i.z,0,0,0,0,1),this},extractRotation:(d=new ei,function(t){var e=this.elements,i=t.elements,n=1/d.setFromMatrixColumn(t,0).length(),r=1/d.setFromMatrixColumn(t,1).length(),s=1/d.setFromMatrixColumn(t,2).length();return e[0]=i[0]*n,e[1]=i[1]*n,e[2]=i[2]*n,e[3]=0,e[4]=i[4]*r,e[5]=i[5]*r,e[6]=i[6]*r,e[7]=0,e[8]=i[8]*s,e[9]=i[9]*s,e[10]=i[10]*s,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}),makeRotationFromEuler:function(t){t&&t.isEuler||console.error(\"THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.\");var e=this.elements,i=t.x,n=t.y,r=t.z,s=Math.cos(i),a=Math.sin(i),o=Math.cos(n),h=Math.sin(n),l=Math.cos(r),c=Math.sin(r);if(\"XYZ\"===t.order){var u=s*l,p=s*c,d=a*l,m=a*c;e[0]=o*l,e[4]=-o*c,e[8]=h,e[1]=p+d*h,e[5]=u-m*h,e[9]=-a*o,e[2]=m-u*h,e[6]=d+p*h,e[10]=s*o}else if(\"YXZ\"===t.order){var f=o*l,v=o*c,g=h*l,y=h*c;e[0]=f+y*a,e[4]=g*a-v,e[8]=s*h,e[1]=s*c,e[5]=s*l,e[9]=-a,e[2]=v*a-g,e[6]=y+f*a,e[10]=s*o}else if(\"ZXY\"===t.order){f=o*l,v=o*c,g=h*l,y=h*c;e[0]=f-y*a,e[4]=-s*c,e[8]=g+v*a,e[1]=v+g*a,e[5]=s*l,e[9]=y-f*a,e[2]=-s*h,e[6]=a,e[10]=s*o}else if(\"ZYX\"===t.order){u=s*l,p=s*c,d=a*l,m=a*c;e[0]=o*l,e[4]=d*h-p,e[8]=u*h+m,e[1]=o*c,e[5]=m*h+u,e[9]=p*h-d,e[2]=-h,e[6]=a*o,e[10]=s*o}else if(\"YZX\"===t.order){var x=s*o,b=s*h,w=a*o,M=a*h;e[0]=o*l,e[4]=M-x*c,e[8]=w*c+b,e[1]=c,e[5]=s*l,e[9]=-a*l,e[2]=-h*l,e[6]=b*c+w,e[10]=x-M*c}else if(\"XZY\"===t.order){x=s*o,b=s*h,w=a*o,M=a*h;e[0]=o*l,e[4]=-c,e[8]=h*l,e[1]=x*c+M,e[5]=s*l,e[9]=b*c-w,e[2]=w*c-b,e[6]=a*l,e[10]=M*c+x}return e[3]=0,e[7]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this},makeRotationFromQuaternion:(u=new ei(0,0,0),p=new ei(1,1,1),function(t){return this.compose(u,t,p)}),lookAt:(h=new ei,l=new ei,c=new ei,function(t,e,i){var n=this.elements;return c.subVectors(t,e),0===c.lengthSq()&&(c.z=1),c.normalize(),h.crossVectors(i,c),0===h.lengthSq()&&(1===Math.abs(i.z)?c.x+=1e-4:c.z+=1e-4,c.normalize(),h.crossVectors(i,c)),h.normalize(),l.crossVectors(c,h),n[0]=h.x,n[4]=l.x,n[8]=c.x,n[1]=h.y,n[5]=l.y,n[9]=c.y,n[2]=h.z,n[6]=l.z,n[10]=c.z,this}),multiply:function(t,e){return void 0!==e?(console.warn(\"THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.\"),this.multiplyMatrices(t,e)):this.multiplyMatrices(this,t)},premultiply:function(t){return this.multiplyMatrices(t,this)},multiplyMatrices:function(t,e){var i=t.elements,n=e.elements,r=this.elements,s=i[0],a=i[4],o=i[8],h=i[12],l=i[1],c=i[5],u=i[9],p=i[13],d=i[2],m=i[6],f=i[10],v=i[14],g=i[3],y=i[7],x=i[11],b=i[15],w=n[0],M=n[4],_=n[8],S=n[12],E=n[1],T=n[5],L=n[9],A=n[13],P=n[2],z=n[6],N=n[10],R=n[14],C=n[3],I=n[7],O=n[11],k=n[15];return r[0]=s*w+a*E+o*P+h*C,r[4]=s*M+a*T+o*z+h*I,r[8]=s*_+a*L+o*N+h*O,r[12]=s*S+a*A+o*R+h*k,r[1]=l*w+c*E+u*P+p*C,r[5]=l*M+c*T+u*z+p*I,r[9]=l*_+c*L+u*N+p*O,r[13]=l*S+c*A+u*R+p*k,r[2]=d*w+m*E+f*P+v*C,r[6]=d*M+m*T+f*z+v*I,r[10]=d*_+m*L+f*N+v*O,r[14]=d*S+m*A+f*R+v*k,r[3]=g*w+y*E+x*P+b*C,r[7]=g*M+y*T+x*z+b*I,r[11]=g*_+y*L+x*N+b*O,r[15]=g*S+y*A+x*R+b*k,this},multiplyScalar:function(t){var e=this.elements;return e[0]*=t,e[4]*=t,e[8]*=t,e[12]*=t,e[1]*=t,e[5]*=t,e[9]*=t,e[13]*=t,e[2]*=t,e[6]*=t,e[10]*=t,e[14]*=t,e[3]*=t,e[7]*=t,e[11]*=t,e[15]*=t,this},applyToBufferAttribute:function(){var t=new ei;return function(e){for(var i=0,n=e.count;i<n;i++)t.x=e.getX(i),t.y=e.getY(i),t.z=e.getZ(i),t.applyMatrix4(this),e.setXYZ(i,t.x,t.y,t.z);return e}}(),determinant:function(){var t=this.elements,e=t[0],i=t[4],n=t[8],r=t[12],s=t[1],a=t[5],o=t[9],h=t[13],l=t[2],c=t[6],u=t[10],p=t[14];return t[3]*(+r*o*c-n*h*c-r*a*u+i*h*u+n*a*p-i*o*p)+t[7]*(+e*o*p-e*h*u+r*s*u-n*s*p+n*h*l-r*o*l)+t[11]*(+e*h*c-e*a*p-r*s*c+i*s*p+r*a*l-i*h*l)+t[15]*(-n*a*l-e*o*c+e*a*u+n*s*c-i*s*u+i*o*l)},transpose:function(){var t,e=this.elements;return t=e[1],e[1]=e[4],e[4]=t,t=e[2],e[2]=e[8],e[8]=t,t=e[6],e[6]=e[9],e[9]=t,t=e[3],e[3]=e[12],e[12]=t,t=e[7],e[7]=e[13],e[13]=t,t=e[11],e[11]=e[14],e[14]=t,this},setPosition:function(t){var e=this.elements;return e[12]=t.x,e[13]=t.y,e[14]=t.z,this},getInverse:function(t,e){var i=this.elements,n=t.elements,r=n[0],s=n[1],a=n[2],o=n[3],h=n[4],l=n[5],c=n[6],u=n[7],p=n[8],d=n[9],m=n[10],f=n[11],v=n[12],g=n[13],y=n[14],x=n[15],b=d*y*u-g*m*u+g*c*f-l*y*f-d*c*x+l*m*x,w=v*m*u-p*y*u-v*c*f+h*y*f+p*c*x-h*m*x,M=p*g*u-v*d*u+v*l*f-h*g*f-p*l*x+h*d*x,_=v*d*c-p*g*c-v*l*m+h*g*m+p*l*y-h*d*y,S=r*b+s*w+a*M+o*_;if(0===S){var E=\"THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0\";if(!0===e)throw new Error(E);return console.warn(E),this.identity()}var T=1/S;return i[0]=b*T,i[1]=(g*m*o-d*y*o-g*a*f+s*y*f+d*a*x-s*m*x)*T,i[2]=(l*y*o-g*c*o+g*a*u-s*y*u-l*a*x+s*c*x)*T,i[3]=(d*c*o-l*m*o-d*a*u+s*m*u+l*a*f-s*c*f)*T,i[4]=w*T,i[5]=(p*y*o-v*m*o+v*a*f-r*y*f-p*a*x+r*m*x)*T,i[6]=(v*c*o-h*y*o-v*a*u+r*y*u+h*a*x-r*c*x)*T,i[7]=(h*m*o-p*c*o+p*a*u-r*m*u-h*a*f+r*c*f)*T,i[8]=M*T,i[9]=(v*d*o-p*g*o-v*s*f+r*g*f+p*s*x-r*d*x)*T,i[10]=(h*g*o-v*l*o+v*s*u-r*g*u-h*s*x+r*l*x)*T,i[11]=(p*l*o-h*d*o-p*s*u+r*d*u+h*s*f-r*l*f)*T,i[12]=_*T,i[13]=(p*g*a-v*d*a+v*s*m-r*g*m-p*s*y+r*d*y)*T,i[14]=(v*l*a-h*g*a-v*s*c+r*g*c+h*s*y-r*l*y)*T,i[15]=(h*d*a-p*l*a+p*s*c-r*d*c-h*s*m+r*l*m)*T,this},scale:function(t){var e=this.elements,i=t.x,n=t.y,r=t.z;return e[0]*=i,e[4]*=n,e[8]*=r,e[1]*=i,e[5]*=n,e[9]*=r,e[2]*=i,e[6]*=n,e[10]*=r,e[3]*=i,e[7]*=n,e[11]*=r,this},getMaxScaleOnAxis:function(){var t=this.elements,e=t[0]*t[0]+t[1]*t[1]+t[2]*t[2],i=t[4]*t[4]+t[5]*t[5]+t[6]*t[6],n=t[8]*t[8]+t[9]*t[9]+t[10]*t[10];return Math.sqrt(Math.max(e,i,n))},makeTranslation:function(t,e,i){return this.set(1,0,0,t,0,1,0,e,0,0,1,i,0,0,0,1),this},makeRotationX:function(t){var e=Math.cos(t),i=Math.sin(t);return this.set(1,0,0,0,0,e,-i,0,0,i,e,0,0,0,0,1),this},makeRotationY:function(t){var e=Math.cos(t),i=Math.sin(t);return this.set(e,0,i,0,0,1,0,0,-i,0,e,0,0,0,0,1),this},makeRotationZ:function(t){var e=Math.cos(t),i=Math.sin(t);return this.set(e,-i,0,0,i,e,0,0,0,0,1,0,0,0,0,1),this},makeRotationAxis:function(t,e){var i=Math.cos(e),n=Math.sin(e),r=1-i,s=t.x,a=t.y,o=t.z,h=r*s,l=r*a;return this.set(h*s+i,h*a-n*o,h*o+n*a,0,h*a+n*o,l*a+i,l*o-n*s,0,h*o-n*a,l*o+n*s,r*o*o+i,0,0,0,0,1),this},makeScale:function(t,e,i){return this.set(t,0,0,0,0,e,0,0,0,0,i,0,0,0,0,1),this},makeShear:function(t,e,i){return this.set(1,e,i,0,t,1,i,0,t,e,1,0,0,0,0,1),this},compose:function(t,e,i){var n=this.elements,r=e._x,s=e._y,a=e._z,o=e._w,h=r+r,l=s+s,c=a+a,u=r*h,p=r*l,d=r*c,m=s*l,f=s*c,v=a*c,g=o*h,y=o*l,x=o*c,b=i.x,w=i.y,M=i.z;return n[0]=(1-(m+v))*b,n[1]=(p+x)*b,n[2]=(d-y)*b,n[3]=0,n[4]=(p-x)*w,n[5]=(1-(u+v))*w,n[6]=(f+g)*w,n[7]=0,n[8]=(d+y)*M,n[9]=(f-g)*M,n[10]=(1-(u+m))*M,n[11]=0,n[12]=t.x,n[13]=t.y,n[14]=t.z,n[15]=1,this},decompose:(a=new ei,o=new $e,function(t,e,i){var n=this.elements,r=a.set(n[0],n[1],n[2]).length(),s=a.set(n[4],n[5],n[6]).length(),h=a.set(n[8],n[9],n[10]).length();this.determinant()<0&&(r=-r),t.x=n[12],t.y=n[13],t.z=n[14],o.copy(this);var l=1/r,c=1/s,u=1/h;return o.elements[0]*=l,o.elements[1]*=l,o.elements[2]*=l,o.elements[4]*=c,o.elements[5]*=c,o.elements[6]*=c,o.elements[8]*=u,o.elements[9]*=u,o.elements[10]*=u,e.setFromRotationMatrix(o),i.x=r,i.y=s,i.z=h,this}),makePerspective:function(t,e,i,n,r,s){void 0===s&&console.warn(\"THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.\");var a=this.elements,o=2*r/(e-t),h=2*r/(i-n),l=(e+t)/(e-t),c=(i+n)/(i-n),u=-(s+r)/(s-r),p=-2*s*r/(s-r);return a[0]=o,a[4]=0,a[8]=l,a[12]=0,a[1]=0,a[5]=h,a[9]=c,a[13]=0,a[2]=0,a[6]=0,a[10]=u,a[14]=p,a[3]=0,a[7]=0,a[11]=-1,a[15]=0,this},makeOrthographic:function(t,e,i,n,r,s){var a=this.elements,o=1/(e-t),h=1/(i-n),l=1/(s-r),c=(e+t)*o,u=(i+n)*h,p=(s+r)*l;return a[0]=2*o,a[4]=0,a[8]=0,a[12]=-c,a[1]=0,a[5]=2*h,a[9]=0,a[13]=-u,a[2]=0,a[6]=0,a[10]=-2*l,a[14]=-p,a[3]=0,a[7]=0,a[11]=0,a[15]=1,this},equals:function(t){for(var e=this.elements,i=t.elements,n=0;n<16;n++)if(e[n]!==i[n])return!1;return!0},fromArray:function(t,e){void 0===e&&(e=0);for(var i=0;i<16;i++)this.elements[i]=t[i+e];return this},toArray:function(t,e){void 0===t&&(t=[]),void 0===e&&(e=0);var i=this.elements;return t[e]=i[0],t[e+1]=i[1],t[e+2]=i[2],t[e+3]=i[3],t[e+4]=i[4],t[e+5]=i[5],t[e+6]=i[6],t[e+7]=i[7],t[e+8]=i[8],t[e+9]=i[9],t[e+10]=i[10],t[e+11]=i[11],t[e+12]=i[12],t[e+13]=i[13],t[e+14]=i[14],t[e+15]=i[15],t}}),Object.assign(ti,{slerp:function(t,e,i,n){return i.copy(t).slerp(e,n)},slerpFlat:function(t,e,i,n,r,s,a){var o=i[n+0],h=i[n+1],l=i[n+2],c=i[n+3],u=r[s+0],p=r[s+1],d=r[s+2],m=r[s+3];if(c!==m||o!==u||h!==p||l!==d){var f=1-a,v=o*u+h*p+l*d+c*m,g=v>=0?1:-1,y=1-v*v;if(y>Number.EPSILON){var x=Math.sqrt(y),b=Math.atan2(x,v*g);f=Math.sin(f*b)/x,a=Math.sin(a*b)/x}var w=a*g;if(o=o*f+u*w,h=h*f+p*w,l=l*f+d*w,c=c*f+m*w,f===1-a){var M=1/Math.sqrt(o*o+h*h+l*l+c*c);o*=M,h*=M,l*=M,c*=M}}t[e]=o,t[e+1]=h,t[e+2]=l,t[e+3]=c}}),Object.defineProperties(ti.prototype,{x:{get:function(){return this._x},set:function(t){this._x=t,this.onChangeCallback()}},y:{get:function(){return this._y},set:function(t){this._y=t,this.onChangeCallback()}},z:{get:function(){return this._z},set:function(t){this._z=t,this.onChangeCallback()}},w:{get:function(){return this._w},set:function(t){this._w=t,this.onChangeCallback()}}}),Object.assign(ti.prototype,{isQuaternion:!0,set:function(t,e,i,n){return this._x=t,this._y=e,this._z=i,this._w=n,this.onChangeCallback(),this},clone:function(){return new this.constructor(this._x,this._y,this._z,this._w)},copy:function(t){return this._x=t.x,this._y=t.y,this._z=t.z,this._w=t.w,this.onChangeCallback(),this},setFromEuler:function(t,e){if(!t||!t.isEuler)throw new Error(\"THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.\");var i=t._x,n=t._y,r=t._z,s=t.order,a=Math.cos,o=Math.sin,h=a(i/2),l=a(n/2),c=a(r/2),u=o(i/2),p=o(n/2),d=o(r/2);return\"XYZ\"===s?(this._x=u*l*c+h*p*d,this._y=h*p*c-u*l*d,this._z=h*l*d+u*p*c,this._w=h*l*c-u*p*d):\"YXZ\"===s?(this._x=u*l*c+h*p*d,this._y=h*p*c-u*l*d,this._z=h*l*d-u*p*c,this._w=h*l*c+u*p*d):\"ZXY\"===s?(this._x=u*l*c-h*p*d,this._y=h*p*c+u*l*d,this._z=h*l*d+u*p*c,this._w=h*l*c-u*p*d):\"ZYX\"===s?(this._x=u*l*c-h*p*d,this._y=h*p*c+u*l*d,this._z=h*l*d-u*p*c,this._w=h*l*c+u*p*d):\"YZX\"===s?(this._x=u*l*c+h*p*d,this._y=h*p*c+u*l*d,this._z=h*l*d-u*p*c,this._w=h*l*c-u*p*d):\"XZY\"===s&&(this._x=u*l*c-h*p*d,this._y=h*p*c-u*l*d,this._z=h*l*d+u*p*c,this._w=h*l*c+u*p*d),!1!==e&&this.onChangeCallback(),this},setFromAxisAngle:function(t,e){var i=e/2,n=Math.sin(i);return this._x=t.x*n,this._y=t.y*n,this._z=t.z*n,this._w=Math.cos(i),this.onChangeCallback(),this},setFromRotationMatrix:function(t){var e,i=t.elements,n=i[0],r=i[4],s=i[8],a=i[1],o=i[5],h=i[9],l=i[2],c=i[6],u=i[10],p=n+o+u;return p>0?(e=.5/Math.sqrt(p+1),this._w=.25/e,this._x=(c-h)*e,this._y=(s-l)*e,this._z=(a-r)*e):n>o&&n>u?(e=2*Math.sqrt(1+n-o-u),this._w=(c-h)/e,this._x=.25*e,this._y=(r+a)/e,this._z=(s+l)/e):o>u?(e=2*Math.sqrt(1+o-n-u),this._w=(s-l)/e,this._x=(r+a)/e,this._y=.25*e,this._z=(h+c)/e):(e=2*Math.sqrt(1+u-n-o),this._w=(a-r)/e,this._x=(s+l)/e,this._y=(h+c)/e,this._z=.25*e),this.onChangeCallback(),this},setFromUnitVectors:function(){var t,e=new ei;return function(i,n){return void 0===e&&(e=new ei),(t=i.dot(n)+1)<1e-6?(t=0,Math.abs(i.x)>Math.abs(i.z)?e.set(-i.y,i.x,0):e.set(0,-i.z,i.y)):e.crossVectors(i,n),this._x=e.x,this._y=e.y,this._z=e.z,this._w=t,this.normalize()}}(),angleTo:function(t){return 2*Math.acos(Math.abs(Qe.clamp(this.dot(t),-1,1)))},rotateTowards:function(t,e){var i=this.angleTo(t);if(0===i)return this;var n=Math.min(1,e/i);return this.slerp(t,n),this},inverse:function(){return this.conjugate()},conjugate:function(){return this._x*=-1,this._y*=-1,this._z*=-1,this.onChangeCallback(),this},dot:function(t){return this._x*t._x+this._y*t._y+this._z*t._z+this._w*t._w},lengthSq:function(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w},length:function(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)},normalize:function(){var t=this.length();return 0===t?(this._x=0,this._y=0,this._z=0,this._w=1):(t=1/t,this._x=this._x*t,this._y=this._y*t,this._z=this._z*t,this._w=this._w*t),this.onChangeCallback(),this},multiply:function(t,e){return void 0!==e?(console.warn(\"THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.\"),this.multiplyQuaternions(t,e)):this.multiplyQuaternions(this,t)},premultiply:function(t){return this.multiplyQuaternions(t,this)},multiplyQuaternions:function(t,e){var i=t._x,n=t._y,r=t._z,s=t._w,a=e._x,o=e._y,h=e._z,l=e._w;return this._x=i*l+s*a+n*h-r*o,this._y=n*l+s*o+r*a-i*h,this._z=r*l+s*h+i*o-n*a,this._w=s*l-i*a-n*o-r*h,this.onChangeCallback(),this},slerp:function(t,e){if(0===e)return this;if(1===e)return this.copy(t);var i=this._x,n=this._y,r=this._z,s=this._w,a=s*t._w+i*t._x+n*t._y+r*t._z;if(a<0?(this._w=-t._w,this._x=-t._x,this._y=-t._y,this._z=-t._z,a=-a):this.copy(t),a>=1)return this._w=s,this._x=i,this._y=n,this._z=r,this;var o=1-a*a;if(o<=Number.EPSILON){var h=1-e;return this._w=h*s+e*this._w,this._x=h*i+e*this._x,this._y=h*n+e*this._y,this._z=h*r+e*this._z,this.normalize()}var l=Math.sqrt(o),c=Math.atan2(l,a),u=Math.sin((1-e)*c)/l,p=Math.sin(e*c)/l;return this._w=s*u+this._w*p,this._x=i*u+this._x*p,this._y=n*u+this._y*p,this._z=r*u+this._z*p,this.onChangeCallback(),this},equals:function(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._w===this._w},fromArray:function(t,e){return void 0===e&&(e=0),this._x=t[e],this._y=t[e+1],this._z=t[e+2],this._w=t[e+3],this.onChangeCallback(),this},toArray:function(t,e){return void 0===t&&(t=[]),void 0===e&&(e=0),t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._w,t},onChange:function(t){return this.onChangeCallback=t,this},onChangeCallback:function(){}}),Object.assign(ei.prototype,{isVector3:!0,set:function(t,e,i){return this.x=t,this.y=e,this.z=i,this},setScalar:function(t){return this.x=t,this.y=t,this.z=t,this},setX:function(t){return this.x=t,this},setY:function(t){return this.y=t,this},setZ:function(t){return this.z=t,this},setComponent:function(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;default:throw new Error(\"index is out of range: \"+t)}return this},getComponent:function(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error(\"index is out of range: \"+t)}},clone:function(){return new this.constructor(this.x,this.y,this.z)},copy:function(t){return this.x=t.x,this.y=t.y,this.z=t.z,this},add:function(t,e){return void 0!==e?(console.warn(\"THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.\"),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this.z+=t.z,this)},addScalar:function(t){return this.x+=t,this.y+=t,this.z+=t,this},addVectors:function(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this},addScaledVector:function(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this},sub:function(t,e){return void 0!==e?(console.warn(\"THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.\"),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this.z-=t.z,this)},subScalar:function(t){return this.x-=t,this.y-=t,this.z-=t,this},subVectors:function(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this},multiply:function(t,e){return void 0!==e?(console.warn(\"THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.\"),this.multiplyVectors(t,e)):(this.x*=t.x,this.y*=t.y,this.z*=t.z,this)},multiplyScalar:function(t){return this.x*=t,this.y*=t,this.z*=t,this},multiplyVectors:function(t,e){return this.x=t.x*e.x,this.y=t.y*e.y,this.z=t.z*e.z,this},applyEuler:(m=new ti,function(t){return t&&t.isEuler||console.error(\"THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.\"),this.applyQuaternion(m.setFromEuler(t))}),applyAxisAngle:function(){var t=new ti;return function(e,i){return this.applyQuaternion(t.setFromAxisAngle(e,i))}}(),applyMatrix3:function(t){var e=this.x,i=this.y,n=this.z,r=t.elements;return this.x=r[0]*e+r[3]*i+r[6]*n,this.y=r[1]*e+r[4]*i+r[7]*n,this.z=r[2]*e+r[5]*i+r[8]*n,this},applyMatrix4:function(t){var e=this.x,i=this.y,n=this.z,r=t.elements,s=1/(r[3]*e+r[7]*i+r[11]*n+r[15]);return this.x=(r[0]*e+r[4]*i+r[8]*n+r[12])*s,this.y=(r[1]*e+r[5]*i+r[9]*n+r[13])*s,this.z=(r[2]*e+r[6]*i+r[10]*n+r[14])*s,this},applyQuaternion:function(t){var e=this.x,i=this.y,n=this.z,r=t.x,s=t.y,a=t.z,o=t.w,h=o*e+s*n-a*i,l=o*i+a*e-r*n,c=o*n+r*i-s*e,u=-r*e-s*i-a*n;return this.x=h*o+u*-r+l*-a-c*-s,this.y=l*o+u*-s+c*-r-h*-a,this.z=c*o+u*-a+h*-s-l*-r,this},project:function(t){return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix)},unproject:function(){var t=new $e;return function(e){return this.applyMatrix4(t.getInverse(e.projectionMatrix)).applyMatrix4(e.matrixWorld)}}(),transformDirection:function(t){var e=this.x,i=this.y,n=this.z,r=t.elements;return this.x=r[0]*e+r[4]*i+r[8]*n,this.y=r[1]*e+r[5]*i+r[9]*n,this.z=r[2]*e+r[6]*i+r[10]*n,this.normalize()},divide:function(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this},divideScalar:function(t){return this.multiplyScalar(1/t)},min:function(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this},max:function(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this},clamp:function(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this},clampScalar:function(){var t=new ei,e=new ei;return function(i,n){return t.set(i,i,i),e.set(n,n,n),this.clamp(t,e)}}(),clampLength:function(t,e){var i=this.length();return this.divideScalar(i||1).multiplyScalar(Math.max(t,Math.min(e,i)))},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this},negate:function(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this},dot:function(t){return this.x*t.x+this.y*t.y+this.z*t.z},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},manhattanLength:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)},normalize:function(){return this.divideScalar(this.length()||1)},setLength:function(t){return this.normalize().multiplyScalar(t)},lerp:function(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this},lerpVectors:function(t,e,i){return this.subVectors(e,t).multiplyScalar(i).add(t)},cross:function(t,e){return void 0!==e?(console.warn(\"THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.\"),this.crossVectors(t,e)):this.crossVectors(this,t)},crossVectors:function(t,e){var i=t.x,n=t.y,r=t.z,s=e.x,a=e.y,o=e.z;return this.x=n*o-r*a,this.y=r*s-i*o,this.z=i*a-n*s,this},projectOnVector:function(t){var e=t.dot(this)/t.lengthSq();return this.copy(t).multiplyScalar(e)},projectOnPlane:function(){var t=new ei;return function(e){return t.copy(this).projectOnVector(e),this.sub(t)}}(),reflect:function(){var t=new ei;return function(e){return this.sub(t.copy(e).multiplyScalar(2*this.dot(e)))}}(),angleTo:function(t){var e=this.dot(t)/Math.sqrt(this.lengthSq()*t.lengthSq());return Math.acos(Qe.clamp(e,-1,1))},distanceTo:function(t){return Math.sqrt(this.distanceToSquared(t))},distanceToSquared:function(t){var e=this.x-t.x,i=this.y-t.y,n=this.z-t.z;return e*e+i*i+n*n},manhattanDistanceTo:function(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)+Math.abs(this.z-t.z)},setFromSpherical:function(t){return this.setFromSphericalCoords(t.radius,t.phi,t.theta)},setFromSphericalCoords:function(t,e,i){var n=Math.sin(e)*t;return this.x=n*Math.sin(i),this.y=Math.cos(e)*t,this.z=n*Math.cos(i),this},setFromCylindrical:function(t){return this.setFromCylindricalCoords(t.radius,t.theta,t.y)},setFromCylindricalCoords:function(t,e,i){return this.x=t*Math.sin(e),this.y=i,this.z=t*Math.cos(e),this},setFromMatrixPosition:function(t){var e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this},setFromMatrixScale:function(t){var e=this.setFromMatrixColumn(t,0).length(),i=this.setFromMatrixColumn(t,1).length(),n=this.setFromMatrixColumn(t,2).length();return this.x=e,this.y=i,this.z=n,this},setFromMatrixColumn:function(t,e){return this.fromArray(t.elements,4*e)},equals:function(t){return t.x===this.x&&t.y===this.y&&t.z===this.z},fromArray:function(t,e){return void 0===e&&(e=0),this.x=t[e],this.y=t[e+1],this.z=t[e+2],this},toArray:function(t,e){return void 0===t&&(t=[]),void 0===e&&(e=0),t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t},fromBufferAttribute:function(t,e,i){return void 0!==i&&console.warn(\"THREE.Vector3: offset has been removed from .fromBufferAttribute().\"),this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this}}),Object.assign(ii.prototype,{isMatrix3:!0,set:function(t,e,i,n,r,s,a,o,h){var l=this.elements;return l[0]=t,l[1]=n,l[2]=a,l[3]=e,l[4]=r,l[5]=o,l[6]=i,l[7]=s,l[8]=h,this},identity:function(){return this.set(1,0,0,0,1,0,0,0,1),this},clone:function(){return(new this.constructor).fromArray(this.elements)},copy:function(t){var e=this.elements,i=t.elements;return e[0]=i[0],e[1]=i[1],e[2]=i[2],e[3]=i[3],e[4]=i[4],e[5]=i[5],e[6]=i[6],e[7]=i[7],e[8]=i[8],this},setFromMatrix4:function(t){var e=t.elements;return this.set(e[0],e[4],e[8],e[1],e[5],e[9],e[2],e[6],e[10]),this},applyToBufferAttribute:function(){var t=new ei;return function(e){for(var i=0,n=e.count;i<n;i++)t.x=e.getX(i),t.y=e.getY(i),t.z=e.getZ(i),t.applyMatrix3(this),e.setXYZ(i,t.x,t.y,t.z);return e}}(),multiply:function(t){return this.multiplyMatrices(this,t)},premultiply:function(t){return this.multiplyMatrices(t,this)},multiplyMatrices:function(t,e){var i=t.elements,n=e.elements,r=this.elements,s=i[0],a=i[3],o=i[6],h=i[1],l=i[4],c=i[7],u=i[2],p=i[5],d=i[8],m=n[0],f=n[3],v=n[6],g=n[1],y=n[4],x=n[7],b=n[2],w=n[5],M=n[8];return r[0]=s*m+a*g+o*b,r[3]=s*f+a*y+o*w,r[6]=s*v+a*x+o*M,r[1]=h*m+l*g+c*b,r[4]=h*f+l*y+c*w,r[7]=h*v+l*x+c*M,r[2]=u*m+p*g+d*b,r[5]=u*f+p*y+d*w,r[8]=u*v+p*x+d*M,this},multiplyScalar:function(t){var e=this.elements;return e[0]*=t,e[3]*=t,e[6]*=t,e[1]*=t,e[4]*=t,e[7]*=t,e[2]*=t,e[5]*=t,e[8]*=t,this},determinant:function(){var t=this.elements,e=t[0],i=t[1],n=t[2],r=t[3],s=t[4],a=t[5],o=t[6],h=t[7],l=t[8];return e*s*l-e*a*h-i*r*l+i*a*o+n*r*h-n*s*o},getInverse:function(t,e){t&&t.isMatrix4&&console.error(\"THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument.\");var i=t.elements,n=this.elements,r=i[0],s=i[1],a=i[2],o=i[3],h=i[4],l=i[5],c=i[6],u=i[7],p=i[8],d=p*h-l*u,m=l*c-p*o,f=u*o-h*c,v=r*d+s*m+a*f;if(0===v){var g=\"THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0\";if(!0===e)throw new Error(g);return console.warn(g),this.identity()}var y=1/v;return n[0]=d*y,n[1]=(a*u-p*s)*y,n[2]=(l*s-a*h)*y,n[3]=m*y,n[4]=(p*r-a*c)*y,n[5]=(a*o-l*r)*y,n[6]=f*y,n[7]=(s*c-u*r)*y,n[8]=(h*r-s*o)*y,this},transpose:function(){var t,e=this.elements;return t=e[1],e[1]=e[3],e[3]=t,t=e[2],e[2]=e[6],e[6]=t,t=e[5],e[5]=e[7],e[7]=t,this},getNormalMatrix:function(t){return this.setFromMatrix4(t).getInverse(this).transpose()},transposeIntoArray:function(t){var e=this.elements;return t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8],this},setUvTransform:function(t,e,i,n,r,s,a){var o=Math.cos(r),h=Math.sin(r);this.set(i*o,i*h,-i*(o*s+h*a)+s+t,-n*h,n*o,-n*(-h*s+o*a)+a+e,0,0,1)},scale:function(t,e){var i=this.elements;return i[0]*=t,i[3]*=t,i[6]*=t,i[1]*=e,i[4]*=e,i[7]*=e,this},rotate:function(t){var e=Math.cos(t),i=Math.sin(t),n=this.elements,r=n[0],s=n[3],a=n[6],o=n[1],h=n[4],l=n[7];return n[0]=e*r+i*o,n[3]=e*s+i*h,n[6]=e*a+i*l,n[1]=-i*r+e*o,n[4]=-i*s+e*h,n[7]=-i*a+e*l,this},translate:function(t,e){var i=this.elements;return i[0]+=t*i[2],i[3]+=t*i[5],i[6]+=t*i[8],i[1]+=e*i[2],i[4]+=e*i[5],i[7]+=e*i[8],this},equals:function(t){for(var e=this.elements,i=t.elements,n=0;n<9;n++)if(e[n]!==i[n])return!1;return!0},fromArray:function(t,e){void 0===e&&(e=0);for(var i=0;i<9;i++)this.elements[i]=t[i+e];return this},toArray:function(t,e){void 0===t&&(t=[]),void 0===e&&(e=0);var i=this.elements;return t[e]=i[0],t[e+1]=i[1],t[e+2]=i[2],t[e+3]=i[3],t[e+4]=i[4],t[e+5]=i[5],t[e+6]=i[6],t[e+7]=i[7],t[e+8]=i[8],t}});var ni,ri,si,ai,oi,hi={getDataURL:function(t){var e;if(\"undefined\"==typeof HTMLCanvasElement)return t.src;if(t instanceof HTMLCanvasElement)e=t;else{void 0===f&&(f=document.createElementNS(\"http://www.w3.org/1999/xhtml\",\"canvas\")),f.width=t.width,f.height=t.height;var i=f.getContext(\"2d\");t instanceof ImageData?i.putImageData(t,0,0):i.drawImage(t,0,0,t.width,t.height),e=f}return e.width>2048||e.height>2048?e.toDataURL(\"image/jpeg\",.6):e.toDataURL(\"image/png\")}},li=0;function ci(t,e,i,n,r,s,a,o,h,l){Object.defineProperty(this,\"id\",{value:li++}),this.uuid=Qe.generateUUID(),this.name=\"\",this.image=void 0!==t?t:ci.DEFAULT_IMAGE,this.mipmaps=[],this.mapping=void 0!==e?e:ci.DEFAULT_MAPPING,this.wrapS=void 0!==i?i:Pt,this.wrapT=void 0!==n?n:Pt,this.magFilter=void 0!==r?r:It,this.minFilter=void 0!==s?s:kt,this.anisotropy=void 0!==h?h:1,this.format=void 0!==a?a:Qt,this.type=void 0!==o?o:Dt,this.offset=new Ke(0,0),this.repeat=new Ke(1,1),this.center=new Ke(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new ii,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.encoding=void 0!==l?l:Ve,this.version=0,this.onUpdate=null}function ui(t,e,i,n){this.x=t||0,this.y=e||0,this.z=i||0,this.w=void 0!==n?n:1}function pi(t,e,i){this.width=t,this.height=e,this.scissor=new ui(0,0,t,e),this.scissorTest=!1,this.viewport=new ui(0,0,t,e),i=i||{},this.texture=new ci(void 0,void 0,i.wrapS,i.wrapT,i.magFilter,i.minFilter,i.format,i.type,i.anisotropy,i.encoding),this.texture.generateMipmaps=void 0!==i.generateMipmaps&&i.generateMipmaps,this.texture.minFilter=void 0!==i.minFilter?i.minFilter:It,this.depthBuffer=void 0===i.depthBuffer||i.depthBuffer,this.stencilBuffer=void 0===i.stencilBuffer||i.stencilBuffer,this.depthTexture=void 0!==i.depthTexture?i.depthTexture:null}function di(t,e,i){pi.call(this,t,e,i),this.samples=4}function mi(t,e,i){pi.call(this,t,e,i),this.activeCubeFace=0,this.activeMipMapLevel=0}function fi(t,e,i,n,r,s,a,o,h,l,c,u){ci.call(this,null,s,a,o,h,l,n,r,c,u),this.image={data:t,width:e,height:i},this.magFilter=void 0!==h?h:Nt,this.minFilter=void 0!==l?l:Nt,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}function vi(t,e){this.min=void 0!==t?t:new ei(1/0,1/0,1/0),this.max=void 0!==e?e:new ei(-1/0,-1/0,-1/0)}function gi(t,e){this.center=void 0!==t?t:new ei,this.radius=void 0!==e?e:0}function yi(t,e){this.normal=void 0!==t?t:new ei(1,0,0),this.constant=void 0!==e?e:0}function xi(t,e,i,n,r,s){this.planes=[void 0!==t?t:new yi,void 0!==e?e:new yi,void 0!==i?i:new yi,void 0!==n?n:new yi,void 0!==r?r:new yi,void 0!==s?s:new yi]}ci.DEFAULT_IMAGE=void 0,ci.DEFAULT_MAPPING=bt,ci.prototype=Object.assign(Object.create(n.prototype),{constructor:ci,isTexture:!0,updateMatrix:function(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.name=t.name,this.image=t.image,this.mipmaps=t.mipmaps.slice(0),this.mapping=t.mapping,this.wrapS=t.wrapS,this.wrapT=t.wrapT,this.magFilter=t.magFilter,this.minFilter=t.minFilter,this.anisotropy=t.anisotropy,this.format=t.format,this.type=t.type,this.offset.copy(t.offset),this.repeat.copy(t.repeat),this.center.copy(t.center),this.rotation=t.rotation,this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrix.copy(t.matrix),this.generateMipmaps=t.generateMipmaps,this.premultiplyAlpha=t.premultiplyAlpha,this.flipY=t.flipY,this.unpackAlignment=t.unpackAlignment,this.encoding=t.encoding,this},toJSON:function(t){var e=void 0===t||\"string\"==typeof t;if(!e&&void 0!==t.textures[this.uuid])return t.textures[this.uuid];var i={metadata:{version:4.5,type:\"Texture\",generator:\"Texture.toJSON\"},uuid:this.uuid,name:this.name,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,type:this.type,encoding:this.encoding,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};if(void 0!==this.image){var n=this.image;if(void 0===n.uuid&&(n.uuid=Qe.generateUUID()),!e&&void 0===t.images[n.uuid]){var r;if(Array.isArray(n)){r=[];for(var s=0,a=n.length;s<a;s++)r.push(hi.getDataURL(n[s]))}else r=hi.getDataURL(n);t.images[n.uuid]={uuid:n.uuid,url:r}}i.image=n.uuid}return e||(t.textures[this.uuid]=i),i},dispose:function(){this.dispatchEvent({type:\"dispose\"})},transformUv:function(t){if(this.mapping!==bt)return t;if(t.applyMatrix3(this.matrix),t.x<0||t.x>1)switch(this.wrapS){case At:t.x=t.x-Math.floor(t.x);break;case Pt:t.x=t.x<0?0:1;break;case zt:1===Math.abs(Math.floor(t.x)%2)?t.x=Math.ceil(t.x)-t.x:t.x=t.x-Math.floor(t.x)}if(t.y<0||t.y>1)switch(this.wrapT){case At:t.y=t.y-Math.floor(t.y);break;case Pt:t.y=t.y<0?0:1;break;case zt:1===Math.abs(Math.floor(t.y)%2)?t.y=Math.ceil(t.y)-t.y:t.y=t.y-Math.floor(t.y)}return this.flipY&&(t.y=1-t.y),t}}),Object.defineProperty(ci.prototype,\"needsUpdate\",{set:function(t){!0===t&&this.version++}}),Object.assign(ui.prototype,{isVector4:!0,set:function(t,e,i,n){return this.x=t,this.y=e,this.z=i,this.w=n,this},setScalar:function(t){return this.x=t,this.y=t,this.z=t,this.w=t,this},setX:function(t){return this.x=t,this},setY:function(t){return this.y=t,this},setZ:function(t){return this.z=t,this},setW:function(t){return this.w=t,this},setComponent:function(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;case 3:this.w=e;break;default:throw new Error(\"index is out of range: \"+t)}return this},getComponent:function(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error(\"index is out of range: \"+t)}},clone:function(){return new this.constructor(this.x,this.y,this.z,this.w)},copy:function(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=void 0!==t.w?t.w:1,this},add:function(t,e){return void 0!==e?(console.warn(\"THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.\"),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this.z+=t.z,this.w+=t.w,this)},addScalar:function(t){return this.x+=t,this.y+=t,this.z+=t,this.w+=t,this},addVectors:function(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this.w=t.w+e.w,this},addScaledVector:function(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this.w+=t.w*e,this},sub:function(t,e){return void 0!==e?(console.warn(\"THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.\"),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this.z-=t.z,this.w-=t.w,this)},subScalar:function(t){return this.x-=t,this.y-=t,this.z-=t,this.w-=t,this},subVectors:function(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this.w=t.w-e.w,this},multiplyScalar:function(t){return this.x*=t,this.y*=t,this.z*=t,this.w*=t,this},applyMatrix4:function(t){var e=this.x,i=this.y,n=this.z,r=this.w,s=t.elements;return this.x=s[0]*e+s[4]*i+s[8]*n+s[12]*r,this.y=s[1]*e+s[5]*i+s[9]*n+s[13]*r,this.z=s[2]*e+s[6]*i+s[10]*n+s[14]*r,this.w=s[3]*e+s[7]*i+s[11]*n+s[15]*r,this},divideScalar:function(t){return this.multiplyScalar(1/t)},setAxisAngleFromQuaternion:function(t){this.w=2*Math.acos(t.w);var e=Math.sqrt(1-t.w*t.w);return e<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=t.x/e,this.y=t.y/e,this.z=t.z/e),this},setAxisAngleFromRotationMatrix:function(t){var e,i,n,r,s=t.elements,a=s[0],o=s[4],h=s[8],l=s[1],c=s[5],u=s[9],p=s[2],d=s[6],m=s[10];if(Math.abs(o-l)<.01&&Math.abs(h-p)<.01&&Math.abs(u-d)<.01){if(Math.abs(o+l)<.1&&Math.abs(h+p)<.1&&Math.abs(u+d)<.1&&Math.abs(a+c+m-3)<.1)return this.set(1,0,0,0),this;e=Math.PI;var f=(a+1)/2,v=(c+1)/2,g=(m+1)/2,y=(o+l)/4,x=(h+p)/4,b=(u+d)/4;return f>v&&f>g?f<.01?(i=0,n=.707106781,r=.707106781):(n=y/(i=Math.sqrt(f)),r=x/i):v>g?v<.01?(i=.707106781,n=0,r=.707106781):(i=y/(n=Math.sqrt(v)),r=b/n):g<.01?(i=.707106781,n=.707106781,r=0):(i=x/(r=Math.sqrt(g)),n=b/r),this.set(i,n,r,e),this}var w=Math.sqrt((d-u)*(d-u)+(h-p)*(h-p)+(l-o)*(l-o));return Math.abs(w)<.001&&(w=1),this.x=(d-u)/w,this.y=(h-p)/w,this.z=(l-o)/w,this.w=Math.acos((a+c+m-1)/2),this},min:function(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this.w=Math.min(this.w,t.w),this},max:function(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this.w=Math.max(this.w,t.w),this},clamp:function(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this.w=Math.max(t.w,Math.min(e.w,this.w)),this},clampScalar:function(){var t,e;return function(i,n){return void 0===t&&(t=new ui,e=new ui),t.set(i,i,i,i),e.set(n,n,n,n),this.clamp(t,e)}}(),clampLength:function(t,e){var i=this.length();return this.divideScalar(i||1).multiplyScalar(Math.max(t,Math.min(e,i)))},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w),this},negate:function(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this},dot:function(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)},manhattanLength:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)},normalize:function(){return this.divideScalar(this.length()||1)},setLength:function(t){return this.normalize().multiplyScalar(t)},lerp:function(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this.w+=(t.w-this.w)*e,this},lerpVectors:function(t,e,i){return this.subVectors(e,t).multiplyScalar(i).add(t)},equals:function(t){return t.x===this.x&&t.y===this.y&&t.z===this.z&&t.w===this.w},fromArray:function(t,e){return void 0===e&&(e=0),this.x=t[e],this.y=t[e+1],this.z=t[e+2],this.w=t[e+3],this},toArray:function(t,e){return void 0===t&&(t=[]),void 0===e&&(e=0),t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t[e+3]=this.w,t},fromBufferAttribute:function(t,e,i){return void 0!==i&&console.warn(\"THREE.Vector4: offset has been removed from .fromBufferAttribute().\"),this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this.w=t.getW(e),this}}),pi.prototype=Object.assign(Object.create(n.prototype),{constructor:pi,isWebGLRenderTarget:!0,setSize:function(t,e){this.width===t&&this.height===e||(this.width=t,this.height=e,this.dispose()),this.viewport.set(0,0,t,e),this.scissor.set(0,0,t,e)},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.width=t.width,this.height=t.height,this.viewport.copy(t.viewport),this.texture=t.texture.clone(),this.depthBuffer=t.depthBuffer,this.stencilBuffer=t.stencilBuffer,this.depthTexture=t.depthTexture,this},dispose:function(){this.dispatchEvent({type:\"dispose\"})}}),di.prototype=Object.assign(Object.create(pi.prototype),{constructor:di,isWebGLMultisampleRenderTarget:!0,copy:function(t){return pi.prototype.copy.call(this,t),this.samples=t.samples,this}}),mi.prototype=Object.create(pi.prototype),mi.prototype.constructor=mi,mi.prototype.isWebGLRenderTargetCube=!0,fi.prototype=Object.create(ci.prototype),fi.prototype.constructor=fi,fi.prototype.isDataTexture=!0,Object.assign(vi.prototype,{isBox3:!0,set:function(t,e){return this.min.copy(t),this.max.copy(e),this},setFromArray:function(t){for(var e=1/0,i=1/0,n=1/0,r=-1/0,s=-1/0,a=-1/0,o=0,h=t.length;o<h;o+=3){var l=t[o],c=t[o+1],u=t[o+2];l<e&&(e=l),c<i&&(i=c),u<n&&(n=u),l>r&&(r=l),c>s&&(s=c),u>a&&(a=u)}return this.min.set(e,i,n),this.max.set(r,s,a),this},setFromBufferAttribute:function(t){for(var e=1/0,i=1/0,n=1/0,r=-1/0,s=-1/0,a=-1/0,o=0,h=t.count;o<h;o++){var l=t.getX(o),c=t.getY(o),u=t.getZ(o);l<e&&(e=l),c<i&&(i=c),u<n&&(n=u),l>r&&(r=l),c>s&&(s=c),u>a&&(a=u)}return this.min.set(e,i,n),this.max.set(r,s,a),this},setFromPoints:function(t){this.makeEmpty();for(var e=0,i=t.length;e<i;e++)this.expandByPoint(t[e]);return this},setFromCenterAndSize:function(){var t=new ei;return function(e,i){var n=t.copy(i).multiplyScalar(.5);return this.min.copy(e).sub(n),this.max.copy(e).add(n),this}}(),setFromObject:function(t){return this.makeEmpty(),this.expandByObject(t)},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.min.copy(t.min),this.max.copy(t.max),this},makeEmpty:function(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this},isEmpty:function(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z},getCenter:function(t){return void 0===t&&(console.warn(\"THREE.Box3: .getCenter() target is now required\"),t=new ei),this.isEmpty()?t.set(0,0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)},getSize:function(t){return void 0===t&&(console.warn(\"THREE.Box3: .getSize() target is now required\"),t=new ei),this.isEmpty()?t.set(0,0,0):t.subVectors(this.max,this.min)},expandByPoint:function(t){return this.min.min(t),this.max.max(t),this},expandByVector:function(t){return this.min.sub(t),this.max.add(t),this},expandByScalar:function(t){return this.min.addScalar(-t),this.max.addScalar(t),this},expandByObject:function(){var t,e,i,n=new ei;function r(r){var s=r.geometry;if(void 0!==s)if(s.isGeometry){var a=s.vertices;for(e=0,i=a.length;e<i;e++)n.copy(a[e]),n.applyMatrix4(r.matrixWorld),t.expandByPoint(n)}else if(s.isBufferGeometry){var o=s.attributes.position;if(void 0!==o)for(e=0,i=o.count;e<i;e++)n.fromBufferAttribute(o,e).applyMatrix4(r.matrixWorld),t.expandByPoint(n)}}return function(e){return t=this,e.updateMatrixWorld(!0),e.traverse(r),this}}(),containsPoint:function(t){return!(t.x<this.min.x||t.x>this.max.x||t.y<this.min.y||t.y>this.max.y||t.z<this.min.z||t.z>this.max.z)},containsBox:function(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y&&this.min.z<=t.min.z&&t.max.z<=this.max.z},getParameter:function(t,e){return void 0===e&&(console.warn(\"THREE.Box3: .getParameter() target is now required\"),e=new ei),e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y),(t.z-this.min.z)/(this.max.z-this.min.z))},intersectsBox:function(t){return!(t.max.x<this.min.x||t.min.x>this.max.x||t.max.y<this.min.y||t.min.y>this.max.y||t.max.z<this.min.z||t.min.z>this.max.z)},intersectsSphere:(ri=new ei,function(t){return this.clampPoint(t.center,ri),ri.distanceToSquared(t.center)<=t.radius*t.radius}),intersectsPlane:function(t){var e,i;return t.normal.x>0?(e=t.normal.x*this.min.x,i=t.normal.x*this.max.x):(e=t.normal.x*this.max.x,i=t.normal.x*this.min.x),t.normal.y>0?(e+=t.normal.y*this.min.y,i+=t.normal.y*this.max.y):(e+=t.normal.y*this.max.y,i+=t.normal.y*this.min.y),t.normal.z>0?(e+=t.normal.z*this.min.z,i+=t.normal.z*this.max.z):(e+=t.normal.z*this.max.z,i+=t.normal.z*this.min.z),e<=-t.constant&&i>=-t.constant},intersectsTriangle:function(){var t=new ei,e=new ei,i=new ei,n=new ei,r=new ei,s=new ei,a=new ei,o=new ei,h=new ei,l=new ei;function c(n){var r,s;for(r=0,s=n.length-3;r<=s;r+=3){a.fromArray(n,r);var o=h.x*Math.abs(a.x)+h.y*Math.abs(a.y)+h.z*Math.abs(a.z),l=t.dot(a),c=e.dot(a),u=i.dot(a);if(Math.max(-Math.max(l,c,u),Math.min(l,c,u))>o)return!1}return!0}return function(a){if(this.isEmpty())return!1;this.getCenter(o),h.subVectors(this.max,o),t.subVectors(a.a,o),e.subVectors(a.b,o),i.subVectors(a.c,o),n.subVectors(e,t),r.subVectors(i,e),s.subVectors(t,i);var u=[0,-n.z,n.y,0,-r.z,r.y,0,-s.z,s.y,n.z,0,-n.x,r.z,0,-r.x,s.z,0,-s.x,-n.y,n.x,0,-r.y,r.x,0,-s.y,s.x,0];return!!c(u)&&(!!c(u=[1,0,0,0,1,0,0,0,1])&&(l.crossVectors(n,r),c(u=[l.x,l.y,l.z])))}}(),clampPoint:function(t,e){return void 0===e&&(console.warn(\"THREE.Box3: .clampPoint() target is now required\"),e=new ei),e.copy(t).clamp(this.min,this.max)},distanceToPoint:function(){var t=new ei;return function(e){return t.copy(e).clamp(this.min,this.max).sub(e).length()}}(),getBoundingSphere:function(){var t=new ei;return function(e){return void 0===e&&(console.warn(\"THREE.Box3: .getBoundingSphere() target is now required\"),e=new gi),this.getCenter(e.center),e.radius=.5*this.getSize(t).length(),e}}(),intersect:function(t){return this.min.max(t.min),this.max.min(t.max),this.isEmpty()&&this.makeEmpty(),this},union:function(t){return this.min.min(t.min),this.max.max(t.max),this},applyMatrix4:(ni=[new ei,new ei,new ei,new ei,new ei,new ei,new ei,new ei],function(t){return this.isEmpty()?this:(ni[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(t),ni[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(t),ni[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(t),ni[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(t),ni[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(t),ni[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(t),ni[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(t),ni[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(t),this.setFromPoints(ni),this)}),translate:function(t){return this.min.add(t),this.max.add(t),this},equals:function(t){return t.min.equals(this.min)&&t.max.equals(this.max)}}),Object.assign(gi.prototype,{set:function(t,e){return this.center.copy(t),this.radius=e,this},setFromPoints:(si=new vi,function(t,e){var i=this.center;void 0!==e?i.copy(e):si.setFromPoints(t).getCenter(i);for(var n=0,r=0,s=t.length;r<s;r++)n=Math.max(n,i.distanceToSquared(t[r]));return this.radius=Math.sqrt(n),this}),clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.center.copy(t.center),this.radius=t.radius,this},empty:function(){return this.radius<=0},containsPoint:function(t){return t.distanceToSquared(this.center)<=this.radius*this.radius},distanceToPoint:function(t){return t.distanceTo(this.center)-this.radius},intersectsSphere:function(t){var e=this.radius+t.radius;return t.center.distanceToSquared(this.center)<=e*e},intersectsBox:function(t){return t.intersectsSphere(this)},intersectsPlane:function(t){return Math.abs(t.distanceToPoint(this.center))<=this.radius},clampPoint:function(t,e){var i=this.center.distanceToSquared(t);return void 0===e&&(console.warn(\"THREE.Sphere: .clampPoint() target is now required\"),e=new ei),e.copy(t),i>this.radius*this.radius&&(e.sub(this.center).normalize(),e.multiplyScalar(this.radius).add(this.center)),e},getBoundingBox:function(t){return void 0===t&&(console.warn(\"THREE.Sphere: .getBoundingBox() target is now required\"),t=new vi),t.set(this.center,this.center),t.expandByScalar(this.radius),t},applyMatrix4:function(t){return this.center.applyMatrix4(t),this.radius=this.radius*t.getMaxScaleOnAxis(),this},translate:function(t){return this.center.add(t),this},equals:function(t){return t.center.equals(this.center)&&t.radius===this.radius}}),Object.assign(yi.prototype,{set:function(t,e){return this.normal.copy(t),this.constant=e,this},setComponents:function(t,e,i,n){return this.normal.set(t,e,i),this.constant=n,this},setFromNormalAndCoplanarPoint:function(t,e){return this.normal.copy(t),this.constant=-e.dot(this.normal),this},setFromCoplanarPoints:function(){var t=new ei,e=new ei;return function(i,n,r){var s=t.subVectors(r,n).cross(e.subVectors(i,n)).normalize();return this.setFromNormalAndCoplanarPoint(s,i),this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.normal.copy(t.normal),this.constant=t.constant,this},normalize:function(){var t=1/this.normal.length();return this.normal.multiplyScalar(t),this.constant*=t,this},negate:function(){return this.constant*=-1,this.normal.negate(),this},distanceToPoint:function(t){return this.normal.dot(t)+this.constant},distanceToSphere:function(t){return this.distanceToPoint(t.center)-t.radius},projectPoint:function(t,e){return void 0===e&&(console.warn(\"THREE.Plane: .projectPoint() target is now required\"),e=new ei),e.copy(this.normal).multiplyScalar(-this.distanceToPoint(t)).add(t)},intersectLine:function(){var t=new ei;return function(e,i){void 0===i&&(console.warn(\"THREE.Plane: .intersectLine() target is now required\"),i=new ei);var n=e.delta(t),r=this.normal.dot(n);if(0===r)return 0===this.distanceToPoint(e.start)?i.copy(e.start):void 0;var s=-(e.start.dot(this.normal)+this.constant)/r;return s<0||s>1?void 0:i.copy(n).multiplyScalar(s).add(e.start)}}(),intersectsLine:function(t){var e=this.distanceToPoint(t.start),i=this.distanceToPoint(t.end);return e<0&&i>0||i<0&&e>0},intersectsBox:function(t){return t.intersectsPlane(this)},intersectsSphere:function(t){return t.intersectsPlane(this)},coplanarPoint:function(t){return void 0===t&&(console.warn(\"THREE.Plane: .coplanarPoint() target is now required\"),t=new ei),t.copy(this.normal).multiplyScalar(-this.constant)},applyMatrix4:function(){var t=new ei,e=new ii;return function(i,n){var r=n||e.getNormalMatrix(i),s=this.coplanarPoint(t).applyMatrix4(i),a=this.normal.applyMatrix3(r).normalize();return this.constant=-s.dot(a),this}}(),translate:function(t){return this.constant-=t.dot(this.normal),this},equals:function(t){return t.normal.equals(this.normal)&&t.constant===this.constant}}),Object.assign(xi.prototype,{set:function(t,e,i,n,r,s){var a=this.planes;return a[0].copy(t),a[1].copy(e),a[2].copy(i),a[3].copy(n),a[4].copy(r),a[5].copy(s),this},clone:function(){return(new this.constructor).copy(this)},copy:function(t){for(var e=this.planes,i=0;i<6;i++)e[i].copy(t.planes[i]);return this},setFromMatrix:function(t){var e=this.planes,i=t.elements,n=i[0],r=i[1],s=i[2],a=i[3],o=i[4],h=i[5],l=i[6],c=i[7],u=i[8],p=i[9],d=i[10],m=i[11],f=i[12],v=i[13],g=i[14],y=i[15];return e[0].setComponents(a-n,c-o,m-u,y-f).normalize(),e[1].setComponents(a+n,c+o,m+u,y+f).normalize(),e[2].setComponents(a+r,c+h,m+p,y+v).normalize(),e[3].setComponents(a-r,c-h,m-p,y-v).normalize(),e[4].setComponents(a-s,c-l,m-d,y-g).normalize(),e[5].setComponents(a+s,c+l,m+d,y+g).normalize(),this},intersectsObject:(oi=new gi,function(t){var e=t.geometry;return null===e.boundingSphere&&e.computeBoundingSphere(),oi.copy(e.boundingSphere).applyMatrix4(t.matrixWorld),this.intersectsSphere(oi)}),intersectsSprite:function(){var t=new gi;return function(e){return t.center.set(0,0,0),t.radius=.7071067811865476,t.applyMatrix4(e.matrixWorld),this.intersectsSphere(t)}}(),intersectsSphere:function(t){for(var e=this.planes,i=t.center,n=-t.radius,r=0;r<6;r++){if(e[r].distanceToPoint(i)<n)return!1}return!0},intersectsBox:(ai=new ei,function(t){for(var e=this.planes,i=0;i<6;i++){var n=e[i];if(ai.x=n.normal.x>0?t.max.x:t.min.x,ai.y=n.normal.y>0?t.max.y:t.min.y,ai.z=n.normal.z>0?t.max.z:t.min.z,n.distanceToPoint(ai)<0)return!1}return!0}),containsPoint:function(t){for(var e=this.planes,i=0;i<6;i++)if(e[i].distanceToPoint(t)<0)return!1;return!0}});var bi={alphamap_fragment:\"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\",alphamap_pars_fragment:\"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\",alphatest_fragment:\"#ifdef ALPHATEST\\n\\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\",aomap_fragment:\"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\\t#endif\\n#endif\",aomap_pars_fragment:\"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\",begin_vertex:\"vec3 transformed = vec3( position );\",beginnormal_vertex:\"vec3 objectNormal = vec3( normal );\",bsdfs:\"vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\\n}\\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\tif( cutoffDistance > 0.0 ) {\\n\\t\\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t}\\n\\treturn distanceFalloff;\\n#else\\n\\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\\n\\t\\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n\\t}\\n\\treturn 1.0;\\n#endif\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( G * D );\\n}\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\n\\tconst float LUT_SIZE  = 64.0;\\n\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\n\\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\\n\\tfloat dotNV = saturate( dot( N, V ) );\\n\\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\\n\\tuv = uv * LUT_SCALE + LUT_BIAS;\\n\\treturn uv;\\n}\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\n\\tfloat l = length( f );\\n\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\n}\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\n\\tfloat x = dot( v1, v2 );\\n\\tfloat y = abs( x );\\n\\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\\n\\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\\n\\tfloat v = a / b;\\n\\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\\n\\treturn cross( v1, v2 ) * theta_sintheta;\\n}\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\n\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\n\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\n\\tvec3 lightNormal = cross( v1, v2 );\\n\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\n\\tvec3 T1, T2;\\n\\tT1 = normalize( V - N * dot( V, N ) );\\n\\tT2 = - cross( N, T1 );\\n\\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\\n\\tvec3 coords[ 4 ];\\n\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\n\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\n\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\n\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\n\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\n\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\n\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\n\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\n\\tvec3 vectorFormFactor = vec3( 0.0 );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\n\\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\\n\\treturn vec3( result );\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\\n\\treturn specularColor * brdf.x + brdf.y;\\n}\\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotNV );\\n\\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\\n\\tvec3 FssEss = F * brdf.x + brdf.y;\\n\\tfloat Ess = brdf.x + brdf.y;\\n\\tfloat Ems = 1.0 - Ess;\\n\\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\\n\\tsingleScatter += FssEss;\\n\\tmultiScatter += Fms * Ems;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\",bumpmap_pars_fragment:\"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\\t\\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\\n\\t\\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 );\\n\\t\\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\",clipping_planes_fragment:\"#if NUM_CLIPPING_PLANES > 0\\n\\tvec4 plane;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\\n\\t\\tplane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\t\\tbool clipped = true;\\n\\t\\t#pragma unroll_loop\\n\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\\n\\t\\t\\tplane = clippingPlanes[ i ];\\n\\t\\t\\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\\n\\t\\t}\\n\\t\\tif ( clipped ) discard;\\n\\t#endif\\n#endif\",clipping_planes_pars_fragment:\"#if NUM_CLIPPING_PLANES > 0\\n\\t#if ! defined( PHYSICAL ) && ! defined( PHONG ) && ! defined( MATCAP )\\n\\t\\tvarying vec3 vViewPosition;\\n\\t#endif\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\",clipping_planes_pars_vertex:\"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG ) && ! defined( MATCAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\",clipping_planes_vertex:\"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG ) && ! defined( MATCAP )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\",color_fragment:\"#ifdef USE_COLOR\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\",color_pars_fragment:\"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\",color_pars_vertex:\"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\",color_vertex:\"#ifdef USE_COLOR\\n\\tvColor.xyz = color.xyz;\\n#endif\",common:\"#define PI 3.14159265359\\n#define PI2 6.28318530718\\n#define PI_HALF 1.5707963267949\\n#define RECIPROCAL_PI 0.31830988618\\n#define RECIPROCAL_PI2 0.15915494\\n#define LOG2 1.442695\\n#define EPSILON 1e-6\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract(sin(sn) * c);\\n}\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\nmat3 transposeMat3( const in mat3 m ) {\\n\\tmat3 tmp;\\n\\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\\n\\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\\n\\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\\n\\treturn tmp;\\n}\\nfloat linearToRelativeLuminance( const in vec3 color ) {\\n\\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\\n\\treturn dot( weights, color.rgb );\\n}\",cube_uv_reflection_fragment:\"#ifdef ENVMAP_TYPE_CUBE_UV\\n#define cubeUV_textureSize (1024.0)\\nint getFaceFromDirection(vec3 direction) {\\n\\tvec3 absDirection = abs(direction);\\n\\tint face = -1;\\n\\tif( absDirection.x > absDirection.z ) {\\n\\t\\tif(absDirection.x > absDirection.y )\\n\\t\\t\\tface = direction.x > 0.0 ? 0 : 3;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\telse {\\n\\t\\tif(absDirection.z > absDirection.y )\\n\\t\\t\\tface = direction.z > 0.0 ? 2 : 5;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\treturn face;\\n}\\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\\n\\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\\n\\tfloat dxRoughness = dFdx(roughness);\\n\\tfloat dyRoughness = dFdy(roughness);\\n\\tvec3 dx = dFdx( vec * scale * dxRoughness );\\n\\tvec3 dy = dFdy( vec * scale * dyRoughness );\\n\\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\\n\\td = clamp(d, 1.0, cubeUV_rangeClamp);\\n\\tfloat mipLevel = 0.5 * log2(d);\\n\\treturn vec2(floor(mipLevel), fract(mipLevel));\\n}\\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\\n\\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\\n\\tfloat a = 16.0 * cubeUV_rcpTextureSize;\\n\\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\\n\\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\\n\\tfloat powScale = exp2_packed.x * exp2_packed.y;\\n\\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\\n\\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\\n\\tbool bRes = mipLevel == 0.0;\\n\\tscale =  bRes && (scale < a) ? a : scale;\\n\\tvec3 r;\\n\\tvec2 offset;\\n\\tint face = getFaceFromDirection(direction);\\n\\tfloat rcpPowScale = 1.0 / powScale;\\n\\tif( face == 0) {\\n\\t\\tr = vec3(direction.x, -direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 1) {\\n\\t\\tr = vec3(direction.y, direction.x, direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 2) {\\n\\t\\tr = vec3(direction.z, direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 3) {\\n\\t\\tr = vec3(direction.x, direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\telse if( face == 4) {\\n\\t\\tr = vec3(direction.y, direction.x, -direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\telse {\\n\\t\\tr = vec3(direction.z, -direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\tr = normalize(r);\\n\\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\\n\\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\\n\\tvec2 base = offset + vec2( texelOffset );\\n\\treturn base + s * ( scale - 2.0 * texelOffset );\\n}\\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\\nvec4 textureCubeUV( sampler2D envMap, vec3 reflectedDirection, float roughness ) {\\n\\tfloat roughnessVal = roughness* cubeUV_maxLods3;\\n\\tfloat r1 = floor(roughnessVal);\\n\\tfloat r2 = r1 + 1.0;\\n\\tfloat t = fract(roughnessVal);\\n\\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\\n\\tfloat s = mipInfo.y;\\n\\tfloat level0 = mipInfo.x;\\n\\tfloat level1 = level0 + 1.0;\\n\\tlevel1 = level1 > 5.0 ? 5.0 : level1;\\n\\tlevel0 += min( floor( s + 0.5 ), 5.0 );\\n\\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\\n\\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\\n\\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\\n\\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\\n\\tvec4 result = mix(color10, color20, t);\\n\\treturn vec4(result.rgb, 1.0);\\n}\\n#endif\",defaultnormal_vertex:\"vec3 transformedNormal = normalMatrix * objectNormal;\\n#ifdef FLIP_SIDED\\n\\ttransformedNormal = - transformedNormal;\\n#endif\",displacementmap_pars_vertex:\"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\",displacementmap_vertex:\"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\\n#endif\",emissivemap_fragment:\"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\",emissivemap_pars_fragment:\"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\",encodings_fragment:\"gl_FragColor = linearToOutputTexel( gl_FragColor );\",encodings_pars_fragment:\"\\nvec4 LinearToLinear( in vec4 value ) {\\n\\treturn value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n\\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n\\tfloat maxComponent = max( max( value.r, value.g ), value.b );\\n\\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n\\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n\\tM = ceil( M * 255.0 ) / 255.0;\\n\\treturn vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat D = max( maxRange / maxRGB, 1.0 );\\n\\tD = min( floor( D ) / 255.0, 1.0 );\\n\\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value )  {\\n\\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\\n\\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\\n\\tvec4 vResult;\\n\\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n\\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n\\tvResult.w = fract( Le );\\n\\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\\n\\treturn vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n\\tfloat Le = value.z * 255.0 + value.w;\\n\\tvec3 Xp_Y_XYZp;\\n\\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\\n\\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n\\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n\\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\\n\\treturn vec4( max( vRGB, 0.0 ), 1.0 );\\n}\",envmap_fragment:\"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\tvec2 sampleUV;\\n\\t\\treflectVec = normalize( reflectVec );\\n\\t\\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\t\\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\tvec4 envColor = texture2D( envMap, sampleUV );\\n\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\treflectVec = normalize( reflectVec );\\n\\t\\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\\n\\t\\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\",envmap_pars_fragment:\"#if defined( USE_ENVMAP ) || defined( PHYSICAL )\\n\\tuniform float reflectivity;\\n\\tuniform float envMapIntensity;\\n#endif\\n#ifdef USE_ENVMAP\\n\\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\tuniform float flipEnvMap;\\n\\tuniform int maxMipLevel;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\",envmap_pars_vertex:\"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\",envmap_physical_pars_fragment:\"#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\\t\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, queryVec, 1.0 );\\n\\t\\t#else\\n\\t\\t\\tvec4 envMapColor = vec4( 0.0 );\\n\\t\\t#endif\\n\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t}\\n\\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\\t\\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\\t\\tfloat desiredMIPLevel = maxMIPLevelScalar + 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\\n\\t\\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\\t}\\n\\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\\n\\t\\t#endif\\n\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent ));\\n\\t\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\t\\tvec2 sampleUV;\\n\\t\\t\\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\t\\t\\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\t\\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#endif\\n\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t}\\n#endif\",envmap_vertex:\"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\",fog_vertex:\"#ifdef USE_FOG\\n\\tfogDepth = -mvPosition.z;\\n#endif\",fog_pars_vertex:\"#ifdef USE_FOG\\n\\tvarying float fogDepth;\\n#endif\",fog_fragment:\"#ifdef USE_FOG\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\",fog_pars_fragment:\"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\tvarying float fogDepth;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\",gradientmap_pars_fragment:\"#ifdef TOON\\n\\tuniform sampler2D gradientMap;\\n\\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\n\\t\\tfloat dotNL = dot( normal, lightDirection );\\n\\t\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\n\\t\\t#ifdef USE_GRADIENTMAP\\n\\t\\t\\treturn texture2D( gradientMap, coord ).rgb;\\n\\t\\t#else\\n\\t\\t\\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\\n\\t\\t#endif\\n\\t}\\n#endif\",lightmap_fragment:\"#ifdef USE_LIGHTMAP\\n\\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n#endif\",lightmap_pars_fragment:\"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\",lights_lambert_vertex:\"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\nvIndirectFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n\\tvIndirectBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\n#if NUM_POINT_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\\t\\t#endif\\n\\t}\\n#endif\",lights_pars_begin:\"uniform vec3 ambientLightColor;\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tdirectLight.color = directionalLight.color;\\n\\t\\tdirectLight.direction = directionalLight.direction;\\n\\t\\tdirectLight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t\\tfloat shadowCameraNear;\\n\\t\\tfloat shadowCameraFar;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tdirectLight.color = pointLight.color;\\n\\t\\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\\t\\tif ( angleCos > spotLight.coneCos ) {\\n\\t\\t\\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\t\\tdirectLight.color = spotLight.color;\\n\\t\\t\\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tstruct RectAreaLight {\\n\\t\\tvec3 color;\\n\\t\\tvec3 position;\\n\\t\\tvec3 halfWidth;\\n\\t\\tvec3 halfHeight;\\n\\t};\\n\\tuniform sampler2D ltc_1;\\tuniform sampler2D ltc_2;\\n\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\\t\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tirradiance *= PI;\\n\\t\\t#endif\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\",lights_phong_fragment:\"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\",lights_phong_pars_fragment:\"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tvec3\\tspecularColor;\\n\\tfloat\\tspecularShininess;\\n\\tfloat\\tspecularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t#ifdef TOON\\n\\t\\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\\n\\t#else\\n\\t\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\t\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#endif\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\",lights_physical_fragment:\"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\\n#ifdef STANDARD\\n\\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\n\\tmaterial.clearCoat = saturate( clearCoat );\\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\\n#endif\",lights_physical_pars_fragment:\"struct PhysicalMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tfloat\\tspecularRoughness;\\n\\tvec3\\tspecularColor;\\n\\t#ifndef STANDARD\\n\\t\\tfloat clearCoat;\\n\\t\\tfloat clearCoatRoughness;\\n\\t#endif\\n};\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\\n\\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\n}\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t\\tvec3 normal = geometry.normal;\\n\\t\\tvec3 viewDir = geometry.viewDir;\\n\\t\\tvec3 position = geometry.position;\\n\\t\\tvec3 lightPos = rectAreaLight.position;\\n\\t\\tvec3 halfWidth = rectAreaLight.halfWidth;\\n\\t\\tvec3 halfHeight = rectAreaLight.halfHeight;\\n\\t\\tvec3 lightColor = rectAreaLight.color;\\n\\t\\tfloat roughness = material.specularRoughness;\\n\\t\\tvec3 rectCoords[ 4 ];\\n\\t\\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\\t\\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\\n\\t\\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\\n\\t\\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\\n\\t\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\n\\t\\tvec4 t1 = texture2D( ltc_1, uv );\\n\\t\\tvec4 t2 = texture2D( ltc_2, uv );\\n\\t\\tmat3 mInv = mat3(\\n\\t\\t\\tvec3( t1.x, 0, t1.y ),\\n\\t\\t\\tvec3(    0, 1,    0 ),\\n\\t\\t\\tvec3( t1.z, 0, t1.w )\\n\\t\\t);\\n\\t\\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\\n\\t\\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\n\\t\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\\n\\t}\\n#endif\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\t#ifndef STANDARD\\n\\t\\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\\t#else\\n\\t\\tfloat clearCoatDHR = 0.0;\\n\\t#endif\\n\\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\\n\\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\t#ifndef STANDARD\\n\\t\\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\\t#endif\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t#ifndef ENVMAP_TYPE_CUBE_UV\\n\\t\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\t#endif\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\\n\\t#ifndef STANDARD\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\tfloat dotNL = dotNV;\\n\\t\\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\\t#else\\n\\t\\tfloat clearCoatDHR = 0.0;\\n\\t#endif\\n\\tfloat clearCoatInv = 1.0 - clearCoatDHR;\\n\\t#if defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tvec3 singleScattering = vec3( 0.0 );\\n\\t\\tvec3 multiScattering = vec3( 0.0 );\\n\\t\\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\\n\\t\\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\\n\\t\\tvec3 diffuse = material.diffuseColor;\\n\\t\\treflectedLight.indirectSpecular += clearCoatInv * radiance * singleScattering;\\n\\t\\treflectedLight.indirectDiffuse += multiScattering * cosineWeightedIrradiance;\\n\\t\\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\\n\\t#else\\n\\t\\treflectedLight.indirectSpecular += clearCoatInv * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\\n\\t#endif\\n\\t#ifndef STANDARD\\n\\t\\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\\t#endif\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_Direct_RectArea\\t\\tRE_Direct_RectArea_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\",lights_fragment_begin:\"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = normalize( vViewPosition );\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\n\\tRectAreaLight rectAreaLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\n\\t\\trectAreaLight = rectAreaLights[ i ];\\n\\t\\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\t#pragma unroll_loop\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t}\\n\\t#endif\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tvec3 radiance = vec3( 0.0 );\\n\\tvec3 clearCoatRadiance = vec3( 0.0 );\\n#endif\",lights_fragment_maps:\"#if defined( RE_IndirectDiffuse )\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tirradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\\n\\t#endif\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tradiance += getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), maxMipLevel );\\n\\t#ifndef STANDARD\\n\\t\\tclearCoatRadiance += getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), maxMipLevel );\\n\\t#endif\\n#endif\",lights_fragment_end:\"#if defined( RE_IndirectDiffuse )\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tRE_IndirectSpecular( radiance, irradiance, clearCoatRadiance, geometry, material, reflectedLight );\\n#endif\",logdepthbuf_fragment:\"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tgl_FragDepthEXT = log2( vFragDepth ) * logDepthBufFC * 0.5;\\n#endif\",logdepthbuf_pars_fragment:\"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tuniform float logDepthBufFC;\\n\\tvarying float vFragDepth;\\n#endif\",logdepthbuf_pars_vertex:\"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t#else\\n\\t\\tuniform float logDepthBufFC;\\n\\t#endif\\n#endif\",logdepthbuf_vertex:\"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t#else\\n\\t\\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\\n\\t\\tgl_Position.z *= gl_Position.w;\\n\\t#endif\\n#endif\",map_fragment:\"#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif\",map_pars_fragment:\"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\",map_particle_fragment:\"#ifdef USE_MAP\\n\\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\\n\\tvec4 mapTexel = texture2D( map, uv );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\",map_particle_pars_fragment:\"#ifdef USE_MAP\\n\\tuniform mat3 uvTransform;\\n\\tuniform sampler2D map;\\n#endif\",metalnessmap_fragment:\"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.b;\\n#endif\",metalnessmap_pars_fragment:\"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\",morphnormal_vertex:\"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\\n\\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\\n\\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\\n\\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\\n#endif\",morphtarget_pars_vertex:\"#ifdef USE_MORPHTARGETS\\n\\t#ifndef USE_MORPHNORMALS\\n\\tuniform float morphTargetInfluences[ 8 ];\\n\\t#else\\n\\tuniform float morphTargetInfluences[ 4 ];\\n\\t#endif\\n#endif\",morphtarget_vertex:\"#ifdef USE_MORPHTARGETS\\n\\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\\n\\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\\n\\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\\n\\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\\n\\t#ifndef USE_MORPHNORMALS\\n\\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\\n\\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\\n\\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\\n\\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\\n\\t#endif\\n#endif\",normal_fragment_begin:\"#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t#endif\\n#endif\",normal_fragment_maps:\"#ifdef USE_NORMALMAP\\n\\t#ifdef OBJECTSPACE_NORMALMAP\\n\\t\\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t\\t#ifdef FLIP_SIDED\\n\\t\\t\\tnormal = - normal;\\n\\t\\t#endif\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\t#endif\\n\\t\\tnormal = normalize( normalMatrix * normal );\\n\\t#else\\n\\t\\tnormal = perturbNormal2Arb( -vViewPosition, normal );\\n\\t#endif\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n#endif\",normalmap_pars_fragment:\"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n\\t#ifdef OBJECTSPACE_NORMALMAP\\n\\t\\tuniform mat3 normalMatrix;\\n\\t#else\\n\\t\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\\n\\t\\t\\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\\n\\t\\t\\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\\n\\t\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\t\\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\\n\\t\\t\\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\\n\\t\\t\\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\\n\\t\\t\\tvec3 N = normalize( surf_norm );\\n\\t\\t\\tmat3 tsn = mat3( S, T, N );\\n\\t\\t\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t\\t\\tmapN.xy *= normalScale;\\n\\t\\t\\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\t\\treturn normalize( tsn * mapN );\\n\\t\\t}\\n\\t#endif\\n#endif\",packing:\"vec3 packNormalToRGB( const in vec3 normal ) {\\n\\treturn normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n\\treturn 2.0 * rgb.xyz - 1.0;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n\\treturn linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n\\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\",premultiplied_alpha_fragment:\"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\",project_vertex:\"vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\\ngl_Position = projectionMatrix * mvPosition;\",dithering_fragment:\"#if defined( DITHERING )\\n  gl_FragColor.rgb = dithering( gl_FragColor.rgb );\\n#endif\",dithering_pars_fragment:\"#if defined( DITHERING )\\n\\tvec3 dithering( vec3 color ) {\\n\\t\\tfloat grid_position = rand( gl_FragCoord.xy );\\n\\t\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\n\\t\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\n\\t\\treturn color + dither_shift_RGB;\\n\\t}\\n#endif\",roughnessmap_fragment:\"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.g;\\n#endif\",roughnessmap_pars_fragment:\"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\",shadowmap_pars_fragment:\"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\\n\\t\\tconst vec2 offset = vec2( 0.0, 1.0 );\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / size;\\n\\t\\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\\n\\t\\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\\n\\t\\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\\n\\t\\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\\n\\t\\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\\n\\t\\tvec2 f = fract( uv * size + 0.5 );\\n\\t\\tfloat a = mix( lb, lt, f.y );\\n\\t\\tfloat b = mix( rb, rt, f.y );\\n\\t\\tfloat c = mix( a, b, f.x );\\n\\t\\treturn c;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tfloat shadow = 1.0;\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn shadow;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\\t\\tdp += shadowBias;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\",shadowmap_pars_vertex:\"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\\t#endif\\n#endif\",shadowmap_vertex:\"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n#endif\",shadowmask_pars_fragment:\"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\tDirectionalLight directionalLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\tSpotLight spotLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\tPointLight pointLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\",skinbase_vertex:\"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\",skinning_pars_vertex:\"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform sampler2D boneTexture;\\n\\t\\tuniform int boneTextureSize;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureSize ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureSize ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureSize );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureSize );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\",skinning_vertex:\"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\n#endif\",skinnormal_vertex:\"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n#endif\",specularmap_fragment:\"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\",specularmap_pars_fragment:\"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\",tonemapping_fragment:\"#if defined( TONE_MAPPING )\\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\",tonemapping_pars_fragment:\"#ifndef saturate\\n\\t#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\nuniform float toneMappingExposure;\\nuniform float toneMappingWhitePoint;\\nvec3 LinearToneMapping( vec3 color ) {\\n\\treturn toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\\nvec3 Uncharted2ToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\n\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\nvec3 ACESFilmicToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( ( color * ( 2.51 * color + 0.03 ) ) / ( color * ( 2.43 * color + 0.59 ) + 0.14 ) );\\n}\",uv_pars_fragment:\"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvarying vec2 vUv;\\n#endif\",uv_pars_vertex:\"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvarying vec2 vUv;\\n\\tuniform mat3 uvTransform;\\n#endif\",uv_vertex:\"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n#endif\",uv2_pars_fragment:\"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\",uv2_pars_vertex:\"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n#endif\",uv2_vertex:\"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = uv2;\\n#endif\",worldpos_vertex:\"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\\n\\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\\n#endif\",background_frag:\"uniform sampler2D t2D;\\nvarying vec2 vUv;\\nvoid main() {\\n\\tvec4 texColor = texture2D( t2D, vUv );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\",background_vert:\"varying vec2 vUv;\\nuniform mat3 uvTransform;\\nvoid main() {\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n\\tgl_Position = vec4( position.xy, 1.0, 1.0 );\\n}\",cube_frag:\"uniform samplerCube tCube;\\nuniform float tFlip;\\nuniform float opacity;\\nvarying vec3 vWorldDirection;\\nvoid main() {\\n\\tvec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\tgl_FragColor.a *= opacity;\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\",cube_vert:\"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\tgl_Position.z = gl_Position.w;\\n}\",depth_frag:\"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( 1.0 - gl_FragCoord.z ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\\n\\t#endif\\n}\",depth_vert:\"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\",distanceRGBA_frag:\"#define DISTANCE\\nuniform vec3 referencePosition;\\nuniform float nearDistance;\\nuniform float farDistance;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\tfloat dist = length( vWorldPosition - referencePosition );\\n\\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\\n\\tdist = saturate( dist );\\n\\tgl_FragColor = packDepthToRGBA( dist );\\n}\",distanceRGBA_vert:\"#define DISTANCE\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition.xyz;\\n}\",equirect_frag:\"uniform sampler2D tEquirect;\\nvarying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldDirection );\\n\\tvec2 sampleUV;\\n\\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tvec4 texColor = texture2D( tEquirect, sampleUV );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\",equirect_vert:\"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\",linedashed_frag:\"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\",linedashed_vert:\"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\tvLineDistance = scale * lineDistance;\\n\\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\",meshbasic_frag:\"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\n\\t#endif\\n\\t#include <aomap_fragment>\\n\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\",meshbasic_vert:\"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_ENVMAP\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <fog_vertex>\\n}\",meshlambert_frag:\"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vIndirectFront;\\n\\t#endif\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\",meshlambert_vert:\"#define LAMBERT\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\",meshmatcap_frag:\"#define MATCAP\\nuniform vec3 diffuse;\\nuniform float opacity;\\nuniform sampler2D matcap;\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tvec3 viewDir = normalize( vViewPosition );\\n\\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\\n\\tvec3 y = cross( viewDir, x );\\n\\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\\n\\t#ifdef USE_MATCAP\\n\\t\\tvec4 matcapColor = texture2D( matcap, uv );\\n\\t\\tmatcapColor = matcapTexelToLinear( matcapColor );\\n\\t#else\\n\\t\\tvec4 matcapColor = vec4( 1.0 );\\n\\t#endif\\n\\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\",meshmatcap_vert:\"#define MATCAP\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#ifndef FLAT_SHADED\\n\\t\\tvNormal = normalize( transformedNormal );\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n}\",meshphong_frag:\"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <gradientmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\",meshphong_vert:\"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\",meshphysical_frag:\"#define PHYSICAL\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifndef STANDARD\\n\\tuniform float clearCoat;\\n\\tuniform float clearCoatRoughness;\\n#endif\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <envmap_pars_fragment>\\n#include <envmap_physical_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <lights_pars_begin>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\",meshphysical_vert:\"#define PHYSICAL\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\",normal_frag:\"#define NORMAL\\nuniform float opacity;\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\nvoid main() {\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\\n}\",normal_vert:\"#define NORMAL\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n}\",points_frag:\"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\",points_vert:\"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\tgl_PointSize = size;\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\\n\\t\\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <fog_vertex>\\n}\",shadow_frag:\"uniform vec3 color;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\\n\\t#include <fog_fragment>\\n}\",shadow_vert:\"#include <fog_pars_vertex>\\n#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\",sprite_frag:\"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\",sprite_vert:\"uniform float rotation;\\nuniform vec2 center;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\tvec2 scale;\\n\\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\\n\\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\\n\\t#ifndef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\\n\\t\\tif ( isPerspective ) scale *= - mvPosition.z;\\n\\t#endif\\n\\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\\n\\tvec2 rotatedPosition;\\n\\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\\n\\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\\n\\tmvPosition.xy += rotatedPosition;\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\"};function wi(t){var e={};for(var i in t)for(var n in e[i]={},t[i]){var r=t[i][n];r&&(r.isColor||r.isMatrix3||r.isMatrix4||r.isVector2||r.isVector3||r.isVector4||r.isTexture)?e[i][n]=r.clone():Array.isArray(r)?e[i][n]=r.slice():e[i][n]=r}return e}function Mi(t){for(var e={},i=0;i<t.length;i++){var n=wi(t[i]);for(var r in n)e[r]=n[r]}return e}var _i,Si,Ei,Ti={clone:wi,merge:Mi},Li={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Ai(t,e,i){return void 0===e&&void 0===i?this.set(t):this.setRGB(t,e,i)}Object.assign(Ai.prototype,{isColor:!0,r:1,g:1,b:1,set:function(t){return t&&t.isColor?this.copy(t):\"number\"==typeof t?this.setHex(t):\"string\"==typeof t&&this.setStyle(t),this},setScalar:function(t){return this.r=t,this.g=t,this.b=t,this},setHex:function(t){return t=Math.floor(t),this.r=(t>>16&255)/255,this.g=(t>>8&255)/255,this.b=(255&t)/255,this},setRGB:function(t,e,i){return this.r=t,this.g=e,this.b=i,this},setHSL:function(){function t(t,e,i){return i<0&&(i+=1),i>1&&(i-=1),i<1/6?t+6*(e-t)*i:i<.5?e:i<2/3?t+6*(e-t)*(2/3-i):t}return function(e,i,n){if(e=Qe.euclideanModulo(e,1),i=Qe.clamp(i,0,1),n=Qe.clamp(n,0,1),0===i)this.r=this.g=this.b=n;else{var r=n<=.5?n*(1+i):n+i-n*i,s=2*n-r;this.r=t(s,r,e+1/3),this.g=t(s,r,e),this.b=t(s,r,e-1/3)}return this}}(),setStyle:function(t){function e(e){void 0!==e&&parseFloat(e)<1&&console.warn(\"THREE.Color: Alpha component of \"+t+\" will be ignored.\")}var i;if(i=/^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec(t)){var n,r=i[1],s=i[2];switch(r){case\"rgb\":case\"rgba\":if(n=/^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec(s))return this.r=Math.min(255,parseInt(n[1],10))/255,this.g=Math.min(255,parseInt(n[2],10))/255,this.b=Math.min(255,parseInt(n[3],10))/255,e(n[5]),this;if(n=/^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec(s))return this.r=Math.min(100,parseInt(n[1],10))/100,this.g=Math.min(100,parseInt(n[2],10))/100,this.b=Math.min(100,parseInt(n[3],10))/100,e(n[5]),this;break;case\"hsl\":case\"hsla\":if(n=/^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec(s)){var a=parseFloat(n[1])/360,o=parseInt(n[2],10)/100,h=parseInt(n[3],10)/100;return e(n[5]),this.setHSL(a,o,h)}}}else if(i=/^\\#([A-Fa-f0-9]+)$/.exec(t)){var l,c=(l=i[1]).length;if(3===c)return this.r=parseInt(l.charAt(0)+l.charAt(0),16)/255,this.g=parseInt(l.charAt(1)+l.charAt(1),16)/255,this.b=parseInt(l.charAt(2)+l.charAt(2),16)/255,this;if(6===c)return this.r=parseInt(l.charAt(0)+l.charAt(1),16)/255,this.g=parseInt(l.charAt(2)+l.charAt(3),16)/255,this.b=parseInt(l.charAt(4)+l.charAt(5),16)/255,this}t&&t.length>0&&(void 0!==(l=Li[t])?this.setHex(l):console.warn(\"THREE.Color: Unknown color \"+t));return this},clone:function(){return new this.constructor(this.r,this.g,this.b)},copy:function(t){return this.r=t.r,this.g=t.g,this.b=t.b,this},copyGammaToLinear:function(t,e){return void 0===e&&(e=2),this.r=Math.pow(t.r,e),this.g=Math.pow(t.g,e),this.b=Math.pow(t.b,e),this},copyLinearToGamma:function(t,e){void 0===e&&(e=2);var i=e>0?1/e:1;return this.r=Math.pow(t.r,i),this.g=Math.pow(t.g,i),this.b=Math.pow(t.b,i),this},convertGammaToLinear:function(t){return this.copyGammaToLinear(this,t),this},convertLinearToGamma:function(t){return this.copyLinearToGamma(this,t),this},copySRGBToLinear:function(){function t(t){return t<.04045?.0773993808*t:Math.pow(.9478672986*t+.0521327014,2.4)}return function(e){return this.r=t(e.r),this.g=t(e.g),this.b=t(e.b),this}}(),copyLinearToSRGB:function(){function t(t){return t<.0031308?12.92*t:1.055*Math.pow(t,.41666)-.055}return function(e){return this.r=t(e.r),this.g=t(e.g),this.b=t(e.b),this}}(),convertSRGBToLinear:function(){return this.copySRGBToLinear(this),this},convertLinearToSRGB:function(){return this.copyLinearToSRGB(this),this},getHex:function(){return 255*this.r<<16^255*this.g<<8^255*this.b<<0},getHexString:function(){return(\"000000\"+this.getHex().toString(16)).slice(-6)},getHSL:function(t){void 0===t&&(console.warn(\"THREE.Color: .getHSL() target is now required\"),t={h:0,s:0,l:0});var e,i,n=this.r,r=this.g,s=this.b,a=Math.max(n,r,s),o=Math.min(n,r,s),h=(o+a)/2;if(o===a)e=0,i=0;else{var l=a-o;switch(i=h<=.5?l/(a+o):l/(2-a-o),a){case n:e=(r-s)/l+(r<s?6:0);break;case r:e=(s-n)/l+2;break;case s:e=(n-r)/l+4}e/=6}return t.h=e,t.s=i,t.l=h,t},getStyle:function(){return\"rgb(\"+(255*this.r|0)+\",\"+(255*this.g|0)+\",\"+(255*this.b|0)+\")\"},offsetHSL:(Ei={},function(t,e,i){return this.getHSL(Ei),Ei.h+=t,Ei.s+=e,Ei.l+=i,this.setHSL(Ei.h,Ei.s,Ei.l),this}),add:function(t){return this.r+=t.r,this.g+=t.g,this.b+=t.b,this},addColors:function(t,e){return this.r=t.r+e.r,this.g=t.g+e.g,this.b=t.b+e.b,this},addScalar:function(t){return this.r+=t,this.g+=t,this.b+=t,this},sub:function(t){return this.r=Math.max(0,this.r-t.r),this.g=Math.max(0,this.g-t.g),this.b=Math.max(0,this.b-t.b),this},multiply:function(t){return this.r*=t.r,this.g*=t.g,this.b*=t.b,this},multiplyScalar:function(t){return this.r*=t,this.g*=t,this.b*=t,this},lerp:function(t,e){return this.r+=(t.r-this.r)*e,this.g+=(t.g-this.g)*e,this.b+=(t.b-this.b)*e,this},lerpHSL:(_i={h:0,s:0,l:0},Si={h:0,s:0,l:0},function(t,e){this.getHSL(_i),t.getHSL(Si);var i=Qe.lerp(_i.h,Si.h,e),n=Qe.lerp(_i.s,Si.s,e),r=Qe.lerp(_i.l,Si.l,e);return this.setHSL(i,n,r),this}),equals:function(t){return t.r===this.r&&t.g===this.g&&t.b===this.b},fromArray:function(t,e){return void 0===e&&(e=0),this.r=t[e],this.g=t[e+1],this.b=t[e+2],this},toArray:function(t,e){return void 0===t&&(t=[]),void 0===e&&(e=0),t[e]=this.r,t[e+1]=this.g,t[e+2]=this.b,t},toJSON:function(){return this.getHex()}});var Pi,zi={common:{diffuse:{value:new Ai(15658734)},opacity:{value:1},map:{value:null},uvTransform:{value:new ii},alphaMap:{value:null}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},refractionRatio:{value:.98},maxMipLevel:{value:0}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new Ke(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new Ai(16777215)}},lights:{ambientLightColor:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}}},points:{diffuse:{value:new Ai(15658734)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},uvTransform:{value:new ii}},sprite:{diffuse:{value:new Ai(15658734)},opacity:{value:1},center:{value:new Ke(.5,.5)},rotation:{value:0},map:{value:null},uvTransform:{value:new ii}}},Ni={basic:{uniforms:Mi([zi.common,zi.specularmap,zi.envmap,zi.aomap,zi.lightmap,zi.fog]),vertexShader:bi.meshbasic_vert,fragmentShader:bi.meshbasic_frag},lambert:{uniforms:Mi([zi.common,zi.specularmap,zi.envmap,zi.aomap,zi.lightmap,zi.emissivemap,zi.fog,zi.lights,{emissive:{value:new Ai(0)}}]),vertexShader:bi.meshlambert_vert,fragmentShader:bi.meshlambert_frag},phong:{uniforms:Mi([zi.common,zi.specularmap,zi.envmap,zi.aomap,zi.lightmap,zi.emissivemap,zi.bumpmap,zi.normalmap,zi.displacementmap,zi.gradientmap,zi.fog,zi.lights,{emissive:{value:new Ai(0)},specular:{value:new Ai(1118481)},shininess:{value:30}}]),vertexShader:bi.meshphong_vert,fragmentShader:bi.meshphong_frag},standard:{uniforms:Mi([zi.common,zi.envmap,zi.aomap,zi.lightmap,zi.emissivemap,zi.bumpmap,zi.normalmap,zi.displacementmap,zi.roughnessmap,zi.metalnessmap,zi.fog,zi.lights,{emissive:{value:new Ai(0)},roughness:{value:.5},metalness:{value:.5},envMapIntensity:{value:1}}]),vertexShader:bi.meshphysical_vert,fragmentShader:bi.meshphysical_frag},matcap:{uniforms:Mi([zi.common,zi.bumpmap,zi.normalmap,zi.displacementmap,zi.fog,{matcap:{value:null}}]),vertexShader:bi.meshmatcap_vert,fragmentShader:bi.meshmatcap_frag},points:{uniforms:Mi([zi.points,zi.fog]),vertexShader:bi.points_vert,fragmentShader:bi.points_frag},dashed:{uniforms:Mi([zi.common,zi.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:bi.linedashed_vert,fragmentShader:bi.linedashed_frag},depth:{uniforms:Mi([zi.common,zi.displacementmap]),vertexShader:bi.depth_vert,fragmentShader:bi.depth_frag},normal:{uniforms:Mi([zi.common,zi.bumpmap,zi.normalmap,zi.displacementmap,{opacity:{value:1}}]),vertexShader:bi.normal_vert,fragmentShader:bi.normal_frag},sprite:{uniforms:Mi([zi.sprite,zi.fog]),vertexShader:bi.sprite_vert,fragmentShader:bi.sprite_frag},background:{uniforms:{uvTransform:{value:new ii},t2D:{value:null}},vertexShader:bi.background_vert,fragmentShader:bi.background_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:bi.cube_vert,fragmentShader:bi.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:bi.equirect_vert,fragmentShader:bi.equirect_frag},distanceRGBA:{uniforms:Mi([zi.common,zi.displacementmap,{referencePosition:{value:new ei},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:bi.distanceRGBA_vert,fragmentShader:bi.distanceRGBA_frag},shadow:{uniforms:Mi([zi.lights,zi.fog,{color:{value:new Ai(0)},opacity:{value:1}}]),vertexShader:bi.shadow_vert,fragmentShader:bi.shadow_frag}};function Ri(){var t=null,e=!1,i=null;function n(r,s){!1!==e&&(i(r,s),t.requestAnimationFrame(n))}return{start:function(){!0!==e&&null!==i&&(t.requestAnimationFrame(n),e=!0)},stop:function(){e=!1},setAnimationLoop:function(t){i=t},setContext:function(e){t=e}}}function Ci(t){var e=new WeakMap;return{get:function(t){return t.isInterleavedBufferAttribute&&(t=t.data),e.get(t)},remove:function(i){i.isInterleavedBufferAttribute&&(i=i.data);var n=e.get(i);n&&(t.deleteBuffer(n.buffer),e.delete(i))},update:function(i,n){i.isInterleavedBufferAttribute&&(i=i.data);var r=e.get(i);void 0===r?e.set(i,function(e,i){var n=e.array,r=e.dynamic?35048:35044,s=t.createBuffer();t.bindBuffer(i,s),t.bufferData(i,n,r),e.onUploadCallback();var a=5126;return n instanceof Float32Array?a=5126:n instanceof Float64Array?console.warn(\"THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.\"):n instanceof Uint16Array?a=5123:n instanceof Int16Array?a=5122:n instanceof Uint32Array?a=5125:n instanceof Int32Array?a=5124:n instanceof Int8Array?a=5120:n instanceof Uint8Array&&(a=5121),{buffer:s,type:a,bytesPerElement:n.BYTES_PER_ELEMENT,version:e.version}}(i,n)):r.version<i.version&&(function(e,i,n){var r=i.array,s=i.updateRange;t.bindBuffer(n,e),!1===i.dynamic?t.bufferData(n,r,35044):-1===s.count?t.bufferSubData(n,0,r):0===s.count?console.error(\"THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.\"):(t.bufferSubData(n,s.offset*r.BYTES_PER_ELEMENT,r.subarray(s.offset,s.offset+s.count)),s.count=-1)}(r.buffer,i,n),r.version=i.version)}}}function Ii(t,e,i,n,r,s){this.a=t,this.b=e,this.c=i,this.normal=n&&n.isVector3?n:new ei,this.vertexNormals=Array.isArray(n)?n:[],this.color=r&&r.isColor?r:new Ai,this.vertexColors=Array.isArray(r)?r:[],this.materialIndex=void 0!==s?s:0}function Oi(t,e,i,n){this._x=t||0,this._y=e||0,this._z=i||0,this._order=n||Oi.DefaultOrder}function ki(){this.mask=1}Ni.physical={uniforms:Mi([Ni.standard.uniforms,{clearCoat:{value:0},clearCoatRoughness:{value:0}}]),vertexShader:bi.meshphysical_vert,fragmentShader:bi.meshphysical_frag},Object.assign(Ii.prototype,{clone:function(){return(new this.constructor).copy(this)},copy:function(t){this.a=t.a,this.b=t.b,this.c=t.c,this.normal.copy(t.normal),this.color.copy(t.color),this.materialIndex=t.materialIndex;for(var e=0,i=t.vertexNormals.length;e<i;e++)this.vertexNormals[e]=t.vertexNormals[e].clone();for(e=0,i=t.vertexColors.length;e<i;e++)this.vertexColors[e]=t.vertexColors[e].clone();return this}}),Oi.RotationOrders=[\"XYZ\",\"YZX\",\"ZXY\",\"XZY\",\"YXZ\",\"ZYX\"],Oi.DefaultOrder=\"XYZ\",Object.defineProperties(Oi.prototype,{x:{get:function(){return this._x},set:function(t){this._x=t,this.onChangeCallback()}},y:{get:function(){return this._y},set:function(t){this._y=t,this.onChangeCallback()}},z:{get:function(){return this._z},set:function(t){this._z=t,this.onChangeCallback()}},order:{get:function(){return this._order},set:function(t){this._order=t,this.onChangeCallback()}}}),Object.assign(Oi.prototype,{isEuler:!0,set:function(t,e,i,n){return this._x=t,this._y=e,this._z=i,this._order=n||this._order,this.onChangeCallback(),this},clone:function(){return new this.constructor(this._x,this._y,this._z,this._order)},copy:function(t){return this._x=t._x,this._y=t._y,this._z=t._z,this._order=t._order,this.onChangeCallback(),this},setFromRotationMatrix:function(t,e,i){var n=Qe.clamp,r=t.elements,s=r[0],a=r[4],o=r[8],h=r[1],l=r[5],c=r[9],u=r[2],p=r[6],d=r[10];return\"XYZ\"===(e=e||this._order)?(this._y=Math.asin(n(o,-1,1)),Math.abs(o)<.99999?(this._x=Math.atan2(-c,d),this._z=Math.atan2(-a,s)):(this._x=Math.atan2(p,l),this._z=0)):\"YXZ\"===e?(this._x=Math.asin(-n(c,-1,1)),Math.abs(c)<.99999?(this._y=Math.atan2(o,d),this._z=Math.atan2(h,l)):(this._y=Math.atan2(-u,s),this._z=0)):\"ZXY\"===e?(this._x=Math.asin(n(p,-1,1)),Math.abs(p)<.99999?(this._y=Math.atan2(-u,d),this._z=Math.atan2(-a,l)):(this._y=0,this._z=Math.atan2(h,s))):\"ZYX\"===e?(this._y=Math.asin(-n(u,-1,1)),Math.abs(u)<.99999?(this._x=Math.atan2(p,d),this._z=Math.atan2(h,s)):(this._x=0,this._z=Math.atan2(-a,l))):\"YZX\"===e?(this._z=Math.asin(n(h,-1,1)),Math.abs(h)<.99999?(this._x=Math.atan2(-c,l),this._y=Math.atan2(-u,s)):(this._x=0,this._y=Math.atan2(o,d))):\"XZY\"===e?(this._z=Math.asin(-n(a,-1,1)),Math.abs(a)<.99999?(this._x=Math.atan2(p,l),this._y=Math.atan2(o,s)):(this._x=Math.atan2(-c,d),this._y=0)):console.warn(\"THREE.Euler: .setFromRotationMatrix() given unsupported order: \"+e),this._order=e,!1!==i&&this.onChangeCallback(),this},setFromQuaternion:function(){var t=new $e;return function(e,i,n){return t.makeRotationFromQuaternion(e),this.setFromRotationMatrix(t,i,n)}}(),setFromVector3:function(t,e){return this.set(t.x,t.y,t.z,e||this._order)},reorder:(Pi=new ti,function(t){return Pi.setFromEuler(this),this.setFromQuaternion(Pi,t)}),equals:function(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._order===this._order},fromArray:function(t){return this._x=t[0],this._y=t[1],this._z=t[2],void 0!==t[3]&&(this._order=t[3]),this.onChangeCallback(),this},toArray:function(t,e){return void 0===t&&(t=[]),void 0===e&&(e=0),t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._order,t},toVector3:function(t){return t?t.set(this._x,this._y,this._z):new ei(this._x,this._y,this._z)},onChange:function(t){return this.onChangeCallback=t,this},onChangeCallback:function(){}}),Object.assign(ki.prototype,{set:function(t){this.mask=1<<t|0},enable:function(t){this.mask|=1<<t|0},toggle:function(t){this.mask^=1<<t|0},disable:function(t){this.mask&=~(1<<t|0)},test:function(t){return 0!=(this.mask&t.mask)}});var Di,Bi,Vi,Ui,Fi=0;function Hi(){Object.defineProperty(this,\"id\",{value:Fi++}),this.uuid=Qe.generateUUID(),this.name=\"\",this.type=\"Object3D\",this.parent=null,this.children=[],this.up=Hi.DefaultUp.clone();var t=new ei,e=new Oi,i=new ti,n=new ei(1,1,1);e.onChange(function(){i.setFromEuler(e,!1)}),i.onChange(function(){e.setFromQuaternion(i,void 0,!1)}),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:t},rotation:{configurable:!0,enumerable:!0,value:e},quaternion:{configurable:!0,enumerable:!0,value:i},scale:{configurable:!0,enumerable:!0,value:n},modelViewMatrix:{value:new $e},normalMatrix:{value:new ii}}),this.matrix=new $e,this.matrixWorld=new $e,this.matrixAutoUpdate=Hi.DefaultMatrixAutoUpdate,this.matrixWorldNeedsUpdate=!1,this.layers=new ki,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.userData={}}Hi.DefaultUp=new ei(0,1,0),Hi.DefaultMatrixAutoUpdate=!0,Hi.prototype=Object.assign(Object.create(n.prototype),{constructor:Hi,isObject3D:!0,onBeforeRender:function(){},onAfterRender:function(){},applyMatrix:function(t){this.matrix.multiplyMatrices(t,this.matrix),this.matrix.decompose(this.position,this.quaternion,this.scale)},applyQuaternion:function(t){return this.quaternion.premultiply(t),this},setRotationFromAxisAngle:function(t,e){this.quaternion.setFromAxisAngle(t,e)},setRotationFromEuler:function(t){this.quaternion.setFromEuler(t,!0)},setRotationFromMatrix:function(t){this.quaternion.setFromRotationMatrix(t)},setRotationFromQuaternion:function(t){this.quaternion.copy(t)},rotateOnAxis:(Ui=new ti,function(t,e){return Ui.setFromAxisAngle(t,e),this.quaternion.multiply(Ui),this}),rotateOnWorldAxis:function(){var t=new ti;return function(e,i){return t.setFromAxisAngle(e,i),this.quaternion.premultiply(t),this}}(),rotateX:function(){var t=new ei(1,0,0);return function(e){return this.rotateOnAxis(t,e)}}(),rotateY:function(){var t=new ei(0,1,0);return function(e){return this.rotateOnAxis(t,e)}}(),rotateZ:function(){var t=new ei(0,0,1);return function(e){return this.rotateOnAxis(t,e)}}(),translateOnAxis:function(){var t=new ei;return function(e,i){return t.copy(e).applyQuaternion(this.quaternion),this.position.add(t.multiplyScalar(i)),this}}(),translateX:function(){var t=new ei(1,0,0);return function(e){return this.translateOnAxis(t,e)}}(),translateY:function(){var t=new ei(0,1,0);return function(e){return this.translateOnAxis(t,e)}}(),translateZ:function(){var t=new ei(0,0,1);return function(e){return this.translateOnAxis(t,e)}}(),localToWorld:function(t){return t.applyMatrix4(this.matrixWorld)},worldToLocal:(Vi=new $e,function(t){return t.applyMatrix4(Vi.getInverse(this.matrixWorld))}),lookAt:function(){var t=new ti,e=new $e,i=new ei,n=new ei;return function(r,s,a){r.isVector3?i.copy(r):i.set(r,s,a);var o=this.parent;this.updateWorldMatrix(!0,!1),n.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?e.lookAt(n,i,this.up):e.lookAt(i,n,this.up),this.quaternion.setFromRotationMatrix(e),o&&(e.extractRotation(o.matrixWorld),t.setFromRotationMatrix(e),this.quaternion.premultiply(t.inverse()))}}(),add:function(t){if(arguments.length>1){for(var e=0;e<arguments.length;e++)this.add(arguments[e]);return this}return t===this?(console.error(\"THREE.Object3D.add: object can't be added as a child of itself.\",t),this):(t&&t.isObject3D?(null!==t.parent&&t.parent.remove(t),t.parent=this,t.dispatchEvent({type:\"added\"}),this.children.push(t)):console.error(\"THREE.Object3D.add: object not an instance of THREE.Object3D.\",t),this)},remove:function(t){if(arguments.length>1){for(var e=0;e<arguments.length;e++)this.remove(arguments[e]);return this}var i=this.children.indexOf(t);return-1!==i&&(t.parent=null,t.dispatchEvent({type:\"removed\"}),this.children.splice(i,1)),this},getObjectById:function(t){return this.getObjectByProperty(\"id\",t)},getObjectByName:function(t){return this.getObjectByProperty(\"name\",t)},getObjectByProperty:function(t,e){if(this[t]===e)return this;for(var i=0,n=this.children.length;i<n;i++){var r=this.children[i].getObjectByProperty(t,e);if(void 0!==r)return r}},getWorldPosition:function(t){return void 0===t&&(console.warn(\"THREE.Object3D: .getWorldPosition() target is now required\"),t=new ei),this.updateMatrixWorld(!0),t.setFromMatrixPosition(this.matrixWorld)},getWorldQuaternion:(Di=new ei,Bi=new ei,function(t){return void 0===t&&(console.warn(\"THREE.Object3D: .getWorldQuaternion() target is now required\"),t=new ti),this.updateMatrixWorld(!0),this.matrixWorld.decompose(Di,t,Bi),t}),getWorldScale:function(){var t=new ei,e=new ti;return function(i){return void 0===i&&(console.warn(\"THREE.Object3D: .getWorldScale() target is now required\"),i=new ei),this.updateMatrixWorld(!0),this.matrixWorld.decompose(t,e,i),i}}(),getWorldDirection:function(t){void 0===t&&(console.warn(\"THREE.Object3D: .getWorldDirection() target is now required\"),t=new ei),this.updateMatrixWorld(!0);var e=this.matrixWorld.elements;return t.set(e[8],e[9],e[10]).normalize()},raycast:function(){},traverse:function(t){t(this);for(var e=this.children,i=0,n=e.length;i<n;i++)e[i].traverse(t)},traverseVisible:function(t){if(!1!==this.visible){t(this);for(var e=this.children,i=0,n=e.length;i<n;i++)e[i].traverseVisible(t)}},traverseAncestors:function(t){var e=this.parent;null!==e&&(t(e),e.traverseAncestors(t))},updateMatrix:function(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0},updateMatrixWorld:function(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||t)&&(null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,t=!0);for(var e=this.children,i=0,n=e.length;i<n;i++)e[i].updateMatrixWorld(t)},updateWorldMatrix:function(t,e){var i=this.parent;if(!0===t&&null!==i&&i.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),!0===e)for(var n=this.children,r=0,s=n.length;r<s;r++)n[r].updateWorldMatrix(!1,!0)},toJSON:function(t){var e=void 0===t||\"string\"==typeof t,i={};e&&(t={geometries:{},materials:{},textures:{},images:{},shapes:{}},i.metadata={version:4.5,type:\"Object\",generator:\"Object3D.toJSON\"});var n={};function r(e,i){return void 0===e[i.uuid]&&(e[i.uuid]=i.toJSON(t)),i.uuid}if(n.uuid=this.uuid,n.type=this.type,\"\"!==this.name&&(n.name=this.name),!0===this.castShadow&&(n.castShadow=!0),!0===this.receiveShadow&&(n.receiveShadow=!0),!1===this.visible&&(n.visible=!1),!1===this.frustumCulled&&(n.frustumCulled=!1),0!==this.renderOrder&&(n.renderOrder=this.renderOrder),\"{}\"!==JSON.stringify(this.userData)&&(n.userData=this.userData),n.layers=this.layers.mask,n.matrix=this.matrix.toArray(),!1===this.matrixAutoUpdate&&(n.matrixAutoUpdate=!1),this.isMesh&&this.drawMode!==ke&&(n.drawMode=this.drawMode),this.isMesh||this.isLine||this.isPoints){n.geometry=r(t.geometries,this.geometry);var s=this.geometry.parameters;if(void 0!==s&&void 0!==s.shapes){var a=s.shapes;if(Array.isArray(a))for(var o=0,h=a.length;o<h;o++){var l=a[o];r(t.shapes,l)}else r(t.shapes,a)}}if(void 0!==this.material)if(Array.isArray(this.material)){var c=[];for(o=0,h=this.material.length;o<h;o++)c.push(r(t.materials,this.material[o]));n.material=c}else n.material=r(t.materials,this.material);if(this.children.length>0){n.children=[];for(o=0;o<this.children.length;o++)n.children.push(this.children[o].toJSON(t).object)}if(e){var u=f(t.geometries),p=f(t.materials),d=f(t.textures),m=f(t.images);a=f(t.shapes);u.length>0&&(i.geometries=u),p.length>0&&(i.materials=p),d.length>0&&(i.textures=d),m.length>0&&(i.images=m),a.length>0&&(i.shapes=a)}return i.object=n,i;function f(t){var e=[];for(var i in t){var n=t[i];delete n.metadata,e.push(n)}return e}},clone:function(t){return(new this.constructor).copy(this,t)},copy:function(t,e){if(void 0===e&&(e=!0),this.name=t.name,this.up.copy(t.up),this.position.copy(t.position),this.quaternion.copy(t.quaternion),this.scale.copy(t.scale),this.matrix.copy(t.matrix),this.matrixWorld.copy(t.matrixWorld),this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrixWorldNeedsUpdate=t.matrixWorldNeedsUpdate,this.layers.mask=t.layers.mask,this.visible=t.visible,this.castShadow=t.castShadow,this.receiveShadow=t.receiveShadow,this.frustumCulled=t.frustumCulled,this.renderOrder=t.renderOrder,this.userData=JSON.parse(JSON.stringify(t.userData)),!0===e)for(var i=0;i<t.children.length;i++){var n=t.children[i];this.add(n.clone())}return this}});var Gi,ji,Wi=0;function qi(){Object.defineProperty(this,\"id\",{value:Wi+=2}),this.uuid=Qe.generateUUID(),this.name=\"\",this.type=\"Geometry\",this.vertices=[],this.colors=[],this.faces=[],this.faceVertexUvs=[[]],this.morphTargets=[],this.morphNormals=[],this.skinWeights=[],this.skinIndices=[],this.lineDistances=[],this.boundingBox=null,this.boundingSphere=null,this.elementsNeedUpdate=!1,this.verticesNeedUpdate=!1,this.uvsNeedUpdate=!1,this.normalsNeedUpdate=!1,this.colorsNeedUpdate=!1,this.lineDistancesNeedUpdate=!1,this.groupsNeedUpdate=!1}function Xi(t,e,i){if(Array.isArray(t))throw new TypeError(\"THREE.BufferAttribute: array should be a Typed Array.\");this.name=\"\",this.array=t,this.itemSize=e,this.count=void 0!==t?t.length/e:0,this.normalized=!0===i,this.dynamic=!1,this.updateRange={offset:0,count:-1},this.version=0}function Yi(t,e,i){Xi.call(this,new Int8Array(t),e,i)}function Ji(t,e,i){Xi.call(this,new Uint8Array(t),e,i)}function Zi(t,e,i){Xi.call(this,new Uint8ClampedArray(t),e,i)}function Qi(t,e,i){Xi.call(this,new Int16Array(t),e,i)}function Ki(t,e,i){Xi.call(this,new Uint16Array(t),e,i)}function $i(t,e,i){Xi.call(this,new Int32Array(t),e,i)}function tn(t,e,i){Xi.call(this,new Uint32Array(t),e,i)}function en(t,e,i){Xi.call(this,new Float32Array(t),e,i)}function nn(t,e,i){Xi.call(this,new Float64Array(t),e,i)}function rn(){this.vertices=[],this.normals=[],this.colors=[],this.uvs=[],this.uvs2=[],this.groups=[],this.morphTargets={},this.skinWeights=[],this.skinIndices=[],this.boundingBox=null,this.boundingSphere=null,this.verticesNeedUpdate=!1,this.normalsNeedUpdate=!1,this.colorsNeedUpdate=!1,this.uvsNeedUpdate=!1,this.groupsNeedUpdate=!1}function sn(t){if(0===t.length)return-1/0;for(var e=t[0],i=1,n=t.length;i<n;++i)t[i]>e&&(e=t[i]);return e}qi.prototype=Object.assign(Object.create(n.prototype),{constructor:qi,isGeometry:!0,applyMatrix:function(t){for(var e=(new ii).getNormalMatrix(t),i=0,n=this.vertices.length;i<n;i++){this.vertices[i].applyMatrix4(t)}for(i=0,n=this.faces.length;i<n;i++){var r=this.faces[i];r.normal.applyMatrix3(e).normalize();for(var s=0,a=r.vertexNormals.length;s<a;s++)r.vertexNormals[s].applyMatrix3(e).normalize()}return null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this.verticesNeedUpdate=!0,this.normalsNeedUpdate=!0,this},rotateX:function(){var t=new $e;return function(e){return t.makeRotationX(e),this.applyMatrix(t),this}}(),rotateY:function(){var t=new $e;return function(e){return t.makeRotationY(e),this.applyMatrix(t),this}}(),rotateZ:function(){var t=new $e;return function(e){return t.makeRotationZ(e),this.applyMatrix(t),this}}(),translate:function(){var t=new $e;return function(e,i,n){return t.makeTranslation(e,i,n),this.applyMatrix(t),this}}(),scale:function(){var t=new $e;return function(e,i,n){return t.makeScale(e,i,n),this.applyMatrix(t),this}}(),lookAt:(ji=new Hi,function(t){ji.lookAt(t),ji.updateMatrix(),this.applyMatrix(ji.matrix)}),fromBufferGeometry:function(t){var e=this,i=null!==t.index?t.index.array:void 0,n=t.attributes,r=n.position.array,s=void 0!==n.normal?n.normal.array:void 0,a=void 0!==n.color?n.color.array:void 0,o=void 0!==n.uv?n.uv.array:void 0,h=void 0!==n.uv2?n.uv2.array:void 0;void 0!==h&&(this.faceVertexUvs[1]=[]);for(var l=0,c=0;l<r.length;l+=3,c+=2)e.vertices.push((new ei).fromArray(r,l)),void 0!==a&&e.colors.push((new Ai).fromArray(a,l));function u(t,i,n,r){var l=void 0===a?[]:[e.colors[t].clone(),e.colors[i].clone(),e.colors[n].clone()],c=new Ii(t,i,n,void 0===s?[]:[(new ei).fromArray(s,3*t),(new ei).fromArray(s,3*i),(new ei).fromArray(s,3*n)],l,r);e.faces.push(c),void 0!==o&&e.faceVertexUvs[0].push([(new Ke).fromArray(o,2*t),(new Ke).fromArray(o,2*i),(new Ke).fromArray(o,2*n)]),void 0!==h&&e.faceVertexUvs[1].push([(new Ke).fromArray(h,2*t),(new Ke).fromArray(h,2*i),(new Ke).fromArray(h,2*n)])}var p=t.groups;if(p.length>0)for(l=0;l<p.length;l++)for(var d=p[l],m=d.start,f=(c=m,m+d.count);c<f;c+=3)void 0!==i?u(i[c],i[c+1],i[c+2],d.materialIndex):u(c,c+1,c+2,d.materialIndex);else if(void 0!==i)for(l=0;l<i.length;l+=3)u(i[l],i[l+1],i[l+2]);else for(l=0;l<r.length/3;l+=3)u(l,l+1,l+2);return this.computeFaceNormals(),null!==t.boundingBox&&(this.boundingBox=t.boundingBox.clone()),null!==t.boundingSphere&&(this.boundingSphere=t.boundingSphere.clone()),this},center:(Gi=new ei,function(){return this.computeBoundingBox(),this.boundingBox.getCenter(Gi).negate(),this.translate(Gi.x,Gi.y,Gi.z),this}),normalize:function(){this.computeBoundingSphere();var t=this.boundingSphere.center,e=this.boundingSphere.radius,i=0===e?1:1/e,n=new $e;return n.set(i,0,0,-i*t.x,0,i,0,-i*t.y,0,0,i,-i*t.z,0,0,0,1),this.applyMatrix(n),this},computeFaceNormals:function(){for(var t=new ei,e=new ei,i=0,n=this.faces.length;i<n;i++){var r=this.faces[i],s=this.vertices[r.a],a=this.vertices[r.b],o=this.vertices[r.c];t.subVectors(o,a),e.subVectors(s,a),t.cross(e),t.normalize(),r.normal.copy(t)}},computeVertexNormals:function(t){var e,i,n,r,s,a;for(void 0===t&&(t=!0),a=new Array(this.vertices.length),e=0,i=this.vertices.length;e<i;e++)a[e]=new ei;if(t){var o,h,l,c=new ei,u=new ei;for(n=0,r=this.faces.length;n<r;n++)s=this.faces[n],o=this.vertices[s.a],h=this.vertices[s.b],l=this.vertices[s.c],c.subVectors(l,h),u.subVectors(o,h),c.cross(u),a[s.a].add(c),a[s.b].add(c),a[s.c].add(c)}else for(this.computeFaceNormals(),n=0,r=this.faces.length;n<r;n++)a[(s=this.faces[n]).a].add(s.normal),a[s.b].add(s.normal),a[s.c].add(s.normal);for(e=0,i=this.vertices.length;e<i;e++)a[e].normalize();for(n=0,r=this.faces.length;n<r;n++){var p=(s=this.faces[n]).vertexNormals;3===p.length?(p[0].copy(a[s.a]),p[1].copy(a[s.b]),p[2].copy(a[s.c])):(p[0]=a[s.a].clone(),p[1]=a[s.b].clone(),p[2]=a[s.c].clone())}this.faces.length>0&&(this.normalsNeedUpdate=!0)},computeFlatVertexNormals:function(){var t,e,i;for(this.computeFaceNormals(),t=0,e=this.faces.length;t<e;t++){var n=(i=this.faces[t]).vertexNormals;3===n.length?(n[0].copy(i.normal),n[1].copy(i.normal),n[2].copy(i.normal)):(n[0]=i.normal.clone(),n[1]=i.normal.clone(),n[2]=i.normal.clone())}this.faces.length>0&&(this.normalsNeedUpdate=!0)},computeMorphNormals:function(){var t,e,i,n,r;for(i=0,n=this.faces.length;i<n;i++)for((r=this.faces[i]).__originalFaceNormal?r.__originalFaceNormal.copy(r.normal):r.__originalFaceNormal=r.normal.clone(),r.__originalVertexNormals||(r.__originalVertexNormals=[]),t=0,e=r.vertexNormals.length;t<e;t++)r.__originalVertexNormals[t]?r.__originalVertexNormals[t].copy(r.vertexNormals[t]):r.__originalVertexNormals[t]=r.vertexNormals[t].clone();var s=new qi;for(s.faces=this.faces,t=0,e=this.morphTargets.length;t<e;t++){if(!this.morphNormals[t]){this.morphNormals[t]={},this.morphNormals[t].faceNormals=[],this.morphNormals[t].vertexNormals=[];var a=this.morphNormals[t].faceNormals,o=this.morphNormals[t].vertexNormals;for(i=0,n=this.faces.length;i<n;i++)h=new ei,l={a:new ei,b:new ei,c:new ei},a.push(h),o.push(l)}var h,l,c=this.morphNormals[t];for(s.vertices=this.morphTargets[t].vertices,s.computeFaceNormals(),s.computeVertexNormals(),i=0,n=this.faces.length;i<n;i++)r=this.faces[i],h=c.faceNormals[i],l=c.vertexNormals[i],h.copy(r.normal),l.a.copy(r.vertexNormals[0]),l.b.copy(r.vertexNormals[1]),l.c.copy(r.vertexNormals[2])}for(i=0,n=this.faces.length;i<n;i++)(r=this.faces[i]).normal=r.__originalFaceNormal,r.vertexNormals=r.__originalVertexNormals},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new vi),this.boundingBox.setFromPoints(this.vertices)},computeBoundingSphere:function(){null===this.boundingSphere&&(this.boundingSphere=new gi),this.boundingSphere.setFromPoints(this.vertices)},merge:function(t,e,i){if(t&&t.isGeometry){var n,r=this.vertices.length,s=this.vertices,a=t.vertices,o=this.faces,h=t.faces,l=this.faceVertexUvs[0],c=t.faceVertexUvs[0],u=this.colors,p=t.colors;void 0===i&&(i=0),void 0!==e&&(n=(new ii).getNormalMatrix(e));for(var d=0,m=a.length;d<m;d++){var f=a[d].clone();void 0!==e&&f.applyMatrix4(e),s.push(f)}for(d=0,m=p.length;d<m;d++)u.push(p[d].clone());for(d=0,m=h.length;d<m;d++){var v,g,y,x=h[d],b=x.vertexNormals,w=x.vertexColors;(v=new Ii(x.a+r,x.b+r,x.c+r)).normal.copy(x.normal),void 0!==n&&v.normal.applyMatrix3(n).normalize();for(var M=0,_=b.length;M<_;M++)g=b[M].clone(),void 0!==n&&g.applyMatrix3(n).normalize(),v.vertexNormals.push(g);v.color.copy(x.color);for(M=0,_=w.length;M<_;M++)y=w[M],v.vertexColors.push(y.clone());v.materialIndex=x.materialIndex+i,o.push(v)}for(d=0,m=c.length;d<m;d++){var S=c[d],E=[];if(void 0!==S){for(M=0,_=S.length;M<_;M++)E.push(S[M].clone());l.push(E)}}}else console.error(\"THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.\",t)},mergeMesh:function(t){t&&t.isMesh?(t.matrixAutoUpdate&&t.updateMatrix(),this.merge(t.geometry,t.matrix)):console.error(\"THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.\",t)},mergeVertices:function(){var t,e,i,n,r,s,a,o,h={},l=[],c=[],u=Math.pow(10,4);for(i=0,n=this.vertices.length;i<n;i++)t=this.vertices[i],void 0===h[e=Math.round(t.x*u)+\"_\"+Math.round(t.y*u)+\"_\"+Math.round(t.z*u)]?(h[e]=i,l.push(this.vertices[i]),c[i]=l.length-1):c[i]=c[h[e]];var p=[];for(i=0,n=this.faces.length;i<n;i++){(r=this.faces[i]).a=c[r.a],r.b=c[r.b],r.c=c[r.c],s=[r.a,r.b,r.c];for(var d=0;d<3;d++)if(s[d]===s[(d+1)%3]){p.push(i);break}}for(i=p.length-1;i>=0;i--){var m=p[i];for(this.faces.splice(m,1),a=0,o=this.faceVertexUvs.length;a<o;a++)this.faceVertexUvs[a].splice(m,1)}var f=this.vertices.length-l.length;return this.vertices=l,f},setFromPoints:function(t){this.vertices=[];for(var e=0,i=t.length;e<i;e++){var n=t[e];this.vertices.push(new ei(n.x,n.y,n.z||0))}return this},sortFacesByMaterialIndex:function(){for(var t=this.faces,e=t.length,i=0;i<e;i++)t[i]._id=i;t.sort(function(t,e){return t.materialIndex-e.materialIndex});var n,r,s=this.faceVertexUvs[0],a=this.faceVertexUvs[1];s&&s.length===e&&(n=[]),a&&a.length===e&&(r=[]);for(i=0;i<e;i++){var o=t[i]._id;n&&n.push(s[o]),r&&r.push(a[o])}n&&(this.faceVertexUvs[0]=n),r&&(this.faceVertexUvs[1]=r)},toJSON:function(){var t={metadata:{version:4.5,type:\"Geometry\",generator:\"Geometry.toJSON\"}};if(t.uuid=this.uuid,t.type=this.type,\"\"!==this.name&&(t.name=this.name),void 0!==this.parameters){var e=this.parameters;for(var i in e)void 0!==e[i]&&(t[i]=e[i]);return t}for(var n=[],r=0;r<this.vertices.length;r++){var s=this.vertices[r];n.push(s.x,s.y,s.z)}var a=[],o=[],h={},l=[],c={},u=[],p={};for(r=0;r<this.faces.length;r++){var d=this.faces[r],m=void 0!==this.faceVertexUvs[0][r],f=d.normal.length()>0,v=d.vertexNormals.length>0,g=1!==d.color.r||1!==d.color.g||1!==d.color.b,y=d.vertexColors.length>0,x=0;if(x=_(x,0,0),x=_(x,1,!0),x=_(x,2,!1),x=_(x,3,m),x=_(x,4,f),x=_(x,5,v),x=_(x,6,g),x=_(x,7,y),a.push(x),a.push(d.a,d.b,d.c),a.push(d.materialIndex),m){var b=this.faceVertexUvs[0][r];a.push(T(b[0]),T(b[1]),T(b[2]))}if(f&&a.push(S(d.normal)),v){var w=d.vertexNormals;a.push(S(w[0]),S(w[1]),S(w[2]))}if(g&&a.push(E(d.color)),y){var M=d.vertexColors;a.push(E(M[0]),E(M[1]),E(M[2]))}}function _(t,e,i){return i?t|1<<e:t&~(1<<e)}function S(t){var e=t.x.toString()+t.y.toString()+t.z.toString();return void 0!==h[e]?h[e]:(h[e]=o.length/3,o.push(t.x,t.y,t.z),h[e])}function E(t){var e=t.r.toString()+t.g.toString()+t.b.toString();return void 0!==c[e]?c[e]:(c[e]=l.length,l.push(t.getHex()),c[e])}function T(t){var e=t.x.toString()+t.y.toString();return void 0!==p[e]?p[e]:(p[e]=u.length/2,u.push(t.x,t.y),p[e])}return t.data={},t.data.vertices=n,t.data.normals=o,l.length>0&&(t.data.colors=l),u.length>0&&(t.data.uvs=[u]),t.data.faces=a,t},clone:function(){return(new qi).copy(this)},copy:function(t){var e,i,n,r,s,a;this.vertices=[],this.colors=[],this.faces=[],this.faceVertexUvs=[[]],this.morphTargets=[],this.morphNormals=[],this.skinWeights=[],this.skinIndices=[],this.lineDistances=[],this.boundingBox=null,this.boundingSphere=null,this.name=t.name;var o=t.vertices;for(e=0,i=o.length;e<i;e++)this.vertices.push(o[e].clone());var h=t.colors;for(e=0,i=h.length;e<i;e++)this.colors.push(h[e].clone());var l=t.faces;for(e=0,i=l.length;e<i;e++)this.faces.push(l[e].clone());for(e=0,i=t.faceVertexUvs.length;e<i;e++){var c=t.faceVertexUvs[e];for(void 0===this.faceVertexUvs[e]&&(this.faceVertexUvs[e]=[]),n=0,r=c.length;n<r;n++){var u=c[n],p=[];for(s=0,a=u.length;s<a;s++){var d=u[s];p.push(d.clone())}this.faceVertexUvs[e].push(p)}}var m=t.morphTargets;for(e=0,i=m.length;e<i;e++){var f={};if(f.name=m[e].name,void 0!==m[e].vertices)for(f.vertices=[],n=0,r=m[e].vertices.length;n<r;n++)f.vertices.push(m[e].vertices[n].clone());if(void 0!==m[e].normals)for(f.normals=[],n=0,r=m[e].normals.length;n<r;n++)f.normals.push(m[e].normals[n].clone());this.morphTargets.push(f)}var v=t.morphNormals;for(e=0,i=v.length;e<i;e++){var g={};if(void 0!==v[e].vertexNormals)for(g.vertexNormals=[],n=0,r=v[e].vertexNormals.length;n<r;n++){var y=v[e].vertexNormals[n],x={};x.a=y.a.clone(),x.b=y.b.clone(),x.c=y.c.clone(),g.vertexNormals.push(x)}if(void 0!==v[e].faceNormals)for(g.faceNormals=[],n=0,r=v[e].faceNormals.length;n<r;n++)g.faceNormals.push(v[e].faceNormals[n].clone());this.morphNormals.push(g)}var b=t.skinWeights;for(e=0,i=b.length;e<i;e++)this.skinWeights.push(b[e].clone());var w=t.skinIndices;for(e=0,i=w.length;e<i;e++)this.skinIndices.push(w[e].clone());var M=t.lineDistances;for(e=0,i=M.length;e<i;e++)this.lineDistances.push(M[e]);var _=t.boundingBox;null!==_&&(this.boundingBox=_.clone());var S=t.boundingSphere;return null!==S&&(this.boundingSphere=S.clone()),this.elementsNeedUpdate=t.elementsNeedUpdate,this.verticesNeedUpdate=t.verticesNeedUpdate,this.uvsNeedUpdate=t.uvsNeedUpdate,this.normalsNeedUpdate=t.normalsNeedUpdate,this.colorsNeedUpdate=t.colorsNeedUpdate,this.lineDistancesNeedUpdate=t.lineDistancesNeedUpdate,this.groupsNeedUpdate=t.groupsNeedUpdate,this},dispose:function(){this.dispatchEvent({type:\"dispose\"})}}),Object.defineProperty(Xi.prototype,\"needsUpdate\",{set:function(t){!0===t&&this.version++}}),Object.assign(Xi.prototype,{isBufferAttribute:!0,onUploadCallback:function(){},setArray:function(t){if(Array.isArray(t))throw new TypeError(\"THREE.BufferAttribute: array should be a Typed Array.\");return this.count=void 0!==t?t.length/this.itemSize:0,this.array=t,this},setDynamic:function(t){return this.dynamic=t,this},copy:function(t){return this.name=t.name,this.array=new t.array.constructor(t.array),this.itemSize=t.itemSize,this.count=t.count,this.normalized=t.normalized,this.dynamic=t.dynamic,this},copyAt:function(t,e,i){t*=this.itemSize,i*=e.itemSize;for(var n=0,r=this.itemSize;n<r;n++)this.array[t+n]=e.array[i+n];return this},copyArray:function(t){return this.array.set(t),this},copyColorsArray:function(t){for(var e=this.array,i=0,n=0,r=t.length;n<r;n++){var s=t[n];void 0===s&&(console.warn(\"THREE.BufferAttribute.copyColorsArray(): color is undefined\",n),s=new Ai),e[i++]=s.r,e[i++]=s.g,e[i++]=s.b}return this},copyVector2sArray:function(t){for(var e=this.array,i=0,n=0,r=t.length;n<r;n++){var s=t[n];void 0===s&&(console.warn(\"THREE.BufferAttribute.copyVector2sArray(): vector is undefined\",n),s=new Ke),e[i++]=s.x,e[i++]=s.y}return this},copyVector3sArray:function(t){for(var e=this.array,i=0,n=0,r=t.length;n<r;n++){var s=t[n];void 0===s&&(console.warn(\"THREE.BufferAttribute.copyVector3sArray(): vector is undefined\",n),s=new ei),e[i++]=s.x,e[i++]=s.y,e[i++]=s.z}return this},copyVector4sArray:function(t){for(var e=this.array,i=0,n=0,r=t.length;n<r;n++){var s=t[n];void 0===s&&(console.warn(\"THREE.BufferAttribute.copyVector4sArray(): vector is undefined\",n),s=new ui),e[i++]=s.x,e[i++]=s.y,e[i++]=s.z,e[i++]=s.w}return this},set:function(t,e){return void 0===e&&(e=0),this.array.set(t,e),this},getX:function(t){return this.array[t*this.itemSize]},setX:function(t,e){return this.array[t*this.itemSize]=e,this},getY:function(t){return this.array[t*this.itemSize+1]},setY:function(t,e){return this.array[t*this.itemSize+1]=e,this},getZ:function(t){return this.array[t*this.itemSize+2]},setZ:function(t,e){return this.array[t*this.itemSize+2]=e,this},getW:function(t){return this.array[t*this.itemSize+3]},setW:function(t,e){return this.array[t*this.itemSize+3]=e,this},setXY:function(t,e,i){return t*=this.itemSize,this.array[t+0]=e,this.array[t+1]=i,this},setXYZ:function(t,e,i,n){return t*=this.itemSize,this.array[t+0]=e,this.array[t+1]=i,this.array[t+2]=n,this},setXYZW:function(t,e,i,n,r){return t*=this.itemSize,this.array[t+0]=e,this.array[t+1]=i,this.array[t+2]=n,this.array[t+3]=r,this},onUpload:function(t){return this.onUploadCallback=t,this},clone:function(){return new this.constructor(this.array,this.itemSize).copy(this)}}),Yi.prototype=Object.create(Xi.prototype),Yi.prototype.constructor=Yi,Ji.prototype=Object.create(Xi.prototype),Ji.prototype.constructor=Ji,Zi.prototype=Object.create(Xi.prototype),Zi.prototype.constructor=Zi,Qi.prototype=Object.create(Xi.prototype),Qi.prototype.constructor=Qi,Ki.prototype=Object.create(Xi.prototype),Ki.prototype.constructor=Ki,$i.prototype=Object.create(Xi.prototype),$i.prototype.constructor=$i,tn.prototype=Object.create(Xi.prototype),tn.prototype.constructor=tn,en.prototype=Object.create(Xi.prototype),en.prototype.constructor=en,nn.prototype=Object.create(Xi.prototype),nn.prototype.constructor=nn,Object.assign(rn.prototype,{computeGroups:function(t){for(var e,i=[],n=void 0,r=t.faces,s=0;s<r.length;s++){var a=r[s];a.materialIndex!==n&&(n=a.materialIndex,void 0!==e&&(e.count=3*s-e.start,i.push(e)),e={start:3*s,materialIndex:n})}void 0!==e&&(e.count=3*s-e.start,i.push(e)),this.groups=i},fromGeometry:function(t){var e,i=t.faces,n=t.vertices,r=t.faceVertexUvs,s=r[0]&&r[0].length>0,a=r[1]&&r[1].length>0,o=t.morphTargets,h=o.length;if(h>0){e=[];for(var l=0;l<h;l++)e[l]={name:o[l].name,data:[]};this.morphTargets.position=e}var c,u=t.morphNormals,p=u.length;if(p>0){c=[];for(l=0;l<p;l++)c[l]={name:u[l].name,data:[]};this.morphTargets.normal=c}var d=t.skinIndices,m=t.skinWeights,f=d.length===n.length,v=m.length===n.length;n.length>0&&0===i.length&&console.error(\"THREE.DirectGeometry: Faceless geometries are not supported.\");for(l=0;l<i.length;l++){var g=i[l];this.vertices.push(n[g.a],n[g.b],n[g.c]);var y=g.vertexNormals;if(3===y.length)this.normals.push(y[0],y[1],y[2]);else{var x=g.normal;this.normals.push(x,x,x)}var b,w=g.vertexColors;if(3===w.length)this.colors.push(w[0],w[1],w[2]);else{var M=g.color;this.colors.push(M,M,M)}if(!0===s)void 0!==(b=r[0][l])?this.uvs.push(b[0],b[1],b[2]):(console.warn(\"THREE.DirectGeometry.fromGeometry(): Undefined vertexUv \",l),this.uvs.push(new Ke,new Ke,new Ke));if(!0===a)void 0!==(b=r[1][l])?this.uvs2.push(b[0],b[1],b[2]):(console.warn(\"THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 \",l),this.uvs2.push(new Ke,new Ke,new Ke));for(var _=0;_<h;_++){var S=o[_].vertices;e[_].data.push(S[g.a],S[g.b],S[g.c])}for(_=0;_<p;_++){var E=u[_].vertexNormals[l];c[_].data.push(E.a,E.b,E.c)}f&&this.skinIndices.push(d[g.a],d[g.b],d[g.c]),v&&this.skinWeights.push(m[g.a],m[g.b],m[g.c])}return this.computeGroups(t),this.verticesNeedUpdate=t.verticesNeedUpdate,this.normalsNeedUpdate=t.normalsNeedUpdate,this.colorsNeedUpdate=t.colorsNeedUpdate,this.uvsNeedUpdate=t.uvsNeedUpdate,this.groupsNeedUpdate=t.groupsNeedUpdate,this}});var an=1;function on(){Object.defineProperty(this,\"id\",{value:an+=2}),this.uuid=Qe.generateUUID(),this.name=\"\",this.type=\"BufferGeometry\",this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}function hn(t,e,i,n,r,s){qi.call(this),this.type=\"BoxGeometry\",this.parameters={width:t,height:e,depth:i,widthSegments:n,heightSegments:r,depthSegments:s},this.fromBufferGeometry(new ln(t,e,i,n,r,s)),this.mergeVertices()}function ln(t,e,i,n,r,s){on.call(this),this.type=\"BoxBufferGeometry\",this.parameters={width:t,height:e,depth:i,widthSegments:n,heightSegments:r,depthSegments:s};var a=this;t=t||1,e=e||1,i=i||1,n=Math.floor(n)||1,r=Math.floor(r)||1,s=Math.floor(s)||1;var o=[],h=[],l=[],c=[],u=0,p=0;function d(t,e,i,n,r,s,d,m,f,v,g){var y,x,b=s/f,w=d/v,M=s/2,_=d/2,S=m/2,E=f+1,T=v+1,L=0,A=0,P=new ei;for(x=0;x<T;x++){var z=x*w-_;for(y=0;y<E;y++){var N=y*b-M;P[t]=N*n,P[e]=z*r,P[i]=S,h.push(P.x,P.y,P.z),P[t]=0,P[e]=0,P[i]=m>0?1:-1,l.push(P.x,P.y,P.z),c.push(y/f),c.push(1-x/v),L+=1}}for(x=0;x<v;x++)for(y=0;y<f;y++){var R=u+y+E*x,C=u+y+E*(x+1),I=u+(y+1)+E*(x+1),O=u+(y+1)+E*x;o.push(R,C,O),o.push(C,I,O),A+=6}a.addGroup(p,A,g),p+=A,u+=L}d(\"z\",\"y\",\"x\",-1,-1,i,e,t,s,r,0),d(\"z\",\"y\",\"x\",1,-1,i,e,-t,s,r,1),d(\"x\",\"z\",\"y\",1,1,t,i,e,n,s,2),d(\"x\",\"z\",\"y\",1,-1,t,i,-e,n,s,3),d(\"x\",\"y\",\"z\",1,-1,t,e,i,n,r,4),d(\"x\",\"y\",\"z\",-1,-1,t,e,-i,n,r,5),this.setIndex(o),this.addAttribute(\"position\",new en(h,3)),this.addAttribute(\"normal\",new en(l,3)),this.addAttribute(\"uv\",new en(c,2))}function cn(t,e,i,n){qi.call(this),this.type=\"PlaneGeometry\",this.parameters={width:t,height:e,widthSegments:i,heightSegments:n},this.fromBufferGeometry(new un(t,e,i,n)),this.mergeVertices()}function un(t,e,i,n){on.call(this),this.type=\"PlaneBufferGeometry\",this.parameters={width:t,height:e,widthSegments:i,heightSegments:n};var r,s,a=(t=t||1)/2,o=(e=e||1)/2,h=Math.floor(i)||1,l=Math.floor(n)||1,c=h+1,u=l+1,p=t/h,d=e/l,m=[],f=[],v=[],g=[];for(s=0;s<u;s++){var y=s*d-o;for(r=0;r<c;r++){var x=r*p-a;f.push(x,-y,0),v.push(0,0,1),g.push(r/h),g.push(1-s/l)}}for(s=0;s<l;s++)for(r=0;r<h;r++){var b=r+c*s,w=r+c*(s+1),M=r+1+c*(s+1),_=r+1+c*s;m.push(b,w,_),m.push(w,M,_)}this.setIndex(m),this.addAttribute(\"position\",new en(f,3)),this.addAttribute(\"normal\",new en(v,3)),this.addAttribute(\"uv\",new en(g,2))}on.prototype=Object.assign(Object.create(n.prototype),{constructor:on,isBufferGeometry:!0,getIndex:function(){return this.index},setIndex:function(t){Array.isArray(t)?this.index=new(sn(t)>65535?tn:Ki)(t,1):this.index=t},addAttribute:function(t,e){return e&&e.isBufferAttribute||e&&e.isInterleavedBufferAttribute?\"index\"===t?(console.warn(\"THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.\"),this.setIndex(e),this):(this.attributes[t]=e,this):(console.warn(\"THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).\"),this.addAttribute(t,new Xi(arguments[1],arguments[2])))},getAttribute:function(t){return this.attributes[t]},removeAttribute:function(t){return delete this.attributes[t],this},addGroup:function(t,e,i){this.groups.push({start:t,count:e,materialIndex:void 0!==i?i:0})},clearGroups:function(){this.groups=[]},setDrawRange:function(t,e){this.drawRange.start=t,this.drawRange.count=e},applyMatrix:function(t){var e=this.attributes.position;void 0!==e&&(t.applyToBufferAttribute(e),e.needsUpdate=!0);var i=this.attributes.normal;void 0!==i&&((new ii).getNormalMatrix(t).applyToBufferAttribute(i),i.needsUpdate=!0);return null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this},rotateX:function(){var t=new $e;return function(e){return t.makeRotationX(e),this.applyMatrix(t),this}}(),rotateY:function(){var t=new $e;return function(e){return t.makeRotationY(e),this.applyMatrix(t),this}}(),rotateZ:function(){var t=new $e;return function(e){return t.makeRotationZ(e),this.applyMatrix(t),this}}(),translate:function(){var t=new $e;return function(e,i,n){return t.makeTranslation(e,i,n),this.applyMatrix(t),this}}(),scale:function(){var t=new $e;return function(e,i,n){return t.makeScale(e,i,n),this.applyMatrix(t),this}}(),lookAt:function(){var t=new Hi;return function(e){t.lookAt(e),t.updateMatrix(),this.applyMatrix(t.matrix)}}(),center:function(){var t=new ei;return function(){return this.computeBoundingBox(),this.boundingBox.getCenter(t).negate(),this.translate(t.x,t.y,t.z),this}}(),setFromObject:function(t){var e=t.geometry;if(t.isPoints||t.isLine){var i=new en(3*e.vertices.length,3),n=new en(3*e.colors.length,3);if(this.addAttribute(\"position\",i.copyVector3sArray(e.vertices)),this.addAttribute(\"color\",n.copyColorsArray(e.colors)),e.lineDistances&&e.lineDistances.length===e.vertices.length){var r=new en(e.lineDistances.length,1);this.addAttribute(\"lineDistance\",r.copyArray(e.lineDistances))}null!==e.boundingSphere&&(this.boundingSphere=e.boundingSphere.clone()),null!==e.boundingBox&&(this.boundingBox=e.boundingBox.clone())}else t.isMesh&&e&&e.isGeometry&&this.fromGeometry(e);return this},setFromPoints:function(t){for(var e=[],i=0,n=t.length;i<n;i++){var r=t[i];e.push(r.x,r.y,r.z||0)}return this.addAttribute(\"position\",new en(e,3)),this},updateFromObject:function(t){var e,i=t.geometry;if(t.isMesh){var n=i.__directGeometry;if(!0===i.elementsNeedUpdate&&(n=void 0,i.elementsNeedUpdate=!1),void 0===n)return this.fromGeometry(i);n.verticesNeedUpdate=i.verticesNeedUpdate,n.normalsNeedUpdate=i.normalsNeedUpdate,n.colorsNeedUpdate=i.colorsNeedUpdate,n.uvsNeedUpdate=i.uvsNeedUpdate,n.groupsNeedUpdate=i.groupsNeedUpdate,i.verticesNeedUpdate=!1,i.normalsNeedUpdate=!1,i.colorsNeedUpdate=!1,i.uvsNeedUpdate=!1,i.groupsNeedUpdate=!1,i=n}return!0===i.verticesNeedUpdate&&(void 0!==(e=this.attributes.position)&&(e.copyVector3sArray(i.vertices),e.needsUpdate=!0),i.verticesNeedUpdate=!1),!0===i.normalsNeedUpdate&&(void 0!==(e=this.attributes.normal)&&(e.copyVector3sArray(i.normals),e.needsUpdate=!0),i.normalsNeedUpdate=!1),!0===i.colorsNeedUpdate&&(void 0!==(e=this.attributes.color)&&(e.copyColorsArray(i.colors),e.needsUpdate=!0),i.colorsNeedUpdate=!1),i.uvsNeedUpdate&&(void 0!==(e=this.attributes.uv)&&(e.copyVector2sArray(i.uvs),e.needsUpdate=!0),i.uvsNeedUpdate=!1),i.lineDistancesNeedUpdate&&(void 0!==(e=this.attributes.lineDistance)&&(e.copyArray(i.lineDistances),e.needsUpdate=!0),i.lineDistancesNeedUpdate=!1),i.groupsNeedUpdate&&(i.computeGroups(t.geometry),this.groups=i.groups,i.groupsNeedUpdate=!1),this},fromGeometry:function(t){return t.__directGeometry=(new rn).fromGeometry(t),this.fromDirectGeometry(t.__directGeometry)},fromDirectGeometry:function(t){var e=new Float32Array(3*t.vertices.length);if(this.addAttribute(\"position\",new Xi(e,3).copyVector3sArray(t.vertices)),t.normals.length>0){var i=new Float32Array(3*t.normals.length);this.addAttribute(\"normal\",new Xi(i,3).copyVector3sArray(t.normals))}if(t.colors.length>0){var n=new Float32Array(3*t.colors.length);this.addAttribute(\"color\",new Xi(n,3).copyColorsArray(t.colors))}if(t.uvs.length>0){var r=new Float32Array(2*t.uvs.length);this.addAttribute(\"uv\",new Xi(r,2).copyVector2sArray(t.uvs))}if(t.uvs2.length>0){var s=new Float32Array(2*t.uvs2.length);this.addAttribute(\"uv2\",new Xi(s,2).copyVector2sArray(t.uvs2))}for(var a in this.groups=t.groups,t.morphTargets){for(var o=[],h=t.morphTargets[a],l=0,c=h.length;l<c;l++){var u=h[l],p=new en(3*u.data.length,3);p.name=u.name,o.push(p.copyVector3sArray(u.data))}this.morphAttributes[a]=o}if(t.skinIndices.length>0){var d=new en(4*t.skinIndices.length,4);this.addAttribute(\"skinIndex\",d.copyVector4sArray(t.skinIndices))}if(t.skinWeights.length>0){var m=new en(4*t.skinWeights.length,4);this.addAttribute(\"skinWeight\",m.copyVector4sArray(t.skinWeights))}return null!==t.boundingSphere&&(this.boundingSphere=t.boundingSphere.clone()),null!==t.boundingBox&&(this.boundingBox=t.boundingBox.clone()),this},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new vi);var t=this.attributes.position;void 0!==t?this.boundingBox.setFromBufferAttribute(t):this.boundingBox.makeEmpty(),(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.',this)},computeBoundingSphere:function(){var t=new vi,e=new ei;return function(){null===this.boundingSphere&&(this.boundingSphere=new gi);var i=this.attributes.position;if(i){var n=this.boundingSphere.center;t.setFromBufferAttribute(i),t.getCenter(n);for(var r=0,s=0,a=i.count;s<a;s++)e.x=i.getX(s),e.y=i.getY(s),e.z=i.getZ(s),r=Math.max(r,n.distanceToSquared(e));this.boundingSphere.radius=Math.sqrt(r),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.',this)}}}(),computeFaceNormals:function(){},computeVertexNormals:function(){var t=this.index,e=this.attributes;if(e.position){var i=e.position.array;if(void 0===e.normal)this.addAttribute(\"normal\",new Xi(new Float32Array(i.length),3));else for(var n=e.normal.array,r=0,s=n.length;r<s;r++)n[r]=0;var a,o,h,l=e.normal.array,c=new ei,u=new ei,p=new ei,d=new ei,m=new ei;if(t){var f=t.array;for(r=0,s=t.count;r<s;r+=3)a=3*f[r+0],o=3*f[r+1],h=3*f[r+2],c.fromArray(i,a),u.fromArray(i,o),p.fromArray(i,h),d.subVectors(p,u),m.subVectors(c,u),d.cross(m),l[a]+=d.x,l[a+1]+=d.y,l[a+2]+=d.z,l[o]+=d.x,l[o+1]+=d.y,l[o+2]+=d.z,l[h]+=d.x,l[h+1]+=d.y,l[h+2]+=d.z}else for(r=0,s=i.length;r<s;r+=9)c.fromArray(i,r),u.fromArray(i,r+3),p.fromArray(i,r+6),d.subVectors(p,u),m.subVectors(c,u),d.cross(m),l[r]=d.x,l[r+1]=d.y,l[r+2]=d.z,l[r+3]=d.x,l[r+4]=d.y,l[r+5]=d.z,l[r+6]=d.x,l[r+7]=d.y,l[r+8]=d.z;this.normalizeNormals(),e.normal.needsUpdate=!0}},merge:function(t,e){if(t&&t.isBufferGeometry){void 0===e&&(e=0,console.warn(\"THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.\"));var i=this.attributes;for(var n in i)if(void 0!==t.attributes[n])for(var r=i[n].array,s=t.attributes[n],a=s.array,o=0,h=s.itemSize*e;o<a.length;o++,h++)r[h]=a[o];return this}console.error(\"THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.\",t)},normalizeNormals:function(){var t=new ei;return function(){for(var e=this.attributes.normal,i=0,n=e.count;i<n;i++)t.x=e.getX(i),t.y=e.getY(i),t.z=e.getZ(i),t.normalize(),e.setXYZ(i,t.x,t.y,t.z)}}(),toNonIndexed:function(){function t(t,e){for(var i=t.array,n=t.itemSize,r=new i.constructor(e.length*n),s=0,a=0,o=0,h=e.length;o<h;o++){s=e[o]*n;for(var l=0;l<n;l++)r[a++]=i[s++]}return new Xi(r,n)}if(null===this.index)return console.warn(\"THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.\"),this;var e=new on,i=this.index.array,n=this.attributes;for(var r in n){var s=t(n[r],i);e.addAttribute(r,s)}var a=this.morphAttributes;for(r in a){for(var o=[],h=a[r],l=0,c=h.length;l<c;l++){s=t(h[l],i);o.push(s)}e.morphAttributes[r]=o}for(var u=this.groups,p=(l=0,u.length);l<p;l++){var d=u[l];e.addGroup(d.start,d.count,d.materialIndex)}return e},toJSON:function(){var t={metadata:{version:4.5,type:\"BufferGeometry\",generator:\"BufferGeometry.toJSON\"}};if(t.uuid=this.uuid,t.type=this.type,\"\"!==this.name&&(t.name=this.name),Object.keys(this.userData).length>0&&(t.userData=this.userData),void 0!==this.parameters){var e=this.parameters;for(var i in e)void 0!==e[i]&&(t[i]=e[i]);return t}t.data={attributes:{}};var n=this.index;if(null!==n){var r=Array.prototype.slice.call(n.array);t.data.index={type:n.array.constructor.name,array:r}}var s=this.attributes;for(var i in s){var a=s[i];r=Array.prototype.slice.call(a.array);t.data.attributes[i]={itemSize:a.itemSize,type:a.array.constructor.name,array:r,normalized:a.normalized}}var o=this.groups;o.length>0&&(t.data.groups=JSON.parse(JSON.stringify(o)));var h=this.boundingSphere;return null!==h&&(t.data.boundingSphere={center:h.center.toArray(),radius:h.radius}),t},clone:function(){return(new on).copy(this)},copy:function(t){var e,i,n;this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.name=t.name;var r=t.index;null!==r&&this.setIndex(r.clone());var s=t.attributes;for(e in s){var a=s[e];this.addAttribute(e,a.clone())}var o=t.morphAttributes;for(e in o){var h=[],l=o[e];for(i=0,n=l.length;i<n;i++)h.push(l[i].clone());this.morphAttributes[e]=h}var c=t.groups;for(i=0,n=c.length;i<n;i++){var u=c[i];this.addGroup(u.start,u.count,u.materialIndex)}var p=t.boundingBox;null!==p&&(this.boundingBox=p.clone());var d=t.boundingSphere;return null!==d&&(this.boundingSphere=d.clone()),this.drawRange.start=t.drawRange.start,this.drawRange.count=t.drawRange.count,this.userData=t.userData,this},dispose:function(){this.dispatchEvent({type:\"dispose\"})}}),hn.prototype=Object.create(qi.prototype),hn.prototype.constructor=hn,ln.prototype=Object.create(on.prototype),ln.prototype.constructor=ln,cn.prototype=Object.create(qi.prototype),cn.prototype.constructor=cn,un.prototype=Object.create(on.prototype),un.prototype.constructor=un;var pn,dn,mn,fn,vn,gn,yn,xn,bn,wn,Mn,_n,Sn=0;function En(){Object.defineProperty(this,\"id\",{value:Sn++}),this.uuid=Qe.generateUUID(),this.name=\"\",this.type=\"Material\",this.fog=!0,this.lights=!0,this.blending=k,this.side=L,this.flatShading=!1,this.vertexColors=R,this.opacity=1,this.transparent=!1,this.blendSrc=Z,this.blendDst=Q,this.blendEquation=F,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=at,this.depthTest=!0,this.depthWrite=!0,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaTest=0,this.premultipliedAlpha=!1,this.visible=!0,this.userData={},this.needsUpdate=!0}function Tn(t){En.call(this),this.type=\"ShaderMaterial\",this.defines={},this.uniforms={},this.vertexShader=\"void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\",this.fragmentShader=\"void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}\",this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,void 0!==t&&(void 0!==t.attributes&&console.error(\"THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.\"),this.setValues(t))}function Ln(t,e){this.origin=void 0!==t?t:new ei,this.direction=void 0!==e?e:new ei}function An(t,e,i){this.a=void 0!==t?t:new ei,this.b=void 0!==e?e:new ei,this.c=void 0!==i?i:new ei}function Pn(t){En.call(this),this.type=\"MeshBasicMaterial\",this.color=new Ai(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=ut,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap=\"round\",this.wireframeLinejoin=\"round\",this.skinning=!1,this.morphTargets=!1,this.lights=!1,this.setValues(t)}function zn(t,e){Hi.call(this),this.type=\"Mesh\",this.geometry=void 0!==t?t:new on,this.material=void 0!==e?e:new Pn({color:16777215*Math.random()}),this.drawMode=ke,this.updateMorphTargets()}function Nn(t,e,i,n){var r,s,a=new Ai(0),o=0,h=null,l=0;function c(t,i){e.buffers.color.setClear(t.r,t.g,t.b,i,n)}return{getClearColor:function(){return a},setClearColor:function(t,e){a.set(t),c(a,o=void 0!==e?e:1)},getClearAlpha:function(){return o},setClearAlpha:function(t){c(a,o=t)},render:function(e,n,u,p){var d=n.background;if(null===d?(c(a,o),h=null,l=0):d&&d.isColor&&(c(d,1),p=!0,h=null,l=0),(t.autoClear||p)&&t.clear(t.autoClearColor,t.autoClearDepth,t.autoClearStencil),d&&(d.isCubeTexture||d.isWebGLRenderTargetCube)){void 0===s&&((s=new zn(new ln(1,1,1),new Tn({type:\"BackgroundCubeMaterial\",uniforms:wi(Ni.cube.uniforms),vertexShader:Ni.cube.vertexShader,fragmentShader:Ni.cube.fragmentShader,side:A,depthTest:!1,depthWrite:!1,fog:!1}))).geometry.removeAttribute(\"normal\"),s.geometry.removeAttribute(\"uv\"),s.onBeforeRender=function(t,e,i){this.matrixWorld.copyPosition(i.matrixWorld)},Object.defineProperty(s.material,\"map\",{get:function(){return this.uniforms.tCube.value}}),i.update(s));var m=d.isWebGLRenderTargetCube?d.texture:d;s.material.uniforms.tCube.value=m,s.material.uniforms.tFlip.value=d.isWebGLRenderTargetCube?1:-1,h===d&&l===m.version||(s.material.needsUpdate=!0,h=d,l=m.version),e.unshift(s,s.geometry,s.material,0,0,null)}else d&&d.isTexture&&(void 0===r&&((r=new zn(new un(2,2),new Tn({type:\"BackgroundMaterial\",uniforms:wi(Ni.background.uniforms),vertexShader:Ni.background.vertexShader,fragmentShader:Ni.background.fragmentShader,side:L,depthTest:!1,depthWrite:!1,fog:!1}))).geometry.removeAttribute(\"normal\"),Object.defineProperty(r.material,\"map\",{get:function(){return this.uniforms.t2D.value}}),i.update(r)),r.material.uniforms.t2D.value=d,!0===d.matrixAutoUpdate&&d.updateMatrix(),r.material.uniforms.uvTransform.value.copy(d.matrix),h===d&&l===d.version||(r.material.needsUpdate=!0,h=d,l=d.version),e.unshift(r,r.geometry,r.material,0,0,null))}}}function Rn(t,e,i,n){var r;this.setMode=function(t){r=t},this.render=function(e,n){t.drawArrays(r,e,n),i.update(n,r)},this.renderInstances=function(s,a,o){var h;if(n.isWebGL2)h=t;else if(null===(h=e.get(\"ANGLE_instanced_arrays\")))return void console.error(\"THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.\");h[n.isWebGL2?\"drawArraysInstanced\":\"drawArraysInstancedANGLE\"](r,a,o,s.maxInstancedCount),i.update(o,r,s.maxInstancedCount)}}function Cn(t,e,i){var n;function r(e){if(\"highp\"===e){if(t.getShaderPrecisionFormat(35633,36338).precision>0&&t.getShaderPrecisionFormat(35632,36338).precision>0)return\"highp\";e=\"mediump\"}return\"mediump\"===e&&t.getShaderPrecisionFormat(35633,36337).precision>0&&t.getShaderPrecisionFormat(35632,36337).precision>0?\"mediump\":\"lowp\"}var s=\"undefined\"!=typeof WebGL2RenderingContext&&t instanceof WebGL2RenderingContext,a=void 0!==i.precision?i.precision:\"highp\",o=r(a);o!==a&&(console.warn(\"THREE.WebGLRenderer:\",a,\"not supported, using\",o,\"instead.\"),a=o);var h=!0===i.logarithmicDepthBuffer,l=t.getParameter(34930),c=t.getParameter(35660),u=t.getParameter(3379),p=t.getParameter(34076),d=t.getParameter(34921),m=t.getParameter(36347),f=t.getParameter(36348),v=t.getParameter(36349),g=c>0,y=s||!!e.get(\"OES_texture_float\");return{isWebGL2:s,getMaxAnisotropy:function(){if(void 0!==n)return n;var i=e.get(\"EXT_texture_filter_anisotropic\");return n=null!==i?t.getParameter(i.MAX_TEXTURE_MAX_ANISOTROPY_EXT):0},getMaxPrecision:r,precision:a,logarithmicDepthBuffer:h,maxTextures:l,maxVertexTextures:c,maxTextureSize:u,maxCubemapSize:p,maxAttributes:d,maxVertexUniforms:m,maxVaryings:f,maxFragmentUniforms:v,vertexTextures:g,floatFragmentTextures:y,floatVertexTextures:g&&y,maxSamples:s?t.getParameter(36183):0}}function In(){var t=this,e=null,i=0,n=!1,r=!1,s=new yi,a=new ii,o={value:null,needsUpdate:!1};function h(){o.value!==e&&(o.value=e,o.needsUpdate=i>0),t.numPlanes=i,t.numIntersection=0}function l(e,i,n,r){var h=null!==e?e.length:0,l=null;if(0!==h){if(l=o.value,!0!==r||null===l){var c=n+4*h,u=i.matrixWorldInverse;a.getNormalMatrix(u),(null===l||l.length<c)&&(l=new Float32Array(c));for(var p=0,d=n;p!==h;++p,d+=4)s.copy(e[p]).applyMatrix4(u,a),s.normal.toArray(l,d),l[d+3]=s.constant}o.value=l,o.needsUpdate=!0}return t.numPlanes=h,l}this.uniform=o,this.numPlanes=0,this.numIntersection=0,this.init=function(t,r,s){var a=0!==t.length||r||0!==i||n;return n=r,e=l(t,s,0),i=t.length,a},this.beginShadows=function(){r=!0,l(null)},this.endShadows=function(){r=!1,h()},this.setState=function(t,s,a,c,u,p){if(!n||null===t||0===t.length||r&&!a)r?l(null):h();else{var d=r?0:i,m=4*d,f=u.clippingState||null;o.value=f,f=l(t,c,m,p);for(var v=0;v!==m;++v)f[v]=e[v];u.clippingState=f,this.numIntersection=s?this.numPlanes:0,this.numPlanes+=d}}}function On(t){var e={};return{get:function(i){if(void 0!==e[i])return e[i];var n;switch(i){case\"WEBGL_depth_texture\":n=t.getExtension(\"WEBGL_depth_texture\")||t.getExtension(\"MOZ_WEBGL_depth_texture\")||t.getExtension(\"WEBKIT_WEBGL_depth_texture\");break;case\"EXT_texture_filter_anisotropic\":n=t.getExtension(\"EXT_texture_filter_anisotropic\")||t.getExtension(\"MOZ_EXT_texture_filter_anisotropic\")||t.getExtension(\"WEBKIT_EXT_texture_filter_anisotropic\");break;case\"WEBGL_compressed_texture_s3tc\":n=t.getExtension(\"WEBGL_compressed_texture_s3tc\")||t.getExtension(\"MOZ_WEBGL_compressed_texture_s3tc\")||t.getExtension(\"WEBKIT_WEBGL_compressed_texture_s3tc\");break;case\"WEBGL_compressed_texture_pvrtc\":n=t.getExtension(\"WEBGL_compressed_texture_pvrtc\")||t.getExtension(\"WEBKIT_WEBGL_compressed_texture_pvrtc\");break;default:n=t.getExtension(i)}return null===n&&console.warn(\"THREE.WebGLRenderer: \"+i+\" extension not supported.\"),e[i]=n,n}}}function kn(t,e,i){var n={},r={};function s(t){var a=t.target,o=n[a.id];for(var h in null!==o.index&&e.remove(o.index),o.attributes)e.remove(o.attributes[h]);a.removeEventListener(\"dispose\",s),delete n[a.id];var l=r[o.id];l&&(e.remove(l),delete r[o.id]),i.memory.geometries--}return{get:function(t,e){var r=n[e.id];return r||(e.addEventListener(\"dispose\",s),e.isBufferGeometry?r=e:e.isGeometry&&(void 0===e._bufferGeometry&&(e._bufferGeometry=(new on).setFromObject(t)),r=e._bufferGeometry),n[e.id]=r,i.memory.geometries++,r)},update:function(t){var i=t.index,n=t.attributes;for(var r in null!==i&&e.update(i,34963),n)e.update(n[r],34962);var s=t.morphAttributes;for(var r in s)for(var a=s[r],o=0,h=a.length;o<h;o++)e.update(a[o],34962)},getWireframeAttribute:function(t){var i=r[t.id];if(i)return i;var n,s=[],a=t.index,o=t.attributes;if(null!==a)for(var h=0,l=(n=a.array).length;h<l;h+=3){var c=n[h+0],u=n[h+1],p=n[h+2];s.push(c,u,u,p,p,c)}else for(h=0,l=(n=o.position.array).length/3-1;h<l;h+=3)c=h+0,u=h+1,p=h+2,s.push(c,u,u,p,p,c);return i=new(sn(s)>65535?tn:Ki)(s,1),e.update(i,34963),r[t.id]=i,i}}}function Dn(t,e,i,n){var r,s,a;this.setMode=function(t){r=t},this.setIndex=function(t){s=t.type,a=t.bytesPerElement},this.render=function(e,n){t.drawElements(r,n,s,e*a),i.update(n,r)},this.renderInstances=function(o,h,l){var c;if(n.isWebGL2)c=t;else if(null===(c=e.get(\"ANGLE_instanced_arrays\")))return void console.error(\"THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.\");c[n.isWebGL2?\"drawElementsInstanced\":\"drawElementsInstancedANGLE\"](r,l,s,h*a,o.maxInstancedCount),i.update(l,r,o.maxInstancedCount)}}function Bn(t){var e={frame:0,calls:0,triangles:0,points:0,lines:0};return{memory:{geometries:0,textures:0},render:e,programs:null,autoReset:!0,reset:function(){e.frame++,e.calls=0,e.triangles=0,e.points=0,e.lines=0},update:function(t,i,n){switch(n=n||1,e.calls++,i){case 4:e.triangles+=n*(t/3);break;case 5:case 6:e.triangles+=n*(t-2);break;case 1:e.lines+=n*(t/2);break;case 3:e.lines+=n*(t-1);break;case 2:e.lines+=n*t;break;case 0:e.points+=n*t;break;default:console.error(\"THREE.WebGLInfo: Unknown draw mode:\",i)}}}}function Vn(t,e){return Math.abs(e[1])-Math.abs(t[1])}function Un(t){var e={},i=new Float32Array(8);return{update:function(n,r,s,a){var o=n.morphTargetInfluences,h=o.length,l=e[r.id];if(void 0===l){l=[];for(var c=0;c<h;c++)l[c]=[c,0];e[r.id]=l}var u=s.morphTargets&&r.morphAttributes.position,p=s.morphNormals&&r.morphAttributes.normal;for(c=0;c<h;c++)0!==(d=l[c])[1]&&(u&&r.removeAttribute(\"morphTarget\"+c),p&&r.removeAttribute(\"morphNormal\"+c));for(c=0;c<h;c++)(d=l[c])[0]=c,d[1]=o[c];for(l.sort(Vn),c=0;c<8;c++){var d;if(d=l[c]){var m=d[0],f=d[1];if(f){u&&r.addAttribute(\"morphTarget\"+c,u[m]),p&&r.addAttribute(\"morphNormal\"+c,p[m]),i[c]=f;continue}}i[c]=0}a.getUniforms().setValue(t,\"morphTargetInfluences\",i)}}}function Fn(t,e){var i={};return{update:function(n){var r=e.render.frame,s=n.geometry,a=t.get(n,s);return i[a.id]!==r&&(s.isGeometry&&a.updateFromObject(n),t.update(a),i[a.id]=r),a},dispose:function(){i={}}}}function Hn(t,e,i,n,r,s,a,o,h,l){t=void 0!==t?t:[],e=void 0!==e?e:wt,ci.call(this,t,e,i,n,r,s,a,o,h,l),this.flipY=!1}function Gn(t,e,i,n){ci.call(this,null),this.image={data:t,width:e,height:i,depth:n},this.magFilter=Nt,this.minFilter=Nt,this.generateMipmaps=!1,this.flipY=!1}En.prototype=Object.assign(Object.create(n.prototype),{constructor:En,isMaterial:!0,onBeforeCompile:function(){},setValues:function(t){if(void 0!==t)for(var e in t){var i=t[e];if(void 0!==i)if(\"shading\"!==e){var n=this[e];void 0!==n?n&&n.isColor?n.set(i):n&&n.isVector3&&i&&i.isVector3?n.copy(i):this[e]=i:console.warn(\"THREE.\"+this.type+\": '\"+e+\"' is not a property of this material.\")}else console.warn(\"THREE.\"+this.type+\": .shading has been removed. Use the boolean .flatShading instead.\"),this.flatShading=i===z;else console.warn(\"THREE.Material: '\"+e+\"' parameter is undefined.\")}},toJSON:function(t){var e=void 0===t||\"string\"==typeof t;e&&(t={textures:{},images:{}});var i={metadata:{version:4.5,type:\"Material\",generator:\"Material.toJSON\"}};function n(t){var e=[];for(var i in t){var n=t[i];delete n.metadata,e.push(n)}return e}if(i.uuid=this.uuid,i.type=this.type,\"\"!==this.name&&(i.name=this.name),this.color&&this.color.isColor&&(i.color=this.color.getHex()),void 0!==this.roughness&&(i.roughness=this.roughness),void 0!==this.metalness&&(i.metalness=this.metalness),this.emissive&&this.emissive.isColor&&(i.emissive=this.emissive.getHex()),1!==this.emissiveIntensity&&(i.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(i.specular=this.specular.getHex()),void 0!==this.shininess&&(i.shininess=this.shininess),void 0!==this.clearCoat&&(i.clearCoat=this.clearCoat),void 0!==this.clearCoatRoughness&&(i.clearCoatRoughness=this.clearCoatRoughness),this.map&&this.map.isTexture&&(i.map=this.map.toJSON(t).uuid),this.alphaMap&&this.alphaMap.isTexture&&(i.alphaMap=this.alphaMap.toJSON(t).uuid),this.lightMap&&this.lightMap.isTexture&&(i.lightMap=this.lightMap.toJSON(t).uuid),this.aoMap&&this.aoMap.isTexture&&(i.aoMap=this.aoMap.toJSON(t).uuid,i.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(i.bumpMap=this.bumpMap.toJSON(t).uuid,i.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(i.normalMap=this.normalMap.toJSON(t).uuid,i.normalMapType=this.normalMapType,i.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(i.displacementMap=this.displacementMap.toJSON(t).uuid,i.displacementScale=this.displacementScale,i.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(i.roughnessMap=this.roughnessMap.toJSON(t).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(i.metalnessMap=this.metalnessMap.toJSON(t).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(i.emissiveMap=this.emissiveMap.toJSON(t).uuid),this.specularMap&&this.specularMap.isTexture&&(i.specularMap=this.specularMap.toJSON(t).uuid),this.envMap&&this.envMap.isTexture&&(i.envMap=this.envMap.toJSON(t).uuid,i.reflectivity=this.reflectivity,void 0!==this.combine&&(i.combine=this.combine),void 0!==this.envMapIntensity&&(i.envMapIntensity=this.envMapIntensity)),this.gradientMap&&this.gradientMap.isTexture&&(i.gradientMap=this.gradientMap.toJSON(t).uuid),void 0!==this.size&&(i.size=this.size),void 0!==this.sizeAttenuation&&(i.sizeAttenuation=this.sizeAttenuation),this.blending!==k&&(i.blending=this.blending),!0===this.flatShading&&(i.flatShading=this.flatShading),this.side!==L&&(i.side=this.side),this.vertexColors!==R&&(i.vertexColors=this.vertexColors),this.opacity<1&&(i.opacity=this.opacity),!0===this.transparent&&(i.transparent=this.transparent),i.depthFunc=this.depthFunc,i.depthTest=this.depthTest,i.depthWrite=this.depthWrite,0!==this.rotation&&(i.rotation=this.rotation),!0===this.polygonOffset&&(i.polygonOffset=!0),0!==this.polygonOffsetFactor&&(i.polygonOffsetFactor=this.polygonOffsetFactor),0!==this.polygonOffsetUnits&&(i.polygonOffsetUnits=this.polygonOffsetUnits),1!==this.linewidth&&(i.linewidth=this.linewidth),void 0!==this.dashSize&&(i.dashSize=this.dashSize),void 0!==this.gapSize&&(i.gapSize=this.gapSize),void 0!==this.scale&&(i.scale=this.scale),!0===this.dithering&&(i.dithering=!0),this.alphaTest>0&&(i.alphaTest=this.alphaTest),!0===this.premultipliedAlpha&&(i.premultipliedAlpha=this.premultipliedAlpha),!0===this.wireframe&&(i.wireframe=this.wireframe),this.wireframeLinewidth>1&&(i.wireframeLinewidth=this.wireframeLinewidth),\"round\"!==this.wireframeLinecap&&(i.wireframeLinecap=this.wireframeLinecap),\"round\"!==this.wireframeLinejoin&&(i.wireframeLinejoin=this.wireframeLinejoin),!0===this.morphTargets&&(i.morphTargets=!0),!0===this.skinning&&(i.skinning=!0),!1===this.visible&&(i.visible=!1),\"{}\"!==JSON.stringify(this.userData)&&(i.userData=this.userData),e){var r=n(t.textures),s=n(t.images);r.length>0&&(i.textures=r),s.length>0&&(i.images=s)}return i},clone:function(){return(new this.constructor).copy(this)},copy:function(t){this.name=t.name,this.fog=t.fog,this.lights=t.lights,this.blending=t.blending,this.side=t.side,this.flatShading=t.flatShading,this.vertexColors=t.vertexColors,this.opacity=t.opacity,this.transparent=t.transparent,this.blendSrc=t.blendSrc,this.blendDst=t.blendDst,this.blendEquation=t.blendEquation,this.blendSrcAlpha=t.blendSrcAlpha,this.blendDstAlpha=t.blendDstAlpha,this.blendEquationAlpha=t.blendEquationAlpha,this.depthFunc=t.depthFunc,this.depthTest=t.depthTest,this.depthWrite=t.depthWrite,this.colorWrite=t.colorWrite,this.precision=t.precision,this.polygonOffset=t.polygonOffset,this.polygonOffsetFactor=t.polygonOffsetFactor,this.polygonOffsetUnits=t.polygonOffsetUnits,this.dithering=t.dithering,this.alphaTest=t.alphaTest,this.premultipliedAlpha=t.premultipliedAlpha,this.visible=t.visible,this.userData=JSON.parse(JSON.stringify(t.userData)),this.clipShadows=t.clipShadows,this.clipIntersection=t.clipIntersection;var e=t.clippingPlanes,i=null;if(null!==e){var n=e.length;i=new Array(n);for(var r=0;r!==n;++r)i[r]=e[r].clone()}return this.clippingPlanes=i,this.shadowSide=t.shadowSide,this},dispose:function(){this.dispatchEvent({type:\"dispose\"})}}),Tn.prototype=Object.create(En.prototype),Tn.prototype.constructor=Tn,Tn.prototype.isShaderMaterial=!0,Tn.prototype.copy=function(t){return En.prototype.copy.call(this,t),this.fragmentShader=t.fragmentShader,this.vertexShader=t.vertexShader,this.uniforms=wi(t.uniforms),this.defines=Object.assign({},t.defines),this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.lights=t.lights,this.clipping=t.clipping,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this.extensions=t.extensions,this},Tn.prototype.toJSON=function(t){var e=En.prototype.toJSON.call(this,t);for(var i in e.uniforms={},this.uniforms){var n=this.uniforms[i].value;n&&n.isTexture?e.uniforms[i]={type:\"t\",value:n.toJSON(t).uuid}:n&&n.isColor?e.uniforms[i]={type:\"c\",value:n.getHex()}:n&&n.isVector2?e.uniforms[i]={type:\"v2\",value:n.toArray()}:n&&n.isVector3?e.uniforms[i]={type:\"v3\",value:n.toArray()}:n&&n.isVector4?e.uniforms[i]={type:\"v4\",value:n.toArray()}:n&&n.isMatrix3?e.uniforms[i]={type:\"m3\",value:n.toArray()}:n&&n.isMatrix4?e.uniforms[i]={type:\"m4\",value:n.toArray()}:e.uniforms[i]={value:n}}Object.keys(this.defines).length>0&&(e.defines=this.defines),e.vertexShader=this.vertexShader,e.fragmentShader=this.fragmentShader;var r={};for(var s in this.extensions)!0===this.extensions[s]&&(r[s]=!0);return Object.keys(r).length>0&&(e.extensions=r),e},Object.assign(Ln.prototype,{set:function(t,e){return this.origin.copy(t),this.direction.copy(e),this},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.origin.copy(t.origin),this.direction.copy(t.direction),this},at:function(t,e){return void 0===e&&(console.warn(\"THREE.Ray: .at() target is now required\"),e=new ei),e.copy(this.direction).multiplyScalar(t).add(this.origin)},lookAt:function(t){return this.direction.copy(t).sub(this.origin).normalize(),this},recast:function(){var t=new ei;return function(e){return this.origin.copy(this.at(e,t)),this}}(),closestPointToPoint:function(t,e){void 0===e&&(console.warn(\"THREE.Ray: .closestPointToPoint() target is now required\"),e=new ei),e.subVectors(t,this.origin);var i=e.dot(this.direction);return i<0?e.copy(this.origin):e.copy(this.direction).multiplyScalar(i).add(this.origin)},distanceToPoint:function(t){return Math.sqrt(this.distanceSqToPoint(t))},distanceSqToPoint:function(){var t=new ei;return function(e){var i=t.subVectors(e,this.origin).dot(this.direction);return i<0?this.origin.distanceToSquared(e):(t.copy(this.direction).multiplyScalar(i).add(this.origin),t.distanceToSquared(e))}}(),distanceSqToSegment:(dn=new ei,mn=new ei,fn=new ei,function(t,e,i,n){dn.copy(t).add(e).multiplyScalar(.5),mn.copy(e).sub(t).normalize(),fn.copy(this.origin).sub(dn);var r,s,a,o,h=.5*t.distanceTo(e),l=-this.direction.dot(mn),c=fn.dot(this.direction),u=-fn.dot(mn),p=fn.lengthSq(),d=Math.abs(1-l*l);if(d>0)if(s=l*c-u,o=h*d,(r=l*u-c)>=0)if(s>=-o)if(s<=o){var m=1/d;a=(r*=m)*(r+l*(s*=m)+2*c)+s*(l*r+s+2*u)+p}else s=h,a=-(r=Math.max(0,-(l*s+c)))*r+s*(s+2*u)+p;else s=-h,a=-(r=Math.max(0,-(l*s+c)))*r+s*(s+2*u)+p;else s<=-o?a=-(r=Math.max(0,-(-l*h+c)))*r+(s=r>0?-h:Math.min(Math.max(-h,-u),h))*(s+2*u)+p:s<=o?(r=0,a=(s=Math.min(Math.max(-h,-u),h))*(s+2*u)+p):a=-(r=Math.max(0,-(l*h+c)))*r+(s=r>0?h:Math.min(Math.max(-h,-u),h))*(s+2*u)+p;else s=l>0?-h:h,a=-(r=Math.max(0,-(l*s+c)))*r+s*(s+2*u)+p;return i&&i.copy(this.direction).multiplyScalar(r).add(this.origin),n&&n.copy(mn).multiplyScalar(s).add(dn),a}),intersectSphere:function(){var t=new ei;return function(e,i){t.subVectors(e.center,this.origin);var n=t.dot(this.direction),r=t.dot(t)-n*n,s=e.radius*e.radius;if(r>s)return null;var a=Math.sqrt(s-r),o=n-a,h=n+a;return o<0&&h<0?null:o<0?this.at(h,i):this.at(o,i)}}(),intersectsSphere:function(t){return this.distanceSqToPoint(t.center)<=t.radius*t.radius},distanceToPlane:function(t){var e=t.normal.dot(this.direction);if(0===e)return 0===t.distanceToPoint(this.origin)?0:null;var i=-(this.origin.dot(t.normal)+t.constant)/e;return i>=0?i:null},intersectPlane:function(t,e){var i=this.distanceToPlane(t);return null===i?null:this.at(i,e)},intersectsPlane:function(t){var e=t.distanceToPoint(this.origin);return 0===e||t.normal.dot(this.direction)*e<0},intersectBox:function(t,e){var i,n,r,s,a,o,h=1/this.direction.x,l=1/this.direction.y,c=1/this.direction.z,u=this.origin;return h>=0?(i=(t.min.x-u.x)*h,n=(t.max.x-u.x)*h):(i=(t.max.x-u.x)*h,n=(t.min.x-u.x)*h),l>=0?(r=(t.min.y-u.y)*l,s=(t.max.y-u.y)*l):(r=(t.max.y-u.y)*l,s=(t.min.y-u.y)*l),i>s||r>n?null:((r>i||i!=i)&&(i=r),(s<n||n!=n)&&(n=s),c>=0?(a=(t.min.z-u.z)*c,o=(t.max.z-u.z)*c):(a=(t.max.z-u.z)*c,o=(t.min.z-u.z)*c),i>o||a>n?null:((a>i||i!=i)&&(i=a),(o<n||n!=n)&&(n=o),n<0?null:this.at(i>=0?i:n,e)))},intersectsBox:(pn=new ei,function(t){return null!==this.intersectBox(t,pn)}),intersectTriangle:function(){var t=new ei,e=new ei,i=new ei,n=new ei;return function(r,s,a,o,h){e.subVectors(s,r),i.subVectors(a,r),n.crossVectors(e,i);var l,c=this.direction.dot(n);if(c>0){if(o)return null;l=1}else{if(!(c<0))return null;l=-1,c=-c}t.subVectors(this.origin,r);var u=l*this.direction.dot(i.crossVectors(t,i));if(u<0)return null;var p=l*this.direction.dot(e.cross(t));if(p<0)return null;if(u+p>c)return null;var d=-l*t.dot(n);return d<0?null:this.at(d/c,h)}}(),applyMatrix4:function(t){return this.origin.applyMatrix4(t),this.direction.transformDirection(t),this},equals:function(t){return t.origin.equals(this.origin)&&t.direction.equals(this.direction)}}),Object.assign(An,{getNormal:(gn=new ei,function(t,e,i,n){void 0===n&&(console.warn(\"THREE.Triangle: .getNormal() target is now required\"),n=new ei),n.subVectors(i,e),gn.subVectors(t,e),n.cross(gn);var r=n.lengthSq();return r>0?n.multiplyScalar(1/Math.sqrt(r)):n.set(0,0,0)}),getBarycoord:function(){var t=new ei,e=new ei,i=new ei;return function(n,r,s,a,o){t.subVectors(a,r),e.subVectors(s,r),i.subVectors(n,r);var h=t.dot(t),l=t.dot(e),c=t.dot(i),u=e.dot(e),p=e.dot(i),d=h*u-l*l;if(void 0===o&&(console.warn(\"THREE.Triangle: .getBarycoord() target is now required\"),o=new ei),0===d)return o.set(-2,-1,-1);var m=1/d,f=(u*c-l*p)*m,v=(h*p-l*c)*m;return o.set(1-f-v,v,f)}}(),containsPoint:function(){var t=new ei;return function(e,i,n,r){return An.getBarycoord(e,i,n,r,t),t.x>=0&&t.y>=0&&t.x+t.y<=1}}(),getUV:(vn=new ei,function(t,e,i,n,r,s,a,o){return this.getBarycoord(t,e,i,n,vn),o.set(0,0),o.addScaledVector(r,vn.x),o.addScaledVector(s,vn.y),o.addScaledVector(a,vn.z),o})}),Object.assign(An.prototype,{set:function(t,e,i){return this.a.copy(t),this.b.copy(e),this.c.copy(i),this},setFromPointsAndIndices:function(t,e,i,n){return this.a.copy(t[e]),this.b.copy(t[i]),this.c.copy(t[n]),this},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.a.copy(t.a),this.b.copy(t.b),this.c.copy(t.c),this},getArea:function(){var t=new ei,e=new ei;return function(){return t.subVectors(this.c,this.b),e.subVectors(this.a,this.b),.5*t.cross(e).length()}}(),getMidpoint:function(t){return void 0===t&&(console.warn(\"THREE.Triangle: .getMidpoint() target is now required\"),t=new ei),t.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)},getNormal:function(t){return An.getNormal(this.a,this.b,this.c,t)},getPlane:function(t){return void 0===t&&(console.warn(\"THREE.Triangle: .getPlane() target is now required\"),t=new ei),t.setFromCoplanarPoints(this.a,this.b,this.c)},getBarycoord:function(t,e){return An.getBarycoord(t,this.a,this.b,this.c,e)},containsPoint:function(t){return An.containsPoint(t,this.a,this.b,this.c)},getUV:function(t,e,i,n,r){return An.getUV(t,this.a,this.b,this.c,e,i,n,r)},intersectsBox:function(t){return t.intersectsTriangle(this)},closestPointToPoint:(yn=new ei,xn=new ei,bn=new ei,wn=new ei,Mn=new ei,_n=new ei,function(t,e){void 0===e&&(console.warn(\"THREE.Triangle: .closestPointToPoint() target is now required\"),e=new ei);var i,n,r=this.a,s=this.b,a=this.c;yn.subVectors(s,r),xn.subVectors(a,r),wn.subVectors(t,r);var o=yn.dot(wn),h=xn.dot(wn);if(o<=0&&h<=0)return e.copy(r);Mn.subVectors(t,s);var l=yn.dot(Mn),c=xn.dot(Mn);if(l>=0&&c<=l)return e.copy(s);var u=o*c-l*h;if(u<=0&&o>=0&&l<=0)return i=o/(o-l),e.copy(r).addScaledVector(yn,i);_n.subVectors(t,a);var p=yn.dot(_n),d=xn.dot(_n);if(d>=0&&p<=d)return e.copy(a);var m=p*h-o*d;if(m<=0&&h>=0&&d<=0)return n=h/(h-d),e.copy(r).addScaledVector(xn,n);var f=l*d-p*c;if(f<=0&&c-l>=0&&p-d>=0)return bn.subVectors(a,s),n=(c-l)/(c-l+(p-d)),e.copy(s).addScaledVector(bn,n);var v=1/(f+m+u);return i=m*v,n=u*v,e.copy(r).addScaledVector(yn,i).addScaledVector(xn,n)}),equals:function(t){return t.a.equals(this.a)&&t.b.equals(this.b)&&t.c.equals(this.c)}}),Pn.prototype=Object.create(En.prototype),Pn.prototype.constructor=Pn,Pn.prototype.isMeshBasicMaterial=!0,Pn.prototype.copy=function(t){return En.prototype.copy.call(this,t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this},zn.prototype=Object.assign(Object.create(Hi.prototype),{constructor:zn,isMesh:!0,setDrawMode:function(t){this.drawMode=t},copy:function(t){return Hi.prototype.copy.call(this,t),this.drawMode=t.drawMode,void 0!==t.morphTargetInfluences&&(this.morphTargetInfluences=t.morphTargetInfluences.slice()),void 0!==t.morphTargetDictionary&&(this.morphTargetDictionary=Object.assign({},t.morphTargetDictionary)),this},updateMorphTargets:function(){var t,e,i,n=this.geometry;if(n.isBufferGeometry){var r=n.morphAttributes,s=Object.keys(r);if(s.length>0){var a=r[s[0]];if(void 0!==a)for(this.morphTargetInfluences=[],this.morphTargetDictionary={},t=0,e=a.length;t<e;t++)i=a[t].name||String(t),this.morphTargetInfluences.push(0),this.morphTargetDictionary[i]=t}}else{var o=n.morphTargets;void 0!==o&&o.length>0&&console.error(\"THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.\")}},raycast:function(){var t=new $e,e=new Ln,i=new gi,n=new ei,r=new ei,s=new ei,a=new ei,o=new ei,h=new ei,l=new Ke,c=new Ke,u=new Ke,p=new ei,d=new ei;function m(t,e,i,n,r,s,a,o){if(null===(e.side===A?n.intersectTriangle(a,s,r,!0,o):n.intersectTriangle(r,s,a,e.side!==P,o)))return null;d.copy(o),d.applyMatrix4(t.matrixWorld);var h=i.ray.origin.distanceTo(d);return h<i.near||h>i.far?null:{distance:h,point:d.clone(),object:t}}function f(t,e,i,a,o,h,d,f,v){n.fromBufferAttribute(o,d),r.fromBufferAttribute(o,f),s.fromBufferAttribute(o,v);var g=m(t,e,i,a,n,r,s,p);if(g){h&&(l.fromBufferAttribute(h,d),c.fromBufferAttribute(h,f),u.fromBufferAttribute(h,v),g.uv=An.getUV(p,n,r,s,l,c,u,new Ke));var y=new Ii(d,f,v);An.getNormal(n,r,s,y.normal),g.face=y}return g}return function(d,v){var g,y=this.geometry,x=this.material,b=this.matrixWorld;if(void 0!==x&&(null===y.boundingSphere&&y.computeBoundingSphere(),i.copy(y.boundingSphere),i.applyMatrix4(b),!1!==d.ray.intersectsSphere(i)&&(t.getInverse(b),e.copy(d.ray).applyMatrix4(t),null===y.boundingBox||!1!==e.intersectsBox(y.boundingBox))))if(y.isBufferGeometry){var w,M,_,S,E,T,L,A,P,z=y.index,N=y.attributes.position,R=y.attributes.uv,C=y.groups,I=y.drawRange;if(null!==z)if(Array.isArray(x))for(S=0,T=C.length;S<T;S++)for(P=x[(A=C[S]).materialIndex],E=Math.max(A.start,I.start),L=Math.min(A.start+A.count,I.start+I.count);E<L;E+=3)w=z.getX(E),M=z.getX(E+1),_=z.getX(E+2),(g=f(this,P,d,e,N,R,w,M,_))&&(g.faceIndex=Math.floor(E/3),g.face.materialIndex=A.materialIndex,v.push(g));else for(S=Math.max(0,I.start),T=Math.min(z.count,I.start+I.count);S<T;S+=3)w=z.getX(S),M=z.getX(S+1),_=z.getX(S+2),(g=f(this,x,d,e,N,R,w,M,_))&&(g.faceIndex=Math.floor(S/3),v.push(g));else if(void 0!==N)if(Array.isArray(x))for(S=0,T=C.length;S<T;S++)for(P=x[(A=C[S]).materialIndex],E=Math.max(A.start,I.start),L=Math.min(A.start+A.count,I.start+I.count);E<L;E+=3)(g=f(this,P,d,e,N,R,w=E,M=E+1,_=E+2))&&(g.faceIndex=Math.floor(E/3),g.face.materialIndex=A.materialIndex,v.push(g));else for(S=Math.max(0,I.start),T=Math.min(N.count,I.start+I.count);S<T;S+=3)(g=f(this,x,d,e,N,R,w=S,M=S+1,_=S+2))&&(g.faceIndex=Math.floor(S/3),v.push(g))}else if(y.isGeometry){var O,k,D,B,V=Array.isArray(x),U=y.vertices,F=y.faces,H=y.faceVertexUvs[0];H.length>0&&(B=H);for(var G=0,j=F.length;G<j;G++){var W=F[G],q=V?x[W.materialIndex]:x;if(void 0!==q){if(O=U[W.a],k=U[W.b],D=U[W.c],!0===q.morphTargets){var X=y.morphTargets,Y=this.morphTargetInfluences;n.set(0,0,0),r.set(0,0,0),s.set(0,0,0);for(var J=0,Z=X.length;J<Z;J++){var Q=Y[J];if(0!==Q){var K=X[J].vertices;n.addScaledVector(a.subVectors(K[W.a],O),Q),r.addScaledVector(o.subVectors(K[W.b],k),Q),s.addScaledVector(h.subVectors(K[W.c],D),Q)}}n.add(O),r.add(k),s.add(D),O=n,k=r,D=s}if(g=m(this,q,d,e,O,k,D,p)){if(B&&B[G]){var $=B[G];l.copy($[0]),c.copy($[1]),u.copy($[2]),g.uv=An.getUV(p,O,k,D,l,c,u,new Ke)}g.face=W,g.faceIndex=G,v.push(g)}}}}}}(),clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}}),Hn.prototype=Object.create(ci.prototype),Hn.prototype.constructor=Hn,Hn.prototype.isCubeTexture=!0,Object.defineProperty(Hn.prototype,\"images\",{get:function(){return this.image},set:function(t){this.image=t}}),Gn.prototype=Object.create(ci.prototype),Gn.prototype.constructor=Gn,Gn.prototype.isDataTexture3D=!0;var jn=new ci,Wn=new Gn,qn=new Hn;function Xn(){this.seq=[],this.map={}}var Yn=[],Jn=[],Zn=new Float32Array(16),Qn=new Float32Array(9),Kn=new Float32Array(4);function $n(t,e,i){var n=t[0];if(n<=0||n>0)return t;var r=e*i,s=Yn[r];if(void 0===s&&(s=new Float32Array(r),Yn[r]=s),0!==e){n.toArray(s,0);for(var a=1,o=0;a!==e;++a)o+=i,t[a].toArray(s,o)}return s}function tr(t,e){if(t.length!==e.length)return!1;for(var i=0,n=t.length;i<n;i++)if(t[i]!==e[i])return!1;return!0}function er(t,e){for(var i=0,n=e.length;i<n;i++)t[i]=e[i]}function ir(t,e){var i=Jn[e];void 0===i&&(i=new Int32Array(e),Jn[e]=i);for(var n=0;n!==e;++n)i[n]=t.allocTextureUnit();return i}function nr(t,e){var i=this.cache;i[0]!==e&&(t.uniform1f(this.addr,e),i[0]=e)}function rr(t,e){var i=this.cache;i[0]!==e&&(t.uniform1i(this.addr,e),i[0]=e)}function sr(t,e){var i=this.cache;if(void 0!==e.x)i[0]===e.x&&i[1]===e.y||(t.uniform2f(this.addr,e.x,e.y),i[0]=e.x,i[1]=e.y);else{if(tr(i,e))return;t.uniform2fv(this.addr,e),er(i,e)}}function ar(t,e){var i=this.cache;if(void 0!==e.x)i[0]===e.x&&i[1]===e.y&&i[2]===e.z||(t.uniform3f(this.addr,e.x,e.y,e.z),i[0]=e.x,i[1]=e.y,i[2]=e.z);else if(void 0!==e.r)i[0]===e.r&&i[1]===e.g&&i[2]===e.b||(t.uniform3f(this.addr,e.r,e.g,e.b),i[0]=e.r,i[1]=e.g,i[2]=e.b);else{if(tr(i,e))return;t.uniform3fv(this.addr,e),er(i,e)}}function or(t,e){var i=this.cache;if(void 0!==e.x)i[0]===e.x&&i[1]===e.y&&i[2]===e.z&&i[3]===e.w||(t.uniform4f(this.addr,e.x,e.y,e.z,e.w),i[0]=e.x,i[1]=e.y,i[2]=e.z,i[3]=e.w);else{if(tr(i,e))return;t.uniform4fv(this.addr,e),er(i,e)}}function hr(t,e){var i=this.cache,n=e.elements;if(void 0===n){if(tr(i,e))return;t.uniformMatrix2fv(this.addr,!1,e),er(i,e)}else{if(tr(i,n))return;Kn.set(n),t.uniformMatrix2fv(this.addr,!1,Kn),er(i,n)}}function lr(t,e){var i=this.cache,n=e.elements;if(void 0===n){if(tr(i,e))return;t.uniformMatrix3fv(this.addr,!1,e),er(i,e)}else{if(tr(i,n))return;Qn.set(n),t.uniformMatrix3fv(this.addr,!1,Qn),er(i,n)}}function cr(t,e){var i=this.cache,n=e.elements;if(void 0===n){if(tr(i,e))return;t.uniformMatrix4fv(this.addr,!1,e),er(i,e)}else{if(tr(i,n))return;Zn.set(n),t.uniformMatrix4fv(this.addr,!1,Zn),er(i,n)}}function ur(t,e,i){var n=this.cache,r=i.allocTextureUnit();n[0]!==r&&(t.uniform1i(this.addr,r),n[0]=r),i.setTexture2D(e||jn,r)}function pr(t,e,i){var n=this.cache,r=i.allocTextureUnit();n[0]!==r&&(t.uniform1i(this.addr,r),n[0]=r),i.setTexture3D(e||Wn,r)}function dr(t,e,i){var n=this.cache,r=i.allocTextureUnit();n[0]!==r&&(t.uniform1i(this.addr,r),n[0]=r),i.setTextureCube(e||qn,r)}function mr(t,e){var i=this.cache;tr(i,e)||(t.uniform2iv(this.addr,e),er(i,e))}function fr(t,e){var i=this.cache;tr(i,e)||(t.uniform3iv(this.addr,e),er(i,e))}function vr(t,e){var i=this.cache;tr(i,e)||(t.uniform4iv(this.addr,e),er(i,e))}function gr(t,e){var i=this.cache;tr(i,e)||(t.uniform1fv(this.addr,e),er(i,e))}function yr(t,e){var i=this.cache;tr(i,e)||(t.uniform1iv(this.addr,e),er(i,e))}function xr(t,e){var i=this.cache,n=$n(e,this.size,2);tr(i,n)||(t.uniform2fv(this.addr,n),this.updateCache(n))}function br(t,e){var i=this.cache,n=$n(e,this.size,3);tr(i,n)||(t.uniform3fv(this.addr,n),this.updateCache(n))}function wr(t,e){var i=this.cache,n=$n(e,this.size,4);tr(i,n)||(t.uniform4fv(this.addr,n),this.updateCache(n))}function Mr(t,e){var i=this.cache,n=$n(e,this.size,4);tr(i,n)||(t.uniformMatrix2fv(this.addr,!1,n),this.updateCache(n))}function _r(t,e){var i=this.cache,n=$n(e,this.size,9);tr(i,n)||(t.uniformMatrix3fv(this.addr,!1,n),this.updateCache(n))}function Sr(t,e){var i=this.cache,n=$n(e,this.size,16);tr(i,n)||(t.uniformMatrix4fv(this.addr,!1,n),this.updateCache(n))}function Er(t,e,i){var n=this.cache,r=e.length,s=ir(i,r);!1===tr(n,s)&&(t.uniform1iv(this.addr,s),er(n,s));for(var a=0;a!==r;++a)i.setTexture2D(e[a]||jn,s[a])}function Tr(t,e,i){var n=this.cache,r=e.length,s=ir(i,r);!1===tr(n,s)&&(t.uniform1iv(this.addr,s),er(n,s));for(var a=0;a!==r;++a)i.setTextureCube(e[a]||qn,s[a])}function Lr(t,e,i){this.id=t,this.addr=i,this.cache=[],this.setValue=function(t){switch(t){case 5126:return nr;case 35664:return sr;case 35665:return ar;case 35666:return or;case 35674:return hr;case 35675:return lr;case 35676:return cr;case 35678:case 36198:return ur;case 35679:return pr;case 35680:return dr;case 5124:case 35670:return rr;case 35667:case 35671:return mr;case 35668:case 35672:return fr;case 35669:case 35673:return vr}}(e.type)}function Ar(t,e,i){this.id=t,this.addr=i,this.cache=[],this.size=e.size,this.setValue=function(t){switch(t){case 5126:return gr;case 35664:return xr;case 35665:return br;case 35666:return wr;case 35674:return Mr;case 35675:return _r;case 35676:return Sr;case 35678:return Er;case 35680:return Tr;case 5124:case 35670:return yr;case 35667:case 35671:return mr;case 35668:case 35672:return fr;case 35669:case 35673:return vr}}(e.type)}function Pr(t){this.id=t,Xn.call(this)}Ar.prototype.updateCache=function(t){var e=this.cache;t instanceof Float32Array&&e.length!==t.length&&(this.cache=new Float32Array(t.length)),er(e,t)},Pr.prototype.setValue=function(t,e,i){for(var n=this.seq,r=0,s=n.length;r!==s;++r){var a=n[r];a.setValue(t,e[a.id],i)}};var zr=/([\\w\\d_]+)(\\])?(\\[|\\.)?/g;function Nr(t,e){t.seq.push(e),t.map[e.id]=e}function Rr(t,e,i){var n=t.name,r=n.length;for(zr.lastIndex=0;;){var s=zr.exec(n),a=zr.lastIndex,o=s[1],h=\"]\"===s[2],l=s[3];if(h&&(o|=0),void 0===l||\"[\"===l&&a+2===r){Nr(i,void 0===l?new Lr(o,t,e):new Ar(o,t,e));break}var c=i.map[o];void 0===c&&Nr(i,c=new Pr(o)),i=c}}function Cr(t,e,i){Xn.call(this),this.renderer=i;for(var n=t.getProgramParameter(e,35718),r=0;r<n;++r){var s=t.getActiveUniform(e,r);Rr(s,t.getUniformLocation(e,s.name),this)}}function Ir(t,e,i){var n=t.createShader(e);return t.shaderSource(n,i),t.compileShader(n),!1===t.getShaderParameter(n,35713)&&console.error(\"THREE.WebGLShader: Shader couldn't compile.\"),\"\"!==t.getShaderInfoLog(n)&&console.warn(\"THREE.WebGLShader: gl.getShaderInfoLog()\",35633===e?\"vertex\":\"fragment\",t.getShaderInfoLog(n),function(t){for(var e=t.split(\"\\n\"),i=0;i<e.length;i++)e[i]=i+1+\": \"+e[i];return e.join(\"\\n\")}(i)),n}Cr.prototype.setValue=function(t,e,i){var n=this.map[e];void 0!==n&&n.setValue(t,i,this.renderer)},Cr.prototype.setOptional=function(t,e,i){var n=e[i];void 0!==n&&this.setValue(t,i,n)},Cr.upload=function(t,e,i,n){for(var r=0,s=e.length;r!==s;++r){var a=e[r],o=i[a.id];!1!==o.needsUpdate&&a.setValue(t,o.value,n)}},Cr.seqWithValue=function(t,e){for(var i=[],n=0,r=t.length;n!==r;++n){var s=t[n];s.id in e&&i.push(s)}return i};var Or=0;function kr(t){switch(t){case Ve:return[\"Linear\",\"( value )\"];case Ue:return[\"sRGB\",\"( value )\"];case He:return[\"RGBE\",\"( value )\"];case je:return[\"RGBM\",\"( value, 7.0 )\"];case We:return[\"RGBM\",\"( value, 16.0 )\"];case qe:return[\"RGBD\",\"( value, 256.0 )\"];case Fe:return[\"Gamma\",\"( value, float( GAMMA_FACTOR ) )\"];default:throw new Error(\"unsupported encoding: \"+t)}}function Dr(t,e){var i=kr(e);return\"vec4 \"+t+\"( vec4 value ) { return \"+i[0]+\"ToLinear\"+i[1]+\"; }\"}function Br(t,e){var i;switch(e){case ft:i=\"Linear\";break;case vt:i=\"Reinhard\";break;case gt:i=\"Uncharted2\";break;case yt:i=\"OptimizedCineon\";break;case xt:i=\"ACESFilmic\";break;default:throw new Error(\"unsupported toneMapping: \"+e)}return\"vec3 \"+t+\"( vec3 color ) { return \"+i+\"ToneMapping( color ); }\"}function Vr(t){return\"\"!==t}function Ur(t,e){return t.replace(/NUM_DIR_LIGHTS/g,e.numDirLights).replace(/NUM_SPOT_LIGHTS/g,e.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g,e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,e.numPointLights).replace(/NUM_HEMI_LIGHTS/g,e.numHemiLights)}function Fr(t,e){return t.replace(/NUM_CLIPPING_PLANES/g,e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,e.numClippingPlanes-e.numClipIntersection)}function Hr(t){return t.replace(/^[ \\t]*#include +<([\\w\\d.\\/]+)>/gm,function(t,e){var i=bi[e];if(void 0===i)throw new Error(\"Can not resolve #include <\"+e+\">\");return Hr(i)})}function Gr(t){return t.replace(/#pragma unroll_loop[\\s]+?for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g,function(t,e,i,n){for(var r=\"\",s=parseInt(e);s<parseInt(i);s++)r+=n.replace(/\\[ i \\]/g,\"[ \"+s+\" ]\");return r})}function jr(t,e,i,n,r,s,a){var o=t.context,h=n.defines,l=r.vertexShader,c=r.fragmentShader,u=\"SHADOWMAP_TYPE_BASIC\";s.shadowMapType===E?u=\"SHADOWMAP_TYPE_PCF\":s.shadowMapType===T&&(u=\"SHADOWMAP_TYPE_PCF_SOFT\");var p=\"ENVMAP_TYPE_CUBE\",d=\"ENVMAP_MODE_REFLECTION\",m=\"ENVMAP_BLENDING_MULTIPLY\";if(s.envMap){switch(n.envMap.mapping){case wt:case Mt:p=\"ENVMAP_TYPE_CUBE\";break;case Tt:case Lt:p=\"ENVMAP_TYPE_CUBE_UV\";break;case _t:case St:p=\"ENVMAP_TYPE_EQUIREC\";break;case Et:p=\"ENVMAP_TYPE_SPHERE\"}switch(n.envMap.mapping){case Mt:case St:d=\"ENVMAP_MODE_REFRACTION\"}switch(n.combine){case ut:m=\"ENVMAP_BLENDING_MULTIPLY\";break;case pt:m=\"ENVMAP_BLENDING_MIX\";break;case dt:m=\"ENVMAP_BLENDING_ADD\"}}var f,v,g,y,x,b=t.gammaFactor>0?t.gammaFactor:1,w=a.isWebGL2?\"\":function(t,e,i){return[(t=t||{}).derivatives||e.envMapCubeUV||e.bumpMap||e.normalMap&&!e.objectSpaceNormalMap||e.flatShading?\"#extension GL_OES_standard_derivatives : enable\":\"\",(t.fragDepth||e.logarithmicDepthBuffer)&&i.get(\"EXT_frag_depth\")?\"#extension GL_EXT_frag_depth : enable\":\"\",t.drawBuffers&&i.get(\"WEBGL_draw_buffers\")?\"#extension GL_EXT_draw_buffers : require\":\"\",(t.shaderTextureLOD||e.envMap)&&i.get(\"EXT_shader_texture_lod\")?\"#extension GL_EXT_shader_texture_lod : enable\":\"\"].filter(Vr).join(\"\\n\")}(n.extensions,s,e),M=function(t){var e=[];for(var i in t){var n=t[i];!1!==n&&e.push(\"#define \"+i+\" \"+n)}return e.join(\"\\n\")}(h),_=o.createProgram();if(n.isRawShaderMaterial?((f=[M].filter(Vr).join(\"\\n\")).length>0&&(f+=\"\\n\"),(v=[w,M].filter(Vr).join(\"\\n\")).length>0&&(v+=\"\\n\")):(f=[\"precision \"+s.precision+\" float;\",\"precision \"+s.precision+\" int;\",\"#define SHADER_NAME \"+r.name,M,s.supportsVertexTextures?\"#define VERTEX_TEXTURES\":\"\",\"#define GAMMA_FACTOR \"+b,\"#define MAX_BONES \"+s.maxBones,s.useFog&&s.fog?\"#define USE_FOG\":\"\",s.useFog&&s.fogExp?\"#define FOG_EXP2\":\"\",s.map?\"#define USE_MAP\":\"\",s.envMap?\"#define USE_ENVMAP\":\"\",s.envMap?\"#define \"+d:\"\",s.lightMap?\"#define USE_LIGHTMAP\":\"\",s.aoMap?\"#define USE_AOMAP\":\"\",s.emissiveMap?\"#define USE_EMISSIVEMAP\":\"\",s.bumpMap?\"#define USE_BUMPMAP\":\"\",s.normalMap?\"#define USE_NORMALMAP\":\"\",s.normalMap&&s.objectSpaceNormalMap?\"#define OBJECTSPACE_NORMALMAP\":\"\",s.displacementMap&&s.supportsVertexTextures?\"#define USE_DISPLACEMENTMAP\":\"\",s.specularMap?\"#define USE_SPECULARMAP\":\"\",s.roughnessMap?\"#define USE_ROUGHNESSMAP\":\"\",s.metalnessMap?\"#define USE_METALNESSMAP\":\"\",s.alphaMap?\"#define USE_ALPHAMAP\":\"\",s.vertexColors?\"#define USE_COLOR\":\"\",s.flatShading?\"#define FLAT_SHADED\":\"\",s.skinning?\"#define USE_SKINNING\":\"\",s.useVertexTexture?\"#define BONE_TEXTURE\":\"\",s.morphTargets?\"#define USE_MORPHTARGETS\":\"\",s.morphNormals&&!1===s.flatShading?\"#define USE_MORPHNORMALS\":\"\",s.doubleSided?\"#define DOUBLE_SIDED\":\"\",s.flipSided?\"#define FLIP_SIDED\":\"\",s.shadowMapEnabled?\"#define USE_SHADOWMAP\":\"\",s.shadowMapEnabled?\"#define \"+u:\"\",s.sizeAttenuation?\"#define USE_SIZEATTENUATION\":\"\",s.logarithmicDepthBuffer?\"#define USE_LOGDEPTHBUF\":\"\",s.logarithmicDepthBuffer&&(a.isWebGL2||e.get(\"EXT_frag_depth\"))?\"#define USE_LOGDEPTHBUF_EXT\":\"\",\"uniform mat4 modelMatrix;\",\"uniform mat4 modelViewMatrix;\",\"uniform mat4 projectionMatrix;\",\"uniform mat4 viewMatrix;\",\"uniform mat3 normalMatrix;\",\"uniform vec3 cameraPosition;\",\"attribute vec3 position;\",\"attribute vec3 normal;\",\"attribute vec2 uv;\",\"#ifdef USE_COLOR\",\"\\tattribute vec3 color;\",\"#endif\",\"#ifdef USE_MORPHTARGETS\",\"\\tattribute vec3 morphTarget0;\",\"\\tattribute vec3 morphTarget1;\",\"\\tattribute vec3 morphTarget2;\",\"\\tattribute vec3 morphTarget3;\",\"\\t#ifdef USE_MORPHNORMALS\",\"\\t\\tattribute vec3 morphNormal0;\",\"\\t\\tattribute vec3 morphNormal1;\",\"\\t\\tattribute vec3 morphNormal2;\",\"\\t\\tattribute vec3 morphNormal3;\",\"\\t#else\",\"\\t\\tattribute vec3 morphTarget4;\",\"\\t\\tattribute vec3 morphTarget5;\",\"\\t\\tattribute vec3 morphTarget6;\",\"\\t\\tattribute vec3 morphTarget7;\",\"\\t#endif\",\"#endif\",\"#ifdef USE_SKINNING\",\"\\tattribute vec4 skinIndex;\",\"\\tattribute vec4 skinWeight;\",\"#endif\",\"\\n\"].filter(Vr).join(\"\\n\"),v=[w,\"precision \"+s.precision+\" float;\",\"precision \"+s.precision+\" int;\",\"#define SHADER_NAME \"+r.name,M,s.alphaTest?\"#define ALPHATEST \"+s.alphaTest+(s.alphaTest%1?\"\":\".0\"):\"\",\"#define GAMMA_FACTOR \"+b,s.useFog&&s.fog?\"#define USE_FOG\":\"\",s.useFog&&s.fogExp?\"#define FOG_EXP2\":\"\",s.map?\"#define USE_MAP\":\"\",s.matcap?\"#define USE_MATCAP\":\"\",s.envMap?\"#define USE_ENVMAP\":\"\",s.envMap?\"#define \"+p:\"\",s.envMap?\"#define \"+d:\"\",s.envMap?\"#define \"+m:\"\",s.lightMap?\"#define USE_LIGHTMAP\":\"\",s.aoMap?\"#define USE_AOMAP\":\"\",s.emissiveMap?\"#define USE_EMISSIVEMAP\":\"\",s.bumpMap?\"#define USE_BUMPMAP\":\"\",s.normalMap?\"#define USE_NORMALMAP\":\"\",s.normalMap&&s.objectSpaceNormalMap?\"#define OBJECTSPACE_NORMALMAP\":\"\",s.specularMap?\"#define USE_SPECULARMAP\":\"\",s.roughnessMap?\"#define USE_ROUGHNESSMAP\":\"\",s.metalnessMap?\"#define USE_METALNESSMAP\":\"\",s.alphaMap?\"#define USE_ALPHAMAP\":\"\",s.vertexColors?\"#define USE_COLOR\":\"\",s.gradientMap?\"#define USE_GRADIENTMAP\":\"\",s.flatShading?\"#define FLAT_SHADED\":\"\",s.doubleSided?\"#define DOUBLE_SIDED\":\"\",s.flipSided?\"#define FLIP_SIDED\":\"\",s.shadowMapEnabled?\"#define USE_SHADOWMAP\":\"\",s.shadowMapEnabled?\"#define \"+u:\"\",s.premultipliedAlpha?\"#define PREMULTIPLIED_ALPHA\":\"\",s.physicallyCorrectLights?\"#define PHYSICALLY_CORRECT_LIGHTS\":\"\",s.logarithmicDepthBuffer?\"#define USE_LOGDEPTHBUF\":\"\",s.logarithmicDepthBuffer&&(a.isWebGL2||e.get(\"EXT_frag_depth\"))?\"#define USE_LOGDEPTHBUF_EXT\":\"\",s.envMap&&(a.isWebGL2||e.get(\"EXT_shader_texture_lod\"))?\"#define TEXTURE_LOD_EXT\":\"\",\"uniform mat4 viewMatrix;\",\"uniform vec3 cameraPosition;\",s.toneMapping!==mt?\"#define TONE_MAPPING\":\"\",s.toneMapping!==mt?bi.tonemapping_pars_fragment:\"\",s.toneMapping!==mt?Br(\"toneMapping\",s.toneMapping):\"\",s.dithering?\"#define DITHERING\":\"\",s.outputEncoding||s.mapEncoding||s.matcapEncoding||s.envMapEncoding||s.emissiveMapEncoding?bi.encodings_pars_fragment:\"\",s.mapEncoding?Dr(\"mapTexelToLinear\",s.mapEncoding):\"\",s.matcapEncoding?Dr(\"matcapTexelToLinear\",s.matcapEncoding):\"\",s.envMapEncoding?Dr(\"envMapTexelToLinear\",s.envMapEncoding):\"\",s.emissiveMapEncoding?Dr(\"emissiveMapTexelToLinear\",s.emissiveMapEncoding):\"\",s.outputEncoding?(g=\"linearToOutputTexel\",y=s.outputEncoding,x=kr(y),\"vec4 \"+g+\"( vec4 value ) { return LinearTo\"+x[0]+x[1]+\"; }\"):\"\",s.depthPacking?\"#define DEPTH_PACKING \"+n.depthPacking:\"\",\"\\n\"].filter(Vr).join(\"\\n\")),l=Fr(l=Ur(l=Hr(l),s),s),c=Fr(c=Ur(c=Hr(c),s),s),l=Gr(l),c=Gr(c),a.isWebGL2&&!n.isRawShaderMaterial){var S=!1,L=/^\\s*#version\\s+300\\s+es\\s*\\n/;n.isShaderMaterial&&null!==l.match(L)&&null!==c.match(L)&&(S=!0,l=l.replace(L,\"\"),c=c.replace(L,\"\")),f=[\"#version 300 es\\n\",\"#define attribute in\",\"#define varying out\",\"#define texture2D texture\"].join(\"\\n\")+\"\\n\"+f,v=[\"#version 300 es\\n\",\"#define varying in\",S?\"\":\"out highp vec4 pc_fragColor;\",S?\"\":\"#define gl_FragColor pc_fragColor\",\"#define gl_FragDepthEXT gl_FragDepth\",\"#define texture2D texture\",\"#define textureCube texture\",\"#define texture2DProj textureProj\",\"#define texture2DLodEXT textureLod\",\"#define texture2DProjLodEXT textureProjLod\",\"#define textureCubeLodEXT textureLod\",\"#define texture2DGradEXT textureGrad\",\"#define texture2DProjGradEXT textureProjGrad\",\"#define textureCubeGradEXT textureGrad\"].join(\"\\n\")+\"\\n\"+v}var A=v+c,P=Ir(o,35633,f+l),z=Ir(o,35632,A);o.attachShader(_,P),o.attachShader(_,z),void 0!==n.index0AttributeName?o.bindAttribLocation(_,0,n.index0AttributeName):!0===s.morphTargets&&o.bindAttribLocation(_,0,\"position\"),o.linkProgram(_);var N,R,C=o.getProgramInfoLog(_).trim(),I=o.getShaderInfoLog(P).trim(),O=o.getShaderInfoLog(z).trim(),k=!0,D=!0;return!1===o.getProgramParameter(_,35714)?(k=!1,console.error(\"THREE.WebGLProgram: shader error: \",o.getError(),\"35715\",o.getProgramParameter(_,35715),\"gl.getProgramInfoLog\",C,I,O)):\"\"!==C?console.warn(\"THREE.WebGLProgram: gl.getProgramInfoLog()\",C):\"\"!==I&&\"\"!==O||(D=!1),D&&(this.diagnostics={runnable:k,material:n,programLog:C,vertexShader:{log:I,prefix:f},fragmentShader:{log:O,prefix:v}}),o.deleteShader(P),o.deleteShader(z),this.getUniforms=function(){return void 0===N&&(N=new Cr(o,_,t)),N},this.getAttributes=function(){return void 0===R&&(R=function(t,e){for(var i={},n=t.getProgramParameter(e,35721),r=0;r<n;r++){var s=t.getActiveAttrib(e,r).name;i[s]=t.getAttribLocation(e,s)}return i}(o,_)),R},this.destroy=function(){o.deleteProgram(_),this.program=void 0},Object.defineProperties(this,{uniforms:{get:function(){return console.warn(\"THREE.WebGLProgram: .uniforms is now .getUniforms().\"),this.getUniforms()}},attributes:{get:function(){return console.warn(\"THREE.WebGLProgram: .attributes is now .getAttributes().\"),this.getAttributes()}}}),this.name=r.name,this.id=Or++,this.code=i,this.usedTimes=1,this.program=_,this.vertexShader=P,this.fragmentShader=z,this}function Wr(t,e,i){var n=[],r={MeshDepthMaterial:\"depth\",MeshDistanceMaterial:\"distanceRGBA\",MeshNormalMaterial:\"normal\",MeshBasicMaterial:\"basic\",MeshLambertMaterial:\"lambert\",MeshPhongMaterial:\"phong\",MeshToonMaterial:\"phong\",MeshStandardMaterial:\"physical\",MeshPhysicalMaterial:\"physical\",MeshMatcapMaterial:\"matcap\",LineBasicMaterial:\"basic\",LineDashedMaterial:\"dashed\",PointsMaterial:\"points\",ShadowMaterial:\"shadow\",SpriteMaterial:\"sprite\"},s=[\"precision\",\"supportsVertexTextures\",\"map\",\"mapEncoding\",\"matcap\",\"matcapEncoding\",\"envMap\",\"envMapMode\",\"envMapEncoding\",\"lightMap\",\"aoMap\",\"emissiveMap\",\"emissiveMapEncoding\",\"bumpMap\",\"normalMap\",\"objectSpaceNormalMap\",\"displacementMap\",\"specularMap\",\"roughnessMap\",\"metalnessMap\",\"gradientMap\",\"alphaMap\",\"combine\",\"vertexColors\",\"fog\",\"useFog\",\"fogExp\",\"flatShading\",\"sizeAttenuation\",\"logarithmicDepthBuffer\",\"skinning\",\"maxBones\",\"useVertexTexture\",\"morphTargets\",\"morphNormals\",\"maxMorphTargets\",\"maxMorphNormals\",\"premultipliedAlpha\",\"numDirLights\",\"numPointLights\",\"numSpotLights\",\"numHemiLights\",\"numRectAreaLights\",\"shadowMapEnabled\",\"shadowMapType\",\"toneMapping\",\"physicallyCorrectLights\",\"alphaTest\",\"doubleSided\",\"flipSided\",\"numClippingPlanes\",\"numClipIntersection\",\"depthPacking\",\"dithering\"];function a(t,e){var i;return t?t.isTexture?i=t.encoding:t.isWebGLRenderTarget&&(console.warn(\"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\"),i=t.texture.encoding):i=Ve,i===Ve&&e&&(i=Fe),i}this.getParameters=function(e,n,s,o,h,l,c){var u=r[e.type],p=c.isSkinnedMesh?function(t){var e=t.skeleton.bones;if(i.floatVertexTextures)return 1024;var n=i.maxVertexUniforms,r=Math.floor((n-20)/4),s=Math.min(r,e.length);return s<e.length?(console.warn(\"THREE.WebGLRenderer: Skeleton has \"+e.length+\" bones. This GPU supports \"+s+\".\"),0):s}(c):0,d=i.precision;null!==e.precision&&(d=i.getMaxPrecision(e.precision))!==e.precision&&console.warn(\"THREE.WebGLProgram.getParameters:\",e.precision,\"not supported, using\",d,\"instead.\");var m=t.getRenderTarget();return{shaderID:u,precision:d,supportsVertexTextures:i.vertexTextures,outputEncoding:a(m?m.texture:null,t.gammaOutput),map:!!e.map,mapEncoding:a(e.map,t.gammaInput),matcap:!!e.matcap,matcapEncoding:a(e.matcap,t.gammaInput),envMap:!!e.envMap,envMapMode:e.envMap&&e.envMap.mapping,envMapEncoding:a(e.envMap,t.gammaInput),envMapCubeUV:!!e.envMap&&(e.envMap.mapping===Tt||e.envMap.mapping===Lt),lightMap:!!e.lightMap,aoMap:!!e.aoMap,emissiveMap:!!e.emissiveMap,emissiveMapEncoding:a(e.emissiveMap,t.gammaInput),bumpMap:!!e.bumpMap,normalMap:!!e.normalMap,objectSpaceNormalMap:e.normalMapType===Ze,displacementMap:!!e.displacementMap,roughnessMap:!!e.roughnessMap,metalnessMap:!!e.metalnessMap,specularMap:!!e.specularMap,alphaMap:!!e.alphaMap,gradientMap:!!e.gradientMap,combine:e.combine,vertexColors:e.vertexColors,fog:!!o,useFog:e.fog,fogExp:o&&o.isFogExp2,flatShading:e.flatShading,sizeAttenuation:e.sizeAttenuation,logarithmicDepthBuffer:i.logarithmicDepthBuffer,skinning:e.skinning&&p>0,maxBones:p,useVertexTexture:i.floatVertexTextures,morphTargets:e.morphTargets,morphNormals:e.morphNormals,maxMorphTargets:t.maxMorphTargets,maxMorphNormals:t.maxMorphNormals,numDirLights:n.directional.length,numPointLights:n.point.length,numSpotLights:n.spot.length,numRectAreaLights:n.rectArea.length,numHemiLights:n.hemi.length,numClippingPlanes:h,numClipIntersection:l,dithering:e.dithering,shadowMapEnabled:t.shadowMap.enabled&&c.receiveShadow&&s.length>0,shadowMapType:t.shadowMap.type,toneMapping:t.toneMapping,physicallyCorrectLights:t.physicallyCorrectLights,premultipliedAlpha:e.premultipliedAlpha,alphaTest:e.alphaTest,doubleSided:e.side===P,flipSided:e.side===A,depthPacking:void 0!==e.depthPacking&&e.depthPacking}},this.getProgramCode=function(e,i){var n=[];if(i.shaderID?n.push(i.shaderID):(n.push(e.fragmentShader),n.push(e.vertexShader)),void 0!==e.defines)for(var r in e.defines)n.push(r),n.push(e.defines[r]);for(var a=0;a<s.length;a++)n.push(i[s[a]]);return n.push(e.onBeforeCompile.toString()),n.push(t.gammaOutput),n.push(t.gammaFactor),n.join()},this.acquireProgram=function(r,s,a,o){for(var h,l=0,c=n.length;l<c;l++){var u=n[l];if(u.code===o){++(h=u).usedTimes;break}}return void 0===h&&(h=new jr(t,e,o,r,s,a,i),n.push(h)),h},this.releaseProgram=function(t){if(0==--t.usedTimes){var e=n.indexOf(t);n[e]=n[n.length-1],n.pop(),t.destroy()}},this.programs=n}function qr(){var t=new WeakMap;return{get:function(e){var i=t.get(e);return void 0===i&&(i={},t.set(e,i)),i},remove:function(e){t.delete(e)},update:function(e,i,n){t.get(e)[i]=n},dispose:function(){t=new WeakMap}}}function Xr(t,e){return t.groupOrder!==e.groupOrder?t.groupOrder-e.groupOrder:t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.program&&e.program&&t.program!==e.program?t.program.id-e.program.id:t.material.id!==e.material.id?t.material.id-e.material.id:t.z!==e.z?t.z-e.z:t.id-e.id}function Yr(t,e){return t.groupOrder!==e.groupOrder?t.groupOrder-e.groupOrder:t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.z!==e.z?e.z-t.z:t.id-e.id}function Jr(){var t=[],e=0,i=[],n=[];function r(i,n,r,s,a,o){var h=t[e];return void 0===h?(h={id:i.id,object:i,geometry:n,material:r,program:r.program,groupOrder:s,renderOrder:i.renderOrder,z:a,group:o},t[e]=h):(h.id=i.id,h.object=i,h.geometry=n,h.material=r,h.program=r.program,h.groupOrder=s,h.renderOrder=i.renderOrder,h.z=a,h.group=o),e++,h}return{opaque:i,transparent:n,init:function(){e=0,i.length=0,n.length=0},push:function(t,e,s,a,o,h){var l=r(t,e,s,a,o,h);(!0===s.transparent?n:i).push(l)},unshift:function(t,e,s,a,o,h){var l=r(t,e,s,a,o,h);(!0===s.transparent?n:i).unshift(l)},sort:function(){i.length>1&&i.sort(Xr),n.length>1&&n.sort(Yr)}}}function Zr(){var t={};function e(i){var n=i.target;n.removeEventListener(\"dispose\",e),delete t[n.id]}return{get:function(i,n){var r,s=t[i.id];return void 0===s?(r=new Jr,t[i.id]={},t[i.id][n.id]=r,i.addEventListener(\"dispose\",e)):void 0===(r=s[n.id])&&(r=new Jr,s[n.id]=r),r},dispose:function(){t={}}}}function Qr(){var t={};return{get:function(e){if(void 0!==t[e.id])return t[e.id];var i;switch(e.type){case\"DirectionalLight\":i={direction:new ei,color:new Ai,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new Ke};break;case\"SpotLight\":i={position:new ei,direction:new ei,color:new Ai,distance:0,coneCos:0,penumbraCos:0,decay:0,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new Ke};break;case\"PointLight\":i={position:new ei,color:new Ai,distance:0,decay:0,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new Ke,shadowCameraNear:1,shadowCameraFar:1e3};break;case\"HemisphereLight\":i={direction:new ei,skyColor:new Ai,groundColor:new Ai};break;case\"RectAreaLight\":i={color:new Ai,position:new ei,halfWidth:new ei,halfHeight:new ei}}return t[e.id]=i,i}}}var Kr=0;function $r(){var t=new Qr,e={id:Kr++,hash:{stateID:-1,directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,shadowsLength:-1},ambient:[0,0,0],directional:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadowMap:[],spotShadowMatrix:[],rectArea:[],point:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[]},i=new ei,n=new $e,r=new $e;return{setup:function(s,a,o){for(var h=0,l=0,c=0,u=0,p=0,d=0,m=0,f=0,v=o.matrixWorldInverse,g=0,y=s.length;g<y;g++){var x=s[g],b=x.color,w=x.intensity,M=x.distance,_=x.shadow&&x.shadow.map?x.shadow.map.texture:null;if(x.isAmbientLight)h+=b.r*w,l+=b.g*w,c+=b.b*w;else if(x.isDirectionalLight){if((E=t.get(x)).color.copy(x.color).multiplyScalar(x.intensity),E.direction.setFromMatrixPosition(x.matrixWorld),i.setFromMatrixPosition(x.target.matrixWorld),E.direction.sub(i),E.direction.transformDirection(v),E.shadow=x.castShadow,x.castShadow){var S=x.shadow;E.shadowBias=S.bias,E.shadowRadius=S.radius,E.shadowMapSize=S.mapSize}e.directionalShadowMap[u]=_,e.directionalShadowMatrix[u]=x.shadow.matrix,e.directional[u]=E,u++}else if(x.isSpotLight)(E=t.get(x)).position.setFromMatrixPosition(x.matrixWorld),E.position.applyMatrix4(v),E.color.copy(b).multiplyScalar(w),E.distance=M,E.direction.setFromMatrixPosition(x.matrixWorld),i.setFromMatrixPosition(x.target.matrixWorld),E.direction.sub(i),E.direction.transformDirection(v),E.coneCos=Math.cos(x.angle),E.penumbraCos=Math.cos(x.angle*(1-x.penumbra)),E.decay=x.decay,E.shadow=x.castShadow,x.castShadow&&(S=x.shadow,E.shadowBias=S.bias,E.shadowRadius=S.radius,E.shadowMapSize=S.mapSize),e.spotShadowMap[d]=_,e.spotShadowMatrix[d]=x.shadow.matrix,e.spot[d]=E,d++;else if(x.isRectAreaLight)(E=t.get(x)).color.copy(b).multiplyScalar(w),E.position.setFromMatrixPosition(x.matrixWorld),E.position.applyMatrix4(v),r.identity(),n.copy(x.matrixWorld),n.premultiply(v),r.extractRotation(n),E.halfWidth.set(.5*x.width,0,0),E.halfHeight.set(0,.5*x.height,0),E.halfWidth.applyMatrix4(r),E.halfHeight.applyMatrix4(r),e.rectArea[m]=E,m++;else if(x.isPointLight)(E=t.get(x)).position.setFromMatrixPosition(x.matrixWorld),E.position.applyMatrix4(v),E.color.copy(x.color).multiplyScalar(x.intensity),E.distance=x.distance,E.decay=x.decay,E.shadow=x.castShadow,x.castShadow&&(S=x.shadow,E.shadowBias=S.bias,E.shadowRadius=S.radius,E.shadowMapSize=S.mapSize,E.shadowCameraNear=S.camera.near,E.shadowCameraFar=S.camera.far),e.pointShadowMap[p]=_,e.pointShadowMatrix[p]=x.shadow.matrix,e.point[p]=E,p++;else if(x.isHemisphereLight){var E;(E=t.get(x)).direction.setFromMatrixPosition(x.matrixWorld),E.direction.transformDirection(v),E.direction.normalize(),E.skyColor.copy(x.color).multiplyScalar(w),E.groundColor.copy(x.groundColor).multiplyScalar(w),e.hemi[f]=E,f++}}e.ambient[0]=h,e.ambient[1]=l,e.ambient[2]=c,e.directional.length=u,e.spot.length=d,e.rectArea.length=m,e.point.length=p,e.hemi.length=f,e.hash.stateID=e.id,e.hash.directionalLength=u,e.hash.pointLength=p,e.hash.spotLength=d,e.hash.rectAreaLength=m,e.hash.hemiLength=f,e.hash.shadowsLength=a.length},state:e}}function ts(){var t=new $r,e=[],i=[];return{init:function(){e.length=0,i.length=0},state:{lightsArray:e,shadowsArray:i,lights:t},setupLights:function(n){t.setup(e,i,n)},pushLight:function(t){e.push(t)},pushShadow:function(t){i.push(t)}}}function es(){var t={};function e(i){var n=i.target;n.removeEventListener(\"dispose\",e),delete t[n.id]}return{get:function(i,n){var r;return void 0===t[i.id]?(r=new ts,t[i.id]={},t[i.id][n.id]=r,i.addEventListener(\"dispose\",e)):void 0===t[i.id][n.id]?(r=new ts,t[i.id][n.id]=r):r=t[i.id][n.id],r},dispose:function(){t={}}}}function is(t){En.call(this),this.type=\"MeshDepthMaterial\",this.depthPacking=Xe,this.skinning=!1,this.morphTargets=!1,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.setValues(t)}function ns(t){En.call(this),this.type=\"MeshDistanceMaterial\",this.referencePosition=new ei,this.nearDistance=1,this.farDistance=1e3,this.skinning=!1,this.morphTargets=!1,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.fog=!1,this.lights=!1,this.setValues(t)}function rs(t,e,i){for(var n=new xi,r=new $e,s=new Ke,a=new Ke(i,i),o=new ei,h=new ei,l=1,c=2,u=1+(l|c),p=new Array(u),d=new Array(u),m={},f={0:A,1:L,2:P},v=[new ei(1,0,0),new ei(-1,0,0),new ei(0,0,1),new ei(0,0,-1),new ei(0,1,0),new ei(0,-1,0)],g=[new ei(0,1,0),new ei(0,1,0),new ei(0,1,0),new ei(0,1,0),new ei(0,0,1),new ei(0,0,-1)],y=[new ui,new ui,new ui,new ui,new ui,new ui],x=0;x!==u;++x){var b=0!=(x&l),w=0!=(x&c),M=new is({depthPacking:Ye,morphTargets:b,skinning:w});p[x]=M;var _=new ns({morphTargets:b,skinning:w});d[x]=_}var S=this;function T(e,i,n,r,s,a){var o=e.geometry,h=null,u=p,v=e.customDepthMaterial;if(n&&(u=d,v=e.customDistanceMaterial),v)h=v;else{var g=!1;i.morphTargets&&(o&&o.isBufferGeometry?g=o.morphAttributes&&o.morphAttributes.position&&o.morphAttributes.position.length>0:o&&o.isGeometry&&(g=o.morphTargets&&o.morphTargets.length>0)),e.isSkinnedMesh&&!1===i.skinning&&console.warn(\"THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:\",e);var y=e.isSkinnedMesh&&i.skinning,x=0;g&&(x|=l),y&&(x|=c),h=u[x]}if(t.localClippingEnabled&&!0===i.clipShadows&&0!==i.clippingPlanes.length){var b=h.uuid,w=i.uuid,M=m[b];void 0===M&&(M={},m[b]=M);var _=M[w];void 0===_&&(_=h.clone(),M[w]=_),h=_}return h.visible=i.visible,h.wireframe=i.wireframe,h.side=null!=i.shadowSide?i.shadowSide:f[i.side],h.clipShadows=i.clipShadows,h.clippingPlanes=i.clippingPlanes,h.clipIntersection=i.clipIntersection,h.wireframeLinewidth=i.wireframeLinewidth,h.linewidth=i.linewidth,n&&h.isMeshDistanceMaterial&&(h.referencePosition.copy(r),h.nearDistance=s,h.farDistance=a),h}function z(i,r,s,a){if(!1!==i.visible){if(i.layers.test(r.layers)&&(i.isMesh||i.isLine||i.isPoints)&&i.castShadow&&(!i.frustumCulled||n.intersectsObject(i))){i.modelViewMatrix.multiplyMatrices(s.matrixWorldInverse,i.matrixWorld);var o=e.update(i),l=i.material;if(Array.isArray(l))for(var c=o.groups,u=0,p=c.length;u<p;u++){var d=c[u],m=l[d.materialIndex];if(m&&m.visible){var f=T(i,m,a,h,s.near,s.far);t.renderBufferDirect(s,null,o,f,i,d)}}else if(l.visible){f=T(i,l,a,h,s.near,s.far);t.renderBufferDirect(s,null,o,f,i,null)}}for(var v=i.children,g=0,y=v.length;g<y;g++)z(v[g],r,s,a)}}this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=E,this.render=function(e,i,l){if(!1!==S.enabled&&(!1!==S.autoUpdate||!1!==S.needsUpdate)&&0!==e.length){var c,u=t.state;u.setBlending(O),u.buffers.color.setClear(1,1,1,1),u.buffers.depth.setTest(!0),u.setScissorTest(!1);for(var p=0,d=e.length;p<d;p++){var m=e[p],f=m.shadow,x=m&&m.isPointLight;if(void 0!==f){var b=f.camera;if(s.copy(f.mapSize),s.min(a),x){var w=s.x,M=s.y;y[0].set(2*w,M,w,M),y[1].set(0,M,w,M),y[2].set(3*w,M,w,M),y[3].set(w,M,w,M),y[4].set(3*w,0,w,M),y[5].set(w,0,w,M),s.x*=4,s.y*=2}if(null===f.map){var _={minFilter:Nt,magFilter:Nt,format:Qt};f.map=new pi(s.x,s.y,_),f.map.texture.name=m.name+\".shadowMap\",b.updateProjectionMatrix()}f.isSpotLightShadow&&f.update(m);var E=f.map,T=f.matrix;h.setFromMatrixPosition(m.matrixWorld),b.position.copy(h),x?(c=6,T.makeTranslation(-h.x,-h.y,-h.z)):(c=1,o.setFromMatrixPosition(m.target.matrixWorld),b.lookAt(o),b.updateMatrixWorld(),T.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),T.multiply(b.projectionMatrix),T.multiply(b.matrixWorldInverse)),t.setRenderTarget(E),t.clear();for(var L=0;L<c;L++){if(x){o.copy(b.position),o.add(v[L]),b.up.copy(g[L]),b.lookAt(o),b.updateMatrixWorld();var A=y[L];u.viewport(A)}r.multiplyMatrices(b.projectionMatrix,b.matrixWorldInverse),n.setFromMatrix(r),z(i,l,b,x)}}else console.warn(\"THREE.WebGLShadowMap:\",m,\"has no shadow.\")}S.needsUpdate=!1}}}function ss(t,e,i,n){var r=new function(){var e=!1,i=new ui,n=null,r=new ui(0,0,0,0);return{setMask:function(i){n===i||e||(t.colorMask(i,i,i,i),n=i)},setLocked:function(t){e=t},setClear:function(e,n,s,a,o){!0===o&&(e*=a,n*=a,s*=a),i.set(e,n,s,a),!1===r.equals(i)&&(t.clearColor(e,n,s,a),r.copy(i))},reset:function(){e=!1,n=null,r.set(-1,0,0,0)}}},s=new function(){var e=!1,i=null,n=null,r=null;return{setTest:function(t){t?Q(2929):K(2929)},setMask:function(n){i===n||e||(t.depthMask(n),i=n)},setFunc:function(e){if(n!==e){if(e)switch(e){case nt:t.depthFunc(512);break;case rt:t.depthFunc(519);break;case st:t.depthFunc(513);break;case at:t.depthFunc(515);break;case ot:t.depthFunc(514);break;case ht:t.depthFunc(518);break;case lt:t.depthFunc(516);break;case ct:t.depthFunc(517);break;default:t.depthFunc(515)}else t.depthFunc(515);n=e}},setLocked:function(t){e=t},setClear:function(e){r!==e&&(t.clearDepth(e),r=e)},reset:function(){e=!1,i=null,n=null,r=null}}},a=new function(){var e=!1,i=null,n=null,r=null,s=null,a=null,o=null,h=null,l=null;return{setTest:function(t){t?Q(2960):K(2960)},setMask:function(n){i===n||e||(t.stencilMask(n),i=n)},setFunc:function(e,i,a){n===e&&r===i&&s===a||(t.stencilFunc(e,i,a),n=e,r=i,s=a)},setOp:function(e,i,n){a===e&&o===i&&h===n||(t.stencilOp(e,i,n),a=e,o=i,h=n)},setLocked:function(t){e=t},setClear:function(e){l!==e&&(t.clearStencil(e),l=e)},reset:function(){e=!1,i=null,n=null,r=null,s=null,a=null,o=null,h=null,l=null}}},o=t.getParameter(34921),h=new Uint8Array(o),l=new Uint8Array(o),c=new Uint8Array(o),u={},p=null,d=null,m=null,f=null,v=null,g=null,w=null,M=null,_=null,S=null,E=!1,T=null,L=null,z=null,N=null,R=null,C=t.getParameter(35661),I=!1,H=0,G=t.getParameter(7938);-1!==G.indexOf(\"WebGL\")?(H=parseFloat(/^WebGL\\ ([0-9])/.exec(G)[1]),I=H>=1):-1!==G.indexOf(\"OpenGL ES\")&&(H=parseFloat(/^OpenGL\\ ES\\ ([0-9])/.exec(G)[1]),I=H>=2);var j=null,W={},q=new ui,X=new ui;function Y(e,i,n){var r=new Uint8Array(4),s=t.createTexture();t.bindTexture(e,s),t.texParameteri(e,10241,9728),t.texParameteri(e,10240,9728);for(var a=0;a<n;a++)t.texImage2D(i+a,0,6408,1,1,0,6408,5121,r);return s}var J={};function Z(i,r){(h[i]=1,0===l[i]&&(t.enableVertexAttribArray(i),l[i]=1),c[i]!==r)&&((n.isWebGL2?t:e.get(\"ANGLE_instanced_arrays\"))[n.isWebGL2?\"vertexAttribDivisor\":\"vertexAttribDivisorANGLE\"](i,r),c[i]=r)}function Q(e){!0!==u[e]&&(t.enable(e),u[e]=!0)}function K(e){!1!==u[e]&&(t.disable(e),u[e]=!1)}function $(e,n,r,s,a,o,h,l){if(e!==O){if(m||(Q(3042),m=!0),e===U)a=a||n,o=o||r,h=h||s,n===v&&a===M||(t.blendEquationSeparate(i.convert(n),i.convert(a)),v=n,M=a),r===g&&s===w&&o===_&&h===S||(t.blendFuncSeparate(i.convert(r),i.convert(s),i.convert(o),i.convert(h)),g=r,w=s,_=o,S=h),f=e,E=null;else if(e!==f||l!==E){if(v===F&&M===F||(t.blendEquation(32774),v=F,M=F),l)switch(e){case k:t.blendFuncSeparate(1,771,1,771);break;case D:t.blendFunc(1,1);break;case B:t.blendFuncSeparate(0,0,769,771);break;case V:t.blendFuncSeparate(0,768,0,770);break;default:console.error(\"THREE.WebGLState: Invalid blending: \",e)}else switch(e){case k:t.blendFuncSeparate(770,771,1,771);break;case D:t.blendFunc(770,1);break;case B:t.blendFunc(0,769);break;case V:t.blendFunc(0,768);break;default:console.error(\"THREE.WebGLState: Invalid blending: \",e)}g=null,w=null,_=null,S=null,f=e,E=l}}else m&&(K(3042),m=!1)}function tt(e){T!==e&&(e?t.frontFace(2304):t.frontFace(2305),T=e)}function et(e){e!==y?(Q(2884),e!==L&&(e===x?t.cullFace(1029):e===b?t.cullFace(1028):t.cullFace(1032))):K(2884),L=e}function it(e,i,n){e?(Q(32823),N===i&&R===n||(t.polygonOffset(i,n),N=i,R=n)):K(32823)}function ut(e){void 0===e&&(e=33984+C-1),j!==e&&(t.activeTexture(e),j=e)}return J[3553]=Y(3553,3553,1),J[34067]=Y(34067,34069,6),r.setClear(0,0,0,1),s.setClear(1),a.setClear(0),Q(2929),s.setFunc(at),tt(!1),et(x),Q(2884),$(O),{buffers:{color:r,depth:s,stencil:a},initAttributes:function(){for(var t=0,e=h.length;t<e;t++)h[t]=0},enableAttribute:function(t){Z(t,0)},enableAttributeAndDivisor:Z,disableUnusedAttributes:function(){for(var e=0,i=l.length;e!==i;++e)l[e]!==h[e]&&(t.disableVertexAttribArray(e),l[e]=0)},enable:Q,disable:K,getCompressedTextureFormats:function(){if(null===p&&(p=[],e.get(\"WEBGL_compressed_texture_pvrtc\")||e.get(\"WEBGL_compressed_texture_s3tc\")||e.get(\"WEBGL_compressed_texture_etc1\")||e.get(\"WEBGL_compressed_texture_astc\")))for(var i=t.getParameter(34467),n=0;n<i.length;n++)p.push(i[n]);return p},useProgram:function(e){return d!==e&&(t.useProgram(e),d=e,!0)},setBlending:$,setMaterial:function(t,e){t.side===P?K(2884):Q(2884);var i=t.side===A;e&&(i=!i),tt(i),t.blending===k&&!1===t.transparent?$(O):$(t.blending,t.blendEquation,t.blendSrc,t.blendDst,t.blendEquationAlpha,t.blendSrcAlpha,t.blendDstAlpha,t.premultipliedAlpha),s.setFunc(t.depthFunc),s.setTest(t.depthTest),s.setMask(t.depthWrite),r.setMask(t.colorWrite),it(t.polygonOffset,t.polygonOffsetFactor,t.polygonOffsetUnits)},setFlipSided:tt,setCullFace:et,setLineWidth:function(e){e!==z&&(I&&t.lineWidth(e),z=e)},setPolygonOffset:it,setScissorTest:function(t){t?Q(3089):K(3089)},activeTexture:ut,bindTexture:function(e,i){null===j&&ut();var n=W[j];void 0===n&&(n={type:void 0,texture:void 0},W[j]=n),n.type===e&&n.texture===i||(t.bindTexture(e,i||J[e]),n.type=e,n.texture=i)},compressedTexImage2D:function(){try{t.compressedTexImage2D.apply(t,arguments)}catch(t){console.error(\"THREE.WebGLState:\",t)}},texImage2D:function(){try{t.texImage2D.apply(t,arguments)}catch(t){console.error(\"THREE.WebGLState:\",t)}},texImage3D:function(){try{t.texImage3D.apply(t,arguments)}catch(t){console.error(\"THREE.WebGLState:\",t)}},scissor:function(e){!1===q.equals(e)&&(t.scissor(e.x,e.y,e.z,e.w),q.copy(e))},viewport:function(e){!1===X.equals(e)&&(t.viewport(e.x,e.y,e.z,e.w),X.copy(e))},reset:function(){for(var e=0;e<l.length;e++)1===l[e]&&(t.disableVertexAttribArray(e),l[e]=0);u={},p=null,j=null,W={},d=null,f=null,T=null,L=null,r.reset(),s.reset(),a.reset()}}}function as(t,e,i,n,r,s,a){var o,h={};function l(t,e,i,n){var r=1;if((t.width>n||t.height>n)&&(r=n/Math.max(t.width,t.height)),r<1||!0===e){if(t instanceof HTMLImageElement||t instanceof HTMLCanvasElement||t instanceof ImageBitmap){void 0===o&&(o=document.createElementNS(\"http://www.w3.org/1999/xhtml\",\"canvas\"));var s=i?document.createElementNS(\"http://www.w3.org/1999/xhtml\",\"canvas\"):o,a=e?Qe.floorPowerOfTwo:Math.floor;return s.width=a(r*t.width),s.height=a(r*t.height),s.getContext(\"2d\").drawImage(t,0,0,s.width,s.height),console.warn(\"THREE.WebGLRenderer: Texture has been resized from (\"+t.width+\"x\"+t.height+\") to (\"+s.width+\"x\"+s.height+\").\"),s}return\"data\"in t&&console.warn(\"THREE.WebGLRenderer: Image in DataTexture is too big (\"+t.width+\"x\"+t.height+\").\"),t}return t}function c(t){return Qe.isPowerOfTwo(t.width)&&Qe.isPowerOfTwo(t.height)}function u(t,e){return t.generateMipmaps&&e&&t.minFilter!==Nt&&t.minFilter!==It}function p(e,i,r,s){t.generateMipmap(e),n.get(i).__maxMipLevel=Math.log(Math.max(r,s))*Math.LOG2E}function d(t,i){if(!r.isWebGL2)return t;var n=t;return 6403===t&&(5126===i&&(n=33326),5131===i&&(n=33325),5121===i&&(n=33321)),6407===t&&(5126===i&&(n=34837),5131===i&&(n=34843),5121===i&&(n=32849)),6408===t&&(5126===i&&(n=34836),5131===i&&(n=34842),5121===i&&(n=32856)),33325===n||33326===n||34842===n||34836===n?e.get(\"EXT_color_buffer_float\"):34843!==n&&34837!==n||console.warn(\"THREE.WebGLRenderer: Floating point textures with RGB format not supported. Please use RGBA instead.\"),n}function m(t){return t===Nt||t===Rt||t===Ct?9728:9729}function f(e){var i=e.target;i.removeEventListener(\"dispose\",f),function(e){var i=n.get(e);if(e.image&&i.__image__webglTextureCube)t.deleteTexture(i.__image__webglTextureCube);else{if(void 0===i.__webglInit)return;t.deleteTexture(i.__webglTexture)}n.remove(e)}(i),i.isVideoTexture&&delete h[i.id],a.memory.textures--}function v(e){var i=e.target;i.removeEventListener(\"dispose\",v),function(e){var i=n.get(e),r=n.get(e.texture);if(!e)return;void 0!==r.__webglTexture&&t.deleteTexture(r.__webglTexture);e.depthTexture&&e.depthTexture.dispose();if(e.isWebGLRenderTargetCube)for(var s=0;s<6;s++)t.deleteFramebuffer(i.__webglFramebuffer[s]),i.__webglDepthbuffer&&t.deleteRenderbuffer(i.__webglDepthbuffer[s]);else t.deleteFramebuffer(i.__webglFramebuffer),i.__webglDepthbuffer&&t.deleteRenderbuffer(i.__webglDepthbuffer);n.remove(e.texture),n.remove(e)}(i),a.memory.textures--}function g(t,e){var r=n.get(t);if(t.isVideoTexture&&function(t){var e=t.id,i=a.render.frame;h[e]!==i&&(h[e]=i,t.update())}(t),t.version>0&&r.__version!==t.version){var s=t.image;if(void 0===s)console.warn(\"THREE.WebGLRenderer: Texture marked for update but image is undefined\");else{if(!1!==s.complete)return void x(r,t,e);console.warn(\"THREE.WebGLRenderer: Texture marked for update but image is incomplete\")}}i.activeTexture(33984+e),i.bindTexture(3553,r.__webglTexture)}function y(i,a,o){var h;if(o?(t.texParameteri(i,10242,s.convert(a.wrapS)),t.texParameteri(i,10243,s.convert(a.wrapT)),t.texParameteri(i,10240,s.convert(a.magFilter)),t.texParameteri(i,10241,s.convert(a.minFilter))):(t.texParameteri(i,10242,33071),t.texParameteri(i,10243,33071),a.wrapS===Pt&&a.wrapT===Pt||console.warn(\"THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.\"),t.texParameteri(i,10240,m(a.magFilter)),t.texParameteri(i,10241,m(a.minFilter)),a.minFilter!==Nt&&a.minFilter!==It&&console.warn(\"THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.\")),h=e.get(\"EXT_texture_filter_anisotropic\")){if(a.type===Gt&&null===e.get(\"OES_texture_float_linear\"))return;if(a.type===jt&&null===(r.isWebGL2||e.get(\"OES_texture_half_float_linear\")))return;(a.anisotropy>1||n.get(a).__currentAnisotropy)&&(t.texParameterf(i,h.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(a.anisotropy,r.getMaxAnisotropy())),n.get(a).__currentAnisotropy=a.anisotropy)}}function x(e,n,o){var h;h=n.isDataTexture3D?32879:3553,void 0===e.__webglInit&&(e.__webglInit=!0,n.addEventListener(\"dispose\",f),e.__webglTexture=t.createTexture(),a.memory.textures++),i.activeTexture(33984+o),i.bindTexture(h,e.__webglTexture),t.pixelStorei(37440,n.flipY),t.pixelStorei(37441,n.premultiplyAlpha),t.pixelStorei(3317,n.unpackAlignment);var m=function(t){return!r.isWebGL2&&(t.wrapS!==Pt||t.wrapT!==Pt||t.minFilter!==Nt&&t.minFilter!==It)}(n)&&!1===c(n.image),v=l(n.image,m,!1,r.maxTextureSize),g=c(v)||r.isWebGL2,x=s.convert(n.format),b=s.convert(n.type),w=d(x,b);y(h,n,g);var M,_=n.mipmaps;if(n.isDepthTexture){if(w=6402,n.type===Gt){if(!r.isWebGL2)throw new Error(\"Float Depth Texture only supported in WebGL2.0\");w=36012}else r.isWebGL2&&(w=33189);n.format===ee&&6402===w&&n.type!==Ut&&n.type!==Ht&&(console.warn(\"THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.\"),n.type=Ut,b=s.convert(n.type)),n.format===ie&&(w=34041,n.type!==Yt&&(console.warn(\"THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.\"),n.type=Yt,b=s.convert(n.type))),i.texImage2D(3553,0,w,v.width,v.height,0,x,b,null)}else if(n.isDataTexture)if(_.length>0&&g){for(var S=0,E=_.length;S<E;S++)M=_[S],i.texImage2D(3553,S,w,M.width,M.height,0,x,b,M.data);n.generateMipmaps=!1,e.__maxMipLevel=_.length-1}else i.texImage2D(3553,0,w,v.width,v.height,0,x,b,v.data),e.__maxMipLevel=0;else if(n.isCompressedTexture){for(S=0,E=_.length;S<E;S++)M=_[S],n.format!==Qt&&n.format!==Zt?i.getCompressedTextureFormats().indexOf(x)>-1?i.compressedTexImage2D(3553,S,w,M.width,M.height,0,M.data):console.warn(\"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()\"):i.texImage2D(3553,S,w,M.width,M.height,0,x,b,M.data);e.__maxMipLevel=_.length-1}else if(n.isDataTexture3D)i.texImage3D(32879,0,w,v.width,v.height,v.depth,0,x,b,v.data),e.__maxMipLevel=0;else if(_.length>0&&g){for(S=0,E=_.length;S<E;S++)M=_[S],i.texImage2D(3553,S,w,x,b,M);n.generateMipmaps=!1,e.__maxMipLevel=_.length-1}else i.texImage2D(3553,0,w,x,b,v),e.__maxMipLevel=0;u(n,g)&&p(3553,n,v.width,v.height),e.__version=n.version,n.onUpdate&&n.onUpdate(n)}function b(e,r,a,o){var h=s.convert(r.texture.format),l=s.convert(r.texture.type),c=d(h,l);i.texImage2D(o,0,c,r.width,r.height,0,h,l,null),t.bindFramebuffer(36160,e),t.framebufferTexture2D(36160,a,o,n.get(r.texture).__webglTexture,0),t.bindFramebuffer(36160,null)}function w(e,i,n){if(t.bindRenderbuffer(36161,e),i.depthBuffer&&!i.stencilBuffer){if(n){var r=_(i);t.renderbufferStorageMultisample(36161,r,33189,i.width,i.height)}else t.renderbufferStorage(36161,33189,i.width,i.height);t.framebufferRenderbuffer(36160,36096,36161,e)}else if(i.depthBuffer&&i.stencilBuffer){if(n){r=_(i);t.renderbufferStorageMultisample(36161,r,34041,i.width,i.height)}else t.renderbufferStorage(36161,34041,i.width,i.height);t.framebufferRenderbuffer(36160,33306,36161,e)}else{var a=d(s.convert(i.texture.format),s.convert(i.texture.type));if(n){r=_(i);t.renderbufferStorageMultisample(36161,r,a,i.width,i.height)}else t.renderbufferStorage(36161,a,i.width,i.height)}t.bindRenderbuffer(36161,null)}function M(e){var i=n.get(e),r=!0===e.isWebGLRenderTargetCube;if(e.depthTexture){if(r)throw new Error(\"target.depthTexture not supported in Cube render targets\");!function(e,i){if(i&&i.isWebGLRenderTargetCube)throw new Error(\"Depth Texture with cube render targets is not supported\");if(t.bindFramebuffer(36160,e),!i.depthTexture||!i.depthTexture.isDepthTexture)throw new Error(\"renderTarget.depthTexture must be an instance of THREE.DepthTexture\");n.get(i.depthTexture).__webglTexture&&i.depthTexture.image.width===i.width&&i.depthTexture.image.height===i.height||(i.depthTexture.image.width=i.width,i.depthTexture.image.height=i.height,i.depthTexture.needsUpdate=!0),g(i.depthTexture,0);var r=n.get(i.depthTexture).__webglTexture;if(i.depthTexture.format===ee)t.framebufferTexture2D(36160,36096,3553,r,0);else{if(i.depthTexture.format!==ie)throw new Error(\"Unknown depthTexture format\");t.framebufferTexture2D(36160,33306,3553,r,0)}}(i.__webglFramebuffer,e)}else if(r){i.__webglDepthbuffer=[];for(var s=0;s<6;s++)t.bindFramebuffer(36160,i.__webglFramebuffer[s]),i.__webglDepthbuffer[s]=t.createRenderbuffer(),w(i.__webglDepthbuffer[s],e)}else t.bindFramebuffer(36160,i.__webglFramebuffer),i.__webglDepthbuffer=t.createRenderbuffer(),w(i.__webglDepthbuffer,e);t.bindFramebuffer(36160,null)}function _(t){return r.isWebGL2&&t.isWebGLMultisampleRenderTarget?Math.min(r.maxSamples,t.samples):0}this.setTexture2D=g,this.setTexture3D=function(t,e){var r=n.get(t);t.version>0&&r.__version!==t.version?x(r,t,e):(i.activeTexture(33984+e),i.bindTexture(32879,r.__webglTexture))},this.setTextureCube=function(e,o){var h=n.get(e);if(6===e.image.length)if(e.version>0&&h.__version!==e.version){h.__image__webglTextureCube||(e.addEventListener(\"dispose\",f),h.__image__webglTextureCube=t.createTexture(),a.memory.textures++),i.activeTexture(33984+o),i.bindTexture(34067,h.__image__webglTextureCube),t.pixelStorei(37440,e.flipY);for(var m=e&&e.isCompressedTexture,v=e.image[0]&&e.image[0].isDataTexture,g=[],x=0;x<6;x++)g[x]=m||v?v?e.image[x].image:e.image[x]:l(e.image[x],!1,!0,r.maxCubemapSize);var b=g[0],w=c(b)||r.isWebGL2,M=s.convert(e.format),_=s.convert(e.type),S=d(M,_);for(y(34067,e,w),x=0;x<6;x++)if(m)for(var E,T=g[x].mipmaps,L=0,A=T.length;L<A;L++)E=T[L],e.format!==Qt&&e.format!==Zt?i.getCompressedTextureFormats().indexOf(M)>-1?i.compressedTexImage2D(34069+x,L,S,E.width,E.height,0,E.data):console.warn(\"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()\"):i.texImage2D(34069+x,L,S,E.width,E.height,0,M,_,E.data);else v?i.texImage2D(34069+x,0,S,g[x].width,g[x].height,0,M,_,g[x].data):i.texImage2D(34069+x,0,S,M,_,g[x]);h.__maxMipLevel=m?T.length-1:0,u(e,w)&&p(34067,e,b.width,b.height),h.__version=e.version,e.onUpdate&&e.onUpdate(e)}else i.activeTexture(33984+o),i.bindTexture(34067,h.__image__webglTextureCube)},this.setTextureCubeDynamic=function(t,e){i.activeTexture(33984+e),i.bindTexture(34067,n.get(t).__webglTexture)},this.setupRenderTarget=function(e){var o=n.get(e),h=n.get(e.texture);e.addEventListener(\"dispose\",v),h.__webglTexture=t.createTexture(),a.memory.textures++;var l=!0===e.isWebGLRenderTargetCube,m=!0===e.isWebGLMultisampleRenderTarget,f=c(e)||r.isWebGL2;if(l){o.__webglFramebuffer=[];for(var g=0;g<6;g++)o.__webglFramebuffer[g]=t.createFramebuffer()}else if(o.__webglFramebuffer=t.createFramebuffer(),m)if(r.isWebGL2){o.__webglMultisampledFramebuffer=t.createFramebuffer(),o.__webglColorRenderbuffer=t.createRenderbuffer(),t.bindRenderbuffer(36161,o.__webglColorRenderbuffer);var x=d(s.convert(e.texture.format),s.convert(e.texture.type)),S=_(e);t.renderbufferStorageMultisample(36161,S,x,e.width,e.height),t.bindFramebuffer(36160,o.__webglMultisampledFramebuffer),t.framebufferRenderbuffer(36160,36064,36161,o.__webglColorRenderbuffer),t.bindRenderbuffer(36161,null),e.depthBuffer&&(o.__webglDepthRenderbuffer=t.createRenderbuffer(),w(o.__webglDepthRenderbuffer,e,!0)),t.bindFramebuffer(36160,null)}else console.warn(\"THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.\");if(l){for(i.bindTexture(34067,h.__webglTexture),y(34067,e.texture,f),g=0;g<6;g++)b(o.__webglFramebuffer[g],e,36064,34069+g);u(e.texture,f)&&p(34067,e.texture,e.width,e.height),i.bindTexture(34067,null)}else i.bindTexture(3553,h.__webglTexture),y(3553,e.texture,f),b(o.__webglFramebuffer,e,36064,3553),u(e.texture,f)&&p(3553,e.texture,e.width,e.height),i.bindTexture(3553,null);e.depthBuffer&&M(e)},this.updateRenderTargetMipmap=function(t){var e=t.texture;if(u(e,c(t)||r.isWebGL2)){var s=t.isWebGLRenderTargetCube?34067:3553,a=n.get(e).__webglTexture;i.bindTexture(s,a),p(s,e,t.width,t.height),i.bindTexture(s,null)}},this.updateMultisampleRenderTarget=function(e){if(e.isWebGLMultisampleRenderTarget)if(r.isWebGL2){var i=n.get(e);t.bindFramebuffer(36008,i.__webglMultisampledFramebuffer),t.bindFramebuffer(36009,i.__webglFramebuffer);var s=e.width,a=e.height,o=16384;e.depthBuffer&&(o|=256),e.stencilBuffer&&(o|=1024),t.blitFramebuffer(0,0,s,a,0,0,s,a,o,9728)}else console.warn(\"THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.\")}}function os(t,e,i){return{convert:function(t){var n;if(t===At)return 10497;if(t===Pt)return 33071;if(t===zt)return 33648;if(t===Nt)return 9728;if(t===Rt)return 9984;if(t===Ct)return 9986;if(t===It)return 9729;if(t===Ot)return 9985;if(t===kt)return 9987;if(t===Dt)return 5121;if(t===Wt)return 32819;if(t===qt)return 32820;if(t===Xt)return 33635;if(t===Bt)return 5120;if(t===Vt)return 5122;if(t===Ut)return 5123;if(t===Ft)return 5124;if(t===Ht)return 5125;if(t===Gt)return 5126;if(t===jt){if(i.isWebGL2)return 5131;if(null!==(n=e.get(\"OES_texture_half_float\")))return n.HALF_FLOAT_OES}if(t===Jt)return 6406;if(t===Zt)return 6407;if(t===Qt)return 6408;if(t===Kt)return 6409;if(t===$t)return 6410;if(t===ee)return 6402;if(t===ie)return 34041;if(t===ne)return 6403;if(t===F)return 32774;if(t===H)return 32778;if(t===G)return 32779;if(t===q)return 0;if(t===X)return 1;if(t===Y)return 768;if(t===J)return 769;if(t===Z)return 770;if(t===Q)return 771;if(t===K)return 772;if(t===$)return 773;if(t===tt)return 774;if(t===et)return 775;if(t===it)return 776;if((t===re||t===se||t===ae||t===oe)&&null!==(n=e.get(\"WEBGL_compressed_texture_s3tc\"))){if(t===re)return n.COMPRESSED_RGB_S3TC_DXT1_EXT;if(t===se)return n.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(t===ae)return n.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(t===oe)return n.COMPRESSED_RGBA_S3TC_DXT5_EXT}if((t===he||t===le||t===ce||t===ue)&&null!==(n=e.get(\"WEBGL_compressed_texture_pvrtc\"))){if(t===he)return n.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(t===le)return n.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(t===ce)return n.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(t===ue)return n.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(t===pe&&null!==(n=e.get(\"WEBGL_compressed_texture_etc1\")))return n.COMPRESSED_RGB_ETC1_WEBGL;if((t===de||t===me||t===fe||t===ve||t===ge||t===ye||t===xe||t===be||t===we||t===Me||t===_e||t===Se||t===Ee||t===Te)&&null!==(n=e.get(\"WEBGL_compressed_texture_astc\")))return t;if(t===j||t===W){if(i.isWebGL2){if(t===j)return 32775;if(t===W)return 32776}if(null!==(n=e.get(\"EXT_blend_minmax\"))){if(t===j)return n.MIN_EXT;if(t===W)return n.MAX_EXT}}if(t===Yt){if(i.isWebGL2)return 34042;if(null!==(n=e.get(\"WEBGL_depth_texture\")))return n.UNSIGNED_INT_24_8_WEBGL}return 0}}}function hs(){Hi.call(this),this.type=\"Group\"}function ls(){Hi.call(this),this.type=\"Camera\",this.matrixWorldInverse=new $e,this.projectionMatrix=new $e,this.projectionMatrixInverse=new $e}function cs(t,e,i,n){ls.call(this),this.type=\"PerspectiveCamera\",this.fov=void 0!==t?t:50,this.zoom=1,this.near=void 0!==i?i:.1,this.far=void 0!==n?n:2e3,this.focus=10,this.aspect=void 0!==e?e:1,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}function us(t){cs.call(this),this.cameras=t||[]}is.prototype=Object.create(En.prototype),is.prototype.constructor=is,is.prototype.isMeshDepthMaterial=!0,is.prototype.copy=function(t){return En.prototype.copy.call(this,t),this.depthPacking=t.depthPacking,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this},ns.prototype=Object.create(En.prototype),ns.prototype.constructor=ns,ns.prototype.isMeshDistanceMaterial=!0,ns.prototype.copy=function(t){return En.prototype.copy.call(this,t),this.referencePosition.copy(t.referencePosition),this.nearDistance=t.nearDistance,this.farDistance=t.farDistance,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this},hs.prototype=Object.assign(Object.create(Hi.prototype),{constructor:hs,isGroup:!0}),ls.prototype=Object.assign(Object.create(Hi.prototype),{constructor:ls,isCamera:!0,copy:function(t,e){return Hi.prototype.copy.call(this,t,e),this.matrixWorldInverse.copy(t.matrixWorldInverse),this.projectionMatrix.copy(t.projectionMatrix),this.projectionMatrixInverse.copy(t.projectionMatrixInverse),this},getWorldDirection:function(t){void 0===t&&(console.warn(\"THREE.Camera: .getWorldDirection() target is now required\"),t=new ei),this.updateMatrixWorld(!0);var e=this.matrixWorld.elements;return t.set(-e[8],-e[9],-e[10]).normalize()},updateMatrixWorld:function(t){Hi.prototype.updateMatrixWorld.call(this,t),this.matrixWorldInverse.getInverse(this.matrixWorld)},clone:function(){return(new this.constructor).copy(this)}}),cs.prototype=Object.assign(Object.create(ls.prototype),{constructor:cs,isPerspectiveCamera:!0,copy:function(t,e){return ls.prototype.copy.call(this,t,e),this.fov=t.fov,this.zoom=t.zoom,this.near=t.near,this.far=t.far,this.focus=t.focus,this.aspect=t.aspect,this.view=null===t.view?null:Object.assign({},t.view),this.filmGauge=t.filmGauge,this.filmOffset=t.filmOffset,this},setFocalLength:function(t){var e=.5*this.getFilmHeight()/t;this.fov=2*Qe.RAD2DEG*Math.atan(e),this.updateProjectionMatrix()},getFocalLength:function(){var t=Math.tan(.5*Qe.DEG2RAD*this.fov);return.5*this.getFilmHeight()/t},getEffectiveFOV:function(){return 2*Qe.RAD2DEG*Math.atan(Math.tan(.5*Qe.DEG2RAD*this.fov)/this.zoom)},getFilmWidth:function(){return this.filmGauge*Math.min(this.aspect,1)},getFilmHeight:function(){return this.filmGauge/Math.max(this.aspect,1)},setViewOffset:function(t,e,i,n,r,s){this.aspect=t/e,null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=i,this.view.offsetY=n,this.view.width=r,this.view.height=s,this.updateProjectionMatrix()},clearViewOffset:function(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()},updateProjectionMatrix:function(){var t=this.near,e=t*Math.tan(.5*Qe.DEG2RAD*this.fov)/this.zoom,i=2*e,n=this.aspect*i,r=-.5*n,s=this.view;if(null!==this.view&&this.view.enabled){var a=s.fullWidth,o=s.fullHeight;r+=s.offsetX*n/a,e-=s.offsetY*i/o,n*=s.width/a,i*=s.height/o}var h=this.filmOffset;0!==h&&(r+=t*h/this.getFilmWidth()),this.projectionMatrix.makePerspective(r,r+n,e,e-i,t,this.far),this.projectionMatrixInverse.getInverse(this.projectionMatrix)},toJSON:function(t){var e=Hi.prototype.toJSON.call(this,t);return e.object.fov=this.fov,e.object.zoom=this.zoom,e.object.near=this.near,e.object.far=this.far,e.object.focus=this.focus,e.object.aspect=this.aspect,null!==this.view&&(e.object.view=Object.assign({},this.view)),e.object.filmGauge=this.filmGauge,e.object.filmOffset=this.filmOffset,e}}),us.prototype=Object.assign(Object.create(cs.prototype),{constructor:us,isArrayCamera:!0});var ps,ds,ms,fs,vs,gs,ys=new ei,xs=new ei;function bs(t,e,i){ys.setFromMatrixPosition(e.matrixWorld),xs.setFromMatrixPosition(i.matrixWorld);var n=ys.distanceTo(xs),r=e.projectionMatrix.elements,s=i.projectionMatrix.elements,a=r[14]/(r[10]-1),o=r[14]/(r[10]+1),h=(r[9]+1)/r[5],l=(r[9]-1)/r[5],c=(r[8]-1)/r[0],u=(s[8]+1)/s[0],p=a*c,d=a*u,m=n/(-c+u),f=m*-c;e.matrixWorld.decompose(t.position,t.quaternion,t.scale),t.translateX(f),t.translateZ(m),t.matrixWorld.compose(t.position,t.quaternion,t.scale),t.matrixWorldInverse.getInverse(t.matrixWorld);var v=a+m,g=o+m,y=p-f,x=d+(n-f),b=h*o/g*v,w=l*o/g*v;t.projectionMatrix.makePerspective(y,x,b,w,v,g)}function ws(t){var e=this,i=null,n=null,r=null,s=[],a=new $e,o=new $e,h=1,l=\"stage\";\"undefined\"!=typeof window&&\"VRFrameData\"in window&&(n=new window.VRFrameData,window.addEventListener(\"vrdisplaypresentchange\",x,!1));var c=new $e,u=new ti,p=new ei,d=new cs;d.bounds=new ui(0,0,.5,1),d.layers.enable(1);var m=new cs;m.bounds=new ui(.5,0,.5,1),m.layers.enable(2);var f,v,g=new us([d,m]);function y(){return null!==i&&!0===i.isPresenting}function x(){if(y()){var n=i.getEyeParameters(\"left\"),r=n.renderWidth*h,s=n.renderHeight*h;v=t.getPixelRatio(),f=t.getSize(),t.setDrawingBufferSize(2*r,s,1),M.start()}else e.enabled&&t.setDrawingBufferSize(f.width,f.height,v),M.stop()}g.layers.enable(1),g.layers.enable(2);var b=[];function w(t){for(var e=navigator.getGamepads&&navigator.getGamepads(),i=0,n=0,r=e.length;i<r;i++){var s=e[i];if(s&&(\"Daydream Controller\"===s.id||\"Gear VR Controller\"===s.id||\"Oculus Go Controller\"===s.id||\"OpenVR Gamepad\"===s.id||s.id.startsWith(\"Oculus Touch\")||s.id.startsWith(\"Spatial Controller\"))){if(n===t)return s;n++}}}this.enabled=!1,this.getController=function(t){var e=s[t];return void 0===e&&((e=new hs).matrixAutoUpdate=!1,e.visible=!1,s[t]=e),e},this.getDevice=function(){return i},this.setDevice=function(t){void 0!==t&&(i=t),M.setContext(t)},this.setFramebufferScaleFactor=function(t){h=t},this.setFrameOfReferenceType=function(t){l=t},this.setPoseTarget=function(t){void 0!==t&&(r=t)},this.getCamera=function(t){var e=\"stage\"===l?1.6:0;if(null===i)return t.position.set(0,e,0),t;if(i.depthNear=t.near,i.depthFar=t.far,i.getFrameData(n),\"stage\"===l){var h=i.stageParameters;h?a.fromArray(h.sittingToStandingTransform):a.makeTranslation(0,e,0)}var f=n.pose,v=null!==r?r:t;if(v.matrix.copy(a),v.matrix.decompose(v.position,v.quaternion,v.scale),null!==f.orientation&&(u.fromArray(f.orientation),v.quaternion.multiply(u)),null!==f.position&&(u.setFromRotationMatrix(a),p.fromArray(f.position),p.applyQuaternion(u),v.position.add(p)),v.updateMatrixWorld(),!1===i.isPresenting)return t;d.near=t.near,m.near=t.near,d.far=t.far,m.far=t.far,d.matrixWorldInverse.fromArray(n.leftViewMatrix),m.matrixWorldInverse.fromArray(n.rightViewMatrix),o.getInverse(a),\"stage\"===l&&(d.matrixWorldInverse.multiply(o),m.matrixWorldInverse.multiply(o));var y=v.parent;null!==y&&(c.getInverse(y.matrixWorld),d.matrixWorldInverse.multiply(c),m.matrixWorldInverse.multiply(c)),d.matrixWorld.getInverse(d.matrixWorldInverse),m.matrixWorld.getInverse(m.matrixWorldInverse),d.projectionMatrix.fromArray(n.leftProjectionMatrix),m.projectionMatrix.fromArray(n.rightProjectionMatrix),bs(g,d,m);var x=i.getLayers();if(x.length){var M=x[0];null!==M.leftBounds&&4===M.leftBounds.length&&d.bounds.fromArray(M.leftBounds),null!==M.rightBounds&&4===M.rightBounds.length&&m.bounds.fromArray(M.rightBounds)}return function(){for(var t=0;t<s.length;t++){var e=s[t],i=w(t);if(void 0!==i&&void 0!==i.pose){if(null===i.pose)return;var n=i.pose;!1===n.hasPosition&&e.position.set(.2,-.6,-.05),null!==n.position&&e.position.fromArray(n.position),null!==n.orientation&&e.quaternion.fromArray(n.orientation),e.matrix.compose(e.position,e.quaternion,e.scale),e.matrix.premultiply(a),e.matrix.decompose(e.position,e.quaternion,e.scale),e.matrixWorldNeedsUpdate=!0,e.visible=!0;var r=\"Daydream Controller\"===i.id?0:1;b[t]!==i.buttons[r].pressed&&(b[t]=i.buttons[r].pressed,!0===b[t]?e.dispatchEvent({type:\"selectstart\"}):(e.dispatchEvent({type:\"selectend\"}),e.dispatchEvent({type:\"select\"})))}else e.visible=!1}}(),g},this.getStandingMatrix=function(){return a},this.isPresenting=y;var M=new Ri;this.setAnimationLoop=function(t){M.setAnimationLoop(t)},this.submitFrame=function(){y()&&i.submitFrame()},this.dispose=function(){\"undefined\"!=typeof window&&window.removeEventListener(\"vrdisplaypresentchange\",x)}}function Ms(t){var e=t.context,i=null,n=null,r=1,s=null,a=\"stage\",o=null,h=[],l=[];function c(){return null!==n&&null!==s}var u=new cs;u.layers.enable(1),u.viewport=new ui;var p=new cs;p.layers.enable(2),p.viewport=new ui;var d=new us([u,p]);function m(t){var e=h[l.indexOf(t.inputSource)];e&&e.dispatchEvent({type:t.type})}function f(){t.setFramebuffer(null),y.stop()}function v(t,e){null===e?t.matrixWorld.copy(t.matrix):t.matrixWorld.multiplyMatrices(e.matrixWorld,t.matrix),t.matrixWorldInverse.getInverse(t.matrixWorld)}d.layers.enable(1),d.layers.enable(2),this.enabled=!1,this.getController=function(t){var e=h[t];return void 0===e&&((e=new hs).matrixAutoUpdate=!1,e.visible=!1,h[t]=e),e},this.getDevice=function(){return i},this.setDevice=function(t){void 0!==t&&(i=t),t instanceof XRDevice&&e.setCompatibleXRDevice(t)},this.setFramebufferScaleFactor=function(t){r=t},this.setFrameOfReferenceType=function(t){a=t},this.setSession=function(i){null!==(n=i)&&(n.addEventListener(\"select\",m),n.addEventListener(\"selectstart\",m),n.addEventListener(\"selectend\",m),n.addEventListener(\"end\",f),n.baseLayer=new XRWebGLLayer(n,e,{framebufferScaleFactor:r}),n.requestFrameOfReference(a).then(function(e){s=e,t.setFramebuffer(n.baseLayer.framebuffer),y.setContext(n),y.start()}),l=n.getInputSources(),n.addEventListener(\"inputsourceschange\",function(){l=n.getInputSources(),console.log(l);for(var t=0;t<h.length;t++){h[t].userData.inputSource=l[t]}}))},this.getCamera=function(t){if(c()){var e=t.parent,i=d.cameras;v(d,e);for(var n=0;n<i.length;n++)v(i[n],e);t.matrixWorld.copy(d.matrixWorld);for(var r=t.children,s=(n=0,r.length);n<s;n++)r[n].updateMatrixWorld(!0);return bs(d,u,p),d}return t},this.isPresenting=c;var g=null;var y=new Ri;y.setAnimationLoop(function(t,e){if(null!==(o=e.getDevicePose(s)))for(var i=n.baseLayer,r=e.views,a=0;a<r.length;a++){var c=r[a],u=i.getViewport(c),p=o.getViewMatrix(c),m=d.cameras[a];m.matrix.fromArray(p).getInverse(m.matrix),m.projectionMatrix.fromArray(c.projectionMatrix),m.viewport.set(u.x,u.y,u.width,u.height),0===a&&d.matrix.copy(m.matrix)}for(a=0;a<h.length;a++){var f=h[a],v=l[a];if(v){var y=e.getInputPose(v,s);if(null!==y){\"targetRay\"in y?f.matrix.elements=y.targetRay.transformMatrix:\"pointerMatrix\"in y&&(f.matrix.elements=y.pointerMatrix),f.matrix.decompose(f.position,f.rotation,f.scale),f.visible=!0;continue}}f.visible=!1}g&&g(t)}),this.setAnimationLoop=function(t){g=t},this.dispose=function(){},this.getStandingMatrix=function(){return console.warn(\"THREE.WebXRManager: getStandingMatrix() is no longer needed.\"),new THREE.Matrix4},this.submitFrame=function(){}}function _s(t){console.log(\"THREE.WebGLRenderer\",v);var e=void 0!==(t=t||{}).canvas?t.canvas:document.createElementNS(\"http://www.w3.org/1999/xhtml\",\"canvas\"),i=void 0!==t.context?t.context:null,n=void 0!==t.alpha&&t.alpha,r=void 0===t.depth||t.depth,s=void 0===t.stencil||t.stencil,a=void 0!==t.antialias&&t.antialias,o=void 0===t.premultipliedAlpha||t.premultipliedAlpha,h=void 0!==t.preserveDrawingBuffer&&t.preserveDrawingBuffer,l=void 0!==t.powerPreference?t.powerPreference:\"default\",c=null,u=null;this.domElement=e,this.context=null,this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.gammaFactor=2,this.gammaInput=!1,this.gammaOutput=!1,this.physicallyCorrectLights=!1,this.toneMapping=ft,this.toneMappingExposure=1,this.toneMappingWhitePoint=1,this.maxMorphTargets=8,this.maxMorphNormals=4;var p,d,m,f,g,y,x,b,w,M,_,S,E,T,L,P,z,N,R=this,C=!1,I=null,O=null,k=null,D=-1,B={geometry:null,program:null,wireframe:!1},V=null,U=null,F=new ui,H=new ui,G=null,j=0,W=e.width,q=e.height,X=1,Y=new ui(0,0,W,q),J=new ui(0,0,W,q),Z=!1,Q=new xi,K=new In,$=!1,tt=!1,et=new $e,it=new ei;function nt(){return null===O?X:1}try{var rt={alpha:n,depth:r,stencil:s,antialias:a,premultipliedAlpha:o,preserveDrawingBuffer:h,powerPreference:l};if(e.addEventListener(\"webglcontextlost\",ht,!1),e.addEventListener(\"webglcontextrestored\",lt,!1),null===(p=i||e.getContext(\"webgl\",rt)||e.getContext(\"experimental-webgl\",rt)))throw null!==e.getContext(\"webgl\")?new Error(\"Error creating WebGL context with your selected attributes.\"):new Error(\"Error creating WebGL context.\");void 0===p.getShaderPrecisionFormat&&(p.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(t){console.error(\"THREE.WebGLRenderer: \"+t.message)}function st(){d=new On(p),(m=new Cn(p,d,t)).isWebGL2||(d.get(\"WEBGL_depth_texture\"),d.get(\"OES_texture_float\"),d.get(\"OES_texture_half_float\"),d.get(\"OES_texture_half_float_linear\"),d.get(\"OES_standard_derivatives\"),d.get(\"OES_element_index_uint\"),d.get(\"ANGLE_instanced_arrays\")),d.get(\"OES_texture_float_linear\"),N=new os(p,d,m),(f=new ss(p,d,N,m)).scissor(H.copy(J).multiplyScalar(X)),f.viewport(F.copy(Y).multiplyScalar(X)),g=new Bn(p),y=new qr,x=new as(p,d,f,y,m,N,g),b=new Ci(p),w=new kn(p,b,g),M=new Fn(w,g),L=new Un(p),_=new Wr(R,d,m),S=new Zr,E=new es,T=new Nn(R,f,M,o),P=new Rn(p,d,g,m),z=new Dn(p,d,g,m),g.programs=_.programs,R.context=p,R.capabilities=m,R.extensions=d,R.properties=y,R.renderLists=S,R.state=f,R.info=g}st();var at=null;\"undefined\"!=typeof navigator&&(at=\"xr\"in navigator?new Ms(R):new ws(R)),this.vr=at;var ot=new rs(R,M,m.maxTextureSize);function ht(t){t.preventDefault(),console.log(\"THREE.WebGLRenderer: Context Lost.\"),C=!0}function lt(){console.log(\"THREE.WebGLRenderer: Context Restored.\"),C=!1,st()}function ct(t){var e=t.target;e.removeEventListener(\"dispose\",ct),function(t){ut(t),y.remove(t)}(e)}function ut(t){var e=y.get(t).program;t.program=void 0,void 0!==e&&_.releaseProgram(e)}this.shadowMap=ot,this.getContext=function(){return p},this.getContextAttributes=function(){return p.getContextAttributes()},this.forceContextLoss=function(){var t=d.get(\"WEBGL_lose_context\");t&&t.loseContext()},this.forceContextRestore=function(){var t=d.get(\"WEBGL_lose_context\");t&&t.restoreContext()},this.getPixelRatio=function(){return X},this.setPixelRatio=function(t){void 0!==t&&(X=t,this.setSize(W,q,!1))},this.getSize=function(){return{width:W,height:q}},this.setSize=function(t,i,n){at.isPresenting()?console.warn(\"THREE.WebGLRenderer: Can't change size while VR device is presenting.\"):(W=t,q=i,e.width=t*X,e.height=i*X,!1!==n&&(e.style.width=t+\"px\",e.style.height=i+\"px\"),this.setViewport(0,0,t,i))},this.getDrawingBufferSize=function(){return{width:W*X,height:q*X}},this.setDrawingBufferSize=function(t,i,n){W=t,q=i,X=n,e.width=t*n,e.height=i*n,this.setViewport(0,0,t,i)},this.getCurrentViewport=function(){return F},this.setViewport=function(t,e,i,n){Y.set(t,q-e-n,i,n),f.viewport(F.copy(Y).multiplyScalar(X))},this.setScissor=function(t,e,i,n){J.set(t,q-e-n,i,n),f.scissor(H.copy(J).multiplyScalar(X))},this.setScissorTest=function(t){f.setScissorTest(Z=t)},this.getClearColor=function(){return T.getClearColor()},this.setClearColor=function(){T.setClearColor.apply(T,arguments)},this.getClearAlpha=function(){return T.getClearAlpha()},this.setClearAlpha=function(){T.setClearAlpha.apply(T,arguments)},this.clear=function(t,e,i){var n=0;(void 0===t||t)&&(n|=16384),(void 0===e||e)&&(n|=256),(void 0===i||i)&&(n|=1024),p.clear(n)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){e.removeEventListener(\"webglcontextlost\",ht,!1),e.removeEventListener(\"webglcontextrestored\",lt,!1),S.dispose(),E.dispose(),y.dispose(),M.dispose(),at.dispose(),mt.stop()},this.renderBufferImmediate=function(t,e){f.initAttributes();var i=y.get(t);t.hasPositions&&!i.position&&(i.position=p.createBuffer()),t.hasNormals&&!i.normal&&(i.normal=p.createBuffer()),t.hasUvs&&!i.uv&&(i.uv=p.createBuffer()),t.hasColors&&!i.color&&(i.color=p.createBuffer());var n=e.getAttributes();t.hasPositions&&(p.bindBuffer(34962,i.position),p.bufferData(34962,t.positionArray,35048),f.enableAttribute(n.position),p.vertexAttribPointer(n.position,3,5126,!1,0,0)),t.hasNormals&&(p.bindBuffer(34962,i.normal),p.bufferData(34962,t.normalArray,35048),f.enableAttribute(n.normal),p.vertexAttribPointer(n.normal,3,5126,!1,0,0)),t.hasUvs&&(p.bindBuffer(34962,i.uv),p.bufferData(34962,t.uvArray,35048),f.enableAttribute(n.uv),p.vertexAttribPointer(n.uv,2,5126,!1,0,0)),t.hasColors&&(p.bindBuffer(34962,i.color),p.bufferData(34962,t.colorArray,35048),f.enableAttribute(n.color),p.vertexAttribPointer(n.color,3,5126,!1,0,0)),f.disableUnusedAttributes(),p.drawArrays(4,0,t.count),t.count=0},this.renderBufferDirect=function(t,e,i,n,r,s){var a=r.isMesh&&r.normalMatrix.determinant()<0;f.setMaterial(n,a);var o=xt(t,e,n,r),h=!1;B.geometry===i.id&&B.program===o.id&&B.wireframe===(!0===n.wireframe)||(B.geometry=i.id,B.program=o.id,B.wireframe=!0===n.wireframe,h=!0),r.morphTargetInfluences&&(L.update(r,i,n,o),h=!0);var l,c=i.index,u=i.attributes.position,v=1;!0===n.wireframe&&(c=w.getWireframeAttribute(i),v=2);var g=P;null!==c&&(l=b.get(c),(g=z).setIndex(l)),h&&(!function(t,e,i){if(i&&i.isInstancedBufferGeometry&!m.isWebGL2&&null===d.get(\"ANGLE_instanced_arrays\"))return void console.error(\"THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.\");f.initAttributes();var n=i.attributes,r=e.getAttributes(),s=t.defaultAttributeValues;for(var a in r){var o=r[a];if(o>=0){var h=n[a];if(void 0!==h){var l=h.normalized,c=h.itemSize,u=b.get(h);if(void 0===u)continue;var v=u.buffer,g=u.type,y=u.bytesPerElement;if(h.isInterleavedBufferAttribute){var x=h.data,w=x.stride,M=h.offset;x&&x.isInstancedInterleavedBuffer?(f.enableAttributeAndDivisor(o,x.meshPerAttribute),void 0===i.maxInstancedCount&&(i.maxInstancedCount=x.meshPerAttribute*x.count)):f.enableAttribute(o),p.bindBuffer(34962,v),p.vertexAttribPointer(o,c,g,l,w*y,M*y)}else h.isInstancedBufferAttribute?(f.enableAttributeAndDivisor(o,h.meshPerAttribute),void 0===i.maxInstancedCount&&(i.maxInstancedCount=h.meshPerAttribute*h.count)):f.enableAttribute(o),p.bindBuffer(34962,v),p.vertexAttribPointer(o,c,g,l,0,0)}else if(void 0!==s){var _=s[a];if(void 0!==_)switch(_.length){case 2:p.vertexAttrib2fv(o,_);break;case 3:p.vertexAttrib3fv(o,_);break;case 4:p.vertexAttrib4fv(o,_);break;default:p.vertexAttrib1fv(o,_)}}}}f.disableUnusedAttributes()}(n,o,i),null!==c&&p.bindBuffer(34963,l.buffer));var y=1/0;null!==c?y=c.count:void 0!==u&&(y=u.count);var x=i.drawRange.start*v,M=i.drawRange.count*v,_=null!==s?s.start*v:0,S=null!==s?s.count*v:1/0,E=Math.max(x,_),T=Math.min(y,x+M,_+S)-1,A=Math.max(0,T-E+1);if(0!==A){if(r.isMesh)if(!0===n.wireframe)f.setLineWidth(n.wireframeLinewidth*nt()),g.setMode(1);else switch(r.drawMode){case ke:g.setMode(4);break;case De:g.setMode(5);break;case Be:g.setMode(6)}else if(r.isLine){var N=n.linewidth;void 0===N&&(N=1),f.setLineWidth(N*nt()),r.isLineSegments?g.setMode(1):r.isLineLoop?g.setMode(2):g.setMode(3)}else r.isPoints?g.setMode(0):r.isSprite&&g.setMode(4);i&&i.isInstancedBufferGeometry?i.maxInstancedCount>0&&g.renderInstances(i,E,A):g.render(E,A)}},this.compile=function(t,e){(u=E.get(t,e)).init(),t.traverse(function(t){t.isLight&&(u.pushLight(t),t.castShadow&&u.pushShadow(t))}),u.setupLights(e),t.traverse(function(e){if(e.material)if(Array.isArray(e.material))for(var i=0;i<e.material.length;i++)yt(e.material[i],t.fog,e);else yt(e.material,t.fog,e)})};var pt=null;var dt,mt=new Ri;function vt(t,e,i,n){for(var r=0,s=t.length;r<s;r++){var a=t[r],o=a.object,h=a.geometry,l=void 0===n?a.material:n,c=a.group;if(i.isArrayCamera){U=i;for(var p=i.cameras,d=0,m=p.length;d<m;d++){var v=p[d];if(o.layers.test(v.layers)){if(\"viewport\"in v)f.viewport(F.copy(v.viewport));else{var g=v.bounds,y=g.x*W,x=g.y*q,b=g.z*W,w=g.w*q;f.viewport(F.set(y,x,b,w).multiplyScalar(X))}u.setupLights(v),gt(o,e,v,h,l,c)}}}else U=null,gt(o,e,i,h,l,c)}}function gt(t,e,i,n,r,s){if(t.onBeforeRender(R,e,i,n,r,s),u=E.get(e,U||i),t.modelViewMatrix.multiplyMatrices(i.matrixWorldInverse,t.matrixWorld),t.normalMatrix.getNormalMatrix(t.modelViewMatrix),t.isImmediateRenderObject){f.setMaterial(r);var a=xt(i,e.fog,r,t);B.geometry=null,B.program=null,B.wireframe=!1,function(t,e){t.render(function(t){R.renderBufferImmediate(t,e)})}(t,a)}else R.renderBufferDirect(i,e.fog,n,r,t,s);t.onAfterRender(R,e,i,n,r,s),u=E.get(e,U||i)}function yt(t,e,i){var n=y.get(t),r=u.state.lights,s=u.state.shadowsArray,a=n.lightsHash,o=r.state.hash,h=_.getParameters(t,r.state,s,e,K.numPlanes,K.numIntersection,i),l=_.getProgramCode(t,h),c=n.program,p=!0;if(void 0===c)t.addEventListener(\"dispose\",ct);else if(c.code!==l)ut(t);else if(a.stateID!==o.stateID||a.directionalLength!==o.directionalLength||a.pointLength!==o.pointLength||a.spotLength!==o.spotLength||a.rectAreaLength!==o.rectAreaLength||a.hemiLength!==o.hemiLength||a.shadowsLength!==o.shadowsLength)a.stateID=o.stateID,a.directionalLength=o.directionalLength,a.pointLength=o.pointLength,a.spotLength=o.spotLength,a.rectAreaLength=o.rectAreaLength,a.hemiLength=o.hemiLength,a.shadowsLength=o.shadowsLength,p=!1;else{if(void 0!==h.shaderID)return;p=!1}if(p){if(h.shaderID){var d=Ni[h.shaderID];n.shader={name:t.type,uniforms:wi(d.uniforms),vertexShader:d.vertexShader,fragmentShader:d.fragmentShader}}else n.shader={name:t.type,uniforms:t.uniforms,vertexShader:t.vertexShader,fragmentShader:t.fragmentShader};t.onBeforeCompile(n.shader,R),l=_.getProgramCode(t,h),c=_.acquireProgram(t,n.shader,h,l),n.program=c,t.program=c}var m=c.getAttributes();if(t.morphTargets){t.numSupportedMorphTargets=0;for(var f=0;f<R.maxMorphTargets;f++)m[\"morphTarget\"+f]>=0&&t.numSupportedMorphTargets++}if(t.morphNormals){t.numSupportedMorphNormals=0;for(f=0;f<R.maxMorphNormals;f++)m[\"morphNormal\"+f]>=0&&t.numSupportedMorphNormals++}var v=n.shader.uniforms;(t.isShaderMaterial||t.isRawShaderMaterial)&&!0!==t.clipping||(n.numClippingPlanes=K.numPlanes,n.numIntersection=K.numIntersection,v.clippingPlanes=K.uniform),n.fog=e,void 0===a&&(n.lightsHash=a={}),a.stateID=o.stateID,a.directionalLength=o.directionalLength,a.pointLength=o.pointLength,a.spotLength=o.spotLength,a.rectAreaLength=o.rectAreaLength,a.hemiLength=o.hemiLength,a.shadowsLength=o.shadowsLength,t.lights&&(v.ambientLightColor.value=r.state.ambient,v.directionalLights.value=r.state.directional,v.spotLights.value=r.state.spot,v.rectAreaLights.value=r.state.rectArea,v.pointLights.value=r.state.point,v.hemisphereLights.value=r.state.hemi,v.directionalShadowMap.value=r.state.directionalShadowMap,v.directionalShadowMatrix.value=r.state.directionalShadowMatrix,v.spotShadowMap.value=r.state.spotShadowMap,v.spotShadowMatrix.value=r.state.spotShadowMatrix,v.pointShadowMap.value=r.state.pointShadowMap,v.pointShadowMatrix.value=r.state.pointShadowMatrix);var g=n.program.getUniforms(),x=Cr.seqWithValue(g.seq,v);n.uniformsList=x}function xt(t,e,i,n){j=0;var r=y.get(i),s=u.state.lights,a=r.lightsHash,o=s.state.hash;if($&&(tt||t!==V)){var h=t===V&&i.id===D;K.setState(i.clippingPlanes,i.clipIntersection,i.clipShadows,t,r,h)}!1===i.needsUpdate&&(void 0===r.program?i.needsUpdate=!0:i.fog&&r.fog!==e?i.needsUpdate=!0:(!i.lights||a.stateID===o.stateID&&a.directionalLength===o.directionalLength&&a.pointLength===o.pointLength&&a.spotLength===o.spotLength&&a.rectAreaLength===o.rectAreaLength&&a.hemiLength===o.hemiLength&&a.shadowsLength===o.shadowsLength)&&(void 0===r.numClippingPlanes||r.numClippingPlanes===K.numPlanes&&r.numIntersection===K.numIntersection)||(i.needsUpdate=!0)),i.needsUpdate&&(yt(i,e,n),i.needsUpdate=!1);var l,c,d=!1,v=!1,g=!1,x=r.program,b=x.getUniforms(),w=r.shader.uniforms;if(f.useProgram(x.program)&&(d=!0,v=!0,g=!0),i.id!==D&&(D=i.id,v=!0),d||V!==t){if(b.setValue(p,\"projectionMatrix\",t.projectionMatrix),m.logarithmicDepthBuffer&&b.setValue(p,\"logDepthBufFC\",2/(Math.log(t.far+1)/Math.LN2)),V!==t&&(V=t,v=!0,g=!0),i.isShaderMaterial||i.isMeshPhongMaterial||i.isMeshStandardMaterial||i.envMap){var M=b.map.cameraPosition;void 0!==M&&M.setValue(p,it.setFromMatrixPosition(t.matrixWorld))}(i.isMeshPhongMaterial||i.isMeshLambertMaterial||i.isMeshBasicMaterial||i.isMeshStandardMaterial||i.isShaderMaterial||i.skinning)&&b.setValue(p,\"viewMatrix\",t.matrixWorldInverse)}if(i.skinning){b.setOptional(p,n,\"bindMatrix\"),b.setOptional(p,n,\"bindMatrixInverse\");var _=n.skeleton;if(_){var S=_.bones;if(m.floatVertexTextures){if(void 0===_.boneTexture){var E=Math.sqrt(4*S.length);E=Qe.ceilPowerOfTwo(E),E=Math.max(E,4);var T=new Float32Array(E*E*4);T.set(_.boneMatrices);var L=new fi(T,E,E,Qt,Gt);L.needsUpdate=!0,_.boneMatrices=T,_.boneTexture=L,_.boneTextureSize=E}b.setValue(p,\"boneTexture\",_.boneTexture),b.setValue(p,\"boneTextureSize\",_.boneTextureSize)}else b.setOptional(p,_,\"boneMatrices\")}}return v&&(b.setValue(p,\"toneMappingExposure\",R.toneMappingExposure),b.setValue(p,\"toneMappingWhitePoint\",R.toneMappingWhitePoint),i.lights&&(c=g,(l=w).ambientLightColor.needsUpdate=c,l.directionalLights.needsUpdate=c,l.pointLights.needsUpdate=c,l.spotLights.needsUpdate=c,l.rectAreaLights.needsUpdate=c,l.hemisphereLights.needsUpdate=c),e&&i.fog&&function(t,e){t.fogColor.value=e.color,e.isFog?(t.fogNear.value=e.near,t.fogFar.value=e.far):e.isFogExp2&&(t.fogDensity.value=e.density)}(w,e),i.isMeshBasicMaterial?bt(w,i):i.isMeshLambertMaterial?(bt(w,i),function(t,e){e.emissiveMap&&(t.emissiveMap.value=e.emissiveMap)}(w,i)):i.isMeshPhongMaterial?(bt(w,i),i.isMeshToonMaterial?function(t,e){wt(t,e),e.gradientMap&&(t.gradientMap.value=e.gradientMap)}(w,i):wt(w,i)):i.isMeshStandardMaterial?(bt(w,i),i.isMeshPhysicalMaterial?function(t,e){Mt(t,e),t.reflectivity.value=e.reflectivity,t.clearCoat.value=e.clearCoat,t.clearCoatRoughness.value=e.clearCoatRoughness}(w,i):Mt(w,i)):i.isMeshMatcapMaterial?(bt(w,i),function(t,e){e.matcap&&(t.matcap.value=e.matcap);e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,e.side===A&&(t.bumpScale.value*=-1));e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),e.side===A&&t.normalScale.value.negate());e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(w,i)):i.isMeshDepthMaterial?(bt(w,i),function(t,e){e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(w,i)):i.isMeshDistanceMaterial?(bt(w,i),function(t,e){e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias);t.referencePosition.value.copy(e.referencePosition),t.nearDistance.value=e.nearDistance,t.farDistance.value=e.farDistance}(w,i)):i.isMeshNormalMaterial?(bt(w,i),function(t,e){e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,e.side===A&&(t.bumpScale.value*=-1));e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),e.side===A&&t.normalScale.value.negate());e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(w,i)):i.isLineBasicMaterial?(function(t,e){t.diffuse.value=e.color,t.opacity.value=e.opacity}(w,i),i.isLineDashedMaterial&&function(t,e){t.dashSize.value=e.dashSize,t.totalSize.value=e.dashSize+e.gapSize,t.scale.value=e.scale}(w,i)):i.isPointsMaterial?function(t,e){t.diffuse.value=e.color,t.opacity.value=e.opacity,t.size.value=e.size*X,t.scale.value=.5*q,t.map.value=e.map,null!==e.map&&(!0===e.map.matrixAutoUpdate&&e.map.updateMatrix(),t.uvTransform.value.copy(e.map.matrix))}(w,i):i.isSpriteMaterial?function(t,e){t.diffuse.value=e.color,t.opacity.value=e.opacity,t.rotation.value=e.rotation,t.map.value=e.map,null!==e.map&&(!0===e.map.matrixAutoUpdate&&e.map.updateMatrix(),t.uvTransform.value.copy(e.map.matrix))}(w,i):i.isShadowMaterial&&(w.color.value=i.color,w.opacity.value=i.opacity),void 0!==w.ltc_1&&(w.ltc_1.value=zi.LTC_1),void 0!==w.ltc_2&&(w.ltc_2.value=zi.LTC_2),Cr.upload(p,r.uniformsList,w,R)),i.isShaderMaterial&&!0===i.uniformsNeedUpdate&&(Cr.upload(p,r.uniformsList,w,R),i.uniformsNeedUpdate=!1),i.isSpriteMaterial&&b.setValue(p,\"center\",n.center),b.setValue(p,\"modelViewMatrix\",n.modelViewMatrix),b.setValue(p,\"normalMatrix\",n.normalMatrix),b.setValue(p,\"modelMatrix\",n.matrixWorld),x}function bt(t,e){var i;t.opacity.value=e.opacity,e.color&&(t.diffuse.value=e.color),e.emissive&&t.emissive.value.copy(e.emissive).multiplyScalar(e.emissiveIntensity),e.map&&(t.map.value=e.map),e.alphaMap&&(t.alphaMap.value=e.alphaMap),e.specularMap&&(t.specularMap.value=e.specularMap),e.envMap&&(t.envMap.value=e.envMap,t.flipEnvMap.value=e.envMap.isCubeTexture?-1:1,t.reflectivity.value=e.reflectivity,t.refractionRatio.value=e.refractionRatio,t.maxMipLevel.value=y.get(e.envMap).__maxMipLevel),e.lightMap&&(t.lightMap.value=e.lightMap,t.lightMapIntensity.value=e.lightMapIntensity),e.aoMap&&(t.aoMap.value=e.aoMap,t.aoMapIntensity.value=e.aoMapIntensity),e.map?i=e.map:e.specularMap?i=e.specularMap:e.displacementMap?i=e.displacementMap:e.normalMap?i=e.normalMap:e.bumpMap?i=e.bumpMap:e.roughnessMap?i=e.roughnessMap:e.metalnessMap?i=e.metalnessMap:e.alphaMap?i=e.alphaMap:e.emissiveMap&&(i=e.emissiveMap),void 0!==i&&(i.isWebGLRenderTarget&&(i=i.texture),!0===i.matrixAutoUpdate&&i.updateMatrix(),t.uvTransform.value.copy(i.matrix))}function wt(t,e){t.specular.value=e.specular,t.shininess.value=Math.max(e.shininess,1e-4),e.emissiveMap&&(t.emissiveMap.value=e.emissiveMap),e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,e.side===A&&(t.bumpScale.value*=-1)),e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),e.side===A&&t.normalScale.value.negate()),e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}function Mt(t,e){t.roughness.value=e.roughness,t.metalness.value=e.metalness,e.roughnessMap&&(t.roughnessMap.value=e.roughnessMap),e.metalnessMap&&(t.metalnessMap.value=e.metalnessMap),e.emissiveMap&&(t.emissiveMap.value=e.emissiveMap),e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,e.side===A&&(t.bumpScale.value*=-1)),e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),e.side===A&&t.normalScale.value.negate()),e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias),e.envMap&&(t.envMapIntensity.value=e.envMapIntensity)}mt.setAnimationLoop(function(t){at.isPresenting()||pt&&pt(t)}),\"undefined\"!=typeof window&&mt.setContext(window),this.setAnimationLoop=function(t){pt=t,at.setAnimationLoop(t),mt.start()},this.render=function(t,e,i,n){if(e&&e.isCamera){if(!C){B.geometry=null,B.program=null,B.wireframe=!1,D=-1,V=null,!0===t.autoUpdate&&t.updateMatrixWorld(),null===e.parent&&e.updateMatrixWorld(),at.enabled&&(e=at.getCamera(e)),(u=E.get(t,e)).init(),t.onBeforeRender(R,t,e,i),et.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),Q.setFromMatrix(et),tt=this.localClippingEnabled,$=K.init(this.clippingPlanes,tt,e),(c=S.get(t,e)).init(),function t(e,i,n,r){if(!1===e.visible)return;var s=e.layers.test(i.layers);if(s)if(e.isGroup)n=e.renderOrder;else if(e.isLight)u.pushLight(e),e.castShadow&&u.pushShadow(e);else if(e.isSprite){if(!e.frustumCulled||Q.intersectsSprite(e)){r&&it.setFromMatrixPosition(e.matrixWorld).applyMatrix4(et);var a=M.update(e),o=e.material;c.push(e,a,o,n,it.z,null)}}else if(e.isImmediateRenderObject)r&&it.setFromMatrixPosition(e.matrixWorld).applyMatrix4(et),c.push(e,null,e.material,n,it.z,null);else if((e.isMesh||e.isLine||e.isPoints)&&(e.isSkinnedMesh&&e.skeleton.update(),!e.frustumCulled||Q.intersectsObject(e))){r&&it.setFromMatrixPosition(e.matrixWorld).applyMatrix4(et);var a=M.update(e),o=e.material;if(Array.isArray(o))for(var h=a.groups,l=0,p=h.length;l<p;l++){var d=h[l],m=o[d.materialIndex];m&&m.visible&&c.push(e,a,m,n,it.z,d)}else o.visible&&c.push(e,a,o,n,it.z,null)}var f=e.children;for(var l=0,p=f.length;l<p;l++)t(f[l],i,n,r)}(t,e,0,R.sortObjects),!0===R.sortObjects&&c.sort(),$&&K.beginShadows();var r=u.state.shadowsArray;ot.render(r,t,e),u.setupLights(e),$&&K.endShadows(),this.info.autoReset&&this.info.reset(),void 0===i&&(i=null),this.setRenderTarget(i),T.render(c,t,e,n);var s=c.opaque,a=c.transparent;if(t.overrideMaterial){var o=t.overrideMaterial;s.length&&vt(s,t,e,o),a.length&&vt(a,t,e,o)}else s.length&&vt(s,t,e),a.length&&vt(a,t,e);i&&(x.updateRenderTargetMipmap(i),x.updateMultisampleRenderTarget(i)),f.buffers.depth.setTest(!0),f.buffers.depth.setMask(!0),f.buffers.color.setMask(!0),f.setPolygonOffset(!1),t.onAfterRender(R,t,e),at.enabled&&at.submitFrame(),c=null,u=null}}else console.error(\"THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.\")},this.allocTextureUnit=function(){var t=j;return t>=m.maxTextures&&console.warn(\"THREE.WebGLRenderer: Trying to use \"+t+\" texture units while this GPU supports only \"+m.maxTextures),j+=1,t},this.setTexture2D=(dt=!1,function(t,e){t&&t.isWebGLRenderTarget&&(dt||(console.warn(\"THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead.\"),dt=!0),t=t.texture),x.setTexture2D(t,e)}),this.setTexture3D=function(t,e){x.setTexture3D(t,e)},this.setTexture=function(){var t=!1;return function(e,i){t||(console.warn(\"THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead.\"),t=!0),x.setTexture2D(e,i)}}(),this.setTextureCube=function(){var t=!1;return function(e,i){e&&e.isWebGLRenderTargetCube&&(t||(console.warn(\"THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead.\"),t=!0),e=e.texture),e&&e.isCubeTexture||Array.isArray(e.image)&&6===e.image.length?x.setTextureCube(e,i):x.setTextureCubeDynamic(e,i)}}(),this.setFramebuffer=function(t){I=t},this.getRenderTarget=function(){return O},this.setRenderTarget=function(t){O=t,t&&void 0===y.get(t).__webglFramebuffer&&x.setupRenderTarget(t);var e=I,i=!1;if(t){var n=y.get(t).__webglFramebuffer;t.isWebGLRenderTargetCube?(e=n[t.activeCubeFace],i=!0):e=t.isWebGLMultisampleRenderTarget?y.get(t).__webglMultisampledFramebuffer:n,F.copy(t.viewport),H.copy(t.scissor),G=t.scissorTest}else F.copy(Y).multiplyScalar(X),H.copy(J).multiplyScalar(X),G=Z;if(k!==e&&(p.bindFramebuffer(36160,e),k=e),f.viewport(F),f.scissor(H),f.setScissorTest(G),i){var r=y.get(t.texture);p.framebufferTexture2D(36160,36064,34069+t.activeCubeFace,r.__webglTexture,t.activeMipMapLevel)}},this.readRenderTargetPixels=function(t,e,i,n,r,s){if(t&&t.isWebGLRenderTarget){var a=y.get(t).__webglFramebuffer;if(a){var o=!1;a!==k&&(p.bindFramebuffer(36160,a),o=!0);try{var h=t.texture,l=h.format,c=h.type;if(l!==Qt&&N.convert(l)!==p.getParameter(35739))return void console.error(\"THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.\");if(!(c===Dt||N.convert(c)===p.getParameter(35738)||c===Gt&&(m.isWebGL2||d.get(\"OES_texture_float\")||d.get(\"WEBGL_color_buffer_float\"))||c===jt&&(m.isWebGL2?d.get(\"EXT_color_buffer_float\"):d.get(\"EXT_color_buffer_half_float\"))))return void console.error(\"THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.\");36053===p.checkFramebufferStatus(36160)?e>=0&&e<=t.width-n&&i>=0&&i<=t.height-r&&p.readPixels(e,i,n,r,N.convert(l),N.convert(c),s):console.error(\"THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.\")}finally{o&&p.bindFramebuffer(36160,k)}}}else console.error(\"THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.\")},this.copyFramebufferToTexture=function(t,e,i){var n=e.image.width,r=e.image.height,s=N.convert(e.format);this.setTexture2D(e,0),p.copyTexImage2D(3553,i||0,s,t.x,t.y,n,r,0)},this.copyTextureToTexture=function(t,e,i,n){var r=e.image.width,s=e.image.height,a=N.convert(i.format),o=N.convert(i.type);this.setTexture2D(i,0),e.isDataTexture?p.texSubImage2D(3553,n||0,t.x,t.y,r,s,a,o,e.image.data):p.texSubImage2D(3553,n||0,t.x,t.y,a,o,e.image)}}function Ss(t,e){this.name=\"\",this.color=new Ai(t),this.density=void 0!==e?e:25e-5}function Es(t,e,i){this.name=\"\",this.color=new Ai(t),this.near=void 0!==e?e:1,this.far=void 0!==i?i:1e3}function Ts(){Hi.call(this),this.type=\"Scene\",this.background=null,this.fog=null,this.overrideMaterial=null,this.autoUpdate=!0}function Ls(t,e){this.array=t,this.stride=e,this.count=void 0!==t?t.length/e:0,this.dynamic=!1,this.updateRange={offset:0,count:-1},this.version=0}function As(t,e,i,n){this.data=t,this.itemSize=e,this.offset=i,this.normalized=!0===n}function Ps(t){En.call(this),this.type=\"SpriteMaterial\",this.color=new Ai(16777215),this.map=null,this.rotation=0,this.sizeAttenuation=!0,this.lights=!1,this.transparent=!0,this.setValues(t)}function zs(t){if(Hi.call(this),this.type=\"Sprite\",void 0===ps){ps=new on;var e=new Ls(new Float32Array([-.5,-.5,0,0,0,.5,-.5,0,1,0,.5,.5,0,1,1,-.5,.5,0,0,1]),5);ps.setIndex([0,1,2,0,2,3]),ps.addAttribute(\"position\",new As(e,3,0,!1)),ps.addAttribute(\"uv\",new As(e,2,3,!1))}this.geometry=ps,this.material=void 0!==t?t:new Ps,this.center=new Ke(.5,.5)}function Ns(){Hi.call(this),this.type=\"LOD\",Object.defineProperties(this,{levels:{enumerable:!0,value:[]}})}function Rs(t,e){t&&t.isGeometry&&console.error(\"THREE.SkinnedMesh no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.\"),zn.call(this,t,e),this.type=\"SkinnedMesh\",this.bindMode=\"attached\",this.bindMatrix=new $e,this.bindMatrixInverse=new $e}function Cs(t,e){if(t=t||[],this.bones=t.slice(0),this.boneMatrices=new Float32Array(16*this.bones.length),void 0===e)this.calculateInverses();else if(this.bones.length===e.length)this.boneInverses=e.slice(0);else{console.warn(\"THREE.Skeleton boneInverses is the wrong length.\"),this.boneInverses=[];for(var i=0,n=this.bones.length;i<n;i++)this.boneInverses.push(new $e)}}function Is(){Hi.call(this),this.type=\"Bone\"}function Os(t){En.call(this),this.type=\"LineBasicMaterial\",this.color=new Ai(16777215),this.linewidth=1,this.linecap=\"round\",this.linejoin=\"round\",this.lights=!1,this.setValues(t)}function ks(t,e,i){1===i&&console.error(\"THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead.\"),Hi.call(this),this.type=\"Line\",this.geometry=void 0!==t?t:new on,this.material=void 0!==e?e:new Os({color:16777215*Math.random()})}function Ds(t,e){ks.call(this,t,e),this.type=\"LineSegments\"}function Bs(t,e){ks.call(this,t,e),this.type=\"LineLoop\"}function Vs(t){En.call(this),this.type=\"PointsMaterial\",this.color=new Ai(16777215),this.map=null,this.size=1,this.sizeAttenuation=!0,this.morphTargets=!1,this.lights=!1,this.setValues(t)}function Us(t,e){Hi.call(this),this.type=\"Points\",this.geometry=void 0!==t?t:new on,this.material=void 0!==e?e:new Vs({color:16777215*Math.random()})}function Fs(t,e,i,n,r,s,a,o,h){ci.call(this,t,e,i,n,r,s,a,o,h),this.format=void 0!==a?a:Zt,this.minFilter=void 0!==s?s:It,this.magFilter=void 0!==r?r:It,this.generateMipmaps=!1}function Hs(t,e,i,n,r,s,a,o,h,l,c,u){ci.call(this,null,s,a,o,h,l,n,r,c,u),this.image={width:e,height:i},this.mipmaps=t,this.flipY=!1,this.generateMipmaps=!1}function Gs(t,e,i,n,r,s,a,o,h){ci.call(this,t,e,i,n,r,s,a,o,h),this.needsUpdate=!0}function js(t,e,i,n,r,s,a,o,h,l){if((l=void 0!==l?l:ee)!==ee&&l!==ie)throw new Error(\"DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat\");void 0===i&&l===ee&&(i=Ut),void 0===i&&l===ie&&(i=Yt),ci.call(this,null,n,r,s,a,o,l,i,h),this.image={width:t,height:e},this.magFilter=void 0!==a?a:Nt,this.minFilter=void 0!==o?o:Nt,this.flipY=!1,this.generateMipmaps=!1}function Ws(t){on.call(this),this.type=\"WireframeGeometry\";var e,i,n,r,s,a,o,h,l,c,u=[],p=[0,0],d={},m=[\"a\",\"b\",\"c\"];if(t&&t.isGeometry){var f=t.faces;for(e=0,n=f.length;e<n;e++){var v=f[e];for(i=0;i<3;i++)o=v[m[i]],h=v[m[(i+1)%3]],p[0]=Math.min(o,h),p[1]=Math.max(o,h),void 0===d[l=p[0]+\",\"+p[1]]&&(d[l]={index1:p[0],index2:p[1]})}for(l in d)a=d[l],c=t.vertices[a.index1],u.push(c.x,c.y,c.z),c=t.vertices[a.index2],u.push(c.x,c.y,c.z)}else if(t&&t.isBufferGeometry){var g,y,x,b,w,M,_;if(c=new ei,null!==t.index){for(g=t.attributes.position,y=t.index,0===(x=t.groups).length&&(x=[{start:0,count:y.count,materialIndex:0}]),r=0,s=x.length;r<s;++r)for(e=w=(b=x[r]).start,n=w+b.count;e<n;e+=3)for(i=0;i<3;i++)o=y.getX(e+i),h=y.getX(e+(i+1)%3),p[0]=Math.min(o,h),p[1]=Math.max(o,h),void 0===d[l=p[0]+\",\"+p[1]]&&(d[l]={index1:p[0],index2:p[1]});for(l in d)a=d[l],c.fromBufferAttribute(g,a.index1),u.push(c.x,c.y,c.z),c.fromBufferAttribute(g,a.index2),u.push(c.x,c.y,c.z)}else for(e=0,n=(g=t.attributes.position).count/3;e<n;e++)for(i=0;i<3;i++)M=3*e+i,c.fromBufferAttribute(g,M),u.push(c.x,c.y,c.z),_=3*e+(i+1)%3,c.fromBufferAttribute(g,_),u.push(c.x,c.y,c.z)}this.addAttribute(\"position\",new en(u,3))}function qs(t,e,i){qi.call(this),this.type=\"ParametricGeometry\",this.parameters={func:t,slices:e,stacks:i},this.fromBufferGeometry(new Xs(t,e,i)),this.mergeVertices()}function Xs(t,e,i){on.call(this),this.type=\"ParametricBufferGeometry\",this.parameters={func:t,slices:e,stacks:i};var n,r,s=[],a=[],o=[],h=[],l=new ei,c=new ei,u=new ei,p=new ei,d=new ei;t.length<3&&console.error(\"THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.\");var m=e+1;for(n=0;n<=i;n++){var f=n/i;for(r=0;r<=e;r++){var v=r/e;t(v,f,c),a.push(c.x,c.y,c.z),v-1e-5>=0?(t(v-1e-5,f,u),p.subVectors(c,u)):(t(v+1e-5,f,u),p.subVectors(u,c)),f-1e-5>=0?(t(v,f-1e-5,u),d.subVectors(c,u)):(t(v,f+1e-5,u),d.subVectors(u,c)),l.crossVectors(p,d).normalize(),o.push(l.x,l.y,l.z),h.push(v,f)}}for(n=0;n<i;n++)for(r=0;r<e;r++){var g=n*m+r,y=n*m+r+1,x=(n+1)*m+r+1,b=(n+1)*m+r;s.push(g,y,b),s.push(y,x,b)}this.setIndex(s),this.addAttribute(\"position\",new en(a,3)),this.addAttribute(\"normal\",new en(o,3)),this.addAttribute(\"uv\",new en(h,2))}function Ys(t,e,i,n){qi.call(this),this.type=\"PolyhedronGeometry\",this.parameters={vertices:t,indices:e,radius:i,detail:n},this.fromBufferGeometry(new Js(t,e,i,n)),this.mergeVertices()}function Js(t,e,i,n){on.call(this),this.type=\"PolyhedronBufferGeometry\",this.parameters={vertices:t,indices:e,radius:i,detail:n},i=i||1;var r=[],s=[];function a(t,e,i,n){var r,s,a=Math.pow(2,n),h=[];for(r=0;r<=a;r++){h[r]=[];var l=t.clone().lerp(i,r/a),c=e.clone().lerp(i,r/a),u=a-r;for(s=0;s<=u;s++)h[r][s]=0===s&&r===a?l:l.clone().lerp(c,s/u)}for(r=0;r<a;r++)for(s=0;s<2*(a-r)-1;s++){var p=Math.floor(s/2);s%2==0?(o(h[r][p+1]),o(h[r+1][p]),o(h[r][p])):(o(h[r][p+1]),o(h[r+1][p+1]),o(h[r+1][p]))}}function o(t){r.push(t.x,t.y,t.z)}function h(e,i){var n=3*e;i.x=t[n+0],i.y=t[n+1],i.z=t[n+2]}function l(t,e,i,n){n<0&&1===t.x&&(s[e]=t.x-1),0===i.x&&0===i.z&&(s[e]=n/2/Math.PI+.5)}function c(t){return Math.atan2(t.z,-t.x)}!function(t){for(var i=new ei,n=new ei,r=new ei,s=0;s<e.length;s+=3)h(e[s+0],i),h(e[s+1],n),h(e[s+2],r),a(i,n,r,t)}(n=n||0),function(t){for(var e=new ei,i=0;i<r.length;i+=3)e.x=r[i+0],e.y=r[i+1],e.z=r[i+2],e.normalize().multiplyScalar(t),r[i+0]=e.x,r[i+1]=e.y,r[i+2]=e.z}(i),function(){for(var t=new ei,e=0;e<r.length;e+=3){t.x=r[e+0],t.y=r[e+1],t.z=r[e+2];var i=c(t)/2/Math.PI+.5,n=(a=t,Math.atan2(-a.y,Math.sqrt(a.x*a.x+a.z*a.z))/Math.PI+.5);s.push(i,1-n)}var a;(function(){for(var t=new ei,e=new ei,i=new ei,n=new ei,a=new Ke,o=new Ke,h=new Ke,u=0,p=0;u<r.length;u+=9,p+=6){t.set(r[u+0],r[u+1],r[u+2]),e.set(r[u+3],r[u+4],r[u+5]),i.set(r[u+6],r[u+7],r[u+8]),a.set(s[p+0],s[p+1]),o.set(s[p+2],s[p+3]),h.set(s[p+4],s[p+5]),n.copy(t).add(e).add(i).divideScalar(3);var d=c(n);l(a,p+0,t,d),l(o,p+2,e,d),l(h,p+4,i,d)}})(),function(){for(var t=0;t<s.length;t+=6){var e=s[t+0],i=s[t+2],n=s[t+4],r=Math.max(e,i,n),a=Math.min(e,i,n);r>.9&&a<.1&&(e<.2&&(s[t+0]+=1),i<.2&&(s[t+2]+=1),n<.2&&(s[t+4]+=1))}}()}(),this.addAttribute(\"position\",new en(r,3)),this.addAttribute(\"normal\",new en(r.slice(),3)),this.addAttribute(\"uv\",new en(s,2)),0===n?this.computeVertexNormals():this.normalizeNormals()}function Zs(t,e){qi.call(this),this.type=\"TetrahedronGeometry\",this.parameters={radius:t,detail:e},this.fromBufferGeometry(new Qs(t,e)),this.mergeVertices()}function Qs(t,e){Js.call(this,[1,1,1,-1,-1,1,-1,1,-1,1,-1,-1],[2,1,0,0,3,2,1,3,0,2,3,1],t,e),this.type=\"TetrahedronBufferGeometry\",this.parameters={radius:t,detail:e}}function Ks(t,e){qi.call(this),this.type=\"OctahedronGeometry\",this.parameters={radius:t,detail:e},this.fromBufferGeometry(new $s(t,e)),this.mergeVertices()}function $s(t,e){Js.call(this,[1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2],t,e),this.type=\"OctahedronBufferGeometry\",this.parameters={radius:t,detail:e}}function ta(t,e){qi.call(this),this.type=\"IcosahedronGeometry\",this.parameters={radius:t,detail:e},this.fromBufferGeometry(new ea(t,e)),this.mergeVertices()}function ea(t,e){var i=(1+Math.sqrt(5))/2,n=[-1,i,0,1,i,0,-1,-i,0,1,-i,0,0,-1,i,0,1,i,0,-1,-i,0,1,-i,i,0,-1,i,0,1,-i,0,-1,-i,0,1];Js.call(this,n,[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1],t,e),this.type=\"IcosahedronBufferGeometry\",this.parameters={radius:t,detail:e}}function ia(t,e){qi.call(this),this.type=\"DodecahedronGeometry\",this.parameters={radius:t,detail:e},this.fromBufferGeometry(new na(t,e)),this.mergeVertices()}function na(t,e){var i=(1+Math.sqrt(5))/2,n=1/i,r=[-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-n,-i,0,-n,i,0,n,-i,0,n,i,-n,-i,0,-n,i,0,n,-i,0,n,i,0,-i,0,-n,i,0,-n,-i,0,n,i,0,n];Js.call(this,r,[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9],t,e),this.type=\"DodecahedronBufferGeometry\",this.parameters={radius:t,detail:e}}function ra(t,e,i,n,r,s){qi.call(this),this.type=\"TubeGeometry\",this.parameters={path:t,tubularSegments:e,radius:i,radialSegments:n,closed:r},void 0!==s&&console.warn(\"THREE.TubeGeometry: taper has been removed.\");var a=new sa(t,e,i,n,r);this.tangents=a.tangents,this.normals=a.normals,this.binormals=a.binormals,this.fromBufferGeometry(a),this.mergeVertices()}function sa(t,e,i,n,r){on.call(this),this.type=\"TubeBufferGeometry\",this.parameters={path:t,tubularSegments:e,radius:i,radialSegments:n,closed:r},e=e||64,i=i||1,n=n||8,r=r||!1;var s=t.computeFrenetFrames(e,r);this.tangents=s.tangents,this.normals=s.normals,this.binormals=s.binormals;var a,o,h=new ei,l=new ei,c=new Ke,u=new ei,p=[],d=[],m=[],f=[];function v(r){u=t.getPointAt(r/e,u);var a=s.normals[r],c=s.binormals[r];for(o=0;o<=n;o++){var m=o/n*Math.PI*2,f=Math.sin(m),v=-Math.cos(m);l.x=v*a.x+f*c.x,l.y=v*a.y+f*c.y,l.z=v*a.z+f*c.z,l.normalize(),d.push(l.x,l.y,l.z),h.x=u.x+i*l.x,h.y=u.y+i*l.y,h.z=u.z+i*l.z,p.push(h.x,h.y,h.z)}}!function(){for(a=0;a<e;a++)v(a);v(!1===r?e:0),function(){for(a=0;a<=e;a++)for(o=0;o<=n;o++)c.x=a/e,c.y=o/n,m.push(c.x,c.y)}(),function(){for(o=1;o<=e;o++)for(a=1;a<=n;a++){var t=(n+1)*(o-1)+(a-1),i=(n+1)*o+(a-1),r=(n+1)*o+a,s=(n+1)*(o-1)+a;f.push(t,i,s),f.push(i,r,s)}}()}(),this.setIndex(f),this.addAttribute(\"position\",new en(p,3)),this.addAttribute(\"normal\",new en(d,3)),this.addAttribute(\"uv\",new en(m,2))}function aa(t,e,i,n,r,s,a){qi.call(this),this.type=\"TorusKnotGeometry\",this.parameters={radius:t,tube:e,tubularSegments:i,radialSegments:n,p:r,q:s},void 0!==a&&console.warn(\"THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.\"),this.fromBufferGeometry(new oa(t,e,i,n,r,s)),this.mergeVertices()}function oa(t,e,i,n,r,s){on.call(this),this.type=\"TorusKnotBufferGeometry\",this.parameters={radius:t,tube:e,tubularSegments:i,radialSegments:n,p:r,q:s},t=t||1,e=e||.4,i=Math.floor(i)||64,n=Math.floor(n)||8,r=r||2,s=s||3;var a,o,h=[],l=[],c=[],u=[],p=new ei,d=new ei,m=new ei,f=new ei,v=new ei,g=new ei,y=new ei;for(a=0;a<=i;++a){var x=a/i*r*Math.PI*2;for(L(x,r,s,t,m),L(x+.01,r,s,t,f),g.subVectors(f,m),y.addVectors(f,m),v.crossVectors(g,y),y.crossVectors(v,g),v.normalize(),y.normalize(),o=0;o<=n;++o){var b=o/n*Math.PI*2,w=-e*Math.cos(b),M=e*Math.sin(b);p.x=m.x+(w*y.x+M*v.x),p.y=m.y+(w*y.y+M*v.y),p.z=m.z+(w*y.z+M*v.z),l.push(p.x,p.y,p.z),d.subVectors(p,m).normalize(),c.push(d.x,d.y,d.z),u.push(a/i),u.push(o/n)}}for(o=1;o<=i;o++)for(a=1;a<=n;a++){var _=(n+1)*(o-1)+(a-1),S=(n+1)*o+(a-1),E=(n+1)*o+a,T=(n+1)*(o-1)+a;h.push(_,S,T),h.push(S,E,T)}function L(t,e,i,n,r){var s=Math.cos(t),a=Math.sin(t),o=i/e*t,h=Math.cos(o);r.x=n*(2+h)*.5*s,r.y=n*(2+h)*a*.5,r.z=n*Math.sin(o)*.5}this.setIndex(h),this.addAttribute(\"position\",new en(l,3)),this.addAttribute(\"normal\",new en(c,3)),this.addAttribute(\"uv\",new en(u,2))}function ha(t,e,i,n,r){qi.call(this),this.type=\"TorusGeometry\",this.parameters={radius:t,tube:e,radialSegments:i,tubularSegments:n,arc:r},this.fromBufferGeometry(new la(t,e,i,n,r)),this.mergeVertices()}function la(t,e,i,n,r){on.call(this),this.type=\"TorusBufferGeometry\",this.parameters={radius:t,tube:e,radialSegments:i,tubularSegments:n,arc:r},t=t||1,e=e||.4,i=Math.floor(i)||8,n=Math.floor(n)||6,r=r||2*Math.PI;var s,a,o=[],h=[],l=[],c=[],u=new ei,p=new ei,d=new ei;for(s=0;s<=i;s++)for(a=0;a<=n;a++){var m=a/n*r,f=s/i*Math.PI*2;p.x=(t+e*Math.cos(f))*Math.cos(m),p.y=(t+e*Math.cos(f))*Math.sin(m),p.z=e*Math.sin(f),h.push(p.x,p.y,p.z),u.x=t*Math.cos(m),u.y=t*Math.sin(m),d.subVectors(p,u).normalize(),l.push(d.x,d.y,d.z),c.push(a/n),c.push(s/i)}for(s=1;s<=i;s++)for(a=1;a<=n;a++){var v=(n+1)*s+a-1,g=(n+1)*(s-1)+a-1,y=(n+1)*(s-1)+a,x=(n+1)*s+a;o.push(v,g,x),o.push(g,y,x)}this.setIndex(o),this.addAttribute(\"position\",new en(h,3)),this.addAttribute(\"normal\",new en(l,3)),this.addAttribute(\"uv\",new en(c,2))}Ss.prototype.isFogExp2=!0,Ss.prototype.clone=function(){return new Ss(this.color,this.density)},Ss.prototype.toJSON=function(){return{type:\"FogExp2\",color:this.color.getHex(),density:this.density}},Es.prototype.isFog=!0,Es.prototype.clone=function(){return new Es(this.color,this.near,this.far)},Es.prototype.toJSON=function(){return{type:\"Fog\",color:this.color.getHex(),near:this.near,far:this.far}},Ts.prototype=Object.assign(Object.create(Hi.prototype),{constructor:Ts,isScene:!0,copy:function(t,e){return Hi.prototype.copy.call(this,t,e),null!==t.background&&(this.background=t.background.clone()),null!==t.fog&&(this.fog=t.fog.clone()),null!==t.overrideMaterial&&(this.overrideMaterial=t.overrideMaterial.clone()),this.autoUpdate=t.autoUpdate,this.matrixAutoUpdate=t.matrixAutoUpdate,this},toJSON:function(t){var e=Hi.prototype.toJSON.call(this,t);return null!==this.background&&(e.object.background=this.background.toJSON(t)),null!==this.fog&&(e.object.fog=this.fog.toJSON()),e},dispose:function(){this.dispatchEvent({type:\"dispose\"})}}),Object.defineProperty(Ls.prototype,\"needsUpdate\",{set:function(t){!0===t&&this.version++}}),Object.assign(Ls.prototype,{isInterleavedBuffer:!0,onUploadCallback:function(){},setArray:function(t){if(Array.isArray(t))throw new TypeError(\"THREE.BufferAttribute: array should be a Typed Array.\");return this.count=void 0!==t?t.length/this.stride:0,this.array=t,this},setDynamic:function(t){return this.dynamic=t,this},copy:function(t){return this.array=new t.array.constructor(t.array),this.count=t.count,this.stride=t.stride,this.dynamic=t.dynamic,this},copyAt:function(t,e,i){t*=this.stride,i*=e.stride;for(var n=0,r=this.stride;n<r;n++)this.array[t+n]=e.array[i+n];return this},set:function(t,e){return void 0===e&&(e=0),this.array.set(t,e),this},clone:function(){return(new this.constructor).copy(this)},onUpload:function(t){return this.onUploadCallback=t,this}}),Object.defineProperties(As.prototype,{count:{get:function(){return this.data.count}},array:{get:function(){return this.data.array}}}),Object.assign(As.prototype,{isInterleavedBufferAttribute:!0,setX:function(t,e){return this.data.array[t*this.data.stride+this.offset]=e,this},setY:function(t,e){return this.data.array[t*this.data.stride+this.offset+1]=e,this},setZ:function(t,e){return this.data.array[t*this.data.stride+this.offset+2]=e,this},setW:function(t,e){return this.data.array[t*this.data.stride+this.offset+3]=e,this},getX:function(t){return this.data.array[t*this.data.stride+this.offset]},getY:function(t){return this.data.array[t*this.data.stride+this.offset+1]},getZ:function(t){return this.data.array[t*this.data.stride+this.offset+2]},getW:function(t){return this.data.array[t*this.data.stride+this.offset+3]},setXY:function(t,e,i){return t=t*this.data.stride+this.offset,this.data.array[t+0]=e,this.data.array[t+1]=i,this},setXYZ:function(t,e,i,n){return t=t*this.data.stride+this.offset,this.data.array[t+0]=e,this.data.array[t+1]=i,this.data.array[t+2]=n,this},setXYZW:function(t,e,i,n,r){return t=t*this.data.stride+this.offset,this.data.array[t+0]=e,this.data.array[t+1]=i,this.data.array[t+2]=n,this.data.array[t+3]=r,this}}),Ps.prototype=Object.create(En.prototype),Ps.prototype.constructor=Ps,Ps.prototype.isSpriteMaterial=!0,Ps.prototype.copy=function(t){return En.prototype.copy.call(this,t),this.color.copy(t.color),this.map=t.map,this.rotation=t.rotation,this.sizeAttenuation=t.sizeAttenuation,this},zs.prototype=Object.assign(Object.create(Hi.prototype),{constructor:zs,isSprite:!0,raycast:function(){var t=new ei,e=new ei,i=new ei,n=new Ke,r=new Ke,s=new $e,a=new ei,o=new ei,h=new ei,l=new Ke,c=new Ke,u=new Ke;function p(t,e,i,a,o,h){n.subVectors(t,i).addScalar(.5).multiply(a),void 0!==o?(r.x=h*n.x-o*n.y,r.y=o*n.x+h*n.y):r.copy(n),t.copy(e),t.x+=r.x,t.y+=r.y,t.applyMatrix4(s)}return function(n,r){e.setFromMatrixScale(this.matrixWorld),s.getInverse(this.modelViewMatrix).premultiply(this.matrixWorld),i.setFromMatrixPosition(this.modelViewMatrix);var d,m,f=this.material.rotation;0!==f&&(m=Math.cos(f),d=Math.sin(f));var v=this.center;p(a.set(-.5,-.5,0),i,v,e,d,m),p(o.set(.5,-.5,0),i,v,e,d,m),p(h.set(.5,.5,0),i,v,e,d,m),l.set(0,0),c.set(1,0),u.set(1,1);var g=n.ray.intersectTriangle(a,o,h,!1,t);if(null!==g||(p(o.set(-.5,.5,0),i,v,e,d,m),c.set(0,1),null!==(g=n.ray.intersectTriangle(a,h,o,!1,t)))){var y=n.ray.origin.distanceTo(t);y<n.near||y>n.far||r.push({distance:y,point:t.clone(),uv:An.getUV(t,a,o,h,l,c,u,new Ke),face:null,object:this})}}}(),clone:function(){return new this.constructor(this.material).copy(this)},copy:function(t){return Hi.prototype.copy.call(this,t),void 0!==t.center&&this.center.copy(t.center),this}}),Ns.prototype=Object.assign(Object.create(Hi.prototype),{constructor:Ns,copy:function(t){Hi.prototype.copy.call(this,t,!1);for(var e=t.levels,i=0,n=e.length;i<n;i++){var r=e[i];this.addLevel(r.object.clone(),r.distance)}return this},addLevel:function(t,e){void 0===e&&(e=0),e=Math.abs(e);for(var i=this.levels,n=0;n<i.length&&!(e<i[n].distance);n++);i.splice(n,0,{distance:e,object:t}),this.add(t)},getObjectForDistance:function(t){for(var e=this.levels,i=1,n=e.length;i<n&&!(t<e[i].distance);i++);return e[i-1].object},raycast:(ds=new ei,function(t,e){ds.setFromMatrixPosition(this.matrixWorld);var i=t.ray.origin.distanceTo(ds);this.getObjectForDistance(i).raycast(t,e)}),update:function(){var t=new ei,e=new ei;return function(i){var n=this.levels;if(n.length>1){t.setFromMatrixPosition(i.matrixWorld),e.setFromMatrixPosition(this.matrixWorld);var r=t.distanceTo(e);n[0].object.visible=!0;for(var s=1,a=n.length;s<a&&r>=n[s].distance;s++)n[s-1].object.visible=!1,n[s].object.visible=!0;for(;s<a;s++)n[s].object.visible=!1}}}(),toJSON:function(t){var e=Hi.prototype.toJSON.call(this,t);e.object.levels=[];for(var i=this.levels,n=0,r=i.length;n<r;n++){var s=i[n];e.object.levels.push({object:s.object.uuid,distance:s.distance})}return e}}),Rs.prototype=Object.assign(Object.create(zn.prototype),{constructor:Rs,isSkinnedMesh:!0,bind:function(t,e){this.skeleton=t,void 0===e&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),e=this.matrixWorld),this.bindMatrix.copy(e),this.bindMatrixInverse.getInverse(e)},pose:function(){this.skeleton.pose()},normalizeSkinWeights:function(){for(var t=new ui,e=this.geometry.attributes.skinWeight,i=0,n=e.count;i<n;i++){t.x=e.getX(i),t.y=e.getY(i),t.z=e.getZ(i),t.w=e.getW(i);var r=1/t.manhattanLength();r!==1/0?t.multiplyScalar(r):t.set(1,0,0,0),e.setXYZW(i,t.x,t.y,t.z,t.w)}},updateMatrixWorld:function(t){zn.prototype.updateMatrixWorld.call(this,t),\"attached\"===this.bindMode?this.bindMatrixInverse.getInverse(this.matrixWorld):\"detached\"===this.bindMode?this.bindMatrixInverse.getInverse(this.bindMatrix):console.warn(\"THREE.SkinnedMesh: Unrecognized bindMode: \"+this.bindMode)},clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}}),Object.assign(Cs.prototype,{calculateInverses:function(){this.boneInverses=[];for(var t=0,e=this.bones.length;t<e;t++){var i=new $e;this.bones[t]&&i.getInverse(this.bones[t].matrixWorld),this.boneInverses.push(i)}},pose:function(){var t,e,i;for(e=0,i=this.bones.length;e<i;e++)(t=this.bones[e])&&t.matrixWorld.getInverse(this.boneInverses[e]);for(e=0,i=this.bones.length;e<i;e++)(t=this.bones[e])&&(t.parent&&t.parent.isBone?(t.matrix.getInverse(t.parent.matrixWorld),t.matrix.multiply(t.matrixWorld)):t.matrix.copy(t.matrixWorld),t.matrix.decompose(t.position,t.quaternion,t.scale))},update:(ms=new $e,fs=new $e,function(){for(var t=this.bones,e=this.boneInverses,i=this.boneMatrices,n=this.boneTexture,r=0,s=t.length;r<s;r++){var a=t[r]?t[r].matrixWorld:fs;ms.multiplyMatrices(a,e[r]),ms.toArray(i,16*r)}void 0!==n&&(n.needsUpdate=!0)}),clone:function(){return new Cs(this.bones,this.boneInverses)},getBoneByName:function(t){for(var e=0,i=this.bones.length;e<i;e++){var n=this.bones[e];if(n.name===t)return n}}}),Is.prototype=Object.assign(Object.create(Hi.prototype),{constructor:Is,isBone:!0}),Os.prototype=Object.create(En.prototype),Os.prototype.constructor=Os,Os.prototype.isLineBasicMaterial=!0,Os.prototype.copy=function(t){return En.prototype.copy.call(this,t),this.color.copy(t.color),this.linewidth=t.linewidth,this.linecap=t.linecap,this.linejoin=t.linejoin,this},ks.prototype=Object.assign(Object.create(Hi.prototype),{constructor:ks,isLine:!0,computeLineDistances:(vs=new ei,gs=new ei,function(){var t=this.geometry;if(t.isBufferGeometry)if(null===t.index){for(var e=t.attributes.position,i=[0],n=1,r=e.count;n<r;n++)vs.fromBufferAttribute(e,n-1),gs.fromBufferAttribute(e,n),i[n]=i[n-1],i[n]+=vs.distanceTo(gs);t.addAttribute(\"lineDistance\",new en(i,1))}else console.warn(\"THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.\");else if(t.isGeometry){var s=t.vertices;for((i=t.lineDistances)[0]=0,n=1,r=s.length;n<r;n++)i[n]=i[n-1],i[n]+=s[n-1].distanceTo(s[n])}return this}),raycast:function(){var t=new $e,e=new Ln,i=new gi;return function(n,r){var s=n.linePrecision,a=this.geometry,o=this.matrixWorld;if(null===a.boundingSphere&&a.computeBoundingSphere(),i.copy(a.boundingSphere),i.applyMatrix4(o),i.radius+=s,!1!==n.ray.intersectsSphere(i)){t.getInverse(o),e.copy(n.ray).applyMatrix4(t);var h=s/((this.scale.x+this.scale.y+this.scale.z)/3),l=h*h,c=new ei,u=new ei,p=new ei,d=new ei,m=this&&this.isLineSegments?2:1;if(a.isBufferGeometry){var f=a.index,v=a.attributes.position.array;if(null!==f)for(var g=f.array,y=0,x=g.length-1;y<x;y+=m){var b=g[y],w=g[y+1];if(c.fromArray(v,3*b),u.fromArray(v,3*w),!(e.distanceSqToSegment(c,u,d,p)>l))d.applyMatrix4(this.matrixWorld),(S=n.ray.origin.distanceTo(d))<n.near||S>n.far||r.push({distance:S,point:p.clone().applyMatrix4(this.matrixWorld),index:y,face:null,faceIndex:null,object:this})}else for(y=0,x=v.length/3-1;y<x;y+=m){if(c.fromArray(v,3*y),u.fromArray(v,3*y+3),!(e.distanceSqToSegment(c,u,d,p)>l))d.applyMatrix4(this.matrixWorld),(S=n.ray.origin.distanceTo(d))<n.near||S>n.far||r.push({distance:S,point:p.clone().applyMatrix4(this.matrixWorld),index:y,face:null,faceIndex:null,object:this})}}else if(a.isGeometry){var M=a.vertices,_=M.length;for(y=0;y<_-1;y+=m){var S;if(!(e.distanceSqToSegment(M[y],M[y+1],d,p)>l))d.applyMatrix4(this.matrixWorld),(S=n.ray.origin.distanceTo(d))<n.near||S>n.far||r.push({distance:S,point:p.clone().applyMatrix4(this.matrixWorld),index:y,face:null,faceIndex:null,object:this})}}}}}(),copy:function(t){return Hi.prototype.copy.call(this,t),this.geometry.copy(t.geometry),this.material.copy(t.material),this},clone:function(){return(new this.constructor).copy(this)}}),Ds.prototype=Object.assign(Object.create(ks.prototype),{constructor:Ds,isLineSegments:!0,computeLineDistances:function(){var t=new ei,e=new ei;return function(){var i=this.geometry;if(i.isBufferGeometry)if(null===i.index){for(var n=i.attributes.position,r=[],s=0,a=n.count;s<a;s+=2)t.fromBufferAttribute(n,s),e.fromBufferAttribute(n,s+1),r[s]=0===s?0:r[s-1],r[s+1]=r[s]+t.distanceTo(e);i.addAttribute(\"lineDistance\",new en(r,1))}else console.warn(\"THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.\");else if(i.isGeometry){var o=i.vertices;for(r=i.lineDistances,s=0,a=o.length;s<a;s+=2)t.copy(o[s]),e.copy(o[s+1]),r[s]=0===s?0:r[s-1],r[s+1]=r[s]+t.distanceTo(e)}return this}}()}),Bs.prototype=Object.assign(Object.create(ks.prototype),{constructor:Bs,isLineLoop:!0}),Vs.prototype=Object.create(En.prototype),Vs.prototype.constructor=Vs,Vs.prototype.isPointsMaterial=!0,Vs.prototype.copy=function(t){return En.prototype.copy.call(this,t),this.color.copy(t.color),this.map=t.map,this.size=t.size,this.sizeAttenuation=t.sizeAttenuation,this.morphTargets=t.morphTargets,this},Us.prototype=Object.assign(Object.create(Hi.prototype),{constructor:Us,isPoints:!0,raycast:function(){var t=new $e,e=new Ln,i=new gi;return function(n,r){var s=this,a=this.geometry,o=this.matrixWorld,h=n.params.Points.threshold;if(null===a.boundingSphere&&a.computeBoundingSphere(),i.copy(a.boundingSphere),i.applyMatrix4(o),i.radius+=h,!1!==n.ray.intersectsSphere(i)){t.getInverse(o),e.copy(n.ray).applyMatrix4(t);var l=h/((this.scale.x+this.scale.y+this.scale.z)/3),c=l*l,u=new ei,p=new ei;if(a.isBufferGeometry){var d=a.index,m=a.attributes.position.array;if(null!==d)for(var f=d.array,v=0,g=f.length;v<g;v++){var y=f[v];u.fromArray(m,3*y),w(u,y)}else{v=0;for(var x=m.length/3;v<x;v++)u.fromArray(m,3*v),w(u,v)}}else{var b=a.vertices;for(v=0,x=b.length;v<x;v++)w(b[v],v)}}function w(t,i){var a=e.distanceSqToPoint(t);if(a<c){e.closestPointToPoint(t,p),p.applyMatrix4(o);var h=n.ray.origin.distanceTo(p);if(h<n.near||h>n.far)return;r.push({distance:h,distanceToRay:Math.sqrt(a),point:p.clone(),index:i,face:null,object:s})}}}}(),clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}}),Fs.prototype=Object.assign(Object.create(ci.prototype),{constructor:Fs,isVideoTexture:!0,update:function(){var t=this.image;t.readyState>=t.HAVE_CURRENT_DATA&&(this.needsUpdate=!0)}}),Hs.prototype=Object.create(ci.prototype),Hs.prototype.constructor=Hs,Hs.prototype.isCompressedTexture=!0,Gs.prototype=Object.create(ci.prototype),Gs.prototype.constructor=Gs,Gs.prototype.isCanvasTexture=!0,js.prototype=Object.create(ci.prototype),js.prototype.constructor=js,js.prototype.isDepthTexture=!0,Ws.prototype=Object.create(on.prototype),Ws.prototype.constructor=Ws,qs.prototype=Object.create(qi.prototype),qs.prototype.constructor=qs,Xs.prototype=Object.create(on.prototype),Xs.prototype.constructor=Xs,Ys.prototype=Object.create(qi.prototype),Ys.prototype.constructor=Ys,Js.prototype=Object.create(on.prototype),Js.prototype.constructor=Js,Zs.prototype=Object.create(qi.prototype),Zs.prototype.constructor=Zs,Qs.prototype=Object.create(Js.prototype),Qs.prototype.constructor=Qs,Ks.prototype=Object.create(qi.prototype),Ks.prototype.constructor=Ks,$s.prototype=Object.create(Js.prototype),$s.prototype.constructor=$s,ta.prototype=Object.create(qi.prototype),ta.prototype.constructor=ta,ea.prototype=Object.create(Js.prototype),ea.prototype.constructor=ea,ia.prototype=Object.create(qi.prototype),ia.prototype.constructor=ia,na.prototype=Object.create(Js.prototype),na.prototype.constructor=na,ra.prototype=Object.create(qi.prototype),ra.prototype.constructor=ra,sa.prototype=Object.create(on.prototype),sa.prototype.constructor=sa,aa.prototype=Object.create(qi.prototype),aa.prototype.constructor=aa,oa.prototype=Object.create(on.prototype),oa.prototype.constructor=oa,ha.prototype=Object.create(qi.prototype),ha.prototype.constructor=ha,la.prototype=Object.create(on.prototype),la.prototype.constructor=la;var ca=function(t,e,i){i=i||2;var n,r,s,a,o,h,l,c=e&&e.length,u=c?e[0]*i:t.length,p=ua(t,0,u,i,!0),d=[];if(!p)return d;if(c&&(p=function(t,e,i,n){var r,s,a,o,h,l=[];for(r=0,s=e.length;r<s;r++)a=e[r]*n,o=r<s-1?e[r+1]*n:t.length,(h=ua(t,a,o,n,!1))===h.next&&(h.steiner=!0),l.push(wa(h));for(l.sort(ya),r=0;r<l.length;r++)xa(l[r],i),i=pa(i,i.next);return i}(t,e,p,i)),t.length>80*i){n=s=t[0],r=a=t[1];for(var m=i;m<u;m+=i)(o=t[m])<n&&(n=o),(h=t[m+1])<r&&(r=h),o>s&&(s=o),h>a&&(a=h);l=0!==(l=Math.max(s-n,a-r))?1/l:0}return da(p,d,i,n,r,l),d};function ua(t,e,i,n,r){var s,a;if(r===function(t,e,i,n){for(var r=0,s=e,a=i-n;s<i;s+=n)r+=(t[a]-t[s])*(t[s+1]+t[a+1]),a=s;return r}(t,e,i,n)>0)for(s=e;s<i;s+=n)a=Pa(s,t[s],t[s+1],a);else for(s=i-n;s>=e;s-=n)a=Pa(s,t[s],t[s+1],a);return a&&Ea(a,a.next)&&(za(a),a=a.next),a}function pa(t,e){if(!t)return t;e||(e=t);var i,n=t;do{if(i=!1,n.steiner||!Ea(n,n.next)&&0!==Sa(n.prev,n,n.next))n=n.next;else{if(za(n),(n=e=n.prev)===n.next)break;i=!0}}while(i||n!==e);return e}function da(t,e,i,n,r,s,a){if(t){!a&&s&&function(t,e,i,n){var r=t;do{null===r.z&&(r.z=ba(r.x,r.y,e,i,n)),r.prevZ=r.prev,r.nextZ=r.next,r=r.next}while(r!==t);r.prevZ.nextZ=null,r.prevZ=null,function(t){var e,i,n,r,s,a,o,h,l=1;do{for(i=t,t=null,s=null,a=0;i;){for(a++,n=i,o=0,e=0;e<l&&(o++,n=n.nextZ);e++);for(h=l;o>0||h>0&&n;)0!==o&&(0===h||!n||i.z<=n.z)?(r=i,i=i.nextZ,o--):(r=n,n=n.nextZ,h--),s?s.nextZ=r:t=r,r.prevZ=s,s=r;i=n}s.nextZ=null,l*=2}while(a>1)}(r)}(t,n,r,s);for(var o,h,l=t;t.prev!==t.next;)if(o=t.prev,h=t.next,s?fa(t,n,r,s):ma(t))e.push(o.i/i),e.push(t.i/i),e.push(h.i/i),za(t),t=h.next,l=h.next;else if((t=h)===l){a?1===a?da(t=va(t,e,i),e,i,n,r,s,2):2===a&&ga(t,e,i,n,r,s):da(pa(t),e,i,n,r,s,1);break}}}function ma(t){var e=t.prev,i=t,n=t.next;if(Sa(e,i,n)>=0)return!1;for(var r=t.next.next;r!==t.prev;){if(Ma(e.x,e.y,i.x,i.y,n.x,n.y,r.x,r.y)&&Sa(r.prev,r,r.next)>=0)return!1;r=r.next}return!0}function fa(t,e,i,n){var r=t.prev,s=t,a=t.next;if(Sa(r,s,a)>=0)return!1;for(var o=r.x<s.x?r.x<a.x?r.x:a.x:s.x<a.x?s.x:a.x,h=r.y<s.y?r.y<a.y?r.y:a.y:s.y<a.y?s.y:a.y,l=r.x>s.x?r.x>a.x?r.x:a.x:s.x>a.x?s.x:a.x,c=r.y>s.y?r.y>a.y?r.y:a.y:s.y>a.y?s.y:a.y,u=ba(o,h,e,i,n),p=ba(l,c,e,i,n),d=t.nextZ;d&&d.z<=p;){if(d!==t.prev&&d!==t.next&&Ma(r.x,r.y,s.x,s.y,a.x,a.y,d.x,d.y)&&Sa(d.prev,d,d.next)>=0)return!1;d=d.nextZ}for(d=t.prevZ;d&&d.z>=u;){if(d!==t.prev&&d!==t.next&&Ma(r.x,r.y,s.x,s.y,a.x,a.y,d.x,d.y)&&Sa(d.prev,d,d.next)>=0)return!1;d=d.prevZ}return!0}function va(t,e,i){var n=t;do{var r=n.prev,s=n.next.next;!Ea(r,s)&&Ta(r,n,n.next,s)&&La(r,s)&&La(s,r)&&(e.push(r.i/i),e.push(n.i/i),e.push(s.i/i),za(n),za(n.next),n=t=s),n=n.next}while(n!==t);return n}function ga(t,e,i,n,r,s){var a=t;do{for(var o=a.next.next;o!==a.prev;){if(a.i!==o.i&&_a(a,o)){var h=Aa(a,o);return a=pa(a,a.next),h=pa(h,h.next),da(a,e,i,n,r,s),void da(h,e,i,n,r,s)}o=o.next}a=a.next}while(a!==t)}function ya(t,e){return t.x-e.x}function xa(t,e){if(e=function(t,e){var i,n=e,r=t.x,s=t.y,a=-1/0;do{if(s<=n.y&&s>=n.next.y&&n.next.y!==n.y){var o=n.x+(s-n.y)*(n.next.x-n.x)/(n.next.y-n.y);if(o<=r&&o>a){if(a=o,o===r){if(s===n.y)return n;if(s===n.next.y)return n.next}i=n.x<n.next.x?n:n.next}}n=n.next}while(n!==e);if(!i)return null;if(r===a)return i.prev;var h,l=i,c=i.x,u=i.y,p=1/0;n=i.next;for(;n!==l;)r>=n.x&&n.x>=c&&r!==n.x&&Ma(s<u?r:a,s,c,u,s<u?a:r,s,n.x,n.y)&&((h=Math.abs(s-n.y)/(r-n.x))<p||h===p&&n.x>i.x)&&La(n,t)&&(i=n,p=h),n=n.next;return i}(t,e)){var i=Aa(e,t);pa(i,i.next)}}function ba(t,e,i,n,r){return(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=32767*(t-i)*r)|t<<8))|t<<4))|t<<2))|t<<1))|(e=1431655765&((e=858993459&((e=252645135&((e=16711935&((e=32767*(e-n)*r)|e<<8))|e<<4))|e<<2))|e<<1))<<1}function wa(t){var e=t,i=t;do{e.x<i.x&&(i=e),e=e.next}while(e!==t);return i}function Ma(t,e,i,n,r,s,a,o){return(r-a)*(e-o)-(t-a)*(s-o)>=0&&(t-a)*(n-o)-(i-a)*(e-o)>=0&&(i-a)*(s-o)-(r-a)*(n-o)>=0}function _a(t,e){return t.next.i!==e.i&&t.prev.i!==e.i&&!function(t,e){var i=t;do{if(i.i!==t.i&&i.next.i!==t.i&&i.i!==e.i&&i.next.i!==e.i&&Ta(i,i.next,t,e))return!0;i=i.next}while(i!==t);return!1}(t,e)&&La(t,e)&&La(e,t)&&function(t,e){var i=t,n=!1,r=(t.x+e.x)/2,s=(t.y+e.y)/2;do{i.y>s!=i.next.y>s&&i.next.y!==i.y&&r<(i.next.x-i.x)*(s-i.y)/(i.next.y-i.y)+i.x&&(n=!n),i=i.next}while(i!==t);return n}(t,e)}function Sa(t,e,i){return(e.y-t.y)*(i.x-e.x)-(e.x-t.x)*(i.y-e.y)}function Ea(t,e){return t.x===e.x&&t.y===e.y}function Ta(t,e,i,n){return!!(Ea(t,e)&&Ea(i,n)||Ea(t,n)&&Ea(i,e))||Sa(t,e,i)>0!=Sa(t,e,n)>0&&Sa(i,n,t)>0!=Sa(i,n,e)>0}function La(t,e){return Sa(t.prev,t,t.next)<0?Sa(t,e,t.next)>=0&&Sa(t,t.prev,e)>=0:Sa(t,e,t.prev)<0||Sa(t,t.next,e)<0}function Aa(t,e){var i=new Na(t.i,t.x,t.y),n=new Na(e.i,e.x,e.y),r=t.next,s=e.prev;return t.next=e,e.prev=t,i.next=r,r.prev=i,n.next=i,i.prev=n,s.next=n,n.prev=s,n}function Pa(t,e,i,n){var r=new Na(t,e,i);return n?(r.next=n.next,r.prev=n,n.next.prev=r,n.next=r):(r.prev=r,r.next=r),r}function za(t){t.next.prev=t.prev,t.prev.next=t.next,t.prevZ&&(t.prevZ.nextZ=t.nextZ),t.nextZ&&(t.nextZ.prevZ=t.prevZ)}function Na(t,e,i){this.i=t,this.x=e,this.y=i,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}var Ra={area:function(t){for(var e=t.length,i=0,n=e-1,r=0;r<e;n=r++)i+=t[n].x*t[r].y-t[r].x*t[n].y;return.5*i},isClockWise:function(t){return Ra.area(t)<0},triangulateShape:function(t,e){var i=[],n=[],r=[];Ca(t),Ia(i,t);var s=t.length;e.forEach(Ca);for(var a=0;a<e.length;a++)n.push(s),s+=e[a].length,Ia(i,e[a]);var o=ca(i,n);for(a=0;a<o.length;a+=3)r.push(o.slice(a,a+3));return r}};function Ca(t){var e=t.length;e>2&&t[e-1].equals(t[0])&&t.pop()}function Ia(t,e){for(var i=0;i<e.length;i++)t.push(e[i].x),t.push(e[i].y)}function Oa(t,e){qi.call(this),this.type=\"ExtrudeGeometry\",this.parameters={shapes:t,options:e},this.fromBufferGeometry(new ka(t,e)),this.mergeVertices()}function ka(t,e){on.call(this),this.type=\"ExtrudeBufferGeometry\",this.parameters={shapes:t,options:e},t=Array.isArray(t)?t:[t];for(var i=this,n=[],r=[],s=0,a=t.length;s<a;s++){o(t[s])}function o(t){var s=[],a=void 0!==e.curveSegments?e.curveSegments:12,o=void 0!==e.steps?e.steps:1,h=void 0!==e.depth?e.depth:100,l=void 0===e.bevelEnabled||e.bevelEnabled,c=void 0!==e.bevelThickness?e.bevelThickness:6,u=void 0!==e.bevelSize?e.bevelSize:c-2,p=void 0!==e.bevelSegments?e.bevelSegments:3,d=e.extrudePath,m=void 0!==e.UVGenerator?e.UVGenerator:Da;void 0!==e.amount&&(console.warn(\"THREE.ExtrudeBufferGeometry: amount has been renamed to depth.\"),h=e.amount);var f,v,g,y,x,b,w,M,_=!1;d&&(f=d.getSpacedPoints(o),_=!0,l=!1,v=d.computeFrenetFrames(o,!1),g=new ei,y=new ei,x=new ei),l||(p=0,c=0,u=0);var S=t.extractPoints(a),E=S.shape,T=S.holes;if(!Ra.isClockWise(E))for(E=E.reverse(),w=0,M=T.length;w<M;w++)b=T[w],Ra.isClockWise(b)&&(T[w]=b.reverse());var L=Ra.triangulateShape(E,T),A=E;for(w=0,M=T.length;w<M;w++)b=T[w],E=E.concat(b);function P(t,e,i){return e||console.error(\"THREE.ExtrudeGeometry: vec does not exist\"),e.clone().multiplyScalar(i).add(t)}var z,N,R,C,I,O,k=E.length,D=L.length;function B(t,e,i){var n,r,s,a=t.x-e.x,o=t.y-e.y,h=i.x-t.x,l=i.y-t.y,c=a*a+o*o,u=a*l-o*h;if(Math.abs(u)>Number.EPSILON){var p=Math.sqrt(c),d=Math.sqrt(h*h+l*l),m=e.x-o/p,f=e.y+a/p,v=((i.x-l/d-m)*l-(i.y+h/d-f)*h)/(a*l-o*h),g=(n=m+a*v-t.x)*n+(r=f+o*v-t.y)*r;if(g<=2)return new Ke(n,r);s=Math.sqrt(g/2)}else{var y=!1;a>Number.EPSILON?h>Number.EPSILON&&(y=!0):a<-Number.EPSILON?h<-Number.EPSILON&&(y=!0):Math.sign(o)===Math.sign(l)&&(y=!0),y?(n=-o,r=a,s=Math.sqrt(c)):(n=a,r=o,s=Math.sqrt(c/2))}return new Ke(n/s,r/s)}for(var V=[],U=0,F=A.length,H=F-1,G=U+1;U<F;U++,H++,G++)H===F&&(H=0),G===F&&(G=0),V[U]=B(A[U],A[H],A[G]);var j,W,q=[],X=V.concat();for(w=0,M=T.length;w<M;w++){for(b=T[w],j=[],U=0,H=(F=b.length)-1,G=U+1;U<F;U++,H++,G++)H===F&&(H=0),G===F&&(G=0),j[U]=B(b[U],b[H],b[G]);q.push(j),X=X.concat(j)}for(z=0;z<p;z++){for(R=z/p,C=c*Math.cos(R*Math.PI/2),N=u*Math.sin(R*Math.PI/2),U=0,F=A.length;U<F;U++)J((I=P(A[U],V[U],N)).x,I.y,-C);for(w=0,M=T.length;w<M;w++)for(b=T[w],j=q[w],U=0,F=b.length;U<F;U++)J((I=P(b[U],j[U],N)).x,I.y,-C)}for(N=u,U=0;U<k;U++)I=l?P(E[U],X[U],N):E[U],_?(y.copy(v.normals[0]).multiplyScalar(I.x),g.copy(v.binormals[0]).multiplyScalar(I.y),x.copy(f[0]).add(y).add(g),J(x.x,x.y,x.z)):J(I.x,I.y,0);for(W=1;W<=o;W++)for(U=0;U<k;U++)I=l?P(E[U],X[U],N):E[U],_?(y.copy(v.normals[W]).multiplyScalar(I.x),g.copy(v.binormals[W]).multiplyScalar(I.y),x.copy(f[W]).add(y).add(g),J(x.x,x.y,x.z)):J(I.x,I.y,h/o*W);for(z=p-1;z>=0;z--){for(R=z/p,C=c*Math.cos(R*Math.PI/2),N=u*Math.sin(R*Math.PI/2),U=0,F=A.length;U<F;U++)J((I=P(A[U],V[U],N)).x,I.y,h+C);for(w=0,M=T.length;w<M;w++)for(b=T[w],j=q[w],U=0,F=b.length;U<F;U++)I=P(b[U],j[U],N),_?J(I.x,I.y+f[o-1].y,f[o-1].x+C):J(I.x,I.y,h+C)}function Y(t,e){var i,n;for(U=t.length;--U>=0;){i=U,(n=U-1)<0&&(n=t.length-1);var r=0,s=o+2*p;for(r=0;r<s;r++){var a=k*r,h=k*(r+1);Q(e+i+a,e+n+a,e+n+h,e+i+h)}}}function J(t,e,i){s.push(t),s.push(e),s.push(i)}function Z(t,e,r){K(t),K(e),K(r);var s=n.length/3,a=m.generateTopUV(i,n,s-3,s-2,s-1);$(a[0]),$(a[1]),$(a[2])}function Q(t,e,r,s){K(t),K(e),K(s),K(e),K(r),K(s);var a=n.length/3,o=m.generateSideWallUV(i,n,a-6,a-3,a-2,a-1);$(o[0]),$(o[1]),$(o[3]),$(o[1]),$(o[2]),$(o[3])}function K(t){n.push(s[3*t+0]),n.push(s[3*t+1]),n.push(s[3*t+2])}function $(t){r.push(t.x),r.push(t.y)}!function(){var t=n.length/3;if(l){var e=0,r=k*e;for(U=0;U<D;U++)Z((O=L[U])[2]+r,O[1]+r,O[0]+r);for(r=k*(e=o+2*p),U=0;U<D;U++)Z((O=L[U])[0]+r,O[1]+r,O[2]+r)}else{for(U=0;U<D;U++)Z((O=L[U])[2],O[1],O[0]);for(U=0;U<D;U++)Z((O=L[U])[0]+k*o,O[1]+k*o,O[2]+k*o)}i.addGroup(t,n.length/3-t,0)}(),function(){var t=n.length/3,e=0;for(Y(A,e),e+=A.length,w=0,M=T.length;w<M;w++)Y(b=T[w],e),e+=b.length;i.addGroup(t,n.length/3-t,1)}()}this.addAttribute(\"position\",new en(n,3)),this.addAttribute(\"uv\",new en(r,2)),this.computeVertexNormals()}Oa.prototype=Object.create(qi.prototype),Oa.prototype.constructor=Oa,Oa.prototype.toJSON=function(){var t=qi.prototype.toJSON.call(this);return Ba(this.parameters.shapes,this.parameters.options,t)},ka.prototype=Object.create(on.prototype),ka.prototype.constructor=ka,ka.prototype.toJSON=function(){var t=on.prototype.toJSON.call(this);return Ba(this.parameters.shapes,this.parameters.options,t)};var Da={generateTopUV:function(t,e,i,n,r){var s=e[3*i],a=e[3*i+1],o=e[3*n],h=e[3*n+1],l=e[3*r],c=e[3*r+1];return[new Ke(s,a),new Ke(o,h),new Ke(l,c)]},generateSideWallUV:function(t,e,i,n,r,s){var a=e[3*i],o=e[3*i+1],h=e[3*i+2],l=e[3*n],c=e[3*n+1],u=e[3*n+2],p=e[3*r],d=e[3*r+1],m=e[3*r+2],f=e[3*s],v=e[3*s+1],g=e[3*s+2];return Math.abs(o-c)<.01?[new Ke(a,1-h),new Ke(l,1-u),new Ke(p,1-m),new Ke(f,1-g)]:[new Ke(o,1-h),new Ke(c,1-u),new Ke(d,1-m),new Ke(v,1-g)]}};function Ba(t,e,i){if(i.shapes=[],Array.isArray(t))for(var n=0,r=t.length;n<r;n++){var s=t[n];i.shapes.push(s.uuid)}else i.shapes.push(t.uuid);return void 0!==e.extrudePath&&(i.options.extrudePath=e.extrudePath.toJSON()),i}function Va(t,e){qi.call(this),this.type=\"TextGeometry\",this.parameters={text:t,parameters:e},this.fromBufferGeometry(new Ua(t,e)),this.mergeVertices()}function Ua(t,e){var i=(e=e||{}).font;if(!i||!i.isFont)return console.error(\"THREE.TextGeometry: font parameter is not an instance of THREE.Font.\"),new qi;var n=i.generateShapes(t,e.size);e.depth=void 0!==e.height?e.height:50,void 0===e.bevelThickness&&(e.bevelThickness=10),void 0===e.bevelSize&&(e.bevelSize=8),void 0===e.bevelEnabled&&(e.bevelEnabled=!1),ka.call(this,n,e),this.type=\"TextBufferGeometry\"}function Fa(t,e,i,n,r,s,a){qi.call(this),this.type=\"SphereGeometry\",this.parameters={radius:t,widthSegments:e,heightSegments:i,phiStart:n,phiLength:r,thetaStart:s,thetaLength:a},this.fromBufferGeometry(new Ha(t,e,i,n,r,s,a)),this.mergeVertices()}function Ha(t,e,i,n,r,s,a){on.call(this),this.type=\"SphereBufferGeometry\",this.parameters={radius:t,widthSegments:e,heightSegments:i,phiStart:n,phiLength:r,thetaStart:s,thetaLength:a},t=t||1,e=Math.max(3,Math.floor(e)||8),i=Math.max(2,Math.floor(i)||6),n=void 0!==n?n:0,r=void 0!==r?r:2*Math.PI;var o,h,l=(s=void 0!==s?s:0)+(a=void 0!==a?a:Math.PI),c=0,u=[],p=new ei,d=new ei,m=[],f=[],v=[],g=[];for(h=0;h<=i;h++){var y=[],x=h/i;for(o=0;o<=e;o++){var b=o/e;p.x=-t*Math.cos(n+b*r)*Math.sin(s+x*a),p.y=t*Math.cos(s+x*a),p.z=t*Math.sin(n+b*r)*Math.sin(s+x*a),f.push(p.x,p.y,p.z),d.set(p.x,p.y,p.z).normalize(),v.push(d.x,d.y,d.z),g.push(b,1-x),y.push(c++)}u.push(y)}for(h=0;h<i;h++)for(o=0;o<e;o++){var w=u[h][o+1],M=u[h][o],_=u[h+1][o],S=u[h+1][o+1];(0!==h||s>0)&&m.push(w,M,S),(h!==i-1||l<Math.PI)&&m.push(M,_,S)}this.setIndex(m),this.addAttribute(\"position\",new en(f,3)),this.addAttribute(\"normal\",new en(v,3)),this.addAttribute(\"uv\",new en(g,2))}function Ga(t,e,i,n,r,s){qi.call(this),this.type=\"RingGeometry\",this.parameters={innerRadius:t,outerRadius:e,thetaSegments:i,phiSegments:n,thetaStart:r,thetaLength:s},this.fromBufferGeometry(new ja(t,e,i,n,r,s)),this.mergeVertices()}function ja(t,e,i,n,r,s){on.call(this),this.type=\"RingBufferGeometry\",this.parameters={innerRadius:t,outerRadius:e,thetaSegments:i,phiSegments:n,thetaStart:r,thetaLength:s},t=t||.5,e=e||1,r=void 0!==r?r:0,s=void 0!==s?s:2*Math.PI,i=void 0!==i?Math.max(3,i):8;var a,o,h,l=[],c=[],u=[],p=[],d=t,m=(e-t)/(n=void 0!==n?Math.max(1,n):1),f=new ei,v=new Ke;for(o=0;o<=n;o++){for(h=0;h<=i;h++)a=r+h/i*s,f.x=d*Math.cos(a),f.y=d*Math.sin(a),c.push(f.x,f.y,f.z),u.push(0,0,1),v.x=(f.x/e+1)/2,v.y=(f.y/e+1)/2,p.push(v.x,v.y);d+=m}for(o=0;o<n;o++){var g=o*(i+1);for(h=0;h<i;h++){var y=a=h+g,x=a+i+1,b=a+i+2,w=a+1;l.push(y,x,w),l.push(x,b,w)}}this.setIndex(l),this.addAttribute(\"position\",new en(c,3)),this.addAttribute(\"normal\",new en(u,3)),this.addAttribute(\"uv\",new en(p,2))}function Wa(t,e,i,n){qi.call(this),this.type=\"LatheGeometry\",this.parameters={points:t,segments:e,phiStart:i,phiLength:n},this.fromBufferGeometry(new qa(t,e,i,n)),this.mergeVertices()}function qa(t,e,i,n){on.call(this),this.type=\"LatheBufferGeometry\",this.parameters={points:t,segments:e,phiStart:i,phiLength:n},e=Math.floor(e)||12,i=i||0,n=n||2*Math.PI,n=Qe.clamp(n,0,2*Math.PI);var r,s,a,o=[],h=[],l=[],c=1/e,u=new ei,p=new Ke;for(s=0;s<=e;s++){var d=i+s*c*n,m=Math.sin(d),f=Math.cos(d);for(a=0;a<=t.length-1;a++)u.x=t[a].x*m,u.y=t[a].y,u.z=t[a].x*f,h.push(u.x,u.y,u.z),p.x=s/e,p.y=a/(t.length-1),l.push(p.x,p.y)}for(s=0;s<e;s++)for(a=0;a<t.length-1;a++){var v=r=a+s*t.length,g=r+t.length,y=r+t.length+1,x=r+1;o.push(v,g,x),o.push(g,y,x)}if(this.setIndex(o),this.addAttribute(\"position\",new en(h,3)),this.addAttribute(\"uv\",new en(l,2)),this.computeVertexNormals(),n===2*Math.PI){var b=this.attributes.normal.array,w=new ei,M=new ei,_=new ei;for(r=e*t.length*3,s=0,a=0;s<t.length;s++,a+=3)w.x=b[a+0],w.y=b[a+1],w.z=b[a+2],M.x=b[r+a+0],M.y=b[r+a+1],M.z=b[r+a+2],_.addVectors(w,M).normalize(),b[a+0]=b[r+a+0]=_.x,b[a+1]=b[r+a+1]=_.y,b[a+2]=b[r+a+2]=_.z}}function Xa(t,e){qi.call(this),this.type=\"ShapeGeometry\",\"object\"==typeof e&&(console.warn(\"THREE.ShapeGeometry: Options parameter has been removed.\"),e=e.curveSegments),this.parameters={shapes:t,curveSegments:e},this.fromBufferGeometry(new Ya(t,e)),this.mergeVertices()}function Ya(t,e){on.call(this),this.type=\"ShapeBufferGeometry\",this.parameters={shapes:t,curveSegments:e},e=e||12;var i=[],n=[],r=[],s=[],a=0,o=0;if(!1===Array.isArray(t))l(t);else for(var h=0;h<t.length;h++)l(t[h]),this.addGroup(a,o,h),a+=o,o=0;function l(t){var a,h,l,c=n.length/3,u=t.extractPoints(e),p=u.shape,d=u.holes;for(!1===Ra.isClockWise(p)&&(p=p.reverse()),a=0,h=d.length;a<h;a++)l=d[a],!0===Ra.isClockWise(l)&&(d[a]=l.reverse());var m=Ra.triangulateShape(p,d);for(a=0,h=d.length;a<h;a++)l=d[a],p=p.concat(l);for(a=0,h=p.length;a<h;a++){var f=p[a];n.push(f.x,f.y,0),r.push(0,0,1),s.push(f.x,f.y)}for(a=0,h=m.length;a<h;a++){var v=m[a],g=v[0]+c,y=v[1]+c,x=v[2]+c;i.push(g,y,x),o+=3}}this.setIndex(i),this.addAttribute(\"position\",new en(n,3)),this.addAttribute(\"normal\",new en(r,3)),this.addAttribute(\"uv\",new en(s,2))}function Ja(t,e){if(e.shapes=[],Array.isArray(t))for(var i=0,n=t.length;i<n;i++){var r=t[i];e.shapes.push(r.uuid)}else e.shapes.push(t.uuid);return e}function Za(t,e){on.call(this),this.type=\"EdgesGeometry\",this.parameters={thresholdAngle:e},e=void 0!==e?e:1;var i,n,r,s,a=[],o=Math.cos(Qe.DEG2RAD*e),h=[0,0],l={},c=[\"a\",\"b\",\"c\"];t.isBufferGeometry?(s=new qi).fromBufferGeometry(t):s=t.clone(),s.mergeVertices(),s.computeFaceNormals();for(var u=s.vertices,p=s.faces,d=0,m=p.length;d<m;d++)for(var f=p[d],v=0;v<3;v++)i=f[c[v]],n=f[c[(v+1)%3]],h[0]=Math.min(i,n),h[1]=Math.max(i,n),void 0===l[r=h[0]+\",\"+h[1]]?l[r]={index1:h[0],index2:h[1],face1:d,face2:void 0}:l[r].face2=d;for(r in l){var g=l[r];if(void 0===g.face2||p[g.face1].normal.dot(p[g.face2].normal)<=o){var y=u[g.index1];a.push(y.x,y.y,y.z),y=u[g.index2],a.push(y.x,y.y,y.z)}}this.addAttribute(\"position\",new en(a,3))}function Qa(t,e,i,n,r,s,a,o){qi.call(this),this.type=\"CylinderGeometry\",this.parameters={radiusTop:t,radiusBottom:e,height:i,radialSegments:n,heightSegments:r,openEnded:s,thetaStart:a,thetaLength:o},this.fromBufferGeometry(new Ka(t,e,i,n,r,s,a,o)),this.mergeVertices()}function Ka(t,e,i,n,r,s,a,o){on.call(this),this.type=\"CylinderBufferGeometry\",this.parameters={radiusTop:t,radiusBottom:e,height:i,radialSegments:n,heightSegments:r,openEnded:s,thetaStart:a,thetaLength:o};var h=this;t=void 0!==t?t:1,e=void 0!==e?e:1,i=i||1,n=Math.floor(n)||8,r=Math.floor(r)||1,s=void 0!==s&&s,a=void 0!==a?a:0,o=void 0!==o?o:2*Math.PI;var l=[],c=[],u=[],p=[],d=0,m=[],f=i/2,v=0;function g(i){var r,s,m,g=new Ke,y=new ei,x=0,b=!0===i?t:e,w=!0===i?1:-1;for(s=d,r=1;r<=n;r++)c.push(0,f*w,0),u.push(0,w,0),p.push(.5,.5),d++;for(m=d,r=0;r<=n;r++){var M=r/n*o+a,_=Math.cos(M),S=Math.sin(M);y.x=b*S,y.y=f*w,y.z=b*_,c.push(y.x,y.y,y.z),u.push(0,w,0),g.x=.5*_+.5,g.y=.5*S*w+.5,p.push(g.x,g.y),d++}for(r=0;r<n;r++){var E=s+r,T=m+r;!0===i?l.push(T,T+1,E):l.push(T+1,T,E),x+=3}h.addGroup(v,x,!0===i?1:2),v+=x}!function(){var s,g,y=new ei,x=new ei,b=0,w=(e-t)/i;for(g=0;g<=r;g++){var M=[],_=g/r,S=_*(e-t)+t;for(s=0;s<=n;s++){var E=s/n,T=E*o+a,L=Math.sin(T),A=Math.cos(T);x.x=S*L,x.y=-_*i+f,x.z=S*A,c.push(x.x,x.y,x.z),y.set(L,w,A).normalize(),u.push(y.x,y.y,y.z),p.push(E,1-_),M.push(d++)}m.push(M)}for(s=0;s<n;s++)for(g=0;g<r;g++){var P=m[g][s],z=m[g+1][s],N=m[g+1][s+1],R=m[g][s+1];l.push(P,z,R),l.push(z,N,R),b+=6}h.addGroup(v,b,0),v+=b}(),!1===s&&(t>0&&g(!0),e>0&&g(!1)),this.setIndex(l),this.addAttribute(\"position\",new en(c,3)),this.addAttribute(\"normal\",new en(u,3)),this.addAttribute(\"uv\",new en(p,2))}function $a(t,e,i,n,r,s,a){Qa.call(this,0,t,e,i,n,r,s,a),this.type=\"ConeGeometry\",this.parameters={radius:t,height:e,radialSegments:i,heightSegments:n,openEnded:r,thetaStart:s,thetaLength:a}}function to(t,e,i,n,r,s,a){Ka.call(this,0,t,e,i,n,r,s,a),this.type=\"ConeBufferGeometry\",this.parameters={radius:t,height:e,radialSegments:i,heightSegments:n,openEnded:r,thetaStart:s,thetaLength:a}}function eo(t,e,i,n){qi.call(this),this.type=\"CircleGeometry\",this.parameters={radius:t,segments:e,thetaStart:i,thetaLength:n},this.fromBufferGeometry(new io(t,e,i,n)),this.mergeVertices()}function io(t,e,i,n){on.call(this),this.type=\"CircleBufferGeometry\",this.parameters={radius:t,segments:e,thetaStart:i,thetaLength:n},t=t||1,e=void 0!==e?Math.max(3,e):8,i=void 0!==i?i:0,n=void 0!==n?n:2*Math.PI;var r,s,a=[],o=[],h=[],l=[],c=new ei,u=new Ke;for(o.push(0,0,0),h.push(0,0,1),l.push(.5,.5),s=0,r=3;s<=e;s++,r+=3){var p=i+s/e*n;c.x=t*Math.cos(p),c.y=t*Math.sin(p),o.push(c.x,c.y,c.z),h.push(0,0,1),u.x=(o[r]/t+1)/2,u.y=(o[r+1]/t+1)/2,l.push(u.x,u.y)}for(r=1;r<=e;r++)a.push(r,r+1,0);this.setIndex(a),this.addAttribute(\"position\",new en(o,3)),this.addAttribute(\"normal\",new en(h,3)),this.addAttribute(\"uv\",new en(l,2))}Va.prototype=Object.create(qi.prototype),Va.prototype.constructor=Va,Ua.prototype=Object.create(ka.prototype),Ua.prototype.constructor=Ua,Fa.prototype=Object.create(qi.prototype),Fa.prototype.constructor=Fa,Ha.prototype=Object.create(on.prototype),Ha.prototype.constructor=Ha,Ga.prototype=Object.create(qi.prototype),Ga.prototype.constructor=Ga,ja.prototype=Object.create(on.prototype),ja.prototype.constructor=ja,Wa.prototype=Object.create(qi.prototype),Wa.prototype.constructor=Wa,qa.prototype=Object.create(on.prototype),qa.prototype.constructor=qa,Xa.prototype=Object.create(qi.prototype),Xa.prototype.constructor=Xa,Xa.prototype.toJSON=function(){var t=qi.prototype.toJSON.call(this);return Ja(this.parameters.shapes,t)},Ya.prototype=Object.create(on.prototype),Ya.prototype.constructor=Ya,Ya.prototype.toJSON=function(){var t=on.prototype.toJSON.call(this);return Ja(this.parameters.shapes,t)},Za.prototype=Object.create(on.prototype),Za.prototype.constructor=Za,Qa.prototype=Object.create(qi.prototype),Qa.prototype.constructor=Qa,Ka.prototype=Object.create(on.prototype),Ka.prototype.constructor=Ka,$a.prototype=Object.create(Qa.prototype),$a.prototype.constructor=$a,to.prototype=Object.create(Ka.prototype),to.prototype.constructor=to,eo.prototype=Object.create(qi.prototype),eo.prototype.constructor=eo,io.prototype=Object.create(on.prototype),io.prototype.constructor=io;var no=Object.freeze({WireframeGeometry:Ws,ParametricGeometry:qs,ParametricBufferGeometry:Xs,TetrahedronGeometry:Zs,TetrahedronBufferGeometry:Qs,OctahedronGeometry:Ks,OctahedronBufferGeometry:$s,IcosahedronGeometry:ta,IcosahedronBufferGeometry:ea,DodecahedronGeometry:ia,DodecahedronBufferGeometry:na,PolyhedronGeometry:Ys,PolyhedronBufferGeometry:Js,TubeGeometry:ra,TubeBufferGeometry:sa,TorusKnotGeometry:aa,TorusKnotBufferGeometry:oa,TorusGeometry:ha,TorusBufferGeometry:la,TextGeometry:Va,TextBufferGeometry:Ua,SphereGeometry:Fa,SphereBufferGeometry:Ha,RingGeometry:Ga,RingBufferGeometry:ja,PlaneGeometry:cn,PlaneBufferGeometry:un,LatheGeometry:Wa,LatheBufferGeometry:qa,ShapeGeometry:Xa,ShapeBufferGeometry:Ya,ExtrudeGeometry:Oa,ExtrudeBufferGeometry:ka,EdgesGeometry:Za,ConeGeometry:$a,ConeBufferGeometry:to,CylinderGeometry:Qa,CylinderBufferGeometry:Ka,CircleGeometry:eo,CircleBufferGeometry:io,BoxGeometry:hn,BoxBufferGeometry:ln});function ro(t){En.call(this),this.type=\"ShadowMaterial\",this.color=new Ai(0),this.transparent=!0,this.setValues(t)}function so(t){Tn.call(this,t),this.type=\"RawShaderMaterial\"}function ao(t){En.call(this),this.defines={STANDARD:\"\"},this.type=\"MeshStandardMaterial\",this.color=new Ai(16777215),this.roughness=.5,this.metalness=.5,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Ai(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Je,this.normalScale=new Ke(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapIntensity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap=\"round\",this.wireframeLinejoin=\"round\",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(t)}function oo(t){ao.call(this),this.defines={PHYSICAL:\"\"},this.type=\"MeshPhysicalMaterial\",this.reflectivity=.5,this.clearCoat=0,this.clearCoatRoughness=0,this.setValues(t)}function ho(t){En.call(this),this.type=\"MeshPhongMaterial\",this.color=new Ai(16777215),this.specular=new Ai(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Ai(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Je,this.normalScale=new Ke(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=ut,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap=\"round\",this.wireframeLinejoin=\"round\",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(t)}function lo(t){ho.call(this),this.defines={TOON:\"\"},this.type=\"MeshToonMaterial\",this.gradientMap=null,this.setValues(t)}function co(t){En.call(this),this.type=\"MeshNormalMaterial\",this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Je,this.normalScale=new Ke(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(t)}function uo(t){En.call(this),this.type=\"MeshLambertMaterial\",this.color=new Ai(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Ai(0),this.emissiveIntensity=1,this.emissiveMap=null,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=ut,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap=\"round\",this.wireframeLinejoin=\"round\",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(t)}function po(t){En.call(this),this.defines={MATCAP:\"\"},this.type=\"MeshMatcapMaterial\",this.color=new Ai(16777215),this.matcap=null,this.map=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Je,this.normalScale=new Ke(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.lights=!1,this.setValues(t)}function mo(t){Os.call(this),this.type=\"LineDashedMaterial\",this.scale=1,this.dashSize=3,this.gapSize=1,this.setValues(t)}ro.prototype=Object.create(En.prototype),ro.prototype.constructor=ro,ro.prototype.isShadowMaterial=!0,ro.prototype.copy=function(t){return En.prototype.copy.call(this,t),this.color.copy(t.color),this},so.prototype=Object.create(Tn.prototype),so.prototype.constructor=so,so.prototype.isRawShaderMaterial=!0,ao.prototype=Object.create(En.prototype),ao.prototype.constructor=ao,ao.prototype.isMeshStandardMaterial=!0,ao.prototype.copy=function(t){return En.prototype.copy.call(this,t),this.defines={STANDARD:\"\"},this.color.copy(t.color),this.roughness=t.roughness,this.metalness=t.metalness,this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.roughnessMap=t.roughnessMap,this.metalnessMap=t.metalnessMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.envMapIntensity=t.envMapIntensity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this},oo.prototype=Object.create(ao.prototype),oo.prototype.constructor=oo,oo.prototype.isMeshPhysicalMaterial=!0,oo.prototype.copy=function(t){return ao.prototype.copy.call(this,t),this.defines={PHYSICAL:\"\"},this.reflectivity=t.reflectivity,this.clearCoat=t.clearCoat,this.clearCoatRoughness=t.clearCoatRoughness,this},ho.prototype=Object.create(En.prototype),ho.prototype.constructor=ho,ho.prototype.isMeshPhongMaterial=!0,ho.prototype.copy=function(t){return En.prototype.copy.call(this,t),this.color.copy(t.color),this.specular.copy(t.specular),this.shininess=t.shininess,this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this},lo.prototype=Object.create(ho.prototype),lo.prototype.constructor=lo,lo.prototype.isMeshToonMaterial=!0,lo.prototype.copy=function(t){return ho.prototype.copy.call(this,t),this.gradientMap=t.gradientMap,this},co.prototype=Object.create(En.prototype),co.prototype.constructor=co,co.prototype.isMeshNormalMaterial=!0,co.prototype.copy=function(t){return En.prototype.copy.call(this,t),this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this},uo.prototype=Object.create(En.prototype),uo.prototype.constructor=uo,uo.prototype.isMeshLambertMaterial=!0,uo.prototype.copy=function(t){return En.prototype.copy.call(this,t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this},po.prototype=Object.create(En.prototype),po.prototype.constructor=po,po.prototype.isMeshMatcapMaterial=!0,po.prototype.copy=function(t){return En.prototype.copy.call(this,t),this.defines={MATCAP:\"\"},this.color.copy(t.color),this.matcap=t.matcap,this.map=t.map,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.alphaMap=t.alphaMap,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this},mo.prototype=Object.create(Os.prototype),mo.prototype.constructor=mo,mo.prototype.isLineDashedMaterial=!0,mo.prototype.copy=function(t){return Os.prototype.copy.call(this,t),this.scale=t.scale,this.dashSize=t.dashSize,this.gapSize=t.gapSize,this};var fo=Object.freeze({ShadowMaterial:ro,SpriteMaterial:Ps,RawShaderMaterial:so,ShaderMaterial:Tn,PointsMaterial:Vs,MeshPhysicalMaterial:oo,MeshStandardMaterial:ao,MeshPhongMaterial:ho,MeshToonMaterial:lo,MeshNormalMaterial:co,MeshLambertMaterial:uo,MeshDepthMaterial:is,MeshDistanceMaterial:ns,MeshBasicMaterial:Pn,MeshMatcapMaterial:po,LineDashedMaterial:mo,LineBasicMaterial:Os,Material:En}),vo={arraySlice:function(t,e,i){return vo.isTypedArray(t)?new t.constructor(t.subarray(e,void 0!==i?i:t.length)):t.slice(e,i)},convertArray:function(t,e,i){return!t||!i&&t.constructor===e?t:\"number\"==typeof e.BYTES_PER_ELEMENT?new e(t):Array.prototype.slice.call(t)},isTypedArray:function(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)},getKeyframeOrder:function(t){for(var e=t.length,i=new Array(e),n=0;n!==e;++n)i[n]=n;return i.sort(function(e,i){return t[e]-t[i]}),i},sortedArray:function(t,e,i){for(var n=t.length,r=new t.constructor(n),s=0,a=0;a!==n;++s)for(var o=i[s]*e,h=0;h!==e;++h)r[a++]=t[o+h];return r},flattenJSON:function(t,e,i,n){for(var r=1,s=t[0];void 0!==s&&void 0===s[n];)s=t[r++];if(void 0!==s){var a=s[n];if(void 0!==a)if(Array.isArray(a))do{void 0!==(a=s[n])&&(e.push(s.time),i.push.apply(i,a)),s=t[r++]}while(void 0!==s);else if(void 0!==a.toArray)do{void 0!==(a=s[n])&&(e.push(s.time),a.toArray(i,i.length)),s=t[r++]}while(void 0!==s);else do{void 0!==(a=s[n])&&(e.push(s.time),i.push(a)),s=t[r++]}while(void 0!==s)}}};function go(t,e,i,n){this.parameterPositions=t,this._cachedIndex=0,this.resultBuffer=void 0!==n?n:new e.constructor(i),this.sampleValues=e,this.valueSize=i}function yo(t,e,i,n){go.call(this,t,e,i,n),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0}function xo(t,e,i,n){go.call(this,t,e,i,n)}function bo(t,e,i,n){go.call(this,t,e,i,n)}function wo(t,e,i,n){if(void 0===t)throw new Error(\"THREE.KeyframeTrack: track name is undefined\");if(void 0===e||0===e.length)throw new Error(\"THREE.KeyframeTrack: no keyframes in track named \"+t);this.name=t,this.times=vo.convertArray(e,this.TimeBufferType),this.values=vo.convertArray(i,this.ValueBufferType),this.setInterpolation(n||this.DefaultInterpolation)}function Mo(t,e,i){wo.call(this,t,e,i)}function _o(t,e,i,n){wo.call(this,t,e,i,n)}function So(t,e,i,n){wo.call(this,t,e,i,n)}function Eo(t,e,i,n){go.call(this,t,e,i,n)}function To(t,e,i,n){wo.call(this,t,e,i,n)}function Lo(t,e,i,n){wo.call(this,t,e,i,n)}function Ao(t,e,i,n){wo.call(this,t,e,i,n)}function Po(t,e,i){this.name=t,this.tracks=i,this.duration=void 0!==e?e:-1,this.uuid=Qe.generateUUID(),this.duration<0&&this.resetDuration()}function zo(t){if(void 0===t.type)throw new Error(\"THREE.KeyframeTrack: track type undefined, can not parse\");var e=function(t){switch(t.toLowerCase()){case\"scalar\":case\"double\":case\"float\":case\"number\":case\"integer\":return So;case\"vector\":case\"vector2\":case\"vector3\":case\"vector4\":return Ao;case\"color\":return _o;case\"quaternion\":return To;case\"bool\":case\"boolean\":return Mo;case\"string\":return Lo}throw new Error(\"THREE.KeyframeTrack: Unsupported typeName: \"+t)}(t.type);if(void 0===t.times){var i=[],n=[];vo.flattenJSON(t.keys,i,n,\"value\"),t.times=i,t.values=n}return void 0!==e.parse?e.parse(t):new e(t.name,t.times,t.values,t.interpolation)}Object.assign(go.prototype,{evaluate:function(t){var e=this.parameterPositions,i=this._cachedIndex,n=e[i],r=e[i-1];t:{e:{var s;i:{n:if(!(t<n)){for(var a=i+2;;){if(void 0===n){if(t<r)break n;return i=e.length,this._cachedIndex=i,this.afterEnd_(i-1,t,r)}if(i===a)break;if(r=n,t<(n=e[++i]))break e}s=e.length;break i}if(t>=r)break t;var o=e[1];t<o&&(i=2,r=o);for(a=i-2;;){if(void 0===r)return this._cachedIndex=0,this.beforeStart_(0,t,n);if(i===a)break;if(n=r,t>=(r=e[--i-1]))break e}s=i,i=0}for(;i<s;){var h=i+s>>>1;t<e[h]?s=h:i=h+1}if(n=e[i],void 0===(r=e[i-1]))return this._cachedIndex=0,this.beforeStart_(0,t,n);if(void 0===n)return i=e.length,this._cachedIndex=i,this.afterEnd_(i-1,r,t)}this._cachedIndex=i,this.intervalChanged_(i,r,n)}return this.interpolate_(i,r,t,n)},settings:null,DefaultSettings_:{},getSettings_:function(){return this.settings||this.DefaultSettings_},copySampleValue_:function(t){for(var e=this.resultBuffer,i=this.sampleValues,n=this.valueSize,r=t*n,s=0;s!==n;++s)e[s]=i[r+s];return e},interpolate_:function(){throw new Error(\"call to abstract method\")},intervalChanged_:function(){}}),\n//!\\ DECLARE ALIAS AFTER assign prototype !\nObject.assign(go.prototype,{beforeStart_:go.prototype.copySampleValue_,afterEnd_:go.prototype.copySampleValue_}),yo.prototype=Object.assign(Object.create(go.prototype),{constructor:yo,DefaultSettings_:{endingStart:Ce,endingEnd:Ce},intervalChanged_:function(t,e,i){var n=this.parameterPositions,r=t-2,s=t+1,a=n[r],o=n[s];if(void 0===a)switch(this.getSettings_().endingStart){case Ie:r=t,a=2*e-i;break;case Oe:a=e+n[r=n.length-2]-n[r+1];break;default:r=t,a=i}if(void 0===o)switch(this.getSettings_().endingEnd){case Ie:s=t,o=2*i-e;break;case Oe:s=1,o=i+n[1]-n[0];break;default:s=t-1,o=e}var h=.5*(i-e),l=this.valueSize;this._weightPrev=h/(e-a),this._weightNext=h/(o-i),this._offsetPrev=r*l,this._offsetNext=s*l},interpolate_:function(t,e,i,n){for(var r=this.resultBuffer,s=this.sampleValues,a=this.valueSize,o=t*a,h=o-a,l=this._offsetPrev,c=this._offsetNext,u=this._weightPrev,p=this._weightNext,d=(i-e)/(n-e),m=d*d,f=m*d,v=-u*f+2*u*m-u*d,g=(1+u)*f+(-1.5-2*u)*m+(-.5+u)*d+1,y=(-1-p)*f+(1.5+p)*m+.5*d,x=p*f-p*m,b=0;b!==a;++b)r[b]=v*s[l+b]+g*s[h+b]+y*s[o+b]+x*s[c+b];return r}}),xo.prototype=Object.assign(Object.create(go.prototype),{constructor:xo,interpolate_:function(t,e,i,n){for(var r=this.resultBuffer,s=this.sampleValues,a=this.valueSize,o=t*a,h=o-a,l=(i-e)/(n-e),c=1-l,u=0;u!==a;++u)r[u]=s[h+u]*c+s[o+u]*l;return r}}),bo.prototype=Object.assign(Object.create(go.prototype),{constructor:bo,interpolate_:function(t){return this.copySampleValue_(t-1)}}),Object.assign(wo,{toJSON:function(t){var e,i=t.constructor;if(void 0!==i.toJSON)e=i.toJSON(t);else{e={name:t.name,times:vo.convertArray(t.times,Array),values:vo.convertArray(t.values,Array)};var n=t.getInterpolation();n!==t.DefaultInterpolation&&(e.interpolation=n)}return e.type=t.ValueTypeName,e}}),Object.assign(wo.prototype,{constructor:wo,TimeBufferType:Float32Array,ValueBufferType:Float32Array,DefaultInterpolation:Ne,InterpolantFactoryMethodDiscrete:function(t){return new bo(this.times,this.values,this.getValueSize(),t)},InterpolantFactoryMethodLinear:function(t){return new xo(this.times,this.values,this.getValueSize(),t)},InterpolantFactoryMethodSmooth:function(t){return new yo(this.times,this.values,this.getValueSize(),t)},setInterpolation:function(t){var e;switch(t){case ze:e=this.InterpolantFactoryMethodDiscrete;break;case Ne:e=this.InterpolantFactoryMethodLinear;break;case Re:e=this.InterpolantFactoryMethodSmooth}if(void 0===e){var i=\"unsupported interpolation for \"+this.ValueTypeName+\" keyframe track named \"+this.name;if(void 0===this.createInterpolant){if(t===this.DefaultInterpolation)throw new Error(i);this.setInterpolation(this.DefaultInterpolation)}return console.warn(\"THREE.KeyframeTrack:\",i),this}return this.createInterpolant=e,this},getInterpolation:function(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return ze;case this.InterpolantFactoryMethodLinear:return Ne;case this.InterpolantFactoryMethodSmooth:return Re}},getValueSize:function(){return this.values.length/this.times.length},shift:function(t){if(0!==t)for(var e=this.times,i=0,n=e.length;i!==n;++i)e[i]+=t;return this},scale:function(t){if(1!==t)for(var e=this.times,i=0,n=e.length;i!==n;++i)e[i]*=t;return this},trim:function(t,e){for(var i=this.times,n=i.length,r=0,s=n-1;r!==n&&i[r]<t;)++r;for(;-1!==s&&i[s]>e;)--s;if(++s,0!==r||s!==n){r>=s&&(r=(s=Math.max(s,1))-1);var a=this.getValueSize();this.times=vo.arraySlice(i,r,s),this.values=vo.arraySlice(this.values,r*a,s*a)}return this},validate:function(){var t=!0,e=this.getValueSize();e-Math.floor(e)!=0&&(console.error(\"THREE.KeyframeTrack: Invalid value size in track.\",this),t=!1);var i=this.times,n=this.values,r=i.length;0===r&&(console.error(\"THREE.KeyframeTrack: Track is empty.\",this),t=!1);for(var s=null,a=0;a!==r;a++){var o=i[a];if(\"number\"==typeof o&&isNaN(o)){console.error(\"THREE.KeyframeTrack: Time is not a valid number.\",this,a,o),t=!1;break}if(null!==s&&s>o){console.error(\"THREE.KeyframeTrack: Out of order keys.\",this,a,o,s),t=!1;break}s=o}if(void 0!==n&&vo.isTypedArray(n)){a=0;for(var h=n.length;a!==h;++a){var l=n[a];if(isNaN(l)){console.error(\"THREE.KeyframeTrack: Value is not a valid number.\",this,a,l),t=!1;break}}}return t},optimize:function(){for(var t=this.times,e=this.values,i=this.getValueSize(),n=this.getInterpolation()===Re,r=1,s=t.length-1,a=1;a<s;++a){var o=!1,h=t[a];if(h!==t[a+1]&&(1!==a||h!==h[0]))if(n)o=!0;else for(var l=a*i,c=l-i,u=l+i,p=0;p!==i;++p){var d=e[l+p];if(d!==e[c+p]||d!==e[u+p]){o=!0;break}}if(o){if(a!==r){t[r]=t[a];var m=a*i,f=r*i;for(p=0;p!==i;++p)e[f+p]=e[m+p]}++r}}if(s>0){t[r]=t[s];for(m=s*i,f=r*i,p=0;p!==i;++p)e[f+p]=e[m+p];++r}return r!==t.length&&(this.times=vo.arraySlice(t,0,r),this.values=vo.arraySlice(e,0,r*i)),this},clone:function(){var t=vo.arraySlice(this.times,0),e=vo.arraySlice(this.values,0),i=new(0,this.constructor)(this.name,t,e);return i.createInterpolant=this.createInterpolant,i}}),Mo.prototype=Object.assign(Object.create(wo.prototype),{constructor:Mo,ValueTypeName:\"bool\",ValueBufferType:Array,DefaultInterpolation:ze,InterpolantFactoryMethodLinear:void 0,InterpolantFactoryMethodSmooth:void 0}),_o.prototype=Object.assign(Object.create(wo.prototype),{constructor:_o,ValueTypeName:\"color\"}),So.prototype=Object.assign(Object.create(wo.prototype),{constructor:So,ValueTypeName:\"number\"}),Eo.prototype=Object.assign(Object.create(go.prototype),{constructor:Eo,interpolate_:function(t,e,i,n){for(var r=this.resultBuffer,s=this.sampleValues,a=this.valueSize,o=t*a,h=(i-e)/(n-e),l=o+a;o!==l;o+=4)ti.slerpFlat(r,0,s,o-a,s,o,h);return r}}),To.prototype=Object.assign(Object.create(wo.prototype),{constructor:To,ValueTypeName:\"quaternion\",DefaultInterpolation:Ne,InterpolantFactoryMethodLinear:function(t){return new Eo(this.times,this.values,this.getValueSize(),t)},InterpolantFactoryMethodSmooth:void 0}),Lo.prototype=Object.assign(Object.create(wo.prototype),{constructor:Lo,ValueTypeName:\"string\",ValueBufferType:Array,DefaultInterpolation:ze,InterpolantFactoryMethodLinear:void 0,InterpolantFactoryMethodSmooth:void 0}),Ao.prototype=Object.assign(Object.create(wo.prototype),{constructor:Ao,ValueTypeName:\"vector\"}),Object.assign(Po,{parse:function(t){for(var e=[],i=t.tracks,n=1/(t.fps||1),r=0,s=i.length;r!==s;++r)e.push(zo(i[r]).scale(n));return new Po(t.name,t.duration,e)},toJSON:function(t){for(var e=[],i=t.tracks,n={name:t.name,duration:t.duration,tracks:e,uuid:t.uuid},r=0,s=i.length;r!==s;++r)e.push(wo.toJSON(i[r]));return n},CreateFromMorphTargetSequence:function(t,e,i,n){for(var r=e.length,s=[],a=0;a<r;a++){var o=[],h=[];o.push((a+r-1)%r,a,(a+1)%r),h.push(0,1,0);var l=vo.getKeyframeOrder(o);o=vo.sortedArray(o,1,l),h=vo.sortedArray(h,1,l),n||0!==o[0]||(o.push(r),h.push(h[0])),s.push(new So(\".morphTargetInfluences[\"+e[a].name+\"]\",o,h).scale(1/i))}return new Po(t,-1,s)},findByName:function(t,e){var i=t;if(!Array.isArray(t)){var n=t;i=n.geometry&&n.geometry.animations||n.animations}for(var r=0;r<i.length;r++)if(i[r].name===e)return i[r];return null},CreateClipsFromMorphTargetSequences:function(t,e,i){for(var n={},r=/^([\\w-]*?)([\\d]+)$/,s=0,a=t.length;s<a;s++){var o=t[s],h=o.name.match(r);if(h&&h.length>1){var l=n[u=h[1]];l||(n[u]=l=[]),l.push(o)}}var c=[];for(var u in n)c.push(Po.CreateFromMorphTargetSequence(u,n[u],e,i));return c},parseAnimation:function(t,e){if(!t)return console.error(\"THREE.AnimationClip: No animation in JSONLoader data.\"),null;for(var i=function(t,e,i,n,r){if(0!==i.length){var s=[],a=[];vo.flattenJSON(i,s,a,n),0!==s.length&&r.push(new t(e,s,a))}},n=[],r=t.name||\"default\",s=t.length||-1,a=t.fps||30,o=t.hierarchy||[],h=0;h<o.length;h++){var l=o[h].keys;if(l&&0!==l.length)if(l[0].morphTargets){for(var c={},u=0;u<l.length;u++)if(l[u].morphTargets)for(var p=0;p<l[u].morphTargets.length;p++)c[l[u].morphTargets[p]]=-1;for(var d in c){var m=[],f=[];for(p=0;p!==l[u].morphTargets.length;++p){var v=l[u];m.push(v.time),f.push(v.morphTarget===d?1:0)}n.push(new So(\".morphTargetInfluence[\"+d+\"]\",m,f))}s=c.length*(a||1)}else{var g=\".bones[\"+e[h].name+\"]\";i(Ao,g+\".position\",l,\"pos\",n),i(To,g+\".quaternion\",l,\"rot\",n),i(Ao,g+\".scale\",l,\"scl\",n)}}return 0===n.length?null:new Po(r,s,n)}}),Object.assign(Po.prototype,{resetDuration:function(){for(var t=0,e=0,i=this.tracks.length;e!==i;++e){var n=this.tracks[e];t=Math.max(t,n.times[n.times.length-1])}return this.duration=t,this},trim:function(){for(var t=0;t<this.tracks.length;t++)this.tracks[t].trim(0,this.duration);return this},validate:function(){for(var t=!0,e=0;e<this.tracks.length;e++)t=t&&this.tracks[e].validate();return t},optimize:function(){for(var t=0;t<this.tracks.length;t++)this.tracks[t].optimize();return this},clone:function(){for(var t=[],e=0;e<this.tracks.length;e++)t.push(this.tracks[e].clone());return new Po(this.name,this.duration,t)}});var No={enabled:!1,files:{},add:function(t,e){!1!==this.enabled&&(this.files[t]=e)},get:function(t){if(!1!==this.enabled)return this.files[t]},remove:function(t){delete this.files[t]},clear:function(){this.files={}}};function Ro(t,e,i){var n=this,r=!1,s=0,a=0,o=void 0;this.onStart=void 0,this.onLoad=t,this.onProgress=e,this.onError=i,this.itemStart=function(t){a++,!1===r&&void 0!==n.onStart&&n.onStart(t,s,a),r=!0},this.itemEnd=function(t){s++,void 0!==n.onProgress&&n.onProgress(t,s,a),s===a&&(r=!1,void 0!==n.onLoad&&n.onLoad())},this.itemError=function(t){void 0!==n.onError&&n.onError(t)},this.resolveURL=function(t){return o?o(t):t},this.setURLModifier=function(t){return o=t,this}}var Co=new Ro,Io={};function Oo(t){this.manager=void 0!==t?t:Co}function ko(t){this.manager=void 0!==t?t:Co}function Do(t){this.manager=void 0!==t?t:Co,this._parser=null}function Bo(t){this.manager=void 0!==t?t:Co,this._parser=null}function Vo(t){this.manager=void 0!==t?t:Co}function Uo(t){this.manager=void 0!==t?t:Co}function Fo(t){this.manager=void 0!==t?t:Co}function Ho(){this.type=\"Curve\",this.arcLengthDivisions=200}function Go(t,e,i,n,r,s,a,o){Ho.call(this),this.type=\"EllipseCurve\",this.aX=t||0,this.aY=e||0,this.xRadius=i||1,this.yRadius=n||1,this.aStartAngle=r||0,this.aEndAngle=s||2*Math.PI,this.aClockwise=a||!1,this.aRotation=o||0}function jo(t,e,i,n,r,s){Go.call(this,t,e,i,i,n,r,s),this.type=\"ArcCurve\"}function Wo(){var t=0,e=0,i=0,n=0;function r(r,s,a,o){t=r,e=a,i=-3*r+3*s-2*a-o,n=2*r-2*s+a+o}return{initCatmullRom:function(t,e,i,n,s){r(e,i,s*(i-t),s*(n-e))},initNonuniformCatmullRom:function(t,e,i,n,s,a,o){var h=(e-t)/s-(i-t)/(s+a)+(i-e)/a,l=(i-e)/a-(n-e)/(a+o)+(n-i)/o;r(e,i,h*=a,l*=a)},calc:function(r){var s=r*r;return t+e*r+i*s+n*(s*r)}}}Object.assign(Oo.prototype,{load:function(t,e,i,n){void 0===t&&(t=\"\"),void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);var r=this,s=No.get(t);if(void 0!==s)return r.manager.itemStart(t),setTimeout(function(){e&&e(s),r.manager.itemEnd(t)},0),s;if(void 0===Io[t]){var a=t.match(/^data:(.*?)(;base64)?,(.*)$/);if(a){var o=a[1],h=!!a[2],l=a[3];l=decodeURIComponent(l),h&&(l=atob(l));try{var c,u=(this.responseType||\"\").toLowerCase();switch(u){case\"arraybuffer\":case\"blob\":for(var p=new Uint8Array(l.length),d=0;d<l.length;d++)p[d]=l.charCodeAt(d);c=\"blob\"===u?new Blob([p.buffer],{type:o}):p.buffer;break;case\"document\":var m=new DOMParser;c=m.parseFromString(l,o);break;case\"json\":c=JSON.parse(l);break;default:c=l}setTimeout(function(){e&&e(c),r.manager.itemEnd(t)},0)}catch(e){setTimeout(function(){n&&n(e),r.manager.itemError(t),r.manager.itemEnd(t)},0)}}else{Io[t]=[],Io[t].push({onLoad:e,onProgress:i,onError:n});var f=new XMLHttpRequest;for(var v in f.open(\"GET\",t,!0),f.addEventListener(\"load\",function(e){var i=this.response;No.add(t,i);var n=Io[t];if(delete Io[t],200===this.status||0===this.status){0===this.status&&console.warn(\"THREE.FileLoader: HTTP Status 0 received.\");for(var s=0,a=n.length;s<a;s++){(o=n[s]).onLoad&&o.onLoad(i)}r.manager.itemEnd(t)}else{for(s=0,a=n.length;s<a;s++){var o;(o=n[s]).onError&&o.onError(e)}r.manager.itemError(t),r.manager.itemEnd(t)}},!1),f.addEventListener(\"progress\",function(e){for(var i=Io[t],n=0,r=i.length;n<r;n++){var s=i[n];s.onProgress&&s.onProgress(e)}},!1),f.addEventListener(\"error\",function(e){var i=Io[t];delete Io[t];for(var n=0,s=i.length;n<s;n++){var a=i[n];a.onError&&a.onError(e)}r.manager.itemError(t),r.manager.itemEnd(t)},!1),f.addEventListener(\"abort\",function(e){var i=Io[t];delete Io[t];for(var n=0,s=i.length;n<s;n++){var a=i[n];a.onError&&a.onError(e)}r.manager.itemError(t),r.manager.itemEnd(t)},!1),void 0!==this.responseType&&(f.responseType=this.responseType),void 0!==this.withCredentials&&(f.withCredentials=this.withCredentials),f.overrideMimeType&&f.overrideMimeType(void 0!==this.mimeType?this.mimeType:\"text/plain\"),this.requestHeader)f.setRequestHeader(v,this.requestHeader[v]);f.send(null)}return r.manager.itemStart(t),f}Io[t].push({onLoad:e,onProgress:i,onError:n})},setPath:function(t){return this.path=t,this},setResponseType:function(t){return this.responseType=t,this},setWithCredentials:function(t){return this.withCredentials=t,this},setMimeType:function(t){return this.mimeType=t,this},setRequestHeader:function(t){return this.requestHeader=t,this}}),Object.assign(ko.prototype,{load:function(t,e,i,n){var r=this,s=new Oo(r.manager);s.setPath(r.path),s.load(t,function(t){e(r.parse(JSON.parse(t)))},i,n)},parse:function(t,e){for(var i=[],n=0;n<t.length;n++){var r=Po.parse(t[n]);i.push(r)}e(i)},setPath:function(t){return this.path=t,this}}),Object.assign(Do.prototype,{load:function(t,e,i,n){var r=this,s=[],a=new Hs;a.image=s;var o=new Oo(this.manager);function h(h){o.load(t[h],function(t){var i=r._parser(t,!0);s[h]={width:i.width,height:i.height,format:i.format,mipmaps:i.mipmaps},6===(l+=1)&&(1===i.mipmapCount&&(a.minFilter=It),a.format=i.format,a.needsUpdate=!0,e&&e(a))},i,n)}if(o.setPath(this.path),o.setResponseType(\"arraybuffer\"),Array.isArray(t))for(var l=0,c=0,u=t.length;c<u;++c)h(c);else o.load(t,function(t){var i=r._parser(t,!0);if(i.isCubemap)for(var n=i.mipmaps.length/i.mipmapCount,o=0;o<n;o++){s[o]={mipmaps:[]};for(var h=0;h<i.mipmapCount;h++)s[o].mipmaps.push(i.mipmaps[o*i.mipmapCount+h]),s[o].format=i.format,s[o].width=i.width,s[o].height=i.height}else a.image.width=i.width,a.image.height=i.height,a.mipmaps=i.mipmaps;1===i.mipmapCount&&(a.minFilter=It),a.format=i.format,a.needsUpdate=!0,e&&e(a)},i,n);return a},setPath:function(t){return this.path=t,this}}),Object.assign(Bo.prototype,{load:function(t,e,i,n){var r=this,s=new fi,a=new Oo(this.manager);return a.setResponseType(\"arraybuffer\"),a.setPath(this.path),a.load(t,function(t){var i=r._parser(t);i&&(void 0!==i.image?s.image=i.image:void 0!==i.data&&(s.image.width=i.width,s.image.height=i.height,s.image.data=i.data),s.wrapS=void 0!==i.wrapS?i.wrapS:Pt,s.wrapT=void 0!==i.wrapT?i.wrapT:Pt,s.magFilter=void 0!==i.magFilter?i.magFilter:It,s.minFilter=void 0!==i.minFilter?i.minFilter:kt,s.anisotropy=void 0!==i.anisotropy?i.anisotropy:1,void 0!==i.format&&(s.format=i.format),void 0!==i.type&&(s.type=i.type),void 0!==i.mipmaps&&(s.mipmaps=i.mipmaps),1===i.mipmapCount&&(s.minFilter=It),s.needsUpdate=!0,e&&e(s,i))},i,n),s},setPath:function(t){return this.path=t,this}}),Object.assign(Vo.prototype,{crossOrigin:\"anonymous\",load:function(t,e,i,n){void 0===t&&(t=\"\"),void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);var r=this,s=No.get(t);if(void 0!==s)return r.manager.itemStart(t),setTimeout(function(){e&&e(s),r.manager.itemEnd(t)},0),s;var a=document.createElementNS(\"http://www.w3.org/1999/xhtml\",\"img\");function o(){a.removeEventListener(\"load\",o,!1),a.removeEventListener(\"error\",h,!1),No.add(t,this),e&&e(this),r.manager.itemEnd(t)}function h(e){a.removeEventListener(\"load\",o,!1),a.removeEventListener(\"error\",h,!1),n&&n(e),r.manager.itemError(t),r.manager.itemEnd(t)}return a.addEventListener(\"load\",o,!1),a.addEventListener(\"error\",h,!1),\"data:\"!==t.substr(0,5)&&void 0!==this.crossOrigin&&(a.crossOrigin=this.crossOrigin),r.manager.itemStart(t),a.src=t,a},setCrossOrigin:function(t){return this.crossOrigin=t,this},setPath:function(t){return this.path=t,this}}),Object.assign(Uo.prototype,{crossOrigin:\"anonymous\",load:function(t,e,i,n){var r=new Hn,s=new Vo(this.manager);s.setCrossOrigin(this.crossOrigin),s.setPath(this.path);var a=0;function o(i){s.load(t[i],function(t){r.images[i]=t,6===++a&&(r.needsUpdate=!0,e&&e(r))},void 0,n)}for(var h=0;h<t.length;++h)o(h);return r},setCrossOrigin:function(t){return this.crossOrigin=t,this},setPath:function(t){return this.path=t,this}}),Object.assign(Fo.prototype,{crossOrigin:\"anonymous\",load:function(t,e,i,n){var r=new ci,s=new Vo(this.manager);return s.setCrossOrigin(this.crossOrigin),s.setPath(this.path),s.load(t,function(i){r.image=i;var n=t.search(/\\.jpe?g($|\\?)/i)>0||0===t.search(/^data\\:image\\/jpeg/);r.format=n?Zt:Qt,r.needsUpdate=!0,void 0!==e&&e(r)},i,n),r},setCrossOrigin:function(t){return this.crossOrigin=t,this},setPath:function(t){return this.path=t,this}}),Object.assign(Ho.prototype,{getPoint:function(){return console.warn(\"THREE.Curve: .getPoint() not implemented.\"),null},getPointAt:function(t,e){var i=this.getUtoTmapping(t);return this.getPoint(i,e)},getPoints:function(t){void 0===t&&(t=5);for(var e=[],i=0;i<=t;i++)e.push(this.getPoint(i/t));return e},getSpacedPoints:function(t){void 0===t&&(t=5);for(var e=[],i=0;i<=t;i++)e.push(this.getPointAt(i/t));return e},getLength:function(){var t=this.getLengths();return t[t.length-1]},getLengths:function(t){if(void 0===t&&(t=this.arcLengthDivisions),this.cacheArcLengths&&this.cacheArcLengths.length===t+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;var e,i,n=[],r=this.getPoint(0),s=0;for(n.push(0),i=1;i<=t;i++)s+=(e=this.getPoint(i/t)).distanceTo(r),n.push(s),r=e;return this.cacheArcLengths=n,n},updateArcLengths:function(){this.needsUpdate=!0,this.getLengths()},getUtoTmapping:function(t,e){var i,n=this.getLengths(),r=0,s=n.length;i=e||t*n[s-1];for(var a,o=0,h=s-1;o<=h;)if((a=n[r=Math.floor(o+(h-o)/2)]-i)<0)o=r+1;else{if(!(a>0)){h=r;break}h=r-1}if(n[r=h]===i)return r/(s-1);var l=n[r];return(r+(i-l)/(n[r+1]-l))/(s-1)},getTangent:function(t){var e=t-1e-4,i=t+1e-4;e<0&&(e=0),i>1&&(i=1);var n=this.getPoint(e);return this.getPoint(i).clone().sub(n).normalize()},getTangentAt:function(t){var e=this.getUtoTmapping(t);return this.getTangent(e)},computeFrenetFrames:function(t,e){var i,n,r,s=new ei,a=[],o=[],h=[],l=new ei,c=new $e;for(i=0;i<=t;i++)n=i/t,a[i]=this.getTangentAt(n),a[i].normalize();o[0]=new ei,h[0]=new ei;var u=Number.MAX_VALUE,p=Math.abs(a[0].x),d=Math.abs(a[0].y),m=Math.abs(a[0].z);for(p<=u&&(u=p,s.set(1,0,0)),d<=u&&(u=d,s.set(0,1,0)),m<=u&&s.set(0,0,1),l.crossVectors(a[0],s).normalize(),o[0].crossVectors(a[0],l),h[0].crossVectors(a[0],o[0]),i=1;i<=t;i++)o[i]=o[i-1].clone(),h[i]=h[i-1].clone(),l.crossVectors(a[i-1],a[i]),l.length()>Number.EPSILON&&(l.normalize(),r=Math.acos(Qe.clamp(a[i-1].dot(a[i]),-1,1)),o[i].applyMatrix4(c.makeRotationAxis(l,r))),h[i].crossVectors(a[i],o[i]);if(!0===e)for(r=Math.acos(Qe.clamp(o[0].dot(o[t]),-1,1)),r/=t,a[0].dot(l.crossVectors(o[0],o[t]))>0&&(r=-r),i=1;i<=t;i++)o[i].applyMatrix4(c.makeRotationAxis(a[i],r*i)),h[i].crossVectors(a[i],o[i]);return{tangents:a,normals:o,binormals:h}},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.arcLengthDivisions=t.arcLengthDivisions,this},toJSON:function(){var t={metadata:{version:4.5,type:\"Curve\",generator:\"Curve.toJSON\"}};return t.arcLengthDivisions=this.arcLengthDivisions,t.type=this.type,t},fromJSON:function(t){return this.arcLengthDivisions=t.arcLengthDivisions,this}}),Go.prototype=Object.create(Ho.prototype),Go.prototype.constructor=Go,Go.prototype.isEllipseCurve=!0,Go.prototype.getPoint=function(t,e){for(var i=e||new Ke,n=2*Math.PI,r=this.aEndAngle-this.aStartAngle,s=Math.abs(r)<Number.EPSILON;r<0;)r+=n;for(;r>n;)r-=n;r<Number.EPSILON&&(r=s?0:n),!0!==this.aClockwise||s||(r===n?r=-n:r-=n);var a=this.aStartAngle+t*r,o=this.aX+this.xRadius*Math.cos(a),h=this.aY+this.yRadius*Math.sin(a);if(0!==this.aRotation){var l=Math.cos(this.aRotation),c=Math.sin(this.aRotation),u=o-this.aX,p=h-this.aY;o=u*l-p*c+this.aX,h=u*c+p*l+this.aY}return i.set(o,h)},Go.prototype.copy=function(t){return Ho.prototype.copy.call(this,t),this.aX=t.aX,this.aY=t.aY,this.xRadius=t.xRadius,this.yRadius=t.yRadius,this.aStartAngle=t.aStartAngle,this.aEndAngle=t.aEndAngle,this.aClockwise=t.aClockwise,this.aRotation=t.aRotation,this},Go.prototype.toJSON=function(){var t=Ho.prototype.toJSON.call(this);return t.aX=this.aX,t.aY=this.aY,t.xRadius=this.xRadius,t.yRadius=this.yRadius,t.aStartAngle=this.aStartAngle,t.aEndAngle=this.aEndAngle,t.aClockwise=this.aClockwise,t.aRotation=this.aRotation,t},Go.prototype.fromJSON=function(t){return Ho.prototype.fromJSON.call(this,t),this.aX=t.aX,this.aY=t.aY,this.xRadius=t.xRadius,this.yRadius=t.yRadius,this.aStartAngle=t.aStartAngle,this.aEndAngle=t.aEndAngle,this.aClockwise=t.aClockwise,this.aRotation=t.aRotation,this},jo.prototype=Object.create(Go.prototype),jo.prototype.constructor=jo,jo.prototype.isArcCurve=!0;var qo=new ei,Xo=new Wo,Yo=new Wo,Jo=new Wo;function Zo(t,e,i,n){Ho.call(this),this.type=\"CatmullRomCurve3\",this.points=t||[],this.closed=e||!1,this.curveType=i||\"centripetal\",this.tension=n||.5}function Qo(t,e,i,n,r){var s=.5*(n-e),a=.5*(r-i),o=t*t;return(2*i-2*n+s+a)*(t*o)+(-3*i+3*n-2*s-a)*o+s*t+i}function Ko(t,e,i,n){return function(t,e){var i=1-t;return i*i*e}(t,e)+function(t,e){return 2*(1-t)*t*e}(t,i)+function(t,e){return t*t*e}(t,n)}function $o(t,e,i,n,r){return function(t,e){var i=1-t;return i*i*i*e}(t,e)+function(t,e){var i=1-t;return 3*i*i*t*e}(t,i)+function(t,e){return 3*(1-t)*t*t*e}(t,n)+function(t,e){return t*t*t*e}(t,r)}function th(t,e,i,n){Ho.call(this),this.type=\"CubicBezierCurve\",this.v0=t||new Ke,this.v1=e||new Ke,this.v2=i||new Ke,this.v3=n||new Ke}function eh(t,e,i,n){Ho.call(this),this.type=\"CubicBezierCurve3\",this.v0=t||new ei,this.v1=e||new ei,this.v2=i||new ei,this.v3=n||new ei}function ih(t,e){Ho.call(this),this.type=\"LineCurve\",this.v1=t||new Ke,this.v2=e||new Ke}function nh(t,e){Ho.call(this),this.type=\"LineCurve3\",this.v1=t||new ei,this.v2=e||new ei}function rh(t,e,i){Ho.call(this),this.type=\"QuadraticBezierCurve\",this.v0=t||new Ke,this.v1=e||new Ke,this.v2=i||new Ke}function sh(t,e,i){Ho.call(this),this.type=\"QuadraticBezierCurve3\",this.v0=t||new ei,this.v1=e||new ei,this.v2=i||new ei}function ah(t){Ho.call(this),this.type=\"SplineCurve\",this.points=t||[]}Zo.prototype=Object.create(Ho.prototype),Zo.prototype.constructor=Zo,Zo.prototype.isCatmullRomCurve3=!0,Zo.prototype.getPoint=function(t,e){var i,n,r,s,a=e||new ei,o=this.points,h=o.length,l=(h-(this.closed?0:1))*t,c=Math.floor(l),u=l-c;if(this.closed?c+=c>0?0:(Math.floor(Math.abs(c)/h)+1)*h:0===u&&c===h-1&&(c=h-2,u=1),this.closed||c>0?i=o[(c-1)%h]:(qo.subVectors(o[0],o[1]).add(o[0]),i=qo),n=o[c%h],r=o[(c+1)%h],this.closed||c+2<h?s=o[(c+2)%h]:(qo.subVectors(o[h-1],o[h-2]).add(o[h-1]),s=qo),\"centripetal\"===this.curveType||\"chordal\"===this.curveType){var p=\"chordal\"===this.curveType?.5:.25,d=Math.pow(i.distanceToSquared(n),p),m=Math.pow(n.distanceToSquared(r),p),f=Math.pow(r.distanceToSquared(s),p);m<1e-4&&(m=1),d<1e-4&&(d=m),f<1e-4&&(f=m),Xo.initNonuniformCatmullRom(i.x,n.x,r.x,s.x,d,m,f),Yo.initNonuniformCatmullRom(i.y,n.y,r.y,s.y,d,m,f),Jo.initNonuniformCatmullRom(i.z,n.z,r.z,s.z,d,m,f)}else\"catmullrom\"===this.curveType&&(Xo.initCatmullRom(i.x,n.x,r.x,s.x,this.tension),Yo.initCatmullRom(i.y,n.y,r.y,s.y,this.tension),Jo.initCatmullRom(i.z,n.z,r.z,s.z,this.tension));return a.set(Xo.calc(u),Yo.calc(u),Jo.calc(u)),a},Zo.prototype.copy=function(t){Ho.prototype.copy.call(this,t),this.points=[];for(var e=0,i=t.points.length;e<i;e++){var n=t.points[e];this.points.push(n.clone())}return this.closed=t.closed,this.curveType=t.curveType,this.tension=t.tension,this},Zo.prototype.toJSON=function(){var t=Ho.prototype.toJSON.call(this);t.points=[];for(var e=0,i=this.points.length;e<i;e++){var n=this.points[e];t.points.push(n.toArray())}return t.closed=this.closed,t.curveType=this.curveType,t.tension=this.tension,t},Zo.prototype.fromJSON=function(t){Ho.prototype.fromJSON.call(this,t),this.points=[];for(var e=0,i=t.points.length;e<i;e++){var n=t.points[e];this.points.push((new ei).fromArray(n))}return this.closed=t.closed,this.curveType=t.curveType,this.tension=t.tension,this},th.prototype=Object.create(Ho.prototype),th.prototype.constructor=th,th.prototype.isCubicBezierCurve=!0,th.prototype.getPoint=function(t,e){var i=e||new Ke,n=this.v0,r=this.v1,s=this.v2,a=this.v3;return i.set($o(t,n.x,r.x,s.x,a.x),$o(t,n.y,r.y,s.y,a.y)),i},th.prototype.copy=function(t){return Ho.prototype.copy.call(this,t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this.v3.copy(t.v3),this},th.prototype.toJSON=function(){var t=Ho.prototype.toJSON.call(this);return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t.v3=this.v3.toArray(),t},th.prototype.fromJSON=function(t){return Ho.prototype.fromJSON.call(this,t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this.v3.fromArray(t.v3),this},eh.prototype=Object.create(Ho.prototype),eh.prototype.constructor=eh,eh.prototype.isCubicBezierCurve3=!0,eh.prototype.getPoint=function(t,e){var i=e||new ei,n=this.v0,r=this.v1,s=this.v2,a=this.v3;return i.set($o(t,n.x,r.x,s.x,a.x),$o(t,n.y,r.y,s.y,a.y),$o(t,n.z,r.z,s.z,a.z)),i},eh.prototype.copy=function(t){return Ho.prototype.copy.call(this,t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this.v3.copy(t.v3),this},eh.prototype.toJSON=function(){var t=Ho.prototype.toJSON.call(this);return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t.v3=this.v3.toArray(),t},eh.prototype.fromJSON=function(t){return Ho.prototype.fromJSON.call(this,t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this.v3.fromArray(t.v3),this},ih.prototype=Object.create(Ho.prototype),ih.prototype.constructor=ih,ih.prototype.isLineCurve=!0,ih.prototype.getPoint=function(t,e){var i=e||new Ke;return 1===t?i.copy(this.v2):(i.copy(this.v2).sub(this.v1),i.multiplyScalar(t).add(this.v1)),i},ih.prototype.getPointAt=function(t,e){return this.getPoint(t,e)},ih.prototype.getTangent=function(){return this.v2.clone().sub(this.v1).normalize()},ih.prototype.copy=function(t){return Ho.prototype.copy.call(this,t),this.v1.copy(t.v1),this.v2.copy(t.v2),this},ih.prototype.toJSON=function(){var t=Ho.prototype.toJSON.call(this);return t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t},ih.prototype.fromJSON=function(t){return Ho.prototype.fromJSON.call(this,t),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this},nh.prototype=Object.create(Ho.prototype),nh.prototype.constructor=nh,nh.prototype.isLineCurve3=!0,nh.prototype.getPoint=function(t,e){var i=e||new ei;return 1===t?i.copy(this.v2):(i.copy(this.v2).sub(this.v1),i.multiplyScalar(t).add(this.v1)),i},nh.prototype.getPointAt=function(t,e){return this.getPoint(t,e)},nh.prototype.copy=function(t){return Ho.prototype.copy.call(this,t),this.v1.copy(t.v1),this.v2.copy(t.v2),this},nh.prototype.toJSON=function(){var t=Ho.prototype.toJSON.call(this);return t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t},nh.prototype.fromJSON=function(t){return Ho.prototype.fromJSON.call(this,t),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this},rh.prototype=Object.create(Ho.prototype),rh.prototype.constructor=rh,rh.prototype.isQuadraticBezierCurve=!0,rh.prototype.getPoint=function(t,e){var i=e||new Ke,n=this.v0,r=this.v1,s=this.v2;return i.set(Ko(t,n.x,r.x,s.x),Ko(t,n.y,r.y,s.y)),i},rh.prototype.copy=function(t){return Ho.prototype.copy.call(this,t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this},rh.prototype.toJSON=function(){var t=Ho.prototype.toJSON.call(this);return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t},rh.prototype.fromJSON=function(t){return Ho.prototype.fromJSON.call(this,t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this},sh.prototype=Object.create(Ho.prototype),sh.prototype.constructor=sh,sh.prototype.isQuadraticBezierCurve3=!0,sh.prototype.getPoint=function(t,e){var i=e||new ei,n=this.v0,r=this.v1,s=this.v2;return i.set(Ko(t,n.x,r.x,s.x),Ko(t,n.y,r.y,s.y),Ko(t,n.z,r.z,s.z)),i},sh.prototype.copy=function(t){return Ho.prototype.copy.call(this,t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this},sh.prototype.toJSON=function(){var t=Ho.prototype.toJSON.call(this);return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t},sh.prototype.fromJSON=function(t){return Ho.prototype.fromJSON.call(this,t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this},ah.prototype=Object.create(Ho.prototype),ah.prototype.constructor=ah,ah.prototype.isSplineCurve=!0,ah.prototype.getPoint=function(t,e){var i=e||new Ke,n=this.points,r=(n.length-1)*t,s=Math.floor(r),a=r-s,o=n[0===s?s:s-1],h=n[s],l=n[s>n.length-2?n.length-1:s+1],c=n[s>n.length-3?n.length-1:s+2];return i.set(Qo(a,o.x,h.x,l.x,c.x),Qo(a,o.y,h.y,l.y,c.y)),i},ah.prototype.copy=function(t){Ho.prototype.copy.call(this,t),this.points=[];for(var e=0,i=t.points.length;e<i;e++){var n=t.points[e];this.points.push(n.clone())}return this},ah.prototype.toJSON=function(){var t=Ho.prototype.toJSON.call(this);t.points=[];for(var e=0,i=this.points.length;e<i;e++){var n=this.points[e];t.points.push(n.toArray())}return t},ah.prototype.fromJSON=function(t){Ho.prototype.fromJSON.call(this,t),this.points=[];for(var e=0,i=t.points.length;e<i;e++){var n=t.points[e];this.points.push((new Ke).fromArray(n))}return this};var oh=Object.freeze({ArcCurve:jo,CatmullRomCurve3:Zo,CubicBezierCurve:th,CubicBezierCurve3:eh,EllipseCurve:Go,LineCurve:ih,LineCurve3:nh,QuadraticBezierCurve:rh,QuadraticBezierCurve3:sh,SplineCurve:ah});function hh(){Ho.call(this),this.type=\"CurvePath\",this.curves=[],this.autoClose=!1}function lh(t){hh.call(this),this.type=\"Path\",this.currentPoint=new Ke,t&&this.setFromPoints(t)}function ch(t){lh.call(this,t),this.uuid=Qe.generateUUID(),this.type=\"Shape\",this.holes=[]}function uh(t,e){Hi.call(this),this.type=\"Light\",this.color=new Ai(t),this.intensity=void 0!==e?e:1,this.receiveShadow=void 0}function ph(t,e,i){uh.call(this,t,i),this.type=\"HemisphereLight\",this.castShadow=void 0,this.position.copy(Hi.DefaultUp),this.updateMatrix(),this.groundColor=new Ai(e)}function dh(t){this.camera=t,this.bias=0,this.radius=1,this.mapSize=new Ke(512,512),this.map=null,this.matrix=new $e}function mh(){dh.call(this,new cs(50,1,.5,500))}function fh(t,e,i,n,r,s){uh.call(this,t,e),this.type=\"SpotLight\",this.position.copy(Hi.DefaultUp),this.updateMatrix(),this.target=new Hi,Object.defineProperty(this,\"power\",{get:function(){return this.intensity*Math.PI},set:function(t){this.intensity=t/Math.PI}}),this.distance=void 0!==i?i:0,this.angle=void 0!==n?n:Math.PI/3,this.penumbra=void 0!==r?r:0,this.decay=void 0!==s?s:1,this.shadow=new mh}function vh(t,e,i,n){uh.call(this,t,e),this.type=\"PointLight\",Object.defineProperty(this,\"power\",{get:function(){return 4*this.intensity*Math.PI},set:function(t){this.intensity=t/(4*Math.PI)}}),this.distance=void 0!==i?i:0,this.decay=void 0!==n?n:1,this.shadow=new dh(new cs(90,1,.5,500))}function gh(t,e,i,n,r,s){ls.call(this),this.type=\"OrthographicCamera\",this.zoom=1,this.view=null,this.left=void 0!==t?t:-1,this.right=void 0!==e?e:1,this.top=void 0!==i?i:1,this.bottom=void 0!==n?n:-1,this.near=void 0!==r?r:.1,this.far=void 0!==s?s:2e3,this.updateProjectionMatrix()}function yh(){dh.call(this,new gh(-5,5,5,-5,.5,500))}function xh(t,e){uh.call(this,t,e),this.type=\"DirectionalLight\",this.position.copy(Hi.DefaultUp),this.updateMatrix(),this.target=new Hi,this.shadow=new yh}function bh(t,e){uh.call(this,t,e),this.type=\"AmbientLight\",this.castShadow=void 0}function wh(t,e,i,n){uh.call(this,t,e),this.type=\"RectAreaLight\",this.width=void 0!==i?i:10,this.height=void 0!==n?n:10}function Mh(t){this.manager=void 0!==t?t:Co,this.textures={}}hh.prototype=Object.assign(Object.create(Ho.prototype),{constructor:hh,add:function(t){this.curves.push(t)},closePath:function(){var t=this.curves[0].getPoint(0),e=this.curves[this.curves.length-1].getPoint(1);t.equals(e)||this.curves.push(new ih(e,t))},getPoint:function(t){for(var e=t*this.getLength(),i=this.getCurveLengths(),n=0;n<i.length;){if(i[n]>=e){var r=i[n]-e,s=this.curves[n],a=s.getLength(),o=0===a?0:1-r/a;return s.getPointAt(o)}n++}return null},getLength:function(){var t=this.getCurveLengths();return t[t.length-1]},updateArcLengths:function(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()},getCurveLengths:function(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;for(var t=[],e=0,i=0,n=this.curves.length;i<n;i++)e+=this.curves[i].getLength(),t.push(e);return this.cacheLengths=t,t},getSpacedPoints:function(t){void 0===t&&(t=40);for(var e=[],i=0;i<=t;i++)e.push(this.getPoint(i/t));return this.autoClose&&e.push(e[0]),e},getPoints:function(t){t=t||12;for(var e,i=[],n=0,r=this.curves;n<r.length;n++)for(var s=r[n],a=s&&s.isEllipseCurve?2*t:s&&(s.isLineCurve||s.isLineCurve3)?1:s&&s.isSplineCurve?t*s.points.length:t,o=s.getPoints(a),h=0;h<o.length;h++){var l=o[h];e&&e.equals(l)||(i.push(l),e=l)}return this.autoClose&&i.length>1&&!i[i.length-1].equals(i[0])&&i.push(i[0]),i},copy:function(t){Ho.prototype.copy.call(this,t),this.curves=[];for(var e=0,i=t.curves.length;e<i;e++){var n=t.curves[e];this.curves.push(n.clone())}return this.autoClose=t.autoClose,this},toJSON:function(){var t=Ho.prototype.toJSON.call(this);t.autoClose=this.autoClose,t.curves=[];for(var e=0,i=this.curves.length;e<i;e++){var n=this.curves[e];t.curves.push(n.toJSON())}return t},fromJSON:function(t){Ho.prototype.fromJSON.call(this,t),this.autoClose=t.autoClose,this.curves=[];for(var e=0,i=t.curves.length;e<i;e++){var n=t.curves[e];this.curves.push((new oh[n.type]).fromJSON(n))}return this}}),lh.prototype=Object.assign(Object.create(hh.prototype),{constructor:lh,setFromPoints:function(t){this.moveTo(t[0].x,t[0].y);for(var e=1,i=t.length;e<i;e++)this.lineTo(t[e].x,t[e].y)},moveTo:function(t,e){this.currentPoint.set(t,e)},lineTo:function(t,e){var i=new ih(this.currentPoint.clone(),new Ke(t,e));this.curves.push(i),this.currentPoint.set(t,e)},quadraticCurveTo:function(t,e,i,n){var r=new rh(this.currentPoint.clone(),new Ke(t,e),new Ke(i,n));this.curves.push(r),this.currentPoint.set(i,n)},bezierCurveTo:function(t,e,i,n,r,s){var a=new th(this.currentPoint.clone(),new Ke(t,e),new Ke(i,n),new Ke(r,s));this.curves.push(a),this.currentPoint.set(r,s)},splineThru:function(t){var e=new ah([this.currentPoint.clone()].concat(t));this.curves.push(e),this.currentPoint.copy(t[t.length-1])},arc:function(t,e,i,n,r,s){var a=this.currentPoint.x,o=this.currentPoint.y;this.absarc(t+a,e+o,i,n,r,s)},absarc:function(t,e,i,n,r,s){this.absellipse(t,e,i,i,n,r,s)},ellipse:function(t,e,i,n,r,s,a,o){var h=this.currentPoint.x,l=this.currentPoint.y;this.absellipse(t+h,e+l,i,n,r,s,a,o)},absellipse:function(t,e,i,n,r,s,a,o){var h=new Go(t,e,i,n,r,s,a,o);if(this.curves.length>0){var l=h.getPoint(0);l.equals(this.currentPoint)||this.lineTo(l.x,l.y)}this.curves.push(h);var c=h.getPoint(1);this.currentPoint.copy(c)},copy:function(t){return hh.prototype.copy.call(this,t),this.currentPoint.copy(t.currentPoint),this},toJSON:function(){var t=hh.prototype.toJSON.call(this);return t.currentPoint=this.currentPoint.toArray(),t},fromJSON:function(t){return hh.prototype.fromJSON.call(this,t),this.currentPoint.fromArray(t.currentPoint),this}}),ch.prototype=Object.assign(Object.create(lh.prototype),{constructor:ch,getPointsHoles:function(t){for(var e=[],i=0,n=this.holes.length;i<n;i++)e[i]=this.holes[i].getPoints(t);return e},extractPoints:function(t){return{shape:this.getPoints(t),holes:this.getPointsHoles(t)}},copy:function(t){lh.prototype.copy.call(this,t),this.holes=[];for(var e=0,i=t.holes.length;e<i;e++){var n=t.holes[e];this.holes.push(n.clone())}return this},toJSON:function(){var t=lh.prototype.toJSON.call(this);t.uuid=this.uuid,t.holes=[];for(var e=0,i=this.holes.length;e<i;e++){var n=this.holes[e];t.holes.push(n.toJSON())}return t},fromJSON:function(t){lh.prototype.fromJSON.call(this,t),this.uuid=t.uuid,this.holes=[];for(var e=0,i=t.holes.length;e<i;e++){var n=t.holes[e];this.holes.push((new lh).fromJSON(n))}return this}}),uh.prototype=Object.assign(Object.create(Hi.prototype),{constructor:uh,isLight:!0,copy:function(t){return Hi.prototype.copy.call(this,t),this.color.copy(t.color),this.intensity=t.intensity,this},toJSON:function(t){var e=Hi.prototype.toJSON.call(this,t);return e.object.color=this.color.getHex(),e.object.intensity=this.intensity,void 0!==this.groundColor&&(e.object.groundColor=this.groundColor.getHex()),void 0!==this.distance&&(e.object.distance=this.distance),void 0!==this.angle&&(e.object.angle=this.angle),void 0!==this.decay&&(e.object.decay=this.decay),void 0!==this.penumbra&&(e.object.penumbra=this.penumbra),void 0!==this.shadow&&(e.object.shadow=this.shadow.toJSON()),e}}),ph.prototype=Object.assign(Object.create(uh.prototype),{constructor:ph,isHemisphereLight:!0,copy:function(t){return uh.prototype.copy.call(this,t),this.groundColor.copy(t.groundColor),this}}),Object.assign(dh.prototype,{copy:function(t){return this.camera=t.camera.clone(),this.bias=t.bias,this.radius=t.radius,this.mapSize.copy(t.mapSize),this},clone:function(){return(new this.constructor).copy(this)},toJSON:function(){var t={};return 0!==this.bias&&(t.bias=this.bias),1!==this.radius&&(t.radius=this.radius),512===this.mapSize.x&&512===this.mapSize.y||(t.mapSize=this.mapSize.toArray()),t.camera=this.camera.toJSON(!1).object,delete t.camera.matrix,t}}),mh.prototype=Object.assign(Object.create(dh.prototype),{constructor:mh,isSpotLightShadow:!0,update:function(t){var e=this.camera,i=2*Qe.RAD2DEG*t.angle,n=this.mapSize.width/this.mapSize.height,r=t.distance||e.far;i===e.fov&&n===e.aspect&&r===e.far||(e.fov=i,e.aspect=n,e.far=r,e.updateProjectionMatrix())}}),fh.prototype=Object.assign(Object.create(uh.prototype),{constructor:fh,isSpotLight:!0,copy:function(t){return uh.prototype.copy.call(this,t),this.distance=t.distance,this.angle=t.angle,this.penumbra=t.penumbra,this.decay=t.decay,this.target=t.target.clone(),this.shadow=t.shadow.clone(),this}}),vh.prototype=Object.assign(Object.create(uh.prototype),{constructor:vh,isPointLight:!0,copy:function(t){return uh.prototype.copy.call(this,t),this.distance=t.distance,this.decay=t.decay,this.shadow=t.shadow.clone(),this}}),gh.prototype=Object.assign(Object.create(ls.prototype),{constructor:gh,isOrthographicCamera:!0,copy:function(t,e){return ls.prototype.copy.call(this,t,e),this.left=t.left,this.right=t.right,this.top=t.top,this.bottom=t.bottom,this.near=t.near,this.far=t.far,this.zoom=t.zoom,this.view=null===t.view?null:Object.assign({},t.view),this},setViewOffset:function(t,e,i,n,r,s){null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=i,this.view.offsetY=n,this.view.width=r,this.view.height=s,this.updateProjectionMatrix()},clearViewOffset:function(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()},updateProjectionMatrix:function(){var t=(this.right-this.left)/(2*this.zoom),e=(this.top-this.bottom)/(2*this.zoom),i=(this.right+this.left)/2,n=(this.top+this.bottom)/2,r=i-t,s=i+t,a=n+e,o=n-e;if(null!==this.view&&this.view.enabled){var h=this.zoom/(this.view.width/this.view.fullWidth),l=this.zoom/(this.view.height/this.view.fullHeight),c=(this.right-this.left)/this.view.width,u=(this.top-this.bottom)/this.view.height;s=(r+=c*(this.view.offsetX/h))+c*(this.view.width/h),o=(a-=u*(this.view.offsetY/l))-u*(this.view.height/l)}this.projectionMatrix.makeOrthographic(r,s,a,o,this.near,this.far),this.projectionMatrixInverse.getInverse(this.projectionMatrix)},toJSON:function(t){var e=Hi.prototype.toJSON.call(this,t);return e.object.zoom=this.zoom,e.object.left=this.left,e.object.right=this.right,e.object.top=this.top,e.object.bottom=this.bottom,e.object.near=this.near,e.object.far=this.far,null!==this.view&&(e.object.view=Object.assign({},this.view)),e}}),yh.prototype=Object.assign(Object.create(dh.prototype),{constructor:yh}),xh.prototype=Object.assign(Object.create(uh.prototype),{constructor:xh,isDirectionalLight:!0,copy:function(t){return uh.prototype.copy.call(this,t),this.target=t.target.clone(),this.shadow=t.shadow.clone(),this}}),bh.prototype=Object.assign(Object.create(uh.prototype),{constructor:bh,isAmbientLight:!0}),wh.prototype=Object.assign(Object.create(uh.prototype),{constructor:wh,isRectAreaLight:!0,copy:function(t){return uh.prototype.copy.call(this,t),this.width=t.width,this.height=t.height,this},toJSON:function(t){var e=uh.prototype.toJSON.call(this,t);return e.object.width=this.width,e.object.height=this.height,e}}),Object.assign(Mh.prototype,{load:function(t,e,i,n){var r=this,s=new Oo(r.manager);s.setPath(r.path),s.load(t,function(t){e(r.parse(JSON.parse(t)))},i,n)},parse:function(t){var e=this.textures;function i(t){return void 0===e[t]&&console.warn(\"THREE.MaterialLoader: Undefined texture\",t),e[t]}var n=new fo[t.type];if(void 0!==t.uuid&&(n.uuid=t.uuid),void 0!==t.name&&(n.name=t.name),void 0!==t.color&&n.color.setHex(t.color),void 0!==t.roughness&&(n.roughness=t.roughness),void 0!==t.metalness&&(n.metalness=t.metalness),void 0!==t.emissive&&n.emissive.setHex(t.emissive),void 0!==t.specular&&n.specular.setHex(t.specular),void 0!==t.shininess&&(n.shininess=t.shininess),void 0!==t.clearCoat&&(n.clearCoat=t.clearCoat),void 0!==t.clearCoatRoughness&&(n.clearCoatRoughness=t.clearCoatRoughness),void 0!==t.vertexColors&&(n.vertexColors=t.vertexColors),void 0!==t.fog&&(n.fog=t.fog),void 0!==t.flatShading&&(n.flatShading=t.flatShading),void 0!==t.blending&&(n.blending=t.blending),void 0!==t.combine&&(n.combine=t.combine),void 0!==t.side&&(n.side=t.side),void 0!==t.opacity&&(n.opacity=t.opacity),void 0!==t.transparent&&(n.transparent=t.transparent),void 0!==t.alphaTest&&(n.alphaTest=t.alphaTest),void 0!==t.depthTest&&(n.depthTest=t.depthTest),void 0!==t.depthWrite&&(n.depthWrite=t.depthWrite),void 0!==t.colorWrite&&(n.colorWrite=t.colorWrite),void 0!==t.wireframe&&(n.wireframe=t.wireframe),void 0!==t.wireframeLinewidth&&(n.wireframeLinewidth=t.wireframeLinewidth),void 0!==t.wireframeLinecap&&(n.wireframeLinecap=t.wireframeLinecap),void 0!==t.wireframeLinejoin&&(n.wireframeLinejoin=t.wireframeLinejoin),void 0!==t.rotation&&(n.rotation=t.rotation),1!==t.linewidth&&(n.linewidth=t.linewidth),void 0!==t.dashSize&&(n.dashSize=t.dashSize),void 0!==t.gapSize&&(n.gapSize=t.gapSize),void 0!==t.scale&&(n.scale=t.scale),void 0!==t.polygonOffset&&(n.polygonOffset=t.polygonOffset),void 0!==t.polygonOffsetFactor&&(n.polygonOffsetFactor=t.polygonOffsetFactor),void 0!==t.polygonOffsetUnits&&(n.polygonOffsetUnits=t.polygonOffsetUnits),void 0!==t.skinning&&(n.skinning=t.skinning),void 0!==t.morphTargets&&(n.morphTargets=t.morphTargets),void 0!==t.dithering&&(n.dithering=t.dithering),void 0!==t.visible&&(n.visible=t.visible),void 0!==t.userData&&(n.userData=t.userData),void 0!==t.uniforms)for(var r in t.uniforms){var s=t.uniforms[r];switch(n.uniforms[r]={},s.type){case\"t\":n.uniforms[r].value=i(s.value);break;case\"c\":n.uniforms[r].value=(new Ai).setHex(s.value);break;case\"v2\":n.uniforms[r].value=(new Ke).fromArray(s.value);break;case\"v3\":n.uniforms[r].value=(new ei).fromArray(s.value);break;case\"v4\":n.uniforms[r].value=(new ui).fromArray(s.value);break;case\"m3\":n.uniforms[r].value=(new ii).fromArray(s.value);case\"m4\":n.uniforms[r].value=(new $e).fromArray(s.value);break;default:n.uniforms[r].value=s.value}}if(void 0!==t.defines&&(n.defines=t.defines),void 0!==t.vertexShader&&(n.vertexShader=t.vertexShader),void 0!==t.fragmentShader&&(n.fragmentShader=t.fragmentShader),void 0!==t.extensions)for(var a in t.extensions)n.extensions[a]=t.extensions[a];if(void 0!==t.shading&&(n.flatShading=1===t.shading),void 0!==t.size&&(n.size=t.size),void 0!==t.sizeAttenuation&&(n.sizeAttenuation=t.sizeAttenuation),void 0!==t.map&&(n.map=i(t.map)),void 0!==t.alphaMap&&(n.alphaMap=i(t.alphaMap),n.transparent=!0),void 0!==t.bumpMap&&(n.bumpMap=i(t.bumpMap)),void 0!==t.bumpScale&&(n.bumpScale=t.bumpScale),void 0!==t.normalMap&&(n.normalMap=i(t.normalMap)),void 0!==t.normalMapType&&(n.normalMapType=t.normalMapType),void 0!==t.normalScale){var o=t.normalScale;!1===Array.isArray(o)&&(o=[o,o]),n.normalScale=(new Ke).fromArray(o)}return void 0!==t.displacementMap&&(n.displacementMap=i(t.displacementMap)),void 0!==t.displacementScale&&(n.displacementScale=t.displacementScale),void 0!==t.displacementBias&&(n.displacementBias=t.displacementBias),void 0!==t.roughnessMap&&(n.roughnessMap=i(t.roughnessMap)),void 0!==t.metalnessMap&&(n.metalnessMap=i(t.metalnessMap)),void 0!==t.emissiveMap&&(n.emissiveMap=i(t.emissiveMap)),void 0!==t.emissiveIntensity&&(n.emissiveIntensity=t.emissiveIntensity),void 0!==t.specularMap&&(n.specularMap=i(t.specularMap)),void 0!==t.envMap&&(n.envMap=i(t.envMap)),void 0!==t.envMapIntensity&&(n.envMapIntensity=t.envMapIntensity),void 0!==t.reflectivity&&(n.reflectivity=t.reflectivity),void 0!==t.lightMap&&(n.lightMap=i(t.lightMap)),void 0!==t.lightMapIntensity&&(n.lightMapIntensity=t.lightMapIntensity),void 0!==t.aoMap&&(n.aoMap=i(t.aoMap)),void 0!==t.aoMapIntensity&&(n.aoMapIntensity=t.aoMapIntensity),void 0!==t.gradientMap&&(n.gradientMap=i(t.gradientMap)),n},setPath:function(t){return this.path=t,this},setTextures:function(t){return this.textures=t,this}});var _h={decodeText:function(t){if(\"undefined\"!=typeof TextDecoder)return(new TextDecoder).decode(t);for(var e=\"\",i=0,n=t.length;i<n;i++)e+=String.fromCharCode(t[i]);return decodeURIComponent(escape(e))},extractUrlBase:function(t){var e=t.lastIndexOf(\"/\");return-1===e?\"./\":t.substr(0,e+1)}};function Sh(t){this.manager=void 0!==t?t:Co}Object.assign(Sh.prototype,{load:function(t,e,i,n){var r=this,s=new Oo(r.manager);s.setPath(r.path),s.load(t,function(t){e(r.parse(JSON.parse(t)))},i,n)},parse:function(t){var e=new on,i=t.data.index;if(void 0!==i){var n=new Eh[i.type](i.array);e.setIndex(new Xi(n,1))}var r=t.data.attributes;for(var s in r){var a=r[s];n=new Eh[a.type](a.array);e.addAttribute(s,new Xi(n,a.itemSize,a.normalized))}var o=t.data.groups||t.data.drawcalls||t.data.offsets;if(void 0!==o)for(var h=0,l=o.length;h!==l;++h){var c=o[h];e.addGroup(c.start,c.count,c.materialIndex)}var u=t.data.boundingSphere;if(void 0!==u){var p=new ei;void 0!==u.center&&p.fromArray(u.center),e.boundingSphere=new gi(p,u.radius)}return t.name&&(e.name=t.name),t.userData&&(e.userData=t.userData),e},setPath:function(t){return this.path=t,this}});var Eh={Int8Array:Int8Array,Uint8Array:Uint8Array,Uint8ClampedArray:\"undefined\"!=typeof Uint8ClampedArray?Uint8ClampedArray:Uint8Array,Int16Array:Int16Array,Uint16Array:Uint16Array,Int32Array:Int32Array,Uint32Array:Uint32Array,Float32Array:Float32Array,Float64Array:Float64Array};function Th(t){this.manager=void 0!==t?t:Co,this.resourcePath=\"\"}Object.assign(Th.prototype,{crossOrigin:\"anonymous\",load:function(t,e,i,n){var r=this,s=void 0===this.path?_h.extractUrlBase(t):this.path;this.resourcePath=this.resourcePath||s;var a=new Oo(r.manager);a.setPath(this.path),a.load(t,function(i){var s=null;try{s=JSON.parse(i)}catch(e){return void 0!==n&&n(e),void console.error(\"THREE:ObjectLoader: Can't parse \"+t+\".\",e.message)}var a=s.metadata;void 0!==a&&void 0!==a.type&&\"geometry\"!==a.type.toLowerCase()?r.parse(s,e):console.error(\"THREE.ObjectLoader: Can't load \"+t)},i,n)},setPath:function(t){return this.path=t,this},setResourcePath:function(t){return this.resourcePath=t,this},setCrossOrigin:function(t){return this.crossOrigin=t,this},parse:function(t,e){var i=this.parseShape(t.shapes),n=this.parseGeometries(t.geometries,i),r=this.parseImages(t.images,function(){void 0!==e&&e(o)}),s=this.parseTextures(t.textures,r),a=this.parseMaterials(t.materials,s),o=this.parseObject(t.object,n,a);return t.animations&&(o.animations=this.parseAnimations(t.animations)),void 0!==t.images&&0!==t.images.length||void 0!==e&&e(o),o},parseShape:function(t){var e={};if(void 0!==t)for(var i=0,n=t.length;i<n;i++){var r=(new ch).fromJSON(t[i]);e[r.uuid]=r}return e},parseGeometries:function(t,e){var i={};if(void 0!==t)for(var n=new Sh,r=0,s=t.length;r<s;r++){var a,o=t[r];switch(o.type){case\"PlaneGeometry\":case\"PlaneBufferGeometry\":a=new no[o.type](o.width,o.height,o.widthSegments,o.heightSegments);break;case\"BoxGeometry\":case\"BoxBufferGeometry\":case\"CubeGeometry\":a=new no[o.type](o.width,o.height,o.depth,o.widthSegments,o.heightSegments,o.depthSegments);break;case\"CircleGeometry\":case\"CircleBufferGeometry\":a=new no[o.type](o.radius,o.segments,o.thetaStart,o.thetaLength);break;case\"CylinderGeometry\":case\"CylinderBufferGeometry\":a=new no[o.type](o.radiusTop,o.radiusBottom,o.height,o.radialSegments,o.heightSegments,o.openEnded,o.thetaStart,o.thetaLength);break;case\"ConeGeometry\":case\"ConeBufferGeometry\":a=new no[o.type](o.radius,o.height,o.radialSegments,o.heightSegments,o.openEnded,o.thetaStart,o.thetaLength);break;case\"SphereGeometry\":case\"SphereBufferGeometry\":a=new no[o.type](o.radius,o.widthSegments,o.heightSegments,o.phiStart,o.phiLength,o.thetaStart,o.thetaLength);break;case\"DodecahedronGeometry\":case\"DodecahedronBufferGeometry\":case\"IcosahedronGeometry\":case\"IcosahedronBufferGeometry\":case\"OctahedronGeometry\":case\"OctahedronBufferGeometry\":case\"TetrahedronGeometry\":case\"TetrahedronBufferGeometry\":a=new no[o.type](o.radius,o.detail);break;case\"RingGeometry\":case\"RingBufferGeometry\":a=new no[o.type](o.innerRadius,o.outerRadius,o.thetaSegments,o.phiSegments,o.thetaStart,o.thetaLength);break;case\"TorusGeometry\":case\"TorusBufferGeometry\":a=new no[o.type](o.radius,o.tube,o.radialSegments,o.tubularSegments,o.arc);break;case\"TorusKnotGeometry\":case\"TorusKnotBufferGeometry\":a=new no[o.type](o.radius,o.tube,o.tubularSegments,o.radialSegments,o.p,o.q);break;case\"LatheGeometry\":case\"LatheBufferGeometry\":a=new no[o.type](o.points,o.segments,o.phiStart,o.phiLength);break;case\"PolyhedronGeometry\":case\"PolyhedronBufferGeometry\":a=new no[o.type](o.vertices,o.indices,o.radius,o.details);break;case\"ShapeGeometry\":case\"ShapeBufferGeometry\":for(var h=[],l=0,c=o.shapes.length;l<c;l++){var u=e[o.shapes[l]];h.push(u)}a=new no[o.type](h,o.curveSegments);break;case\"ExtrudeGeometry\":case\"ExtrudeBufferGeometry\":for(h=[],l=0,c=o.shapes.length;l<c;l++){u=e[o.shapes[l]];h.push(u)}var p=o.options.extrudePath;void 0!==p&&(o.options.extrudePath=(new oh[p.type]).fromJSON(p)),a=new no[o.type](h,o.options);break;case\"BufferGeometry\":a=n.parse(o);break;case\"Geometry\":if(\"THREE\"in window&&\"LegacyJSONLoader\"in THREE)a=(new THREE.LegacyJSONLoader).parse(o,this.resourcePath).geometry;else console.error('THREE.ObjectLoader: You have to import LegacyJSONLoader in order load geometry data of type \"Geometry\".');break;default:console.warn('THREE.ObjectLoader: Unsupported geometry type \"'+o.type+'\"');continue}a.uuid=o.uuid,void 0!==o.name&&(a.name=o.name),!0===a.isBufferGeometry&&void 0!==o.userData&&(a.userData=o.userData),i[o.uuid]=a}return i},parseMaterials:function(t,e){var i={},n={};if(void 0!==t){var r=new Mh;r.setTextures(e);for(var s=0,a=t.length;s<a;s++){var o=t[s];if(\"MultiMaterial\"===o.type){for(var h=[],l=0;l<o.materials.length;l++){var c=o.materials[l];void 0===i[c.uuid]&&(i[c.uuid]=r.parse(c)),h.push(i[c.uuid])}n[o.uuid]=h}else void 0===i[o.uuid]&&(i[o.uuid]=r.parse(o)),n[o.uuid]=i[o.uuid]}}return n},parseAnimations:function(t){for(var e=[],i=0;i<t.length;i++){var n=t[i],r=Po.parse(n);void 0!==n.uuid&&(r.uuid=n.uuid),e.push(r)}return e},parseImages:function(t,e){var i=this,n={};function r(t){return i.manager.itemStart(t),s.load(t,function(){i.manager.itemEnd(t)},void 0,function(){i.manager.itemError(t),i.manager.itemEnd(t)})}if(void 0!==t&&t.length>0){var s=new Vo(new Ro(e));s.setCrossOrigin(this.crossOrigin);for(var a=0,o=t.length;a<o;a++){var h=t[a],l=h.url;if(Array.isArray(l)){n[h.uuid]=[];for(var c=0,u=l.length;c<u;c++){var p=l[c],d=/^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test(p)?p:i.resourcePath+p;n[h.uuid].push(r(d))}}else{d=/^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test(h.url)?h.url:i.resourcePath+h.url;n[h.uuid]=r(d)}}}return n},parseTextures:function(t,e){function i(t,e){return\"number\"==typeof t?t:(console.warn(\"THREE.ObjectLoader.parseTexture: Constant should be in numeric form.\",t),e[t])}var n={};if(void 0!==t)for(var r=0,s=t.length;r<s;r++){var a,o=t[r];void 0===o.image&&console.warn('THREE.ObjectLoader: No \"image\" specified for',o.uuid),void 0===e[o.image]&&console.warn(\"THREE.ObjectLoader: Undefined image\",o.image),(a=Array.isArray(e[o.image])?new Hn(e[o.image]):new ci(e[o.image])).needsUpdate=!0,a.uuid=o.uuid,void 0!==o.name&&(a.name=o.name),void 0!==o.mapping&&(a.mapping=i(o.mapping,Rh)),void 0!==o.offset&&a.offset.fromArray(o.offset),void 0!==o.repeat&&a.repeat.fromArray(o.repeat),void 0!==o.center&&a.center.fromArray(o.center),void 0!==o.rotation&&(a.rotation=o.rotation),void 0!==o.wrap&&(a.wrapS=i(o.wrap[0],Ch),a.wrapT=i(o.wrap[1],Ch)),void 0!==o.format&&(a.format=o.format),void 0!==o.type&&(a.type=o.type),void 0!==o.encoding&&(a.encoding=o.encoding),void 0!==o.minFilter&&(a.minFilter=i(o.minFilter,Ih)),void 0!==o.magFilter&&(a.magFilter=i(o.magFilter,Ih)),void 0!==o.anisotropy&&(a.anisotropy=o.anisotropy),void 0!==o.flipY&&(a.flipY=o.flipY),void 0!==o.premultiplyAlpha&&(a.premultiplyAlpha=o.premultiplyAlpha),void 0!==o.unpackAlignment&&(a.unpackAlignment=o.unpackAlignment),n[o.uuid]=a}return n},parseObject:function(t,e,i){var n;function r(t){return void 0===e[t]&&console.warn(\"THREE.ObjectLoader: Undefined geometry\",t),e[t]}function s(t){if(void 0!==t){if(Array.isArray(t)){for(var e=[],n=0,r=t.length;n<r;n++){var s=t[n];void 0===i[s]&&console.warn(\"THREE.ObjectLoader: Undefined material\",s),e.push(i[s])}return e}return void 0===i[t]&&console.warn(\"THREE.ObjectLoader: Undefined material\",t),i[t]}}switch(t.type){case\"Scene\":n=new Ts,void 0!==t.background&&Number.isInteger(t.background)&&(n.background=new Ai(t.background)),void 0!==t.fog&&(\"Fog\"===t.fog.type?n.fog=new Es(t.fog.color,t.fog.near,t.fog.far):\"FogExp2\"===t.fog.type&&(n.fog=new Ss(t.fog.color,t.fog.density)));break;case\"PerspectiveCamera\":n=new cs(t.fov,t.aspect,t.near,t.far),void 0!==t.focus&&(n.focus=t.focus),void 0!==t.zoom&&(n.zoom=t.zoom),void 0!==t.filmGauge&&(n.filmGauge=t.filmGauge),void 0!==t.filmOffset&&(n.filmOffset=t.filmOffset),void 0!==t.view&&(n.view=Object.assign({},t.view));break;case\"OrthographicCamera\":n=new gh(t.left,t.right,t.top,t.bottom,t.near,t.far),void 0!==t.zoom&&(n.zoom=t.zoom),void 0!==t.view&&(n.view=Object.assign({},t.view));break;case\"AmbientLight\":n=new bh(t.color,t.intensity);break;case\"DirectionalLight\":n=new xh(t.color,t.intensity);break;case\"PointLight\":n=new vh(t.color,t.intensity,t.distance,t.decay);break;case\"RectAreaLight\":n=new wh(t.color,t.intensity,t.width,t.height);break;case\"SpotLight\":n=new fh(t.color,t.intensity,t.distance,t.angle,t.penumbra,t.decay);break;case\"HemisphereLight\":n=new ph(t.color,t.groundColor,t.intensity);break;case\"SkinnedMesh\":console.warn(\"THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.\");case\"Mesh\":var a=r(t.geometry),o=s(t.material);n=a.bones&&a.bones.length>0?new Rs(a,o):new zn(a,o),void 0!==t.drawMode&&n.setDrawMode(t.drawMode);break;case\"LOD\":n=new Ns;break;case\"Line\":n=new ks(r(t.geometry),s(t.material),t.mode);break;case\"LineLoop\":n=new Bs(r(t.geometry),s(t.material));break;case\"LineSegments\":n=new Ds(r(t.geometry),s(t.material));break;case\"PointCloud\":case\"Points\":n=new Us(r(t.geometry),s(t.material));break;case\"Sprite\":n=new zs(s(t.material));break;case\"Group\":n=new hs;break;default:n=new Hi}if(n.uuid=t.uuid,void 0!==t.name&&(n.name=t.name),void 0!==t.matrix?(n.matrix.fromArray(t.matrix),void 0!==t.matrixAutoUpdate&&(n.matrixAutoUpdate=t.matrixAutoUpdate),n.matrixAutoUpdate&&n.matrix.decompose(n.position,n.quaternion,n.scale)):(void 0!==t.position&&n.position.fromArray(t.position),void 0!==t.rotation&&n.rotation.fromArray(t.rotation),void 0!==t.quaternion&&n.quaternion.fromArray(t.quaternion),void 0!==t.scale&&n.scale.fromArray(t.scale)),void 0!==t.castShadow&&(n.castShadow=t.castShadow),void 0!==t.receiveShadow&&(n.receiveShadow=t.receiveShadow),t.shadow&&(void 0!==t.shadow.bias&&(n.shadow.bias=t.shadow.bias),void 0!==t.shadow.radius&&(n.shadow.radius=t.shadow.radius),void 0!==t.shadow.mapSize&&n.shadow.mapSize.fromArray(t.shadow.mapSize),void 0!==t.shadow.camera&&(n.shadow.camera=this.parseObject(t.shadow.camera))),void 0!==t.visible&&(n.visible=t.visible),void 0!==t.frustumCulled&&(n.frustumCulled=t.frustumCulled),void 0!==t.renderOrder&&(n.renderOrder=t.renderOrder),void 0!==t.userData&&(n.userData=t.userData),void 0!==t.layers&&(n.layers.mask=t.layers),void 0!==t.children)for(var h=t.children,l=0;l<h.length;l++)n.add(this.parseObject(h[l],e,i));if(\"LOD\"===t.type)for(var c=t.levels,u=0;u<c.length;u++){var p=c[u],d=n.getObjectByProperty(\"uuid\",p.object);void 0!==d&&n.addLevel(d,p.distance)}return n}});var Lh,Ah,Ph,zh,Nh,Rh={UVMapping:bt,CubeReflectionMapping:wt,CubeRefractionMapping:Mt,EquirectangularReflectionMapping:_t,EquirectangularRefractionMapping:St,SphericalReflectionMapping:Et,CubeUVReflectionMapping:Tt,CubeUVRefractionMapping:Lt},Ch={RepeatWrapping:At,ClampToEdgeWrapping:Pt,MirroredRepeatWrapping:zt},Ih={NearestFilter:Nt,NearestMipMapNearestFilter:Rt,NearestMipMapLinearFilter:Ct,LinearFilter:It,LinearMipMapNearestFilter:Ot,LinearMipMapLinearFilter:kt};function Oh(t){\"undefined\"==typeof createImageBitmap&&console.warn(\"THREE.ImageBitmapLoader: createImageBitmap() not supported.\"),\"undefined\"==typeof fetch&&console.warn(\"THREE.ImageBitmapLoader: fetch() not supported.\"),this.manager=void 0!==t?t:Co,this.options=void 0}function kh(){this.type=\"ShapePath\",this.color=new Ai,this.subPaths=[],this.currentPath=null}function Dh(t){this.type=\"Font\",this.data=t}function Bh(t,e,i,n,r){var s=r.glyphs[t]||r.glyphs[\"?\"];if(s){var a,o,h,l,c,u,p,d,m=new kh;if(s.o)for(var f=s._cachedOutline||(s._cachedOutline=s.o.split(\" \")),v=0,g=f.length;v<g;){switch(f[v++]){case\"m\":a=f[v++]*e+i,o=f[v++]*e+n,m.moveTo(a,o);break;case\"l\":a=f[v++]*e+i,o=f[v++]*e+n,m.lineTo(a,o);break;case\"q\":h=f[v++]*e+i,l=f[v++]*e+n,c=f[v++]*e+i,u=f[v++]*e+n,m.quadraticCurveTo(c,u,h,l);break;case\"b\":h=f[v++]*e+i,l=f[v++]*e+n,c=f[v++]*e+i,u=f[v++]*e+n,p=f[v++]*e+i,d=f[v++]*e+n,m.bezierCurveTo(c,u,p,d,h,l)}}return{offsetX:s.ha*e,path:m}}}function Vh(t){this.manager=void 0!==t?t:Co}function Uh(){}Oh.prototype={constructor:Oh,setOptions:function(t){return this.options=t,this},load:function(t,e,i,n){void 0===t&&(t=\"\"),void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);var r=this,s=No.get(t);if(void 0!==s)return r.manager.itemStart(t),setTimeout(function(){e&&e(s),r.manager.itemEnd(t)},0),s;fetch(t).then(function(t){return t.blob()}).then(function(t){return createImageBitmap(t,r.options)}).then(function(i){No.add(t,i),e&&e(i),r.manager.itemEnd(t)}).catch(function(e){n&&n(e),r.manager.itemError(t),r.manager.itemEnd(t)})},setCrossOrigin:function(){return this},setPath:function(t){return this.path=t,this}},Object.assign(kh.prototype,{moveTo:function(t,e){this.currentPath=new lh,this.subPaths.push(this.currentPath),this.currentPath.moveTo(t,e)},lineTo:function(t,e){this.currentPath.lineTo(t,e)},quadraticCurveTo:function(t,e,i,n){this.currentPath.quadraticCurveTo(t,e,i,n)},bezierCurveTo:function(t,e,i,n,r,s){this.currentPath.bezierCurveTo(t,e,i,n,r,s)},splineThru:function(t){this.currentPath.splineThru(t)},toShapes:function(t,e){function i(t){for(var e=[],i=0,n=t.length;i<n;i++){var r=t[i],s=new ch;s.curves=r.curves,e.push(s)}return e}function n(t,e){for(var i=e.length,n=!1,r=i-1,s=0;s<i;r=s++){var a=e[r],o=e[s],h=o.x-a.x,l=o.y-a.y;if(Math.abs(l)>Number.EPSILON){if(l<0&&(a=e[s],h=-h,o=e[r],l=-l),t.y<a.y||t.y>o.y)continue;if(t.y===a.y){if(t.x===a.x)return!0}else{var c=l*(t.x-a.x)-h*(t.y-a.y);if(0===c)return!0;if(c<0)continue;n=!n}}else{if(t.y!==a.y)continue;if(o.x<=t.x&&t.x<=a.x||a.x<=t.x&&t.x<=o.x)return!0}}return n}var r=Ra.isClockWise,s=this.subPaths;if(0===s.length)return[];if(!0===e)return i(s);var a,o,h,l=[];if(1===s.length)return o=s[0],(h=new ch).curves=o.curves,l.push(h),l;var c=!r(s[0].getPoints());c=t?!c:c;var u,p,d=[],m=[],f=[],v=0;m[v]=void 0,f[v]=[];for(var g=0,y=s.length;g<y;g++)a=r(u=(o=s[g]).getPoints()),(a=t?!a:a)?(!c&&m[v]&&v++,m[v]={s:new ch,p:u},m[v].s.curves=o.curves,c&&v++,f[v]=[]):f[v].push({h:o,p:u[0]});if(!m[0])return i(s);if(m.length>1){for(var x=!1,b=[],w=0,M=m.length;w<M;w++)d[w]=[];for(w=0,M=m.length;w<M;w++)for(var _=f[w],S=0;S<_.length;S++){for(var E=_[S],T=!0,L=0;L<m.length;L++)n(E.p,m[L].p)&&(w!==L&&b.push({froms:w,tos:L,hole:S}),T?(T=!1,d[L].push(E)):x=!0);T&&d[w].push(E)}b.length>0&&(x||(f=d))}g=0;for(var A=m.length;g<A;g++){h=m[g].s,l.push(h);for(var P=0,z=(p=f[g]).length;P<z;P++)h.holes.push(p[P].h)}return l}}),Object.assign(Dh.prototype,{isFont:!0,generateShapes:function(t,e){void 0===e&&(e=100);for(var i=[],n=function(t,e,i){for(var n=Array.from?Array.from(t):String(t).split(\"\"),r=e/i.resolution,s=(i.boundingBox.yMax-i.boundingBox.yMin+i.underlineThickness)*r,a=[],o=0,h=0,l=0;l<n.length;l++){var c=n[l];if(\"\\n\"===c)o=0,h-=s;else{var u=Bh(c,r,o,h,i);o+=u.offsetX,a.push(u.path)}}return a}(t,e,this.data),r=0,s=n.length;r<s;r++)Array.prototype.push.apply(i,n[r].toShapes());return i}}),Object.assign(Vh.prototype,{load:function(t,e,i,n){var r=this,s=new Oo(this.manager);s.setPath(this.path),s.load(t,function(t){var i;try{i=JSON.parse(t)}catch(e){console.warn(\"THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.\"),i=JSON.parse(t.substring(65,t.length-2))}var n=r.parse(i);e&&e(n)},i,n)},parse:function(t){return new Dh(t)},setPath:function(t){return this.path=t,this}}),Uh.Handlers={handlers:[],add:function(t,e){this.handlers.push(t,e)},get:function(t){for(var e=this.handlers,i=0,n=e.length;i<n;i+=2){var r=e[i],s=e[i+1];if(r.test(t))return s}return null}},Object.assign(Uh.prototype,{crossOrigin:\"anonymous\",onLoadStart:function(){},onLoadProgress:function(){},onLoadComplete:function(){},initMaterials:function(t,e,i){for(var n=[],r=0;r<t.length;++r)n[r]=this.createMaterial(t[r],e,i);return n},createMaterial:(Lh={NoBlending:O,NormalBlending:k,AdditiveBlending:D,SubtractiveBlending:B,MultiplyBlending:V,CustomBlending:U},Ah=new Ai,Ph=new Fo,zh=new Mh,function(t,e,i){var n={};function r(t,r,s,a,o){var h,l=e+t,c=Uh.Handlers.get(l);null!==c?h=c.load(l):(Ph.setCrossOrigin(i),h=Ph.load(l)),void 0!==r&&(h.repeat.fromArray(r),1!==r[0]&&(h.wrapS=At),1!==r[1]&&(h.wrapT=At)),void 0!==s&&h.offset.fromArray(s),void 0!==a&&(\"repeat\"===a[0]&&(h.wrapS=At),\"mirror\"===a[0]&&(h.wrapS=zt),\"repeat\"===a[1]&&(h.wrapT=At),\"mirror\"===a[1]&&(h.wrapT=zt)),void 0!==o&&(h.anisotropy=o);var u=Qe.generateUUID();return n[u]=h,u}var s={uuid:Qe.generateUUID(),type:\"MeshLambertMaterial\"};for(var a in t){var o=t[a];switch(a){case\"DbgColor\":case\"DbgIndex\":case\"opticalDensity\":case\"illumination\":break;case\"DbgName\":s.name=o;break;case\"blending\":s.blending=Lh[o];break;case\"colorAmbient\":case\"mapAmbient\":console.warn(\"THREE.Loader.createMaterial:\",a,\"is no longer supported.\");break;case\"colorDiffuse\":s.color=Ah.fromArray(o).getHex();break;case\"colorSpecular\":s.specular=Ah.fromArray(o).getHex();break;case\"colorEmissive\":s.emissive=Ah.fromArray(o).getHex();break;case\"specularCoef\":s.shininess=o;break;case\"shading\":\"basic\"===o.toLowerCase()&&(s.type=\"MeshBasicMaterial\"),\"phong\"===o.toLowerCase()&&(s.type=\"MeshPhongMaterial\"),\"standard\"===o.toLowerCase()&&(s.type=\"MeshStandardMaterial\");break;case\"mapDiffuse\":s.map=r(o,t.mapDiffuseRepeat,t.mapDiffuseOffset,t.mapDiffuseWrap,t.mapDiffuseAnisotropy);break;case\"mapDiffuseRepeat\":case\"mapDiffuseOffset\":case\"mapDiffuseWrap\":case\"mapDiffuseAnisotropy\":break;case\"mapEmissive\":s.emissiveMap=r(o,t.mapEmissiveRepeat,t.mapEmissiveOffset,t.mapEmissiveWrap,t.mapEmissiveAnisotropy);break;case\"mapEmissiveRepeat\":case\"mapEmissiveOffset\":case\"mapEmissiveWrap\":case\"mapEmissiveAnisotropy\":break;case\"mapLight\":s.lightMap=r(o,t.mapLightRepeat,t.mapLightOffset,t.mapLightWrap,t.mapLightAnisotropy);break;case\"mapLightRepeat\":case\"mapLightOffset\":case\"mapLightWrap\":case\"mapLightAnisotropy\":break;case\"mapAO\":s.aoMap=r(o,t.mapAORepeat,t.mapAOOffset,t.mapAOWrap,t.mapAOAnisotropy);break;case\"mapAORepeat\":case\"mapAOOffset\":case\"mapAOWrap\":case\"mapAOAnisotropy\":break;case\"mapBump\":s.bumpMap=r(o,t.mapBumpRepeat,t.mapBumpOffset,t.mapBumpWrap,t.mapBumpAnisotropy);break;case\"mapBumpScale\":s.bumpScale=o;break;case\"mapBumpRepeat\":case\"mapBumpOffset\":case\"mapBumpWrap\":case\"mapBumpAnisotropy\":break;case\"mapNormal\":s.normalMap=r(o,t.mapNormalRepeat,t.mapNormalOffset,t.mapNormalWrap,t.mapNormalAnisotropy);break;case\"mapNormalFactor\":s.normalScale=o;break;case\"mapNormalRepeat\":case\"mapNormalOffset\":case\"mapNormalWrap\":case\"mapNormalAnisotropy\":break;case\"mapSpecular\":s.specularMap=r(o,t.mapSpecularRepeat,t.mapSpecularOffset,t.mapSpecularWrap,t.mapSpecularAnisotropy);break;case\"mapSpecularRepeat\":case\"mapSpecularOffset\":case\"mapSpecularWrap\":case\"mapSpecularAnisotropy\":break;case\"mapMetalness\":s.metalnessMap=r(o,t.mapMetalnessRepeat,t.mapMetalnessOffset,t.mapMetalnessWrap,t.mapMetalnessAnisotropy);break;case\"mapMetalnessRepeat\":case\"mapMetalnessOffset\":case\"mapMetalnessWrap\":case\"mapMetalnessAnisotropy\":break;case\"mapRoughness\":s.roughnessMap=r(o,t.mapRoughnessRepeat,t.mapRoughnessOffset,t.mapRoughnessWrap,t.mapRoughnessAnisotropy);break;case\"mapRoughnessRepeat\":case\"mapRoughnessOffset\":case\"mapRoughnessWrap\":case\"mapRoughnessAnisotropy\":break;case\"mapAlpha\":s.alphaMap=r(o,t.mapAlphaRepeat,t.mapAlphaOffset,t.mapAlphaWrap,t.mapAlphaAnisotropy);break;case\"mapAlphaRepeat\":case\"mapAlphaOffset\":case\"mapAlphaWrap\":case\"mapAlphaAnisotropy\":break;case\"flipSided\":s.side=A;break;case\"doubleSided\":s.side=P;break;case\"transparency\":console.warn(\"THREE.Loader.createMaterial: transparency has been renamed to opacity\"),s.opacity=o;break;case\"depthTest\":case\"depthWrite\":case\"colorWrite\":case\"opacity\":case\"reflectivity\":case\"transparent\":case\"visible\":case\"wireframe\":s[a]=o;break;case\"vertexColors\":!0===o&&(s.vertexColors=I),\"face\"===o&&(s.vertexColors=C);break;default:console.error(\"THREE.Loader.createMaterial: Unsupported\",a,o)}}return\"MeshBasicMaterial\"===s.type&&delete s.emissive,\"MeshPhongMaterial\"!==s.type&&delete s.specular,s.opacity<1&&(s.transparent=!0),zh.setTextures(n),zh.parse(s)})});var Fh,Hh,Gh,jh,Wh,qh,Xh,Yh,Jh,Zh,Qh={getContext:function(){return void 0===Nh&&(Nh=new(window.AudioContext||window.webkitAudioContext)),Nh},setContext:function(t){Nh=t}};function Kh(t){this.manager=void 0!==t?t:Co}function $h(){this.type=\"StereoCamera\",this.aspect=1,this.eyeSep=.064,this.cameraL=new cs,this.cameraL.layers.enable(1),this.cameraL.matrixAutoUpdate=!1,this.cameraR=new cs,this.cameraR.layers.enable(2),this.cameraR.matrixAutoUpdate=!1}function tl(t,e,i,n){Hi.call(this),this.type=\"CubeCamera\";var r=new cs(90,1,t,e);r.up.set(0,-1,0),r.lookAt(new ei(1,0,0)),this.add(r);var s=new cs(90,1,t,e);s.up.set(0,-1,0),s.lookAt(new ei(-1,0,0)),this.add(s);var a=new cs(90,1,t,e);a.up.set(0,0,1),a.lookAt(new ei(0,1,0)),this.add(a);var o=new cs(90,1,t,e);o.up.set(0,0,-1),o.lookAt(new ei(0,-1,0)),this.add(o);var h=new cs(90,1,t,e);h.up.set(0,-1,0),h.lookAt(new ei(0,0,1)),this.add(h);var l=new cs(90,1,t,e);l.up.set(0,-1,0),l.lookAt(new ei(0,0,-1)),this.add(l),n=n||{format:Zt,magFilter:It,minFilter:It},this.renderTarget=new mi(i,i,n),this.renderTarget.texture.name=\"CubeCamera\",this.update=function(t,e){null===this.parent&&this.updateMatrixWorld();var i=t.getRenderTarget(),n=this.renderTarget,c=n.texture.generateMipmaps;n.texture.generateMipmaps=!1,n.activeCubeFace=0,t.render(e,r,n),n.activeCubeFace=1,t.render(e,s,n),n.activeCubeFace=2,t.render(e,a,n),n.activeCubeFace=3,t.render(e,o,n),n.activeCubeFace=4,t.render(e,h,n),n.texture.generateMipmaps=c,n.activeCubeFace=5,t.render(e,l,n),t.setRenderTarget(i)},this.clear=function(t,e,i,n){for(var r=t.getRenderTarget(),s=this.renderTarget,a=0;a<6;a++)s.activeCubeFace=a,t.setRenderTarget(s),t.clear(e,i,n);t.setRenderTarget(r)}}function el(t){this.autoStart=void 0===t||t,this.startTime=0,this.oldTime=0,this.elapsedTime=0,this.running=!1}function il(){Hi.call(this),this.type=\"AudioListener\",this.context=Qh.getContext(),this.gain=this.context.createGain(),this.gain.connect(this.context.destination),this.filter=null,this.timeDelta=0}function nl(t){Hi.call(this),this.type=\"Audio\",this.listener=t,this.context=t.context,this.gain=this.context.createGain(),this.gain.connect(t.getInput()),this.autoplay=!1,this.buffer=null,this.detune=0,this.loop=!1,this.startTime=0,this.offset=0,this.playbackRate=1,this.isPlaying=!1,this.hasPlaybackControl=!0,this.sourceType=\"empty\",this.filters=[]}function rl(t){nl.call(this,t),this.panner=this.context.createPanner(),this.panner.connect(this.gain)}function sl(t,e){this.analyser=t.context.createAnalyser(),this.analyser.fftSize=void 0!==e?e:2048,this.data=new Uint8Array(this.analyser.frequencyBinCount),t.getOutput().connect(this.analyser)}function al(t,e,i){this.binding=t,this.valueSize=i;var n,r=Float64Array;switch(e){case\"quaternion\":n=this._slerp;break;case\"string\":case\"bool\":r=Array,n=this._select;break;default:n=this._lerp}this.buffer=new r(4*i),this._mixBufferRegion=n,this.cumulativeWeight=0,this.useCount=0,this.referenceCount=0}Object.assign(Kh.prototype,{load:function(t,e,i,n){var r=new Oo(this.manager);r.setResponseType(\"arraybuffer\"),r.setPath(this.path),r.load(t,function(t){var i=t.slice(0);Qh.getContext().decodeAudioData(i,function(t){e(t)})},i,n)},setPath:function(t){return this.path=t,this}}),Object.assign($h.prototype,{update:(Jh=new $e,Zh=new $e,function(t){if(Fh!==this||Hh!==t.focus||Gh!==t.fov||jh!==t.aspect*this.aspect||Wh!==t.near||qh!==t.far||Xh!==t.zoom||Yh!==this.eyeSep){Fh=this,Hh=t.focus,Gh=t.fov,jh=t.aspect*this.aspect,Wh=t.near,qh=t.far,Xh=t.zoom;var e,i,n=t.projectionMatrix.clone(),r=(Yh=this.eyeSep/2)*Wh/Hh,s=Wh*Math.tan(Qe.DEG2RAD*Gh*.5)/Xh;Zh.elements[12]=-Yh,Jh.elements[12]=Yh,e=-s*jh+r,i=s*jh+r,n.elements[0]=2*Wh/(i-e),n.elements[8]=(i+e)/(i-e),this.cameraL.projectionMatrix.copy(n),e=-s*jh-r,i=s*jh-r,n.elements[0]=2*Wh/(i-e),n.elements[8]=(i+e)/(i-e),this.cameraR.projectionMatrix.copy(n)}this.cameraL.matrixWorld.copy(t.matrixWorld).multiply(Zh),this.cameraR.matrixWorld.copy(t.matrixWorld).multiply(Jh)})}),tl.prototype=Object.create(Hi.prototype),tl.prototype.constructor=tl,Object.assign(el.prototype,{start:function(){this.startTime=(\"undefined\"==typeof performance?Date:performance).now(),this.oldTime=this.startTime,this.elapsedTime=0,this.running=!0},stop:function(){this.getElapsedTime(),this.running=!1,this.autoStart=!1},getElapsedTime:function(){return this.getDelta(),this.elapsedTime},getDelta:function(){var t=0;if(this.autoStart&&!this.running)return this.start(),0;if(this.running){var e=(\"undefined\"==typeof performance?Date:performance).now();t=(e-this.oldTime)/1e3,this.oldTime=e,this.elapsedTime+=t}return t}}),il.prototype=Object.assign(Object.create(Hi.prototype),{constructor:il,getInput:function(){return this.gain},removeFilter:function(){return null!==this.filter&&(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination),this.gain.connect(this.context.destination),this.filter=null),this},getFilter:function(){return this.filter},setFilter:function(t){return null!==this.filter?(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination)):this.gain.disconnect(this.context.destination),this.filter=t,this.gain.connect(this.filter),this.filter.connect(this.context.destination),this},getMasterVolume:function(){return this.gain.gain.value},setMasterVolume:function(t){return this.gain.gain.setTargetAtTime(t,this.context.currentTime,.01),this},updateMatrixWorld:function(){var t=new ei,e=new ti,i=new ei,n=new ei,r=new el;return function(s){Hi.prototype.updateMatrixWorld.call(this,s);var a=this.context.listener,o=this.up;if(this.timeDelta=r.getDelta(),this.matrixWorld.decompose(t,e,i),n.set(0,0,-1).applyQuaternion(e),a.positionX){var h=this.context.currentTime+this.timeDelta;a.positionX.linearRampToValueAtTime(t.x,h),a.positionY.linearRampToValueAtTime(t.y,h),a.positionZ.linearRampToValueAtTime(t.z,h),a.forwardX.linearRampToValueAtTime(n.x,h),a.forwardY.linearRampToValueAtTime(n.y,h),a.forwardZ.linearRampToValueAtTime(n.z,h),a.upX.linearRampToValueAtTime(o.x,h),a.upY.linearRampToValueAtTime(o.y,h),a.upZ.linearRampToValueAtTime(o.z,h)}else a.setPosition(t.x,t.y,t.z),a.setOrientation(n.x,n.y,n.z,o.x,o.y,o.z)}}()}),nl.prototype=Object.assign(Object.create(Hi.prototype),{constructor:nl,getOutput:function(){return this.gain},setNodeSource:function(t){return this.hasPlaybackControl=!1,this.sourceType=\"audioNode\",this.source=t,this.connect(),this},setMediaElementSource:function(t){return this.hasPlaybackControl=!1,this.sourceType=\"mediaNode\",this.source=this.context.createMediaElementSource(t),this.connect(),this},setBuffer:function(t){return this.buffer=t,this.sourceType=\"buffer\",this.autoplay&&this.play(),this},play:function(){if(!0!==this.isPlaying){if(!1!==this.hasPlaybackControl){var t=this.context.createBufferSource();return t.buffer=this.buffer,t.loop=this.loop,t.onended=this.onEnded.bind(this),this.startTime=this.context.currentTime,t.start(this.startTime,this.offset),this.isPlaying=!0,this.source=t,this.setDetune(this.detune),this.setPlaybackRate(this.playbackRate),this.connect()}console.warn(\"THREE.Audio: this Audio has no playback control.\")}else console.warn(\"THREE.Audio: Audio is already playing.\")},pause:function(){if(!1!==this.hasPlaybackControl)return!0===this.isPlaying&&(this.source.stop(),this.source.onended=null,this.offset+=(this.context.currentTime-this.startTime)*this.playbackRate,this.isPlaying=!1),this;console.warn(\"THREE.Audio: this Audio has no playback control.\")},stop:function(){if(!1!==this.hasPlaybackControl)return this.source.stop(),this.source.onended=null,this.offset=0,this.isPlaying=!1,this;console.warn(\"THREE.Audio: this Audio has no playback control.\")},connect:function(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(var t=1,e=this.filters.length;t<e;t++)this.filters[t-1].connect(this.filters[t]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this},disconnect:function(){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(var t=1,e=this.filters.length;t<e;t++)this.filters[t-1].disconnect(this.filters[t]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this},getFilters:function(){return this.filters},setFilters:function(t){return t||(t=[]),!0===this.isPlaying?(this.disconnect(),this.filters=t,this.connect()):this.filters=t,this},setDetune:function(t){if(this.detune=t,void 0!==this.source.detune)return!0===this.isPlaying&&this.source.detune.setTargetAtTime(this.detune,this.context.currentTime,.01),this},getDetune:function(){return this.detune},getFilter:function(){return this.getFilters()[0]},setFilter:function(t){return this.setFilters(t?[t]:[])},setPlaybackRate:function(t){if(!1!==this.hasPlaybackControl)return this.playbackRate=t,!0===this.isPlaying&&this.source.playbackRate.setTargetAtTime(this.playbackRate,this.context.currentTime,.01),this;console.warn(\"THREE.Audio: this Audio has no playback control.\")},getPlaybackRate:function(){return this.playbackRate},onEnded:function(){this.isPlaying=!1},getLoop:function(){return!1===this.hasPlaybackControl?(console.warn(\"THREE.Audio: this Audio has no playback control.\"),!1):this.loop},setLoop:function(t){if(!1!==this.hasPlaybackControl)return this.loop=t,!0===this.isPlaying&&(this.source.loop=this.loop),this;console.warn(\"THREE.Audio: this Audio has no playback control.\")},getVolume:function(){return this.gain.gain.value},setVolume:function(t){return this.gain.gain.setTargetAtTime(t,this.context.currentTime,.01),this}}),rl.prototype=Object.assign(Object.create(nl.prototype),{constructor:rl,getOutput:function(){return this.panner},getRefDistance:function(){return this.panner.refDistance},setRefDistance:function(t){return this.panner.refDistance=t,this},getRolloffFactor:function(){return this.panner.rolloffFactor},setRolloffFactor:function(t){return this.panner.rolloffFactor=t,this},getDistanceModel:function(){return this.panner.distanceModel},setDistanceModel:function(t){return this.panner.distanceModel=t,this},getMaxDistance:function(){return this.panner.maxDistance},setMaxDistance:function(t){return this.panner.maxDistance=t,this},setDirectionalCone:function(t,e,i){return this.panner.coneInnerAngle=t,this.panner.coneOuterAngle=e,this.panner.coneOuterGain=i,this},updateMatrixWorld:function(){var t=new ei,e=new ti,i=new ei,n=new ei;return function(r){if(Hi.prototype.updateMatrixWorld.call(this,r),!1!==this.isPlaying){this.matrixWorld.decompose(t,e,i),n.set(0,0,1).applyQuaternion(e);var s=this.panner;if(s.positionX){var a=this.context.currentTime+this.listener.timeDelta;s.positionX.linearRampToValueAtTime(t.x,a),s.positionY.linearRampToValueAtTime(t.y,a),s.positionZ.linearRampToValueAtTime(t.z,a),s.orientationX.linearRampToValueAtTime(n.x,a),s.orientationY.linearRampToValueAtTime(n.y,a),s.orientationZ.linearRampToValueAtTime(n.z,a)}else s.setPosition(t.x,t.y,t.z),s.setOrientation(n.x,n.y,n.z)}}}()}),Object.assign(sl.prototype,{getFrequencyData:function(){return this.analyser.getByteFrequencyData(this.data),this.data},getAverageFrequency:function(){for(var t=0,e=this.getFrequencyData(),i=0;i<e.length;i++)t+=e[i];return t/e.length}}),Object.assign(al.prototype,{accumulate:function(t,e){var i=this.buffer,n=this.valueSize,r=t*n+n,s=this.cumulativeWeight;if(0===s){for(var a=0;a!==n;++a)i[r+a]=i[a];s=e}else{var o=e/(s+=e);this._mixBufferRegion(i,r,0,o,n)}this.cumulativeWeight=s},apply:function(t){var e=this.valueSize,i=this.buffer,n=t*e+e,r=this.cumulativeWeight,s=this.binding;if(this.cumulativeWeight=0,r<1){var a=3*e;this._mixBufferRegion(i,n,a,1-r,e)}for(var o=e,h=e+e;o!==h;++o)if(i[o]!==i[o+e]){s.setValue(i,n);break}},saveOriginalState:function(){var t=this.binding,e=this.buffer,i=this.valueSize,n=3*i;t.getValue(e,n);for(var r=i,s=n;r!==s;++r)e[r]=e[n+r%i];this.cumulativeWeight=0},restoreOriginalState:function(){var t=3*this.valueSize;this.binding.setValue(this.buffer,t)},_select:function(t,e,i,n,r){if(n>=.5)for(var s=0;s!==r;++s)t[e+s]=t[i+s]},_slerp:function(t,e,i,n){ti.slerpFlat(t,e,t,e,t,i,n)},_lerp:function(t,e,i,n,r){for(var s=1-n,a=0;a!==r;++a){var o=e+a;t[o]=t[o]*s+t[i+a]*n}}});var ol,hl,ll,cl,ul,pl,dl,ml,fl,vl,gl,yl,xl,bl,wl;function Ml(t,e,i){var n=i||_l.parseTrackName(e);this._targetGroup=t,this._bindings=t.subscribe_(e,n)}function _l(t,e,i){this.path=e,this.parsedPath=i||_l.parseTrackName(e),this.node=_l.findNode(t,this.parsedPath.nodeName)||t,this.rootNode=t}function Sl(){this.uuid=Qe.generateUUID(),this._objects=Array.prototype.slice.call(arguments),this.nCachedObjects_=0;var t={};this._indicesByUUID=t;for(var e=0,i=arguments.length;e!==i;++e)t[arguments[e].uuid]=e;this._paths=[],this._parsedPaths=[],this._bindings=[],this._bindingsIndicesByPath={};var n=this;this.stats={objects:{get total(){return n._objects.length},get inUse(){return this.total-n.nCachedObjects_}},get bindingsPerObject(){return n._bindings.length}}}function El(t,e,i){this._mixer=t,this._clip=e,this._localRoot=i||null;for(var n=e.tracks,r=n.length,s=new Array(r),a={endingStart:Ce,endingEnd:Ce},o=0;o!==r;++o){var h=n[o].createInterpolant(null);s[o]=h,h.settings=a}this._interpolantSettings=a,this._interpolants=s,this._propertyBindings=new Array(r),this._cacheIndex=null,this._byClipCacheIndex=null,this._timeScaleInterpolant=null,this._weightInterpolant=null,this.loop=Ae,this._loopCount=-1,this._startTime=null,this.time=0,this.timeScale=1,this._effectiveTimeScale=1,this.weight=1,this._effectiveWeight=1,this.repetitions=1/0,this.paused=!1,this.enabled=!0,this.clampWhenFinished=!1,this.zeroSlopeAtStart=!0,this.zeroSlopeAtEnd=!0}function Tl(t){this._root=t,this._initMemoryManager(),this._accuIndex=0,this.time=0,this.timeScale=1}function Ll(t){\"string\"==typeof t&&(console.warn(\"THREE.Uniform: Type parameter is no longer needed.\"),t=arguments[1]),this.value=t}function Al(){on.call(this),this.type=\"InstancedBufferGeometry\",this.maxInstancedCount=void 0}function Pl(t,e,i){Ls.call(this,t,e),this.meshPerAttribute=i||1}function zl(t,e,i,n){\"number\"==typeof i&&(n=i,i=!1,console.error(\"THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.\")),Xi.call(this,t,e,i),this.meshPerAttribute=n||1}function Nl(t,e,i,n){this.ray=new Ln(t,e),this.near=i||0,this.far=n||1/0,this.params={Mesh:{},Line:{},LOD:{},Points:{threshold:1},Sprite:{}},Object.defineProperties(this.params,{PointCloud:{get:function(){return console.warn(\"THREE.Raycaster: params.PointCloud has been renamed to params.Points.\"),this.Points}}})}function Rl(t,e){return t.distance-e.distance}function Cl(t,e,i,n){if(!1!==t.visible&&(t.raycast(e,i),!0===n))for(var r=t.children,s=0,a=r.length;s<a;s++)Cl(r[s],e,i,!0)}function Il(t,e,i){return this.radius=void 0!==t?t:1,this.phi=void 0!==e?e:0,this.theta=void 0!==i?i:0,this}function Ol(t,e,i){return this.radius=void 0!==t?t:1,this.theta=void 0!==e?e:0,this.y=void 0!==i?i:0,this}function kl(t,e){this.min=void 0!==t?t:new Ke(1/0,1/0),this.max=void 0!==e?e:new Ke(-1/0,-1/0)}function Dl(t,e){this.start=void 0!==t?t:new ei,this.end=void 0!==e?e:new ei}function Bl(t){Hi.call(this),this.material=t,this.render=function(){}}function Vl(t,e,i,n){this.object=t,this.size=void 0!==e?e:1;var r=void 0!==i?i:16711680,s=void 0!==n?n:1,a=0,o=this.object.geometry;o&&o.isGeometry?a=3*o.faces.length:o&&o.isBufferGeometry&&(a=o.attributes.normal.count);var h=new on,l=new en(2*a*3,3);h.addAttribute(\"position\",l),Ds.call(this,h,new Os({color:r,linewidth:s})),this.matrixAutoUpdate=!1,this.update()}function Ul(t,e){Hi.call(this),this.light=t,this.light.updateMatrixWorld(),this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.color=e;for(var i=new on,n=[0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,-1,0,1,0,0,0,0,1,1,0,0,0,0,-1,1],r=0,s=1;r<32;r++,s++){var a=r/32*Math.PI*2,o=s/32*Math.PI*2;n.push(Math.cos(a),Math.sin(a),1,Math.cos(o),Math.sin(o),1)}i.addAttribute(\"position\",new en(n,3));var h=new Os({fog:!1});this.cone=new Ds(i,h),this.add(this.cone),this.update()}function Fl(t){for(var e=function t(e){var i=[];e&&e.isBone&&i.push(e);for(var n=0;n<e.children.length;n++)i.push.apply(i,t(e.children[n]));return i}(t),i=new on,n=[],r=[],s=new Ai(0,0,1),a=new Ai(0,1,0),o=0;o<e.length;o++){var h=e[o];h.parent&&h.parent.isBone&&(n.push(0,0,0),n.push(0,0,0),r.push(s.r,s.g,s.b),r.push(a.r,a.g,a.b))}i.addAttribute(\"position\",new en(n,3)),i.addAttribute(\"color\",new en(r,3));var l=new Os({vertexColors:I,depthTest:!1,depthWrite:!1,transparent:!0});Ds.call(this,i,l),this.root=t,this.bones=e,this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1}function Hl(t,e,i){this.light=t,this.light.updateMatrixWorld(),this.color=i;var n=new Ha(e,4,2),r=new Pn({wireframe:!0,fog:!1});zn.call(this,n,r),this.matrix=this.light.matrixWorld,this.matrixAutoUpdate=!1,this.update()}function Gl(t,e){this.type=\"RectAreaLightHelper\",this.light=t,this.color=e;var i=new on;i.addAttribute(\"position\",new en([1,1,0,-1,1,0,-1,-1,0,1,-1,0,1,1,0],3)),i.computeBoundingSphere();var n=new Os({fog:!1});ks.call(this,i,n);var r=new on;r.addAttribute(\"position\",new en([1,1,0,-1,1,0,-1,-1,0,1,1,0,-1,-1,0,1,-1,0],3)),r.computeBoundingSphere(),this.add(new zn(r,new Pn({side:A,fog:!1}))),this.update()}function jl(t,e,i){Hi.call(this),this.light=t,this.light.updateMatrixWorld(),this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.color=i;var n=new $s(e);n.rotateY(.5*Math.PI),this.material=new Pn({wireframe:!0,fog:!1}),void 0===this.color&&(this.material.vertexColors=I);var r=n.getAttribute(\"position\"),s=new Float32Array(3*r.count);n.addAttribute(\"color\",new Xi(s,3)),this.add(new zn(n,this.material)),this.update()}function Wl(t,e,i,n){t=t||10,e=e||10,i=new Ai(void 0!==i?i:4473924),n=new Ai(void 0!==n?n:8947848);for(var r=e/2,s=t/e,a=t/2,o=[],h=[],l=0,c=0,u=-a;l<=e;l++,u+=s){o.push(-a,0,u,a,0,u),o.push(u,0,-a,u,0,a);var p=l===r?i:n;p.toArray(h,c),c+=3,p.toArray(h,c),c+=3,p.toArray(h,c),c+=3,p.toArray(h,c),c+=3}var d=new on;d.addAttribute(\"position\",new en(o,3)),d.addAttribute(\"color\",new en(h,3));var m=new Os({vertexColors:I});Ds.call(this,d,m)}function ql(t,e,i,n,r,s){t=t||10,e=e||16,i=i||8,n=n||64,r=new Ai(void 0!==r?r:4473924),s=new Ai(void 0!==s?s:8947848);var a,o,h,l,c,u,p,d=[],m=[];for(l=0;l<=e;l++)h=l/e*(2*Math.PI),a=Math.sin(h)*t,o=Math.cos(h)*t,d.push(0,0,0),d.push(a,0,o),p=1&l?r:s,m.push(p.r,p.g,p.b),m.push(p.r,p.g,p.b);for(l=0;l<=i;l++)for(p=1&l?r:s,u=t-t/i*l,c=0;c<n;c++)h=c/n*(2*Math.PI),a=Math.sin(h)*u,o=Math.cos(h)*u,d.push(a,0,o),m.push(p.r,p.g,p.b),h=(c+1)/n*(2*Math.PI),a=Math.sin(h)*u,o=Math.cos(h)*u,d.push(a,0,o),m.push(p.r,p.g,p.b);var f=new on;f.addAttribute(\"position\",new en(d,3)),f.addAttribute(\"color\",new en(m,3));var v=new Os({vertexColors:I});Ds.call(this,f,v)}function Xl(t,e,i,n){this.object=t,this.size=void 0!==e?e:1;var r=void 0!==i?i:16776960,s=void 0!==n?n:1,a=0,o=this.object.geometry;o&&o.isGeometry?a=o.faces.length:console.warn(\"THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.\");var h=new on,l=new en(2*a*3,3);h.addAttribute(\"position\",l),Ds.call(this,h,new Os({color:r,linewidth:s})),this.matrixAutoUpdate=!1,this.update()}function Yl(t,e,i){Hi.call(this),this.light=t,this.light.updateMatrixWorld(),this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.color=i,void 0===e&&(e=1);var n=new on;n.addAttribute(\"position\",new en([-e,e,0,e,e,0,e,-e,0,-e,-e,0,-e,e,0],3));var r=new Os({fog:!1});this.lightPlane=new ks(n,r),this.add(this.lightPlane),(n=new on).addAttribute(\"position\",new en([0,0,0,0,0,1],3)),this.targetLine=new ks(n,r),this.add(this.targetLine),this.update()}function Jl(t){var e=new on,i=new Os({color:16777215,vertexColors:C}),n=[],r=[],s={},a=new Ai(16755200),o=new Ai(16711680),h=new Ai(43775),l=new Ai(16777215),c=new Ai(3355443);function u(t,e,i){p(t,i),p(e,i)}function p(t,e){n.push(0,0,0),r.push(e.r,e.g,e.b),void 0===s[t]&&(s[t]=[]),s[t].push(n.length/3-1)}u(\"n1\",\"n2\",a),u(\"n2\",\"n4\",a),u(\"n4\",\"n3\",a),u(\"n3\",\"n1\",a),u(\"f1\",\"f2\",a),u(\"f2\",\"f4\",a),u(\"f4\",\"f3\",a),u(\"f3\",\"f1\",a),u(\"n1\",\"f1\",a),u(\"n2\",\"f2\",a),u(\"n3\",\"f3\",a),u(\"n4\",\"f4\",a),u(\"p\",\"n1\",o),u(\"p\",\"n2\",o),u(\"p\",\"n3\",o),u(\"p\",\"n4\",o),u(\"u1\",\"u2\",h),u(\"u2\",\"u3\",h),u(\"u3\",\"u1\",h),u(\"c\",\"t\",l),u(\"p\",\"c\",c),u(\"cn1\",\"cn2\",c),u(\"cn3\",\"cn4\",c),u(\"cf1\",\"cf2\",c),u(\"cf3\",\"cf4\",c),e.addAttribute(\"position\",new en(n,3)),e.addAttribute(\"color\",new en(r,3)),Ds.call(this,e,i),this.camera=t,this.camera.updateProjectionMatrix&&this.camera.updateProjectionMatrix(),this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.pointMap=s,this.update()}function Zl(t,e){this.object=t,void 0===e&&(e=16776960);var i=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),n=new Float32Array(24),r=new on;r.setIndex(new Xi(i,1)),r.addAttribute(\"position\",new Xi(n,3)),Ds.call(this,r,new Os({color:e})),this.matrixAutoUpdate=!1,this.update()}function Ql(t,e){this.type=\"Box3Helper\",this.box=t;var i=void 0!==e?e:16776960,n=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),r=new on;r.setIndex(new Xi(n,1)),r.addAttribute(\"position\",new en([1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1],3)),Ds.call(this,r,new Os({color:i})),this.geometry.computeBoundingSphere()}function Kl(t,e,i){this.type=\"PlaneHelper\",this.plane=t,this.size=void 0===e?1:e;var n=void 0!==i?i:16776960,r=new on;r.addAttribute(\"position\",new en([1,-1,1,-1,1,1,-1,-1,1,1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,1,0,0,1,0,0,0],3)),r.computeBoundingSphere(),ks.call(this,r,new Os({color:n}));var s=new on;s.addAttribute(\"position\",new en([1,1,1,-1,1,1,-1,-1,1,1,1,1,-1,-1,1,1,-1,1],3)),s.computeBoundingSphere(),this.add(new zn(s,new Pn({color:n,opacity:.2,transparent:!0,depthWrite:!1})))}function $l(t,e,i,n,r,s){Hi.call(this),void 0===t&&(t=new ei(0,0,1)),void 0===e&&(e=new ei(0,0,0)),void 0===i&&(i=1),void 0===n&&(n=16776960),void 0===r&&(r=.2*i),void 0===s&&(s=.2*r),void 0===yl&&((yl=new on).addAttribute(\"position\",new en([0,0,0,0,1,0],3)),(xl=new Ka(0,.5,1,5,1)).translate(0,-.5,0)),this.position.copy(e),this.line=new ks(yl,new Os({color:n})),this.line.matrixAutoUpdate=!1,this.add(this.line),this.cone=new zn(xl,new Pn({color:n})),this.cone.matrixAutoUpdate=!1,this.add(this.cone),this.setDirection(t),this.setLength(i,r,s)}function tc(t){var e=[0,0,0,t=t||1,0,0,0,0,0,0,t,0,0,0,0,0,0,t],i=new on;i.addAttribute(\"position\",new en(e,3)),i.addAttribute(\"color\",new en([1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1],3));var n=new Os({vertexColors:I});Ds.call(this,i,n)}function ec(t,e,i,n,r,s,a){return console.warn(\"THREE.Face4 has been removed. A THREE.Face3 will be created instead.\"),new Ii(t,e,i,r,s,a)}Object.assign(Ml.prototype,{getValue:function(t,e){this.bind();var i=this._targetGroup.nCachedObjects_,n=this._bindings[i];void 0!==n&&n.getValue(t,e)},setValue:function(t,e){for(var i=this._bindings,n=this._targetGroup.nCachedObjects_,r=i.length;n!==r;++n)i[n].setValue(t,e)},bind:function(){for(var t=this._bindings,e=this._targetGroup.nCachedObjects_,i=t.length;e!==i;++e)t[e].bind()},unbind:function(){for(var t=this._bindings,e=this._targetGroup.nCachedObjects_,i=t.length;e!==i;++e)t[e].unbind()}}),Object.assign(_l,{Composite:Ml,create:function(t,e,i){return t&&t.isAnimationObjectGroup?new _l.Composite(t,e,i):new _l(t,e,i)},sanitizeNodeName:(fl=new RegExp(\"[\\\\[\\\\]\\\\.:\\\\/]\",\"g\"),function(t){return t.replace(/\\s/g,\"_\").replace(fl,\"\")}),parseTrackName:(ol=\"[^\\\\[\\\\]\\\\.:\\\\/]\",hl=\"[^\"+\"\\\\[\\\\]\\\\.:\\\\/\".replace(\"\\\\.\",\"\")+\"]\",ll=/((?:WC+[\\/:])*)/.source.replace(\"WC\",ol),cl=/(WCOD+)?/.source.replace(\"WCOD\",hl),ul=/(?:\\.(WC+)(?:\\[(.+)\\])?)?/.source.replace(\"WC\",ol),pl=/\\.(WC+)(?:\\[(.+)\\])?/.source.replace(\"WC\",ol),dl=new RegExp(\"^\"+ll+cl+ul+pl+\"$\"),ml=[\"material\",\"materials\",\"bones\"],function(t){var e=dl.exec(t);if(!e)throw new Error(\"PropertyBinding: Cannot parse trackName: \"+t);var i={nodeName:e[2],objectName:e[3],objectIndex:e[4],propertyName:e[5],propertyIndex:e[6]},n=i.nodeName&&i.nodeName.lastIndexOf(\".\");if(void 0!==n&&-1!==n){var r=i.nodeName.substring(n+1);-1!==ml.indexOf(r)&&(i.nodeName=i.nodeName.substring(0,n),i.objectName=r)}if(null===i.propertyName||0===i.propertyName.length)throw new Error(\"PropertyBinding: can not parse propertyName from trackName: \"+t);return i}),findNode:function(t,e){if(!e||\"\"===e||\"root\"===e||\".\"===e||-1===e||e===t.name||e===t.uuid)return t;if(t.skeleton){var i=t.skeleton.getBoneByName(e);if(void 0!==i)return i}if(t.children){var n=function(t){for(var i=0;i<t.length;i++){var r=t[i];if(r.name===e||r.uuid===e)return r;var s=n(r.children);if(s)return s}return null},r=n(t.children);if(r)return r}return null}}),Object.assign(_l.prototype,{_getValue_unavailable:function(){},_setValue_unavailable:function(){},BindingType:{Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},Versioning:{None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},GetterByBindingType:[function(t,e){t[e]=this.node[this.propertyName]},function(t,e){for(var i=this.resolvedProperty,n=0,r=i.length;n!==r;++n)t[e++]=i[n]},function(t,e){t[e]=this.resolvedProperty[this.propertyIndex]},function(t,e){this.resolvedProperty.toArray(t,e)}],SetterByBindingTypeAndVersioning:[[function(t,e){this.targetObject[this.propertyName]=t[e]},function(t,e){this.targetObject[this.propertyName]=t[e],this.targetObject.needsUpdate=!0},function(t,e){this.targetObject[this.propertyName]=t[e],this.targetObject.matrixWorldNeedsUpdate=!0}],[function(t,e){for(var i=this.resolvedProperty,n=0,r=i.length;n!==r;++n)i[n]=t[e++]},function(t,e){for(var i=this.resolvedProperty,n=0,r=i.length;n!==r;++n)i[n]=t[e++];this.targetObject.needsUpdate=!0},function(t,e){for(var i=this.resolvedProperty,n=0,r=i.length;n!==r;++n)i[n]=t[e++];this.targetObject.matrixWorldNeedsUpdate=!0}],[function(t,e){this.resolvedProperty[this.propertyIndex]=t[e]},function(t,e){this.resolvedProperty[this.propertyIndex]=t[e],this.targetObject.needsUpdate=!0},function(t,e){this.resolvedProperty[this.propertyIndex]=t[e],this.targetObject.matrixWorldNeedsUpdate=!0}],[function(t,e){this.resolvedProperty.fromArray(t,e)},function(t,e){this.resolvedProperty.fromArray(t,e),this.targetObject.needsUpdate=!0},function(t,e){this.resolvedProperty.fromArray(t,e),this.targetObject.matrixWorldNeedsUpdate=!0}]],getValue:function(t,e){this.bind(),this.getValue(t,e)},setValue:function(t,e){this.bind(),this.setValue(t,e)},bind:function(){var t=this.node,e=this.parsedPath,i=e.objectName,n=e.propertyName,r=e.propertyIndex;if(t||(t=_l.findNode(this.rootNode,e.nodeName)||this.rootNode,this.node=t),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,t){if(i){var s=e.objectIndex;switch(i){case\"materials\":if(!t.material)return void console.error(\"THREE.PropertyBinding: Can not bind to material as node does not have a material.\",this);if(!t.material.materials)return void console.error(\"THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.\",this);t=t.material.materials;break;case\"bones\":if(!t.skeleton)return void console.error(\"THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.\",this);t=t.skeleton.bones;for(var a=0;a<t.length;a++)if(t[a].name===s){s=a;break}break;default:if(void 0===t[i])return void console.error(\"THREE.PropertyBinding: Can not bind to objectName of node undefined.\",this);t=t[i]}if(void 0!==s){if(void 0===t[s])return void console.error(\"THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.\",this,t);t=t[s]}}var o=t[n];if(void 0!==o){var h=this.Versioning.None;this.targetObject=t,void 0!==t.needsUpdate?h=this.Versioning.NeedsUpdate:void 0!==t.matrixWorldNeedsUpdate&&(h=this.Versioning.MatrixWorldNeedsUpdate);var l=this.BindingType.Direct;if(void 0!==r){if(\"morphTargetInfluences\"===n){if(!t.geometry)return void console.error(\"THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.\",this);if(t.geometry.isBufferGeometry){if(!t.geometry.morphAttributes)return void console.error(\"THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.\",this);for(a=0;a<this.node.geometry.morphAttributes.position.length;a++)if(t.geometry.morphAttributes.position[a].name===r){r=a;break}}else{if(!t.geometry.morphTargets)return void console.error(\"THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.\",this);for(a=0;a<this.node.geometry.morphTargets.length;a++)if(t.geometry.morphTargets[a].name===r){r=a;break}}}l=this.BindingType.ArrayElement,this.resolvedProperty=o,this.propertyIndex=r}else void 0!==o.fromArray&&void 0!==o.toArray?(l=this.BindingType.HasFromToArray,this.resolvedProperty=o):Array.isArray(o)?(l=this.BindingType.EntireArray,this.resolvedProperty=o):this.propertyName=n;this.getValue=this.GetterByBindingType[l],this.setValue=this.SetterByBindingTypeAndVersioning[l][h]}else{var c=e.nodeName;console.error(\"THREE.PropertyBinding: Trying to update property for track: \"+c+\".\"+n+\" but it wasn't found.\",t)}}else console.error(\"THREE.PropertyBinding: Trying to update node for track: \"+this.path+\" but it wasn't found.\")},unbind:function(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}),\n//!\\ DECLARE ALIAS AFTER assign prototype !\nObject.assign(_l.prototype,{_getValue_unbound:_l.prototype.getValue,_setValue_unbound:_l.prototype.setValue}),Object.assign(Sl.prototype,{isAnimationObjectGroup:!0,add:function(){for(var t=this._objects,e=t.length,i=this.nCachedObjects_,n=this._indicesByUUID,r=this._paths,s=this._parsedPaths,a=this._bindings,o=a.length,h=void 0,l=0,c=arguments.length;l!==c;++l){var u=arguments[l],p=u.uuid,d=n[p];if(void 0===d){d=e++,n[p]=d,t.push(u);for(var m=0,f=o;m!==f;++m)a[m].push(new _l(u,r[m],s[m]))}else if(d<i){h=t[d];var v=--i,g=t[v];n[g.uuid]=d,t[d]=g,n[p]=v,t[v]=u;for(m=0,f=o;m!==f;++m){var y=a[m],x=y[v],b=y[d];y[d]=x,void 0===b&&(b=new _l(u,r[m],s[m])),y[v]=b}}else t[d]!==h&&console.error(\"THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.\")}this.nCachedObjects_=i},remove:function(){for(var t=this._objects,e=this.nCachedObjects_,i=this._indicesByUUID,n=this._bindings,r=n.length,s=0,a=arguments.length;s!==a;++s){var o=arguments[s],h=o.uuid,l=i[h];if(void 0!==l&&l>=e){var c=e++,u=t[c];i[u.uuid]=l,t[l]=u,i[h]=c,t[c]=o;for(var p=0,d=r;p!==d;++p){var m=n[p],f=m[c],v=m[l];m[l]=f,m[c]=v}}}this.nCachedObjects_=e},uncache:function(){for(var t=this._objects,e=t.length,i=this.nCachedObjects_,n=this._indicesByUUID,r=this._bindings,s=r.length,a=0,o=arguments.length;a!==o;++a){var h=arguments[a].uuid,l=n[h];if(void 0!==l)if(delete n[h],l<i){var c=--i,u=t[c],p=t[g=--e];n[u.uuid]=l,t[l]=u,n[p.uuid]=c,t[c]=p,t.pop();for(var d=0,m=s;d!==m;++d){var f=(y=r[d])[c],v=y[g];y[l]=f,y[c]=v,y.pop()}}else{var g;n[(p=t[g=--e]).uuid]=l,t[l]=p,t.pop();for(d=0,m=s;d!==m;++d){var y;(y=r[d])[l]=y[g],y.pop()}}}this.nCachedObjects_=i},subscribe_:function(t,e){var i=this._bindingsIndicesByPath,n=i[t],r=this._bindings;if(void 0!==n)return r[n];var s=this._paths,a=this._parsedPaths,o=this._objects,h=o.length,l=this.nCachedObjects_,c=new Array(h);n=r.length,i[t]=n,s.push(t),a.push(e),r.push(c);for(var u=l,p=o.length;u!==p;++u){var d=o[u];c[u]=new _l(d,t,e)}return c},unsubscribe_:function(t){var e=this._bindingsIndicesByPath,i=e[t];if(void 0!==i){var n=this._paths,r=this._parsedPaths,s=this._bindings,a=s.length-1,o=s[a];e[t[a]]=i,s[i]=o,s.pop(),r[i]=r[a],r.pop(),n[i]=n[a],n.pop()}}}),Object.assign(El.prototype,{play:function(){return this._mixer._activateAction(this),this},stop:function(){return this._mixer._deactivateAction(this),this.reset()},reset:function(){return this.paused=!1,this.enabled=!0,this.time=0,this._loopCount=-1,this._startTime=null,this.stopFading().stopWarping()},isRunning:function(){return this.enabled&&!this.paused&&0!==this.timeScale&&null===this._startTime&&this._mixer._isActiveAction(this)},isScheduled:function(){return this._mixer._isActiveAction(this)},startAt:function(t){return this._startTime=t,this},setLoop:function(t,e){return this.loop=t,this.repetitions=e,this},setEffectiveWeight:function(t){return this.weight=t,this._effectiveWeight=this.enabled?t:0,this.stopFading()},getEffectiveWeight:function(){return this._effectiveWeight},fadeIn:function(t){return this._scheduleFading(t,0,1)},fadeOut:function(t){return this._scheduleFading(t,1,0)},crossFadeFrom:function(t,e,i){if(t.fadeOut(e),this.fadeIn(e),i){var n=this._clip.duration,r=t._clip.duration,s=r/n,a=n/r;t.warp(1,s,e),this.warp(a,1,e)}return this},crossFadeTo:function(t,e,i){return t.crossFadeFrom(this,e,i)},stopFading:function(){var t=this._weightInterpolant;return null!==t&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(t)),this},setEffectiveTimeScale:function(t){return this.timeScale=t,this._effectiveTimeScale=this.paused?0:t,this.stopWarping()},getEffectiveTimeScale:function(){return this._effectiveTimeScale},setDuration:function(t){return this.timeScale=this._clip.duration/t,this.stopWarping()},syncWith:function(t){return this.time=t.time,this.timeScale=t.timeScale,this.stopWarping()},halt:function(t){return this.warp(this._effectiveTimeScale,0,t)},warp:function(t,e,i){var n=this._mixer,r=n.time,s=this._timeScaleInterpolant,a=this.timeScale;null===s&&(s=n._lendControlInterpolant(),this._timeScaleInterpolant=s);var o=s.parameterPositions,h=s.sampleValues;return o[0]=r,o[1]=r+i,h[0]=t/a,h[1]=e/a,this},stopWarping:function(){var t=this._timeScaleInterpolant;return null!==t&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(t)),this},getMixer:function(){return this._mixer},getClip:function(){return this._clip},getRoot:function(){return this._localRoot||this._mixer._root},_update:function(t,e,i,n){if(this.enabled){var r=this._startTime;if(null!==r){var s=(t-r)*i;if(s<0||0===i)return;this._startTime=null,e=i*s}e*=this._updateTimeScale(t);var a=this._updateTime(e),o=this._updateWeight(t);if(o>0)for(var h=this._interpolants,l=this._propertyBindings,c=0,u=h.length;c!==u;++c)h[c].evaluate(a),l[c].accumulate(n,o)}else this._updateWeight(t)},_updateWeight:function(t){var e=0;if(this.enabled){e=this.weight;var i=this._weightInterpolant;if(null!==i){var n=i.evaluate(t)[0];e*=n,t>i.parameterPositions[1]&&(this.stopFading(),0===n&&(this.enabled=!1))}}return this._effectiveWeight=e,e},_updateTimeScale:function(t){var e=0;if(!this.paused){e=this.timeScale;var i=this._timeScaleInterpolant;if(null!==i)e*=i.evaluate(t)[0],t>i.parameterPositions[1]&&(this.stopWarping(),0===e?this.paused=!0:this.timeScale=e)}return this._effectiveTimeScale=e,e},_updateTime:function(t){var e=this.time+t,i=this._clip.duration,n=this.loop,r=this._loopCount,s=n===Pe;if(0===t)return-1===r?e:s&&1==(1&r)?i-e:e;if(n===Le){-1===r&&(this._loopCount=0,this._setEndings(!0,!0,!1));t:{if(e>=i)e=i;else{if(!(e<0))break t;e=0}this.clampWhenFinished?this.paused=!0:this.enabled=!1,this._mixer.dispatchEvent({type:\"finished\",action:this,direction:t<0?-1:1})}}else{if(-1===r&&(t>=0?(r=0,this._setEndings(!0,0===this.repetitions,s)):this._setEndings(0===this.repetitions,!0,s)),e>=i||e<0){var a=Math.floor(e/i);e-=i*a,r+=Math.abs(a);var o=this.repetitions-r;if(o<=0)this.clampWhenFinished?this.paused=!0:this.enabled=!1,e=t>0?i:0,this._mixer.dispatchEvent({type:\"finished\",action:this,direction:t>0?1:-1});else{if(1===o){var h=t<0;this._setEndings(h,!h,s)}else this._setEndings(!1,!1,s);this._loopCount=r,this._mixer.dispatchEvent({type:\"loop\",action:this,loopDelta:a})}}if(s&&1==(1&r))return this.time=e,i-e}return this.time=e,e},_setEndings:function(t,e,i){var n=this._interpolantSettings;i?(n.endingStart=Ie,n.endingEnd=Ie):(n.endingStart=t?this.zeroSlopeAtStart?Ie:Ce:Oe,n.endingEnd=e?this.zeroSlopeAtEnd?Ie:Ce:Oe)},_scheduleFading:function(t,e,i){var n=this._mixer,r=n.time,s=this._weightInterpolant;null===s&&(s=n._lendControlInterpolant(),this._weightInterpolant=s);var a=s.parameterPositions,o=s.sampleValues;return a[0]=r,o[0]=e,a[1]=r+t,o[1]=i,this}}),Tl.prototype=Object.assign(Object.create(n.prototype),{constructor:Tl,_bindAction:function(t,e){var i=t._localRoot||this._root,n=t._clip.tracks,r=n.length,s=t._propertyBindings,a=t._interpolants,o=i.uuid,h=this._bindingsByRootAndName,l=h[o];void 0===l&&(l={},h[o]=l);for(var c=0;c!==r;++c){var u=n[c],p=u.name,d=l[p];if(void 0!==d)s[c]=d;else{if(void 0!==(d=s[c])){null===d._cacheIndex&&(++d.referenceCount,this._addInactiveBinding(d,o,p));continue}var m=e&&e._propertyBindings[c].binding.parsedPath;++(d=new al(_l.create(i,p,m),u.ValueTypeName,u.getValueSize())).referenceCount,this._addInactiveBinding(d,o,p),s[c]=d}a[c].resultBuffer=d.buffer}},_activateAction:function(t){if(!this._isActiveAction(t)){if(null===t._cacheIndex){var e=(t._localRoot||this._root).uuid,i=t._clip.uuid,n=this._actionsByClip[i];this._bindAction(t,n&&n.knownActions[0]),this._addInactiveAction(t,i,e)}for(var r=t._propertyBindings,s=0,a=r.length;s!==a;++s){var o=r[s];0==o.useCount++&&(this._lendBinding(o),o.saveOriginalState())}this._lendAction(t)}},_deactivateAction:function(t){if(this._isActiveAction(t)){for(var e=t._propertyBindings,i=0,n=e.length;i!==n;++i){var r=e[i];0==--r.useCount&&(r.restoreOriginalState(),this._takeBackBinding(r))}this._takeBackAction(t)}},_initMemoryManager:function(){this._actions=[],this._nActiveActions=0,this._actionsByClip={},this._bindings=[],this._nActiveBindings=0,this._bindingsByRootAndName={},this._controlInterpolants=[],this._nActiveControlInterpolants=0;var t=this;this.stats={actions:{get total(){return t._actions.length},get inUse(){return t._nActiveActions}},bindings:{get total(){return t._bindings.length},get inUse(){return t._nActiveBindings}},controlInterpolants:{get total(){return t._controlInterpolants.length},get inUse(){return t._nActiveControlInterpolants}}}},_isActiveAction:function(t){var e=t._cacheIndex;return null!==e&&e<this._nActiveActions},_addInactiveAction:function(t,e,i){var n=this._actions,r=this._actionsByClip,s=r[e];if(void 0===s)s={knownActions:[t],actionByRoot:{}},t._byClipCacheIndex=0,r[e]=s;else{var a=s.knownActions;t._byClipCacheIndex=a.length,a.push(t)}t._cacheIndex=n.length,n.push(t),s.actionByRoot[i]=t},_removeInactiveAction:function(t){var e=this._actions,i=e[e.length-1],n=t._cacheIndex;i._cacheIndex=n,e[n]=i,e.pop(),t._cacheIndex=null;var r=t._clip.uuid,s=this._actionsByClip,a=s[r],o=a.knownActions,h=o[o.length-1],l=t._byClipCacheIndex;h._byClipCacheIndex=l,o[l]=h,o.pop(),t._byClipCacheIndex=null,delete a.actionByRoot[(t._localRoot||this._root).uuid],0===o.length&&delete s[r],this._removeInactiveBindingsForAction(t)},_removeInactiveBindingsForAction:function(t){for(var e=t._propertyBindings,i=0,n=e.length;i!==n;++i){var r=e[i];0==--r.referenceCount&&this._removeInactiveBinding(r)}},_lendAction:function(t){var e=this._actions,i=t._cacheIndex,n=this._nActiveActions++,r=e[n];t._cacheIndex=n,e[n]=t,r._cacheIndex=i,e[i]=r},_takeBackAction:function(t){var e=this._actions,i=t._cacheIndex,n=--this._nActiveActions,r=e[n];t._cacheIndex=n,e[n]=t,r._cacheIndex=i,e[i]=r},_addInactiveBinding:function(t,e,i){var n=this._bindingsByRootAndName,r=n[e],s=this._bindings;void 0===r&&(r={},n[e]=r),r[i]=t,t._cacheIndex=s.length,s.push(t)},_removeInactiveBinding:function(t){var e=this._bindings,i=t.binding,n=i.rootNode.uuid,r=i.path,s=this._bindingsByRootAndName,a=s[n],o=e[e.length-1],h=t._cacheIndex;o._cacheIndex=h,e[h]=o,e.pop(),delete a[r];t:{for(var l in a)break t;delete s[n]}},_lendBinding:function(t){var e=this._bindings,i=t._cacheIndex,n=this._nActiveBindings++,r=e[n];t._cacheIndex=n,e[n]=t,r._cacheIndex=i,e[i]=r},_takeBackBinding:function(t){var e=this._bindings,i=t._cacheIndex,n=--this._nActiveBindings,r=e[n];t._cacheIndex=n,e[n]=t,r._cacheIndex=i,e[i]=r},_lendControlInterpolant:function(){var t=this._controlInterpolants,e=this._nActiveControlInterpolants++,i=t[e];return void 0===i&&((i=new xo(new Float32Array(2),new Float32Array(2),1,this._controlInterpolantsResultBuffer)).__cacheIndex=e,t[e]=i),i},_takeBackControlInterpolant:function(t){var e=this._controlInterpolants,i=t.__cacheIndex,n=--this._nActiveControlInterpolants,r=e[n];t.__cacheIndex=n,e[n]=t,r.__cacheIndex=i,e[i]=r},_controlInterpolantsResultBuffer:new Float32Array(1),clipAction:function(t,e){var i=e||this._root,n=i.uuid,r=\"string\"==typeof t?Po.findByName(i,t):t,s=null!==r?r.uuid:t,a=this._actionsByClip[s],o=null;if(void 0!==a){var h=a.actionByRoot[n];if(void 0!==h)return h;o=a.knownActions[0],null===r&&(r=o._clip)}if(null===r)return null;var l=new El(this,r,e);return this._bindAction(l,o),this._addInactiveAction(l,s,n),l},existingAction:function(t,e){var i=e||this._root,n=i.uuid,r=\"string\"==typeof t?Po.findByName(i,t):t,s=r?r.uuid:t,a=this._actionsByClip[s];return void 0!==a&&a.actionByRoot[n]||null},stopAllAction:function(){var t=this._actions,e=this._nActiveActions,i=this._bindings,n=this._nActiveBindings;this._nActiveActions=0,this._nActiveBindings=0;for(var r=0;r!==e;++r)t[r].reset();for(r=0;r!==n;++r)i[r].useCount=0;return this},update:function(t){t*=this.timeScale;for(var e=this._actions,i=this._nActiveActions,n=this.time+=t,r=Math.sign(t),s=this._accuIndex^=1,a=0;a!==i;++a){e[a]._update(n,t,r,s)}var o=this._bindings,h=this._nActiveBindings;for(a=0;a!==h;++a)o[a].apply(s);return this},getRoot:function(){return this._root},uncacheClip:function(t){var e=this._actions,i=t.uuid,n=this._actionsByClip,r=n[i];if(void 0!==r){for(var s=r.knownActions,a=0,o=s.length;a!==o;++a){var h=s[a];this._deactivateAction(h);var l=h._cacheIndex,c=e[e.length-1];h._cacheIndex=null,h._byClipCacheIndex=null,c._cacheIndex=l,e[l]=c,e.pop(),this._removeInactiveBindingsForAction(h)}delete n[i]}},uncacheRoot:function(t){var e=t.uuid,i=this._actionsByClip;for(var n in i){var r=i[n].actionByRoot[e];void 0!==r&&(this._deactivateAction(r),this._removeInactiveAction(r))}var s=this._bindingsByRootAndName[e];if(void 0!==s)for(var a in s){var o=s[a];o.restoreOriginalState(),this._removeInactiveBinding(o)}},uncacheAction:function(t,e){var i=this.existingAction(t,e);null!==i&&(this._deactivateAction(i),this._removeInactiveAction(i))}}),Ll.prototype.clone=function(){return new Ll(void 0===this.value.clone?this.value:this.value.clone())},Al.prototype=Object.assign(Object.create(on.prototype),{constructor:Al,isInstancedBufferGeometry:!0,copy:function(t){return on.prototype.copy.call(this,t),this.maxInstancedCount=t.maxInstancedCount,this},clone:function(){return(new this.constructor).copy(this)}}),Pl.prototype=Object.assign(Object.create(Ls.prototype),{constructor:Pl,isInstancedInterleavedBuffer:!0,copy:function(t){return Ls.prototype.copy.call(this,t),this.meshPerAttribute=t.meshPerAttribute,this}}),zl.prototype=Object.assign(Object.create(Xi.prototype),{constructor:zl,isInstancedBufferAttribute:!0,copy:function(t){return Xi.prototype.copy.call(this,t),this.meshPerAttribute=t.meshPerAttribute,this}}),Object.assign(Nl.prototype,{linePrecision:1,set:function(t,e){this.ray.set(t,e)},setFromCamera:function(t,e){e&&e.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(e.matrixWorld),this.ray.direction.set(t.x,t.y,.5).unproject(e).sub(this.ray.origin).normalize()):e&&e.isOrthographicCamera?(this.ray.origin.set(t.x,t.y,(e.near+e.far)/(e.near-e.far)).unproject(e),this.ray.direction.set(0,0,-1).transformDirection(e.matrixWorld)):console.error(\"THREE.Raycaster: Unsupported camera type.\")},intersectObject:function(t,e,i){var n=i||[];return Cl(t,this,n,e),n.sort(Rl),n},intersectObjects:function(t,e,i){var n=i||[];if(!1===Array.isArray(t))return console.warn(\"THREE.Raycaster.intersectObjects: objects is not an Array.\"),n;for(var r=0,s=t.length;r<s;r++)Cl(t[r],this,n,e);return n.sort(Rl),n}}),Object.assign(Il.prototype,{set:function(t,e,i){return this.radius=t,this.phi=e,this.theta=i,this},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.radius=t.radius,this.phi=t.phi,this.theta=t.theta,this},makeSafe:function(){return this.phi=Math.max(1e-6,Math.min(Math.PI-1e-6,this.phi)),this},setFromVector3:function(t){return this.setFromCartesianCoords(t.x,t.y,t.z)},setFromCartesianCoords:function(t,e,i){return this.radius=Math.sqrt(t*t+e*e+i*i),0===this.radius?(this.theta=0,this.phi=0):(this.theta=Math.atan2(t,i),this.phi=Math.acos(Qe.clamp(e/this.radius,-1,1))),this}}),Object.assign(Ol.prototype,{set:function(t,e,i){return this.radius=t,this.theta=e,this.y=i,this},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.radius=t.radius,this.theta=t.theta,this.y=t.y,this},setFromVector3:function(t){return this.setFromCartesianCoords(t.x,t.y,t.z)},setFromCartesianCoords:function(t,e,i){return this.radius=Math.sqrt(t*t+i*i),this.theta=Math.atan2(t,i),this.y=e,this}}),Object.assign(kl.prototype,{set:function(t,e){return this.min.copy(t),this.max.copy(e),this},setFromPoints:function(t){this.makeEmpty();for(var e=0,i=t.length;e<i;e++)this.expandByPoint(t[e]);return this},setFromCenterAndSize:function(){var t=new Ke;return function(e,i){var n=t.copy(i).multiplyScalar(.5);return this.min.copy(e).sub(n),this.max.copy(e).add(n),this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.min.copy(t.min),this.max.copy(t.max),this},makeEmpty:function(){return this.min.x=this.min.y=1/0,this.max.x=this.max.y=-1/0,this},isEmpty:function(){return this.max.x<this.min.x||this.max.y<this.min.y},getCenter:function(t){return void 0===t&&(console.warn(\"THREE.Box2: .getCenter() target is now required\"),t=new Ke),this.isEmpty()?t.set(0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)},getSize:function(t){return void 0===t&&(console.warn(\"THREE.Box2: .getSize() target is now required\"),t=new Ke),this.isEmpty()?t.set(0,0):t.subVectors(this.max,this.min)},expandByPoint:function(t){return this.min.min(t),this.max.max(t),this},expandByVector:function(t){return this.min.sub(t),this.max.add(t),this},expandByScalar:function(t){return this.min.addScalar(-t),this.max.addScalar(t),this},containsPoint:function(t){return!(t.x<this.min.x||t.x>this.max.x||t.y<this.min.y||t.y>this.max.y)},containsBox:function(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y},getParameter:function(t,e){return void 0===e&&(console.warn(\"THREE.Box2: .getParameter() target is now required\"),e=new Ke),e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y))},intersectsBox:function(t){return!(t.max.x<this.min.x||t.min.x>this.max.x||t.max.y<this.min.y||t.min.y>this.max.y)},clampPoint:function(t,e){return void 0===e&&(console.warn(\"THREE.Box2: .clampPoint() target is now required\"),e=new Ke),e.copy(t).clamp(this.min,this.max)},distanceToPoint:function(){var t=new Ke;return function(e){return t.copy(e).clamp(this.min,this.max).sub(e).length()}}(),intersect:function(t){return this.min.max(t.min),this.max.min(t.max),this},union:function(t){return this.min.min(t.min),this.max.max(t.max),this},translate:function(t){return this.min.add(t),this.max.add(t),this},equals:function(t){return t.min.equals(this.min)&&t.max.equals(this.max)}}),Object.assign(Dl.prototype,{set:function(t,e){return this.start.copy(t),this.end.copy(e),this},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.start.copy(t.start),this.end.copy(t.end),this},getCenter:function(t){return void 0===t&&(console.warn(\"THREE.Line3: .getCenter() target is now required\"),t=new ei),t.addVectors(this.start,this.end).multiplyScalar(.5)},delta:function(t){return void 0===t&&(console.warn(\"THREE.Line3: .delta() target is now required\"),t=new ei),t.subVectors(this.end,this.start)},distanceSq:function(){return this.start.distanceToSquared(this.end)},distance:function(){return this.start.distanceTo(this.end)},at:function(t,e){return void 0===e&&(console.warn(\"THREE.Line3: .at() target is now required\"),e=new ei),this.delta(e).multiplyScalar(t).add(this.start)},closestPointToPointParameter:(vl=new ei,gl=new ei,function(t,e){vl.subVectors(t,this.start),gl.subVectors(this.end,this.start);var i=gl.dot(gl),n=gl.dot(vl)/i;return e&&(n=Qe.clamp(n,0,1)),n}),closestPointToPoint:function(t,e,i){var n=this.closestPointToPointParameter(t,e);return void 0===i&&(console.warn(\"THREE.Line3: .closestPointToPoint() target is now required\"),i=new ei),this.delta(i).multiplyScalar(n).add(this.start)},applyMatrix4:function(t){return this.start.applyMatrix4(t),this.end.applyMatrix4(t),this},equals:function(t){return t.start.equals(this.start)&&t.end.equals(this.end)}}),Bl.prototype=Object.create(Hi.prototype),Bl.prototype.constructor=Bl,Bl.prototype.isImmediateRenderObject=!0,Vl.prototype=Object.create(Ds.prototype),Vl.prototype.constructor=Vl,Vl.prototype.update=function(){var t=new ei,e=new ei,i=new ii;return function(){var n=[\"a\",\"b\",\"c\"];this.object.updateMatrixWorld(!0),i.getNormalMatrix(this.object.matrixWorld);var r=this.object.matrixWorld,s=this.geometry.attributes.position,a=this.object.geometry;if(a&&a.isGeometry)for(var o=a.vertices,h=a.faces,l=0,c=0,u=h.length;c<u;c++)for(var p=h[c],d=0,m=p.vertexNormals.length;d<m;d++){var f=o[p[n[d]]],v=p.vertexNormals[d];t.copy(f).applyMatrix4(r),e.copy(v).applyMatrix3(i).normalize().multiplyScalar(this.size).add(t),s.setXYZ(l,t.x,t.y,t.z),l+=1,s.setXYZ(l,e.x,e.y,e.z),l+=1}else if(a&&a.isBufferGeometry){var g=a.attributes.position,y=a.attributes.normal;for(l=0,d=0,m=g.count;d<m;d++)t.set(g.getX(d),g.getY(d),g.getZ(d)).applyMatrix4(r),e.set(y.getX(d),y.getY(d),y.getZ(d)),e.applyMatrix3(i).normalize().multiplyScalar(this.size).add(t),s.setXYZ(l,t.x,t.y,t.z),l+=1,s.setXYZ(l,e.x,e.y,e.z),l+=1}s.needsUpdate=!0}}(),Ul.prototype=Object.create(Hi.prototype),Ul.prototype.constructor=Ul,Ul.prototype.dispose=function(){this.cone.geometry.dispose(),this.cone.material.dispose()},Ul.prototype.update=function(){var t=new ei;return function(){this.light.updateMatrixWorld();var e=this.light.distance?this.light.distance:1e3,i=e*Math.tan(this.light.angle);this.cone.scale.set(i,i,e),t.setFromMatrixPosition(this.light.target.matrixWorld),this.cone.lookAt(t),void 0!==this.color?this.cone.material.color.set(this.color):this.cone.material.color.copy(this.light.color)}}(),Fl.prototype=Object.create(Ds.prototype),Fl.prototype.constructor=Fl,Fl.prototype.updateMatrixWorld=function(){var t=new ei,e=new $e,i=new $e;return function(n){var r=this.bones,s=this.geometry,a=s.getAttribute(\"position\");i.getInverse(this.root.matrixWorld);for(var o=0,h=0;o<r.length;o++){var l=r[o];l.parent&&l.parent.isBone&&(e.multiplyMatrices(i,l.matrixWorld),t.setFromMatrixPosition(e),a.setXYZ(h,t.x,t.y,t.z),e.multiplyMatrices(i,l.parent.matrixWorld),t.setFromMatrixPosition(e),a.setXYZ(h+1,t.x,t.y,t.z),h+=2)}s.getAttribute(\"position\").needsUpdate=!0,Hi.prototype.updateMatrixWorld.call(this,n)}}(),Hl.prototype=Object.create(zn.prototype),Hl.prototype.constructor=Hl,Hl.prototype.dispose=function(){this.geometry.dispose(),this.material.dispose()},Hl.prototype.update=function(){void 0!==this.color?this.material.color.set(this.color):this.material.color.copy(this.light.color)},Gl.prototype=Object.create(ks.prototype),Gl.prototype.constructor=Gl,Gl.prototype.update=function(){if(this.scale.set(.5*this.light.width,.5*this.light.height,1),void 0!==this.color)this.material.color.set(this.color),this.children[0].material.color.set(this.color);else{this.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);var t=this.material.color,e=Math.max(t.r,t.g,t.b);e>1&&t.multiplyScalar(1/e),this.children[0].material.color.copy(this.material.color)}},Gl.prototype.dispose=function(){this.geometry.dispose(),this.material.dispose(),this.children[0].geometry.dispose(),this.children[0].material.dispose()},jl.prototype=Object.create(Hi.prototype),jl.prototype.constructor=jl,jl.prototype.dispose=function(){this.children[0].geometry.dispose(),this.children[0].material.dispose()},jl.prototype.update=function(){var t=new ei,e=new Ai,i=new Ai;return function(){var n=this.children[0];if(void 0!==this.color)this.material.color.set(this.color);else{var r=n.geometry.getAttribute(\"color\");e.copy(this.light.color),i.copy(this.light.groundColor);for(var s=0,a=r.count;s<a;s++){var o=s<a/2?e:i;r.setXYZ(s,o.r,o.g,o.b)}r.needsUpdate=!0}n.lookAt(t.setFromMatrixPosition(this.light.matrixWorld).negate())}}(),Wl.prototype=Object.create(Ds.prototype),Wl.prototype.constructor=Wl,ql.prototype=Object.create(Ds.prototype),ql.prototype.constructor=ql,Xl.prototype=Object.create(Ds.prototype),Xl.prototype.constructor=Xl,Xl.prototype.update=function(){var t=new ei,e=new ei,i=new ii;return function(){this.object.updateMatrixWorld(!0),i.getNormalMatrix(this.object.matrixWorld);for(var n=this.object.matrixWorld,r=this.geometry.attributes.position,s=this.object.geometry,a=s.vertices,o=s.faces,h=0,l=0,c=o.length;l<c;l++){var u=o[l],p=u.normal;t.copy(a[u.a]).add(a[u.b]).add(a[u.c]).divideScalar(3).applyMatrix4(n),e.copy(p).applyMatrix3(i).normalize().multiplyScalar(this.size).add(t),r.setXYZ(h,t.x,t.y,t.z),h+=1,r.setXYZ(h,e.x,e.y,e.z),h+=1}r.needsUpdate=!0}}(),Yl.prototype=Object.create(Hi.prototype),Yl.prototype.constructor=Yl,Yl.prototype.dispose=function(){this.lightPlane.geometry.dispose(),this.lightPlane.material.dispose(),this.targetLine.geometry.dispose(),this.targetLine.material.dispose()},Yl.prototype.update=function(){var t=new ei,e=new ei,i=new ei;return function(){t.setFromMatrixPosition(this.light.matrixWorld),e.setFromMatrixPosition(this.light.target.matrixWorld),i.subVectors(e,t),this.lightPlane.lookAt(e),void 0!==this.color?(this.lightPlane.material.color.set(this.color),this.targetLine.material.color.set(this.color)):(this.lightPlane.material.color.copy(this.light.color),this.targetLine.material.color.copy(this.light.color)),this.targetLine.lookAt(e),this.targetLine.scale.z=i.length()}}(),Jl.prototype=Object.create(Ds.prototype),Jl.prototype.constructor=Jl,Jl.prototype.update=function(){var t,e,i=new ei,n=new ls;function r(r,s,a,o){i.set(s,a,o).unproject(n);var h=e[r];if(void 0!==h)for(var l=t.getAttribute(\"position\"),c=0,u=h.length;c<u;c++)l.setXYZ(h[c],i.x,i.y,i.z)}return function(){t=this.geometry,e=this.pointMap;n.projectionMatrix.copy(this.camera.projectionMatrix),r(\"c\",0,0,-1),r(\"t\",0,0,1),r(\"n1\",-1,-1,-1),r(\"n2\",1,-1,-1),r(\"n3\",-1,1,-1),r(\"n4\",1,1,-1),r(\"f1\",-1,-1,1),r(\"f2\",1,-1,1),r(\"f3\",-1,1,1),r(\"f4\",1,1,1),r(\"u1\",.7,1.1,-1),r(\"u2\",-.7,1.1,-1),r(\"u3\",0,2,-1),r(\"cf1\",-1,0,1),r(\"cf2\",1,0,1),r(\"cf3\",0,-1,1),r(\"cf4\",0,1,1),r(\"cn1\",-1,0,-1),r(\"cn2\",1,0,-1),r(\"cn3\",0,-1,-1),r(\"cn4\",0,1,-1),t.getAttribute(\"position\").needsUpdate=!0}}(),Zl.prototype=Object.create(Ds.prototype),Zl.prototype.constructor=Zl,Zl.prototype.update=function(){var t=new vi;return function(e){if(void 0!==e&&console.warn(\"THREE.BoxHelper: .update() has no longer arguments.\"),void 0!==this.object&&t.setFromObject(this.object),!t.isEmpty()){var i=t.min,n=t.max,r=this.geometry.attributes.position,s=r.array;s[0]=n.x,s[1]=n.y,s[2]=n.z,s[3]=i.x,s[4]=n.y,s[5]=n.z,s[6]=i.x,s[7]=i.y,s[8]=n.z,s[9]=n.x,s[10]=i.y,s[11]=n.z,s[12]=n.x,s[13]=n.y,s[14]=i.z,s[15]=i.x,s[16]=n.y,s[17]=i.z,s[18]=i.x,s[19]=i.y,s[20]=i.z,s[21]=n.x,s[22]=i.y,s[23]=i.z,r.needsUpdate=!0,this.geometry.computeBoundingSphere()}}}(),Zl.prototype.setFromObject=function(t){return this.object=t,this.update(),this},Zl.prototype.copy=function(t){return Ds.prototype.copy.call(this,t),this.object=t.object,this},Zl.prototype.clone=function(){return(new this.constructor).copy(this)},Ql.prototype=Object.create(Ds.prototype),Ql.prototype.constructor=Ql,Ql.prototype.updateMatrixWorld=function(t){var e=this.box;e.isEmpty()||(e.getCenter(this.position),e.getSize(this.scale),this.scale.multiplyScalar(.5),Hi.prototype.updateMatrixWorld.call(this,t))},Kl.prototype=Object.create(ks.prototype),Kl.prototype.constructor=Kl,Kl.prototype.updateMatrixWorld=function(t){var e=-this.plane.constant;Math.abs(e)<1e-8&&(e=1e-8),this.scale.set(.5*this.size,.5*this.size,e),this.children[0].material.side=e<0?A:L,this.lookAt(this.plane.normal),Hi.prototype.updateMatrixWorld.call(this,t)},$l.prototype=Object.create(Hi.prototype),$l.prototype.constructor=$l,$l.prototype.setDirection=(wl=new ei,function(t){t.y>.99999?this.quaternion.set(0,0,0,1):t.y<-.99999?this.quaternion.set(1,0,0,0):(wl.set(t.z,0,-t.x).normalize(),bl=Math.acos(t.y),this.quaternion.setFromAxisAngle(wl,bl))}),$l.prototype.setLength=function(t,e,i){void 0===e&&(e=.2*t),void 0===i&&(i=.2*e),this.line.scale.set(1,Math.max(0,t-e),1),this.line.updateMatrix(),this.cone.scale.set(i,e,i),this.cone.position.y=t,this.cone.updateMatrix()},$l.prototype.setColor=function(t){this.line.material.color.copy(t),this.cone.material.color.copy(t)},$l.prototype.copy=function(t){return Hi.prototype.copy.call(this,t,!1),this.line.copy(t.line),this.cone.copy(t.cone),this},$l.prototype.clone=function(){return(new this.constructor).copy(this)},tc.prototype=Object.create(Ds.prototype),tc.prototype.constructor=tc;var ic=0,nc=1;function rc(t){return console.warn(\"THREE.MeshFaceMaterial has been removed. Use an Array instead.\"),t}function sc(t){return void 0===t&&(t=[]),console.warn(\"THREE.MultiMaterial has been removed. Use an Array instead.\"),t.isMultiMaterial=!0,t.materials=t,t.clone=function(){return t.slice()},t}function ac(t,e){return console.warn(\"THREE.PointCloud has been renamed to THREE.Points.\"),new Us(t,e)}function oc(t){return console.warn(\"THREE.Particle has been renamed to THREE.Sprite.\"),new zs(t)}function hc(t,e){return console.warn(\"THREE.ParticleSystem has been renamed to THREE.Points.\"),new Us(t,e)}function lc(t){return console.warn(\"THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.\"),new Vs(t)}function cc(t){return console.warn(\"THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.\"),new Vs(t)}function uc(t){return console.warn(\"THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.\"),new Vs(t)}function pc(t,e,i){return console.warn(\"THREE.Vertex has been removed. Use THREE.Vector3 instead.\"),new ei(t,e,i)}function dc(t,e){return console.warn(\"THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.\"),new Xi(t,e).setDynamic(!0)}function mc(t,e){return console.warn(\"THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.\"),new Yi(t,e)}function fc(t,e){return console.warn(\"THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.\"),new Ji(t,e)}function vc(t,e){return console.warn(\"THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.\"),new Zi(t,e)}function gc(t,e){return console.warn(\"THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.\"),new Qi(t,e)}function yc(t,e){return console.warn(\"THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.\"),new Ki(t,e)}function xc(t,e){return console.warn(\"THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.\"),new $i(t,e)}function bc(t,e){return console.warn(\"THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.\"),new tn(t,e)}function wc(t,e){return console.warn(\"THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.\"),new en(t,e)}function Mc(t,e){return console.warn(\"THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.\"),new nn(t,e)}function _c(t){console.warn(\"THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.\"),Zo.call(this,t),this.type=\"catmullrom\",this.closed=!0}function Sc(t){console.warn(\"THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.\"),Zo.call(this,t),this.type=\"catmullrom\"}function Ec(t){console.warn(\"THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.\"),Zo.call(this,t),this.type=\"catmullrom\"}function Tc(t){return console.warn(\"THREE.AxisHelper has been renamed to THREE.AxesHelper.\"),new tc(t)}function Lc(t,e){return console.warn(\"THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.\"),new Zl(t,e)}function Ac(t,e){return console.warn(\"THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.\"),new Ds(new Za(t.geometry),new Os({color:void 0!==e?e:16777215}))}function Pc(t,e){return console.warn(\"THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.\"),new Ds(new Ws(t.geometry),new Os({color:void 0!==e?e:16777215}))}function zc(t){return console.warn(\"THREE.XHRLoader has been renamed to THREE.FileLoader.\"),new Oo(t)}function Nc(t){return console.warn(\"THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.\"),new Bo(t)}Ho.create=function(t,e){return console.log(\"THREE.Curve.create() has been deprecated\"),t.prototype=Object.create(Ho.prototype),t.prototype.constructor=t,t.prototype.getPoint=e,t},Object.assign(hh.prototype,{createPointsGeometry:function(t){console.warn(\"THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.\");var e=this.getPoints(t);return this.createGeometry(e)},createSpacedPointsGeometry:function(t){console.warn(\"THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.\");var e=this.getSpacedPoints(t);return this.createGeometry(e)},createGeometry:function(t){console.warn(\"THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.\");for(var e=new qi,i=0,n=t.length;i<n;i++){var r=t[i];e.vertices.push(new ei(r.x,r.y,r.z||0))}return e}}),Object.assign(lh.prototype,{fromPoints:function(t){console.warn(\"THREE.Path: .fromPoints() has been renamed to .setFromPoints().\"),this.setFromPoints(t)}}),_c.prototype=Object.create(Zo.prototype),Sc.prototype=Object.create(Zo.prototype),Ec.prototype=Object.create(Zo.prototype),Object.assign(Ec.prototype,{initFromArray:function(){console.error(\"THREE.Spline: .initFromArray() has been removed.\")},getControlPointsArray:function(){console.error(\"THREE.Spline: .getControlPointsArray() has been removed.\")},reparametrizeByArcLength:function(){console.error(\"THREE.Spline: .reparametrizeByArcLength() has been removed.\")}}),Wl.prototype.setColors=function(){console.error(\"THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.\")},Fl.prototype.update=function(){console.error(\"THREE.SkeletonHelper: update() no longer needs to be called.\")},Object.assign(Uh.prototype,{extractUrlBase:function(t){return console.warn(\"THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.\"),_h.extractUrlBase(t)}}),Object.assign(Th.prototype,{setTexturePath:function(t){return console.warn(\"THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().\"),this.setResourcePath(t)}}),Object.assign(kl.prototype,{center:function(t){return console.warn(\"THREE.Box2: .center() has been renamed to .getCenter().\"),this.getCenter(t)},empty:function(){return console.warn(\"THREE.Box2: .empty() has been renamed to .isEmpty().\"),this.isEmpty()},isIntersectionBox:function(t){return console.warn(\"THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().\"),this.intersectsBox(t)},size:function(t){return console.warn(\"THREE.Box2: .size() has been renamed to .getSize().\"),this.getSize(t)}}),Object.assign(vi.prototype,{center:function(t){return console.warn(\"THREE.Box3: .center() has been renamed to .getCenter().\"),this.getCenter(t)},empty:function(){return console.warn(\"THREE.Box3: .empty() has been renamed to .isEmpty().\"),this.isEmpty()},isIntersectionBox:function(t){return console.warn(\"THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().\"),this.intersectsBox(t)},isIntersectionSphere:function(t){return console.warn(\"THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().\"),this.intersectsSphere(t)},size:function(t){return console.warn(\"THREE.Box3: .size() has been renamed to .getSize().\"),this.getSize(t)}}),Dl.prototype.center=function(t){return console.warn(\"THREE.Line3: .center() has been renamed to .getCenter().\"),this.getCenter(t)},Object.assign(Qe,{random16:function(){return console.warn(\"THREE.Math: .random16() has been deprecated. Use Math.random() instead.\"),Math.random()},nearestPowerOfTwo:function(t){return console.warn(\"THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().\"),Qe.floorPowerOfTwo(t)},nextPowerOfTwo:function(t){return console.warn(\"THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().\"),Qe.ceilPowerOfTwo(t)}}),Object.assign(ii.prototype,{flattenToArrayOffset:function(t,e){return console.warn(\"THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\"),this.toArray(t,e)},multiplyVector3:function(t){return console.warn(\"THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.\"),t.applyMatrix3(this)},multiplyVector3Array:function(){console.error(\"THREE.Matrix3: .multiplyVector3Array() has been removed.\")},applyToBuffer:function(t){return console.warn(\"THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.\"),this.applyToBufferAttribute(t)},applyToVector3Array:function(){console.error(\"THREE.Matrix3: .applyToVector3Array() has been removed.\")}}),Object.assign($e.prototype,{extractPosition:function(t){return console.warn(\"THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().\"),this.copyPosition(t)},flattenToArrayOffset:function(t,e){return console.warn(\"THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\"),this.toArray(t,e)},getPosition:function(){var t;return function(){return void 0===t&&(t=new ei),console.warn(\"THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.\"),t.setFromMatrixColumn(this,3)}}(),setRotationFromQuaternion:function(t){return console.warn(\"THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().\"),this.makeRotationFromQuaternion(t)},multiplyToArray:function(){console.warn(\"THREE.Matrix4: .multiplyToArray() has been removed.\")},multiplyVector3:function(t){return console.warn(\"THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.\"),t.applyMatrix4(this)},multiplyVector4:function(t){return console.warn(\"THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.\"),t.applyMatrix4(this)},multiplyVector3Array:function(){console.error(\"THREE.Matrix4: .multiplyVector3Array() has been removed.\")},rotateAxis:function(t){console.warn(\"THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.\"),t.transformDirection(this)},crossVector:function(t){return console.warn(\"THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.\"),t.applyMatrix4(this)},translate:function(){console.error(\"THREE.Matrix4: .translate() has been removed.\")},rotateX:function(){console.error(\"THREE.Matrix4: .rotateX() has been removed.\")},rotateY:function(){console.error(\"THREE.Matrix4: .rotateY() has been removed.\")},rotateZ:function(){console.error(\"THREE.Matrix4: .rotateZ() has been removed.\")},rotateByAxis:function(){console.error(\"THREE.Matrix4: .rotateByAxis() has been removed.\")},applyToBuffer:function(t){return console.warn(\"THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.\"),this.applyToBufferAttribute(t)},applyToVector3Array:function(){console.error(\"THREE.Matrix4: .applyToVector3Array() has been removed.\")},makeFrustum:function(t,e,i,n,r,s){return console.warn(\"THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.\"),this.makePerspective(t,e,n,i,r,s)}}),yi.prototype.isIntersectionLine=function(t){return console.warn(\"THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().\"),this.intersectsLine(t)},ti.prototype.multiplyVector3=function(t){return console.warn(\"THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.\"),t.applyQuaternion(this)},Object.assign(Ln.prototype,{isIntersectionBox:function(t){return console.warn(\"THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().\"),this.intersectsBox(t)},isIntersectionPlane:function(t){return console.warn(\"THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().\"),this.intersectsPlane(t)},isIntersectionSphere:function(t){return console.warn(\"THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().\"),this.intersectsSphere(t)}}),Object.assign(An.prototype,{area:function(){return console.warn(\"THREE.Triangle: .area() has been renamed to .getArea().\"),this.getArea()},barycoordFromPoint:function(t,e){return console.warn(\"THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().\"),this.getBarycoord(t,e)},midpoint:function(t){return console.warn(\"THREE.Triangle: .midpoint() has been renamed to .getMidpoint().\"),this.getMidpoint(t)},normal:function(t){return console.warn(\"THREE.Triangle: .normal() has been renamed to .getNormal().\"),this.getNormal(t)},plane:function(t){return console.warn(\"THREE.Triangle: .plane() has been renamed to .getPlane().\"),this.getPlane(t)}}),Object.assign(An,{barycoordFromPoint:function(t,e,i,n,r){return console.warn(\"THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().\"),An.getBarycoord(t,e,i,n,r)},normal:function(t,e,i,n){return console.warn(\"THREE.Triangle: .normal() has been renamed to .getNormal().\"),An.getNormal(t,e,i,n)}}),Object.assign(ch.prototype,{extractAllPoints:function(t){return console.warn(\"THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.\"),this.extractPoints(t)},extrude:function(t){return console.warn(\"THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.\"),new Oa(this,t)},makeGeometry:function(t){return console.warn(\"THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.\"),new Xa(this,t)}}),Object.assign(Ke.prototype,{fromAttribute:function(t,e,i){return console.warn(\"THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().\"),this.fromBufferAttribute(t,e,i)},distanceToManhattan:function(t){return console.warn(\"THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().\"),this.manhattanDistanceTo(t)},lengthManhattan:function(){return console.warn(\"THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().\"),this.manhattanLength()}}),Object.assign(ei.prototype,{setEulerFromRotationMatrix:function(){console.error(\"THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.\")},setEulerFromQuaternion:function(){console.error(\"THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.\")},getPositionFromMatrix:function(t){return console.warn(\"THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().\"),this.setFromMatrixPosition(t)},getScaleFromMatrix:function(t){return console.warn(\"THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().\"),this.setFromMatrixScale(t)},getColumnFromMatrix:function(t,e){return console.warn(\"THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().\"),this.setFromMatrixColumn(e,t)},applyProjection:function(t){return console.warn(\"THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.\"),this.applyMatrix4(t)},fromAttribute:function(t,e,i){return console.warn(\"THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().\"),this.fromBufferAttribute(t,e,i)},distanceToManhattan:function(t){return console.warn(\"THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().\"),this.manhattanDistanceTo(t)},lengthManhattan:function(){return console.warn(\"THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().\"),this.manhattanLength()}}),Object.assign(ui.prototype,{fromAttribute:function(t,e,i){return console.warn(\"THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().\"),this.fromBufferAttribute(t,e,i)},lengthManhattan:function(){return console.warn(\"THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().\"),this.manhattanLength()}}),Object.assign(qi.prototype,{computeTangents:function(){console.error(\"THREE.Geometry: .computeTangents() has been removed.\")},computeLineDistances:function(){console.error(\"THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.\")}}),Object.assign(Hi.prototype,{getChildByName:function(t){return console.warn(\"THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().\"),this.getObjectByName(t)},renderDepth:function(){console.warn(\"THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.\")},translate:function(t,e){return console.warn(\"THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.\"),this.translateOnAxis(e,t)},getWorldRotation:function(){console.error(\"THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.\")}}),Object.defineProperties(Hi.prototype,{eulerOrder:{get:function(){return console.warn(\"THREE.Object3D: .eulerOrder is now .rotation.order.\"),this.rotation.order},set:function(t){console.warn(\"THREE.Object3D: .eulerOrder is now .rotation.order.\"),this.rotation.order=t}},useQuaternion:{get:function(){console.warn(\"THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.\")},set:function(){console.warn(\"THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.\")}}}),Object.defineProperties(Ns.prototype,{objects:{get:function(){return console.warn(\"THREE.LOD: .objects has been renamed to .levels.\"),this.levels}}}),Object.defineProperty(Cs.prototype,\"useVertexTexture\",{get:function(){console.warn(\"THREE.Skeleton: useVertexTexture has been removed.\")},set:function(){console.warn(\"THREE.Skeleton: useVertexTexture has been removed.\")}}),Rs.prototype.initBones=function(){console.error(\"THREE.SkinnedMesh: initBones() has been removed.\")},Object.defineProperty(Ho.prototype,\"__arcLengthDivisions\",{get:function(){return console.warn(\"THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.\"),this.arcLengthDivisions},set:function(t){console.warn(\"THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.\"),this.arcLengthDivisions=t}}),cs.prototype.setLens=function(t,e){console.warn(\"THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup.\"),void 0!==e&&(this.filmGauge=e),this.setFocalLength(t)},Object.defineProperties(uh.prototype,{onlyShadow:{set:function(){console.warn(\"THREE.Light: .onlyShadow has been removed.\")}},shadowCameraFov:{set:function(t){console.warn(\"THREE.Light: .shadowCameraFov is now .shadow.camera.fov.\"),this.shadow.camera.fov=t}},shadowCameraLeft:{set:function(t){console.warn(\"THREE.Light: .shadowCameraLeft is now .shadow.camera.left.\"),this.shadow.camera.left=t}},shadowCameraRight:{set:function(t){console.warn(\"THREE.Light: .shadowCameraRight is now .shadow.camera.right.\"),this.shadow.camera.right=t}},shadowCameraTop:{set:function(t){console.warn(\"THREE.Light: .shadowCameraTop is now .shadow.camera.top.\"),this.shadow.camera.top=t}},shadowCameraBottom:{set:function(t){console.warn(\"THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.\"),this.shadow.camera.bottom=t}},shadowCameraNear:{set:function(t){console.warn(\"THREE.Light: .shadowCameraNear is now .shadow.camera.near.\"),this.shadow.camera.near=t}},shadowCameraFar:{set:function(t){console.warn(\"THREE.Light: .shadowCameraFar is now .shadow.camera.far.\"),this.shadow.camera.far=t}},shadowCameraVisible:{set:function(){console.warn(\"THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.\")}},shadowBias:{set:function(t){console.warn(\"THREE.Light: .shadowBias is now .shadow.bias.\"),this.shadow.bias=t}},shadowDarkness:{set:function(){console.warn(\"THREE.Light: .shadowDarkness has been removed.\")}},shadowMapWidth:{set:function(t){console.warn(\"THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.\"),this.shadow.mapSize.width=t}},shadowMapHeight:{set:function(t){console.warn(\"THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.\"),this.shadow.mapSize.height=t}}}),Object.defineProperties(Xi.prototype,{length:{get:function(){return console.warn(\"THREE.BufferAttribute: .length has been deprecated. Use .count instead.\"),this.array.length}},copyIndicesArray:function(){console.error(\"THREE.BufferAttribute: .copyIndicesArray() has been removed.\")}}),Object.assign(on.prototype,{addIndex:function(t){console.warn(\"THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().\"),this.setIndex(t)},addDrawCall:function(t,e,i){void 0!==i&&console.warn(\"THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.\"),console.warn(\"THREE.BufferGeometry: .addDrawCall() is now .addGroup().\"),this.addGroup(t,e)},clearDrawCalls:function(){console.warn(\"THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().\"),this.clearGroups()},computeTangents:function(){console.warn(\"THREE.BufferGeometry: .computeTangents() has been removed.\")},computeOffsets:function(){console.warn(\"THREE.BufferGeometry: .computeOffsets() has been removed.\")}}),Object.defineProperties(on.prototype,{drawcalls:{get:function(){return console.error(\"THREE.BufferGeometry: .drawcalls has been renamed to .groups.\"),this.groups}},offsets:{get:function(){return console.warn(\"THREE.BufferGeometry: .offsets has been renamed to .groups.\"),this.groups}}}),Object.assign(ka.prototype,{getArrays:function(){console.error(\"THREE.ExtrudeBufferGeometry: .getArrays() has been removed.\")},addShapeList:function(){console.error(\"THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.\")},addShape:function(){console.error(\"THREE.ExtrudeBufferGeometry: .addShape() has been removed.\")}}),Object.defineProperties(Ll.prototype,{dynamic:{set:function(){console.warn(\"THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.\")}},onUpdate:{value:function(){return console.warn(\"THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.\"),this}}}),Object.defineProperties(En.prototype,{wrapAround:{get:function(){console.warn(\"THREE.Material: .wrapAround has been removed.\")},set:function(){console.warn(\"THREE.Material: .wrapAround has been removed.\")}},overdraw:{get:function(){console.warn(\"THREE.Material: .overdraw has been removed.\")},set:function(){console.warn(\"THREE.Material: .overdraw has been removed.\")}},wrapRGB:{get:function(){return console.warn(\"THREE.Material: .wrapRGB has been removed.\"),new Ai}},shading:{get:function(){console.error(\"THREE.\"+this.type+\": .shading has been removed. Use the boolean .flatShading instead.\")},set:function(t){console.warn(\"THREE.\"+this.type+\": .shading has been removed. Use the boolean .flatShading instead.\"),this.flatShading=t===z}}}),Object.defineProperties(ho.prototype,{metal:{get:function(){return console.warn(\"THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.\"),!1},set:function(){console.warn(\"THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead\")}}}),Object.defineProperties(Tn.prototype,{derivatives:{get:function(){return console.warn(\"THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.\"),this.extensions.derivatives},set:function(t){console.warn(\"THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.\"),this.extensions.derivatives=t}}}),Object.assign(_s.prototype,{clearTarget:function(t,e,i,n){console.warn(\"THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.\"),this.setRenderTarget(t),this.clear(e,i,n)},animate:function(t){console.warn(\"THREE.WebGLRenderer: .animate() is now .setAnimationLoop().\"),this.setAnimationLoop(t)},getCurrentRenderTarget:function(){return console.warn(\"THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().\"),this.getRenderTarget()},getMaxAnisotropy:function(){return console.warn(\"THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().\"),this.capabilities.getMaxAnisotropy()},getPrecision:function(){return console.warn(\"THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.\"),this.capabilities.precision},resetGLState:function(){return console.warn(\"THREE.WebGLRenderer: .resetGLState() is now .state.reset().\"),this.state.reset()},supportsFloatTextures:function(){return console.warn(\"THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' ).\"),this.extensions.get(\"OES_texture_float\")},supportsHalfFloatTextures:function(){return console.warn(\"THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' ).\"),this.extensions.get(\"OES_texture_half_float\")},supportsStandardDerivatives:function(){return console.warn(\"THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' ).\"),this.extensions.get(\"OES_standard_derivatives\")},supportsCompressedTextureS3TC:function(){return console.warn(\"THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' ).\"),this.extensions.get(\"WEBGL_compressed_texture_s3tc\")},supportsCompressedTexturePVRTC:function(){return console.warn(\"THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' ).\"),this.extensions.get(\"WEBGL_compressed_texture_pvrtc\")},supportsBlendMinMax:function(){return console.warn(\"THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' ).\"),this.extensions.get(\"EXT_blend_minmax\")},supportsVertexTextures:function(){return console.warn(\"THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.\"),this.capabilities.vertexTextures},supportsInstancedArrays:function(){return console.warn(\"THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' ).\"),this.extensions.get(\"ANGLE_instanced_arrays\")},enableScissorTest:function(t){console.warn(\"THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().\"),this.setScissorTest(t)},initMaterial:function(){console.warn(\"THREE.WebGLRenderer: .initMaterial() has been removed.\")},addPrePlugin:function(){console.warn(\"THREE.WebGLRenderer: .addPrePlugin() has been removed.\")},addPostPlugin:function(){console.warn(\"THREE.WebGLRenderer: .addPostPlugin() has been removed.\")},updateShadowMap:function(){console.warn(\"THREE.WebGLRenderer: .updateShadowMap() has been removed.\")},setFaceCulling:function(){console.warn(\"THREE.WebGLRenderer: .setFaceCulling() has been removed.\")}}),Object.defineProperties(_s.prototype,{shadowMapEnabled:{get:function(){return this.shadowMap.enabled},set:function(t){console.warn(\"THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.\"),this.shadowMap.enabled=t}},shadowMapType:{get:function(){return this.shadowMap.type},set:function(t){console.warn(\"THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.\"),this.shadowMap.type=t}},shadowMapCullFace:{get:function(){console.warn(\"THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.\")},set:function(){console.warn(\"THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.\")}}}),Object.defineProperties(rs.prototype,{cullFace:{get:function(){console.warn(\"THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.\")},set:function(){console.warn(\"THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.\")}},renderReverseSided:{get:function(){console.warn(\"THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.\")},set:function(){console.warn(\"THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.\")}},renderSingleSided:{get:function(){console.warn(\"THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.\")},set:function(){console.warn(\"THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.\")}}}),Object.defineProperties(pi.prototype,{wrapS:{get:function(){return console.warn(\"THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.\"),this.texture.wrapS},set:function(t){console.warn(\"THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.\"),this.texture.wrapS=t}},wrapT:{get:function(){return console.warn(\"THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.\"),this.texture.wrapT},set:function(t){console.warn(\"THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.\"),this.texture.wrapT=t}},magFilter:{get:function(){return console.warn(\"THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.\"),this.texture.magFilter},set:function(t){console.warn(\"THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.\"),this.texture.magFilter=t}},minFilter:{get:function(){return console.warn(\"THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.\"),this.texture.minFilter},set:function(t){console.warn(\"THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.\"),this.texture.minFilter=t}},anisotropy:{get:function(){return console.warn(\"THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.\"),this.texture.anisotropy},set:function(t){console.warn(\"THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.\"),this.texture.anisotropy=t}},offset:{get:function(){return console.warn(\"THREE.WebGLRenderTarget: .offset is now .texture.offset.\"),this.texture.offset},set:function(t){console.warn(\"THREE.WebGLRenderTarget: .offset is now .texture.offset.\"),this.texture.offset=t}},repeat:{get:function(){return console.warn(\"THREE.WebGLRenderTarget: .repeat is now .texture.repeat.\"),this.texture.repeat},set:function(t){console.warn(\"THREE.WebGLRenderTarget: .repeat is now .texture.repeat.\"),this.texture.repeat=t}},format:{get:function(){return console.warn(\"THREE.WebGLRenderTarget: .format is now .texture.format.\"),this.texture.format},set:function(t){console.warn(\"THREE.WebGLRenderTarget: .format is now .texture.format.\"),this.texture.format=t}},type:{get:function(){return console.warn(\"THREE.WebGLRenderTarget: .type is now .texture.type.\"),this.texture.type},set:function(t){console.warn(\"THREE.WebGLRenderTarget: .type is now .texture.type.\"),this.texture.type=t}},generateMipmaps:{get:function(){return console.warn(\"THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.\"),this.texture.generateMipmaps},set:function(t){console.warn(\"THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.\"),this.texture.generateMipmaps=t}}}),Object.defineProperties(ws.prototype,{standing:{set:function(){console.warn(\"THREE.WebVRManager: .standing has been removed.\")}},userHeight:{set:function(){console.warn(\"THREE.WebVRManager: .userHeight has been removed.\")}}}),nl.prototype.load=function(t){console.warn(\"THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.\");var e=this;return(new Kh).load(t,function(t){e.setBuffer(t)}),this},sl.prototype.getData=function(){return console.warn(\"THREE.AudioAnalyser: .getData() is now .getFrequencyData().\"),this.getFrequencyData()},tl.prototype.updateCubeMap=function(t,e){return console.warn(\"THREE.CubeCamera: .updateCubeMap() is now .update().\"),this.update(t,e)};var Rc={merge:function(t,e,i){var n;console.warn(\"THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.\"),e.isMesh&&(e.matrixAutoUpdate&&e.updateMatrix(),n=e.matrix,e=e.geometry),t.merge(e,n,i)},center:function(t){return console.warn(\"THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.\"),t.center()}};function Cc(){console.error(\"THREE.Projector has been moved to /examples/js/renderers/Projector.js.\"),this.projectVector=function(t,e){console.warn(\"THREE.Projector: .projectVector() is now vector.project().\"),t.project(e)},this.unprojectVector=function(t,e){console.warn(\"THREE.Projector: .unprojectVector() is now vector.unproject().\"),t.unproject(e)},this.pickingRay=function(){console.error(\"THREE.Projector: .pickingRay() is now raycaster.setFromCamera().\")}}function Ic(){console.error(\"THREE.CanvasRenderer has been removed\")}function Oc(){console.error(\"THREE.JSONLoader has been removed.\")}hi.crossOrigin=void 0,hi.loadTexture=function(t,e,i,n){console.warn(\"THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.\");var r=new Fo;r.setCrossOrigin(this.crossOrigin);var s=r.load(t,i,void 0,n);return e&&(s.mapping=e),s},hi.loadTextureCube=function(t,e,i,n){console.warn(\"THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.\");var r=new Uo;r.setCrossOrigin(this.crossOrigin);var s=r.load(t,i,void 0,n);return e&&(s.mapping=e),s},hi.loadCompressedTexture=function(){console.error(\"THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.\")},hi.loadCompressedTextureCube=function(){console.error(\"THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.\")};var kc={createMultiMaterialObject:function(){console.error(\"THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js\")},detach:function(){console.error(\"THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js\")},attach:function(){console.error(\"THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js\")}};function Dc(){console.error(\"THREE.LensFlare has been moved to /examples/js/objects/Lensflare.js\")}},function(t,e,i){\"use strict\";i.d(e,\"a\",function(){return f});var n=i(2),r=i.n(n),s=i(3),a=i.n(s),o=(i(12),i(4)),h=i.n(o),l=i(5),c=i.n(l),u=i(6),p=i.n(u),d=i(7),m=i.n(d);i(13);class f{constructor(){document.addEventListener(\"keydown\",this.onKeyDown.bind(this)),document.addEventListener(\"keyup\",this.onKeyUp.bind(this)),this.moveFwd=!1,this.moveBwd=!1,this.moveLeft=!1,this.moveRight=!1,this.heading=0,this.camera=new THREE.PerspectiveCamera(70,window.innerWidth/window.innerHeight,.01,100),this.camera.position.z=-5,this.camera.position.y=2,this.camera.rotation.y=0,this.camera.lookAt(new THREE.Vector3(0,2,0)),this.loader=new THREE.OBJLoader,this.scene=new THREE.Scene,this.geometry=new THREE.PlaneBufferGeometry(1.2,2.1);var t=(new THREE.TextureLoader).load(r.a);this.material=new THREE.MeshLambertMaterial({map:t}),this.mesh=new THREE.Mesh(this.geometry,this.material),this.mesh.rotateX(Math.PI),this.mesh.rotateZ(Math.PI),this.mesh.position.z=-.15,this.wallGeometry=new THREE.PlaneBufferGeometry(20,10),this.wallMaterial=new THREE.MeshPhongMaterial({color:16777215,shininess:1}),this.wall=new THREE.Mesh(this.wallGeometry,this.wallMaterial),this.wall.rotateX(Math.PI),this.wall.position.z=.05,this.scene.add(this.wall),this.wall.receiveShadow=!0,this.wallR=new THREE.Mesh(this.wallGeometry,this.wallMaterial),this.wallR.rotateY(Math.PI/2),this.wallR.position.x=-6,this.scene.add(this.wallR),this.wallR.receiveShadow=!0,this.wallL=new THREE.Mesh(this.wallGeometry,this.wallMaterial),this.wallL.rotateY(-Math.PI/2),this.wallL.position.x=6,this.scene.add(this.wallL),this.wallL.receiveShadow=!0,this.wallB=new THREE.Mesh(this.wallGeometry,this.wallMaterial),this.wallB.position.z=-10,this.scene.add(this.wallB),this.wallB.receiveShadow=!0,this.floor=null,this.createFloor(),this.ambientlight=new THREE.AmbientLight(16777215,.1),this.scene.add(this.ambientlight),this.frame=\"\",this.renderer=new THREE.WebGLRenderer({antialias:!0}),this.renderer.setSize(window.innerWidth,window.innerHeight),this.renderer.setPixelRatio(window.devicePixelRatio),document.body.appendChild(this.renderer.domElement),this.renderer.shadowMap.enabled=!0,this.light=new THREE.PointLight(16777215,.5),this.light.position.set(0,5,-4),this.scene.add(this.light);let e=new THREE.SpotLight(16777215,1,10,.38,1);e.position.set(0,5,-5),e.castShadow=!0,e.shadow.mapSize.width=128,e.shadow.mapSize.height=128,e.shadow.camera.near=1,e.shadow.camera.far=1e3,this.scene.add(e),this.scene.add(e.target),e.target.position.y=3,this.addFrame(),this.frameAndPic=new THREE.Group,this.frameAndPic.add(this.mesh),this.scene.add(this.frameAndPic),this.frameAndPic.position.y=3,this.render()}onKeyDown(t){switch(t.keyCode){case 38:case 87:this.moveFwd=!0;break;case 37:case 65:this.moveLeft=!0;break;case 40:case 83:this.moveBwd=!0;break;case 39:case 68:this.moveRight=!0}}onKeyUp(t){switch(t.keyCode){case 38:case 87:this.moveFwd=!1;break;case 37:case 65:this.moveLeft=!1;break;case 40:case 83:this.moveBwd=!1;break;case 39:case 68:this.moveRight=!1}}createFloor(){var t=(new THREE.TextureLoader).load(h.a);t.wrapS=THREE.RepeatWrapping,t.wrapT=THREE.RepeatWrapping,t.repeat.set(10,10);var e=(new THREE.TextureLoader).load(c.a);e.wrapS=THREE.RepeatWrapping,e.wrapT=THREE.RepeatWrapping,e.repeat.set(10,10);var i=(new THREE.TextureLoader).load(p.a);i.wrapS=THREE.RepeatWrapping,i.wrapT=THREE.RepeatWrapping,i.repeat.set(10,10);let n=new THREE.PlaneBufferGeometry(20,20),r=new THREE.MeshPhongMaterial({map:t,displacementMap:i});this.floor=new THREE.Mesh(n,r),this.floor.position.z=-.5,this.floor.rotateX(-Math.PI/2),this.scene.add(this.floor),this.floor.receiveShadow=!0}addFrame(){this.loader.load(a.a,t=>{let e=(new THREE.TextureLoader).load(m.a),i=new THREE.MeshLambertMaterial({map:e});e.wrapS=THREE.RepeatWrapping,e.wrapT=THREE.RepeatWrapping,e.repeat.set(.5,.5),t.children[0].material=i,this.scene.add(t),t.scale.set(.2,.15,.2),t.rotateY(Math.PI),this.frameAndPic.add(t)},t=>{console.log(t.loaded/t.total*100+\"% loaded\")},t=>{console.log(\"An error happened\")})}render(){requestAnimationFrame(this.render.bind(this)),this.moveRight&&(this.heading+=.06),this.moveLeft&&(this.heading-=.06),this.camera.rotation.y=this.heading,this.moveFwd&&(this.camera.position.z+=.1*Math.cos(this.heading),this.camera.position.x-=.1*Math.sin(this.heading)),this.moveBwd&&(this.camera.position.z-=.1*Math.cos(this.heading),this.camera.position.x+=.1*Math.sin(this.heading)),this.renderer.render(this.scene,this.camera)}}},function(t,e,i){t.exports=i.p+\"b51dda80b1a50c959e01c91bd9e00202.jpg\"},function(t,e,i){t.exports=i.p+\"d22798412c8751bcc153168e2c3ed59e.obj\"},function(t,e,i){t.exports=i.p+\"d4ec5c874e99740411598a7551c630c3.jpg\"},function(t,e,i){t.exports=i.p+\"60d2fcbf02a8520ef5f9da4e21376136.jpg\"},function(t,e,i){t.exports=i.p+\"8ddd8186c7d3177d2f68b0d3654453e6.jpg\"},function(t,e,i){t.exports=i.p+\"1df20469bfb4c376dceff509feea94d6.jpg\"},function(t,e,i){\"use strict\";i.r(e),function(t){var e=i(1);t.THREE=i(0),i(10)(THREE),t.OIMO=i(11);new e.a}.call(this,i(9))},function(t,e){var i;i=function(){return this}();try{i=i||new Function(\"return this\")()}catch(t){\"object\"==typeof window&&(i=window)}t.exports=i},function(t,e,i){\"use strict\";function n(t){throw new Error(t)}t.exports=function(t){t.OBJLoader=function(e){this.manager=void 0!==e?e:t.DefaultLoadingManager,this.materials=null,this.regexp={vertex_pattern:/^v\\s+([\\d|\\.|\\+|\\-|e|E]+)\\s+([\\d|\\.|\\+|\\-|e|E]+)\\s+([\\d|\\.|\\+|\\-|e|E]+)/,normal_pattern:/^vn\\s+([\\d|\\.|\\+|\\-|e|E]+)\\s+([\\d|\\.|\\+|\\-|e|E]+)\\s+([\\d|\\.|\\+|\\-|e|E]+)/,uv_pattern:/^vt\\s+([\\d|\\.|\\+|\\-|e|E]+)\\s+([\\d|\\.|\\+|\\-|e|E]+)/,face_vertex:/^f\\s+(-?\\d+)\\s+(-?\\d+)\\s+(-?\\d+)(?:\\s+(-?\\d+))?/,face_vertex_uv:/^f\\s+(-?\\d+)\\/(-?\\d+)\\s+(-?\\d+)\\/(-?\\d+)\\s+(-?\\d+)\\/(-?\\d+)(?:\\s+(-?\\d+)\\/(-?\\d+))?/,face_vertex_uv_normal:/^f\\s+(-?\\d+)\\/(-?\\d+)\\/(-?\\d+)\\s+(-?\\d+)\\/(-?\\d+)\\/(-?\\d+)\\s+(-?\\d+)\\/(-?\\d+)\\/(-?\\d+)(?:\\s+(-?\\d+)\\/(-?\\d+)\\/(-?\\d+))?/,face_vertex_normal:/^f\\s+(-?\\d+)\\/\\/(-?\\d+)\\s+(-?\\d+)\\/\\/(-?\\d+)\\s+(-?\\d+)\\/\\/(-?\\d+)(?:\\s+(-?\\d+)\\/\\/(-?\\d+))?/,object_pattern:/^[og]\\s*(.+)?/,smoothing_pattern:/^s\\s+(\\d+|on|off)/,material_library_pattern:/^mtllib /,material_use_pattern:/^usemtl /}},t.OBJLoader.prototype={constructor:t.OBJLoader,load:function(e,i,r,s){var a=this;this.onError=s||n;var o=new t.FileLoader(a.manager);o.setPath(this.path),o.load(e,function(t){i(a.parse(t))},r,s)},setPath:function(t){this.path=t},setMaterials:function(t){this.materials=t},_createParserState:function(){var t={objects:[],object:{},vertices:[],normals:[],uvs:[],materialLibraries:[],startObject:function(t,e){if(this.object&&!1===this.object.fromDeclaration)return this.object.name=t,void(this.object.fromDeclaration=!1!==e);var i=this.object&&\"function\"==typeof this.object.currentMaterial?this.object.currentMaterial():void 0;if(this.object&&\"function\"==typeof this.object._finalize&&this.object._finalize(!0),this.object={name:t||\"\",fromDeclaration:!1!==e,geometry:{vertices:[],normals:[],uvs:[]},materials:[],smooth:!0,startMaterial:function(t,e){var i=this._finalize(!1);i&&(i.inherited||i.groupCount<=0)&&this.materials.splice(i.index,1);var n={index:this.materials.length,name:t||\"\",mtllib:Array.isArray(e)&&e.length>0?e[e.length-1]:\"\",smooth:void 0!==i?i.smooth:this.smooth,groupStart:void 0!==i?i.groupEnd:0,groupEnd:-1,groupCount:-1,inherited:!1,clone:function(t){var e={index:\"number\"==typeof t?t:this.index,name:this.name,mtllib:this.mtllib,smooth:this.smooth,groupStart:0,groupEnd:-1,groupCount:-1,inherited:!1};return e.clone=this.clone.bind(e),e}};return this.materials.push(n),n},currentMaterial:function(){if(this.materials.length>0)return this.materials[this.materials.length-1]},_finalize:function(t){var e=this.currentMaterial();if(e&&-1===e.groupEnd&&(e.groupEnd=this.geometry.vertices.length/3,e.groupCount=e.groupEnd-e.groupStart,e.inherited=!1),t&&this.materials.length>1)for(var i=this.materials.length-1;i>=0;i--)this.materials[i].groupCount<=0&&this.materials.splice(i,1);return t&&0===this.materials.length&&this.materials.push({name:\"\",smooth:this.smooth}),e}},i&&i.name&&\"function\"==typeof i.clone){var n=i.clone(0);n.inherited=!0,this.object.materials.push(n)}this.objects.push(this.object)},finalize:function(){this.object&&\"function\"==typeof this.object._finalize&&this.object._finalize(!0)},parseVertexIndex:function(t,e){var i=parseInt(t,10);return 3*(i>=0?i-1:i+e/3)},parseNormalIndex:function(t,e){var i=parseInt(t,10);return 3*(i>=0?i-1:i+e/3)},parseUVIndex:function(t,e){var i=parseInt(t,10);return 2*(i>=0?i-1:i+e/2)},addVertex:function(t,e,i){var n=this.vertices,r=this.object.geometry.vertices;r.push(n[t+0]),r.push(n[t+1]),r.push(n[t+2]),r.push(n[e+0]),r.push(n[e+1]),r.push(n[e+2]),r.push(n[i+0]),r.push(n[i+1]),r.push(n[i+2])},addVertexLine:function(t){var e=this.vertices,i=this.object.geometry.vertices;i.push(e[t+0]),i.push(e[t+1]),i.push(e[t+2])},addNormal:function(t,e,i){var n=this.normals,r=this.object.geometry.normals;r.push(n[t+0]),r.push(n[t+1]),r.push(n[t+2]),r.push(n[e+0]),r.push(n[e+1]),r.push(n[e+2]),r.push(n[i+0]),r.push(n[i+1]),r.push(n[i+2])},addUV:function(t,e,i){var n=this.uvs,r=this.object.geometry.uvs;r.push(n[t+0]),r.push(n[t+1]),r.push(n[e+0]),r.push(n[e+1]),r.push(n[i+0]),r.push(n[i+1])},addUVLine:function(t){var e=this.uvs,i=this.object.geometry.uvs;i.push(e[t+0]),i.push(e[t+1])},addFace:function(t,e,i,n,r,s,a,o,h,l,c,u){var p,d=this.vertices.length,m=this.parseVertexIndex(t,d),f=this.parseVertexIndex(e,d),v=this.parseVertexIndex(i,d);if(void 0===n?this.addVertex(m,f,v):(p=this.parseVertexIndex(n,d),this.addVertex(m,f,p),this.addVertex(f,v,p)),void 0!==r){var g=this.uvs.length;m=this.parseUVIndex(r,g),f=this.parseUVIndex(s,g),v=this.parseUVIndex(a,g),void 0===n?this.addUV(m,f,v):(p=this.parseUVIndex(o,g),this.addUV(m,f,p),this.addUV(f,v,p))}if(void 0!==h){var y=this.normals.length;m=this.parseNormalIndex(h,y),f=h===l?m:this.parseNormalIndex(l,y),v=h===c?m:this.parseNormalIndex(c,y),void 0===n?this.addNormal(m,f,v):(p=this.parseNormalIndex(u,y),this.addNormal(m,f,p),this.addNormal(f,v,p))}},addLineGeometry:function(t,e){this.object.geometry.type=\"Line\";for(var i=this.vertices.length,n=this.uvs.length,r=0,s=t.length;r<s;r++)this.addVertexLine(this.parseVertexIndex(t[r],i));var a=0;for(s=e.length;a<s;a++)this.addUVLine(this.parseUVIndex(e[a],n))}};return t.startObject(\"\",!1),t},parse:function(e,i){void 0===i&&(i=!0),i&&console.time(\"OBJLoader\");var n=this._createParserState();-1!==e.indexOf(\"\\r\\n\")&&(e=e.replace(/\\r\\n/g,\"\\n\")),-1!==e.indexOf(\"\\\\\\n\")&&(e=e.replace(/\\\\\\n/g,\"\"));for(var r=e.split(\"\\n\"),s=\"\",a=\"\",o=\"\",h=[],l=\"function\"==typeof\"\".trimLeft,c=0,u=r.length;c<u;c++)if(s=r[c],0!==(s=l?s.trimLeft():s.trim()).length&&\"#\"!==(a=s.charAt(0)))if(\"v\"===a)\" \"===(o=s.charAt(1))&&null!==(h=this.regexp.vertex_pattern.exec(s))?n.vertices.push(parseFloat(h[1]),parseFloat(h[2]),parseFloat(h[3])):\"n\"===o&&null!==(h=this.regexp.normal_pattern.exec(s))?n.normals.push(parseFloat(h[1]),parseFloat(h[2]),parseFloat(h[3])):\"t\"===o&&null!==(h=this.regexp.uv_pattern.exec(s))?n.uvs.push(parseFloat(h[1]),parseFloat(h[2])):this.onError(\"Unexpected vertex/normal/uv line: '\"+s+\"'\");else if(\"f\"===a)null!==(h=this.regexp.face_vertex_uv_normal.exec(s))?n.addFace(h[1],h[4],h[7],h[10],h[2],h[5],h[8],h[11],h[3],h[6],h[9],h[12]):null!==(h=this.regexp.face_vertex_uv.exec(s))?n.addFace(h[1],h[3],h[5],h[7],h[2],h[4],h[6],h[8]):null!==(h=this.regexp.face_vertex_normal.exec(s))?n.addFace(h[1],h[3],h[5],h[7],void 0,void 0,void 0,void 0,h[2],h[4],h[6],h[8]):null!==(h=this.regexp.face_vertex.exec(s))?n.addFace(h[1],h[2],h[3],h[4]):this.onError(\"Unexpected face line: '\"+s+\"'\");else if(\"l\"===a){var p=s.substring(1).trim().split(\" \"),d=[],m=[];if(-1===s.indexOf(\"/\"))d=p;else for(var f=0,v=p.length;f<v;f++){var g=p[f].split(\"/\");\"\"!==g[0]&&d.push(g[0]),\"\"!==g[1]&&m.push(g[1])}n.addLineGeometry(d,m)}else if(null!==(h=this.regexp.object_pattern.exec(s))){var y=(\" \"+h[0].substr(1).trim()).substr(1);n.startObject(y)}else if(this.regexp.material_use_pattern.test(s))n.object.startMaterial(s.substring(7).trim(),n.materialLibraries);else if(this.regexp.material_library_pattern.test(s))n.materialLibraries.push(s.substring(7).trim());else if(null!==(h=this.regexp.smoothing_pattern.exec(s))){var x=h[1].trim().toLowerCase();n.object.smooth=\"1\"===x||\"on\"===x,(N=n.object.currentMaterial())&&(N.smooth=n.object.smooth)}else{if(\"\\0\"===s)continue;this.onError(\"Unexpected line: '\"+s+\"'\")}n.finalize();var b=new t.Group;b.materialLibraries=[].concat(n.materialLibraries);for(c=0,u=n.objects.length;c<u;c++){var w=n.objects[c],M=w.geometry,_=w.materials,S=\"Line\"===M.type;if(0!==M.vertices.length){var E=new t.BufferGeometry;E.addAttribute(\"position\",new t.BufferAttribute(new Float32Array(M.vertices),3)),M.normals.length>0?E.addAttribute(\"normal\",new t.BufferAttribute(new Float32Array(M.normals),3)):E.computeVertexNormals(),M.uvs.length>0&&E.addAttribute(\"uv\",new t.BufferAttribute(new Float32Array(M.uvs),2));for(var T,L=[],A=0,P=_.length;A<P;A++){var z=_[A],N=void 0;if(null!==this.materials&&(N=this.materials.create(z.name),S&&N&&!(N instanceof t.LineBasicMaterial))){var R=new t.LineBasicMaterial;R.copy(N),N=R}N||((N=S?new t.LineBasicMaterial:new t.MeshPhongMaterial).name=z.name),N.shading=z.smooth?t.SmoothShading:t.FlatShading,L.push(N)}if(L.length>1){for(A=0,P=_.length;A<P;A++){z=_[A];E.addGroup(z.groupStart,z.groupCount,A)}var C=new t.MultiMaterial(L);T=S?new t.LineSegments(E,C):new t.Mesh(E,C)}else T=S?new t.LineSegments(E,L[0]):new t.Mesh(E,L[0]);T.name=w.name,b.add(T)}}return i&&console.timeEnd(\"OBJLoader\"),b}}}},function(t,e,n){\"use strict\";n.r(e),n.d(e,\"Math\",function(){return C}),n.d(e,\"Vec3\",function(){return k}),n.d(e,\"Quat\",function(){return D}),n.d(e,\"Mat33\",function(){return B}),n.d(e,\"Shape\",function(){return F}),n.d(e,\"Box\",function(){return H}),n.d(e,\"Sphere\",function(){return G}),n.d(e,\"Cylinder\",function(){return j}),n.d(e,\"Plane\",function(){return W}),n.d(e,\"Particle\",function(){return q}),n.d(e,\"ShapeConfig\",function(){return X}),n.d(e,\"LimitMotor\",function(){return Y}),n.d(e,\"HingeJoint\",function(){return tt}),n.d(e,\"BallAndSocketJoint\",function(){return et}),n.d(e,\"DistanceJoint\",function(){return nt}),n.d(e,\"PrismaticJoint\",function(){return at}),n.d(e,\"SliderJoint\",function(){return ot}),n.d(e,\"WheelJoint\",function(){return ht}),n.d(e,\"JointConfig\",function(){return lt}),n.d(e,\"RigidBody\",function(){return yt}),n.d(e,\"World\",function(){return Ht}),n.d(e,\"REVISION\",function(){return h}),n.d(e,\"BR_NULL\",function(){return l}),n.d(e,\"BR_BRUTE_FORCE\",function(){return c}),n.d(e,\"BR_SWEEP_AND_PRUNE\",function(){return u}),n.d(e,\"BR_BOUNDING_VOLUME_TREE\",function(){return p}),n.d(e,\"BODY_NULL\",function(){return d}),n.d(e,\"BODY_DYNAMIC\",function(){return m}),n.d(e,\"BODY_STATIC\",function(){return f}),n.d(e,\"BODY_KINEMATIC\",function(){return v}),n.d(e,\"BODY_GHOST\",function(){return g}),n.d(e,\"SHAPE_NULL\",function(){return y}),n.d(e,\"SHAPE_SPHERE\",function(){return x}),n.d(e,\"SHAPE_BOX\",function(){return b}),n.d(e,\"SHAPE_CYLINDER\",function(){return w}),n.d(e,\"SHAPE_PLANE\",function(){return M}),n.d(e,\"SHAPE_PARTICLE\",function(){return _}),n.d(e,\"SHAPE_TETRA\",function(){return S}),n.d(e,\"JOINT_NULL\",function(){return E}),n.d(e,\"JOINT_DISTANCE\",function(){return T}),n.d(e,\"JOINT_BALL_AND_SOCKET\",function(){return L}),n.d(e,\"JOINT_HINGE\",function(){return A}),n.d(e,\"JOINT_WHEEL\",function(){return P}),n.d(e,\"JOINT_SLIDER\",function(){return z}),n.d(e,\"JOINT_PRISMATIC\",function(){return N}),n.d(e,\"AABB_PROX\",function(){return R}),n.d(e,\"printError\",function(){return I}),n.d(e,\"InfoDisplay\",function(){return O}),void 0===Number.EPSILON&&(Number.EPSILON=Math.pow(2,-52)),void 0===Math.sign&&(Math.sign=function(t){return t<0?-1:t>0?1:+t}),void 0===Function.prototype.name&&Object.defineProperty(Function.prototype,\"name\",{get:function(){return this.toString().match(/^\\s*function\\s*([^\\(\\s]*)/)[1]}}),void 0===Object.assign&&(Object.assign=function(t){if(null==t)throw new TypeError(\"Cannot convert undefined or null to object\");for(var e=Object(t),i=1;i<arguments.length;i++){var n=arguments[i];if(null!=n)for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e});var r,s,a,o,h=\"1.0.9\",l=0,c=1,u=2,p=3,d=0,m=1,f=2,v=3,g=4,y=0,x=1,b=2,w=3,M=4,_=5,S=6,E=0,T=1,L=2,A=3,P=4,z=5,N=6,R=.005,C={sqrt:Math.sqrt,abs:Math.abs,floor:Math.floor,cos:Math.cos,sin:Math.sin,acos:Math.acos,asin:Math.asin,atan2:Math.atan2,round:Math.round,pow:Math.pow,max:Math.max,min:Math.min,random:Math.random,degtorad:.017453292519943295,radtodeg:57.29577951308232,PI:3.141592653589793,TwoPI:6.283185307179586,PI90:1.570796326794896,PI270:4.712388980384689,INF:1/0,EPZ:1e-5,EPZ2:1e-6,lerp:function(t,e,i){return(1-i)*t+i*e},randInt:function(t,e){return t+C.floor(C.random()*(e-t+1))},rand:function(t,e){return t+C.random()*(e-t)},generateUUID:(s=\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\".split(\"\"),a=new Array(36),o=0,function(){for(var t=0;t<36;t++)8===t||13===t||18===t||23===t?a[t]=\"-\":14===t?a[t]=\"4\":(o<=2&&(o=33554432+16777216*Math.random()|0),r=15&o,o>>=4,a[t]=s[19===t?3&r|8:r]);return a.join(\"\")}),int:function(t){return C.floor(t)},fix:function(t,e){return t.toFixed(e||3,10)},clamp:function(t,e,i){return C.max(e,C.min(i,t))},distance:function(t,e){var i=e[0]-t[0],n=e[1]-t[1],r=e[2]-t[2];return C.sqrt(i*i+n*n+r*r)},acosClamp:function(t){return t>1?0:t<-1?C.PI:C.acos(t)},distanceVector:function(t,e){var i=t.x-e.x,n=t.y-e.y,r=t.z-e.z;return i*i+n*n+r*r},dotVectors:function(t,e){return t.x*e.x+t.y*e.y+t.z*e.z}};function I(t,e){console.error(\"[OIMO] \"+t+\": \"+e)}function O(t){this.parent=t,this.infos=new Float32Array(13),this.f=[0,0,0],this.times=[0,0,0,0],this.broadPhase=this.parent.broadPhaseType,this.version=h,this.fps=0,this.tt=0,this.broadPhaseTime=0,this.narrowPhaseTime=0,this.solvingTime=0,this.totalTime=0,this.updateTime=0,this.MaxBroadPhaseTime=0,this.MaxNarrowPhaseTime=0,this.MaxSolvingTime=0,this.MaxTotalTime=0,this.MaxUpdateTime=0}function k(t,e,i){this.x=t||0,this.y=e||0,this.z=i||0}function D(t,e,i,n){this.x=t||0,this.y=e||0,this.z=i||0,this.w=void 0!==n?n:1}function B(t,e,i,n,r,s,a,o,h){this.elements=[1,0,0,0,1,0,0,0,1],arguments.length>0&&console.error(\"OIMO.Mat33: the constructor no longer reads arguments. use .set() instead.\")}function V(t,e,i,n,r,s){this.elements=new Float32Array(6);var a=this.elements;a[0]=t||0,a[1]=i||0,a[2]=r||0,a[3]=e||0,a[4]=n||0,a[5]=s||0}Object.assign(O.prototype,{setTime:function(t){this.times[t||0]=performance.now()},resetMax:function(){this.MaxBroadPhaseTime=0,this.MaxNarrowPhaseTime=0,this.MaxSolvingTime=0,this.MaxTotalTime=0,this.MaxUpdateTime=0},calcBroadPhase:function(){this.setTime(2),this.broadPhaseTime=this.times[2]-this.times[1]},calcNarrowPhase:function(){this.setTime(3),this.narrowPhaseTime=this.times[3]-this.times[2]},calcEnd:function(){this.setTime(2),this.solvingTime=this.times[2]-this.times[1],this.totalTime=this.times[2]-this.times[0],this.updateTime=this.totalTime-(this.broadPhaseTime+this.narrowPhaseTime+this.solvingTime),100===this.tt&&this.resetMax(),this.tt>100&&(this.broadPhaseTime>this.MaxBroadPhaseTime&&(this.MaxBroadPhaseTime=this.broadPhaseTime),this.narrowPhaseTime>this.MaxNarrowPhaseTime&&(this.MaxNarrowPhaseTime=this.narrowPhaseTime),this.solvingTime>this.MaxSolvingTime&&(this.MaxSolvingTime=this.solvingTime),this.totalTime>this.MaxTotalTime&&(this.MaxTotalTime=this.totalTime),this.updateTime>this.MaxUpdateTime&&(this.MaxUpdateTime=this.updateTime)),this.upfps(),this.tt++,this.tt>500&&(this.tt=0)},upfps:function(){this.f[1]=Date.now(),this.f[1]-1e3>this.f[0]&&(this.f[0]=this.f[1],this.fps=this.f[2],this.f[2]=0),this.f[2]++},show:function(){return[\"Oimo.js \"+this.version+\"<br>\",this.broadPhase+\"<br><br>\",\"FPS: \"+this.fps+\" fps<br><br>\",\"rigidbody \"+this.parent.numRigidBodies+\"<br>\",\"contact &nbsp;&nbsp;\"+this.parent.numContacts+\"<br>\",\"ct-point &nbsp;\"+this.parent.numContactPoints+\"<br>\",\"paircheck \"+this.parent.broadPhase.numPairChecks+\"<br>\",\"island &nbsp;&nbsp;&nbsp;\"+this.parent.numIslands+\"<br><br>\",\"Time in milliseconds<br><br>\",\"broadphase &nbsp;\"+C.fix(this.broadPhaseTime)+\" | \"+C.fix(this.MaxBroadPhaseTime)+\"<br>\",\"narrowphase \"+C.fix(this.narrowPhaseTime)+\" | \"+C.fix(this.MaxNarrowPhaseTime)+\"<br>\",\"solving &nbsp;&nbsp;&nbsp;&nbsp;\"+C.fix(this.solvingTime)+\" | \"+C.fix(this.MaxSolvingTime)+\"<br>\",\"total &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"+C.fix(this.totalTime)+\" | \"+C.fix(this.MaxTotalTime)+\"<br>\",\"updating &nbsp;&nbsp;&nbsp;\"+C.fix(this.updateTime)+\" | \"+C.fix(this.MaxUpdateTime)+\"<br>\"].join(\"\\n\")},toArray:function(){return this.infos[0]=this.parent.broadPhase.types,this.infos[1]=this.parent.numRigidBodies,this.infos[2]=this.parent.numContacts,this.infos[3]=this.parent.broadPhase.numPairChecks,this.infos[4]=this.parent.numContactPoints,this.infos[5]=this.parent.numIslands,this.infos[6]=this.broadPhaseTime,this.infos[7]=this.narrowPhaseTime,this.infos[8]=this.solvingTime,this.infos[9]=this.updateTime,this.infos[10]=this.totalTime,this.infos[11]=this.fps,this.infos}}),Object.assign(k.prototype,{Vec3:!0,set:function(t,e,i){return this.x=t,this.y=e,this.z=i,this},add:function(t,e){return void 0!==e?this.addVectors(t,e):(this.x+=t.x,this.y+=t.y,this.z+=t.z,this)},addVectors:function(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this},addEqual:function(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this},sub:function(t,e){return void 0!==e?this.subVectors(t,e):(this.x-=t.x,this.y-=t.y,this.z-=t.z,this)},subVectors:function(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this},subEqual:function(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this},scale:function(t,e){return this.x=t.x*e,this.y=t.y*e,this.z=t.z*e,this},scaleEqual:function(t){return this.x*=t,this.y*=t,this.z*=t,this},multiply:function(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this},multiplyScalar:function(t){return this.x*=t,this.y*=t,this.z*=t,this},addScaledVector:function(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this},subScaledVector:function(t,e){return this.x-=t.x*e,this.y-=t.y*e,this.z-=t.z*e,this},cross:function(t,e){if(void 0!==e)return this.crossVectors(t,e);var i=this.x,n=this.y,r=this.z;return this.x=n*t.z-r*t.y,this.y=r*t.x-i*t.z,this.z=i*t.y-n*t.x,this},crossVectors:function(t,e){var i=t.x,n=t.y,r=t.z,s=e.x,a=e.y,o=e.z;return this.x=n*o-r*a,this.y=r*s-i*o,this.z=i*a-n*s,this},tangent:function(t){var e=t.x,i=t.y,n=t.z;return this.x=i*e-n*n,this.y=-n*i-e*e,this.z=e*n+i*i,this},invert:function(t){return this.x=-t.x,this.y=-t.y,this.z=-t.z,this},negate:function(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this},dot:function(t){return this.x*t.x+this.y*t.y+this.z*t.z},addition:function(){return this.x+this.y+this.z},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z},length:function(){return C.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},copy:function(t){return this.x=t.x,this.y=t.y,this.z=t.z,this},applyMatrix3:function(t,e){var i=this.x,n=this.y,r=this.z,s=t.elements;return e?(this.x=s[0]*i+s[1]*n+s[2]*r,this.y=s[3]*i+s[4]*n+s[5]*r,this.z=s[6]*i+s[7]*n+s[8]*r):(this.x=s[0]*i+s[3]*n+s[6]*r,this.y=s[1]*i+s[4]*n+s[7]*r,this.z=s[2]*i+s[5]*n+s[8]*r),this},applyQuaternion:function(t){var e=this.x,i=this.y,n=this.z,r=t.x,s=t.y,a=t.z,o=t.w,h=o*e+s*n-a*i,l=o*i+a*e-r*n,c=o*n+r*i-s*e,u=-r*e-s*i-a*n;return this.x=h*o+u*-r+l*-a-c*-s,this.y=l*o+u*-s+c*-r-h*-a,this.z=c*o+u*-a+h*-s-l*-r,this},testZero:function(){return 0!==this.x||0!==this.y||0!==this.z},testDiff:function(t){return!this.equals(t)},equals:function(t){return t.x===this.x&&t.y===this.y&&t.z===this.z},clone:function(){return new this.constructor(this.x,this.y,this.z)},toString:function(){return\"Vec3[\"+this.x.toFixed(4)+\", \"+this.y.toFixed(4)+\", \"+this.z.toFixed(4)+\"]\"},multiplyScalar:function(t){return isFinite(t)?(this.x*=t,this.y*=t,this.z*=t):(this.x=0,this.y=0,this.z=0),this},divideScalar:function(t){return this.multiplyScalar(1/t)},normalize:function(){return this.divideScalar(this.length())},toArray:function(t,e){void 0===e&&(e=0),t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z},fromArray:function(t,e){return void 0===e&&(e=0),this.x=t[e],this.y=t[e+1],this.z=t[e+2],this}}),Object.assign(D.prototype,{Quat:!0,set:function(t,e,i,n){return this.x=t,this.y=e,this.z=i,this.w=n,this},addTime:function(t,e){var i=t.x,n=t.y,r=t.z,s=this.w,a=this.x,o=this.y,h=this.z;return e*=.5,this.x+=e*(i*s+n*h-r*o),this.y+=e*(n*s+r*a-i*h),this.z+=e*(r*s+i*o-n*a),this.w+=e*(-i*a-n*o-r*h),this.normalize(),this},multiply:function(t,e){return void 0!==e?this.multiplyQuaternions(t,e):this.multiplyQuaternions(this,t)},multiplyQuaternions:function(t,e){var i=t.x,n=t.y,r=t.z,s=t.w,a=e.x,o=e.y,h=e.z,l=e.w;return this.x=i*l+s*a+n*h-r*o,this.y=n*l+s*o+r*a-i*h,this.z=r*l+s*h+i*o-n*a,this.w=s*l-i*a-n*o-r*h,this},setFromUnitVectors:function(t,e){var i=new k,n=t.dot(e)+1;return n<C.EPS2?(n=0,C.abs(t.x)>C.abs(t.z)?i.set(-t.y,t.x,0):i.set(0,-t.z,t.y)):i.crossVectors(t,e),this._x=i.x,this._y=i.y,this._z=i.z,this._w=n,this.normalize()},arc:function(t,e){var i=t.x,n=t.y,r=t.z,s=e.x,a=e.y,o=e.z,h=i*s+n*a+r*o;if(-1==h)return s=n*i-r*r,a=-r*n-i*i,o=i*r+n*n,h=1/C.sqrt(s*s+a*a+o*o),this.w=0,this.x=s*h,this.y=a*h,this.z=o*h,this;var l=n*o-r*a,c=r*s-i*o,u=i*a-n*s;return this.w=C.sqrt(.5*(1+h)),h=.5/this.w,this.x=l*h,this.y=c*h,this.z=u*h,this},normalize:function(){var t=this.length();return 0===t?this.set(0,0,0,1):(t=1/t,this.x=this.x*t,this.y=this.y*t,this.z=this.z*t,this.w=this.w*t),this},inverse:function(){return this.conjugate().normalize()},invert:function(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w,this.conjugate().normalize(),this},conjugate:function(){return this.x*=-1,this.y*=-1,this.z*=-1,this},length:function(){return C.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w},copy:function(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w,this},clone:function(t){return new D(this.x,this.y,this.z,this.w)},testDiff:function(t){return!this.equals(t)},equals:function(t){return this.x===t.x&&this.y===t.y&&this.z===t.z&&this.w===t.w},toString:function(){return\"Quat[\"+this.x.toFixed(4)+\", (\"+this.y.toFixed(4)+\", \"+this.z.toFixed(4)+\", \"+this.w.toFixed(4)+\")]\"},setFromEuler:function(t,e,i){var n=Math.cos(.5*t),r=Math.cos(.5*e),s=Math.cos(.5*i),a=Math.sin(.5*t),o=Math.sin(.5*e),h=Math.sin(.5*i);return this.x=a*r*s+n*o*h,this.y=n*o*s-a*r*h,this.z=n*r*h+a*o*s,this.w=n*r*s-a*o*h,this},setFromAxis:function(t,e){t.normalize(),e*=.5;var i=C.sin(e);return this.x=i*t.x,this.y=i*t.y,this.z=i*t.z,this.w=C.cos(e),this},setFromMat33:function(t){var e,i=t[0]+t[4]+t[8];if(i>0)e=C.sqrt(i+1),this.w=.5/e,e=.5/e,this.x=(t[5]-t[7])*e,this.y=(t[6]-t[2])*e,this.z=(t[1]-t[3])*e;else{var n=[],r=0;t[4]>t[0]&&(r=1),t[8]>t[3*r+r]&&(r=2);var s=(r+1)%3,a=(r+2)%3;e=C.sqrt(t[3*r+r]-t[3*s+s]-t[3*a+a]+1),n[r]=.5*fRoot,e=.5/fRoot,this.w=(t[3*s+a]-t[3*a+s])*e,n[s]=(t[3*s+r]+t[3*r+s])*e,n[a]=(t[3*a+r]+t[3*r+a])*e,this.x=n[1],this.y=n[2],this.z=n[3]}return this},toArray:function(t,e){t[e=e||0]=this.x,t[e+1]=this.y,t[e+2]=this.z,t[e+3]=this.w},fromArray:function(t,e){return e=e||0,this.set(t[e],t[e+1],t[e+2],t[e+3]),this}}),Object.assign(B.prototype,{Mat33:!0,set:function(t,e,i,n,r,s,a,o,h){var l=this.elements;return l[0]=t,l[1]=e,l[2]=i,l[3]=n,l[4]=r,l[5]=s,l[6]=a,l[7]=o,l[8]=h,this},add:function(t,e){if(void 0!==e)return this.addMatrixs(t,e);var i=this.elements,n=t.elements;return i[0]+=n[0],i[1]+=n[1],i[2]+=n[2],i[3]+=n[3],i[4]+=n[4],i[5]+=n[5],i[6]+=n[6],i[7]+=n[7],i[8]+=n[8],this},addMatrixs:function(t,e){var i=this.elements,n=t.elements,r=e.elements;return i[0]=n[0]+r[0],i[1]=n[1]+r[1],i[2]=n[2]+r[2],i[3]=n[3]+r[3],i[4]=n[4]+r[4],i[5]=n[5]+r[5],i[6]=n[6]+r[6],i[7]=n[7]+r[7],i[8]=n[8]+r[8],this},addEqual:function(t){var e=this.elements,i=t.elements;return e[0]+=i[0],e[1]+=i[1],e[2]+=i[2],e[3]+=i[3],e[4]+=i[4],e[5]+=i[5],e[6]+=i[6],e[7]+=i[7],e[8]+=i[8],this},sub:function(t,e){if(void 0!==e)return this.subMatrixs(t,e);var i=this.elements,n=t.elements;return i[0]-=n[0],i[1]-=n[1],i[2]-=n[2],i[3]-=n[3],i[4]-=n[4],i[5]-=n[5],i[6]-=n[6],i[7]-=n[7],i[8]-=n[8],this},subMatrixs:function(t,e){var i=this.elements,n=t.elements,r=e.elements;return i[0]=n[0]-r[0],i[1]=n[1]-r[1],i[2]=n[2]-r[2],i[3]=n[3]-r[3],i[4]=n[4]-r[4],i[5]=n[5]-r[5],i[6]=n[6]-r[6],i[7]=n[7]-r[7],i[8]=n[8]-r[8],this},subEqual:function(t){var e=this.elements,i=t.elements;return e[0]-=i[0],e[1]-=i[1],e[2]-=i[2],e[3]-=i[3],e[4]-=i[4],e[5]-=i[5],e[6]-=i[6],e[7]-=i[7],e[8]-=i[8],this},scale:function(t,e){var i=this.elements,n=t.elements;return i[0]=n[0]*e,i[1]=n[1]*e,i[2]=n[2]*e,i[3]=n[3]*e,i[4]=n[4]*e,i[5]=n[5]*e,i[6]=n[6]*e,i[7]=n[7]*e,i[8]=n[8]*e,this},scaleEqual:function(t){var e=this.elements;return e[0]*=t,e[1]*=t,e[2]*=t,e[3]*=t,e[4]*=t,e[5]*=t,e[6]*=t,e[7]*=t,e[8]*=t,this},multiplyMatrices:function(t,e,i){i&&(e=e.clone().transpose());var n=this.elements,r=t.elements,s=e.elements,a=r[0],o=r[3],h=r[6],l=r[1],c=r[4],u=r[7],p=r[2],d=r[5],m=r[8],f=s[0],v=s[3],g=s[6],y=s[1],x=s[4],b=s[7],w=s[2],M=s[5],_=s[8];return n[0]=a*f+l*v+p*g,n[1]=a*y+l*x+p*b,n[2]=a*w+l*M+p*_,n[3]=o*f+c*v+d*g,n[4]=o*y+c*x+d*b,n[5]=o*w+c*M+d*_,n[6]=h*f+u*v+m*g,n[7]=h*y+u*x+m*b,n[8]=h*w+u*M+m*_,this},transpose:function(t){if(void 0!==t){var e=t.elements;return this.set(e[0],e[3],e[6],e[1],e[4],e[7],e[2],e[5],e[8]),this}var i=this.elements,n=i[1],r=i[2],s=i[5];return i[1]=i[3],i[2]=i[6],i[3]=n,i[5]=i[7],i[6]=r,i[7]=s,this},setQuat:function(t){var e=this.elements,i=t.x,n=t.y,r=t.z,s=t.w,a=i+i,o=n+n,h=r+r,l=i*a,c=i*o,u=i*h,p=n*o,d=n*h,m=r*h,f=s*a,v=s*o,g=s*h;return e[0]=1-(p+m),e[1]=c-g,e[2]=u+v,e[3]=c+g,e[4]=1-(l+m),e[5]=d-f,e[6]=u-v,e[7]=d+f,e[8]=1-(l+p),this},invert:function(t){var e=this.elements,i=t.elements,n=i[0],r=i[3],s=i[6],a=i[1],o=i[4],h=i[7],l=i[2],c=i[5],u=i[8],p=u*o-c*h,d=-u*r+c*s,m=h*r-o*s,f=n*p+a*d+l*m;return 0===f?(console.log(\"can't invert matrix, determinant is 0\"),this.identity()):(f=1/f,e[0]=p*f,e[1]=(-u*a+l*h)*f,e[2]=(c*a-l*o)*f,e[3]=d*f,e[4]=(u*n-l*s)*f,e[5]=(-c*n+l*r)*f,e[6]=m*f,e[7]=(-h*n+a*s)*f,e[8]=(o*n-a*r)*f,this)},addOffset:function(t,e){var i=e.x,n=e.y,r=e.z,s=this.elements;s[0]+=t*(n*n+r*r),s[4]+=t*(i*i+r*r),s[8]+=t*(i*i+n*n);var a=t*i*n,o=t*n*r,h=t*r*i;return s[1]-=a,s[3]-=a,s[2]-=o,s[6]-=o,s[5]-=h,s[7]-=h,this},subOffset:function(t,e){var i=e.x,n=e.y,r=e.z,s=this.elements;s[0]-=t*(n*n+r*r),s[4]-=t*(i*i+r*r),s[8]-=t*(i*i+n*n);var a=t*i*n,o=t*n*r,h=t*r*i;return s[1]+=a,s[3]+=a,s[2]+=o,s[6]+=o,s[5]+=h,s[7]+=h,this},multiplyScalar:function(t){var e=this.elements;return e[0]*=t,e[3]*=t,e[6]*=t,e[1]*=t,e[4]*=t,e[7]*=t,e[2]*=t,e[5]*=t,e[8]*=t,this},identity:function(){return this.set(1,0,0,0,1,0,0,0,1),this},clone:function(){return(new B).fromArray(this.elements)},copy:function(t){for(var e=0;e<9;e++)this.elements[e]=t.elements[e];return this},determinant:function(){var t=this.elements,e=t[0],i=t[1],n=t[2],r=t[3],s=t[4],a=t[5],o=t[6],h=t[7],l=t[8];return e*s*l-e*a*h-i*r*l+i*a*o+n*r*h-n*s*o},fromArray:function(t,e){void 0===e&&(e=0);for(var i=0;i<9;i++)this.elements[i]=t[i+e];return this},toArray:function(t,e){void 0===t&&(t=[]),void 0===e&&(e=0);var i=this.elements;return t[e]=i[0],t[e+1]=i[1],t[e+2]=i[2],t[e+3]=i[3],t[e+4]=i[4],t[e+5]=i[5],t[e+6]=i[6],t[e+7]=i[7],t[e+8]=i[8],t}}),Object.assign(V.prototype,{AABB:!0,set:function(t,e,i,n,r,s){var a=this.elements;return a[0]=t,a[3]=e,a[1]=i,a[4]=n,a[2]=r,a[5]=s,this},intersectTest:function(t){var e=this.elements,i=t.elements;return e[0]>i[3]||e[1]>i[4]||e[2]>i[5]||e[3]<i[0]||e[4]<i[1]||e[5]<i[2]},intersectTestTwo:function(t){var e=this.elements,i=t.elements;return e[0]<i[0]||e[1]<i[1]||e[2]<i[2]||e[3]>i[3]||e[4]>i[4]||e[5]>i[5]},clone:function(){return(new this.constructor).fromArray(this.elements)},copy:function(t,e){var i=e||0,n=t.elements;return this.set(n[0]-i,n[3]+i,n[1]-i,n[4]+i,n[2]-i,n[5]+i),this},fromArray:function(t){return this.elements.set(t),this},combine:function(t,e){var i=t.elements,n=e.elements,r=this.elements;return r[0]=i[0]<n[0]?i[0]:n[0],r[1]=i[1]<n[1]?i[1]:n[1],r[2]=i[2]<n[2]?i[2]:n[2],r[3]=i[3]>n[3]?i[3]:n[3],r[4]=i[4]>n[4]?i[4]:n[4],r[5]=i[5]>n[5]?i[5]:n[5],this},surfaceArea:function(){var t=this.elements,e=t[3]-t[0],i=t[4]-t[1],n=t[5]-t[2];return 2*(e*(i+n)+i*n)},intersectsWithPoint:function(t,e,i){var n=this.elements;return t>=n[0]&&t<=n[3]&&e>=n[1]&&e<=n[4]&&i>=n[2]&&i<=n[5]},setFromPoints:function(t){this.makeEmpty();for(var e=0;e<t.length;e++)this.expandByPoint(t[e])},makeEmpty:function(){this.set(-1/0,-1/0,-1/0,1/0,1/0,1/0)},expandByPoint:function(t){var e=this.elements;this.set(C.min(e[0],t.x),C.min(e[1],t.y),C.min(e[2],t.z),C.max(e[3],t.x),C.max(e[4],t.y),C.max(e[5],t.z))},expandByScalar:function(t){var e=this.elements;e[0]+=-t,e[1]+=-t,e[2]+=-t,e[3]+=t,e[4]+=t,e[5]+=t}});var U=0;function F(t){this.type=y,this.id=U++,this.prev=null,this.next=null,this.proxy=null,this.parent=null,this.contactLink=null,this.numContacts=0,this.position=new k,this.rotation=new B,this.relativePosition=(new k).copy(t.relativePosition),this.relativeRotation=(new B).copy(t.relativeRotation),this.aabb=new V,this.density=t.density,this.friction=t.friction,this.restitution=t.restitution,this.belongsTo=t.belongsTo,this.collidesWith=t.collidesWith}function H(t,e,i,n){F.call(this,t),this.type=b,this.width=e,this.height=i,this.depth=n,this.halfWidth=.5*e,this.halfHeight=.5*i,this.halfDepth=.5*n,this.dimentions=new Float32Array(18),this.elements=new Float32Array(24)}function G(t,e){F.call(this,t),this.type=x,this.radius=e}function j(t,e,i){F.call(this,t),this.type=w,this.radius=e,this.height=i,this.halfHeight=.5*i,this.normalDirection=new k,this.halfDirection=new k}function W(t,e){F.call(this,t),this.type=M,this.normal=new k(0,1,0)}function q(t,e){F.call(this,t),this.type=_}function X(){this.relativePosition=new k,this.relativeRotation=new B,this.friction=.2,this.restitution=.2,this.density=1,this.belongsTo=1,this.collidesWith=4294967295}function Y(t,e){e=e||!1,this.axis=t,this.angle=0,this.lowerLimit=e?0:1,this.upperLimit=0,this.motorSpeed=0,this.maxMotorForce=0,this.frequency=0,this.dampingRatio=0}function J(){this.parent=null,this.body1=null,this.body2=null,this.addedToIsland=!1}function Z(t){this.prev=null,this.next=null,this.body=null,this.joint=t}function Q(t){J.call(this),this.scale=1,this.invScale=1,this.name=\"\",this.id=NaN,this.type=E,this.prev=null,this.next=null,this.body1=t.body1,this.body2=t.body2,this.localAnchorPoint1=(new k).copy(t.localAnchorPoint1),this.localAnchorPoint2=(new k).copy(t.localAnchorPoint2),this.relativeAnchorPoint1=new k,this.relativeAnchorPoint2=new k,this.anchorPoint1=new k,this.anchorPoint2=new k,this.allowCollision=t.allowCollision,this.b1Link=new Z(this),this.b2Link=new Z(this)}function K(t){this.m1=NaN,this.m2=NaN,this.ii1=null,this.ii2=null,this.dd=null,this.r1x=NaN,this.r1y=NaN,this.r1z=NaN,this.r2x=NaN,this.r2y=NaN,this.r2z=NaN,this.ax1x=NaN,this.ax1y=NaN,this.ax1z=NaN,this.ay1x=NaN,this.ay1y=NaN,this.ay1z=NaN,this.az1x=NaN,this.az1y=NaN,this.az1z=NaN,this.ax2x=NaN,this.ax2y=NaN,this.ax2z=NaN,this.ay2x=NaN,this.ay2y=NaN,this.ay2z=NaN,this.az2x=NaN,this.az2y=NaN,this.az2z=NaN,this.vel=NaN,this.velx=NaN,this.vely=NaN,this.velz=NaN,this.joint=t,this.r1=t.relativeAnchorPoint1,this.r2=t.relativeAnchorPoint2,this.p1=t.anchorPoint1,this.p2=t.anchorPoint2,this.b1=t.body1,this.b2=t.body2,this.l1=this.b1.linearVelocity,this.l2=this.b2.linearVelocity,this.a1=this.b1.angularVelocity,this.a2=this.b2.angularVelocity,this.i1=this.b1.inverseInertia,this.i2=this.b2.inverseInertia,this.impx=0,this.impy=0,this.impz=0}function $(t,e,i,n){this.cfm1=NaN,this.cfm2=NaN,this.cfm3=NaN,this.i1e00=NaN,this.i1e01=NaN,this.i1e02=NaN,this.i1e10=NaN,this.i1e11=NaN,this.i1e12=NaN,this.i1e20=NaN,this.i1e21=NaN,this.i1e22=NaN,this.i2e00=NaN,this.i2e01=NaN,this.i2e02=NaN,this.i2e10=NaN,this.i2e11=NaN,this.i2e12=NaN,this.i2e20=NaN,this.i2e21=NaN,this.i2e22=NaN,this.ax1=NaN,this.ay1=NaN,this.az1=NaN,this.ax2=NaN,this.ay2=NaN,this.az2=NaN,this.ax3=NaN,this.ay3=NaN,this.az3=NaN,this.a1x1=NaN,this.a1y1=NaN,this.a1z1=NaN,this.a2x1=NaN,this.a2y1=NaN,this.a2z1=NaN,this.a1x2=NaN,this.a1y2=NaN,this.a1z2=NaN,this.a2x2=NaN,this.a2y2=NaN,this.a2z2=NaN,this.a1x3=NaN,this.a1y3=NaN,this.a1z3=NaN,this.a2x3=NaN,this.a2y3=NaN,this.a2z3=NaN,this.lowerLimit1=NaN,this.upperLimit1=NaN,this.limitVelocity1=NaN,this.limitState1=0,this.enableMotor1=!1,this.motorSpeed1=NaN,this.maxMotorForce1=NaN,this.maxMotorImpulse1=NaN,this.lowerLimit2=NaN,this.upperLimit2=NaN,this.limitVelocity2=NaN,this.limitState2=0,this.enableMotor2=!1,this.motorSpeed2=NaN,this.maxMotorForce2=NaN,this.maxMotorImpulse2=NaN,this.lowerLimit3=NaN,this.upperLimit3=NaN,this.limitVelocity3=NaN,this.limitState3=0,this.enableMotor3=!1,this.motorSpeed3=NaN,this.maxMotorForce3=NaN,this.maxMotorImpulse3=NaN,this.k00=NaN,this.k01=NaN,this.k02=NaN,this.k10=NaN,this.k11=NaN,this.k12=NaN,this.k20=NaN,this.k21=NaN,this.k22=NaN,this.kv00=NaN,this.kv11=NaN,this.kv22=NaN,this.dv00=NaN,this.dv11=NaN,this.dv22=NaN,this.d00=NaN,this.d01=NaN,this.d02=NaN,this.d10=NaN,this.d11=NaN,this.d12=NaN,this.d20=NaN,this.d21=NaN,this.d22=NaN,this.limitMotor1=e,this.limitMotor2=i,this.limitMotor3=n,this.b1=t.body1,this.b2=t.body2,this.a1=this.b1.angularVelocity,this.a2=this.b2.angularVelocity,this.i1=this.b1.inverseInertia,this.i2=this.b2.inverseInertia,this.limitImpulse1=0,this.motorImpulse1=0,this.limitImpulse2=0,this.motorImpulse2=0,this.limitImpulse3=0,this.motorImpulse3=0}function tt(t,e,i){Q.call(this,t),this.type=A,this.localAxis1=t.localAxis1.clone().normalize(),this.localAxis2=t.localAxis2.clone().normalize();var n=(new B).setQuat((new D).setFromUnitVectors(this.localAxis1,this.localAxis2));this.localAngle1=(new k).tangent(this.localAxis1).normalize(),this.localAngle2=this.localAngle1.clone().applyMatrix3(n,!0),this.ax1=new k,this.ax2=new k,this.an1=new k,this.an2=new k,this.tmp=new k,this.nor=new k,this.tan=new k,this.bin=new k,this.limitMotor=new Y(this.nor,!1),this.limitMotor.lowerLimit=e,this.limitMotor.upperLimit=i,this.lc=new K(this),this.r3=new $(this,this.limitMotor,new Y(this.tan,!0),new Y(this.bin,!0))}function et(t){Q.call(this,t),this.type=L,this.lc=new K(this)}function it(t,e){this.cfm=NaN,this.m1=NaN,this.m2=NaN,this.i1e00=NaN,this.i1e01=NaN,this.i1e02=NaN,this.i1e10=NaN,this.i1e11=NaN,this.i1e12=NaN,this.i1e20=NaN,this.i1e21=NaN,this.i1e22=NaN,this.i2e00=NaN,this.i2e01=NaN,this.i2e02=NaN,this.i2e10=NaN,this.i2e11=NaN,this.i2e12=NaN,this.i2e20=NaN,this.i2e21=NaN,this.i2e22=NaN,this.motorDenom=NaN,this.invMotorDenom=NaN,this.invDenom=NaN,this.ax=NaN,this.ay=NaN,this.az=NaN,this.r1x=NaN,this.r1y=NaN,this.r1z=NaN,this.r2x=NaN,this.r2y=NaN,this.r2z=NaN,this.t1x=NaN,this.t1y=NaN,this.t1z=NaN,this.t2x=NaN,this.t2y=NaN,this.t2z=NaN,this.l1x=NaN,this.l1y=NaN,this.l1z=NaN,this.l2x=NaN,this.l2y=NaN,this.l2z=NaN,this.a1x=NaN,this.a1y=NaN,this.a1z=NaN,this.a2x=NaN,this.a2y=NaN,this.a2z=NaN,this.lowerLimit=NaN,this.upperLimit=NaN,this.limitVelocity=NaN,this.limitState=0,this.enableMotor=!1,this.motorSpeed=NaN,this.maxMotorForce=NaN,this.maxMotorImpulse=NaN,this.limitMotor=e,this.b1=t.body1,this.b2=t.body2,this.p1=t.anchorPoint1,this.p2=t.anchorPoint2,this.r1=t.relativeAnchorPoint1,this.r2=t.relativeAnchorPoint2,this.l1=this.b1.linearVelocity,this.l2=this.b2.linearVelocity,this.a1=this.b1.angularVelocity,this.a2=this.b2.angularVelocity,this.i1=this.b1.inverseInertia,this.i2=this.b2.inverseInertia,this.limitImpulse=0,this.motorImpulse=0}function nt(t,e,i){Q.call(this,t),this.type=T,this.nor=new k,this.limitMotor=new Y(this.nor,!0),this.limitMotor.lowerLimit=e,this.limitMotor.upperLimit=i,this.t=new it(this,this.limitMotor)}function rt(t,e){this.joint=t,this.targetOrientation=(new D).invert(e),this.relativeOrientation=new D,this.ii1=null,this.ii2=null,this.dd=null,this.vel=new k,this.imp=new k,this.rn0=new k,this.rn1=new k,this.rn2=new k,this.b1=t.body1,this.b2=t.body2,this.a1=this.b1.angularVelocity,this.a2=this.b2.angularVelocity,this.i1=this.b1.inverseInertia,this.i2=this.b2.inverseInertia}function st(t,e,i,n){this.m1=NaN,this.m2=NaN,this.i1e00=NaN,this.i1e01=NaN,this.i1e02=NaN,this.i1e10=NaN,this.i1e11=NaN,this.i1e12=NaN,this.i1e20=NaN,this.i1e21=NaN,this.i1e22=NaN,this.i2e00=NaN,this.i2e01=NaN,this.i2e02=NaN,this.i2e10=NaN,this.i2e11=NaN,this.i2e12=NaN,this.i2e20=NaN,this.i2e21=NaN,this.i2e22=NaN,this.ax1=NaN,this.ay1=NaN,this.az1=NaN,this.ax2=NaN,this.ay2=NaN,this.az2=NaN,this.ax3=NaN,this.ay3=NaN,this.az3=NaN,this.r1x=NaN,this.r1y=NaN,this.r1z=NaN,this.r2x=NaN,this.r2y=NaN,this.r2z=NaN,this.t1x1=NaN,this.t1y1=NaN,this.t1z1=NaN,this.t2x1=NaN,this.t2y1=NaN,this.t2z1=NaN,this.l1x1=NaN,this.l1y1=NaN,this.l1z1=NaN,this.l2x1=NaN,this.l2y1=NaN,this.l2z1=NaN,this.a1x1=NaN,this.a1y1=NaN,this.a1z1=NaN,this.a2x1=NaN,this.a2y1=NaN,this.a2z1=NaN,this.t1x2=NaN,this.t1y2=NaN,this.t1z2=NaN,this.t2x2=NaN,this.t2y2=NaN,this.t2z2=NaN,this.l1x2=NaN,this.l1y2=NaN,this.l1z2=NaN,this.l2x2=NaN,this.l2y2=NaN,this.l2z2=NaN,this.a1x2=NaN,this.a1y2=NaN,this.a1z2=NaN,this.a2x2=NaN,this.a2y2=NaN,this.a2z2=NaN,this.t1x3=NaN,this.t1y3=NaN,this.t1z3=NaN,this.t2x3=NaN,this.t2y3=NaN,this.t2z3=NaN,this.l1x3=NaN,this.l1y3=NaN,this.l1z3=NaN,this.l2x3=NaN,this.l2y3=NaN,this.l2z3=NaN,this.a1x3=NaN,this.a1y3=NaN,this.a1z3=NaN,this.a2x3=NaN,this.a2y3=NaN,this.a2z3=NaN,this.lowerLimit1=NaN,this.upperLimit1=NaN,this.limitVelocity1=NaN,this.limitState1=0,this.enableMotor1=!1,this.motorSpeed1=NaN,this.maxMotorForce1=NaN,this.maxMotorImpulse1=NaN,this.lowerLimit2=NaN,this.upperLimit2=NaN,this.limitVelocity2=NaN,this.limitState2=0,this.enableMotor2=!1,this.motorSpeed2=NaN,this.maxMotorForce2=NaN,this.maxMotorImpulse2=NaN,this.lowerLimit3=NaN,this.upperLimit3=NaN,this.limitVelocity3=NaN,this.limitState3=0,this.enableMotor3=!1,this.motorSpeed3=NaN,this.maxMotorForce3=NaN,this.maxMotorImpulse3=NaN,this.k00=NaN,this.k01=NaN,this.k02=NaN,this.k10=NaN,this.k11=NaN,this.k12=NaN,this.k20=NaN,this.k21=NaN,this.k22=NaN,this.kv00=NaN,this.kv11=NaN,this.kv22=NaN,this.dv00=NaN,this.dv11=NaN,this.dv22=NaN,this.d00=NaN,this.d01=NaN,this.d02=NaN,this.d10=NaN,this.d11=NaN,this.d12=NaN,this.d20=NaN,this.d21=NaN,this.d22=NaN,this.limitMotor1=e,this.limitMotor2=i,this.limitMotor3=n,this.b1=t.body1,this.b2=t.body2,this.p1=t.anchorPoint1,this.p2=t.anchorPoint2,this.r1=t.relativeAnchorPoint1,this.r2=t.relativeAnchorPoint2,this.l1=this.b1.linearVelocity,this.l2=this.b2.linearVelocity,this.a1=this.b1.angularVelocity,this.a2=this.b2.angularVelocity,this.i1=this.b1.inverseInertia,this.i2=this.b2.inverseInertia,this.limitImpulse1=0,this.motorImpulse1=0,this.limitImpulse2=0,this.motorImpulse2=0,this.limitImpulse3=0,this.motorImpulse3=0,this.cfm1=0,this.cfm2=0,this.cfm3=0,this.weight=-1}function at(t,e,i){Q.call(this,t),this.type=N,this.localAxis1=t.localAxis1.clone().normalize(),this.localAxis2=t.localAxis2.clone().normalize(),this.ax1=new k,this.ax2=new k,this.nor=new k,this.tan=new k,this.bin=new k,this.ac=new rt(this,(new D).setFromUnitVectors(this.localAxis1,this.localAxis2)),this.limitMotor=new Y(this.nor,!0),this.limitMotor.lowerLimit=e,this.limitMotor.upperLimit=i,this.t3=new st(this,this.limitMotor,new Y(this.tan,!0),new Y(this.bin,!0))}function ot(t,e,i){Q.call(this,t),this.type=z,this.localAxis1=t.localAxis1.clone().normalize(),this.localAxis2=t.localAxis2.clone().normalize();var n=(new B).setQuat((new D).setFromUnitVectors(this.localAxis1,this.localAxis2));this.localAngle1=(new k).tangent(this.localAxis1).normalize(),this.localAngle2=this.localAngle1.clone().applyMatrix3(n,!0),this.ax1=new k,this.ax2=new k,this.an1=new k,this.an2=new k,this.tmp=new k,this.nor=new k,this.tan=new k,this.bin=new k,this.rotationalLimitMotor=new Y(this.nor,!1),this.r3=new $(this,this.rotationalLimitMotor,new Y(this.tan,!0),new Y(this.bin,!0)),this.translationalLimitMotor=new Y(this.nor,!0),this.translationalLimitMotor.lowerLimit=e,this.translationalLimitMotor.upperLimit=i,this.t3=new st(this,this.translationalLimitMotor,new Y(this.tan,!0),new Y(this.bin,!0))}function ht(t){Q.call(this,t),this.type=P,this.localAxis1=t.localAxis1.clone().normalize(),this.localAxis2=t.localAxis2.clone().normalize(),this.localAngle1=new k,this.localAngle2=new k;var e=C.dotVectors(this.localAxis1,this.localAxis2);if(e>-1&&e<1)this.localAngle1.set(this.localAxis2.x-e*this.localAxis1.x,this.localAxis2.y-e*this.localAxis1.y,this.localAxis2.z-e*this.localAxis1.z).normalize(),this.localAngle2.set(this.localAxis1.x-e*this.localAxis2.x,this.localAxis1.y-e*this.localAxis2.y,this.localAxis1.z-e*this.localAxis2.z).normalize();else{var i=(new B).setQuat((new D).setFromUnitVectors(this.localAxis1,this.localAxis2));this.localAngle1.tangent(this.localAxis1).normalize(),this.localAngle2=this.localAngle1.clone().applyMatrix3(i,!0)}this.ax1=new k,this.ax2=new k,this.an1=new k,this.an2=new k,this.tmp=new k,this.nor=new k,this.tan=new k,this.bin=new k,this.translationalLimitMotor=new Y(this.tan,!0),this.translationalLimitMotor.frequency=8,this.translationalLimitMotor.dampingRatio=1,this.rotationalLimitMotor1=new Y(this.tan,!1),this.rotationalLimitMotor2=new Y(this.bin,!1),this.t3=new st(this,new Y(this.nor,!0),this.translationalLimitMotor,new Y(this.bin,!0)),this.t3.weight=1,this.r3=new $(this,new Y(this.nor,!0),this.rotationalLimitMotor1,this.rotationalLimitMotor2)}function lt(){this.scale=1,this.invScale=1,this.body1=null,this.body2=null,this.localAnchorPoint1=new k,this.localAnchorPoint2=new k,this.localAxis1=new k,this.localAxis2=new k,this.allowCollision=!1}function ct(){this.mass=0,this.inertia=new B}function ut(t){this.prev=null,this.next=null,this.shape=null,this.body=null,this.contact=t}function pt(){this.lp1X=NaN,this.lp1Y=NaN,this.lp1Z=NaN,this.lp2X=NaN,this.lp2Y=NaN,this.lp2Z=NaN,this.impulse=NaN}function dt(){this.warmStarted=!1,this.position=new k,this.localPoint1=new k,this.localPoint2=new k,this.normal=new k,this.tangent=new k,this.binormal=new k,this.normalImpulse=0,this.tangentImpulse=0,this.binormalImpulse=0,this.normalDenominator=0,this.tangentDenominator=0,this.binormalDenominator=0,this.penetration=0}function mt(){this.body1=null,this.body2=null,this.numPoints=0,this.points=[new dt,new dt,new dt,new dt]}function ft(){this.nor=new k,this.tan=new k,this.bin=new k,this.norU1=new k,this.tanU1=new k,this.binU1=new k,this.norU2=new k,this.tanU2=new k,this.binU2=new k,this.norT1=new k,this.tanT1=new k,this.binT1=new k,this.norT2=new k,this.tanT2=new k,this.binT2=new k,this.norTU1=new k,this.tanTU1=new k,this.binTU1=new k,this.norTU2=new k,this.tanTU2=new k,this.binTU2=new k,this.norImp=0,this.tanImp=0,this.binImp=0,this.norDen=0,this.tanDen=0,this.binDen=0,this.norTar=0,this.next=null,this.last=!1}function vt(t){J.call(this),this.manifold=t,this.restitution=NaN,this.friction=NaN,this.p1=null,this.p2=null,this.lv1=null,this.lv2=null,this.av1=null,this.av2=null,this.i1=null,this.i2=null,this.tmp=new k,this.tmpC1=new k,this.tmpC2=new k,this.tmpP1=new k,this.tmpP2=new k,this.tmplv1=new k,this.tmplv2=new k,this.tmpav1=new k,this.tmpav2=new k,this.m1=NaN,this.m2=NaN,this.num=0,this.ps=t.points,this.cs=new ft,this.cs.next=new ft,this.cs.next.next=new ft,this.cs.next.next.next=new ft}function gt(){this.shape1=null,this.shape2=null,this.body1=null,this.body2=null,this.prev=null,this.next=null,this.persisting=!1,this.sleeping=!1,this.detector=null,this.constraint=null,this.touching=!1,this.close=!1,this.dist=C.INF,this.b1Link=new ut(this),this.b2Link=new ut(this),this.s1Link=new ut(this),this.s2Link=new ut(this),this.manifold=new mt,this.buffer=[new pt,new pt,new pt,new pt],this.points=this.manifold.points,this.constraint=new vt(this.manifold)}function yt(t,e){this.position=t||new k,this.orientation=e||new D,this.scale=1,this.invScale=1,this.mesh=null,this.id=NaN,this.name=\"\",this.prev=null,this.next=null,this.type=d,this.massInfo=new ct,this.newPosition=new k,this.controlPos=!1,this.newOrientation=new D,this.newRotation=new k,this.currentRotation=new k,this.controlRot=!1,this.controlRotInTime=!1,this.quaternion=new D,this.pos=new k,this.linearVelocity=new k,this.angularVelocity=new k,this.parent=null,this.contactLink=null,this.numContacts=0,this.shapes=null,this.numShapes=0,this.jointLink=null,this.numJoints=0,this.sleepPosition=new k,this.sleepOrientation=new D,this.isStatic=!1,this.isDynamic=!1,this.isKinematic=!1,this.rotation=new B,this.mass=0,this.inverseMass=0,this.inverseInertia=new B,this.localInertia=new B,this.inverseLocalInertia=new B,this.tmpInertia=new B,this.addedToIsland=!1,this.allowSleep=!0,this.sleepTime=0,this.sleeping=!1}function xt(t,e){this.shape1=t||null,this.shape2=e||null}function bt(){this.types=l,this.numPairChecks=0,this.numPairs=0,this.pairs=[]}Object.assign(F.prototype,{Shape:!0,calculateMassInfo:function(t){I(\"Shape\",\"Inheritance error.\")},updateProxy:function(){I(\"Shape\",\"Inheritance error.\")}}),H.prototype=Object.assign(Object.create(F.prototype),{constructor:H,calculateMassInfo:function(t){var e=this.width*this.height*this.depth*this.density;t.mass=e,t.inertia.set(e*(this.height*this.height+this.depth*this.depth)*(1/12),0,0,0,e*(this.width*this.width+this.depth*this.depth)*(1/12),0,0,0,e*(this.width*this.width+this.height*this.height)*(1/12))},updateProxy:function(){var t=this.rotation.elements,e=this.dimentions;e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8],e[9]=t[0]*this.halfWidth,e[10]=t[3]*this.halfWidth,e[11]=t[6]*this.halfWidth,e[12]=t[1]*this.halfHeight,e[13]=t[4]*this.halfHeight,e[14]=t[7]*this.halfHeight,e[15]=t[2]*this.halfDepth,e[16]=t[5]*this.halfDepth,e[17]=t[8]*this.halfDepth;var i=e[9],n=e[10],r=e[11],s=e[12],a=e[13],o=e[14],h=e[15],l=e[16],c=e[17],u=this.position.x,p=this.position.y,d=this.position.z,m=this.elements;m[0]=u+i+s+h,m[1]=p+n+a+l,m[2]=d+r+o+c,m[3]=u+i+s-h,m[4]=p+n+a-l,m[5]=d+r+o-c,m[6]=u+i-s+h,m[7]=p+n-a+l,m[8]=d+r-o+c,m[9]=u+i-s-h,m[10]=p+n-a-l,m[11]=d+r-o-c,m[12]=u-i+s+h,m[13]=p-n+a+l,m[14]=d-r+o+c,m[15]=u-i+s-h,m[16]=p-n+a-l,m[17]=d-r+o-c,m[18]=u-i-s+h,m[19]=p-n-a+l,m[20]=d-r-o+c,m[21]=u-i-s-h,m[22]=p-n-a-l,m[23]=d-r-o-c;var f=e[9]<0?-e[9]:e[9],v=e[10]<0?-e[10]:e[10],g=e[11]<0?-e[11]:e[11];f=e[12]<0?f-e[12]:f+e[12],v=e[13]<0?v-e[13]:v+e[13],g=e[14]<0?g-e[14]:g+e[14],f=e[15]<0?f-e[15]:f+e[15],v=e[16]<0?v-e[16]:v+e[16],g=e[17]<0?g-e[17]:g+e[17];var y=R;this.aabb.set(this.position.x-f-y,this.position.x+f+y,this.position.y-v-y,this.position.y+v+y,this.position.z-g-y,this.position.z+g+y),null!=this.proxy&&this.proxy.update()}}),G.prototype=Object.assign(Object.create(F.prototype),{constructor:G,volume:function(){return C.PI*this.radius*1.333333},calculateMassInfo:function(t){var e=this.volume()*this.radius*this.radius*this.density;t.mass=e;var i=e*this.radius*this.radius*.4;t.inertia.set(i,0,0,0,i,0,0,0,i)},updateProxy:function(){var t=R;this.aabb.set(this.position.x-this.radius-t,this.position.x+this.radius+t,this.position.y-this.radius-t,this.position.y+this.radius+t,this.position.z-this.radius-t,this.position.z+this.radius+t),null!=this.proxy&&this.proxy.update()}}),j.prototype=Object.assign(Object.create(F.prototype),{constructor:j,calculateMassInfo:function(t){var e=this.radius*this.radius,i=C.PI*e*this.height*this.density,n=(.25*e+.0833*this.height*this.height)*i,r=.5*e;t.mass=i,t.inertia.set(n,0,0,0,r,0,0,0,n)},updateProxy:function(){var t,e,i,n,r,s,a,o,h,l,c,u=this.rotation.elements;r=u[1]*u[1],s=u[4]*u[4],a=u[7]*u[7],this.normalDirection.set(u[1],u[4],u[7]),this.halfDirection.scale(this.normalDirection,this.halfHeight),e=1-r,(t=C.sqrt(e*e+r*s+r*a))>0&&(t=this.radius/t),e*=t,i=1-s,(t=C.sqrt(s*r+i*i+s*a))>0&&(t=this.radius/t),i*=t,n=1-a,(t=C.sqrt(a*r+a*s+n*n))>0&&(t=this.radius/t),n*=t,o=this.halfDirection.x<0?-this.halfDirection.x:this.halfDirection.x,h=this.halfDirection.y<0?-this.halfDirection.y:this.halfDirection.y,l=this.halfDirection.z<0?-this.halfDirection.z:this.halfDirection.z,o=e<0?o-e:o+e,h=i<0?h-i:h+i,l=n<0?l-n:l+n,c=R,this.aabb.set(this.position.x-o-c,this.position.x+o+c,this.position.y-h-c,this.position.y+h+c,this.position.z-l-c,this.position.z+l+c),null!=this.proxy&&this.proxy.update()}}),W.prototype=Object.assign(Object.create(F.prototype),{constructor:W,volume:function(){return Number.MAX_VALUE},calculateMassInfo:function(t){t.mass=this.density;t.inertia.set(1,0,0,0,1,0,0,0,1)},updateProxy:function(){var t=R,e=-C.INF,i=C.INF,n=this.normal;this.aabb.set(-1===n.x?this.position.x-t:e,1===n.x?this.position.x+t:i,-1===n.y?this.position.y-t:e,1===n.y?this.position.y+t:i,-1===n.z?this.position.z-t:e,1===n.z?this.position.z+t:i),null!=this.proxy&&this.proxy.update()}}),q.prototype=Object.assign(Object.create(F.prototype),{constructor:q,volume:function(){return Number.MAX_VALUE},calculateMassInfo:function(t){t.inertia.set(0,0,0,0,0,0,0,0,0)},updateProxy:function(){this.aabb.set(this.position.x-0,this.position.x+0,this.position.y-0,this.position.y+0,this.position.z-0,this.position.z+0),null!=this.proxy&&this.proxy.update()}}),Object.assign(Y.prototype,{LimitMotor:!0,setLimit:function(t,e){this.lowerLimit=t,this.upperLimit=e},setMotor:function(t,e){this.motorSpeed=t,this.maxMotorForce=e},setSpring:function(t,e){this.frequency=t,this.dampingRatio=e}}),Object.assign(J.prototype,{Constraint:!0,preSolve:function(t,e){I(\"Constraint\",\"Inheritance error.\")},solve:function(){I(\"Constraint\",\"Inheritance error.\")},postSolve:function(){I(\"Constraint\",\"Inheritance error.\")}}),Q.prototype=Object.assign(Object.create(J.prototype),{constructor:Q,setId:function(t){this.id=i},setParent:function(t){this.parent=t,this.scale=this.parent.scale,this.invScale=this.parent.invScale,this.id=this.parent.numJoints,this.name||(this.name=\"J\"+this.id)},updateAnchorPoints:function(){this.relativeAnchorPoint1.copy(this.localAnchorPoint1).applyMatrix3(this.body1.rotation,!0),this.relativeAnchorPoint2.copy(this.localAnchorPoint2).applyMatrix3(this.body2.rotation,!0),this.anchorPoint1.add(this.relativeAnchorPoint1,this.body1.position),this.anchorPoint2.add(this.relativeAnchorPoint2,this.body2.position)},attach:function(t){this.b1Link.body=this.body2,this.b2Link.body=this.body1,t?(this.body1.jointLink.push(this.b1Link),this.body2.jointLink.push(this.b2Link)):(null!=this.body1.jointLink?(this.b1Link.next=this.body1.jointLink).prev=this.b1Link:this.b1Link.next=null,this.body1.jointLink=this.b1Link,this.body1.numJoints++,null!=this.body2.jointLink?(this.b2Link.next=this.body2.jointLink).prev=this.b2Link:this.b2Link.next=null,this.body2.jointLink=this.b2Link,this.body2.numJoints++)},detach:function(t){if(t)this.body1.jointLink.splice(this.body1.jointLink.indexOf(this.b1Link),1),this.body2.jointLink.splice(this.body2.jointLink.indexOf(this.b2Link),1);else{var e=this.b1Link.prev,i=this.b1Link.next;null!=e&&(e.next=i),null!=i&&(i.prev=e),this.body1.jointLink==this.b1Link&&(this.body1.jointLink=i),this.b1Link.prev=null,this.b1Link.next=null,this.b1Link.body=null,this.body1.numJoints--,e=this.b2Link.prev,i=this.b2Link.next,null!=e&&(e.next=i),null!=i&&(i.prev=e),this.body2.jointLink==this.b2Link&&(this.body2.jointLink=i),this.b2Link.prev=null,this.b2Link.next=null,this.b2Link.body=null,this.body2.numJoints--}this.b1Link.body=null,this.b2Link.body=null},awake:function(){this.body1.awake(),this.body2.awake()},preSolve:function(t,e){},solve:function(){},postSolve:function(){},remove:function(){this.dispose()},dispose:function(){this.parent.removeJoint(this)},getPosition:function(){return[(new k).scale(this.anchorPoint1,this.scale),(new k).scale(this.anchorPoint2,this.scale)]}}),Object.assign(K.prototype,{LinearConstraint:!0,preSolve:function(t,e){this.r1x=this.r1.x,this.r1y=this.r1.y,this.r1z=this.r1.z,this.r2x=this.r2.x,this.r2y=this.r2.y,this.r2z=this.r2.z,this.m1=this.b1.inverseMass,this.m2=this.b2.inverseMass,this.ii1=this.i1.clone(),this.ii2=this.i2.clone();var i=this.ii1.elements,n=this.ii2.elements;this.ax1x=this.r1z*i[1]+-this.r1y*i[2],this.ax1y=this.r1z*i[4]+-this.r1y*i[5],this.ax1z=this.r1z*i[7]+-this.r1y*i[8],this.ay1x=-this.r1z*i[0]+this.r1x*i[2],this.ay1y=-this.r1z*i[3]+this.r1x*i[5],this.ay1z=-this.r1z*i[6]+this.r1x*i[8],this.az1x=this.r1y*i[0]+-this.r1x*i[1],this.az1y=this.r1y*i[3]+-this.r1x*i[4],this.az1z=this.r1y*i[6]+-this.r1x*i[7],this.ax2x=this.r2z*n[1]+-this.r2y*n[2],this.ax2y=this.r2z*n[4]+-this.r2y*n[5],this.ax2z=this.r2z*n[7]+-this.r2y*n[8],this.ay2x=-this.r2z*n[0]+this.r2x*n[2],this.ay2y=-this.r2z*n[3]+this.r2x*n[5],this.ay2z=-this.r2z*n[6]+this.r2x*n[8],this.az2x=this.r2y*n[0]+-this.r2x*n[1],this.az2y=this.r2y*n[3]+-this.r2x*n[4],this.az2z=this.r2y*n[6]+-this.r2x*n[7];var r=this.m1+this.m2,s=(new B).set(r,0,0,0,r,0,0,0,r).elements;s[0]+=i[4]*this.r1z*this.r1z-(i[7]+i[5])*this.r1y*this.r1z+i[8]*this.r1y*this.r1y,s[1]+=(i[6]*this.r1y+i[5]*this.r1x)*this.r1z-i[3]*this.r1z*this.r1z-i[8]*this.r1x*this.r1y,s[2]+=(i[3]*this.r1y-i[4]*this.r1x)*this.r1z-i[6]*this.r1y*this.r1y+i[7]*this.r1x*this.r1y,s[3]+=(i[2]*this.r1y+i[7]*this.r1x)*this.r1z-i[1]*this.r1z*this.r1z-i[8]*this.r1x*this.r1y,s[4]+=i[0]*this.r1z*this.r1z-(i[6]+i[2])*this.r1x*this.r1z+i[8]*this.r1x*this.r1x,s[5]+=(i[1]*this.r1x-i[0]*this.r1y)*this.r1z-i[7]*this.r1x*this.r1x+i[6]*this.r1x*this.r1y,s[6]+=(i[1]*this.r1y-i[4]*this.r1x)*this.r1z-i[2]*this.r1y*this.r1y+i[5]*this.r1x*this.r1y,s[7]+=(i[3]*this.r1x-i[0]*this.r1y)*this.r1z-i[5]*this.r1x*this.r1x+i[2]*this.r1x*this.r1y,s[8]+=i[0]*this.r1y*this.r1y-(i[3]+i[1])*this.r1x*this.r1y+i[4]*this.r1x*this.r1x,s[0]+=n[4]*this.r2z*this.r2z-(n[7]+n[5])*this.r2y*this.r2z+n[8]*this.r2y*this.r2y,s[1]+=(n[6]*this.r2y+n[5]*this.r2x)*this.r2z-n[3]*this.r2z*this.r2z-n[8]*this.r2x*this.r2y,s[2]+=(n[3]*this.r2y-n[4]*this.r2x)*this.r2z-n[6]*this.r2y*this.r2y+n[7]*this.r2x*this.r2y,s[3]+=(n[2]*this.r2y+n[7]*this.r2x)*this.r2z-n[1]*this.r2z*this.r2z-n[8]*this.r2x*this.r2y,s[4]+=n[0]*this.r2z*this.r2z-(n[6]+n[2])*this.r2x*this.r2z+n[8]*this.r2x*this.r2x,s[5]+=(n[1]*this.r2x-n[0]*this.r2y)*this.r2z-n[7]*this.r2x*this.r2x+n[6]*this.r2x*this.r2y,s[6]+=(n[1]*this.r2y-n[4]*this.r2x)*this.r2z-n[2]*this.r2y*this.r2y+n[5]*this.r2x*this.r2y,s[7]+=(n[3]*this.r2x-n[0]*this.r2y)*this.r2z-n[5]*this.r2x*this.r2x+n[2]*this.r2x*this.r2y,s[8]+=n[0]*this.r2y*this.r2y-(n[3]+n[1])*this.r2x*this.r2y+n[4]*this.r2x*this.r2x;var a=1/(s[0]*(s[4]*s[8]-s[7]*s[5])+s[3]*(s[7]*s[2]-s[1]*s[8])+s[6]*(s[1]*s[5]-s[4]*s[2]));this.dd=(new B).set(s[4]*s[8]-s[5]*s[7],s[2]*s[7]-s[1]*s[8],s[1]*s[5]-s[2]*s[4],s[5]*s[6]-s[3]*s[8],s[0]*s[8]-s[2]*s[6],s[2]*s[3]-s[0]*s[5],s[3]*s[7]-s[4]*s[6],s[1]*s[6]-s[0]*s[7],s[0]*s[4]-s[1]*s[3]).scaleEqual(a),this.velx=this.p2.x-this.p1.x,this.vely=this.p2.y-this.p1.y,this.velz=this.p2.z-this.p1.z;var o=C.sqrt(this.velx*this.velx+this.vely*this.vely+this.velz*this.velz);o>.005?(o=(.005-o)/o*e*.05,this.velx*=o,this.vely*=o,this.velz*=o):(this.velx=0,this.vely=0,this.velz=0),this.impx*=.95,this.impy*=.95,this.impz*=.95,this.l1.x+=this.impx*this.m1,this.l1.y+=this.impy*this.m1,this.l1.z+=this.impz*this.m1,this.a1.x+=this.impx*this.ax1x+this.impy*this.ay1x+this.impz*this.az1x,this.a1.y+=this.impx*this.ax1y+this.impy*this.ay1y+this.impz*this.az1y,this.a1.z+=this.impx*this.ax1z+this.impy*this.ay1z+this.impz*this.az1z,this.l2.x-=this.impx*this.m2,this.l2.y-=this.impy*this.m2,this.l2.z-=this.impz*this.m2,this.a2.x-=this.impx*this.ax2x+this.impy*this.ay2x+this.impz*this.az2x,this.a2.y-=this.impx*this.ax2y+this.impy*this.ay2y+this.impz*this.az2y,this.a2.z-=this.impx*this.ax2z+this.impy*this.ay2z+this.impz*this.az2z},solve:function(){var t=this.dd.elements,e=this.l2.x-this.l1.x+this.a2.y*this.r2z-this.a2.z*this.r2y-this.a1.y*this.r1z+this.a1.z*this.r1y-this.velx,i=this.l2.y-this.l1.y+this.a2.z*this.r2x-this.a2.x*this.r2z-this.a1.z*this.r1x+this.a1.x*this.r1z-this.vely,n=this.l2.z-this.l1.z+this.a2.x*this.r2y-this.a2.y*this.r2x-this.a1.x*this.r1y+this.a1.y*this.r1x-this.velz,r=e*t[0]+i*t[1]+n*t[2],s=e*t[3]+i*t[4]+n*t[5],a=e*t[6]+i*t[7]+n*t[8];this.impx+=r,this.impy+=s,this.impz+=a,this.l1.x+=r*this.m1,this.l1.y+=s*this.m1,this.l1.z+=a*this.m1,this.a1.x+=r*this.ax1x+s*this.ay1x+a*this.az1x,this.a1.y+=r*this.ax1y+s*this.ay1y+a*this.az1y,this.a1.z+=r*this.ax1z+s*this.ay1z+a*this.az1z,this.l2.x-=r*this.m2,this.l2.y-=s*this.m2,this.l2.z-=a*this.m2,this.a2.x-=r*this.ax2x+s*this.ay2x+a*this.az2x,this.a2.y-=r*this.ax2y+s*this.ay2y+a*this.az2y,this.a2.z-=r*this.ax2z+s*this.ay2z+a*this.az2z}}),Object.assign($.prototype,{Rotational3Constraint:!0,preSolve:function(t,e){this.ax1=this.limitMotor1.axis.x,this.ay1=this.limitMotor1.axis.y,this.az1=this.limitMotor1.axis.z,this.ax2=this.limitMotor2.axis.x,this.ay2=this.limitMotor2.axis.y,this.az2=this.limitMotor2.axis.z,this.ax3=this.limitMotor3.axis.x,this.ay3=this.limitMotor3.axis.y,this.az3=this.limitMotor3.axis.z,this.lowerLimit1=this.limitMotor1.lowerLimit,this.upperLimit1=this.limitMotor1.upperLimit,this.motorSpeed1=this.limitMotor1.motorSpeed,this.maxMotorForce1=this.limitMotor1.maxMotorForce,this.enableMotor1=this.maxMotorForce1>0,this.lowerLimit2=this.limitMotor2.lowerLimit,this.upperLimit2=this.limitMotor2.upperLimit,this.motorSpeed2=this.limitMotor2.motorSpeed,this.maxMotorForce2=this.limitMotor2.maxMotorForce,this.enableMotor2=this.maxMotorForce2>0,this.lowerLimit3=this.limitMotor3.lowerLimit,this.upperLimit3=this.limitMotor3.upperLimit,this.motorSpeed3=this.limitMotor3.motorSpeed,this.maxMotorForce3=this.limitMotor3.maxMotorForce,this.enableMotor3=this.maxMotorForce3>0;var i=this.i1.elements,n=this.i2.elements;this.i1e00=i[0],this.i1e01=i[1],this.i1e02=i[2],this.i1e10=i[3],this.i1e11=i[4],this.i1e12=i[5],this.i1e20=i[6],this.i1e21=i[7],this.i1e22=i[8],this.i2e00=n[0],this.i2e01=n[1],this.i2e02=n[2],this.i2e10=n[3],this.i2e11=n[4],this.i2e12=n[5],this.i2e20=n[6],this.i2e21=n[7],this.i2e22=n[8];var r=this.limitMotor1.frequency,s=this.limitMotor2.frequency,a=this.limitMotor3.frequency,o=r>0,h=s>0,l=a>0,c=this.lowerLimit1<=this.upperLimit1,u=this.lowerLimit2<=this.upperLimit2,p=this.lowerLimit3<=this.upperLimit3,d=this.limitMotor1.angle;c?(this.lowerLimit1==this.upperLimit1?(0!=this.limitState1&&(this.limitState1=0,this.limitImpulse1=0),this.limitVelocity1=this.lowerLimit1-d):d<this.lowerLimit1?(-1!=this.limitState1&&(this.limitState1=-1,this.limitImpulse1=0),this.limitVelocity1=this.lowerLimit1-d):d>this.upperLimit1?(1!=this.limitState1&&(this.limitState1=1,this.limitImpulse1=0),this.limitVelocity1=this.upperLimit1-d):(this.limitState1=2,this.limitImpulse1=0,this.limitVelocity1=0),o||(this.limitVelocity1>.02?this.limitVelocity1-=.02:this.limitVelocity1<-.02?this.limitVelocity1+=.02:this.limitVelocity1=0)):(this.limitState1=2,this.limitImpulse1=0);var m=this.limitMotor2.angle;u?(this.lowerLimit2==this.upperLimit2?(0!=this.limitState2&&(this.limitState2=0,this.limitImpulse2=0),this.limitVelocity2=this.lowerLimit2-m):m<this.lowerLimit2?(-1!=this.limitState2&&(this.limitState2=-1,this.limitImpulse2=0),this.limitVelocity2=this.lowerLimit2-m):m>this.upperLimit2?(1!=this.limitState2&&(this.limitState2=1,this.limitImpulse2=0),this.limitVelocity2=this.upperLimit2-m):(this.limitState2=2,this.limitImpulse2=0,this.limitVelocity2=0),h||(this.limitVelocity2>.02?this.limitVelocity2-=.02:this.limitVelocity2<-.02?this.limitVelocity2+=.02:this.limitVelocity2=0)):(this.limitState2=2,this.limitImpulse2=0);var f=this.limitMotor3.angle;if(p?(this.lowerLimit3==this.upperLimit3?(0!=this.limitState3&&(this.limitState3=0,this.limitImpulse3=0),this.limitVelocity3=this.lowerLimit3-f):f<this.lowerLimit3?(-1!=this.limitState3&&(this.limitState3=-1,this.limitImpulse3=0),this.limitVelocity3=this.lowerLimit3-f):f>this.upperLimit3?(1!=this.limitState3&&(this.limitState3=1,this.limitImpulse3=0),this.limitVelocity3=this.upperLimit3-f):(this.limitState3=2,this.limitImpulse3=0,this.limitVelocity3=0),l||(this.limitVelocity3>.02?this.limitVelocity3-=.02:this.limitVelocity3<-.02?this.limitVelocity3+=.02:this.limitVelocity3=0)):(this.limitState3=2,this.limitImpulse3=0),this.enableMotor1&&(0!=this.limitState1||o)?this.maxMotorImpulse1=this.maxMotorForce1*t:(this.motorImpulse1=0,this.maxMotorImpulse1=0),this.enableMotor2&&(0!=this.limitState2||h)?this.maxMotorImpulse2=this.maxMotorForce2*t:(this.motorImpulse2=0,this.maxMotorImpulse2=0),this.enableMotor3&&(0!=this.limitState3||l)?this.maxMotorImpulse3=this.maxMotorForce3*t:(this.motorImpulse3=0,this.maxMotorImpulse3=0),this.a1x1=this.ax1*this.i1e00+this.ay1*this.i1e01+this.az1*this.i1e02,this.a1y1=this.ax1*this.i1e10+this.ay1*this.i1e11+this.az1*this.i1e12,this.a1z1=this.ax1*this.i1e20+this.ay1*this.i1e21+this.az1*this.i1e22,this.a2x1=this.ax1*this.i2e00+this.ay1*this.i2e01+this.az1*this.i2e02,this.a2y1=this.ax1*this.i2e10+this.ay1*this.i2e11+this.az1*this.i2e12,this.a2z1=this.ax1*this.i2e20+this.ay1*this.i2e21+this.az1*this.i2e22,this.a1x2=this.ax2*this.i1e00+this.ay2*this.i1e01+this.az2*this.i1e02,this.a1y2=this.ax2*this.i1e10+this.ay2*this.i1e11+this.az2*this.i1e12,this.a1z2=this.ax2*this.i1e20+this.ay2*this.i1e21+this.az2*this.i1e22,this.a2x2=this.ax2*this.i2e00+this.ay2*this.i2e01+this.az2*this.i2e02,this.a2y2=this.ax2*this.i2e10+this.ay2*this.i2e11+this.az2*this.i2e12,this.a2z2=this.ax2*this.i2e20+this.ay2*this.i2e21+this.az2*this.i2e22,this.a1x3=this.ax3*this.i1e00+this.ay3*this.i1e01+this.az3*this.i1e02,this.a1y3=this.ax3*this.i1e10+this.ay3*this.i1e11+this.az3*this.i1e12,this.a1z3=this.ax3*this.i1e20+this.ay3*this.i1e21+this.az3*this.i1e22,this.a2x3=this.ax3*this.i2e00+this.ay3*this.i2e01+this.az3*this.i2e02,this.a2y3=this.ax3*this.i2e10+this.ay3*this.i2e11+this.az3*this.i2e12,this.a2z3=this.ax3*this.i2e20+this.ay3*this.i2e21+this.az3*this.i2e22,this.k00=this.ax1*(this.a1x1+this.a2x1)+this.ay1*(this.a1y1+this.a2y1)+this.az1*(this.a1z1+this.a2z1),this.k01=this.ax1*(this.a1x2+this.a2x2)+this.ay1*(this.a1y2+this.a2y2)+this.az1*(this.a1z2+this.a2z2),this.k02=this.ax1*(this.a1x3+this.a2x3)+this.ay1*(this.a1y3+this.a2y3)+this.az1*(this.a1z3+this.a2z3),this.k10=this.ax2*(this.a1x1+this.a2x1)+this.ay2*(this.a1y1+this.a2y1)+this.az2*(this.a1z1+this.a2z1),this.k11=this.ax2*(this.a1x2+this.a2x2)+this.ay2*(this.a1y2+this.a2y2)+this.az2*(this.a1z2+this.a2z2),this.k12=this.ax2*(this.a1x3+this.a2x3)+this.ay2*(this.a1y3+this.a2y3)+this.az2*(this.a1z3+this.a2z3),this.k20=this.ax3*(this.a1x1+this.a2x1)+this.ay3*(this.a1y1+this.a2y1)+this.az3*(this.a1z1+this.a2z1),this.k21=this.ax3*(this.a1x2+this.a2x2)+this.ay3*(this.a1y2+this.a2y2)+this.az3*(this.a1z2+this.a2z2),this.k22=this.ax3*(this.a1x3+this.a2x3)+this.ay3*(this.a1y3+this.a2y3)+this.az3*(this.a1z3+this.a2z3),this.kv00=this.k00,this.kv11=this.k11,this.kv22=this.k22,this.dv00=1/this.kv00,this.dv11=1/this.kv11,this.dv22=1/this.kv22,o&&2!=this.limitState1){var v=6.2831853*r,g=v*v*t,y=e/(g+2*this.limitMotor1.dampingRatio*v);this.cfm1=this.kv00*y,this.limitVelocity1*=g*y}else this.cfm1=0,this.limitVelocity1*=.05*e;h&&2!=this.limitState2?(y=e/((g=(v=6.2831853*s)*v*t)+2*this.limitMotor2.dampingRatio*v),this.cfm2=this.kv11*y,this.limitVelocity2*=g*y):(this.cfm2=0,this.limitVelocity2*=.05*e),l&&2!=this.limitState3?(y=e/((g=(v=6.2831853*a)*v*t)+2*this.limitMotor3.dampingRatio*v),this.cfm3=this.kv22*y,this.limitVelocity3*=g*y):(this.cfm3=0,this.limitVelocity3*=.05*e),this.k00+=this.cfm1,this.k11+=this.cfm2,this.k22+=this.cfm3;var x=1/(this.k00*(this.k11*this.k22-this.k21*this.k12)+this.k10*(this.k21*this.k02-this.k01*this.k22)+this.k20*(this.k01*this.k12-this.k11*this.k02));this.d00=(this.k11*this.k22-this.k12*this.k21)*x,this.d01=(this.k02*this.k21-this.k01*this.k22)*x,this.d02=(this.k01*this.k12-this.k02*this.k11)*x,this.d10=(this.k12*this.k20-this.k10*this.k22)*x,this.d11=(this.k00*this.k22-this.k02*this.k20)*x,this.d12=(this.k02*this.k10-this.k00*this.k12)*x,this.d20=(this.k10*this.k21-this.k11*this.k20)*x,this.d21=(this.k01*this.k20-this.k00*this.k21)*x,this.d22=(this.k00*this.k11-this.k01*this.k10)*x,this.limitImpulse1*=.95,this.motorImpulse1*=.95,this.limitImpulse2*=.95,this.motorImpulse2*=.95,this.limitImpulse3*=.95,this.motorImpulse3*=.95;var b=this.limitImpulse1+this.motorImpulse1,w=this.limitImpulse2+this.motorImpulse2,M=this.limitImpulse3+this.motorImpulse3;this.a1.x+=b*this.a1x1+w*this.a1x2+M*this.a1x3,this.a1.y+=b*this.a1y1+w*this.a1y2+M*this.a1y3,this.a1.z+=b*this.a1z1+w*this.a1z2+M*this.a1z3,this.a2.x-=b*this.a2x1+w*this.a2x2+M*this.a2x3,this.a2.y-=b*this.a2y1+w*this.a2y2+M*this.a2y3,this.a2.z-=b*this.a2z1+w*this.a2z2+M*this.a2z3},solve_:function(){var t=this.a2.x-this.a1.x,e=this.a2.y-this.a1.y,i=this.a2.z-this.a1.z;this.limitVelocity3=30;var n=t*this.ax1+e*this.ay1+i*this.az1-this.limitVelocity1,r=t*this.ax2+e*this.ay2+i*this.az2-this.limitVelocity2,s=t*this.ax3+e*this.ay3+i*this.az3-this.limitVelocity3,a=n*this.d00+r*this.d01+s*this.d02,o=n*this.d10+r*this.d11+s*this.d12,h=n*this.d20+r*this.d21+s*this.d22;this.limitImpulse1+=a,this.limitImpulse2+=o,this.limitImpulse3+=h,this.a1.x+=a*this.a1x1+o*this.a1x2+h*this.a1x3,this.a1.y+=a*this.a1y1+o*this.a1y2+h*this.a1y3,this.a1.z+=a*this.a1z1+o*this.a1z2+h*this.a1z3,this.a2.x-=a*this.a2x1+o*this.a2x2+h*this.a2x3,this.a2.y-=a*this.a2y1+o*this.a2y2+h*this.a2y3,this.a2.z-=a*this.a2z1+o*this.a2z2+h*this.a2z3},solve:function(){var t=this.a2.x-this.a1.x,e=this.a2.y-this.a1.y,i=this.a2.z-this.a1.z,n=t*this.ax1+e*this.ay1+i*this.az1,r=t*this.ax2+e*this.ay2+i*this.az2,s=t*this.ax3+e*this.ay3+i*this.az3,a=this.motorImpulse1,o=this.motorImpulse2,h=this.motorImpulse3,l=0,c=0,u=0;this.enableMotor1&&(l=(n-this.motorSpeed1)*this.dv00,this.motorImpulse1+=l,this.motorImpulse1>this.maxMotorImpulse1?this.motorImpulse1=this.maxMotorImpulse1:this.motorImpulse1<-this.maxMotorImpulse1&&(this.motorImpulse1=-this.maxMotorImpulse1),l=this.motorImpulse1-a),this.enableMotor2&&(c=(r-this.motorSpeed2)*this.dv11,this.motorImpulse2+=c,this.motorImpulse2>this.maxMotorImpulse2?this.motorImpulse2=this.maxMotorImpulse2:this.motorImpulse2<-this.maxMotorImpulse2&&(this.motorImpulse2=-this.maxMotorImpulse2),c=this.motorImpulse2-o),this.enableMotor3&&(u=(s-this.motorSpeed3)*this.dv22,this.motorImpulse3+=u,this.motorImpulse3>this.maxMotorImpulse3?this.motorImpulse3=this.maxMotorImpulse3:this.motorImpulse3<-this.maxMotorImpulse3&&(this.motorImpulse3=-this.maxMotorImpulse3),u=this.motorImpulse3-h),n+=l*this.kv00+c*this.k01+u*this.k02,r+=l*this.k10+c*this.kv11+u*this.k12,s+=l*this.k20+c*this.k21+u*this.kv22,n-=this.limitVelocity1+this.limitImpulse1*this.cfm1,r-=this.limitVelocity2+this.limitImpulse2*this.cfm2,s-=this.limitVelocity3+this.limitImpulse3*this.cfm3;var p=this.limitImpulse1,d=this.limitImpulse2,m=this.limitImpulse3,f=n*this.d00+r*this.d01+s*this.d02,v=n*this.d10+r*this.d11+s*this.d12,g=n*this.d20+r*this.d21+s*this.d22;this.limitImpulse1+=f,this.limitImpulse2+=v,this.limitImpulse3+=g;var y,x=0;switch((2==this.limitState1||this.limitImpulse1*this.limitState1<0)&&(r+=(f=-p)*this.k10,s+=f*this.k20,x|=1),(2==this.limitState2||this.limitImpulse2*this.limitState2<0)&&(n+=(v=-d)*this.k01,s+=v*this.k21,x|=2),(2==this.limitState3||this.limitImpulse3*this.limitState3<0)&&(n+=(g=-m)*this.k02,r+=g*this.k12,x|=4),x){case 1:y=1/(this.k11*this.k22-this.k12*this.k21),v=(this.k22*r+-this.k12*s)*y,g=(-this.k21*r+this.k11*s)*y;break;case 2:y=1/(this.k00*this.k22-this.k02*this.k20),f=(this.k22*n+-this.k02*s)*y,g=(-this.k20*n+this.k00*s)*y;break;case 3:g=s/this.k22;break;case 4:y=1/(this.k00*this.k11-this.k01*this.k10),f=(this.k11*n+-this.k01*r)*y,v=(-this.k10*n+this.k00*r)*y;break;case 5:v=r/this.k11;break;case 6:f=n/this.k00}this.limitImpulse1=f+p,this.limitImpulse2=v+d,this.limitImpulse3=g+m;var b=l+f,w=c+v,M=u+g;this.a1.x+=b*this.a1x1+w*this.a1x2+M*this.a1x3,this.a1.y+=b*this.a1y1+w*this.a1y2+M*this.a1y3,this.a1.z+=b*this.a1z1+w*this.a1z2+M*this.a1z3,this.a2.x-=b*this.a2x1+w*this.a2x2+M*this.a2x3,this.a2.y-=b*this.a2y1+w*this.a2y2+M*this.a2y3,this.a2.z-=b*this.a2z1+w*this.a2z2+M*this.a2z3,t=this.a2.x-this.a1.x,e=this.a2.y-this.a1.y,i=this.a2.z-this.a1.z,r=t*this.ax2+e*this.ay2+i*this.az2}}),tt.prototype=Object.assign(Object.create(Q.prototype),{constructor:tt,preSolve:function(t,e){this.updateAnchorPoints(),this.ax1.copy(this.localAxis1).applyMatrix3(this.body1.rotation,!0),this.ax2.copy(this.localAxis2).applyMatrix3(this.body2.rotation,!0),this.an1.copy(this.localAngle1).applyMatrix3(this.body1.rotation,!0),this.an2.copy(this.localAngle2).applyMatrix3(this.body2.rotation,!0),this.nor.set(this.ax1.x*this.body2.inverseMass+this.ax2.x*this.body1.inverseMass,this.ax1.y*this.body2.inverseMass+this.ax2.y*this.body1.inverseMass,this.ax1.z*this.body2.inverseMass+this.ax2.z*this.body1.inverseMass).normalize(),this.tan.tangent(this.nor).normalize(),this.bin.crossVectors(this.nor,this.tan);var i=C.acosClamp(C.dotVectors(this.an1,this.an2));this.tmp.crossVectors(this.an1,this.an2),C.dotVectors(this.nor,this.tmp)<0?this.limitMotor.angle=-i:this.limitMotor.angle=i,this.tmp.crossVectors(this.ax1,this.ax2),this.r3.limitMotor2.angle=C.dotVectors(this.tan,this.tmp),this.r3.limitMotor3.angle=C.dotVectors(this.bin,this.tmp),this.r3.preSolve(t,e),this.lc.preSolve(t,e)},solve:function(){this.r3.solve(),this.lc.solve()},postSolve:function(){}}),et.prototype=Object.assign(Object.create(Q.prototype),{constructor:et,preSolve:function(t,e){this.updateAnchorPoints(),this.lc.preSolve(t,e)},solve:function(){this.lc.solve()},postSolve:function(){}}),Object.assign(it.prototype,{TranslationalConstraint:!0,preSolve:function(t,e){this.ax=this.limitMotor.axis.x,this.ay=this.limitMotor.axis.y,this.az=this.limitMotor.axis.z,this.lowerLimit=this.limitMotor.lowerLimit,this.upperLimit=this.limitMotor.upperLimit,this.motorSpeed=this.limitMotor.motorSpeed,this.maxMotorForce=this.limitMotor.maxMotorForce,this.enableMotor=this.maxMotorForce>0,this.m1=this.b1.inverseMass,this.m2=this.b2.inverseMass;var i=this.i1.elements,n=this.i2.elements;this.i1e00=i[0],this.i1e01=i[1],this.i1e02=i[2],this.i1e10=i[3],this.i1e11=i[4],this.i1e12=i[5],this.i1e20=i[6],this.i1e21=i[7],this.i1e22=i[8],this.i2e00=n[0],this.i2e01=n[1],this.i2e02=n[2],this.i2e10=n[3],this.i2e11=n[4],this.i2e12=n[5],this.i2e20=n[6],this.i2e21=n[7],this.i2e22=n[8];var r=this.p2.x-this.p1.x,s=this.p2.y-this.p1.y,a=this.p2.z-this.p1.z,o=r*this.ax+s*this.ay+a*this.az,h=this.limitMotor.frequency,l=h>0;(l&&o>20||o<-20)&&(l=!1),this.lowerLimit<=this.upperLimit?(this.lowerLimit==this.upperLimit?(0!=this.limitState&&(this.limitState=0,this.limitImpulse=0),this.limitVelocity=this.lowerLimit-o,l||(o=this.lowerLimit)):o<this.lowerLimit?(-1!=this.limitState&&(this.limitState=-1,this.limitImpulse=0),this.limitVelocity=this.lowerLimit-o,l||(o=this.lowerLimit)):o>this.upperLimit?(1!=this.limitState&&(this.limitState=1,this.limitImpulse=0),this.limitVelocity=this.upperLimit-o,l||(o=this.upperLimit)):(this.limitState=2,this.limitImpulse=0,this.limitVelocity=0),l||(this.limitVelocity>.005?this.limitVelocity-=.005:this.limitVelocity<-.005?this.limitVelocity+=.005:this.limitVelocity=0)):(this.limitState=2,this.limitImpulse=0),this.enableMotor&&(0!=this.limitState||l)?this.maxMotorImpulse=this.maxMotorForce*t:(this.motorImpulse=0,this.maxMotorImpulse=0);var c=o*this.ax,u=o*this.ay,p=o*this.az,d=this.m1/(this.m1+this.m2),m=1-d;if(this.r1x=this.r1.x+c*d,this.r1y=this.r1.y+u*d,this.r1z=this.r1.z+p*d,this.r2x=this.r2.x-c*m,this.r2y=this.r2.y-u*m,this.r2z=this.r2.z-p*m,this.t1x=this.r1y*this.az-this.r1z*this.ay,this.t1y=this.r1z*this.ax-this.r1x*this.az,this.t1z=this.r1x*this.ay-this.r1y*this.ax,this.t2x=this.r2y*this.az-this.r2z*this.ay,this.t2y=this.r2z*this.ax-this.r2x*this.az,this.t2z=this.r2x*this.ay-this.r2y*this.ax,this.l1x=this.ax*this.m1,this.l1y=this.ay*this.m1,this.l1z=this.az*this.m1,this.l2x=this.ax*this.m2,this.l2y=this.ay*this.m2,this.l2z=this.az*this.m2,this.a1x=this.t1x*this.i1e00+this.t1y*this.i1e01+this.t1z*this.i1e02,this.a1y=this.t1x*this.i1e10+this.t1y*this.i1e11+this.t1z*this.i1e12,this.a1z=this.t1x*this.i1e20+this.t1y*this.i1e21+this.t1z*this.i1e22,this.a2x=this.t2x*this.i2e00+this.t2y*this.i2e01+this.t2z*this.i2e02,this.a2y=this.t2x*this.i2e10+this.t2y*this.i2e11+this.t2z*this.i2e12,this.a2z=this.t2x*this.i2e20+this.t2y*this.i2e21+this.t2z*this.i2e22,this.motorDenom=this.m1+this.m2+this.ax*(this.a1y*this.r1z-this.a1z*this.r1y+this.a2y*this.r2z-this.a2z*this.r2y)+this.ay*(this.a1z*this.r1x-this.a1x*this.r1z+this.a2z*this.r2x-this.a2x*this.r2z)+this.az*(this.a1x*this.r1y-this.a1y*this.r1x+this.a2x*this.r2y-this.a2y*this.r2x),this.invMotorDenom=1/this.motorDenom,l&&2!=this.limitState){var f=6.2831853*h,v=f*f*t,g=e/(v+2*this.limitMotor.dampingRatio*f);this.cfm=this.motorDenom*g,this.limitVelocity*=v*g}else this.cfm=0,this.limitVelocity*=.05*e;this.invDenom=1/(this.motorDenom+this.cfm);var y=this.limitImpulse+this.motorImpulse;this.l1.x+=y*this.l1x,this.l1.y+=y*this.l1y,this.l1.z+=y*this.l1z,this.a1.x+=y*this.a1x,this.a1.y+=y*this.a1y,this.a1.z+=y*this.a1z,this.l2.x-=y*this.l2x,this.l2.y-=y*this.l2y,this.l2.z-=y*this.l2z,this.a2.x-=y*this.a2x,this.a2.y-=y*this.a2y,this.a2.z-=y*this.a2z},solve:function(){var t,e,i=this.ax*(this.l2.x-this.l1.x)+this.ay*(this.l2.y-this.l1.y)+this.az*(this.l2.z-this.l1.z)+this.t2x*this.a2.x-this.t1x*this.a1.x+this.t2y*this.a2.y-this.t1y*this.a1.y+this.t2z*this.a2.z-this.t1z*this.a1.z;if(this.enableMotor){t=(i-this.motorSpeed)*this.invMotorDenom;var n=this.motorImpulse;this.motorImpulse+=t,this.motorImpulse>this.maxMotorImpulse?this.motorImpulse=this.maxMotorImpulse:this.motorImpulse<-this.maxMotorImpulse&&(this.motorImpulse=-this.maxMotorImpulse),i-=(t=this.motorImpulse-n)*this.motorDenom}else t=0;if(2!=this.limitState){e=(i-this.limitVelocity-this.limitImpulse*this.cfm)*this.invDenom;var r=this.limitImpulse;this.limitImpulse+=e,this.limitImpulse*this.limitState<0&&(this.limitImpulse=0),e=this.limitImpulse-r}else e=0;var s=e+t;this.l1.x+=s*this.l1x,this.l1.y+=s*this.l1y,this.l1.z+=s*this.l1z,this.a1.x+=s*this.a1x,this.a1.y+=s*this.a1y,this.a1.z+=s*this.a1z,this.l2.x-=s*this.l2x,this.l2.y-=s*this.l2y,this.l2.z-=s*this.l2z,this.a2.x-=s*this.a2x,this.a2.y-=s*this.a2y,this.a2.z-=s*this.a2z}}),nt.prototype=Object.assign(Object.create(Q.prototype),{constructor:nt,preSolve:function(t,e){this.updateAnchorPoints(),this.nor.sub(this.anchorPoint2,this.anchorPoint1).normalize(),this.t.preSolve(t,e)},solve:function(){this.t.solve()},postSolve:function(){}}),Object.assign(rt.prototype,{AngularConstraint:!0,preSolve:function(t,e){var i,n,r;this.ii1=this.i1.clone(),this.ii2=this.i2.clone(),i=1/((r=(new B).add(this.ii1,this.ii2).elements)[0]*(r[4]*r[8]-r[7]*r[5])+r[3]*(r[7]*r[2]-r[1]*r[8])+r[6]*(r[1]*r[5]-r[4]*r[2])),this.dd=(new B).set(r[4]*r[8]-r[5]*r[7],r[2]*r[7]-r[1]*r[8],r[1]*r[5]-r[2]*r[4],r[5]*r[6]-r[3]*r[8],r[0]*r[8]-r[2]*r[6],r[2]*r[3]-r[0]*r[5],r[3]*r[7]-r[4]*r[6],r[1]*r[6]-r[0]*r[7],r[0]*r[4]-r[1]*r[3]).multiplyScalar(i),this.relativeOrientation.invert(this.b1.orientation).multiply(this.targetOrientation).multiply(this.b2.orientation),i=2*this.relativeOrientation.w,this.vel.copy(this.relativeOrientation).multiplyScalar(i),(n=this.vel.length())>.02?(n=(.02-n)/n*e*.05,this.vel.multiplyScalar(n)):this.vel.set(0,0,0),this.rn1.copy(this.imp).applyMatrix3(this.ii1,!0),this.rn2.copy(this.imp).applyMatrix3(this.ii2,!0),this.a1.add(this.rn1),this.a2.sub(this.rn2)},solve:function(){var t=this.a2.clone().sub(this.a1).sub(this.vel);this.rn0.copy(t).applyMatrix3(this.dd,!0),this.rn1.copy(this.rn0).applyMatrix3(this.ii1,!0),this.rn2.copy(this.rn0).applyMatrix3(this.ii2,!0),this.imp.add(this.rn0),this.a1.add(this.rn1),this.a2.sub(this.rn2)}}),Object.assign(st.prototype,{Translational3Constraint:!0,preSolve:function(t,e){this.ax1=this.limitMotor1.axis.x,this.ay1=this.limitMotor1.axis.y,this.az1=this.limitMotor1.axis.z,this.ax2=this.limitMotor2.axis.x,this.ay2=this.limitMotor2.axis.y,this.az2=this.limitMotor2.axis.z,this.ax3=this.limitMotor3.axis.x,this.ay3=this.limitMotor3.axis.y,this.az3=this.limitMotor3.axis.z,this.lowerLimit1=this.limitMotor1.lowerLimit,this.upperLimit1=this.limitMotor1.upperLimit,this.motorSpeed1=this.limitMotor1.motorSpeed,this.maxMotorForce1=this.limitMotor1.maxMotorForce,this.enableMotor1=this.maxMotorForce1>0,this.lowerLimit2=this.limitMotor2.lowerLimit,this.upperLimit2=this.limitMotor2.upperLimit,this.motorSpeed2=this.limitMotor2.motorSpeed,this.maxMotorForce2=this.limitMotor2.maxMotorForce,this.enableMotor2=this.maxMotorForce2>0,this.lowerLimit3=this.limitMotor3.lowerLimit,this.upperLimit3=this.limitMotor3.upperLimit,this.motorSpeed3=this.limitMotor3.motorSpeed,this.maxMotorForce3=this.limitMotor3.maxMotorForce,this.enableMotor3=this.maxMotorForce3>0,this.m1=this.b1.inverseMass,this.m2=this.b2.inverseMass;var i=this.i1.elements,n=this.i2.elements;this.i1e00=i[0],this.i1e01=i[1],this.i1e02=i[2],this.i1e10=i[3],this.i1e11=i[4],this.i1e12=i[5],this.i1e20=i[6],this.i1e21=i[7],this.i1e22=i[8],this.i2e00=n[0],this.i2e01=n[1],this.i2e02=n[2],this.i2e10=n[3],this.i2e11=n[4],this.i2e12=n[5],this.i2e20=n[6],this.i2e21=n[7],this.i2e22=n[8];var r=this.p2.x-this.p1.x,s=this.p2.y-this.p1.y,a=this.p2.z-this.p1.z,o=r*this.ax1+s*this.ay1+a*this.az1,h=r*this.ax2+s*this.ay2+a*this.az2,l=r*this.ax3+s*this.ay3+a*this.az3,c=this.limitMotor1.frequency,u=this.limitMotor2.frequency,p=this.limitMotor3.frequency,d=c>0,m=u>0,f=p>0,v=this.lowerLimit1<=this.upperLimit1,g=this.lowerLimit2<=this.upperLimit2,y=this.lowerLimit3<=this.upperLimit3;(d&&o>20||o<-20)&&(d=!1),(m&&h>20||h<-20)&&(m=!1),(f&&l>20||l<-20)&&(f=!1),v?(this.lowerLimit1==this.upperLimit1?(0!=this.limitState1&&(this.limitState1=0,this.limitImpulse1=0),this.limitVelocity1=this.lowerLimit1-o,d||(o=this.lowerLimit1)):o<this.lowerLimit1?(-1!=this.limitState1&&(this.limitState1=-1,this.limitImpulse1=0),this.limitVelocity1=this.lowerLimit1-o,d||(o=this.lowerLimit1)):o>this.upperLimit1?(1!=this.limitState1&&(this.limitState1=1,this.limitImpulse1=0),this.limitVelocity1=this.upperLimit1-o,d||(o=this.upperLimit1)):(this.limitState1=2,this.limitImpulse1=0,this.limitVelocity1=0),d||(this.limitVelocity1>.005?this.limitVelocity1-=.005:this.limitVelocity1<-.005?this.limitVelocity1+=.005:this.limitVelocity1=0)):(this.limitState1=2,this.limitImpulse1=0),g?(this.lowerLimit2==this.upperLimit2?(0!=this.limitState2&&(this.limitState2=0,this.limitImpulse2=0),this.limitVelocity2=this.lowerLimit2-h,m||(h=this.lowerLimit2)):h<this.lowerLimit2?(-1!=this.limitState2&&(this.limitState2=-1,this.limitImpulse2=0),this.limitVelocity2=this.lowerLimit2-h,m||(h=this.lowerLimit2)):h>this.upperLimit2?(1!=this.limitState2&&(this.limitState2=1,this.limitImpulse2=0),this.limitVelocity2=this.upperLimit2-h,m||(h=this.upperLimit2)):(this.limitState2=2,this.limitImpulse2=0,this.limitVelocity2=0),m||(this.limitVelocity2>.005?this.limitVelocity2-=.005:this.limitVelocity2<-.005?this.limitVelocity2+=.005:this.limitVelocity2=0)):(this.limitState2=2,this.limitImpulse2=0),y?(this.lowerLimit3==this.upperLimit3?(0!=this.limitState3&&(this.limitState3=0,this.limitImpulse3=0),this.limitVelocity3=this.lowerLimit3-l,f||(l=this.lowerLimit3)):l<this.lowerLimit3?(-1!=this.limitState3&&(this.limitState3=-1,this.limitImpulse3=0),this.limitVelocity3=this.lowerLimit3-l,f||(l=this.lowerLimit3)):l>this.upperLimit3?(1!=this.limitState3&&(this.limitState3=1,this.limitImpulse3=0),this.limitVelocity3=this.upperLimit3-l,f||(l=this.upperLimit3)):(this.limitState3=2,this.limitImpulse3=0,this.limitVelocity3=0),f||(this.limitVelocity3>.005?this.limitVelocity3-=.005:this.limitVelocity3<-.005?this.limitVelocity3+=.005:this.limitVelocity3=0)):(this.limitState3=2,this.limitImpulse3=0),this.enableMotor1&&(0!=this.limitState1||d)?this.maxMotorImpulse1=this.maxMotorForce1*t:(this.motorImpulse1=0,this.maxMotorImpulse1=0),this.enableMotor2&&(0!=this.limitState2||m)?this.maxMotorImpulse2=this.maxMotorForce2*t:(this.motorImpulse2=0,this.maxMotorImpulse2=0),this.enableMotor3&&(0!=this.limitState3||f)?this.maxMotorImpulse3=this.maxMotorForce3*t:(this.motorImpulse3=0,this.maxMotorImpulse3=0);var x=o*this.ax1+h*this.ax2+l*this.ax2,b=o*this.ay1+h*this.ay2+l*this.ay2,w=o*this.az1+h*this.az2+l*this.az2,M=this.m2/(this.m1+this.m2);this.weight>=0&&(M=this.weight);var _=1-M;this.r1x=this.r1.x+x*M,this.r1y=this.r1.y+b*M,this.r1z=this.r1.z+w*M,this.r2x=this.r2.x-x*_,this.r2y=this.r2.y-b*_,this.r2z=this.r2.z-w*_,this.t1x1=this.r1y*this.az1-this.r1z*this.ay1,this.t1y1=this.r1z*this.ax1-this.r1x*this.az1,this.t1z1=this.r1x*this.ay1-this.r1y*this.ax1,this.t2x1=this.r2y*this.az1-this.r2z*this.ay1,this.t2y1=this.r2z*this.ax1-this.r2x*this.az1,this.t2z1=this.r2x*this.ay1-this.r2y*this.ax1,this.l1x1=this.ax1*this.m1,this.l1y1=this.ay1*this.m1,this.l1z1=this.az1*this.m1,this.l2x1=this.ax1*this.m2,this.l2y1=this.ay1*this.m2,this.l2z1=this.az1*this.m2,this.a1x1=this.t1x1*this.i1e00+this.t1y1*this.i1e01+this.t1z1*this.i1e02,this.a1y1=this.t1x1*this.i1e10+this.t1y1*this.i1e11+this.t1z1*this.i1e12,this.a1z1=this.t1x1*this.i1e20+this.t1y1*this.i1e21+this.t1z1*this.i1e22,this.a2x1=this.t2x1*this.i2e00+this.t2y1*this.i2e01+this.t2z1*this.i2e02,this.a2y1=this.t2x1*this.i2e10+this.t2y1*this.i2e11+this.t2z1*this.i2e12,this.a2z1=this.t2x1*this.i2e20+this.t2y1*this.i2e21+this.t2z1*this.i2e22,this.t1x2=this.r1y*this.az2-this.r1z*this.ay2,this.t1y2=this.r1z*this.ax2-this.r1x*this.az2,this.t1z2=this.r1x*this.ay2-this.r1y*this.ax2,this.t2x2=this.r2y*this.az2-this.r2z*this.ay2,this.t2y2=this.r2z*this.ax2-this.r2x*this.az2,this.t2z2=this.r2x*this.ay2-this.r2y*this.ax2,this.l1x2=this.ax2*this.m1,this.l1y2=this.ay2*this.m1,this.l1z2=this.az2*this.m1,this.l2x2=this.ax2*this.m2,this.l2y2=this.ay2*this.m2,this.l2z2=this.az2*this.m2,this.a1x2=this.t1x2*this.i1e00+this.t1y2*this.i1e01+this.t1z2*this.i1e02,this.a1y2=this.t1x2*this.i1e10+this.t1y2*this.i1e11+this.t1z2*this.i1e12,this.a1z2=this.t1x2*this.i1e20+this.t1y2*this.i1e21+this.t1z2*this.i1e22,this.a2x2=this.t2x2*this.i2e00+this.t2y2*this.i2e01+this.t2z2*this.i2e02,this.a2y2=this.t2x2*this.i2e10+this.t2y2*this.i2e11+this.t2z2*this.i2e12,this.a2z2=this.t2x2*this.i2e20+this.t2y2*this.i2e21+this.t2z2*this.i2e22,this.t1x3=this.r1y*this.az3-this.r1z*this.ay3,this.t1y3=this.r1z*this.ax3-this.r1x*this.az3,this.t1z3=this.r1x*this.ay3-this.r1y*this.ax3,this.t2x3=this.r2y*this.az3-this.r2z*this.ay3,this.t2y3=this.r2z*this.ax3-this.r2x*this.az3,this.t2z3=this.r2x*this.ay3-this.r2y*this.ax3,this.l1x3=this.ax3*this.m1,this.l1y3=this.ay3*this.m1,this.l1z3=this.az3*this.m1,this.l2x3=this.ax3*this.m2,this.l2y3=this.ay3*this.m2,this.l2z3=this.az3*this.m2,this.a1x3=this.t1x3*this.i1e00+this.t1y3*this.i1e01+this.t1z3*this.i1e02,this.a1y3=this.t1x3*this.i1e10+this.t1y3*this.i1e11+this.t1z3*this.i1e12,this.a1z3=this.t1x3*this.i1e20+this.t1y3*this.i1e21+this.t1z3*this.i1e22,this.a2x3=this.t2x3*this.i2e00+this.t2y3*this.i2e01+this.t2z3*this.i2e02,this.a2y3=this.t2x3*this.i2e10+this.t2y3*this.i2e11+this.t2z3*this.i2e12,this.a2z3=this.t2x3*this.i2e20+this.t2y3*this.i2e21+this.t2z3*this.i2e22;var S=this.m1+this.m2;if(this.k00=(this.ax1*this.ax1+this.ay1*this.ay1+this.az1*this.az1)*S,this.k01=(this.ax1*this.ax2+this.ay1*this.ay2+this.az1*this.az2)*S,this.k02=(this.ax1*this.ax3+this.ay1*this.ay3+this.az1*this.az3)*S,this.k10=(this.ax2*this.ax1+this.ay2*this.ay1+this.az2*this.az1)*S,this.k11=(this.ax2*this.ax2+this.ay2*this.ay2+this.az2*this.az2)*S,this.k12=(this.ax2*this.ax3+this.ay2*this.ay3+this.az2*this.az3)*S,this.k20=(this.ax3*this.ax1+this.ay3*this.ay1+this.az3*this.az1)*S,this.k21=(this.ax3*this.ax2+this.ay3*this.ay2+this.az3*this.az2)*S,this.k22=(this.ax3*this.ax3+this.ay3*this.ay3+this.az3*this.az3)*S,this.k00+=this.t1x1*this.a1x1+this.t1y1*this.a1y1+this.t1z1*this.a1z1,this.k01+=this.t1x1*this.a1x2+this.t1y1*this.a1y2+this.t1z1*this.a1z2,this.k02+=this.t1x1*this.a1x3+this.t1y1*this.a1y3+this.t1z1*this.a1z3,this.k10+=this.t1x2*this.a1x1+this.t1y2*this.a1y1+this.t1z2*this.a1z1,this.k11+=this.t1x2*this.a1x2+this.t1y2*this.a1y2+this.t1z2*this.a1z2,this.k12+=this.t1x2*this.a1x3+this.t1y2*this.a1y3+this.t1z2*this.a1z3,this.k20+=this.t1x3*this.a1x1+this.t1y3*this.a1y1+this.t1z3*this.a1z1,this.k21+=this.t1x3*this.a1x2+this.t1y3*this.a1y2+this.t1z3*this.a1z2,this.k22+=this.t1x3*this.a1x3+this.t1y3*this.a1y3+this.t1z3*this.a1z3,this.k00+=this.t2x1*this.a2x1+this.t2y1*this.a2y1+this.t2z1*this.a2z1,this.k01+=this.t2x1*this.a2x2+this.t2y1*this.a2y2+this.t2z1*this.a2z2,this.k02+=this.t2x1*this.a2x3+this.t2y1*this.a2y3+this.t2z1*this.a2z3,this.k10+=this.t2x2*this.a2x1+this.t2y2*this.a2y1+this.t2z2*this.a2z1,this.k11+=this.t2x2*this.a2x2+this.t2y2*this.a2y2+this.t2z2*this.a2z2,this.k12+=this.t2x2*this.a2x3+this.t2y2*this.a2y3+this.t2z2*this.a2z3,this.k20+=this.t2x3*this.a2x1+this.t2y3*this.a2y1+this.t2z3*this.a2z1,this.k21+=this.t2x3*this.a2x2+this.t2y3*this.a2y2+this.t2z3*this.a2z2,this.k22+=this.t2x3*this.a2x3+this.t2y3*this.a2y3+this.t2z3*this.a2z3,this.kv00=this.k00,this.kv11=this.k11,this.kv22=this.k22,this.dv00=1/this.kv00,this.dv11=1/this.kv11,this.dv22=1/this.kv22,d&&2!=this.limitState1){var E=6.2831853*c,T=E*E*t,L=e/(T+2*this.limitMotor1.dampingRatio*E);this.cfm1=this.kv00*L,this.limitVelocity1*=T*L}else this.cfm1=0,this.limitVelocity1*=.05*e;m&&2!=this.limitState2?(L=e/((T=(E=6.2831853*u)*E*t)+2*this.limitMotor2.dampingRatio*E),this.cfm2=this.kv11*L,this.limitVelocity2*=T*L):(this.cfm2=0,this.limitVelocity2*=.05*e),f&&2!=this.limitState3?(L=e/((T=(E=6.2831853*p)*E*t)+2*this.limitMotor3.dampingRatio*E),this.cfm3=this.kv22*L,this.limitVelocity3*=T*L):(this.cfm3=0,this.limitVelocity3*=.05*e),this.k00+=this.cfm1,this.k11+=this.cfm2,this.k22+=this.cfm3;var A=1/(this.k00*(this.k11*this.k22-this.k21*this.k12)+this.k10*(this.k21*this.k02-this.k01*this.k22)+this.k20*(this.k01*this.k12-this.k11*this.k02));this.d00=(this.k11*this.k22-this.k12*this.k21)*A,this.d01=(this.k02*this.k21-this.k01*this.k22)*A,this.d02=(this.k01*this.k12-this.k02*this.k11)*A,this.d10=(this.k12*this.k20-this.k10*this.k22)*A,this.d11=(this.k00*this.k22-this.k02*this.k20)*A,this.d12=(this.k02*this.k10-this.k00*this.k12)*A,this.d20=(this.k10*this.k21-this.k11*this.k20)*A,this.d21=(this.k01*this.k20-this.k00*this.k21)*A,this.d22=(this.k00*this.k11-this.k01*this.k10)*A;var P=this.limitImpulse1+this.motorImpulse1,z=this.limitImpulse2+this.motorImpulse2,N=this.limitImpulse3+this.motorImpulse3;this.l1.x+=P*this.l1x1+z*this.l1x2+N*this.l1x3,this.l1.y+=P*this.l1y1+z*this.l1y2+N*this.l1y3,this.l1.z+=P*this.l1z1+z*this.l1z2+N*this.l1z3,this.a1.x+=P*this.a1x1+z*this.a1x2+N*this.a1x3,this.a1.y+=P*this.a1y1+z*this.a1y2+N*this.a1y3,this.a1.z+=P*this.a1z1+z*this.a1z2+N*this.a1z3,this.l2.x-=P*this.l2x1+z*this.l2x2+N*this.l2x3,this.l2.y-=P*this.l2y1+z*this.l2y2+N*this.l2y3,this.l2.z-=P*this.l2z1+z*this.l2z2+N*this.l2z3,this.a2.x-=P*this.a2x1+z*this.a2x2+N*this.a2x3,this.a2.y-=P*this.a2y1+z*this.a2y2+N*this.a2y3,this.a2.z-=P*this.a2z1+z*this.a2z2+N*this.a2z3},solve:function(){var t=this.l2.x-this.l1.x+this.a2.y*this.r2z-this.a2.z*this.r2y-this.a1.y*this.r1z+this.a1.z*this.r1y,e=this.l2.y-this.l1.y+this.a2.z*this.r2x-this.a2.x*this.r2z-this.a1.z*this.r1x+this.a1.x*this.r1z,i=this.l2.z-this.l1.z+this.a2.x*this.r2y-this.a2.y*this.r2x-this.a1.x*this.r1y+this.a1.y*this.r1x,n=t*this.ax1+e*this.ay1+i*this.az1,r=t*this.ax2+e*this.ay2+i*this.az2,s=t*this.ax3+e*this.ay3+i*this.az3,a=this.motorImpulse1,o=this.motorImpulse2,h=this.motorImpulse3,l=0,c=0,u=0;this.enableMotor1&&(l=(n-this.motorSpeed1)*this.dv00,this.motorImpulse1+=l,this.motorImpulse1>this.maxMotorImpulse1?this.motorImpulse1=this.maxMotorImpulse1:this.motorImpulse1<-this.maxMotorImpulse1&&(this.motorImpulse1=-this.maxMotorImpulse1),l=this.motorImpulse1-a),this.enableMotor2&&(c=(r-this.motorSpeed2)*this.dv11,this.motorImpulse2+=c,this.motorImpulse2>this.maxMotorImpulse2?this.motorImpulse2=this.maxMotorImpulse2:this.motorImpulse2<-this.maxMotorImpulse2&&(this.motorImpulse2=-this.maxMotorImpulse2),c=this.motorImpulse2-o),this.enableMotor3&&(u=(s-this.motorSpeed3)*this.dv22,this.motorImpulse3+=u,this.motorImpulse3>this.maxMotorImpulse3?this.motorImpulse3=this.maxMotorImpulse3:this.motorImpulse3<-this.maxMotorImpulse3&&(this.motorImpulse3=-this.maxMotorImpulse3),u=this.motorImpulse3-h),n+=l*this.kv00+c*this.k01+u*this.k02,r+=l*this.k10+c*this.kv11+u*this.k12,s+=l*this.k20+c*this.k21+u*this.kv22,n-=this.limitVelocity1+this.limitImpulse1*this.cfm1,r-=this.limitVelocity2+this.limitImpulse2*this.cfm2,s-=this.limitVelocity3+this.limitImpulse3*this.cfm3;var p=this.limitImpulse1,d=this.limitImpulse2,m=this.limitImpulse3,f=n*this.d00+r*this.d01+s*this.d02,v=n*this.d10+r*this.d11+s*this.d12,g=n*this.d20+r*this.d21+s*this.d22;this.limitImpulse1+=f,this.limitImpulse2+=v,this.limitImpulse3+=g;var y,x=0;switch((2==this.limitState1||this.limitImpulse1*this.limitState1<0)&&(r+=(f=-p)*this.k10,s+=f*this.k20,x|=1),(2==this.limitState2||this.limitImpulse2*this.limitState2<0)&&(n+=(v=-d)*this.k01,s+=v*this.k21,x|=2),(2==this.limitState3||this.limitImpulse3*this.limitState3<0)&&(n+=(g=-m)*this.k02,r+=g*this.k12,x|=4),x){case 1:y=1/(this.k11*this.k22-this.k12*this.k21),v=(this.k22*r+-this.k12*s)*y,g=(-this.k21*r+this.k11*s)*y;break;case 2:y=1/(this.k00*this.k22-this.k02*this.k20),f=(this.k22*n+-this.k02*s)*y,g=(-this.k20*n+this.k00*s)*y;break;case 3:g=s/this.k22;break;case 4:y=1/(this.k00*this.k11-this.k01*this.k10),f=(this.k11*n+-this.k01*r)*y,v=(-this.k10*n+this.k00*r)*y;break;case 5:v=r/this.k11;break;case 6:f=n/this.k00}this.limitImpulse1=p+f,this.limitImpulse2=d+v,this.limitImpulse3=m+g;var b=l+f,w=c+v,M=u+g;this.l1.x+=b*this.l1x1+w*this.l1x2+M*this.l1x3,this.l1.y+=b*this.l1y1+w*this.l1y2+M*this.l1y3,this.l1.z+=b*this.l1z1+w*this.l1z2+M*this.l1z3,this.a1.x+=b*this.a1x1+w*this.a1x2+M*this.a1x3,this.a1.y+=b*this.a1y1+w*this.a1y2+M*this.a1y3,this.a1.z+=b*this.a1z1+w*this.a1z2+M*this.a1z3,this.l2.x-=b*this.l2x1+w*this.l2x2+M*this.l2x3,this.l2.y-=b*this.l2y1+w*this.l2y2+M*this.l2y3,this.l2.z-=b*this.l2z1+w*this.l2z2+M*this.l2z3,this.a2.x-=b*this.a2x1+w*this.a2x2+M*this.a2x3,this.a2.y-=b*this.a2y1+w*this.a2y2+M*this.a2y3,this.a2.z-=b*this.a2z1+w*this.a2z2+M*this.a2z3}}),at.prototype=Object.assign(Object.create(Q.prototype),{constructor:at,preSolve:function(t,e){this.updateAnchorPoints(),this.ax1.copy(this.localAxis1).applyMatrix3(this.body1.rotation,!0),this.ax2.copy(this.localAxis2).applyMatrix3(this.body2.rotation,!0),this.nor.set(this.ax1.x*this.body2.inverseMass+this.ax2.x*this.body1.inverseMass,this.ax1.y*this.body2.inverseMass+this.ax2.y*this.body1.inverseMass,this.ax1.z*this.body2.inverseMass+this.ax2.z*this.body1.inverseMass).normalize(),this.tan.tangent(this.nor).normalize(),this.bin.crossVectors(this.nor,this.tan),this.ac.preSolve(t,e),this.t3.preSolve(t,e)},solve:function(){this.ac.solve(),this.t3.solve()},postSolve:function(){}}),ot.prototype=Object.assign(Object.create(Q.prototype),{constructor:ot,preSolve:function(t,e){this.updateAnchorPoints(),this.ax1.copy(this.localAxis1).applyMatrix3(this.body1.rotation,!0),this.an1.copy(this.localAngle1).applyMatrix3(this.body1.rotation,!0),this.ax2.copy(this.localAxis2).applyMatrix3(this.body2.rotation,!0),this.an2.copy(this.localAngle2).applyMatrix3(this.body2.rotation,!0),this.nor.set(this.ax1.x*this.body2.inverseMass+this.ax2.x*this.body1.inverseMass,this.ax1.y*this.body2.inverseMass+this.ax2.y*this.body1.inverseMass,this.ax1.z*this.body2.inverseMass+this.ax2.z*this.body1.inverseMass).normalize(),this.tan.tangent(this.nor).normalize(),this.bin.crossVectors(this.nor,this.tan),this.tmp.crossVectors(this.an1,this.an2);var i=C.acosClamp(C.dotVectors(this.an1,this.an2));C.dotVectors(this.nor,this.tmp)<0?this.rotationalLimitMotor.angle=-i:this.rotationalLimitMotor.angle=i,this.tmp.crossVectors(this.ax1,this.ax2),this.r3.limitMotor2.angle=C.dotVectors(this.tan,this.tmp),this.r3.limitMotor3.angle=C.dotVectors(this.bin,this.tmp),this.r3.preSolve(t,e),this.t3.preSolve(t,e)},solve:function(){this.r3.solve(),this.t3.solve()},postSolve:function(){}}),ht.prototype=Object.assign(Object.create(Q.prototype),{constructor:ht,preSolve:function(t,e){this.updateAnchorPoints(),this.ax1.copy(this.localAxis1).applyMatrix3(this.body1.rotation,!0),this.an1.copy(this.localAngle1).applyMatrix3(this.body1.rotation,!0),this.ax2.copy(this.localAxis2).applyMatrix3(this.body2.rotation,!0),this.an2.copy(this.localAngle2).applyMatrix3(this.body2.rotation,!0),this.r3.limitMotor1.angle=C.dotVectors(this.ax1,this.ax2);var i=C.dotVectors(this.an1,this.ax2);C.dotVectors(this.ax1,this.tmp.crossVectors(this.an1,this.ax2))<0?this.rotationalLimitMotor1.angle=-i:this.rotationalLimitMotor1.angle=i,i=C.dotVectors(this.an2,this.ax1),C.dotVectors(this.ax2,this.tmp.crossVectors(this.an2,this.ax1))<0?this.rotationalLimitMotor2.angle=-i:this.rotationalLimitMotor2.angle=i,this.nor.crossVectors(this.ax1,this.ax2).normalize(),this.tan.crossVectors(this.nor,this.ax2).normalize(),this.bin.crossVectors(this.nor,this.ax1).normalize(),this.r3.preSolve(t,e),this.t3.preSolve(t,e)},solve:function(){this.r3.solve(),this.t3.solve()},postSolve:function(){}}),mt.prototype={constructor:mt,reset:function(t,e){this.body1=t.parent,this.body2=e.parent,this.numPoints=0},addPointVec:function(t,e,i,n){var r=this.points[this.numPoints++];r.position.copy(t),r.localPoint1.sub(t,this.body1.position).applyMatrix3(this.body1.rotation),r.localPoint2.sub(t,this.body2.position).applyMatrix3(this.body2.rotation),r.normal.copy(e),n&&r.normal.negate(),r.normalImpulse=0,r.penetration=i,r.warmStarted=!1},addPoint:function(t,e,i,n,r,s,a,o){var h=this.points[this.numPoints++];h.position.set(t,e,i),h.localPoint1.sub(h.position,this.body1.position).applyMatrix3(this.body1.rotation),h.localPoint2.sub(h.position,this.body2.position).applyMatrix3(this.body2.rotation),h.normalImpulse=0,h.normal.set(n,r,s),o&&h.normal.negate(),h.penetration=a,h.warmStarted=!1}},vt.prototype=Object.assign(Object.create(J.prototype),{constructor:vt,attach:function(){this.p1=this.body1.position,this.p2=this.body2.position,this.lv1=this.body1.linearVelocity,this.av1=this.body1.angularVelocity,this.lv2=this.body2.linearVelocity,this.av2=this.body2.angularVelocity,this.i1=this.body1.inverseInertia,this.i2=this.body2.inverseInertia},detach:function(){this.p1=null,this.p2=null,this.lv1=null,this.lv2=null,this.av1=null,this.av2=null,this.i1=null,this.i2=null},preSolve:function(t,e){this.m1=this.body1.inverseMass,this.m2=this.body2.inverseMass;var i=this.m1+this.m2;this.num=this.manifold.numPoints;for(var n,r,s,a,o,h,l,c=this.cs,u=0;u<this.num;u++)n=this.ps[u],this.tmpP1.sub(n.position,this.p1),this.tmpP2.sub(n.position,this.p2),this.tmpC1.crossVectors(this.av1,this.tmpP1),this.tmpC2.crossVectors(this.av2,this.tmpP2),c.norImp=n.normalImpulse,c.tanImp=n.tangentImpulse,c.binImp=n.binormalImpulse,c.nor.copy(n.normal),this.tmp.set(this.lv2.x+this.tmpC2.x-(this.lv1.x+this.tmpC1.x),this.lv2.y+this.tmpC2.y-(this.lv1.y+this.tmpC1.y),this.lv2.z+this.tmpC2.z-(this.lv1.z+this.tmpC1.z)),r=C.dotVectors(c.nor,this.tmp),c.tan.set(this.tmp.x-r*c.nor.x,this.tmp.y-r*c.nor.y,this.tmp.z-r*c.nor.z),C.dotVectors(c.tan,c.tan)<=.04&&c.tan.tangent(c.nor),c.tan.normalize(),c.bin.crossVectors(c.nor,c.tan),c.norU1.scale(c.nor,this.m1),c.norU2.scale(c.nor,this.m2),c.tanU1.scale(c.tan,this.m1),c.tanU2.scale(c.tan,this.m2),c.binU1.scale(c.bin,this.m1),c.binU2.scale(c.bin,this.m2),c.norT1.crossVectors(this.tmpP1,c.nor),c.tanT1.crossVectors(this.tmpP1,c.tan),c.binT1.crossVectors(this.tmpP1,c.bin),c.norT2.crossVectors(this.tmpP2,c.nor),c.tanT2.crossVectors(this.tmpP2,c.tan),c.binT2.crossVectors(this.tmpP2,c.bin),h=this.i1,l=this.i2,c.norTU1.copy(c.norT1).applyMatrix3(h,!0),c.tanTU1.copy(c.tanT1).applyMatrix3(h,!0),c.binTU1.copy(c.binT1).applyMatrix3(h,!0),c.norTU2.copy(c.norT2).applyMatrix3(l,!0),c.tanTU2.copy(c.tanT2).applyMatrix3(l,!0),c.binTU2.copy(c.binT2).applyMatrix3(l,!0),this.tmpC1.crossVectors(c.norTU1,this.tmpP1),this.tmpC2.crossVectors(c.norTU2,this.tmpP2),this.tmp.add(this.tmpC1,this.tmpC2),c.norDen=1/(i+C.dotVectors(c.nor,this.tmp)),this.tmpC1.crossVectors(c.tanTU1,this.tmpP1),this.tmpC2.crossVectors(c.tanTU2,this.tmpP2),this.tmp.add(this.tmpC1,this.tmpC2),c.tanDen=1/(i+C.dotVectors(c.tan,this.tmp)),this.tmpC1.crossVectors(c.binTU1,this.tmpP1),this.tmpC2.crossVectors(c.binTU2,this.tmpP2),this.tmp.add(this.tmpC1,this.tmpC2),c.binDen=1/(i+C.dotVectors(c.bin,this.tmp)),n.warmStarted?(s=n.normalImpulse,this.lv1.addScaledVector(c.norU1,s),this.av1.addScaledVector(c.norTU1,s),this.lv2.subScaledVector(c.norU2,s),this.av2.subScaledVector(c.norTU2,s),c.norImp=s,c.tanImp=0,c.binImp=0,r=0):(c.norImp=0,c.tanImp=0,c.binImp=0),r>-1&&(r=0),(a=this.restitution*-r)<(o=-(n.penetration+.005)*e*.05)&&(a=o),c.norTar=a,c.last=u==this.num-1,c=c.next},solve:function(){var t,e,i,n,r,s,a,o,h;this.tmplv1.copy(this.lv1),this.tmplv2.copy(this.lv2),this.tmpav1.copy(this.av1),this.tmpav2.copy(this.av2);for(var l=this.cs;r=l.norImp,s=l.tanImp,a=l.binImp,o=-r*this.friction,this.tmp.sub(this.tmplv2,this.tmplv1),t=s,i=a,(h=(s+=e=(C.dotVectors(this.tmp,l.tan)+C.dotVectors(this.tmpav2,l.tanT2)-C.dotVectors(this.tmpav1,l.tanT1))*l.tanDen)*s+(a+=n=(C.dotVectors(this.tmp,l.bin)+C.dotVectors(this.tmpav2,l.binT2)-C.dotVectors(this.tmpav1,l.binT1))*l.binDen)*a)>o*o&&(s*=h=o/C.sqrt(h),a*=h),e=s-t,n=a-i,this.tmp.set(l.tanU1.x*e+l.binU1.x*n,l.tanU1.y*e+l.binU1.y*n,l.tanU1.z*e+l.binU1.z*n),this.tmplv1.addEqual(this.tmp),this.tmp.set(l.tanTU1.x*e+l.binTU1.x*n,l.tanTU1.y*e+l.binTU1.y*n,l.tanTU1.z*e+l.binTU1.z*n),this.tmpav1.addEqual(this.tmp),this.tmp.set(l.tanU2.x*e+l.binU2.x*n,l.tanU2.y*e+l.binU2.y*n,l.tanU2.z*e+l.binU2.z*n),this.tmplv2.subEqual(this.tmp),this.tmp.set(l.tanTU2.x*e+l.binTU2.x*n,l.tanTU2.y*e+l.binTU2.y*n,l.tanTU2.z*e+l.binTU2.z*n),this.tmpav2.subEqual(this.tmp),this.tmp.sub(this.tmplv2,this.tmplv1),t=r,(r+=e=(C.dotVectors(this.tmp,l.nor)+C.dotVectors(this.tmpav2,l.norT2)-C.dotVectors(this.tmpav1,l.norT1)-l.norTar)*l.norDen)>0&&(r=0),e=r-t,this.tmplv1.addScaledVector(l.norU1,e),this.tmpav1.addScaledVector(l.norTU1,e),this.tmplv2.subScaledVector(l.norU2,e),this.tmpav2.subScaledVector(l.norTU2,e),l.norImp=r,l.tanImp=s,l.binImp=a,!l.last;)l=l.next;this.lv1.copy(this.tmplv1),this.lv2.copy(this.tmplv2),this.av1.copy(this.tmpav1),this.av2.copy(this.tmpav2)},postSolve:function(){for(var t,e=this.cs,i=this.num;i--;)(t=this.ps[i]).normal.copy(e.nor),t.tangent.copy(e.tan),t.binormal.copy(e.bin),t.normalImpulse=e.norImp,t.tangentImpulse=e.tanImp,t.binormalImpulse=e.binImp,t.normalDenominator=e.norDen,t.tangentDenominator=e.tanDen,t.binormalDenominator=e.binDen,e=e.next}}),Object.assign(gt.prototype,{Contact:!0,mixRestitution:function(t,e){return C.sqrt(t*e)},mixFriction:function(t,e){return C.sqrt(t*e)},updateManifold:function(){this.constraint.restitution=this.mixRestitution(this.shape1.restitution,this.shape2.restitution),this.constraint.friction=this.mixFriction(this.shape1.friction,this.shape2.friction);for(var t=this.manifold.numPoints,e=t;e--;){var i=this.buffer[e],n=this.points[e];i.lp1X=n.localPoint1.x,i.lp1Y=n.localPoint1.y,i.lp1Z=n.localPoint1.z,i.lp2X=n.localPoint2.x,i.lp2Y=n.localPoint2.y,i.lp2Z=n.localPoint2.z,i.impulse=n.normalImpulse}this.manifold.numPoints=0,this.detector.detectCollision(this.shape1,this.shape2,this.manifold);var r=this.manifold.numPoints;if(0==r)return this.touching=!1,this.close=!1,void(this.dist=C.INF);for((this.touching||this.dist<.001)&&(this.close=!0),this.touching=!0,e=r;e--;){for(var s=(n=this.points[e]).localPoint1.x,a=n.localPoint1.y,o=n.localPoint1.z,h=n.localPoint2.x,l=n.localPoint2.y,c=n.localPoint2.z,u=-1,p=4e-4,d=t;d--;){var m=(i=this.buffer[d]).lp1X-s,f=i.lp1Y-a,v=i.lp1Z-o,g=m*m+f*f+v*v,y=(m=i.lp2X-h)*m+(f=i.lp2Y-l)*f+(v=i.lp2Z-c)*v;g<y?g<p&&(p=g,u=d):y<p&&(p=y,u=d),p<this.dist&&(this.dist=p)}if(-1!=u){var x=this.buffer[u];this.buffer[u]=this.buffer[--t],this.buffer[t]=x,n.normalImpulse=x.impulse,n.warmStarted=!0}else n.normalImpulse=0,n.warmStarted=!1}},attach:function(t,e){this.shape1=t,this.shape2=e,this.body1=t.parent,this.body2=e.parent,this.manifold.body1=this.body1,this.manifold.body2=this.body2,this.constraint.body1=this.body1,this.constraint.body2=this.body2,this.constraint.attach(),this.s1Link.shape=e,this.s1Link.body=this.body2,this.s2Link.shape=t,this.s2Link.body=this.body1,null!=t.contactLink?(this.s1Link.next=t.contactLink).prev=this.s1Link:this.s1Link.next=null,t.contactLink=this.s1Link,t.numContacts++,null!=e.contactLink?(this.s2Link.next=e.contactLink).prev=this.s2Link:this.s2Link.next=null,e.contactLink=this.s2Link,e.numContacts++,this.b1Link.shape=e,this.b1Link.body=this.body2,this.b2Link.shape=t,this.b2Link.body=this.body1,null!=this.body1.contactLink?(this.b1Link.next=this.body1.contactLink).prev=this.b1Link:this.b1Link.next=null,this.body1.contactLink=this.b1Link,this.body1.numContacts++,null!=this.body2.contactLink?(this.b2Link.next=this.body2.contactLink).prev=this.b2Link:this.b2Link.next=null,this.body2.contactLink=this.b2Link,this.body2.numContacts++,this.prev=null,this.next=null,this.persisting=!0,this.sleeping=this.body1.sleeping&&this.body2.sleeping,this.manifold.numPoints=0},detach:function(){var t=this.s1Link.prev,e=this.s1Link.next;null!==t&&(t.next=e),null!==e&&(e.prev=t),this.shape1.contactLink==this.s1Link&&(this.shape1.contactLink=e),this.s1Link.prev=null,this.s1Link.next=null,this.s1Link.shape=null,this.s1Link.body=null,this.shape1.numContacts--,t=this.s2Link.prev,e=this.s2Link.next,null!==t&&(t.next=e),null!==e&&(e.prev=t),this.shape2.contactLink==this.s2Link&&(this.shape2.contactLink=e),this.s2Link.prev=null,this.s2Link.next=null,this.s2Link.shape=null,this.s2Link.body=null,this.shape2.numContacts--,t=this.b1Link.prev,e=this.b1Link.next,null!==t&&(t.next=e),null!==e&&(e.prev=t),this.body1.contactLink==this.b1Link&&(this.body1.contactLink=e),this.b1Link.prev=null,this.b1Link.next=null,this.b1Link.shape=null,this.b1Link.body=null,this.body1.numContacts--,t=this.b2Link.prev,e=this.b2Link.next,null!==t&&(t.next=e),null!==e&&(e.prev=t),this.body2.contactLink==this.b2Link&&(this.body2.contactLink=e),this.b2Link.prev=null,this.b2Link.next=null,this.b2Link.shape=null,this.b2Link.body=null,this.body2.numContacts--,this.manifold.body1=null,this.manifold.body2=null,this.constraint.body1=null,this.constraint.body2=null,this.constraint.detach(),this.shape1=null,this.shape2=null,this.body1=null,this.body2=null}}),Object.assign(yt.prototype,{setParent:function(t){this.parent=t,this.scale=this.parent.scale,this.invScale=this.parent.invScale,this.id=this.parent.numRigidBodies,this.name||(this.name=this.id),this.updateMesh()},addShape:function(t){t.parent&&I(\"RigidBody\",\"It is not possible that you add a shape which already has an associated body.\"),null!=this.shapes&&((this.shapes.prev=t).next=this.shapes),this.shapes=t,t.parent=this,this.parent&&this.parent.addShape(t),this.numShapes++},removeShape:function(t){var e=t;if(e.parent==this){var i=e.prev,n=e.next;null!=i&&(i.next=n),null!=n&&(n.prev=i),this.shapes==e&&(this.shapes=n),e.prev=null,e.next=null,e.parent=null,this.parent&&this.parent.removeShape(e),this.numShapes--}},remove:function(){this.dispose()},dispose:function(){this.parent.removeRigidBody(this)},checkContact:function(t){this.parent.checkContact(this.name,t)},setupMass:function(t,e){var i=void 0===e||e;this.type=t||f,this.isDynamic=this.type===m,this.isStatic=this.type===f,this.mass=0,this.localInertia.set(0,0,0,0,0,0,0,0,0);for(var n=new B,r=new k,s=this.shapes;null!==s;s=s.next){s.calculateMassInfo(this.massInfo);var a=this.massInfo.mass;r.addScaledVector(s.relativePosition,a),this.mass+=a,this.rotateInertia(s.relativeRotation,this.massInfo.inertia,n),this.localInertia.add(n),this.localInertia.addOffset(a,s.relativePosition)}if(this.inverseMass=1/this.mass,r.scaleEqual(this.inverseMass),i){for(this.position.add(r),s=this.shapes;null!==s;s=s.next)s.relativePosition.subEqual(r);this.localInertia.subOffset(this.mass,r)}this.inverseLocalInertia.invert(this.localInertia),this.type===f&&(this.inverseMass=0,this.inverseLocalInertia.set(0,0,0,0,0,0,0,0,0)),this.syncShapes(),this.awake()},awake:function(){if(this.allowSleep&&this.sleeping){this.sleeping=!1,this.sleepTime=0;for(var t=this.contactLink;null!=t;)t.body.sleepTime=0,t.body.sleeping=!1,t=t.next;for(var e=this.jointLink;null!=e;)e.body.sleepTime=0,e.body.sleeping=!1,e=e.next;for(var i=this.shapes;null!=i;i=i.next)i.updateProxy()}},sleep:function(){if(this.allowSleep&&!this.sleeping){this.linearVelocity.set(0,0,0),this.angularVelocity.set(0,0,0),this.sleepPosition.copy(this.position),this.sleepOrientation.copy(this.orientation),this.sleepTime=0,this.sleeping=!0;for(var t=this.shapes;null!=t;t=t.next)t.updateProxy()}},testWakeUp:function(){(this.linearVelocity.testZero()||this.angularVelocity.testZero()||this.position.testDiff(this.sleepPosition)||this.orientation.testDiff(this.sleepOrientation))&&this.awake()},isLonely:function(){return 0==this.numJoints&&0==this.numContacts},updatePosition:function(t){switch(this.type){case f:this.linearVelocity.set(0,0,0),this.angularVelocity.set(0,0,0),this.controlPos&&(this.position.copy(this.newPosition),this.controlPos=!1),this.controlRot&&(this.orientation.copy(this.newOrientation),this.controlRot=!1);break;case m:this.isKinematic&&(this.linearVelocity.set(0,0,0),this.angularVelocity.set(0,0,0)),this.controlPos&&(this.linearVelocity.subVectors(this.newPosition,this.position).multiplyScalar(1/t),this.controlPos=!1),this.controlRot&&(this.angularVelocity.copy(this.getAxis()),this.orientation.copy(this.newOrientation),this.controlRot=!1),this.position.addScaledVector(this.linearVelocity,t),this.orientation.addTime(this.angularVelocity,t),this.updateMesh();break;default:I(\"RigidBody\",\"Invalid type.\")}this.syncShapes(),this.updateMesh()},getAxis:function(){return new k(0,1,0).applyMatrix3(this.inverseLocalInertia,!0).normalize()},rotateInertia:function(t,e,i){this.tmpInertia.multiplyMatrices(t,e),i.multiplyMatrices(this.tmpInertia,t,!0)},syncShapes:function(){this.rotation.setQuat(this.orientation),this.rotateInertia(this.rotation,this.inverseLocalInertia,this.inverseInertia);for(var t=this.shapes;null!=t;t=t.next)t.position.copy(t.relativePosition).applyMatrix3(this.rotation,!0).add(this.position),t.rotation.multiplyMatrices(this.rotation,t.relativeRotation),t.updateProxy()},applyImpulse:function(t,e){this.linearVelocity.addScaledVector(e,this.inverseMass);var i=(new k).copy(t).sub(this.position).cross(e).applyMatrix3(this.inverseInertia,!0);this.angularVelocity.add(i)},setPosition:function(t){this.newPosition.copy(t).multiplyScalar(this.invScale),this.controlPos=!0,this.isKinematic||(this.isKinematic=!0)},setQuaternion:function(t){this.newOrientation.set(t.x,t.y,t.z,t.w),this.controlRot=!0,this.isKinematic||(this.isKinematic=!0)},setRotation:function(t){this.newOrientation=(new D).setFromEuler(t.x*C.degtorad,t.y*C.degtorad,t.y*C.degtorad),this.controlRot=!0},resetPosition:function(t,e,i){this.linearVelocity.set(0,0,0),this.angularVelocity.set(0,0,0),this.position.set(t,e,i).multiplyScalar(this.invScale),this.awake()},resetQuaternion:function(t){this.angularVelocity.set(0,0,0),this.orientation=new D(t.x,t.y,t.z,t.w),this.awake()},resetRotation:function(t,e,i){this.angularVelocity.set(0,0,0),this.orientation=(new D).setFromEuler(t*C.degtorad,e*C.degtorad,i*C.degtorad),this.awake()},getPosition:function(){return this.pos},getQuaternion:function(){return this.quaternion},connectMesh:function(t){this.mesh=t,this.updateMesh()},updateMesh:function(){this.pos.scale(this.position,this.scale),this.quaternion.copy(this.orientation),null!==this.mesh&&(this.mesh.position.copy(this.getPosition()),this.mesh.quaternion.copy(this.getQuaternion()))}}),Object.assign(bt.prototype,{BroadPhase:!0,createProxy:function(t){I(\"BroadPhase\",\"Inheritance error.\")},addProxy:function(t){I(\"BroadPhase\",\"Inheritance error.\")},removeProxy:function(t){I(\"BroadPhase\",\"Inheritance error.\")},isAvailablePair:function(t,e){var i,n=t.parent,r=e.parent;if(n==r||!n.isDynamic&&!r.isDynamic||0==(t.belongsTo&e.collidesWith)||0==(e.belongsTo&t.collidesWith))return!1;for(i=n.numJoints<r.numJoints?n.jointLink:r.jointLink;null!==i;){var s=i.joint;if(!s.allowCollision&&(s.body1==n&&s.body2==r||s.body1==r&&s.body2==n))return!1;i=i.next}return!0},detectPairs:function(){this.pairs=[],this.numPairs=0,this.numPairChecks=0,this.collectPairs()},collectPairs:function(){Error(\"BroadPhase\",\"Inheritance error.\")},addPair:function(t,e){var i=new xt(t,e);this.pairs.push(i),this.numPairs++}});var wt=0;function Mt(t){this.shape=t,this.aabb=t.aabb}function _t(t){Mt.call(this,t),this.id=wt++}function St(){bt.call(this),this.types=c,this.proxies=[]}function Et(){this.numElements=0,this.bufferSize=256,this.elements=[],this.elements.length=this.bufferSize,this.stack=new Float32Array(64)}function Tt(t,e){this.proxy=t,this.pair=null,this.min1=null,this.max1=null,this.min2=null,this.max2=null,this.max=e,this.value=0}function Lt(t,e){Mt.call(this,e),this.belongsTo=0,this.max=[],this.min=[],this.sap=t,this.min[0]=new Tt(this,!1),this.max[0]=new Tt(this,!0),this.min[1]=new Tt(this,!1),this.max[1]=new Tt(this,!0),this.min[2]=new Tt(this,!1),this.max[2]=new Tt(this,!0),this.max[0].pair=this.min[0],this.max[1].pair=this.min[1],this.max[2].pair=this.min[2],this.min[0].min1=this.min[1],this.min[0].max1=this.max[1],this.min[0].min2=this.min[2],this.min[0].max2=this.max[2],this.min[1].min1=this.min[0],this.min[1].max1=this.max[0],this.min[1].min2=this.min[2],this.min[1].max2=this.max[2],this.min[2].min1=this.min[0],this.min[2].max1=this.max[0],this.min[2].min2=this.min[1],this.min[2].max2=this.max[1]}function At(){bt.call(this),this.types=u,this.numElementsD=0,this.numElementsS=0,this.axesD=[new Et,new Et,new Et],this.axesS=[new Et,new Et,new Et],this.index1=0,this.index2=1}function Pt(){this.child1=null,this.child2=null,this.parent=null,this.proxy=null,this.height=0,this.aabb=new V}function zt(){this.root=null,this.freeNodes=[],this.freeNodes.length=16384,this.numFreeNodes=0,this.aabb=new V}function Nt(t){Mt.call(this,t),this.leaf=new Pt,this.leaf.proxy=this}function Rt(){bt.call(this),this.types=p,this.tree=new zt,this.stack=[],this.leaves=[],this.numLeaves=0}function Ct(){this.flip=!1}function It(){Ct.call(this),this.clipVertices1=new Float32Array(24),this.clipVertices2=new Float32Array(24),this.used=new Float32Array(8),this.INF=1/0}function Ot(t){Ct.call(this),this.flip=t}function kt(){Ct.call(this)}function Dt(t){Ct.call(this),this.flip=t}function Bt(t){Ct.call(this),this.flip=t}function Vt(){Ct.call(this)}function Ut(t){Ct.call(this),this.flip=t,this.n=new k,this.p=new k}function Ft(t){Ct.call(this),this.flip=t,this.n=new k,this.p=new k,this.dix=new k,this.diy=new k,this.diz=new k,this.cc=new k,this.cc2=new k}function Ht(t){switch(t instanceof Object||(t={}),this.scale=t.worldscale||1,this.invScale=1/this.scale,this.timeStep=t.timestep||.01666,this.timerate=1e3*this.timeStep,this.timer=null,this.preLoop=null,this.postLoop=null,this.numIterations=t.iterations||8,t.broadphase||2){case 1:this.broadPhase=new St;break;case 2:default:this.broadPhase=new At;break;case 3:this.broadPhase=new Rt}this.Btypes=[\"None\",\"BruteForce\",\"Sweep & Prune\",\"Bounding Volume Tree\"],this.broadPhaseType=this.Btypes[t.broadphase||2],this.performance=null,this.isStat=void 0!==t.info&&t.info,this.isStat&&(this.performance=new O(this)),this.enableRandomizer=void 0===t.random||t.random,this.rigidBodies=null,this.numRigidBodies=0,this.contacts=null,this.unusedContacts=null,this.numContacts=0,this.numContactPoints=0,this.joints=null,this.numJoints=0,this.numIslands=0,this.gravity=new k(0,-9.8,0),void 0!==t.gravity&&this.gravity.fromArray(t.gravity);this.detectors=[],this.detectors.length=5;for(var e=5;e--;)this.detectors[e]=[],this.detectors[e].length=5;this.detectors[x][x]=new Vt,this.detectors[x][b]=new Dt(!1),this.detectors[b][x]=new Dt(!0),this.detectors[b][b]=new It,this.detectors[w][w]=new kt,this.detectors[w][b]=new Ot(!0),this.detectors[b][w]=new Ot(!1),this.detectors[w][x]=new Bt(!0),this.detectors[x][w]=new Bt(!1),this.detectors[M][x]=new Ut(!0),this.detectors[x][M]=new Ut(!1),this.detectors[M][b]=new Ft(!0),this.detectors[b][M]=new Ft(!1),this.randX=65535,this.randA=98765,this.randB=123456789,this.islandRigidBodies=[],this.islandStack=[],this.islandConstraints=[]}Object.assign(Mt.prototype,{Proxy:!0,update:function(){I(\"Proxy\",\"Inheritance error.\")}}),_t.prototype=Object.assign(Object.create(Mt.prototype),{constructor:_t,update:function(){}}),St.prototype=Object.assign(Object.create(bt.prototype),{constructor:St,createProxy:function(t){return new _t(t)},addProxy:function(t){this.proxies.push(t)},removeProxy:function(t){var e=this.proxies.indexOf(t);e>-1&&this.proxies.splice(e,1)},collectPairs:function(){var t,e,i,n=0,r=this.proxies,s=r.length;for(this.numPairChecks=s*(s-1)>>1;n<s;)for(e=r[n++],t=n+1;t<s;)i=r[t++],!e.aabb.intersectTest(i.aabb)&&this.isAvailablePair(e.shape,i.shape)&&this.addPair(e.shape,i.shape)}}),Object.assign(Et.prototype,{SAPAxis:!0,addElements:function(t,e){if(this.numElements+2>=this.bufferSize){this.bufferSize*=2;for(var i=[],n=this.numElements;n--;)i[n]=this.elements[n]}this.elements[this.numElements++]=t,this.elements[this.numElements++]=e},removeElements:function(t,e){for(var i=-1,n=-1,r=0,s=this.numElements;r<s;r++){var a=this.elements[r];if(a==t||a==e){if(-1!=i){n=r;break}i=r}}for(r=i+1,s=n;r<s;r++)this.elements[r-1]=this.elements[r];for(r=n+1,s=this.numElements;r<s;r++)this.elements[r-2]=this.elements[r];this.elements[--this.numElements]=null,this.elements[--this.numElements]=null},sort:function(){for(var t=0,e=1;this.numElements>>e!=0;)e++;e=e*this.numElements>>2,t=0;for(var i=!1,n=this.elements,r=1,s=this.numElements;r<s;r++){var a=n[r],o=a.value,h=n[r-1];if(h.value>o){var l=r;do{if(n[l]=h,0==--l)break;h=n[l-1]}while(h.value>o);if(n[l]=a,(t+=r-l)>e){i=!0;break}}}if(i){t=2;var c=this.stack;for(c[0]=0,c[1]=this.numElements-1;t>0;){var u=c[--t],p=c[--t],d=u-p;if(d>16){var m=p+C.floor(.5*d);for(a=n[m],n[m]=n[u],n[u]=a,o=a.value,r=p-1,l=u;;){var f,v;do{f=n[++r]}while(f.value<o);do{v=n[--l]}while(o<v.value&&l!=p);if(r>=l)break;n[r]=v,n[l]=f}n[u]=n[r],n[r]=a,r-p>u-r?(c[t++]=p,c[t++]=r-1,c[t++]=r+1,c[t++]=u):(c[t++]=r+1,c[t++]=u,c[t++]=p,c[t++]=r-1)}else for(r=p+1;r<=u;r++)if(o=(a=n[r]).value,(h=n[r-1]).value>o){l=r;do{if(n[l]=h,0==--l)break;h=n[l-1]}while(h.value>o);n[l]=a}}}},calculateTestCount:function(){for(var t=1,e=0,i=1,n=this.numElements;i<n;i++)this.elements[i].max?t--:(e+=t,t++);return e}}),Lt.prototype=Object.assign(Object.create(Mt.prototype),{constructor:Lt,isDynamic:function(){var t=this.shape.parent;return t.isDynamic&&!t.sleeping},update:function(){var t=this.aabb.elements;this.min[0].value=t[0],this.min[1].value=t[1],this.min[2].value=t[2],this.max[0].value=t[3],this.max[1].value=t[4],this.max[2].value=t[5],(1==this.belongsTo&&!this.isDynamic()||2==this.belongsTo&&this.isDynamic())&&(this.sap.removeProxy(this),this.sap.addProxy(this))}}),At.prototype=Object.assign(Object.create(bt.prototype),{constructor:At,createProxy:function(t){return new Lt(this,t)},addProxy:function(t){var e=t;e.isDynamic()?(this.axesD[0].addElements(e.min[0],e.max[0]),this.axesD[1].addElements(e.min[1],e.max[1]),this.axesD[2].addElements(e.min[2],e.max[2]),e.belongsTo=1,this.numElementsD+=2):(this.axesS[0].addElements(e.min[0],e.max[0]),this.axesS[1].addElements(e.min[1],e.max[1]),this.axesS[2].addElements(e.min[2],e.max[2]),e.belongsTo=2,this.numElementsS+=2)},removeProxy:function(t){var e=t;if(0!=e.belongsTo){switch(e.belongsTo){case 1:this.axesD[0].removeElements(e.min[0],e.max[0]),this.axesD[1].removeElements(e.min[1],e.max[1]),this.axesD[2].removeElements(e.min[2],e.max[2]),this.numElementsD-=2;break;case 2:this.axesS[0].removeElements(e.min[0],e.max[0]),this.axesS[1].removeElements(e.min[1],e.max[1]),this.axesS[2].removeElements(e.min[2],e.max[2]),this.numElementsS-=2}e.belongsTo=0}},collectPairs:function(){if(0!=this.numElementsD){var t,e,i,n,r=this.axesD[this.index1],s=this.axesD[this.index2];r.sort(),s.sort(),r.calculateTestCount()<=s.calculateTestCount()?((s=this.axesS[this.index1]).sort(),t=r.elements,e=s.elements):((r=this.axesS[this.index2]).sort(),t=s.elements,e=r.elements,this.index1^=this.index2,this.index2^=this.index1,this.index1^=this.index2);for(var a=0,o=0;a<this.numElementsD;){var h,l;if(o==this.numElementsS)h=t[a],l=!0,a++;else{var c=t[a],u=e[o];c.value<u.value?(h=c,l=!0,a++):(h=u,l=!1,o++)}if(h.max){var p=h.pair;if(l){if(p==i){i=i.pair;continue}h=i}else{if(p==n){n=n.pair;continue}h=n}do{if((y=h.pair)==p){h.pair=y.pair;break}h=y}while(null!=h)}else{for(var d=h.proxy.shape,m=h.min1.value,f=h.max1.value,v=h.min2.value,g=h.max2.value,y=i;null!=y;y=y.pair){var x=y.proxy.shape;this.numPairChecks++,m>y.max1.value||f<y.min1.value||v>y.max2.value||g<y.min2.value||!this.isAvailablePair(d,x)||this.addPair(d,x)}if(l){for(y=n;null!=y;y=y.pair)x=y.proxy.shape,this.numPairChecks++,m>y.max1.value||f<y.min1.value||v>y.max2.value||g<y.min2.value||!this.isAvailablePair(d,x)||this.addPair(d,x);h.pair=i,i=h}else h.pair=n,n=h}}this.index2=3^(this.index1|this.index2)}}}),Object.assign(zt.prototype,{DBVT:!0,moveLeaf:function(t){this.deleteLeaf(t),this.insertLeaf(t)},insertLeaf:function(t){if(null!=this.root){for(var e,i,n=t.aabb,r=this.root;null==r.proxy;){var s=r.child1,a=r.child2,o=r.aabb,h=s.aabb,l=a.aabb;e=o.surfaceArea(),this.aabb.combine(n,o);var c=2*(i=this.aabb.surfaceArea()),u=2*(i-e),p=u;this.aabb.combine(n,h),null!=s.proxy?p+=this.aabb.surfaceArea():p+=this.aabb.surfaceArea()-h.surfaceArea();var d=u;if(this.aabb.combine(n,l),null!=a.proxy?d+=this.aabb.surfaceArea():d+=this.aabb.surfaceArea()-l.surfaceArea(),p<d){if(c<p)break;r=s}else{if(c<d)break;r=a}}var m,f=r.parent;(m=this.numFreeNodes>0?this.freeNodes[--this.numFreeNodes]:new Pt).parent=f,m.child1=t,m.child2=r,m.aabb.combine(t.aabb,r.aabb),m.height=r.height+1,r.parent=m,t.parent=m,r==this.root?this.root=m:f.child1==r?f.child1=m:f.child2=m;do{m=this.balance(m),this.fix(m),m=m.parent}while(null!=m)}else this.root=t},getBalance:function(t){return null!=t.proxy?0:t.child1.height-t.child2.height},deleteLeaf:function(t){if(t!=this.root){var e,i=t.parent;if(e=i.child1==t?i.child2:i.child1,i==this.root)return this.root=e,void(e.parent=null);var n=i.parent;e.parent=n,n.child1==i?n.child1=e:n.child2=e,this.numFreeNodes<16384&&(this.freeNodes[this.numFreeNodes++]=i);do{n=this.balance(n),this.fix(n),n=n.parent}while(null!=n)}else this.root=null},balance:function(t){var e=t.height;if(e<2)return t;var i,n=t.parent,r=t.child1,s=t.child2,a=r.height,o=s.height,h=a-o;if(h>1){var l=r.child1,c=r.child2,u=l.height,p=c.height;return u>p?(r.child2=t,t.parent=r,t.child1=c,c.parent=t,t.aabb.combine(c.aabb,s.aabb),i=p-o,t.height=p-(i&i>>31)+1,r.aabb.combine(l.aabb,t.aabb),i=u-e,r.height=u-(i&i>>31)+1):(r.child1=t,t.parent=r,t.child1=l,l.parent=t,t.aabb.combine(l.aabb,s.aabb),i=u-o,t.height=u-(i&i>>31)+1,r.aabb.combine(t.aabb,c.aabb),i=e-p,r.height=e-(i&i>>31)+1),null!=n?n.child1==t?n.child1=r:n.child2=r:this.root=r,r.parent=n,r}if(h<-1){var d=s.child1,m=s.child2,f=d.height,v=m.height;return f>v?(s.child2=t,t.parent=s,t.child2=m,m.parent=t,t.aabb.combine(r.aabb,m.aabb),i=a-v,t.height=a-(i&i>>31)+1,s.aabb.combine(d.aabb,t.aabb),i=f-e,s.height=f-(i&i>>31)+1):(s.child1=t,t.parent=s,t.child2=d,d.parent=t,t.aabb.combine(r.aabb,d.aabb),i=a-f,t.height=a-(i&i>>31)+1,s.aabb.combine(t.aabb,m.aabb),i=e-v,s.height=e-(i&i>>31)+1),null!=n?n.child1==t?n.child1=s:n.child2=s:this.root=s,s.parent=n,s}return t},fix:function(t){var e=t.child1,i=t.child2;t.aabb.combine(e.aabb,i.aabb),t.height=e.height<i.height?i.height+1:e.height+1}}),Nt.prototype=Object.assign(Object.create(Mt.prototype),{constructor:Nt,update:function(){}}),Rt.prototype=Object.assign(Object.create(bt.prototype),{constructor:Rt,createProxy:function(t){return new Nt(t)},addProxy:function(t){this.tree.insertLeaf(t.leaf),this.leaves.push(t.leaf),this.numLeaves++},removeProxy:function(t){this.tree.deleteLeaf(t.leaf);var e=this.leaves.indexOf(t.leaf);e>-1&&(this.leaves.splice(e,1),this.numLeaves--)},collectPairs:function(){if(!(this.numLeaves<2))for(var t,e=this.numLeaves;e--;)(t=this.leaves[e]).proxy.aabb.intersectTestTwo(t.aabb)&&(t.aabb.copy(t.proxy.aabb,.1),this.tree.deleteLeaf(t),this.tree.insertLeaf(t),this.collide(t,this.tree.root))},collide:function(t,e){var i,n,r,s,a,o,h=2;for(this.stack[0]=t,this.stack[1]=e;h>0;)if(r=this.stack[--h],s=this.stack[--h],a=null!=r.proxy,o=null!=s.proxy,this.numPairChecks++,a&&o){if((i=r.proxy.shape)==(n=s.proxy.shape)||i.aabb.intersectTest(n.aabb)||!this.isAvailablePair(i,n))continue;this.addPair(i,n)}else{if(r.aabb.intersectTest(s.aabb))continue;o||!a&&r.aabb.surfaceArea()>s.aabb.surfaceArea()?(this.stack[h++]=r.child1,this.stack[h++]=s,this.stack[h++]=r.child2,this.stack[h++]=s):(this.stack[h++]=r,this.stack[h++]=s.child1,this.stack[h++]=r,this.stack[h++]=s.child2)}}}),Object.assign(Ct.prototype,{CollisionDetector:!0,detectCollision:function(t,e,i){I(\"CollisionDetector\",\"Inheritance error.\")}}),It.prototype=Object.assign(Object.create(Ct.prototype),{constructor:It,detectCollision:function(t,e,i){var n,r;t.id<e.id?(n=t,r=e):(n=e,r=t);var s,a,o,h,l,c,u,p,d,m,f,v,g,y,x,b,w,M,_,S,E,T,L,A,P,z,N,R,I,O,k,D,B,V,U,F=n.elements,H=r.elements,G=n.dimentions,j=r.dimentions,W=n.position,q=r.position,X=W.x,Y=W.y,J=W.z,Z=q.x,Q=q.y,K=q.z,$=Z-X,tt=Q-Y,et=K-J,it=n.halfWidth,nt=n.halfHeight,rt=n.halfDepth,st=r.halfWidth,at=r.halfHeight,ot=r.halfDepth,ht=G[0],lt=G[1],ct=G[2],ut=G[3],pt=G[4],dt=G[5],mt=G[6],ft=G[7],vt=G[8],gt=G[9],yt=G[10],xt=G[11],bt=G[12],wt=G[13],Mt=G[14],_t=G[15],St=G[16],Et=G[17],Tt=j[0],Lt=j[1],At=j[2],Pt=j[3],zt=j[4],Nt=j[5],Rt=j[6],Ct=j[7],It=j[8],Ot=j[9],kt=j[10],Dt=j[11],Bt=j[12],Vt=j[13],Ut=j[14],Ft=j[15],Ht=j[16],Gt=j[17],jt=lt*At-ct*Lt,Wt=ct*Tt-ht*At,qt=ht*Lt-lt*Tt,Xt=lt*Nt-ct*zt,Yt=ct*Pt-ht*Nt,Jt=ht*zt-lt*Pt,Zt=lt*It-ct*Ct,Qt=ct*Rt-ht*It,Kt=ht*Ct-lt*Rt,$t=pt*At-dt*Lt,te=dt*Tt-ut*At,ee=ut*Lt-pt*Tt,ie=pt*Nt-dt*zt,ne=dt*Pt-ut*Nt,re=ut*zt-pt*Pt,se=pt*It-dt*Ct,ae=dt*Rt-ut*It,oe=ut*Ct-pt*Rt,he=ft*At-vt*Lt,le=vt*Tt-mt*At,ce=mt*Lt-ft*Tt,ue=ft*Nt-vt*zt,pe=vt*Pt-mt*Nt,de=mt*zt-ft*Pt,me=ft*It-vt*Ct,fe=vt*Rt-mt*It,ve=mt*Ct-ft*Rt,ge=!1,ye=!1,xe=!1,be=!1,we=!1,Me=!1,_e=!1,Se=!1,Ee=!1;if((s=(k=ht*$+lt*tt+ct*et)>0)||(k=-k),(B=ht*Tt+lt*Lt+ct*At)<0&&(B=-B),(V=ht*Pt+lt*zt+ct*Nt)<0&&(V=-V),(U=ht*Rt+lt*Ct+ct*It)<0&&(U=-U),!((b=k-(D=it)-(B*st+V*at+U*ot))>0||((a=(k=ut*$+pt*tt+dt*et)>0)||(k=-k),(B=ut*Tt+pt*Lt+dt*At)<0&&(B=-B),(V=ut*Pt+pt*zt+dt*Nt)<0&&(V=-V),(U=ut*Rt+pt*Ct+dt*It)<0&&(U=-U),(w=k-(D=nt)-(B*st+V*at+U*ot))>0||((o=(k=mt*$+ft*tt+vt*et)>0)||(k=-k),(B=mt*Tt+ft*Lt+vt*At)<0&&(B=-B),(V=mt*Pt+ft*zt+vt*Nt)<0&&(V=-V),(U=mt*Rt+ft*Ct+vt*It)<0&&(U=-U),(M=k-(D=rt)-(B*st+V*at+U*ot))>0||((h=(k=Tt*$+Lt*tt+At*et)>0)||(k=-k),(B=Tt*ht+Lt*lt+At*ct)<0&&(B=-B),(V=Tt*ut+Lt*pt+At*dt)<0&&(V=-V),(U=Tt*mt+Lt*ft+At*vt)<0&&(U=-U),(_=1*(k-(D=B*it+V*nt+U*rt)-st))>0||((l=(k=Pt*$+zt*tt+Nt*et)>0)||(k=-k),(B=Pt*ht+zt*lt+Nt*ct)<0&&(B=-B),(V=Pt*ut+zt*pt+Nt*dt)<0&&(V=-V),(U=Pt*mt+zt*ft+Nt*vt)<0&&(U=-U),(S=1*(k-(D=B*it+V*nt+U*rt)-at))>0||((c=(k=Rt*$+Ct*tt+It*et)>0)||(k=-k),(B=Rt*ht+Ct*lt+It*ct)<0&&(B=-B),(V=Rt*ut+Ct*pt+It*dt)<0&&(V=-V),(U=Rt*mt+Ct*ft+It*vt)<0&&(U=-U),(E=1*(k-(D=B*it+V*nt+U*rt)-ot))>0))))))){if((k=jt*jt+Wt*Wt+qt*qt)>1e-5){if((u=(k=(jt*=k=1/C.sqrt(k))*$+(Wt*=k)*tt+(qt*=k)*et)>0)||(k=-k),(B=jt*ut+Wt*pt+qt*dt)<0&&(B=-B),(V=jt*mt+Wt*ft+qt*vt)<0&&(V=-V),D=B*nt+V*rt,(B=jt*Pt+Wt*zt+qt*Nt)<0&&(B=-B),(V=jt*Rt+Wt*Ct+qt*It)<0&&(V=-V),(T=k-D-(B*at+V*ot))>0)return}else u=!1,T=0,ge=!0;if((k=Xt*Xt+Yt*Yt+Jt*Jt)>1e-5){if((p=(k=(Xt*=k=1/C.sqrt(k))*$+(Yt*=k)*tt+(Jt*=k)*et)>0)||(k=-k),(B=Xt*ut+Yt*pt+Jt*dt)<0&&(B=-B),(V=Xt*mt+Yt*ft+Jt*vt)<0&&(V=-V),D=B*nt+V*rt,(B=Xt*Tt+Yt*Lt+Jt*At)<0&&(B=-B),(V=Xt*Rt+Yt*Ct+Jt*It)<0&&(V=-V),(L=k-D-(B*st+V*ot))>0)return}else p=!1,L=0,ye=!0;if((k=Zt*Zt+Qt*Qt+Kt*Kt)>1e-5){if((d=(k=(Zt*=k=1/C.sqrt(k))*$+(Qt*=k)*tt+(Kt*=k)*et)>0)||(k=-k),(B=Zt*ut+Qt*pt+Kt*dt)<0&&(B=-B),(V=Zt*mt+Qt*ft+Kt*vt)<0&&(V=-V),D=B*nt+V*rt,(B=Zt*Tt+Qt*Lt+Kt*At)<0&&(B=-B),(V=Zt*Pt+Qt*zt+Kt*Nt)<0&&(V=-V),(A=k-D-(B*st+V*at))>0)return}else d=!1,A=0,xe=!0;if((k=$t*$t+te*te+ee*ee)>1e-5){if((m=(k=($t*=k=1/C.sqrt(k))*$+(te*=k)*tt+(ee*=k)*et)>0)||(k=-k),(B=$t*ht+te*lt+ee*ct)<0&&(B=-B),(V=$t*mt+te*ft+ee*vt)<0&&(V=-V),D=B*it+V*rt,(B=$t*Pt+te*zt+ee*Nt)<0&&(B=-B),(V=$t*Rt+te*Ct+ee*It)<0&&(V=-V),(P=k-D-(B*at+V*ot))>0)return}else m=!1,P=0,be=!0;if((k=ie*ie+ne*ne+re*re)>1e-5){if((f=(k=(ie*=k=1/C.sqrt(k))*$+(ne*=k)*tt+(re*=k)*et)>0)||(k=-k),(B=ie*ht+ne*lt+re*ct)<0&&(B=-B),(V=ie*mt+ne*ft+re*vt)<0&&(V=-V),D=B*it+V*rt,(B=ie*Tt+ne*Lt+re*At)<0&&(B=-B),(V=ie*Rt+ne*Ct+re*It)<0&&(V=-V),(z=k-D-(B*st+V*ot))>0)return}else f=!1,z=0,we=!0;if((k=se*se+ae*ae+oe*oe)>1e-5){if((v=(k=(se*=k=1/C.sqrt(k))*$+(ae*=k)*tt+(oe*=k)*et)>0)||(k=-k),(B=se*ht+ae*lt+oe*ct)<0&&(B=-B),(V=se*mt+ae*ft+oe*vt)<0&&(V=-V),D=B*it+V*rt,(B=se*Tt+ae*Lt+oe*At)<0&&(B=-B),(V=se*Pt+ae*zt+oe*Nt)<0&&(V=-V),(N=k-D-(B*st+V*at))>0)return}else v=!1,N=0,Me=!0;if((k=he*he+le*le+ce*ce)>1e-5){if((g=(k=(he*=k=1/C.sqrt(k))*$+(le*=k)*tt+(ce*=k)*et)>0)||(k=-k),(B=he*ht+le*lt+ce*ct)<0&&(B=-B),(V=he*ut+le*pt+ce*dt)<0&&(V=-V),D=B*it+V*nt,(B=he*Pt+le*zt+ce*Nt)<0&&(B=-B),(V=he*Rt+le*Ct+ce*It)<0&&(V=-V),(R=k-D-(B*at+V*ot))>0)return}else g=!1,R=0,_e=!0;if((k=ue*ue+pe*pe+de*de)>1e-5){if((y=(k=(ue*=k=1/C.sqrt(k))*$+(pe*=k)*tt+(de*=k)*et)>0)||(k=-k),(B=ue*ht+pe*lt+de*ct)<0&&(B=-B),(V=ue*ut+pe*pt+de*dt)<0&&(V=-V),D=B*it+V*nt,(B=ue*Tt+pe*Lt+de*At)<0&&(B=-B),(V=ue*Rt+pe*Ct+de*It)<0&&(V=-V),(I=k-D-(B*st+V*ot))>0)return}else y=!1,I=0,Se=!0;if((k=me*me+fe*fe+ve*ve)>1e-5){if((x=(k=(me*=k=1/C.sqrt(k))*$+(fe*=k)*tt+(ve*=k)*et)>0)||(k=-k),(B=me*ht+fe*lt+ve*ct)<0&&(B=-B),(V=me*ut+fe*pt+ve*dt)<0&&(V=-V),D=B*it+V*nt,(B=me*Tt+fe*Lt+ve*At)<0&&(B=-B),(V=me*Pt+fe*zt+ve*Nt)<0&&(V=-V),(O=k-D-(B*st+V*at))>0)return}else x=!1,O=0,Ee=!0;var Te=b,Le=b,Ae=0,Pe=s;w>Le&&(Te=w,Le=w,Ae=1,Pe=a),M>Le&&(Te=M,Le=M,Ae=2,Pe=o),_>Le&&(Te=_,Le=_,Ae=3,Pe=h),S>Le&&(Te=S,Le=S,Ae=4,Pe=l),E>Le&&(Te=E,Le=E,Ae=5,Pe=c),T-.01>Le&&!ge&&(Te=T,Le=T-.01,Ae=6,Pe=u),L-.01>Le&&!ye&&(Te=L,Le=L-.01,Ae=7,Pe=p),A-.01>Le&&!xe&&(Te=A,Le=A-.01,Ae=8,Pe=d),P-.01>Le&&!be&&(Te=P,Le=P-.01,Ae=9,Pe=m),z-.01>Le&&!we&&(Te=z,Le=z-.01,Ae=10,Pe=f),N-.01>Le&&!Me&&(Te=N,Le=N-.01,Ae=11,Pe=v),R-.01>Le&&!_e&&(Te=R,Le=R-.01,Ae=12,Pe=g),I-.01>Le&&!Se&&(Te=I,Le=I-.01,Ae=13,Pe=y),O-.01>Le&&!Ee&&(Te=O,Ae=14,Pe=x);var ze=0,Ne=0,Re=0,Ce=0,Ie=0,Oe=0,ke=0,De=0,Be=0,Ve=0,Ue=0,Fe=0,He=0,Ge=0,je=0,We=0,qe=0,Xe=0,Ye=!1;if(0==Ae?(Pe?(Ve=X+gt,Ue=Y+yt,Fe=J+xt,ze=ht,Ne=lt,Re=ct):(Ve=X-gt,Ue=Y-yt,Fe=J-xt,ze=-ht,Ne=-lt,Re=-ct),He=bt,Ge=wt,je=Mt,Ce=-ut,Ie=-pt,Oe=-dt,We=_t,qe=St,Xe=Et,ke=-mt,De=-ft,Be=-vt):1==Ae?(Pe?(Ve=X+bt,Ue=Y+wt,Fe=J+Mt,ze=ut,Ne=pt,Re=dt):(Ve=X-bt,Ue=Y-wt,Fe=J-Mt,ze=-ut,Ne=-pt,Re=-dt),He=gt,Ge=yt,je=xt,Ce=-ht,Ie=-lt,Oe=-ct,We=_t,qe=St,Xe=Et,ke=-mt,De=-ft,Be=-vt):2==Ae?(Pe?(Ve=X+_t,Ue=Y+St,Fe=J+Et,ze=mt,Ne=ft,Re=vt):(Ve=X-_t,Ue=Y-St,Fe=J-Et,ze=-mt,Ne=-ft,Re=-vt),He=gt,Ge=yt,je=xt,Ce=-ht,Ie=-lt,Oe=-ct,We=bt,qe=wt,Xe=Mt,ke=-ut,De=-pt,Be=-dt):3==Ae?(Ye=!0,Pe?(Ve=Z-Ot,Ue=Q-kt,Fe=K-Dt,ze=-Tt,Ne=-Lt,Re=-At):(Ve=Z+Ot,Ue=Q+kt,Fe=K+Dt,ze=Tt,Ne=Lt,Re=At),He=Bt,Ge=Vt,je=Ut,Ce=-Pt,Ie=-zt,Oe=-Nt,We=Ft,qe=Ht,Xe=Gt,ke=-Rt,De=-Ct,Be=-It):4==Ae?(Ye=!0,Pe?(Ve=Z-Bt,Ue=Q-Vt,Fe=K-Ut,ze=-Pt,Ne=-zt,Re=-Nt):(Ve=Z+Bt,Ue=Q+Vt,Fe=K+Ut,ze=Pt,Ne=zt,Re=Nt),He=Ot,Ge=kt,je=Dt,Ce=-Tt,Ie=-Lt,Oe=-At,We=Ft,qe=Ht,Xe=Gt,ke=-Rt,De=-Ct,Be=-It):5==Ae?(Ye=!0,Pe?(Ve=Z-Ft,Ue=Q-Ht,Fe=K-Gt,ze=-Rt,Ne=-Ct,Re=-It):(Ve=Z+Ft,Ue=Q+Ht,Fe=K+Gt,ze=Rt,Ne=Ct,Re=It),He=Ot,Ge=kt,je=Dt,Ce=-Tt,Ie=-Lt,Oe=-At,We=Bt,qe=Vt,Xe=Ut,ke=-Pt,De=-zt,Be=-Nt):6==Ae?(ze=jt,Ne=Wt,Re=qt,Ce=ht,Ie=lt,Oe=ct,ke=Tt,De=Lt,Be=At):7==Ae?(ze=Xt,Ne=Yt,Re=Jt,Ce=ht,Ie=lt,Oe=ct,ke=Pt,De=zt,Be=Nt):8==Ae?(ze=Zt,Ne=Qt,Re=Kt,Ce=ht,Ie=lt,Oe=ct,ke=Rt,De=Ct,Be=It):9==Ae?(ze=$t,Ne=te,Re=ee,Ce=ut,Ie=pt,Oe=dt,ke=Tt,De=Lt,Be=At):10==Ae?(ze=ie,Ne=ne,Re=re,Ce=ut,Ie=pt,Oe=dt,ke=Pt,De=zt,Be=Nt):11==Ae?(ze=se,Ne=ae,Re=oe,Ce=ut,Ie=pt,Oe=dt,ke=Rt,De=Ct,Be=It):12==Ae?(ze=he,Ne=le,Re=ce,Ce=mt,Ie=ft,Oe=vt,ke=Tt,De=Lt,Be=At):13==Ae?(ze=ue,Ne=pe,Re=de,Ce=mt,Ie=ft,Oe=vt,ke=Pt,De=zt,Be=Nt):14==Ae&&(ze=me,Ne=fe,Re=ve,Ce=mt,Ie=ft,Oe=vt,ke=Rt,De=Ct,Be=It),Ae>5){var Je,Ze,Qe,Ke,$e,ti,ei,ii,ni,ri,si;Pe||(ze=-ze,Ne=-Ne,Re=-Re),Ze=ze*(ti=F[0])+Ne*(ei=F[1])+Re*(ii=F[2]),(Je=ze*(Qe=F[3])+Ne*(Ke=F[4])+Re*($e=F[5]))>Ze&&(Ze=Je,ti=Qe,ei=Ke,ii=$e),(Je=ze*(Qe=F[6])+Ne*(Ke=F[7])+Re*($e=F[8]))>Ze&&(Ze=Je,ti=Qe,ei=Ke,ii=$e),(Je=ze*(Qe=F[9])+Ne*(Ke=F[10])+Re*($e=F[11]))>Ze&&(Ze=Je,ti=Qe,ei=Ke,ii=$e),(Je=ze*(Qe=F[12])+Ne*(Ke=F[13])+Re*($e=F[14]))>Ze&&(Ze=Je,ti=Qe,ei=Ke,ii=$e),(Je=ze*(Qe=F[15])+Ne*(Ke=F[16])+Re*($e=F[17]))>Ze&&(Ze=Je,ti=Qe,ei=Ke,ii=$e),(Je=ze*(Qe=F[18])+Ne*(Ke=F[19])+Re*($e=F[20]))>Ze&&(Ze=Je,ti=Qe,ei=Ke,ii=$e),(Je=ze*(Qe=F[21])+Ne*(Ke=F[22])+Re*($e=F[23]))>Ze&&(Ze=Je,ti=Qe,ei=Ke,ii=$e),Ze=ze*(ni=H[0])+Ne*(ri=H[1])+Re*(si=H[2]),(Je=ze*(Qe=H[3])+Ne*(Ke=H[4])+Re*($e=H[5]))<Ze&&(Ze=Je,ni=Qe,ri=Ke,si=$e),(Je=ze*(Qe=H[6])+Ne*(Ke=H[7])+Re*($e=H[8]))<Ze&&(Ze=Je,ni=Qe,ri=Ke,si=$e),(Je=ze*(Qe=H[9])+Ne*(Ke=H[10])+Re*($e=H[11]))<Ze&&(Ze=Je,ni=Qe,ri=Ke,si=$e),(Je=ze*(Qe=H[12])+Ne*(Ke=H[13])+Re*($e=H[14]))<Ze&&(Ze=Je,ni=Qe,ri=Ke,si=$e),(Je=ze*(Qe=H[15])+Ne*(Ke=H[16])+Re*($e=H[17]))<Ze&&(Ze=Je,ni=Qe,ri=Ke,si=$e),(Je=ze*(Qe=H[18])+Ne*(Ke=H[19])+Re*($e=H[20]))<Ze&&(Ze=Je,ni=Qe,ri=Ke,si=$e),(Je=ze*(Qe=H[21])+Ne*(Ke=H[22])+Re*($e=H[23]))<Ze&&(Ze=Je,ni=Qe,ri=Ke,si=$e);var ai=((Qe=ni-ti)*(Ce-ke*(B=Ce*ke+Ie*De+Oe*Be))+(Ke=ri-ei)*(Ie-De*B)+($e=si-ii)*(Oe-Be*B))/(1-B*B);i.addPoint(ti+Ce*ai+ze*Te*.5,ei+Ie*ai+Ne*Te*.5,ii+Oe*ai+Re*Te*.5,ze,Ne,Re,Te,!1)}else{var oi,hi,li,ci,ui,pi,di,mi,fi,vi,gi,yi,xi,bi,wi,Mi,_i,Si,Ei,Ti,Li,Ai=1,Pi=0,zi=0;Ye?((Pi=ht*ze+lt*Ne+ct*Re)<Ai&&(Ai=Pi,zi=0),-Pi<Ai&&(Ai=-Pi,zi=1),(Pi=ut*ze+pt*Ne+dt*Re)<Ai&&(Ai=Pi,zi=2),-Pi<Ai&&(Ai=-Pi,zi=3),(Pi=mt*ze+ft*Ne+vt*Re)<Ai&&(Ai=Pi,zi=4),-Pi<Ai&&(Ai=-Pi,zi=5),0==zi?(oi=F[0],hi=F[1],li=F[2],ci=F[6],ui=F[7],pi=F[8],di=F[9],mi=F[10],fi=F[11],vi=F[3],gi=F[4],yi=F[5]):1==zi?(oi=F[15],hi=F[16],li=F[17],ci=F[21],ui=F[22],pi=F[23],di=F[18],mi=F[19],fi=F[20],vi=F[12],gi=F[13],yi=F[14]):2==zi?(oi=F[12],hi=F[13],li=F[14],ci=F[0],ui=F[1],pi=F[2],di=F[3],mi=F[4],fi=F[5],vi=F[15],gi=F[16],yi=F[17]):3==zi?(oi=F[21],hi=F[22],li=F[23],ci=F[9],ui=F[10],pi=F[11],di=F[6],mi=F[7],fi=F[8],vi=F[18],gi=F[19],yi=F[20]):4==zi?(oi=F[12],hi=F[13],li=F[14],ci=F[18],ui=F[19],pi=F[20],di=F[6],mi=F[7],fi=F[8],vi=F[0],gi=F[1],yi=F[2]):5==zi&&(oi=F[3],hi=F[4],li=F[5],ci=H[9],ui=H[10],pi=H[11],di=F[21],mi=F[22],fi=F[23],vi=F[15],gi=F[16],yi=F[17])):((Pi=Tt*ze+Lt*Ne+At*Re)<Ai&&(Ai=Pi,zi=0),-Pi<Ai&&(Ai=-Pi,zi=1),(Pi=Pt*ze+zt*Ne+Nt*Re)<Ai&&(Ai=Pi,zi=2),-Pi<Ai&&(Ai=-Pi,zi=3),(Pi=Rt*ze+Ct*Ne+It*Re)<Ai&&(Ai=Pi,zi=4),-Pi<Ai&&(Ai=-Pi,zi=5),0==zi?(oi=H[0],hi=H[1],li=H[2],ci=H[6],ui=H[7],pi=H[8],di=H[9],mi=H[10],fi=H[11],vi=H[3],gi=H[4],yi=H[5]):1==zi?(oi=H[15],hi=H[16],li=H[17],ci=H[21],ui=H[22],pi=H[23],di=H[18],mi=H[19],fi=H[20],vi=H[12],gi=H[13],yi=H[14]):2==zi?(oi=H[12],hi=H[13],li=H[14],ci=H[0],ui=H[1],pi=H[2],di=H[3],mi=H[4],fi=H[5],vi=H[15],gi=H[16],yi=H[17]):3==zi?(oi=H[21],hi=H[22],li=H[23],ci=H[9],ui=H[10],pi=H[11],di=H[6],mi=H[7],fi=H[8],vi=H[18],gi=H[19],yi=H[20]):4==zi?(oi=H[12],hi=H[13],li=H[14],ci=H[18],ui=H[19],pi=H[20],di=H[6],mi=H[7],fi=H[8],vi=H[0],gi=H[1],yi=H[2]):5==zi&&(oi=H[3],hi=H[4],li=H[5],ci=H[9],ui=H[10],pi=H[11],di=H[21],mi=H[22],fi=H[23],vi=H[15],gi=H[16],yi=H[17])),this.clipVertices1[0]=oi,this.clipVertices1[1]=hi,this.clipVertices1[2]=li,this.clipVertices1[3]=ci,this.clipVertices1[4]=ui,this.clipVertices1[5]=pi,this.clipVertices1[6]=di,this.clipVertices1[7]=mi,this.clipVertices1[8]=fi,this.clipVertices1[9]=vi,this.clipVertices1[10]=gi,this.clipVertices1[11]=yi,bi=0,B=((Mi=this.clipVertices1[9])-Ve-He)*Ce+((_i=this.clipVertices1[10])-Ue-Ge)*Ie+((Si=this.clipVertices1[11])-Fe-je)*Oe;for(var Ni=0;Ni<4;Ni++)wi=3*Ni,V=((Ei=this.clipVertices1[wi])-Ve-He)*Ce+((Ti=this.clipVertices1[wi+1])-Ue-Ge)*Ie+((Li=this.clipVertices1[wi+2])-Fe-je)*Oe,B>0?V>0?(wi=3*bi,bi++,this.clipVertices2[wi]=Ei,this.clipVertices2[wi+1]=Ti,this.clipVertices2[wi+2]=Li):(wi=3*bi,bi++,ai=B/(B-V),this.clipVertices2[wi]=Mi+(Ei-Mi)*ai,this.clipVertices2[wi+1]=_i+(Ti-_i)*ai,this.clipVertices2[wi+2]=Si+(Li-Si)*ai):V>0&&(wi=3*bi,bi++,ai=B/(B-V),this.clipVertices2[wi]=Mi+(Ei-Mi)*ai,this.clipVertices2[wi+1]=_i+(Ti-_i)*ai,this.clipVertices2[wi+2]=Si+(Li-Si)*ai,wi=3*bi,bi++,this.clipVertices2[wi]=Ei,this.clipVertices2[wi+1]=Ti,this.clipVertices2[wi+2]=Li),Mi=Ei,_i=Ti,Si=Li,B=V;if(0!=(xi=bi)){for(bi=0,wi=3*(xi-1),B=((Mi=this.clipVertices2[wi])-Ve-We)*ke+((_i=this.clipVertices2[wi+1])-Ue-qe)*De+((Si=this.clipVertices2[wi+2])-Fe-Xe)*Be,Ni=0;Ni<xi;Ni++)wi=3*Ni,V=((Ei=this.clipVertices2[wi])-Ve-We)*ke+((Ti=this.clipVertices2[wi+1])-Ue-qe)*De+((Li=this.clipVertices2[wi+2])-Fe-Xe)*Be,B>0?V>0?(wi=3*bi,bi++,this.clipVertices1[wi]=Ei,this.clipVertices1[wi+1]=Ti,this.clipVertices1[wi+2]=Li):(wi=3*bi,bi++,ai=B/(B-V),this.clipVertices1[wi]=Mi+(Ei-Mi)*ai,this.clipVertices1[wi+1]=_i+(Ti-_i)*ai,this.clipVertices1[wi+2]=Si+(Li-Si)*ai):V>0&&(wi=3*bi,bi++,ai=B/(B-V),this.clipVertices1[wi]=Mi+(Ei-Mi)*ai,this.clipVertices1[wi+1]=_i+(Ti-_i)*ai,this.clipVertices1[wi+2]=Si+(Li-Si)*ai,wi=3*bi,bi++,this.clipVertices1[wi]=Ei,this.clipVertices1[wi+1]=Ti,this.clipVertices1[wi+2]=Li),Mi=Ei,_i=Ti,Si=Li,B=V;if(0!=(xi=bi)){for(bi=0,wi=3*(xi-1),B=((Mi=this.clipVertices1[wi])-Ve+He)*-Ce+((_i=this.clipVertices1[wi+1])-Ue+Ge)*-Ie+((Si=this.clipVertices1[wi+2])-Fe+je)*-Oe,Ni=0;Ni<xi;Ni++)wi=3*Ni,V=((Ei=this.clipVertices1[wi])-Ve+He)*-Ce+((Ti=this.clipVertices1[wi+1])-Ue+Ge)*-Ie+((Li=this.clipVertices1[wi+2])-Fe+je)*-Oe,B>0?V>0?(wi=3*bi,bi++,this.clipVertices2[wi]=Ei,this.clipVertices2[wi+1]=Ti,this.clipVertices2[wi+2]=Li):(wi=3*bi,bi++,ai=B/(B-V),this.clipVertices2[wi]=Mi+(Ei-Mi)*ai,this.clipVertices2[wi+1]=_i+(Ti-_i)*ai,this.clipVertices2[wi+2]=Si+(Li-Si)*ai):V>0&&(wi=3*bi,bi++,ai=B/(B-V),this.clipVertices2[wi]=Mi+(Ei-Mi)*ai,this.clipVertices2[wi+1]=_i+(Ti-_i)*ai,this.clipVertices2[wi+2]=Si+(Li-Si)*ai,wi=3*bi,bi++,this.clipVertices2[wi]=Ei,this.clipVertices2[wi+1]=Ti,this.clipVertices2[wi+2]=Li),Mi=Ei,_i=Ti,Si=Li,B=V;if(0!=(xi=bi)){for(bi=0,wi=3*(xi-1),B=((Mi=this.clipVertices2[wi])-Ve+We)*-ke+((_i=this.clipVertices2[wi+1])-Ue+qe)*-De+((Si=this.clipVertices2[wi+2])-Fe+Xe)*-Be,Ni=0;Ni<xi;Ni++)wi=3*Ni,V=((Ei=this.clipVertices2[wi])-Ve+We)*-ke+((Ti=this.clipVertices2[wi+1])-Ue+qe)*-De+((Li=this.clipVertices2[wi+2])-Fe+Xe)*-Be,B>0?V>0?(wi=3*bi,bi++,this.clipVertices1[wi]=Ei,this.clipVertices1[wi+1]=Ti,this.clipVertices1[wi+2]=Li):(wi=3*bi,bi++,ai=B/(B-V),this.clipVertices1[wi]=Mi+(Ei-Mi)*ai,this.clipVertices1[wi+1]=_i+(Ti-_i)*ai,this.clipVertices1[wi+2]=Si+(Li-Si)*ai):V>0&&(wi=3*bi,bi++,ai=B/(B-V),this.clipVertices1[wi]=Mi+(Ei-Mi)*ai,this.clipVertices1[wi+1]=_i+(Ti-_i)*ai,this.clipVertices1[wi+2]=Si+(Li-Si)*ai,wi=3*bi,bi++,this.clipVertices1[wi]=Ei,this.clipVertices1[wi+1]=Ti,this.clipVertices1[wi+2]=Li),Mi=Ei,_i=Ti,Si=Li,B=V;if(Ye){var Ri=n;n=r,r=Ri}if(0!=(xi=bi)){var Ci=n!=t;if(xi>4){Ce=oi-(Mi=.25*(oi+ci+di+vi)),Ie=hi-(_i=.25*(hi+ui+mi+gi)),Oe=li-(Si=.25*(li+pi+fi+yi)),ke=ci-Mi,De=ui-_i,Be=pi-Si;var Ii=0,Oi=0,ki=0,Di=0,Bi=-this.INF;for(Ai=this.INF,Ni=0;Ni<xi;Ni++)this.used[Ni]=!1,wi=3*Ni,(Pi=(Mi=this.clipVertices1[wi])*Ce+(_i=this.clipVertices1[wi+1])*Ie+(Si=this.clipVertices1[wi+2])*Oe)<Ai&&(Ai=Pi,Ii=Ni),Pi>Bi&&(Bi=Pi,ki=Ni);for(this.used[Ii]=!0,this.used[ki]=!0,Bi=-this.INF,Ai=this.INF,Ni=0;Ni<xi;Ni++)this.used[Ni]||(wi=3*Ni,(Pi=(Mi=this.clipVertices1[wi])*ke+(_i=this.clipVertices1[wi+1])*De+(Si=this.clipVertices1[wi+2])*Be)<Ai&&(Ai=Pi,Oi=Ni),Pi>Bi&&(Bi=Pi,Di=Ni));wi=3*Ii,(Pi=((Mi=this.clipVertices1[wi])-Ve)*ze+((_i=this.clipVertices1[wi+1])-Ue)*Ne+((Si=this.clipVertices1[wi+2])-Fe)*Re)<0&&i.addPoint(Mi,_i,Si,ze,Ne,Re,Pi,Ci),wi=3*Oi,(Pi=((Mi=this.clipVertices1[wi])-Ve)*ze+((_i=this.clipVertices1[wi+1])-Ue)*Ne+((Si=this.clipVertices1[wi+2])-Fe)*Re)<0&&i.addPoint(Mi,_i,Si,ze,Ne,Re,Pi,Ci),wi=3*ki,(Pi=((Mi=this.clipVertices1[wi])-Ve)*ze+((_i=this.clipVertices1[wi+1])-Ue)*Ne+((Si=this.clipVertices1[wi+2])-Fe)*Re)<0&&i.addPoint(Mi,_i,Si,ze,Ne,Re,Pi,Ci),wi=3*Di,(Pi=((Mi=this.clipVertices1[wi])-Ve)*ze+((_i=this.clipVertices1[wi+1])-Ue)*Ne+((Si=this.clipVertices1[wi+2])-Fe)*Re)<0&&i.addPoint(Mi,_i,Si,ze,Ne,Re,Pi,Ci)}else for(Ni=0;Ni<xi;Ni++)wi=3*Ni,(Pi=((Mi=this.clipVertices1[wi])-Ve)*ze+((_i=this.clipVertices1[wi+1])-Ue)*Ne+((Si=this.clipVertices1[wi+2])-Fe)*Re)<0&&i.addPoint(Mi,_i,Si,ze,Ne,Re,Pi,Ci)}}}}}}}}),Ot.prototype=Object.assign(Object.create(Ct.prototype),{constructor:Ot,getSep:function(t,e,i,n,r){var s,a,o,h,l,c,u,p,d,m,f,v,g,y=new k,x=t.position.x,b=t.position.y,w=t.position.z,M=e.position.x,_=e.position.y,S=e.position.z,E=M-x,T=_-b,L=S-w;E*E+T*T+L*L==0&&(T=.001);var A=-E,P=-T,z=-L;this.supportPointB(t,-A,-P,-z,y);var N=y.x,R=y.y,I=y.z;this.supportPointC(e,A,P,z,y);var O=y.x,D=y.y,B=y.z,V=O-N,U=D-R,F=B-I;if(V*A+U*P+F*z<=0)return!1;if((A=U*L-F*T)*A+(P=F*E-V*L)*P+(z=V*T-U*E)*z==0)return i.set(V-E,U-T,F-L).normalize(),n.set(.5*(N+O),.5*(R+D),.5*(I+B)),!0;this.supportPointB(t,-A,-P,-z,y);var H=y.x,G=y.y,j=y.z;this.supportPointC(e,A,P,z,y);var W=y.x,q=y.y,X=y.z,Y=W-H,J=q-G,Z=X-j;if(Y*A+J*P+Z*z<=0)return!1;(A=(a=U-T)*(c=Z-L)-(o=F-L)*(l=J-T))*E+(P=o*(h=Y-E)-(s=V-E)*c)*T+(z=s*l-a*h)*L>0&&(s=V,a=U,o=F,V=Y,U=J,F=Z,Y=s,J=a,Z=o,s=N,a=R,o=I,N=H,R=G,I=j,H=s,G=a,j=o,s=O,a=D,o=B,O=W,D=q,B=X,W=s,q=a,X=o,A=-A,P=-P,z=-z);for(var Q=0;;){if(++Q>100)return!1;this.supportPointB(t,-A,-P,-z,y);var K=y.x,$=y.y,tt=y.z;this.supportPointC(e,A,P,z,y);var et=y.x,it=y.y,nt=y.z,rt=et-K,st=it-$,at=nt-tt;if(rt*A+st*P+at*z<=0)return!1;if((U*at-F*st)*E+(F*rt-V*at)*T+(V*st-U*rt)*L<0)Y=rt,J=st,Z=at,H=K,G=$,j=tt,W=et,q=it,X=nt,A=(a=U-T)*(c=at-L)-(o=F-L)*(l=st-T),P=o*(h=rt-E)-(s=V-E)*c,z=s*l-a*h;else if((st*Z-at*J)*E+(at*Y-rt*Z)*T+(rt*J-st*Y)*L<0)V=rt,U=st,F=at,N=K,R=$,I=tt,O=et,D=it,B=nt,A=(a=st-T)*(c=Z-L)-(o=at-L)*(l=J-T),P=o*(h=Y-E)-(s=rt-E)*c,z=s*l-a*h;else for(var ot=!1;;){if(A=(a=J-U)*(c=at-F)-(o=Z-F)*(l=st-U),P=o*(h=rt-V)-(s=Y-V)*c,z=s*l-a*h,(A*=u=1/C.sqrt(A*A+P*P+z*z))*V+(P*=u)*U+(z*=u)*F>=0&&!ot){var ht=(U*Z-F*J)*rt+(F*Y-V*Z)*st+(V*J-U*Y)*at,lt=(st*Z-at*J)*E+(at*Y-rt*Z)*T+(rt*J-st*Y)*L,ct=(T*F-L*U)*rt+(L*V-E*F)*st+(E*U-T*V)*at,ut=(J*F-Z*U)*E+(Z*V-Y*F)*T+(Y*U-J*V)*L,pt=ht+lt+ct+ut;pt<=0&&(ht=0,pt=(lt=(J*at-Z*st)*A+(Z*rt-Y*at)*P+(Y*st-J*rt)*z)+(ct=(st*Z-at*J)*A+(at*Y-rt*Z)*P+(rt*J-st*Y)*z)+(ut=(U*Z-F*J)*A+(F*Y-V*Z)*P+(V*J-U*Y)*z));var dt=1/pt;p=(x*ht+N*lt+H*ct+K*ut)*dt,d=(b*ht+R*lt+G*ct+$*ut)*dt,m=(w*ht+I*lt+j*ct+tt*ut)*dt,f=(M*ht+O*lt+W*ct+et*ut)*dt,v=(_*ht+D*lt+q*ct+it*ut)*dt,g=(S*ht+B*lt+X*ct+nt*ut)*dt,ot=!0}this.supportPointB(t,-A,-P,-z,y);var mt=y.x,ft=y.y,vt=y.z;this.supportPointC(e,A,P,z,y);var gt=y.x,yt=y.y,xt=y.z,bt=gt-mt,wt=yt-ft,Mt=xt-vt,_t=-(bt*A+wt*P+Mt*z);if((bt-rt)*A+(wt-st)*P+(Mt-at)*z<=.01||_t>=0)return!!ot&&(i.set(-A,-P,-z),n.set(.5*(p+f),.5*(d+v),.5*(m+g)),r.x=_t,!0);(wt*F-Mt*U)*E+(Mt*V-bt*F)*T+(bt*U-wt*V)*L<0?(wt*Z-Mt*J)*E+(Mt*Y-bt*Z)*T+(bt*J-wt*Y)*L<0?(V=bt,U=wt,F=Mt,N=mt,R=ft,I=vt,O=gt,D=yt,B=xt):(rt=bt,st=wt,at=Mt,K=mt,$=ft,tt=vt,et=gt,it=yt,nt=xt):(wt*at-Mt*st)*E+(Mt*rt-bt*at)*T+(bt*st-wt*rt)*L<0?(Y=bt,J=wt,Z=Mt,H=mt,G=ft,j=vt,W=gt,q=yt,X=xt):(V=bt,U=wt,F=Mt,N=mt,R=ft,I=vt,O=gt,D=yt,B=xt)}}},supportPointB:function(t,e,i,n,r){var s,a,o,h=t.rotation.elements,l=h[0]*e+h[3]*i+h[6]*n,c=h[1]*e+h[4]*i+h[7]*n,u=h[2]*e+h[5]*i+h[8]*n,p=t.halfWidth,d=t.halfHeight,m=t.halfDepth;s=l<0?-p:p,a=c<0?-d:d,o=u<0?-m:m,l=h[0]*s+h[1]*a+h[2]*o+t.position.x,c=h[3]*s+h[4]*a+h[5]*o+t.position.y,u=h[6]*s+h[7]*a+h[8]*o+t.position.z,r.set(l,c,u)},supportPointC:function(t,e,i,n,r){var s,a,o,h=t.rotation.elements,l=h[0]*e+h[3]*i+h[6]*n,c=h[1]*e+h[4]*i+h[7]*n,u=h[2]*e+h[5]*i+h[8]*n,p=l,d=u,m=p*p+d*d,f=t.radius,v=t.halfHeight;0==m?c<0?(s=f,a=-v,o=0):(s=f,a=v,o=0):(m=t.radius/C.sqrt(m),c<0?(s=p*m,a=-v,o=d*m):(s=p*m,a=v,o=d*m)),l=h[0]*s+h[1]*a+h[2]*o+t.position.x,c=h[3]*s+h[4]*a+h[5]*o+t.position.y,u=h[6]*s+h[7]*a+h[8]*o+t.position.z,r.set(l,c,u)},detectCollision:function(t,e,i){var n,r;this.flip?(n=e,r=t):(n=t,r=e);var s=new k,a=new k,o=new k;if(this.getSep(n,r,s,a,o)){var h=n.position.x,l=n.position.y,c=n.position.z,u=r.position.x,p=r.position.y,d=r.position.z,m=n.halfWidth,f=n.halfHeight,v=n.halfDepth,g=r.halfHeight,y=r.radius,x=n.dimentions,b=x[0],w=x[1],M=x[2],_=x[3],S=x[4],E=x[5],T=x[6],L=x[7],A=x[8],P=x[9],z=x[10],N=x[11],R=x[12],I=x[13],O=x[14],D=x[15],B=x[16],V=x[17],U=r.normalDirection.x,F=r.normalDirection.y,H=r.normalDirection.z,G=r.halfDirection.x,j=r.halfDirection.y,W=r.halfDirection.z,q=s.x,X=s.y,Y=s.z,J=q*b+X*w+Y*M,Z=q*_+X*S+Y*E,Q=q*T+X*L+Y*A,K=q*U+X*F+Y*H,$=J>0,tt=Z>0,et=Q>0,it=K>0;$||(J=-J),tt||(Z=-Z),et||(Q=-Q),it||(K=-K);var nt,rt,st,at,ot,ht,lt,ct,ut,pt,dt,mt,ft,vt,gt,yt,xt,bt,wt,Mt,_t,St,Et,Tt,Lt,At,Pt,zt,Nt,Rt,Ct,It,Ot,kt,Dt,Bt,Vt,Ut,Ft,Ht,Gt,jt,Wt,qt,Xt,Yt,Jt,Zt,Qt,Kt,$t,te,ee,ie=0;if(K>.999?ie=J>.999?J>K?1:4:Z>.999?Z>K?2:4:Q>.999&&Q>K?3:4:J>.999?ie=1:Z>.999?ie=2:Q>.999&&(ie=3),0==ie)i.addPoint(a.x,a.y,a.z,q,X,Y,o.x,this.flip);else if(4==ie){var ne,re,se,ae,oe,he,le,ce,ue,pe,de,me;it?(at=u-G,ot=p-j,ht=d-W,q=-U,X=-F,Y=-H):(at=u+G,ot=p+j,ht=d+W,q=U,X=F,Y=H),ie=0,(Wt=b*q+w*X+M*Y)<(Mt=1)&&(Mt=Wt,ie=0),-Wt<Mt&&(Mt=-Wt,ie=1),(Wt=_*q+S*X+E*Y)<Mt&&(Mt=Wt,ie=2),-Wt<Mt&&(Mt=-Wt,ie=3),(Wt=T*q+L*X+A*Y)<Mt&&(Mt=Wt,ie=4),-Wt<Mt&&(Mt=-Wt,ie=5);var fe=n.elements;switch(ie){case 0:ne=fe[0],re=fe[1],se=fe[2],ae=fe[6],oe=fe[7],he=fe[8],le=fe[9],ce=fe[10],ue=fe[11],pe=fe[3],de=fe[4],me=fe[5];break;case 1:ne=fe[15],re=fe[16],se=fe[17],ae=fe[21],oe=fe[22],he=fe[23],le=fe[18],ce=fe[19],ue=fe[20],pe=fe[12],de=fe[13],me=fe[14];break;case 2:ne=fe[12],re=fe[13],se=fe[14],ae=fe[0],oe=fe[1],he=fe[2],le=fe[3],ce=fe[4],ue=fe[5],pe=fe[15],de=fe[16],me=fe[17];break;case 3:ne=fe[21],re=fe[22],se=fe[23],ae=fe[9],oe=fe[10],he=fe[11],le=fe[6],ce=fe[7],ue=fe[8],pe=fe[18],de=fe[19],me=fe[20];break;case 4:ne=fe[12],re=fe[13],se=fe[14],ae=fe[18],oe=fe[19],he=fe[20],le=fe[6],ce=fe[7],ue=fe[8],pe=fe[0],de=fe[1],me=fe[2];break;case 5:ne=fe[3],re=fe[4],se=fe[5],ae=fe[9],oe=fe[10],he=fe[11],le=fe[21],ce=fe[22],ue=fe[23],pe=fe[15],de=fe[16],me=fe[17]}(wt=q*(ne-at)+X*(re-ot)+Y*(se-ht))<=0&&i.addPoint(ne,re,se,-q,-X,-Y,wt,this.flip),(wt=q*(ae-at)+X*(oe-ot)+Y*(he-ht))<=0&&i.addPoint(ae,oe,he,-q,-X,-Y,wt,this.flip),(wt=q*(le-at)+X*(ce-ot)+Y*(ue-ht))<=0&&i.addPoint(le,ce,ue,-q,-X,-Y,wt,this.flip),(wt=q*(pe-at)+X*(de-ot)+Y*(me-ht))<=0&&i.addPoint(pe,de,me,-q,-X,-Y,wt,this.flip)}else{switch(ie){case 1:$?(nt=h+P,rt=l+z,st=c+N,q=b,X=w,Y=M):(nt=h-P,rt=l-z,st=c-N,q=-b,X=-w,Y=-M),Yt=_,Jt=S,Zt=E,te=f,Qt=T,Kt=L,$t=A,ee=v;break;case 2:tt?(nt=h+R,rt=l+I,st=c+O,q=_,X=S,Y=E):(nt=h-R,rt=l-I,st=c-O,q=-_,X=-S,Y=-E),Yt=b,Jt=w,Zt=M,te=m,Qt=T,Kt=L,$t=A,ee=v;break;case 3:et?(nt=h+D,rt=l+B,st=c+V,q=T,X=L,Y=A):(nt=h-D,rt=l-B,st=c-V,q=-T,X=-L,Y=-A),Yt=b,Jt=w,Zt=M,te=m,Qt=_,Kt=S,$t=E,ee=f}if(at=u+(_t=(Mt=q*U+X*F+Y*H)<0?g:-g)*U,ot=p+_t*F,ht=d+_t*H,K>=.999999?(St=-X,Et=Y,Tt=q):(St=q,Et=X,Tt=Y),At=(_t=St*U+Et*F+Tt*H)*U-St,Pt=_t*F-Et,zt=_t*H-Tt,0==(_t=C.sqrt(At*At+Pt*Pt+zt*zt)))return;if(St=at+(At*=_t=y/_t),Et=ot+(Pt*=_t),Tt=ht+(zt*=_t),Mt<-.96||Mt>.96)lt=U*U*1.5-.5,ct=U*F*1.5-.866025403*H,ut=U*H*1.5+.866025403*F,pt=F*U*1.5+.866025403*H,dt=F*F*1.5-.5,mt=F*H*1.5-.866025403*U,ft=H*U*1.5-.866025403*F,vt=H*F*1.5+.866025403*U,gt=H*H*1.5-.5,(Ut=Yt*(St=(yt=St)-(wt=q*(yt-nt)+X*((xt=Et)-rt)+Y*((bt=Tt)-st))*q-nt)+Jt*(Et=xt-wt*X-rt)+Zt*(Tt=bt-wt*Y-st))<-te?Ut=-te:Ut>te&&(Ut=te),(jt=Qt*St+Kt*Et+$t*Tt)<-ee?jt=-ee:jt>ee&&(jt=ee),yt=nt+(St=Ut*Yt+jt*Qt),xt=rt+(Et=Ut*Jt+jt*Kt),bt=st+(Tt=Ut*Zt+jt*$t),i.addPoint(yt,xt,bt,q,X,Y,wt,this.flip),xt=At*pt+Pt*dt+zt*mt,bt=At*ft+Pt*vt+zt*gt,(wt=q*((yt=(At=yt=At*lt+Pt*ct+zt*ut)+at)-nt)+X*((xt=(Pt=xt)+ot)-rt)+Y*((bt=(zt=bt)+ht)-st))<=0&&((Ut=Yt*(St=yt-wt*q-nt)+Jt*(Et=xt-wt*X-rt)+Zt*(Tt=bt-wt*Y-st))<-te?Ut=-te:Ut>te&&(Ut=te),(jt=Qt*St+Kt*Et+$t*Tt)<-ee?jt=-ee:jt>ee&&(jt=ee),yt=nt+(St=Ut*Yt+jt*Qt),xt=rt+(Et=Ut*Jt+jt*Kt),bt=st+(Tt=Ut*Zt+jt*$t),i.addPoint(yt,xt,bt,q,X,Y,wt,this.flip)),xt=At*pt+Pt*dt+zt*mt,bt=At*ft+Pt*vt+zt*gt,(wt=q*((yt=(At=yt=At*lt+Pt*ct+zt*ut)+at)-nt)+X*((xt=(Pt=xt)+ot)-rt)+Y*((bt=(zt=bt)+ht)-st))<=0&&((Ut=Yt*(St=yt-wt*q-nt)+Jt*(Et=xt-wt*X-rt)+Zt*(Tt=bt-wt*Y-st))<-te?Ut=-te:Ut>te&&(Ut=te),(jt=Qt*St+Kt*Et+$t*Tt)<-ee?jt=-ee:jt>ee&&(jt=ee),yt=nt+(St=Ut*Yt+jt*Qt),xt=rt+(Et=Ut*Jt+jt*Kt),bt=st+(Tt=Ut*Zt+jt*$t),i.addPoint(yt,xt,bt,q,X,Y,wt,this.flip));else{if(Dt=St,Mt>0?(Ft=St+2*G,Ht=Et+2*j,Gt=Tt+2*W):(Ft=St-2*G,Ht=Et-2*j,Gt=Tt-2*W),St=(Ft-=(jt=q*(Ft-nt)+X*(Ht-rt)+Y*(Gt-st))*q)-(Dt-=(Ut=q*(Dt-nt)+X*((Bt=Et)-rt)+Y*((Vt=Tt)-st))*q),Et=(Ht-=jt*X)-(Bt-=Ut*X),Tt=(Gt-=jt*Y)-(Vt-=Ut*Y),Lt=jt-Ut,qt=(Z=(It=Ft-nt)*Yt+(Ot=Ht-rt)*Jt+(kt=Gt-st)*Zt)-te,(Wt=(J=(Nt=Dt-nt)*Yt+(Rt=Bt-rt)*Jt+(Ct=Vt-st)*Zt)-te)>0){if(qt>0)return;J=(Nt=(Dt+=St*(Xt=Wt/(Wt-qt)))-nt)*Yt+(Rt=(Bt+=Et*Xt)-rt)*Jt+(Ct=(Vt+=Tt*Xt)-st)*Zt,St=Ft-Dt,Et=Ht-Bt,Tt=Gt-Vt,Lt=jt-(Ut+=Lt*Xt)}else qt>0&&(Z=(It=(Ft=Dt+St*(Xt=Wt/(Wt-qt)))-nt)*Yt+(Ot=(Ht=Bt+Et*Xt)-rt)*Jt+(kt=(Gt=Vt+Tt*Xt)-st)*Zt,St=Ft-Dt,Et=Ht-Bt,Tt=Gt-Vt,Lt=(jt=Ut+Lt*Xt)-Ut);if(qt=Z+te,(Wt=J+te)<0){if(qt<0)return;Nt=(Dt+=St*(Xt=Wt/(Wt-qt)))-nt,Rt=(Bt+=Et*Xt)-rt,Ct=(Vt+=Tt*Xt)-st,St=Ft-Dt,Et=Ht-Bt,Tt=Gt-Vt,Lt=jt-(Ut+=Lt*Xt)}else qt<0&&(It=(Ft=Dt+St*(Xt=Wt/(Wt-qt)))-nt,Ot=(Ht=Bt+Et*Xt)-rt,kt=(Gt=Vt+Tt*Xt)-st,St=Ft-Dt,Et=Ht-Bt,Tt=Gt-Vt,Lt=(jt=Ut+Lt*Xt)-Ut);if(qt=(Z=It*Qt+Ot*Kt+kt*$t)-ee,(Wt=(J=Nt*Qt+Rt*Kt+Ct*$t)-ee)>0){if(qt>0)return;J=(Nt=(Dt+=St*(Xt=Wt/(Wt-qt)))-nt)*Qt+(Rt=(Bt+=Et*Xt)-rt)*Kt+(Ct=(Vt+=Tt*Xt)-st)*$t,St=Ft-Dt,Et=Ht-Bt,Tt=Gt-Vt,Lt=jt-(Ut+=Lt*Xt)}else qt>0&&(Z=(It=(Ft=Dt+St*(Xt=Wt/(Wt-qt)))-nt)*Qt+(Ot=(Ht=Bt+Et*Xt)-rt)*Kt+(kt=(Gt=Vt+Tt*Xt)-st)*$t,St=Ft-Dt,Et=Ht-Bt,Tt=Gt-Vt,Lt=(jt=Ut+Lt*Xt)-Ut);if(qt=Z+ee,(Wt=J+ee)<0){if(qt<0)return;Dt+=St*(Xt=Wt/(Wt-qt)),Bt+=Et*Xt,Vt+=Tt*Xt,Ut+=Lt*Xt}else qt<0&&(Ft=Dt+St*(Xt=Wt/(Wt-qt)),Ht=Bt+Et*Xt,Gt=Vt+Tt*Xt,jt=Ut+Lt*Xt);Ut<0&&i.addPoint(Dt,Bt,Vt,q,X,Y,Ut,this.flip),jt<0&&i.addPoint(Ft,Ht,Gt,q,X,Y,jt,this.flip)}}}}}),kt.prototype=Object.assign(Object.create(Ct.prototype),{constructor:kt,getSep:function(t,e,i,n,r){var s,a,o,h,l,c,u,p,d,m,f,v,g,y=new k,x=t.position.x,b=t.position.y,w=t.position.z,M=e.position.x,_=e.position.y,S=e.position.z,E=M-x,T=_-b,L=S-w;E*E+T*T+L*L==0&&(T=.001);var A=-E,P=-T,z=-L;this.supportPoint(t,-A,-P,-z,y);var N=y.x,R=y.y,I=y.z;this.supportPoint(e,A,P,z,y);var O=y.x,D=y.y,B=y.z,V=O-N,U=D-R,F=B-I;if(V*A+U*P+F*z<=0)return!1;if((A=U*L-F*T)*A+(P=F*E-V*L)*P+(z=V*T-U*E)*z==0)return i.set(V-E,U-T,F-L).normalize(),n.set(.5*(N+O),.5*(R+D),.5*(I+B)),!0;this.supportPoint(t,-A,-P,-z,y);var H=y.x,G=y.y,j=y.z;this.supportPoint(e,A,P,z,y);var W=y.x,q=y.y,X=y.z,Y=W-H,J=q-G,Z=X-j;if(Y*A+J*P+Z*z<=0)return!1;(A=(a=U-T)*(c=Z-L)-(o=F-L)*(l=J-T))*E+(P=o*(h=Y-E)-(s=V-E)*c)*T+(z=s*l-a*h)*L>0&&(s=V,a=U,o=F,V=Y,U=J,F=Z,Y=s,J=a,Z=o,s=N,a=R,o=I,N=H,R=G,I=j,H=s,G=a,j=o,s=O,a=D,o=B,O=W,D=q,B=X,W=s,q=a,X=o,A=-A,P=-P,z=-z);for(var Q=0;;){if(++Q>100)return!1;this.supportPoint(t,-A,-P,-z,y);var K=y.x,$=y.y,tt=y.z;this.supportPoint(e,A,P,z,y);var et=y.x,it=y.y,nt=y.z,rt=et-K,st=it-$,at=nt-tt;if(rt*A+st*P+at*z<=0)return!1;if((U*at-F*st)*E+(F*rt-V*at)*T+(V*st-U*rt)*L<0)Y=rt,J=st,Z=at,H=K,G=$,j=tt,W=et,q=it,X=nt,A=(a=U-T)*(c=at-L)-(o=F-L)*(l=st-T),P=o*(h=rt-E)-(s=V-E)*c,z=s*l-a*h;else if((st*Z-at*J)*E+(at*Y-rt*Z)*T+(rt*J-st*Y)*L<0)V=rt,U=st,F=at,N=K,R=$,I=tt,O=et,D=it,B=nt,A=(a=st-T)*(c=Z-L)-(o=at-L)*(l=J-T),P=o*(h=Y-E)-(s=rt-E)*c,z=s*l-a*h;else for(var ot=!1;;){if(A=(a=J-U)*(c=at-F)-(o=Z-F)*(l=st-U),P=o*(h=rt-V)-(s=Y-V)*c,z=s*l-a*h,(A*=u=1/C.sqrt(A*A+P*P+z*z))*V+(P*=u)*U+(z*=u)*F>=0&&!ot){var ht=(U*Z-F*J)*rt+(F*Y-V*Z)*st+(V*J-U*Y)*at,lt=(st*Z-at*J)*E+(at*Y-rt*Z)*T+(rt*J-st*Y)*L,ct=(T*F-L*U)*rt+(L*V-E*F)*st+(E*U-T*V)*at,ut=(J*F-Z*U)*E+(Z*V-Y*F)*T+(Y*U-J*V)*L,pt=ht+lt+ct+ut;pt<=0&&(ht=0,pt=(lt=(J*at-Z*st)*A+(Z*rt-Y*at)*P+(Y*st-J*rt)*z)+(ct=(st*Z-at*J)*A+(at*Y-rt*Z)*P+(rt*J-st*Y)*z)+(ut=(U*Z-F*J)*A+(F*Y-V*Z)*P+(V*J-U*Y)*z));var dt=1/pt;p=(x*ht+N*lt+H*ct+K*ut)*dt,d=(b*ht+R*lt+G*ct+$*ut)*dt,m=(w*ht+I*lt+j*ct+tt*ut)*dt,f=(M*ht+O*lt+W*ct+et*ut)*dt,v=(_*ht+D*lt+q*ct+it*ut)*dt,g=(S*ht+B*lt+X*ct+nt*ut)*dt,ot=!0}this.supportPoint(t,-A,-P,-z,y);var mt=y.x,ft=y.y,vt=y.z;this.supportPoint(e,A,P,z,y);var gt=y.x,yt=y.y,xt=y.z,bt=gt-mt,wt=yt-ft,Mt=xt-vt,_t=-(bt*A+wt*P+Mt*z);if((bt-rt)*A+(wt-st)*P+(Mt-at)*z<=.01||_t>=0)return!!ot&&(i.set(-A,-P,-z),n.set(.5*(p+f),.5*(d+v),.5*(m+g)),r.x=_t,!0);(wt*F-Mt*U)*E+(Mt*V-bt*F)*T+(bt*U-wt*V)*L<0?(wt*Z-Mt*J)*E+(Mt*Y-bt*Z)*T+(bt*J-wt*Y)*L<0?(V=bt,U=wt,F=Mt,N=mt,R=ft,I=vt,O=gt,D=yt,B=xt):(rt=bt,st=wt,at=Mt,K=mt,$=ft,tt=vt,et=gt,it=yt,nt=xt):(wt*at-Mt*st)*E+(Mt*rt-bt*at)*T+(bt*st-wt*rt)*L<0?(Y=bt,J=wt,Z=Mt,H=mt,G=ft,j=vt,W=gt,q=yt,X=xt):(V=bt,U=wt,F=Mt,N=mt,R=ft,I=vt,O=gt,D=yt,B=xt)}}},supportPoint:function(t,e,i,n,r){var s,a,o,h=t.rotation.elements,l=h[0]*e+h[3]*i+h[6]*n,c=h[1]*e+h[4]*i+h[7]*n,u=h[2]*e+h[5]*i+h[8]*n,p=l,d=u,m=p*p+d*d,f=t.radius,v=t.halfHeight;0==m?c<0?(s=f,a=-v,o=0):(s=f,a=v,o=0):(m=t.radius/C.sqrt(m),c<0?(s=p*m,a=-v,o=d*m):(s=p*m,a=v,o=d*m)),l=h[0]*s+h[1]*a+h[2]*o+t.position.x,c=h[3]*s+h[4]*a+h[5]*o+t.position.y,u=h[6]*s+h[7]*a+h[8]*o+t.position.z,r.set(l,c,u)},detectCollision:function(t,e,i){var n,r;t.id<e.id?(n=t,r=e):(n=e,r=t);var s,a,o,h,l,c,u,p,d,m,f,v,g,y,x,b,w,M,_,S,E,T=n.position,L=r.position,A=T.x,P=T.y,z=T.z,N=L.x,R=L.y,I=L.z,O=n.halfHeight,D=r.halfHeight,B=n.normalDirection,V=r.normalDirection,U=n.halfDirection,F=r.halfDirection,H=n.radius,G=r.radius,j=B.x,W=B.y,q=B.z,X=V.x,Y=V.y,J=V.z,Z=U.x,Q=U.y,K=U.z,$=F.x,tt=F.y,et=F.z,it=A-N,nt=P-R,rt=z-I,st=new k,at=new k,ot=new k;if(this.getSep(n,r,st,at,ot)){var ht=st.x*j+st.y*W+st.z*q,lt=st.x*X+st.y*Y+st.z*J,ct=ht>0,ut=lt>0;ct||(ht=-ht),ut||(lt=-lt);var pt,dt,mt,ft=0;(ht>.999||lt>.999)&&(ft=ht>lt?1:2);var vt,gt,yt,xt,bt,wt,Mt,_t,St,Et,Tt,Lt,At,Pt,zt,Nt,Rt=ot.x;switch(pt=st.x,dt=st.y,mt=st.z,ft){case 0:i.addPoint(at.x,at.y,at.z,pt,dt,mt,Rt,!1);break;case 1:if(ct?(a=A+Z,o=P+Q,h=z+K,pt=j,dt=W,mt=q):(a=A-Z,o=P-Q,h=z-K,pt=-j,dt=-W,mt=-q),l=N+(s=(_=pt*X+dt*Y+mt*J)<0?D:-D)*X,c=R+s*Y,u=I+s*J,lt>=.999999?(p=-dt,d=mt,m=pt):(p=pt,d=dt,m=mt),it=(s=p*X+d*Y+m*J)*X-p,nt=s*Y-d,rt=s*J-m,0==(s=C.sqrt(it*it+nt*nt+rt*rt)))break;if(p=l+(it*=s=G/s),d=c+(nt*=s),m=u+(rt*=s),_<-.96||_>.96)vt=X*X*1.5-.5,gt=X*Y*1.5-.866025403*J,yt=X*J*1.5+.866025403*Y,xt=Y*X*1.5+.866025403*J,bt=Y*Y*1.5-.5,wt=Y*J*1.5-.866025403*X,Mt=J*X*1.5-.866025403*Y,_t=J*Y*1.5+.866025403*X,St=J*J*1.5-.5,(s=(p=(Et=p)-(At=pt*(Et-a)+dt*((Tt=d)-o)+mt*((Lt=m)-h))*pt-a)*p+(d=Tt-At*dt-o)*d+(m=Lt-At*mt-h)*m)>H*H&&(p*=s=H/C.sqrt(s),d*=s,m*=s),Et=a+p,Tt=o+d,Lt=h+m,i.addPoint(Et,Tt,Lt,pt,dt,mt,At,!1),Tt=it*xt+nt*bt+rt*wt,Lt=it*Mt+nt*_t+rt*St,(At=pt*((Et=(it=Et=it*vt+nt*gt+rt*yt)+l)-a)+dt*((Tt=(nt=Tt)+c)-o)+mt*((Lt=(rt=Lt)+u)-h))<=0&&((s=(p=Et-At*pt-a)*p+(d=Tt-At*dt-o)*d+(m=Lt-At*mt-h)*m)>H*H&&(p*=s=H/C.sqrt(s),d*=s,m*=s),Et=a+p,Tt=o+d,Lt=h+m,i.addPoint(Et,Tt,Lt,pt,dt,mt,At,!1)),Tt=it*xt+nt*bt+rt*wt,Lt=it*Mt+nt*_t+rt*St,(At=pt*((Et=(it=Et=it*vt+nt*gt+rt*yt)+l)-a)+dt*((Tt=(nt=Tt)+c)-o)+mt*((Lt=(rt=Lt)+u)-h))<=0&&((s=(p=Et-At*pt-a)*p+(d=Tt-At*dt-o)*d+(m=Lt-At*mt-h)*m)>H*H&&(p*=s=H/C.sqrt(s),d*=s,m*=s),Et=a+p,Tt=o+d,Lt=h+m,i.addPoint(Et,Tt,Lt,pt,dt,mt,At,!1));else{if(f=p,_>0?(y=p+X*D*2,x=d+Y*D*2,b=m+J*D*2):(y=p-X*D*2,x=d-Y*D*2,b=m-J*D*2),(Nt=(Pt=(it=a-(f-=(w=pt*(f-a)+dt*((v=d)-o)+mt*((g=m)-h))*pt))*(p=(y-=(M=pt*(y-a)+dt*(x-o)+mt*(b-h))*pt)-f)+(nt=o-(v-=w*dt))*(d=(x-=M*dt)-v)+(rt=h-(g-=w*mt))*(m=(b-=M*mt)-g))*Pt-(zt=p*p+d*d+m*m)*(it*it+nt*nt+rt*rt-H*H))<0)break;(E=(Pt-(Nt=C.sqrt(Nt)))/zt)<(S=(Pt+Nt)/zt)&&(s=S,S=E,E=s),E>1&&(E=1),S<0&&(S=0),p=f+(y-f)*S,d=v+(x-v)*S,m=g+(b-g)*S,y=f+(y-f)*E,x=v+(x-v)*E,b=g+(b-g)*E,f=p,v=d,g=m,s=w+(M-w)*S,M=w+(M-w)*E,(w=s)<0&&i.addPoint(f,v,g,pt,dt,mt,At,!1),M<0&&i.addPoint(y,x,b,pt,dt,mt,At,!1)}break;case 2:if(ut?(l=N-$,c=R-tt,u=I-et,pt=-X,dt=-Y,mt=-J):(l=N+$,c=R+tt,u=I+et,pt=X,dt=Y,mt=J),a=A+(s=(_=pt*j+dt*W+mt*q)<0?O:-O)*j,o=P+s*W,h=z+s*q,ht>=.999999?(p=-dt,d=mt,m=pt):(p=pt,d=dt,m=mt),it=(s=p*j+d*W+m*q)*j-p,nt=s*W-d,rt=s*q-m,0==(s=C.sqrt(it*it+nt*nt+rt*rt)))break;if(p=a+(it*=s=H/s),d=o+(nt*=s),m=h+(rt*=s),_<-.96||_>.96)vt=j*j*1.5-.5,gt=j*W*1.5-.866025403*q,yt=j*q*1.5+.866025403*W,xt=W*j*1.5+.866025403*q,bt=W*W*1.5-.5,wt=W*q*1.5-.866025403*j,Mt=q*j*1.5-.866025403*W,_t=q*W*1.5+.866025403*j,St=q*q*1.5-.5,(s=(p=(Et=p)-(At=pt*(Et-l)+dt*((Tt=d)-c)+mt*((Lt=m)-u))*pt-l)*p+(d=Tt-At*dt-c)*d+(m=Lt-At*mt-u)*m)>G*G&&(p*=s=G/C.sqrt(s),d*=s,m*=s),Et=l+p,Tt=c+d,Lt=u+m,i.addPoint(Et,Tt,Lt,-pt,-dt,-mt,At,!1),Tt=it*xt+nt*bt+rt*wt,Lt=it*Mt+nt*_t+rt*St,(At=pt*((Et=(it=Et=it*vt+nt*gt+rt*yt)+a)-l)+dt*((Tt=(nt=Tt)+o)-c)+mt*((Lt=(rt=Lt)+h)-u))<=0&&((s=(p=Et-At*pt-l)*p+(d=Tt-At*dt-c)*d+(m=Lt-At*mt-u)*m)>G*G&&(p*=s=G/C.sqrt(s),d*=s,m*=s),Et=l+p,Tt=c+d,Lt=u+m,i.addPoint(Et,Tt,Lt,-pt,-dt,-mt,At,!1)),Tt=it*xt+nt*bt+rt*wt,Lt=it*Mt+nt*_t+rt*St,(At=pt*((Et=(it=Et=it*vt+nt*gt+rt*yt)+a)-l)+dt*((Tt=(nt=Tt)+o)-c)+mt*((Lt=(rt=Lt)+h)-u))<=0&&((s=(p=Et-At*pt-l)*p+(d=Tt-At*dt-c)*d+(m=Lt-At*mt-u)*m)>G*G&&(p*=s=G/C.sqrt(s),d*=s,m*=s),Et=l+p,Tt=c+d,Lt=u+m,i.addPoint(Et,Tt,Lt,-pt,-dt,-mt,At,!1));else{if(f=p,_>0?(y=p+j*O*2,x=d+W*O*2,b=m+q*O*2):(y=p-j*O*2,x=d-W*O*2,b=m-q*O*2),(Nt=(Pt=(it=l-(f-=(w=pt*(f-l)+dt*((v=d)-c)+mt*((g=m)-u))*pt))*(p=(y-=(M=pt*(y-l)+dt*(x-c)+mt*(b-u))*pt)-f)+(nt=c-(v-=w*dt))*(d=(x-=M*dt)-v)+(rt=u-(g-=w*mt))*(m=(b-=M*mt)-g))*Pt-(zt=p*p+d*d+m*m)*(it*it+nt*nt+rt*rt-G*G))<0)break;(E=(Pt-(Nt=C.sqrt(Nt)))/zt)<(S=(Pt+Nt)/zt)&&(s=S,S=E,E=s),E>1&&(E=1),S<0&&(S=0),p=f+(y-f)*S,d=v+(x-v)*S,m=g+(b-g)*S,y=f+(y-f)*E,x=v+(x-v)*E,b=g+(b-g)*E,f=p,v=d,g=m,s=w+(M-w)*S,M=w+(M-w)*E,(w=s)<0&&i.addPoint(f,v,g,-pt,-dt,-mt,w,!1),M<0&&i.addPoint(y,x,b,-pt,-dt,-mt,M,!1)}}}}}),Dt.prototype=Object.assign(Object.create(Ct.prototype),{constructor:Dt,detectCollision:function(t,e,i){var n,r;this.flip?(n=e,r=t):(n=t,r=e);var s,a,o,h,l,c=r.dimentions,u=n.position,p=u.x,d=u.y,m=u.z,f=r.position,v=f.x,g=f.y,y=f.z,x=n.radius,b=r.halfWidth,w=r.halfHeight,M=r.halfDepth,_=p-v,S=d-g,E=m-y,T=c[0]*_+c[1]*S+c[2]*E,L=c[3]*_+c[4]*S+c[5]*E,A=c[6]*_+c[7]*S+c[8]*E,P=0;T>b?T=b:T<-b?T=-b:P=1,L>w?L=w:L<-w?L=-w:P|=2,A>M?A=M:A<-M?A=-M:P|=4,7==P?(E=A<0?M+A:M-A,(_=T<0?b+T:b-T)<(S=L<0?w+L:w-L)?_<E?(h=_-b,T<0?(T=-b,_=c[0],S=c[1],E=c[2]):(T=b,_=-c[0],S=-c[1],E=-c[2])):(h=E-M,A<0?(A=-M,_=c[6],S=c[7],E=c[8]):(A=M,_=-c[6],S=-c[7],E=-c[8])):S<E?(h=S-w,L<0?(L=-w,_=c[3],S=c[4],E=c[5]):(L=w,_=-c[3],S=-c[4],E=-c[5])):(h=E-M,A<0?(A=-M,_=c[6],S=c[7],E=c[8]):(A=M,_=-c[6],S=-c[7],E=-c[8])),s=v+T*c[0]+L*c[3]+A*c[6],a=g+T*c[1]+L*c[4]+A*c[7],o=y+T*c[2]+L*c[5]+A*c[8],i.addPoint(p+x*_,d+x*S,m+x*E,_,S,E,h-x,this.flip)):(s=v+T*c[0]+L*c[3]+A*c[6],a=g+T*c[1]+L*c[4]+A*c[7],o=y+T*c[2]+L*c[5]+A*c[8],(h=(_=s-u.x)*_+(S=a-u.y)*S+(E=o-u.z)*E)>0&&h<x*x&&(_*=l=1/(h=C.sqrt(h)),S*=l,E*=l,i.addPoint(p+x*_,d+x*S,m+x*E,_,S,E,h-x,this.flip)))}}),Bt.prototype=Object.assign(Object.create(Ct.prototype),{constructor:Bt,detectCollision:function(t,e,i){var n,r;this.flip?(n=e,r=t):(n=t,r=e);var s=n.position,a=s.x,o=s.y,h=s.z,l=r.position,c=l.x,u=l.y,p=l.z,d=r.normalDirection.x,m=r.normalDirection.y,f=r.normalDirection.z,v=n.radius,g=r.radius,y=v+g,x=r.halfHeight,b=a-c,w=o-u,M=h-p,_=b*d+w*m+M*f;if(!(_<-x-v||_>x+v)){var S,E=c+_*d,T=u+_*m,L=p+_*f,A=a-E,P=o-T,z=h-L,N=A*A+P*P+z*z;if(!(N>y*y))N>g*g&&(A*=N=g/C.sqrt(N),P*=N,z*=N),_<-x?_=-x:_>x&&(_=x),(N=(b=(E=c+_*d+A)-a)*b+(w=(T=u+_*m+P)-o)*w+(M=(L=p+_*f+z)-h)*M)>0&&N<v*v&&(b*=S=1/(N=C.sqrt(N)),w*=S,M*=S,i.addPoint(a+b*v,o+w*v,h+M*v,b,w,M,N-v,this.flip))}}}),Vt.prototype=Object.assign(Object.create(Ct.prototype),{constructor:Vt,detectCollision:function(t,e,i){var n=t,r=e,s=n.position,a=r.position,o=a.x-s.x,h=a.y-s.y,l=a.z-s.z,c=o*o+h*h+l*l,u=n.radius,p=u+r.radius;if(c>0&&c<p*p){var d=1/(c=C.sqrt(c));o*=d,h*=d,l*=d,i.addPoint(s.x+o*u,s.y+h*u,s.z+l*u,o,h,l,c-p,!1)}}}),Ut.prototype=Object.assign(Object.create(Ct.prototype),{constructor:Ut,detectCollision:function(t,e,i){var n,r=this.n,s=this.p,a=this.flip?e:t,o=this.flip?t:e,h=a.radius;r.sub(a.position,o.position),r.x*=o.normal.x,r.y*=o.normal.y,r.z*=o.normal.z,(n=r.lengthSq())>0&&n<h*h&&(n=C.sqrt(n),r.copy(o.normal).negate(),s.copy(a.position).addScaledVector(r,h),i.addPointVec(s,r,n-h,this.flip))}}),Ft.prototype=Object.assign(Object.create(Ct.prototype),{constructor:Ft,detectCollision:function(t,e,i){var n,r=this.n,s=this.p,a=this.cc,o=this.flip?e:t,h=this.flip?t:e,l=o.dimentions,c=o.halfWidth,u=o.halfHeight,p=o.halfDepth,d=0;this.dix.set(l[0],l[1],l[2]),this.diy.set(l[3],l[4],l[5]),this.diz.set(l[6],l[7],l[8]),r.sub(o.position,h.position),r.x*=h.normal.x,r.y*=h.normal.y,r.z*=h.normal.z,a.set(C.dotVectors(this.dix,r),C.dotVectors(this.diy,r),C.dotVectors(this.diz,r)),a.x>c?a.x=c:a.x<-c?a.x=-c:d=1,a.y>u?a.y=u:a.y<-u?a.y=-u:d|=2,a.z>p?a.z=p:a.z<-p?a.z=-p:d|=4,7===d&&(r.set(a.x<0?c+a.x:c-a.x,a.y<0?u+a.y:u-a.y,a.z<0?p+a.z:p-a.z),r.x<r.y?r.x<r.z?(n=r.x-c,a.x<0?(a.x=-c,r.copy(this.dix)):(a.x=c,r.subEqual(this.dix))):(n=r.z-p,a.z<0?(a.z=-p,r.copy(this.diz)):(a.z=p,r.subEqual(this.diz))):r.y<r.z?(n=r.y-u,a.y<0?(a.y=-u,r.copy(this.diy)):(a.y=u,r.subEqual(this.diy))):(n=r.z-p,a.z<0?(a.z=-p,r.copy(this.diz)):(a.z=p,r.subEqual(this.diz))),s.copy(h.position).addScaledVector(r,1),i.addPointVec(s,r,n,this.flip))}}),Object.assign(Ht.prototype,{World:!0,play:function(){if(null===this.timer){var t=this;this.timer=setInterval(function(){t.step()},this.timerate)}},stop:function(){null!==this.timer&&(clearInterval(this.timer),this.timer=null)},setGravity:function(t){this.gravity.fromArray(t)},getInfo:function(){return this.isStat?this.performance.show():\"\"},clear:function(){for(this.stop(),this.preLoop=null,this.postLoop=null,this.randX=65535;null!==this.joints;)this.removeJoint(this.joints);for(;null!==this.contacts;)this.removeContact(this.contacts);for(;null!==this.rigidBodies;)this.removeRigidBody(this.rigidBodies)},addRigidBody:function(t){t.parent&&I(\"World\",\"It is not possible to be added to more than one world one of the rigid body\"),t.setParent(this);for(var e=t.shapes;null!==e;e=e.next)this.addShape(e);null!==this.rigidBodies&&((this.rigidBodies.prev=t).next=this.rigidBodies),this.rigidBodies=t,this.numRigidBodies++},removeRigidBody:function(t){var e=t;if(e.parent===this){e.awake();for(var i=e.jointLink;null!=i;){var n=i.joint;i=i.next,this.removeJoint(n)}for(var r=t.shapes;null!==r;r=r.next)this.removeShape(r);var s=e.prev,a=e.next;null!==s&&(s.next=a),null!==a&&(a.prev=s),this.rigidBodies==e&&(this.rigidBodies=a),e.prev=null,e.next=null,e.parent=null,this.numRigidBodies--}},getByName:function(t){for(var e=this.rigidBodies;null!==e;){if(e.name===t)return e;e=e.next}for(var i=this.joints;null!==i;){if(i.name===t)return i;i=i.next}return null},addShape:function(t){t.parent&&t.parent.parent||I(\"World\",\"It is not possible to be added alone to shape world\"),t.proxy=this.broadPhase.createProxy(t),t.updateProxy(),this.broadPhase.addProxy(t.proxy)},removeShape:function(t){this.broadPhase.removeProxy(t.proxy),t.proxy=null},addJoint:function(t){t.parent&&I(\"World\",\"It is not possible to be added to more than one world one of the joint\"),null!=this.joints&&((this.joints.prev=t).next=this.joints),this.joints=t,t.setParent(this),this.numJoints++,t.awake(),t.attach()},removeJoint:function(t){var e=t,i=e.prev,n=e.next;null!==i&&(i.next=n),null!==n&&(n.prev=i),this.joints==e&&(this.joints=n),e.prev=null,e.next=null,this.numJoints--,e.awake(),e.detach(),e.parent=null},addContact:function(t,e){var i;null!==this.unusedContacts?(i=this.unusedContacts,this.unusedContacts=this.unusedContacts.next):i=new gt,i.attach(t,e),i.detector=this.detectors[t.type][e.type],this.contacts&&((this.contacts.prev=i).next=this.contacts),this.contacts=i,this.numContacts++},removeContact:function(t){var e=t.prev,i=t.next;i&&(i.prev=e),e&&(e.next=i),this.contacts==t&&(this.contacts=i),t.prev=null,t.next=null,t.detach(),t.next=this.unusedContacts,this.unusedContacts=t,this.numContacts--},getContact:function(t,e){var i,n;t=t.constructor===yt?t.name:t,e=e.constructor===yt?e.name:e;for(var r=this.contacts;null!==r;){if(i=r.body1.name,n=r.body2.name,i===t&&n===e||n===t&&i===e)return r.touching?r:null;r=r.next}return null},checkContact:function(t,e){for(var i,n,r=this.contacts;null!==r;){if(i=r.body1.name||\" \",n=r.body2.name||\" \",i==t&&n==e||n==t&&i==e)return!!r.touching;r=r.next}},callSleep:function(t){return!!t.allowSleep&&(!(t.linearVelocity.lengthSq()>.04)&&!(t.angularVelocity.lengthSq()>.25))},step:function(){var t=this.isStat;t&&this.performance.setTime(0);for(var e=this.rigidBodies;null!==e;)e.addedToIsland=!1,e.sleeping&&e.testWakeUp(),e=e.next;t&&this.performance.setTime(1),this.broadPhase.detectPairs();for(var i=this.broadPhase.pairs,n=this.broadPhase.numPairs;n--;){var r,s,a,o=i[n];o.shape1.id<o.shape2.id?(r=o.shape1,s=o.shape2):(r=o.shape2,s=o.shape1),a=r.numContacts<s.numContacts?r.contactLink:s.contactLink;for(var h=!1;a;){if((b=a.contact).shape1==r&&b.shape2==s){b.persisting=!0,h=!0;break}a=a.next}h||this.addContact(r,s)}for(t&&this.performance.calcBroadPhase(),this.numContactPoints=0,b=this.contacts;null!==b;)if(b.persisting||!b.shape1.aabb.intersectTest(b.shape2.aabb)){var l=b.body1,c=b.body2;(l.isDynamic&&!l.sleeping||c.isDynamic&&!c.sleeping)&&b.updateManifold(),this.numContactPoints+=b.manifold.numPoints,b.persisting=!1,b.constraint.addedToIsland=!1,b=b.next}else{var u=b.next;this.removeContact(b),b=u}t&&this.performance.calcNarrowPhase();var p,d,m=1/this.timeStep;for(p=this.joints;null!==p;p=p.next)p.addedToIsland=!1;this.islandRigidBodies=[],this.islandConstraints=[],this.islandStack=[],t&&this.performance.setTime(1),this.numIslands=0;for(var f=this.rigidBodies;null!==f;f=f.next)if(!(f.addedToIsland||f.isStatic||f.sleeping))if(f.isLonely())f.isDynamic&&f.linearVelocity.addScaledVector(this.gravity,this.timeStep),this.callSleep(f)?(f.sleepTime+=this.timeStep,f.sleepTime>.5?f.sleep():f.updatePosition(this.timeStep)):(f.sleepTime=0,f.updatePosition(this.timeStep)),this.numIslands++;else{var v=0,g=0,y=1;this.islandStack[0]=f,f.addedToIsland=!0;do{if(e=this.islandStack[--y],this.islandStack[y]=null,e.sleeping=!1,this.islandRigidBodies[v++]=e,!e.isStatic){for(var x=e.contactLink;null!==x;x=x.next){var b;if(!(d=(b=x.contact).constraint).addedToIsland&&b.touching)this.islandConstraints[g++]=d,d.addedToIsland=!0,(u=x.body).addedToIsland||(this.islandStack[y++]=u,u.addedToIsland=!0)}for(var w=e.jointLink;null!==w;w=w.next)(d=w.joint).addedToIsland||(this.islandConstraints[g++]=d,d.addedToIsland=!0,!(u=w.body).addedToIsland&&u.isDynamic&&(this.islandStack[y++]=u,u.addedToIsland=!0))}}while(0!=y);for(var M=(new k).addScaledVector(this.gravity,this.timeStep),_=v;_--;)(e=this.islandRigidBodies[_]).isDynamic&&e.linearVelocity.addEqual(M);if(this.enableRandomizer)for(_=g;_--;)if(0!==_){var S=(this.randX=this.randX*this.randA+this.randB&2147483647)/2147483648*_|0;d=this.islandConstraints[_],this.islandConstraints[_]=this.islandConstraints[S],this.islandConstraints[S]=d}for(_=g;_--;)this.islandConstraints[_].preSolve(this.timeStep,m);for(var E=this.numIterations;E--;)for(_=g;_--;)this.islandConstraints[_].solve();for(_=g;_--;)this.islandConstraints[_].postSolve(),this.islandConstraints[_]=null;var T=10;for(_=v;_--;)e=this.islandRigidBodies[_],this.callSleep(e)?(e.sleepTime+=this.timeStep,e.sleepTime<T&&(T=e.sleepTime)):(e.sleepTime=0,T=0);if(T>.5)for(_=v;_--;)this.islandRigidBodies[_].sleep(),this.islandRigidBodies[_]=null;else for(_=v;_--;)this.islandRigidBodies[_].updatePosition(this.timeStep),this.islandRigidBodies[_]=null;this.numIslands++}t&&this.performance.calcEnd(),null!==this.postLoop&&this.postLoop()},remove:function(t){},add:function(t){var e=(t=t||{}).type||\"box\";return e.constructor===String&&(e=[e]),\"joint\"===e[0].substring(0,5)?this.initJoint(e[0],t):this.initBody(e,t)},initBody:function(t,e){var i=this.invScale,n=e.move||!1,r=e.kinematic||!1,s=e.pos||[0,0,0];s=s.map(function(t){return t*i});var a=e.posShape||[0,0,0];a=a.map(function(t){return t*i});var o=e.rot||[0,0,0];o=o.map(function(t){return t*C.degtorad});var h=e.rotShape;h=o.map(function(t){return t*C.degtorad});var l=void 0===e.size?[1,1,1]:e.size;1===l.length&&(l[1]=l[0]),2===l.length&&(l[2]=l[0]),l=l.map(function(t){return t*i});var c=new X;void 0!==e.density&&(c.density=e.density),void 0!==e.friction&&(c.friction=e.friction),void 0!==e.restitution&&(c.restitution=e.restitution),void 0!==e.belongsTo&&(c.belongsTo=e.belongsTo),void 0!==e.collidesWith&&(c.collidesWith=e.collidesWith),void 0!==e.config&&(void 0!==e.config[0]&&(c.density=e.config[0]),void 0!==e.config[1]&&(c.friction=e.config[1]),void 0!==e.config[2]&&(c.restitution=e.config[2]),void 0!==e.config[3]&&(c.belongsTo=e.config[3]),void 0!==e.config[4]&&(c.collidesWith=e.config[4]));for(var u,p,d=new yt(new k(s[0],s[1],s[2]),(new D).setFromEuler(o[0],o[1],o[2])),v=0;v<t.length;v++){switch(void 0!==a[p=3*v]&&c.relativePosition.set(a[p],a[p+1],a[p+2]),void 0!==h[p]&&c.relativeRotation.setQuat((new D).setFromEuler(h[p],h[p+1],h[p+2])),t[v]){case\"sphere\":u=new G(c,l[p]);break;case\"cylinder\":u=new j(c,l[p],l[p+1]);break;case\"box\":u=new H(c,l[p],l[p+1],l[p+2]);break;case\"plane\":u=new W(c)}d.addShape(u)}return e.neverSleep||r?d.allowSleep=!1:d.allowSleep=!0,d.isKinematic=r,n?e.massPos||e.massRot?d.setupMass(m,!1):d.setupMass(m,!0):d.setupMass(f),void 0!==e.name&&(d.name=e.name),this.addRigidBody(d),n&&(e.sleep?d.sleep():d.awake()),d},initJoint:function(t,e){var i,n,r=this.invScale,s=e.axe1||[1,0,0],a=e.axe2||[1,0,0],o=e.pos1||[0,0,0],h=e.pos2||[0,0,0];o=o.map(function(t){return t*r}),h=h.map(function(t){return t*r}),\"jointDistance\"===t?(i=e.min||0,n=e.max||10,i*=r,n*=r):(i=e.min||57.29578,n=e.max||0,i*=C.degtorad,n*=C.degtorad);var l=e.limit||null,c=e.spring||null,u=e.motor||null,p=new lt;p.scale=this.scale,p.invScale=this.invScale,p.allowCollision=e.collision||!1,p.localAxis1.set(s[0],s[1],s[2]),p.localAxis2.set(a[0],a[1],a[2]),p.localAnchorPoint1.set(o[0],o[1],o[2]),p.localAnchorPoint2.set(h[0],h[1],h[2]);var d,m=null,f=null;if(void 0===e.body1||void 0===e.body2)return I(\"World\",\"Can't add joint if attach rigidbodys not define !\");if(e.body1.constructor===String?m=this.getByName(e.body1):e.body1.constructor===Number?m=this.getByName(e.body1):e.body1.constructor===yt&&(m=e.body1),e.body2.constructor===String?f=this.getByName(e.body2):e.body2.constructor===Number?f=this.getByName(e.body2):e.body2.constructor===yt&&(f=e.body2),null===m||null===f)return I(\"World\",\"Can't add joint attach rigidbodys not find !\");switch(p.body1=m,p.body2=f,t){case\"jointDistance\":d=new nt(p,i,n),null!==c&&d.limitMotor.setSpring(c[0],c[1]),null!==u&&d.limitMotor.setMotor(u[0],u[1]);break;case\"jointHinge\":case\"joint\":d=new tt(p,i,n),null!==c&&d.limitMotor.setSpring(c[0],c[1]),null!==u&&d.limitMotor.setMotor(u[0],u[1]);break;case\"jointPrisme\":d=new at(p,i,n);break;case\"jointSlide\":d=new ot(p,i,n);break;case\"jointBall\":d=new et(p);break;case\"jointWheel\":d=new ht(p),null!==l&&d.rotationalLimitMotor1.setLimit(l[0],l[1]),null!==c&&d.rotationalLimitMotor1.setSpring(c[0],c[1]),null!==u&&d.rotationalLimitMotor1.setMotor(u[0],u[1])}return d.name=e.name||\"\",this.addJoint(d),d}})},function(t,e,i){var n=i(0);n.OrbitControls=function(t,e){var i,r,s,a,o;this.object=t,this.domElement=void 0!==e?e:document,this.enabled=!0,this.target=new n.Vector3,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-1/0,this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.25,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.enablePan=!0,this.panSpeed=1,this.screenSpacePanning=!1,this.keyPanSpeed=7,this.autoRotate=!1,this.autoRotateSpeed=2,this.enableKeys=!0,this.keys={LEFT:37,UP:38,RIGHT:39,BOTTOM:40},this.mouseButtons={LEFT:n.MOUSE.LEFT,MIDDLE:n.MOUSE.MIDDLE,RIGHT:n.MOUSE.RIGHT},this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom,this.getPolarAngle=function(){return f.phi},this.getAzimuthalAngle=function(){return f.theta},this.saveState=function(){h.target0.copy(h.target),h.position0.copy(h.object.position),h.zoom0=h.object.zoom},this.reset=function(){h.target.copy(h.target0),h.object.position.copy(h.position0),h.object.zoom=h.zoom0,h.object.updateProjectionMatrix(),h.dispatchEvent(l),h.update(),d=p.NONE},this.update=(i=new n.Vector3,r=(new n.Quaternion).setFromUnitVectors(t.up,new n.Vector3(0,1,0)),s=r.clone().inverse(),a=new n.Vector3,o=new n.Quaternion,function(){var t=h.object.position;return i.copy(t).sub(h.target),i.applyQuaternion(r),f.setFromVector3(i),h.autoRotate&&d===p.NONE&&z(2*Math.PI/60/60*h.autoRotateSpeed),f.theta+=v.theta,f.phi+=v.phi,f.theta=Math.max(h.minAzimuthAngle,Math.min(h.maxAzimuthAngle,f.theta)),f.phi=Math.max(h.minPolarAngle,Math.min(h.maxPolarAngle,f.phi)),f.makeSafe(),f.radius*=g,f.radius=Math.max(h.minDistance,Math.min(h.maxDistance,f.radius)),h.target.add(y),i.setFromSpherical(f),i.applyQuaternion(s),t.copy(h.target).add(i),h.object.lookAt(h.target),!0===h.enableDamping?(v.theta*=1-h.dampingFactor,v.phi*=1-h.dampingFactor,y.multiplyScalar(1-h.dampingFactor)):(v.set(0,0,0),y.set(0,0,0)),g=1,!!(x||a.distanceToSquared(h.object.position)>m||8*(1-o.dot(h.object.quaternion))>m)&&(h.dispatchEvent(l),a.copy(h.object.position),o.copy(h.object.quaternion),x=!1,!0)}),this.dispose=function(){h.domElement.removeEventListener(\"contextmenu\",X,!1),h.domElement.removeEventListener(\"mousedown\",V,!1),h.domElement.removeEventListener(\"wheel\",H,!1),h.domElement.removeEventListener(\"touchstart\",j,!1),h.domElement.removeEventListener(\"touchend\",q,!1),h.domElement.removeEventListener(\"touchmove\",W,!1),document.removeEventListener(\"mousemove\",U,!1),document.removeEventListener(\"mouseup\",F,!1),window.removeEventListener(\"keydown\",G,!1)};var h=this,l={type:\"change\"},c={type:\"start\"},u={type:\"end\"},p={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_DOLLY_PAN:4},d=p.NONE,m=1e-6,f=new n.Spherical,v=new n.Spherical,g=1,y=new n.Vector3,x=!1,b=new n.Vector2,w=new n.Vector2,M=new n.Vector2,_=new n.Vector2,S=new n.Vector2,E=new n.Vector2,T=new n.Vector2,L=new n.Vector2,A=new n.Vector2;function P(){return Math.pow(.95,h.zoomSpeed)}function z(t){v.theta-=t}function N(t){v.phi-=t}var R,C=(R=new n.Vector3,function(t,e){R.setFromMatrixColumn(e,0),R.multiplyScalar(-t),y.add(R)}),I=function(){var t=new n.Vector3;return function(e,i){!0===h.screenSpacePanning?t.setFromMatrixColumn(i,1):(t.setFromMatrixColumn(i,0),t.crossVectors(h.object.up,t)),t.multiplyScalar(e),y.add(t)}}(),O=function(){var t=new n.Vector3;return function(e,i){var n=h.domElement===document?h.domElement.body:h.domElement;if(h.object.isPerspectiveCamera){var r=h.object.position;t.copy(r).sub(h.target);var s=t.length();s*=Math.tan(h.object.fov/2*Math.PI/180),C(2*e*s/n.clientHeight,h.object.matrix),I(2*i*s/n.clientHeight,h.object.matrix)}else h.object.isOrthographicCamera?(C(e*(h.object.right-h.object.left)/h.object.zoom/n.clientWidth,h.object.matrix),I(i*(h.object.top-h.object.bottom)/h.object.zoom/n.clientHeight,h.object.matrix)):(console.warn(\"WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.\"),h.enablePan=!1)}}();function k(t){h.object.isPerspectiveCamera?g/=t:h.object.isOrthographicCamera?(h.object.zoom=Math.max(h.minZoom,Math.min(h.maxZoom,h.object.zoom*t)),h.object.updateProjectionMatrix(),x=!0):(console.warn(\"WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.\"),h.enableZoom=!1)}function D(t){h.object.isPerspectiveCamera?g*=t:h.object.isOrthographicCamera?(h.object.zoom=Math.max(h.minZoom,Math.min(h.maxZoom,h.object.zoom/t)),h.object.updateProjectionMatrix(),x=!0):(console.warn(\"WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.\"),h.enableZoom=!1)}function B(t){_.set(t.clientX,t.clientY)}function V(t){if(!1!==h.enabled){switch(t.preventDefault(),h.domElement.focus?h.domElement.focus():window.focus(),t.button){case h.mouseButtons.LEFT:if(t.ctrlKey||t.metaKey||t.shiftKey){if(!1===h.enablePan)return;B(t),d=p.PAN}else{if(!1===h.enableRotate)return;!function(t){b.set(t.clientX,t.clientY)}(t),d=p.ROTATE}break;case h.mouseButtons.MIDDLE:if(!1===h.enableZoom)return;!function(t){T.set(t.clientX,t.clientY)}(t),d=p.DOLLY;break;case h.mouseButtons.RIGHT:if(!1===h.enablePan)return;B(t),d=p.PAN}d!==p.NONE&&(document.addEventListener(\"mousemove\",U,!1),document.addEventListener(\"mouseup\",F,!1),h.dispatchEvent(c))}}function U(t){if(!1!==h.enabled)switch(t.preventDefault(),d){case p.ROTATE:if(!1===h.enableRotate)return;!function(t){w.set(t.clientX,t.clientY),M.subVectors(w,b).multiplyScalar(h.rotateSpeed);var e=h.domElement===document?h.domElement.body:h.domElement;z(2*Math.PI*M.x/e.clientHeight),N(2*Math.PI*M.y/e.clientHeight),b.copy(w),h.update()}(t);break;case p.DOLLY:if(!1===h.enableZoom)return;!function(t){L.set(t.clientX,t.clientY),A.subVectors(L,T),A.y>0?k(P()):A.y<0&&D(P()),T.copy(L),h.update()}(t);break;case p.PAN:if(!1===h.enablePan)return;!function(t){S.set(t.clientX,t.clientY),E.subVectors(S,_).multiplyScalar(h.panSpeed),O(E.x,E.y),_.copy(S),h.update()}(t)}}function F(t){!1!==h.enabled&&(document.removeEventListener(\"mousemove\",U,!1),document.removeEventListener(\"mouseup\",F,!1),h.dispatchEvent(u),d=p.NONE)}function H(t){!1===h.enabled||!1===h.enableZoom||d!==p.NONE&&d!==p.ROTATE||(t.preventDefault(),t.stopPropagation(),h.dispatchEvent(c),function(t){t.deltaY<0?D(P()):t.deltaY>0&&k(P()),h.update()}(t),h.dispatchEvent(u))}function G(t){!1!==h.enabled&&!1!==h.enableKeys&&!1!==h.enablePan&&function(t){switch(t.preventDefault(),t.keyCode){case h.keys.UP:O(0,h.keyPanSpeed),h.update();break;case h.keys.BOTTOM:O(0,-h.keyPanSpeed),h.update();break;case h.keys.LEFT:O(h.keyPanSpeed,0),h.update();break;case h.keys.RIGHT:O(-h.keyPanSpeed,0),h.update()}}(t)}function j(t){if(!1!==h.enabled){switch(t.preventDefault(),t.touches.length){case 1:if(!1===h.enableRotate)return;!function(t){b.set(t.touches[0].pageX,t.touches[0].pageY)}(t),d=p.TOUCH_ROTATE;break;case 2:if(!1===h.enableZoom&&!1===h.enablePan)return;!function(t){if(h.enableZoom){var e=t.touches[0].pageX-t.touches[1].pageX,i=t.touches[0].pageY-t.touches[1].pageY,n=Math.sqrt(e*e+i*i);T.set(0,n)}if(h.enablePan){var r=.5*(t.touches[0].pageX+t.touches[1].pageX),s=.5*(t.touches[0].pageY+t.touches[1].pageY);_.set(r,s)}}(t),d=p.TOUCH_DOLLY_PAN;break;default:d=p.NONE}d!==p.NONE&&h.dispatchEvent(c)}}function W(t){if(!1!==h.enabled)switch(t.preventDefault(),t.stopPropagation(),t.touches.length){case 1:if(!1===h.enableRotate)return;if(d!==p.TOUCH_ROTATE)return;!function(t){w.set(t.touches[0].pageX,t.touches[0].pageY),M.subVectors(w,b).multiplyScalar(h.rotateSpeed);var e=h.domElement===document?h.domElement.body:h.domElement;z(2*Math.PI*M.x/e.clientHeight),N(2*Math.PI*M.y/e.clientHeight),b.copy(w),h.update()}(t);break;case 2:if(!1===h.enableZoom&&!1===h.enablePan)return;if(d!==p.TOUCH_DOLLY_PAN)return;!function(t){if(h.enableZoom){var e=t.touches[0].pageX-t.touches[1].pageX,i=t.touches[0].pageY-t.touches[1].pageY,n=Math.sqrt(e*e+i*i);L.set(0,n),A.set(0,Math.pow(L.y/T.y,h.zoomSpeed)),k(A.y),T.copy(L)}if(h.enablePan){var r=.5*(t.touches[0].pageX+t.touches[1].pageX),s=.5*(t.touches[0].pageY+t.touches[1].pageY);S.set(r,s),E.subVectors(S,_).multiplyScalar(h.panSpeed),O(E.x,E.y),_.copy(S)}h.update()}(t);break;default:d=p.NONE}}function q(t){!1!==h.enabled&&(h.dispatchEvent(u),d=p.NONE)}function X(t){!1!==h.enabled&&t.preventDefault()}h.domElement.addEventListener(\"contextmenu\",X,!1),h.domElement.addEventListener(\"mousedown\",V,!1),h.domElement.addEventListener(\"wheel\",H,!1),h.domElement.addEventListener(\"touchstart\",j,!1),h.domElement.addEventListener(\"touchend\",q,!1),h.domElement.addEventListener(\"touchmove\",W,!1),window.addEventListener(\"keydown\",G,!1),this.update()},n.OrbitControls.prototype=Object.create(n.EventDispatcher.prototype),n.OrbitControls.prototype.constructor=n.OrbitControls,Object.defineProperties(n.OrbitControls.prototype,{center:{get:function(){return console.warn(\"THREE.OrbitControls: .center has been renamed to .target\"),this.target}},noZoom:{get:function(){return console.warn(\"THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.\"),!this.enableZoom},set:function(t){console.warn(\"THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.\"),this.enableZoom=!t}},noRotate:{get:function(){return console.warn(\"THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.\"),!this.enableRotate},set:function(t){console.warn(\"THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.\"),this.enableRotate=!t}},noPan:{get:function(){return console.warn(\"THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.\"),!this.enablePan},set:function(t){console.warn(\"THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.\"),this.enablePan=!t}},noKeys:{get:function(){return console.warn(\"THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.\"),!this.enableKeys},set:function(t){console.warn(\"THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.\"),this.enableKeys=!t}},staticMoving:{get:function(){return console.warn(\"THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.\"),!this.enableDamping},set:function(t){console.warn(\"THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.\"),this.enableDamping=!t}},dynamicDampingFactor:{get:function(){return console.warn(\"THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.\"),this.dampingFactor},set:function(t){console.warn(\"THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.\"),this.dampingFactor=t}}}),t.exports=e.default=n.OrbitControls},function(t,e){t.exports=function(t,e){this.object=t,this.domElement=void 0!==e?e:document,this.enabled=!0,this.movementSpeed=1,this.lookSpeed=.005,this.lookVertical=!0,this.autoForward=!1,this.activeLook=!0,this.heightSpeed=!1,this.heightCoef=1,this.heightMin=0,this.heightMax=1,this.constrainVertical=!1,this.verticalMin=0,this.verticalMax=Math.PI,this.autoSpeedFactor=0,this.mouseX=0,this.mouseY=0,this.moveForward=!1,this.moveBackward=!1,this.moveLeft=!1,this.moveRight=!1,this.mouseDragOn=!1,this.viewHalfX=0,this.viewHalfY=0;var i,n=0,r=0,s=new THREE.Vector3,a=new THREE.Spherical,o=new THREE.Vector3;function h(t){t.preventDefault()}this.domElement!==document&&this.domElement.setAttribute(\"tabindex\",-1),this.handleResize=function(){this.domElement===document?(this.viewHalfX=window.innerWidth/2,this.viewHalfY=window.innerHeight/2):(this.viewHalfX=this.domElement.offsetWidth/2,this.viewHalfY=this.domElement.offsetHeight/2)},this.onMouseDown=function(t){if(this.domElement!==document&&this.domElement.focus(),t.preventDefault(),t.stopPropagation(),this.activeLook)switch(t.button){case 0:this.moveForward=!0;break;case 2:this.moveBackward=!0}this.mouseDragOn=!0},this.onMouseUp=function(t){if(t.preventDefault(),t.stopPropagation(),this.activeLook)switch(t.button){case 0:this.moveForward=!1;break;case 2:this.moveBackward=!1}this.mouseDragOn=!1},this.onMouseMove=function(t){this.domElement===document?(this.mouseX=t.pageX-this.viewHalfX,this.mouseY=t.pageY-this.viewHalfY):(this.mouseX=t.pageX-this.domElement.offsetLeft-this.viewHalfX,this.mouseY=t.pageY-this.domElement.offsetTop-this.viewHalfY)},this.onKeyDown=function(t){switch(t.keyCode){case 38:case 87:this.moveForward=!0;break;case 37:case 65:this.moveLeft=!0;break;case 40:case 83:this.moveBackward=!0;break;case 39:case 68:this.moveRight=!0;break;case 82:this.moveUp=!0;break;case 70:this.moveDown=!0}},this.onKeyUp=function(t){switch(t.keyCode){case 38:case 87:this.moveForward=!1;break;case 37:case 65:this.moveLeft=!1;break;case 40:case 83:this.moveBackward=!1;break;case 39:case 68:this.moveRight=!1;break;case 82:this.moveUp=!1;break;case 70:this.moveDown=!1}},this.lookAt=function(t,e,i){return t.isVector3?o.copy(t):o.set(t,e,i),this.object.lookAt(o),f(this),this},this.update=(i=new THREE.Vector3,function(t){if(!1!==this.enabled){if(this.heightSpeed){var e=THREE.Math.clamp(this.object.position.y,this.heightMin,this.heightMax)-this.heightMin;this.autoSpeedFactor=t*(e*this.heightCoef)}else this.autoSpeedFactor=0;var s=t*this.movementSpeed;(this.moveForward||this.autoForward&&!this.moveBackward)&&this.object.translateZ(-(s+this.autoSpeedFactor)),this.moveBackward&&this.object.translateZ(s),this.moveLeft&&this.object.translateX(-s),this.moveRight&&this.object.translateX(s),this.moveUp&&this.object.translateY(s),this.moveDown&&this.object.translateY(-s);var a=t*this.lookSpeed;this.activeLook||(a=0);var o=1;this.constrainVertical&&(o=Math.PI/(this.verticalMax-this.verticalMin)),r-=this.mouseX*a,this.lookVertical&&(n-=this.mouseY*a*o),n=Math.max(-85,Math.min(85,n));var h=THREE.Math.degToRad(90-n),l=THREE.Math.degToRad(r);this.constrainVertical&&(h=THREE.Math.mapLinear(h,0,Math.PI,this.verticalMin,this.verticalMax));var c=this.object.position;i.setFromSphericalCoords(1,h,l).add(c),this.object.lookAt(i)}}),this.dispose=function(){this.domElement.removeEventListener(\"contextmenu\",h,!1),this.domElement.removeEventListener(\"mousedown\",c,!1),this.domElement.removeEventListener(\"mousemove\",l,!1),this.domElement.removeEventListener(\"mouseup\",u,!1),window.removeEventListener(\"keydown\",p,!1),window.removeEventListener(\"keyup\",d,!1)};var l=m(this,this.onMouseMove),c=m(this,this.onMouseDown),u=m(this,this.onMouseUp),p=m(this,this.onKeyDown),d=m(this,this.onKeyUp);function m(t,e){return function(){e.apply(t,arguments)}}function f(t){var e=t.object.quaternion;s.set(0,0,-1).applyQuaternion(e),a.setFromVector3(s),n=90-THREE.Math.radToDeg(a.phi),r=THREE.Math.radToDeg(a.theta)}this.domElement.addEventListener(\"contextmenu\",h,!1),this.domElement.addEventListener(\"mousemove\",l,!1),this.domElement.addEventListener(\"mousedown\",c,!1),this.domElement.addEventListener(\"mouseup\",u,!1),window.addEventListener(\"keydown\",p,!1),window.addEventListener(\"keyup\",d,!1),this.handleResize(),f(this)}}]);","extractedComments":[]}